
rtostest.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001f8  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00010d28  08000200  08000200  00001200  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000aaf0  08010f40  08010f40  00011f40  2**5
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0801ba30  0801ba30  000596d4  2**0
                  CONTENTS
  4 .ARM          00000008  0801ba30  0801ba30  0001ca30  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0801ba38  0801ba38  000596d4  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0801ba38  0801ba38  0001ca38  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  0801ba3c  0801ba3c  0001ca3c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         0003c594  20000000  0801ba40  0001d000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .RxDecripSection 000000a0  2003c594  08057fd4  00059594  2**2
                  CONTENTS, ALLOC, LOAD, DATA
 10 .TxDecripSection 000000a0  2003c634  08058074  00059634  2**2
                  CONTENTS, ALLOC, LOAD, DATA
 11 .bss          000077ac  2003c6e0  08058114  000596e0  2**5
                  ALLOC
 12 ._user_heap_stack 00001004  20043e8c  08058114  00059e8c  2**0
                  ALLOC
 13 .ARM.attributes 0000002e  00000000  00000000  000596d4  2**0
                  CONTENTS, READONLY
 14 .debug_info   0002a3ac  00000000  00000000  00059702  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_abbrev 000056b3  00000000  00000000  00083aae  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_aranges 00002128  00000000  00000000  00089168  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_rnglists 00001985  00000000  00000000  0008b290  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_macro  00008607  00000000  00000000  0008cc15  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_line   00029a22  00000000  00000000  0009521c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_str    0011f2fe  00000000  00000000  000bec3e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .comment      00000086  00000000  00000000  001ddf3c  2**0
                  CONTENTS, READONLY
 22 .debug_frame  0000985c  00000000  00000000  001ddfc4  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 23 .debug_line_str 00000063  00000000  00000000  001e7820  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000200 <__do_global_dtors_aux>:
 8000200:	b510      	push	{r4, lr}
 8000202:	4c05      	ldr	r4, [pc, #20]	@ (8000218 <__do_global_dtors_aux+0x18>)
 8000204:	7823      	ldrb	r3, [r4, #0]
 8000206:	b933      	cbnz	r3, 8000216 <__do_global_dtors_aux+0x16>
 8000208:	4b04      	ldr	r3, [pc, #16]	@ (800021c <__do_global_dtors_aux+0x1c>)
 800020a:	b113      	cbz	r3, 8000212 <__do_global_dtors_aux+0x12>
 800020c:	4804      	ldr	r0, [pc, #16]	@ (8000220 <__do_global_dtors_aux+0x20>)
 800020e:	f3af 8000 	nop.w
 8000212:	2301      	movs	r3, #1
 8000214:	7023      	strb	r3, [r4, #0]
 8000216:	bd10      	pop	{r4, pc}
 8000218:	2003c6e0 	.word	0x2003c6e0
 800021c:	00000000 	.word	0x00000000
 8000220:	08010f10 	.word	0x08010f10

08000224 <frame_dummy>:
 8000224:	b508      	push	{r3, lr}
 8000226:	4b03      	ldr	r3, [pc, #12]	@ (8000234 <frame_dummy+0x10>)
 8000228:	b11b      	cbz	r3, 8000232 <frame_dummy+0xe>
 800022a:	4903      	ldr	r1, [pc, #12]	@ (8000238 <frame_dummy+0x14>)
 800022c:	4803      	ldr	r0, [pc, #12]	@ (800023c <frame_dummy+0x18>)
 800022e:	f3af 8000 	nop.w
 8000232:	bd08      	pop	{r3, pc}
 8000234:	00000000 	.word	0x00000000
 8000238:	2003c6e4 	.word	0x2003c6e4
 800023c:	08010f10 	.word	0x08010f10

08000240 <strlen>:
 8000240:	4603      	mov	r3, r0
 8000242:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000246:	2a00      	cmp	r2, #0
 8000248:	d1fb      	bne.n	8000242 <strlen+0x2>
 800024a:	1a18      	subs	r0, r3, r0
 800024c:	3801      	subs	r0, #1
 800024e:	4770      	bx	lr

08000250 <memchr>:
 8000250:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 8000254:	2a10      	cmp	r2, #16
 8000256:	db2b      	blt.n	80002b0 <memchr+0x60>
 8000258:	f010 0f07 	tst.w	r0, #7
 800025c:	d008      	beq.n	8000270 <memchr+0x20>
 800025e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000262:	3a01      	subs	r2, #1
 8000264:	428b      	cmp	r3, r1
 8000266:	d02d      	beq.n	80002c4 <memchr+0x74>
 8000268:	f010 0f07 	tst.w	r0, #7
 800026c:	b342      	cbz	r2, 80002c0 <memchr+0x70>
 800026e:	d1f6      	bne.n	800025e <memchr+0xe>
 8000270:	b4f0      	push	{r4, r5, r6, r7}
 8000272:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000276:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800027a:	f022 0407 	bic.w	r4, r2, #7
 800027e:	f07f 0700 	mvns.w	r7, #0
 8000282:	2300      	movs	r3, #0
 8000284:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000288:	3c08      	subs	r4, #8
 800028a:	ea85 0501 	eor.w	r5, r5, r1
 800028e:	ea86 0601 	eor.w	r6, r6, r1
 8000292:	fa85 f547 	uadd8	r5, r5, r7
 8000296:	faa3 f587 	sel	r5, r3, r7
 800029a:	fa86 f647 	uadd8	r6, r6, r7
 800029e:	faa5 f687 	sel	r6, r5, r7
 80002a2:	b98e      	cbnz	r6, 80002c8 <memchr+0x78>
 80002a4:	d1ee      	bne.n	8000284 <memchr+0x34>
 80002a6:	bcf0      	pop	{r4, r5, r6, r7}
 80002a8:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 80002ac:	f002 0207 	and.w	r2, r2, #7
 80002b0:	b132      	cbz	r2, 80002c0 <memchr+0x70>
 80002b2:	f810 3b01 	ldrb.w	r3, [r0], #1
 80002b6:	3a01      	subs	r2, #1
 80002b8:	ea83 0301 	eor.w	r3, r3, r1
 80002bc:	b113      	cbz	r3, 80002c4 <memchr+0x74>
 80002be:	d1f8      	bne.n	80002b2 <memchr+0x62>
 80002c0:	2000      	movs	r0, #0
 80002c2:	4770      	bx	lr
 80002c4:	3801      	subs	r0, #1
 80002c6:	4770      	bx	lr
 80002c8:	2d00      	cmp	r5, #0
 80002ca:	bf06      	itte	eq
 80002cc:	4635      	moveq	r5, r6
 80002ce:	3803      	subeq	r0, #3
 80002d0:	3807      	subne	r0, #7
 80002d2:	f015 0f01 	tst.w	r5, #1
 80002d6:	d107      	bne.n	80002e8 <memchr+0x98>
 80002d8:	3001      	adds	r0, #1
 80002da:	f415 7f80 	tst.w	r5, #256	@ 0x100
 80002de:	bf02      	ittt	eq
 80002e0:	3001      	addeq	r0, #1
 80002e2:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 80002e6:	3001      	addeq	r0, #1
 80002e8:	bcf0      	pop	{r4, r5, r6, r7}
 80002ea:	3801      	subs	r0, #1
 80002ec:	4770      	bx	lr
 80002ee:	bf00      	nop

080002f0 <__aeabi_uldivmod>:
 80002f0:	b953      	cbnz	r3, 8000308 <__aeabi_uldivmod+0x18>
 80002f2:	b94a      	cbnz	r2, 8000308 <__aeabi_uldivmod+0x18>
 80002f4:	2900      	cmp	r1, #0
 80002f6:	bf08      	it	eq
 80002f8:	2800      	cmpeq	r0, #0
 80002fa:	bf1c      	itt	ne
 80002fc:	f04f 31ff 	movne.w	r1, #4294967295
 8000300:	f04f 30ff 	movne.w	r0, #4294967295
 8000304:	f000 b96a 	b.w	80005dc <__aeabi_idiv0>
 8000308:	f1ad 0c08 	sub.w	ip, sp, #8
 800030c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000310:	f000 f806 	bl	8000320 <__udivmoddi4>
 8000314:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000318:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800031c:	b004      	add	sp, #16
 800031e:	4770      	bx	lr

08000320 <__udivmoddi4>:
 8000320:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000324:	9d08      	ldr	r5, [sp, #32]
 8000326:	460c      	mov	r4, r1
 8000328:	2b00      	cmp	r3, #0
 800032a:	d14e      	bne.n	80003ca <__udivmoddi4+0xaa>
 800032c:	4694      	mov	ip, r2
 800032e:	458c      	cmp	ip, r1
 8000330:	4686      	mov	lr, r0
 8000332:	fab2 f282 	clz	r2, r2
 8000336:	d962      	bls.n	80003fe <__udivmoddi4+0xde>
 8000338:	b14a      	cbz	r2, 800034e <__udivmoddi4+0x2e>
 800033a:	f1c2 0320 	rsb	r3, r2, #32
 800033e:	4091      	lsls	r1, r2
 8000340:	fa20 f303 	lsr.w	r3, r0, r3
 8000344:	fa0c fc02 	lsl.w	ip, ip, r2
 8000348:	4319      	orrs	r1, r3
 800034a:	fa00 fe02 	lsl.w	lr, r0, r2
 800034e:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000352:	fa1f f68c 	uxth.w	r6, ip
 8000356:	fbb1 f4f7 	udiv	r4, r1, r7
 800035a:	ea4f 431e 	mov.w	r3, lr, lsr #16
 800035e:	fb07 1114 	mls	r1, r7, r4, r1
 8000362:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000366:	fb04 f106 	mul.w	r1, r4, r6
 800036a:	4299      	cmp	r1, r3
 800036c:	d90a      	bls.n	8000384 <__udivmoddi4+0x64>
 800036e:	eb1c 0303 	adds.w	r3, ip, r3
 8000372:	f104 30ff 	add.w	r0, r4, #4294967295
 8000376:	f080 8112 	bcs.w	800059e <__udivmoddi4+0x27e>
 800037a:	4299      	cmp	r1, r3
 800037c:	f240 810f 	bls.w	800059e <__udivmoddi4+0x27e>
 8000380:	3c02      	subs	r4, #2
 8000382:	4463      	add	r3, ip
 8000384:	1a59      	subs	r1, r3, r1
 8000386:	fa1f f38e 	uxth.w	r3, lr
 800038a:	fbb1 f0f7 	udiv	r0, r1, r7
 800038e:	fb07 1110 	mls	r1, r7, r0, r1
 8000392:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000396:	fb00 f606 	mul.w	r6, r0, r6
 800039a:	429e      	cmp	r6, r3
 800039c:	d90a      	bls.n	80003b4 <__udivmoddi4+0x94>
 800039e:	eb1c 0303 	adds.w	r3, ip, r3
 80003a2:	f100 31ff 	add.w	r1, r0, #4294967295
 80003a6:	f080 80fc 	bcs.w	80005a2 <__udivmoddi4+0x282>
 80003aa:	429e      	cmp	r6, r3
 80003ac:	f240 80f9 	bls.w	80005a2 <__udivmoddi4+0x282>
 80003b0:	4463      	add	r3, ip
 80003b2:	3802      	subs	r0, #2
 80003b4:	1b9b      	subs	r3, r3, r6
 80003b6:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 80003ba:	2100      	movs	r1, #0
 80003bc:	b11d      	cbz	r5, 80003c6 <__udivmoddi4+0xa6>
 80003be:	40d3      	lsrs	r3, r2
 80003c0:	2200      	movs	r2, #0
 80003c2:	e9c5 3200 	strd	r3, r2, [r5]
 80003c6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80003ca:	428b      	cmp	r3, r1
 80003cc:	d905      	bls.n	80003da <__udivmoddi4+0xba>
 80003ce:	b10d      	cbz	r5, 80003d4 <__udivmoddi4+0xb4>
 80003d0:	e9c5 0100 	strd	r0, r1, [r5]
 80003d4:	2100      	movs	r1, #0
 80003d6:	4608      	mov	r0, r1
 80003d8:	e7f5      	b.n	80003c6 <__udivmoddi4+0xa6>
 80003da:	fab3 f183 	clz	r1, r3
 80003de:	2900      	cmp	r1, #0
 80003e0:	d146      	bne.n	8000470 <__udivmoddi4+0x150>
 80003e2:	42a3      	cmp	r3, r4
 80003e4:	d302      	bcc.n	80003ec <__udivmoddi4+0xcc>
 80003e6:	4290      	cmp	r0, r2
 80003e8:	f0c0 80f0 	bcc.w	80005cc <__udivmoddi4+0x2ac>
 80003ec:	1a86      	subs	r6, r0, r2
 80003ee:	eb64 0303 	sbc.w	r3, r4, r3
 80003f2:	2001      	movs	r0, #1
 80003f4:	2d00      	cmp	r5, #0
 80003f6:	d0e6      	beq.n	80003c6 <__udivmoddi4+0xa6>
 80003f8:	e9c5 6300 	strd	r6, r3, [r5]
 80003fc:	e7e3      	b.n	80003c6 <__udivmoddi4+0xa6>
 80003fe:	2a00      	cmp	r2, #0
 8000400:	f040 8090 	bne.w	8000524 <__udivmoddi4+0x204>
 8000404:	eba1 040c 	sub.w	r4, r1, ip
 8000408:	ea4f 481c 	mov.w	r8, ip, lsr #16
 800040c:	fa1f f78c 	uxth.w	r7, ip
 8000410:	2101      	movs	r1, #1
 8000412:	fbb4 f6f8 	udiv	r6, r4, r8
 8000416:	ea4f 431e 	mov.w	r3, lr, lsr #16
 800041a:	fb08 4416 	mls	r4, r8, r6, r4
 800041e:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000422:	fb07 f006 	mul.w	r0, r7, r6
 8000426:	4298      	cmp	r0, r3
 8000428:	d908      	bls.n	800043c <__udivmoddi4+0x11c>
 800042a:	eb1c 0303 	adds.w	r3, ip, r3
 800042e:	f106 34ff 	add.w	r4, r6, #4294967295
 8000432:	d202      	bcs.n	800043a <__udivmoddi4+0x11a>
 8000434:	4298      	cmp	r0, r3
 8000436:	f200 80cd 	bhi.w	80005d4 <__udivmoddi4+0x2b4>
 800043a:	4626      	mov	r6, r4
 800043c:	1a1c      	subs	r4, r3, r0
 800043e:	fa1f f38e 	uxth.w	r3, lr
 8000442:	fbb4 f0f8 	udiv	r0, r4, r8
 8000446:	fb08 4410 	mls	r4, r8, r0, r4
 800044a:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 800044e:	fb00 f707 	mul.w	r7, r0, r7
 8000452:	429f      	cmp	r7, r3
 8000454:	d908      	bls.n	8000468 <__udivmoddi4+0x148>
 8000456:	eb1c 0303 	adds.w	r3, ip, r3
 800045a:	f100 34ff 	add.w	r4, r0, #4294967295
 800045e:	d202      	bcs.n	8000466 <__udivmoddi4+0x146>
 8000460:	429f      	cmp	r7, r3
 8000462:	f200 80b0 	bhi.w	80005c6 <__udivmoddi4+0x2a6>
 8000466:	4620      	mov	r0, r4
 8000468:	1bdb      	subs	r3, r3, r7
 800046a:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 800046e:	e7a5      	b.n	80003bc <__udivmoddi4+0x9c>
 8000470:	f1c1 0620 	rsb	r6, r1, #32
 8000474:	408b      	lsls	r3, r1
 8000476:	fa22 f706 	lsr.w	r7, r2, r6
 800047a:	431f      	orrs	r7, r3
 800047c:	fa20 fc06 	lsr.w	ip, r0, r6
 8000480:	fa04 f301 	lsl.w	r3, r4, r1
 8000484:	ea43 030c 	orr.w	r3, r3, ip
 8000488:	40f4      	lsrs	r4, r6
 800048a:	fa00 f801 	lsl.w	r8, r0, r1
 800048e:	0c38      	lsrs	r0, r7, #16
 8000490:	ea4f 4913 	mov.w	r9, r3, lsr #16
 8000494:	fbb4 fef0 	udiv	lr, r4, r0
 8000498:	fa1f fc87 	uxth.w	ip, r7
 800049c:	fb00 441e 	mls	r4, r0, lr, r4
 80004a0:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 80004a4:	fb0e f90c 	mul.w	r9, lr, ip
 80004a8:	45a1      	cmp	r9, r4
 80004aa:	fa02 f201 	lsl.w	r2, r2, r1
 80004ae:	d90a      	bls.n	80004c6 <__udivmoddi4+0x1a6>
 80004b0:	193c      	adds	r4, r7, r4
 80004b2:	f10e 3aff 	add.w	sl, lr, #4294967295
 80004b6:	f080 8084 	bcs.w	80005c2 <__udivmoddi4+0x2a2>
 80004ba:	45a1      	cmp	r9, r4
 80004bc:	f240 8081 	bls.w	80005c2 <__udivmoddi4+0x2a2>
 80004c0:	f1ae 0e02 	sub.w	lr, lr, #2
 80004c4:	443c      	add	r4, r7
 80004c6:	eba4 0409 	sub.w	r4, r4, r9
 80004ca:	fa1f f983 	uxth.w	r9, r3
 80004ce:	fbb4 f3f0 	udiv	r3, r4, r0
 80004d2:	fb00 4413 	mls	r4, r0, r3, r4
 80004d6:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 80004da:	fb03 fc0c 	mul.w	ip, r3, ip
 80004de:	45a4      	cmp	ip, r4
 80004e0:	d907      	bls.n	80004f2 <__udivmoddi4+0x1d2>
 80004e2:	193c      	adds	r4, r7, r4
 80004e4:	f103 30ff 	add.w	r0, r3, #4294967295
 80004e8:	d267      	bcs.n	80005ba <__udivmoddi4+0x29a>
 80004ea:	45a4      	cmp	ip, r4
 80004ec:	d965      	bls.n	80005ba <__udivmoddi4+0x29a>
 80004ee:	3b02      	subs	r3, #2
 80004f0:	443c      	add	r4, r7
 80004f2:	ea43 400e 	orr.w	r0, r3, lr, lsl #16
 80004f6:	fba0 9302 	umull	r9, r3, r0, r2
 80004fa:	eba4 040c 	sub.w	r4, r4, ip
 80004fe:	429c      	cmp	r4, r3
 8000500:	46ce      	mov	lr, r9
 8000502:	469c      	mov	ip, r3
 8000504:	d351      	bcc.n	80005aa <__udivmoddi4+0x28a>
 8000506:	d04e      	beq.n	80005a6 <__udivmoddi4+0x286>
 8000508:	b155      	cbz	r5, 8000520 <__udivmoddi4+0x200>
 800050a:	ebb8 030e 	subs.w	r3, r8, lr
 800050e:	eb64 040c 	sbc.w	r4, r4, ip
 8000512:	fa04 f606 	lsl.w	r6, r4, r6
 8000516:	40cb      	lsrs	r3, r1
 8000518:	431e      	orrs	r6, r3
 800051a:	40cc      	lsrs	r4, r1
 800051c:	e9c5 6400 	strd	r6, r4, [r5]
 8000520:	2100      	movs	r1, #0
 8000522:	e750      	b.n	80003c6 <__udivmoddi4+0xa6>
 8000524:	f1c2 0320 	rsb	r3, r2, #32
 8000528:	fa20 f103 	lsr.w	r1, r0, r3
 800052c:	fa0c fc02 	lsl.w	ip, ip, r2
 8000530:	fa24 f303 	lsr.w	r3, r4, r3
 8000534:	4094      	lsls	r4, r2
 8000536:	430c      	orrs	r4, r1
 8000538:	ea4f 481c 	mov.w	r8, ip, lsr #16
 800053c:	fa00 fe02 	lsl.w	lr, r0, r2
 8000540:	fa1f f78c 	uxth.w	r7, ip
 8000544:	fbb3 f0f8 	udiv	r0, r3, r8
 8000548:	fb08 3110 	mls	r1, r8, r0, r3
 800054c:	0c23      	lsrs	r3, r4, #16
 800054e:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000552:	fb00 f107 	mul.w	r1, r0, r7
 8000556:	4299      	cmp	r1, r3
 8000558:	d908      	bls.n	800056c <__udivmoddi4+0x24c>
 800055a:	eb1c 0303 	adds.w	r3, ip, r3
 800055e:	f100 36ff 	add.w	r6, r0, #4294967295
 8000562:	d22c      	bcs.n	80005be <__udivmoddi4+0x29e>
 8000564:	4299      	cmp	r1, r3
 8000566:	d92a      	bls.n	80005be <__udivmoddi4+0x29e>
 8000568:	3802      	subs	r0, #2
 800056a:	4463      	add	r3, ip
 800056c:	1a5b      	subs	r3, r3, r1
 800056e:	b2a4      	uxth	r4, r4
 8000570:	fbb3 f1f8 	udiv	r1, r3, r8
 8000574:	fb08 3311 	mls	r3, r8, r1, r3
 8000578:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 800057c:	fb01 f307 	mul.w	r3, r1, r7
 8000580:	42a3      	cmp	r3, r4
 8000582:	d908      	bls.n	8000596 <__udivmoddi4+0x276>
 8000584:	eb1c 0404 	adds.w	r4, ip, r4
 8000588:	f101 36ff 	add.w	r6, r1, #4294967295
 800058c:	d213      	bcs.n	80005b6 <__udivmoddi4+0x296>
 800058e:	42a3      	cmp	r3, r4
 8000590:	d911      	bls.n	80005b6 <__udivmoddi4+0x296>
 8000592:	3902      	subs	r1, #2
 8000594:	4464      	add	r4, ip
 8000596:	1ae4      	subs	r4, r4, r3
 8000598:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 800059c:	e739      	b.n	8000412 <__udivmoddi4+0xf2>
 800059e:	4604      	mov	r4, r0
 80005a0:	e6f0      	b.n	8000384 <__udivmoddi4+0x64>
 80005a2:	4608      	mov	r0, r1
 80005a4:	e706      	b.n	80003b4 <__udivmoddi4+0x94>
 80005a6:	45c8      	cmp	r8, r9
 80005a8:	d2ae      	bcs.n	8000508 <__udivmoddi4+0x1e8>
 80005aa:	ebb9 0e02 	subs.w	lr, r9, r2
 80005ae:	eb63 0c07 	sbc.w	ip, r3, r7
 80005b2:	3801      	subs	r0, #1
 80005b4:	e7a8      	b.n	8000508 <__udivmoddi4+0x1e8>
 80005b6:	4631      	mov	r1, r6
 80005b8:	e7ed      	b.n	8000596 <__udivmoddi4+0x276>
 80005ba:	4603      	mov	r3, r0
 80005bc:	e799      	b.n	80004f2 <__udivmoddi4+0x1d2>
 80005be:	4630      	mov	r0, r6
 80005c0:	e7d4      	b.n	800056c <__udivmoddi4+0x24c>
 80005c2:	46d6      	mov	lr, sl
 80005c4:	e77f      	b.n	80004c6 <__udivmoddi4+0x1a6>
 80005c6:	4463      	add	r3, ip
 80005c8:	3802      	subs	r0, #2
 80005ca:	e74d      	b.n	8000468 <__udivmoddi4+0x148>
 80005cc:	4606      	mov	r6, r0
 80005ce:	4623      	mov	r3, r4
 80005d0:	4608      	mov	r0, r1
 80005d2:	e70f      	b.n	80003f4 <__udivmoddi4+0xd4>
 80005d4:	3e02      	subs	r6, #2
 80005d6:	4463      	add	r3, ip
 80005d8:	e730      	b.n	800043c <__udivmoddi4+0x11c>
 80005da:	bf00      	nop

080005dc <__aeabi_idiv0>:
 80005dc:	4770      	bx	lr
 80005de:	bf00      	nop

080005e0 <SCB_EnableICache>:
/**
  \brief   Enable I-Cache
  \details Turns on I-Cache
  */
__STATIC_INLINE void SCB_EnableICache (void)
{
 80005e0:	b480      	push	{r7}
 80005e2:	af00      	add	r7, sp, #0
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__STATIC_FORCEINLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
 80005e4:	f3bf 8f4f 	dsb	sy
}
 80005e8:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 80005ea:	f3bf 8f6f 	isb	sy
}
 80005ee:	bf00      	nop
  #if defined (__ICACHE_PRESENT) && (__ICACHE_PRESENT == 1U)
    __DSB();
    __ISB();
    SCB->ICIALLU = 0UL;                     /* invalidate I-Cache */
 80005f0:	4b0d      	ldr	r3, [pc, #52]	@ (8000628 <SCB_EnableICache+0x48>)
 80005f2:	2200      	movs	r2, #0
 80005f4:	f8c3 2250 	str.w	r2, [r3, #592]	@ 0x250
  __ASM volatile ("dsb 0xF":::"memory");
 80005f8:	f3bf 8f4f 	dsb	sy
}
 80005fc:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 80005fe:	f3bf 8f6f 	isb	sy
}
 8000602:	bf00      	nop
    __DSB();
    __ISB();
    SCB->CCR |=  (uint32_t)SCB_CCR_IC_Msk;  /* enable I-Cache */
 8000604:	4b08      	ldr	r3, [pc, #32]	@ (8000628 <SCB_EnableICache+0x48>)
 8000606:	695b      	ldr	r3, [r3, #20]
 8000608:	4a07      	ldr	r2, [pc, #28]	@ (8000628 <SCB_EnableICache+0x48>)
 800060a:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800060e:	6153      	str	r3, [r2, #20]
  __ASM volatile ("dsb 0xF":::"memory");
 8000610:	f3bf 8f4f 	dsb	sy
}
 8000614:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 8000616:	f3bf 8f6f 	isb	sy
}
 800061a:	bf00      	nop
    __DSB();
    __ISB();
  #endif
}
 800061c:	bf00      	nop
 800061e:	46bd      	mov	sp, r7
 8000620:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000624:	4770      	bx	lr
 8000626:	bf00      	nop
 8000628:	e000ed00 	.word	0xe000ed00

0800062c <SCB_EnableDCache>:
/**
  \brief   Enable D-Cache
  \details Turns on D-Cache
  */
__STATIC_INLINE void SCB_EnableDCache (void)
{
 800062c:	b480      	push	{r7}
 800062e:	b085      	sub	sp, #20
 8000630:	af00      	add	r7, sp, #0
  #if defined (__DCACHE_PRESENT) && (__DCACHE_PRESENT == 1U)
    uint32_t ccsidr;
    uint32_t sets;
    uint32_t ways;

    SCB->CSSELR = 0U; /*(0U << 1U) | 0U;*/  /* Level 1 data cache */
 8000632:	4b1f      	ldr	r3, [pc, #124]	@ (80006b0 <SCB_EnableDCache+0x84>)
 8000634:	2200      	movs	r2, #0
 8000636:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
  __ASM volatile ("dsb 0xF":::"memory");
 800063a:	f3bf 8f4f 	dsb	sy
}
 800063e:	bf00      	nop
    __DSB();

    ccsidr = SCB->CCSIDR;
 8000640:	4b1b      	ldr	r3, [pc, #108]	@ (80006b0 <SCB_EnableDCache+0x84>)
 8000642:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8000646:	607b      	str	r3, [r7, #4]

                                            /* invalidate D-Cache */
    sets = (uint32_t)(CCSIDR_SETS(ccsidr));
 8000648:	687b      	ldr	r3, [r7, #4]
 800064a:	0b5b      	lsrs	r3, r3, #13
 800064c:	f3c3 030e 	ubfx	r3, r3, #0, #15
 8000650:	60fb      	str	r3, [r7, #12]
    do {
      ways = (uint32_t)(CCSIDR_WAYS(ccsidr));
 8000652:	687b      	ldr	r3, [r7, #4]
 8000654:	08db      	lsrs	r3, r3, #3
 8000656:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800065a:	60bb      	str	r3, [r7, #8]
      do {
        SCB->DCISW = (((sets << SCB_DCISW_SET_Pos) & SCB_DCISW_SET_Msk) |
 800065c:	68fb      	ldr	r3, [r7, #12]
 800065e:	015a      	lsls	r2, r3, #5
 8000660:	f643 73e0 	movw	r3, #16352	@ 0x3fe0
 8000664:	4013      	ands	r3, r2
                      ((ways << SCB_DCISW_WAY_Pos) & SCB_DCISW_WAY_Msk)  );
 8000666:	68ba      	ldr	r2, [r7, #8]
 8000668:	0792      	lsls	r2, r2, #30
        SCB->DCISW = (((sets << SCB_DCISW_SET_Pos) & SCB_DCISW_SET_Msk) |
 800066a:	4911      	ldr	r1, [pc, #68]	@ (80006b0 <SCB_EnableDCache+0x84>)
 800066c:	4313      	orrs	r3, r2
 800066e:	f8c1 3260 	str.w	r3, [r1, #608]	@ 0x260
        #if defined ( __CC_ARM )
          __schedule_barrier();
        #endif
      } while (ways-- != 0U);
 8000672:	68bb      	ldr	r3, [r7, #8]
 8000674:	1e5a      	subs	r2, r3, #1
 8000676:	60ba      	str	r2, [r7, #8]
 8000678:	2b00      	cmp	r3, #0
 800067a:	d1ef      	bne.n	800065c <SCB_EnableDCache+0x30>
    } while(sets-- != 0U);
 800067c:	68fb      	ldr	r3, [r7, #12]
 800067e:	1e5a      	subs	r2, r3, #1
 8000680:	60fa      	str	r2, [r7, #12]
 8000682:	2b00      	cmp	r3, #0
 8000684:	d1e5      	bne.n	8000652 <SCB_EnableDCache+0x26>
  __ASM volatile ("dsb 0xF":::"memory");
 8000686:	f3bf 8f4f 	dsb	sy
}
 800068a:	bf00      	nop
    __DSB();

    SCB->CCR |=  (uint32_t)SCB_CCR_DC_Msk;  /* enable D-Cache */
 800068c:	4b08      	ldr	r3, [pc, #32]	@ (80006b0 <SCB_EnableDCache+0x84>)
 800068e:	695b      	ldr	r3, [r3, #20]
 8000690:	4a07      	ldr	r2, [pc, #28]	@ (80006b0 <SCB_EnableDCache+0x84>)
 8000692:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8000696:	6153      	str	r3, [r2, #20]
  __ASM volatile ("dsb 0xF":::"memory");
 8000698:	f3bf 8f4f 	dsb	sy
}
 800069c:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 800069e:	f3bf 8f6f 	isb	sy
}
 80006a2:	bf00      	nop

    __DSB();
    __ISB();
  #endif
}
 80006a4:	bf00      	nop
 80006a6:	3714      	adds	r7, #20
 80006a8:	46bd      	mov	sp, r7
 80006aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80006ae:	4770      	bx	lr
 80006b0:	e000ed00 	.word	0xe000ed00

080006b4 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80006b4:	b580      	push	{r7, lr}
 80006b6:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* Enable the CPU Cache */

  /* Enable I-Cache---------------------------------------------------------*/
  SCB_EnableICache();
 80006b8:	f7ff ff92 	bl	80005e0 <SCB_EnableICache>

  /* Enable D-Cache---------------------------------------------------------*/
  SCB_EnableDCache();
 80006bc:	f7ff ffb6 	bl	800062c <SCB_EnableDCache>

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80006c0:	f001 fbeb 	bl	8001e9a <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80006c4:	f000 f886 	bl	80007d4 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80006c8:	f000 fa58 	bl	8000b7c <MX_GPIO_Init>
  MX_ETH_Init();
 80006cc:	f000 f91c 	bl	8000908 <MX_ETH_Init>
  MX_USART3_UART_Init();
 80006d0:	f000 f9f6 	bl	8000ac0 <MX_USART3_UART_Init>
  MX_USB_OTG_FS_PCD_Init();
 80006d4:	f000 fa24 	bl	8000b20 <MX_USB_OTG_FS_PCD_Init>
  MX_I2C2_Init();
 80006d8:	f000 f964 	bl	80009a4 <MX_I2C2_Init>
  MX_DAC_Init();
 80006dc:	f000 f8ea 	bl	80008b4 <MX_DAC_Init>
  MX_TIM4_Init();
 80006e0:	f000 f9a0 	bl	8000a24 <MX_TIM4_Init>
  MX_X_CUBE_AI_Init();
 80006e4:	f009 fe4c 	bl	800a380 <MX_X_CUBE_AI_Init>
  /* USER CODE BEGIN 2 */
//  MX_USART3_UART_Init();
  ssd1306_Init();
 80006e8:	f000 fe1e 	bl	8001328 <ssd1306_Init>
  HAL_UART_Receive_IT(&huart3, (uint8_t*)image_buffer, 28 * 28);
 80006ec:	f44f 7244 	mov.w	r2, #784	@ 0x310
 80006f0:	4924      	ldr	r1, [pc, #144]	@ (8000784 <main+0xd0>)
 80006f2:	4825      	ldr	r0, [pc, #148]	@ (8000788 <main+0xd4>)
 80006f4:	f005 f957 	bl	80059a6 <HAL_UART_Receive_IT>
  /* USER CODE END 2 */

  /* Init scheduler */
  osKernelInitialize();
 80006f8:	f006 fed0 	bl	800749c <osKernelInitialize>
  /* start timers, add new ones, ... */
  /* USER CODE END RTOS_TIMERS */

  /* USER CODE BEGIN RTOS_QUEUES */
//  xQueue_Image = xQueueCreate(1, IMAGE_SIZE);
  xQueue_DigitResult = xQueueCreate(1, 10);
 80006fc:	2200      	movs	r2, #0
 80006fe:	210a      	movs	r1, #10
 8000700:	2001      	movs	r0, #1
 8000702:	f007 f9e4 	bl	8007ace <xQueueGenericCreate>
 8000706:	4603      	mov	r3, r0
 8000708:	4a20      	ldr	r2, [pc, #128]	@ (800078c <main+0xd8>)
 800070a:	6013      	str	r3, [r2, #0]
  xQueue_Display = xQueueCreate(1, 20);
 800070c:	2200      	movs	r2, #0
 800070e:	2114      	movs	r1, #20
 8000710:	2001      	movs	r0, #1
 8000712:	f007 f9dc 	bl	8007ace <xQueueGenericCreate>
 8000716:	4603      	mov	r3, r0
 8000718:	4a1d      	ldr	r2, [pc, #116]	@ (8000790 <main+0xdc>)
 800071a:	6013      	str	r3, [r2, #0]
  xQueue_SoundCommand = xQueueCreate(1, 10);
 800071c:	2200      	movs	r2, #0
 800071e:	210a      	movs	r1, #10
 8000720:	2001      	movs	r0, #1
 8000722:	f007 f9d4 	bl	8007ace <xQueueGenericCreate>
 8000726:	4603      	mov	r3, r0
 8000728:	4a1a      	ldr	r2, [pc, #104]	@ (8000794 <main+0xe0>)
 800072a:	6013      	str	r3, [r2, #0]
  /* add queues, ... */
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* creation of Task01input */
  Task01inputHandle = osThreadNew(Taskuser, NULL, &Task01input_attributes);
 800072c:	4a1a      	ldr	r2, [pc, #104]	@ (8000798 <main+0xe4>)
 800072e:	2100      	movs	r1, #0
 8000730:	481a      	ldr	r0, [pc, #104]	@ (800079c <main+0xe8>)
 8000732:	f006 ff1d 	bl	8007570 <osThreadNew>
 8000736:	4603      	mov	r3, r0
 8000738:	4a19      	ldr	r2, [pc, #100]	@ (80007a0 <main+0xec>)
 800073a:	6013      	str	r3, [r2, #0]

  /* creation of Task02img */
  Task02imgHandle = osThreadNew(Task02image, NULL, &Task02img_attributes);
 800073c:	4a19      	ldr	r2, [pc, #100]	@ (80007a4 <main+0xf0>)
 800073e:	2100      	movs	r1, #0
 8000740:	4819      	ldr	r0, [pc, #100]	@ (80007a8 <main+0xf4>)
 8000742:	f006 ff15 	bl	8007570 <osThreadNew>
 8000746:	4603      	mov	r3, r0
 8000748:	4a18      	ldr	r2, [pc, #96]	@ (80007ac <main+0xf8>)
 800074a:	6013      	str	r3, [r2, #0]

  /* creation of Task03game */
  Task03gameHandle = osThreadNew(Task03logic, NULL, &Task03game_attributes);
 800074c:	4a18      	ldr	r2, [pc, #96]	@ (80007b0 <main+0xfc>)
 800074e:	2100      	movs	r1, #0
 8000750:	4818      	ldr	r0, [pc, #96]	@ (80007b4 <main+0x100>)
 8000752:	f006 ff0d 	bl	8007570 <osThreadNew>
 8000756:	4603      	mov	r3, r0
 8000758:	4a17      	ldr	r2, [pc, #92]	@ (80007b8 <main+0x104>)
 800075a:	6013      	str	r3, [r2, #0]

  /* creation of Task04oled */
  Task04oledHandle = osThreadNew(Task04display, NULL, &Task04oled_attributes);
 800075c:	4a17      	ldr	r2, [pc, #92]	@ (80007bc <main+0x108>)
 800075e:	2100      	movs	r1, #0
 8000760:	4817      	ldr	r0, [pc, #92]	@ (80007c0 <main+0x10c>)
 8000762:	f006 ff05 	bl	8007570 <osThreadNew>
 8000766:	4603      	mov	r3, r0
 8000768:	4a16      	ldr	r2, [pc, #88]	@ (80007c4 <main+0x110>)
 800076a:	6013      	str	r3, [r2, #0]

  /* creation of Task05music */
  Task05musicHandle = osThreadNew(Task05song, NULL, &Task05music_attributes);
 800076c:	4a16      	ldr	r2, [pc, #88]	@ (80007c8 <main+0x114>)
 800076e:	2100      	movs	r1, #0
 8000770:	4816      	ldr	r0, [pc, #88]	@ (80007cc <main+0x118>)
 8000772:	f006 fefd 	bl	8007570 <osThreadNew>
 8000776:	4603      	mov	r3, r0
 8000778:	4a15      	ldr	r2, [pc, #84]	@ (80007d0 <main+0x11c>)
 800077a:	6013      	str	r3, [r2, #0]
  /* USER CODE BEGIN RTOS_EVENTS */
  /* add events, ... */
  /* USER CODE END RTOS_EVENTS */

  /* Start scheduler */
  osKernelStart();
 800077c:	f006 fec2 	bl	8007504 <osKernelStart>

  /* We should never get here as control is now taken by the scheduler */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 8000780:	bf00      	nop
 8000782:	e7fd      	b.n	8000780 <main+0xcc>
 8000784:	2003c708 	.word	0x2003c708
 8000788:	2003cbc0 	.word	0x2003cbc0
 800078c:	2003c6fc 	.word	0x2003c6fc
 8000790:	2003c700 	.word	0x2003c700
 8000794:	2003c704 	.word	0x2003c704
 8000798:	080110cc 	.word	0x080110cc
 800079c:	08000d69 	.word	0x08000d69
 80007a0:	2003d128 	.word	0x2003d128
 80007a4:	080110f0 	.word	0x080110f0
 80007a8:	08000e61 	.word	0x08000e61
 80007ac:	2003d12c 	.word	0x2003d12c
 80007b0:	08011114 	.word	0x08011114
 80007b4:	08000f0d 	.word	0x08000f0d
 80007b8:	2003d130 	.word	0x2003d130
 80007bc:	08011138 	.word	0x08011138
 80007c0:	080010cd 	.word	0x080010cd
 80007c4:	2003d134 	.word	0x2003d134
 80007c8:	0801115c 	.word	0x0801115c
 80007cc:	080011e9 	.word	0x080011e9
 80007d0:	2003d138 	.word	0x2003d138

080007d4 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80007d4:	b580      	push	{r7, lr}
 80007d6:	b094      	sub	sp, #80	@ 0x50
 80007d8:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80007da:	f107 031c 	add.w	r3, r7, #28
 80007de:	2234      	movs	r2, #52	@ 0x34
 80007e0:	2100      	movs	r1, #0
 80007e2:	4618      	mov	r0, r3
 80007e4:	f00f fbe3 	bl	800ffae <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80007e8:	f107 0308 	add.w	r3, r7, #8
 80007ec:	2200      	movs	r2, #0
 80007ee:	601a      	str	r2, [r3, #0]
 80007f0:	605a      	str	r2, [r3, #4]
 80007f2:	609a      	str	r2, [r3, #8]
 80007f4:	60da      	str	r2, [r3, #12]
 80007f6:	611a      	str	r2, [r3, #16]

  /** Configure LSE Drive Capability
  */
  HAL_PWR_EnableBkUpAccess();
 80007f8:	f003 f9ae 	bl	8003b58 <HAL_PWR_EnableBkUpAccess>

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 80007fc:	4b2b      	ldr	r3, [pc, #172]	@ (80008ac <SystemClock_Config+0xd8>)
 80007fe:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000800:	4a2a      	ldr	r2, [pc, #168]	@ (80008ac <SystemClock_Config+0xd8>)
 8000802:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8000806:	6413      	str	r3, [r2, #64]	@ 0x40
 8000808:	4b28      	ldr	r3, [pc, #160]	@ (80008ac <SystemClock_Config+0xd8>)
 800080a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800080c:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8000810:	607b      	str	r3, [r7, #4]
 8000812:	687b      	ldr	r3, [r7, #4]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8000814:	4b26      	ldr	r3, [pc, #152]	@ (80008b0 <SystemClock_Config+0xdc>)
 8000816:	681b      	ldr	r3, [r3, #0]
 8000818:	4a25      	ldr	r2, [pc, #148]	@ (80008b0 <SystemClock_Config+0xdc>)
 800081a:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 800081e:	6013      	str	r3, [r2, #0]
 8000820:	4b23      	ldr	r3, [pc, #140]	@ (80008b0 <SystemClock_Config+0xdc>)
 8000822:	681b      	ldr	r3, [r3, #0]
 8000824:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 8000828:	603b      	str	r3, [r7, #0]
 800082a:	683b      	ldr	r3, [r7, #0]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 800082c:	2301      	movs	r3, #1
 800082e:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.HSEState = RCC_HSE_BYPASS;
 8000830:	f44f 23a0 	mov.w	r3, #327680	@ 0x50000
 8000834:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000836:	2302      	movs	r3, #2
 8000838:	637b      	str	r3, [r7, #52]	@ 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 800083a:	f44f 0380 	mov.w	r3, #4194304	@ 0x400000
 800083e:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLM = 4;
 8000840:	2304      	movs	r3, #4
 8000842:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLN = 216;
 8000844:	23d8      	movs	r3, #216	@ 0xd8
 8000846:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8000848:	2302      	movs	r3, #2
 800084a:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLQ = 9;
 800084c:	2309      	movs	r3, #9
 800084e:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLR = 2;
 8000850:	2302      	movs	r3, #2
 8000852:	64fb      	str	r3, [r7, #76]	@ 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000854:	f107 031c 	add.w	r3, r7, #28
 8000858:	4618      	mov	r0, r3
 800085a:	f003 f9dd 	bl	8003c18 <HAL_RCC_OscConfig>
 800085e:	4603      	mov	r3, r0
 8000860:	2b00      	cmp	r3, #0
 8000862:	d001      	beq.n	8000868 <SystemClock_Config+0x94>
  {
    Error_Handler();
 8000864:	f000 fd20 	bl	80012a8 <Error_Handler>
  }

  /** Activate the Over-Drive mode
  */
  if (HAL_PWREx_EnableOverDrive() != HAL_OK)
 8000868:	f003 f986 	bl	8003b78 <HAL_PWREx_EnableOverDrive>
 800086c:	4603      	mov	r3, r0
 800086e:	2b00      	cmp	r3, #0
 8000870:	d001      	beq.n	8000876 <SystemClock_Config+0xa2>
  {
    Error_Handler();
 8000872:	f000 fd19 	bl	80012a8 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000876:	230f      	movs	r3, #15
 8000878:	60bb      	str	r3, [r7, #8]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800087a:	2302      	movs	r3, #2
 800087c:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800087e:	2300      	movs	r3, #0
 8000880:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 8000882:	f44f 53a0 	mov.w	r3, #5120	@ 0x1400
 8000886:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 8000888:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 800088c:	61bb      	str	r3, [r7, #24]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_7) != HAL_OK)
 800088e:	f107 0308 	add.w	r3, r7, #8
 8000892:	2107      	movs	r1, #7
 8000894:	4618      	mov	r0, r3
 8000896:	f003 fc6d 	bl	8004174 <HAL_RCC_ClockConfig>
 800089a:	4603      	mov	r3, r0
 800089c:	2b00      	cmp	r3, #0
 800089e:	d001      	beq.n	80008a4 <SystemClock_Config+0xd0>
  {
    Error_Handler();
 80008a0:	f000 fd02 	bl	80012a8 <Error_Handler>
  }
}
 80008a4:	bf00      	nop
 80008a6:	3750      	adds	r7, #80	@ 0x50
 80008a8:	46bd      	mov	sp, r7
 80008aa:	bd80      	pop	{r7, pc}
 80008ac:	40023800 	.word	0x40023800
 80008b0:	40007000 	.word	0x40007000

080008b4 <MX_DAC_Init>:
  * @brief DAC Initialization Function
  * @param None
  * @retval None
  */
static void MX_DAC_Init(void)
{
 80008b4:	b580      	push	{r7, lr}
 80008b6:	b082      	sub	sp, #8
 80008b8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN DAC_Init 0 */

  /* USER CODE END DAC_Init 0 */

  DAC_ChannelConfTypeDef sConfig = {0};
 80008ba:	463b      	mov	r3, r7
 80008bc:	2200      	movs	r2, #0
 80008be:	601a      	str	r2, [r3, #0]
 80008c0:	605a      	str	r2, [r3, #4]

  /* USER CODE END DAC_Init 1 */

  /** DAC Initialization
  */
  hdac.Instance = DAC;
 80008c2:	4b0f      	ldr	r3, [pc, #60]	@ (8000900 <MX_DAC_Init+0x4c>)
 80008c4:	4a0f      	ldr	r2, [pc, #60]	@ (8000904 <MX_DAC_Init+0x50>)
 80008c6:	601a      	str	r2, [r3, #0]
  if (HAL_DAC_Init(&hdac) != HAL_OK)
 80008c8:	480d      	ldr	r0, [pc, #52]	@ (8000900 <MX_DAC_Init+0x4c>)
 80008ca:	f001 fc78 	bl	80021be <HAL_DAC_Init>
 80008ce:	4603      	mov	r3, r0
 80008d0:	2b00      	cmp	r3, #0
 80008d2:	d001      	beq.n	80008d8 <MX_DAC_Init+0x24>
  {
    Error_Handler();
 80008d4:	f000 fce8 	bl	80012a8 <Error_Handler>
  }

  /** DAC channel OUT1 config
  */
  sConfig.DAC_Trigger = DAC_TRIGGER_T4_TRGO;
 80008d8:	232c      	movs	r3, #44	@ 0x2c
 80008da:	603b      	str	r3, [r7, #0]
  sConfig.DAC_OutputBuffer = DAC_OUTPUTBUFFER_ENABLE;
 80008dc:	2300      	movs	r3, #0
 80008de:	607b      	str	r3, [r7, #4]
  if (HAL_DAC_ConfigChannel(&hdac, &sConfig, DAC_CHANNEL_1) != HAL_OK)
 80008e0:	463b      	mov	r3, r7
 80008e2:	2200      	movs	r2, #0
 80008e4:	4619      	mov	r1, r3
 80008e6:	4806      	ldr	r0, [pc, #24]	@ (8000900 <MX_DAC_Init+0x4c>)
 80008e8:	f001 fd2e 	bl	8002348 <HAL_DAC_ConfigChannel>
 80008ec:	4603      	mov	r3, r0
 80008ee:	2b00      	cmp	r3, #0
 80008f0:	d001      	beq.n	80008f6 <MX_DAC_Init+0x42>
  {
    Error_Handler();
 80008f2:	f000 fcd9 	bl	80012a8 <Error_Handler>
  }
  /* USER CODE BEGIN DAC_Init 2 */

  /* USER CODE END DAC_Init 2 */

}
 80008f6:	bf00      	nop
 80008f8:	3708      	adds	r7, #8
 80008fa:	46bd      	mov	sp, r7
 80008fc:	bd80      	pop	{r7, pc}
 80008fe:	bf00      	nop
 8000900:	2003ca5c 	.word	0x2003ca5c
 8000904:	40007400 	.word	0x40007400

08000908 <MX_ETH_Init>:
  * @brief ETH Initialization Function
  * @param None
  * @retval None
  */
static void MX_ETH_Init(void)
{
 8000908:	b580      	push	{r7, lr}
 800090a:	af00      	add	r7, sp, #0
   static uint8_t MACAddr[6];

  /* USER CODE BEGIN ETH_Init 1 */

  /* USER CODE END ETH_Init 1 */
  heth.Instance = ETH;
 800090c:	4b1f      	ldr	r3, [pc, #124]	@ (800098c <MX_ETH_Init+0x84>)
 800090e:	4a20      	ldr	r2, [pc, #128]	@ (8000990 <MX_ETH_Init+0x88>)
 8000910:	601a      	str	r2, [r3, #0]
  MACAddr[0] = 0x00;
 8000912:	4b20      	ldr	r3, [pc, #128]	@ (8000994 <MX_ETH_Init+0x8c>)
 8000914:	2200      	movs	r2, #0
 8000916:	701a      	strb	r2, [r3, #0]
  MACAddr[1] = 0x80;
 8000918:	4b1e      	ldr	r3, [pc, #120]	@ (8000994 <MX_ETH_Init+0x8c>)
 800091a:	2280      	movs	r2, #128	@ 0x80
 800091c:	705a      	strb	r2, [r3, #1]
  MACAddr[2] = 0xE1;
 800091e:	4b1d      	ldr	r3, [pc, #116]	@ (8000994 <MX_ETH_Init+0x8c>)
 8000920:	22e1      	movs	r2, #225	@ 0xe1
 8000922:	709a      	strb	r2, [r3, #2]
  MACAddr[3] = 0x00;
 8000924:	4b1b      	ldr	r3, [pc, #108]	@ (8000994 <MX_ETH_Init+0x8c>)
 8000926:	2200      	movs	r2, #0
 8000928:	70da      	strb	r2, [r3, #3]
  MACAddr[4] = 0x00;
 800092a:	4b1a      	ldr	r3, [pc, #104]	@ (8000994 <MX_ETH_Init+0x8c>)
 800092c:	2200      	movs	r2, #0
 800092e:	711a      	strb	r2, [r3, #4]
  MACAddr[5] = 0x00;
 8000930:	4b18      	ldr	r3, [pc, #96]	@ (8000994 <MX_ETH_Init+0x8c>)
 8000932:	2200      	movs	r2, #0
 8000934:	715a      	strb	r2, [r3, #5]
  heth.Init.MACAddr = &MACAddr[0];
 8000936:	4b15      	ldr	r3, [pc, #84]	@ (800098c <MX_ETH_Init+0x84>)
 8000938:	4a16      	ldr	r2, [pc, #88]	@ (8000994 <MX_ETH_Init+0x8c>)
 800093a:	605a      	str	r2, [r3, #4]
  heth.Init.MediaInterface = HAL_ETH_RMII_MODE;
 800093c:	4b13      	ldr	r3, [pc, #76]	@ (800098c <MX_ETH_Init+0x84>)
 800093e:	f44f 0200 	mov.w	r2, #8388608	@ 0x800000
 8000942:	609a      	str	r2, [r3, #8]
  heth.Init.TxDesc = DMATxDscrTab;
 8000944:	4b11      	ldr	r3, [pc, #68]	@ (800098c <MX_ETH_Init+0x84>)
 8000946:	4a14      	ldr	r2, [pc, #80]	@ (8000998 <MX_ETH_Init+0x90>)
 8000948:	60da      	str	r2, [r3, #12]
  heth.Init.RxDesc = DMARxDscrTab;
 800094a:	4b10      	ldr	r3, [pc, #64]	@ (800098c <MX_ETH_Init+0x84>)
 800094c:	4a13      	ldr	r2, [pc, #76]	@ (800099c <MX_ETH_Init+0x94>)
 800094e:	611a      	str	r2, [r3, #16]
  heth.Init.RxBuffLen = 1524;
 8000950:	4b0e      	ldr	r3, [pc, #56]	@ (800098c <MX_ETH_Init+0x84>)
 8000952:	f240 52f4 	movw	r2, #1524	@ 0x5f4
 8000956:	615a      	str	r2, [r3, #20]

  /* USER CODE BEGIN MACADDRESS */

  /* USER CODE END MACADDRESS */

  if (HAL_ETH_Init(&heth) != HAL_OK)
 8000958:	480c      	ldr	r0, [pc, #48]	@ (800098c <MX_ETH_Init+0x84>)
 800095a:	f001 fde1 	bl	8002520 <HAL_ETH_Init>
 800095e:	4603      	mov	r3, r0
 8000960:	2b00      	cmp	r3, #0
 8000962:	d001      	beq.n	8000968 <MX_ETH_Init+0x60>
  {
    Error_Handler();
 8000964:	f000 fca0 	bl	80012a8 <Error_Handler>
  }

  memset(&TxConfig, 0 , sizeof(ETH_TxPacketConfig));
 8000968:	2238      	movs	r2, #56	@ 0x38
 800096a:	2100      	movs	r1, #0
 800096c:	480c      	ldr	r0, [pc, #48]	@ (80009a0 <MX_ETH_Init+0x98>)
 800096e:	f00f fb1e 	bl	800ffae <memset>
  TxConfig.Attributes = ETH_TX_PACKETS_FEATURES_CSUM | ETH_TX_PACKETS_FEATURES_CRCPAD;
 8000972:	4b0b      	ldr	r3, [pc, #44]	@ (80009a0 <MX_ETH_Init+0x98>)
 8000974:	2221      	movs	r2, #33	@ 0x21
 8000976:	601a      	str	r2, [r3, #0]
  TxConfig.ChecksumCtrl = ETH_CHECKSUM_IPHDR_PAYLOAD_INSERT_PHDR_CALC;
 8000978:	4b09      	ldr	r3, [pc, #36]	@ (80009a0 <MX_ETH_Init+0x98>)
 800097a:	f44f 0240 	mov.w	r2, #12582912	@ 0xc00000
 800097e:	615a      	str	r2, [r3, #20]
  TxConfig.CRCPadCtrl = ETH_CRC_PAD_INSERT;
 8000980:	4b07      	ldr	r3, [pc, #28]	@ (80009a0 <MX_ETH_Init+0x98>)
 8000982:	2200      	movs	r2, #0
 8000984:	611a      	str	r2, [r3, #16]
  /* USER CODE BEGIN ETH_Init 2 */

  /* USER CODE END ETH_Init 2 */

}
 8000986:	bf00      	nop
 8000988:	bd80      	pop	{r7, pc}
 800098a:	bf00      	nop
 800098c:	2003ca70 	.word	0x2003ca70
 8000990:	40028000 	.word	0x40028000
 8000994:	2003d13c 	.word	0x2003d13c
 8000998:	2003c634 	.word	0x2003c634
 800099c:	2003c594 	.word	0x2003c594
 80009a0:	2003ca24 	.word	0x2003ca24

080009a4 <MX_I2C2_Init>:
  * @brief I2C2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C2_Init(void)
{
 80009a4:	b580      	push	{r7, lr}
 80009a6:	af00      	add	r7, sp, #0
  /* USER CODE END I2C2_Init 0 */

  /* USER CODE BEGIN I2C2_Init 1 */

  /* USER CODE END I2C2_Init 1 */
  hi2c2.Instance = I2C2;
 80009a8:	4b1b      	ldr	r3, [pc, #108]	@ (8000a18 <MX_I2C2_Init+0x74>)
 80009aa:	4a1c      	ldr	r2, [pc, #112]	@ (8000a1c <MX_I2C2_Init+0x78>)
 80009ac:	601a      	str	r2, [r3, #0]
  hi2c2.Init.Timing = 0x20404768;
 80009ae:	4b1a      	ldr	r3, [pc, #104]	@ (8000a18 <MX_I2C2_Init+0x74>)
 80009b0:	4a1b      	ldr	r2, [pc, #108]	@ (8000a20 <MX_I2C2_Init+0x7c>)
 80009b2:	605a      	str	r2, [r3, #4]
  hi2c2.Init.OwnAddress1 = 0;
 80009b4:	4b18      	ldr	r3, [pc, #96]	@ (8000a18 <MX_I2C2_Init+0x74>)
 80009b6:	2200      	movs	r2, #0
 80009b8:	609a      	str	r2, [r3, #8]
  hi2c2.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 80009ba:	4b17      	ldr	r3, [pc, #92]	@ (8000a18 <MX_I2C2_Init+0x74>)
 80009bc:	2201      	movs	r2, #1
 80009be:	60da      	str	r2, [r3, #12]
  hi2c2.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 80009c0:	4b15      	ldr	r3, [pc, #84]	@ (8000a18 <MX_I2C2_Init+0x74>)
 80009c2:	2200      	movs	r2, #0
 80009c4:	611a      	str	r2, [r3, #16]
  hi2c2.Init.OwnAddress2 = 0;
 80009c6:	4b14      	ldr	r3, [pc, #80]	@ (8000a18 <MX_I2C2_Init+0x74>)
 80009c8:	2200      	movs	r2, #0
 80009ca:	615a      	str	r2, [r3, #20]
  hi2c2.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 80009cc:	4b12      	ldr	r3, [pc, #72]	@ (8000a18 <MX_I2C2_Init+0x74>)
 80009ce:	2200      	movs	r2, #0
 80009d0:	619a      	str	r2, [r3, #24]
  hi2c2.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 80009d2:	4b11      	ldr	r3, [pc, #68]	@ (8000a18 <MX_I2C2_Init+0x74>)
 80009d4:	2200      	movs	r2, #0
 80009d6:	61da      	str	r2, [r3, #28]
  hi2c2.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 80009d8:	4b0f      	ldr	r3, [pc, #60]	@ (8000a18 <MX_I2C2_Init+0x74>)
 80009da:	2200      	movs	r2, #0
 80009dc:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c2) != HAL_OK)
 80009de:	480e      	ldr	r0, [pc, #56]	@ (8000a18 <MX_I2C2_Init+0x74>)
 80009e0:	f002 faca 	bl	8002f78 <HAL_I2C_Init>
 80009e4:	4603      	mov	r3, r0
 80009e6:	2b00      	cmp	r3, #0
 80009e8:	d001      	beq.n	80009ee <MX_I2C2_Init+0x4a>
  {
    Error_Handler();
 80009ea:	f000 fc5d 	bl	80012a8 <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c2, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 80009ee:	2100      	movs	r1, #0
 80009f0:	4809      	ldr	r0, [pc, #36]	@ (8000a18 <MX_I2C2_Init+0x74>)
 80009f2:	f002 fedf 	bl	80037b4 <HAL_I2CEx_ConfigAnalogFilter>
 80009f6:	4603      	mov	r3, r0
 80009f8:	2b00      	cmp	r3, #0
 80009fa:	d001      	beq.n	8000a00 <MX_I2C2_Init+0x5c>
  {
    Error_Handler();
 80009fc:	f000 fc54 	bl	80012a8 <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c2, 0) != HAL_OK)
 8000a00:	2100      	movs	r1, #0
 8000a02:	4805      	ldr	r0, [pc, #20]	@ (8000a18 <MX_I2C2_Init+0x74>)
 8000a04:	f002 ff21 	bl	800384a <HAL_I2CEx_ConfigDigitalFilter>
 8000a08:	4603      	mov	r3, r0
 8000a0a:	2b00      	cmp	r3, #0
 8000a0c:	d001      	beq.n	8000a12 <MX_I2C2_Init+0x6e>
  {
    Error_Handler();
 8000a0e:	f000 fc4b 	bl	80012a8 <Error_Handler>
  }
  /* USER CODE BEGIN I2C2_Init 2 */

  /* USER CODE END I2C2_Init 2 */

}
 8000a12:	bf00      	nop
 8000a14:	bd80      	pop	{r7, pc}
 8000a16:	bf00      	nop
 8000a18:	2003cb20 	.word	0x2003cb20
 8000a1c:	40005800 	.word	0x40005800
 8000a20:	20404768 	.word	0x20404768

08000a24 <MX_TIM4_Init>:
  * @brief TIM4 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM4_Init(void)
{
 8000a24:	b580      	push	{r7, lr}
 8000a26:	b088      	sub	sp, #32
 8000a28:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM4_Init 0 */

  /* USER CODE END TIM4_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8000a2a:	f107 0310 	add.w	r3, r7, #16
 8000a2e:	2200      	movs	r2, #0
 8000a30:	601a      	str	r2, [r3, #0]
 8000a32:	605a      	str	r2, [r3, #4]
 8000a34:	609a      	str	r2, [r3, #8]
 8000a36:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000a38:	1d3b      	adds	r3, r7, #4
 8000a3a:	2200      	movs	r2, #0
 8000a3c:	601a      	str	r2, [r3, #0]
 8000a3e:	605a      	str	r2, [r3, #4]
 8000a40:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM4_Init 1 */
  // top 1223 bot 1
  /* USER CODE END TIM4_Init 1 */
  htim4.Instance = TIM4;
 8000a42:	4b1d      	ldr	r3, [pc, #116]	@ (8000ab8 <MX_TIM4_Init+0x94>)
 8000a44:	4a1d      	ldr	r2, [pc, #116]	@ (8000abc <MX_TIM4_Init+0x98>)
 8000a46:	601a      	str	r2, [r3, #0]
  htim4.Init.Prescaler = 1223;
 8000a48:	4b1b      	ldr	r3, [pc, #108]	@ (8000ab8 <MX_TIM4_Init+0x94>)
 8000a4a:	f240 42c7 	movw	r2, #1223	@ 0x4c7
 8000a4e:	605a      	str	r2, [r3, #4]
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000a50:	4b19      	ldr	r3, [pc, #100]	@ (8000ab8 <MX_TIM4_Init+0x94>)
 8000a52:	2200      	movs	r2, #0
 8000a54:	609a      	str	r2, [r3, #8]
  htim4.Init.Period = 1;
 8000a56:	4b18      	ldr	r3, [pc, #96]	@ (8000ab8 <MX_TIM4_Init+0x94>)
 8000a58:	2201      	movs	r2, #1
 8000a5a:	60da      	str	r2, [r3, #12]
  htim4.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000a5c:	4b16      	ldr	r3, [pc, #88]	@ (8000ab8 <MX_TIM4_Init+0x94>)
 8000a5e:	2200      	movs	r2, #0
 8000a60:	611a      	str	r2, [r3, #16]
  htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000a62:	4b15      	ldr	r3, [pc, #84]	@ (8000ab8 <MX_TIM4_Init+0x94>)
 8000a64:	2200      	movs	r2, #0
 8000a66:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim4) != HAL_OK)
 8000a68:	4813      	ldr	r0, [pc, #76]	@ (8000ab8 <MX_TIM4_Init+0x94>)
 8000a6a:	f004 f9d1 	bl	8004e10 <HAL_TIM_Base_Init>
 8000a6e:	4603      	mov	r3, r0
 8000a70:	2b00      	cmp	r3, #0
 8000a72:	d001      	beq.n	8000a78 <MX_TIM4_Init+0x54>
  {
    Error_Handler();
 8000a74:	f000 fc18 	bl	80012a8 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000a78:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8000a7c:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_ConfigClockSource(&htim4, &sClockSourceConfig) != HAL_OK)
 8000a7e:	f107 0310 	add.w	r3, r7, #16
 8000a82:	4619      	mov	r1, r3
 8000a84:	480c      	ldr	r0, [pc, #48]	@ (8000ab8 <MX_TIM4_Init+0x94>)
 8000a86:	f004 fbc9 	bl	800521c <HAL_TIM_ConfigClockSource>
 8000a8a:	4603      	mov	r3, r0
 8000a8c:	2b00      	cmp	r3, #0
 8000a8e:	d001      	beq.n	8000a94 <MX_TIM4_Init+0x70>
  {
    Error_Handler();
 8000a90:	f000 fc0a 	bl	80012a8 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_UPDATE;
 8000a94:	2320      	movs	r3, #32
 8000a96:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000a98:	2300      	movs	r3, #0
 8000a9a:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig) != HAL_OK)
 8000a9c:	1d3b      	adds	r3, r7, #4
 8000a9e:	4619      	mov	r1, r3
 8000aa0:	4805      	ldr	r0, [pc, #20]	@ (8000ab8 <MX_TIM4_Init+0x94>)
 8000aa2:	f004 fdfd 	bl	80056a0 <HAL_TIMEx_MasterConfigSynchronization>
 8000aa6:	4603      	mov	r3, r0
 8000aa8:	2b00      	cmp	r3, #0
 8000aaa:	d001      	beq.n	8000ab0 <MX_TIM4_Init+0x8c>
  {
    Error_Handler();
 8000aac:	f000 fbfc 	bl	80012a8 <Error_Handler>
  }
  /* USER CODE BEGIN TIM4_Init 2 */

  /* USER CODE END TIM4_Init 2 */

}
 8000ab0:	bf00      	nop
 8000ab2:	3720      	adds	r7, #32
 8000ab4:	46bd      	mov	sp, r7
 8000ab6:	bd80      	pop	{r7, pc}
 8000ab8:	2003cb74 	.word	0x2003cb74
 8000abc:	40000800 	.word	0x40000800

08000ac0 <MX_USART3_UART_Init>:
  * @brief USART3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART3_UART_Init(void)
{
 8000ac0:	b580      	push	{r7, lr}
 8000ac2:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 8000ac4:	4b14      	ldr	r3, [pc, #80]	@ (8000b18 <MX_USART3_UART_Init+0x58>)
 8000ac6:	4a15      	ldr	r2, [pc, #84]	@ (8000b1c <MX_USART3_UART_Init+0x5c>)
 8000ac8:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 115200;
 8000aca:	4b13      	ldr	r3, [pc, #76]	@ (8000b18 <MX_USART3_UART_Init+0x58>)
 8000acc:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8000ad0:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 8000ad2:	4b11      	ldr	r3, [pc, #68]	@ (8000b18 <MX_USART3_UART_Init+0x58>)
 8000ad4:	2200      	movs	r2, #0
 8000ad6:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 8000ad8:	4b0f      	ldr	r3, [pc, #60]	@ (8000b18 <MX_USART3_UART_Init+0x58>)
 8000ada:	2200      	movs	r2, #0
 8000adc:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 8000ade:	4b0e      	ldr	r3, [pc, #56]	@ (8000b18 <MX_USART3_UART_Init+0x58>)
 8000ae0:	2200      	movs	r2, #0
 8000ae2:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 8000ae4:	4b0c      	ldr	r3, [pc, #48]	@ (8000b18 <MX_USART3_UART_Init+0x58>)
 8000ae6:	220c      	movs	r2, #12
 8000ae8:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000aea:	4b0b      	ldr	r3, [pc, #44]	@ (8000b18 <MX_USART3_UART_Init+0x58>)
 8000aec:	2200      	movs	r2, #0
 8000aee:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 8000af0:	4b09      	ldr	r3, [pc, #36]	@ (8000b18 <MX_USART3_UART_Init+0x58>)
 8000af2:	2200      	movs	r2, #0
 8000af4:	61da      	str	r2, [r3, #28]
  huart3.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8000af6:	4b08      	ldr	r3, [pc, #32]	@ (8000b18 <MX_USART3_UART_Init+0x58>)
 8000af8:	2200      	movs	r2, #0
 8000afa:	621a      	str	r2, [r3, #32]
  huart3.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8000afc:	4b06      	ldr	r3, [pc, #24]	@ (8000b18 <MX_USART3_UART_Init+0x58>)
 8000afe:	2200      	movs	r2, #0
 8000b00:	625a      	str	r2, [r3, #36]	@ 0x24
  if (HAL_UART_Init(&huart3) != HAL_OK)
 8000b02:	4805      	ldr	r0, [pc, #20]	@ (8000b18 <MX_USART3_UART_Init+0x58>)
 8000b04:	f004 fe78 	bl	80057f8 <HAL_UART_Init>
 8000b08:	4603      	mov	r3, r0
 8000b0a:	2b00      	cmp	r3, #0
 8000b0c:	d001      	beq.n	8000b12 <MX_USART3_UART_Init+0x52>
  {
    Error_Handler();
 8000b0e:	f000 fbcb 	bl	80012a8 <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 8000b12:	bf00      	nop
 8000b14:	bd80      	pop	{r7, pc}
 8000b16:	bf00      	nop
 8000b18:	2003cbc0 	.word	0x2003cbc0
 8000b1c:	40004800 	.word	0x40004800

08000b20 <MX_USB_OTG_FS_PCD_Init>:
  * @brief USB_OTG_FS Initialization Function
  * @param None
  * @retval None
  */
static void MX_USB_OTG_FS_PCD_Init(void)
{
 8000b20:	b580      	push	{r7, lr}
 8000b22:	af00      	add	r7, sp, #0
  /* USER CODE END USB_OTG_FS_Init 0 */

  /* USER CODE BEGIN USB_OTG_FS_Init 1 */

  /* USER CODE END USB_OTG_FS_Init 1 */
  hpcd_USB_OTG_FS.Instance = USB_OTG_FS;
 8000b24:	4b14      	ldr	r3, [pc, #80]	@ (8000b78 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8000b26:	f04f 42a0 	mov.w	r2, #1342177280	@ 0x50000000
 8000b2a:	601a      	str	r2, [r3, #0]
  hpcd_USB_OTG_FS.Init.dev_endpoints = 6;
 8000b2c:	4b12      	ldr	r3, [pc, #72]	@ (8000b78 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8000b2e:	2206      	movs	r2, #6
 8000b30:	711a      	strb	r2, [r3, #4]
  hpcd_USB_OTG_FS.Init.speed = PCD_SPEED_FULL;
 8000b32:	4b11      	ldr	r3, [pc, #68]	@ (8000b78 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8000b34:	2202      	movs	r2, #2
 8000b36:	71da      	strb	r2, [r3, #7]
  hpcd_USB_OTG_FS.Init.dma_enable = DISABLE;
 8000b38:	4b0f      	ldr	r3, [pc, #60]	@ (8000b78 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8000b3a:	2200      	movs	r2, #0
 8000b3c:	719a      	strb	r2, [r3, #6]
  hpcd_USB_OTG_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 8000b3e:	4b0e      	ldr	r3, [pc, #56]	@ (8000b78 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8000b40:	2202      	movs	r2, #2
 8000b42:	725a      	strb	r2, [r3, #9]
  hpcd_USB_OTG_FS.Init.Sof_enable = ENABLE;
 8000b44:	4b0c      	ldr	r3, [pc, #48]	@ (8000b78 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8000b46:	2201      	movs	r2, #1
 8000b48:	729a      	strb	r2, [r3, #10]
  hpcd_USB_OTG_FS.Init.low_power_enable = DISABLE;
 8000b4a:	4b0b      	ldr	r3, [pc, #44]	@ (8000b78 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8000b4c:	2200      	movs	r2, #0
 8000b4e:	72da      	strb	r2, [r3, #11]
  hpcd_USB_OTG_FS.Init.lpm_enable = DISABLE;
 8000b50:	4b09      	ldr	r3, [pc, #36]	@ (8000b78 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8000b52:	2200      	movs	r2, #0
 8000b54:	731a      	strb	r2, [r3, #12]
  hpcd_USB_OTG_FS.Init.vbus_sensing_enable = ENABLE;
 8000b56:	4b08      	ldr	r3, [pc, #32]	@ (8000b78 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8000b58:	2201      	movs	r2, #1
 8000b5a:	739a      	strb	r2, [r3, #14]
  hpcd_USB_OTG_FS.Init.use_dedicated_ep1 = DISABLE;
 8000b5c:	4b06      	ldr	r3, [pc, #24]	@ (8000b78 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8000b5e:	2200      	movs	r2, #0
 8000b60:	73da      	strb	r2, [r3, #15]
  if (HAL_PCD_Init(&hpcd_USB_OTG_FS) != HAL_OK)
 8000b62:	4805      	ldr	r0, [pc, #20]	@ (8000b78 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8000b64:	f002 febd 	bl	80038e2 <HAL_PCD_Init>
 8000b68:	4603      	mov	r3, r0
 8000b6a:	2b00      	cmp	r3, #0
 8000b6c:	d001      	beq.n	8000b72 <MX_USB_OTG_FS_PCD_Init+0x52>
  {
    Error_Handler();
 8000b6e:	f000 fb9b 	bl	80012a8 <Error_Handler>
  }
  /* USER CODE BEGIN USB_OTG_FS_Init 2 */

  /* USER CODE END USB_OTG_FS_Init 2 */

}
 8000b72:	bf00      	nop
 8000b74:	bd80      	pop	{r7, pc}
 8000b76:	bf00      	nop
 8000b78:	2003cc48 	.word	0x2003cc48

08000b7c <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000b7c:	b580      	push	{r7, lr}
 8000b7e:	b08e      	sub	sp, #56	@ 0x38
 8000b80:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000b82:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8000b86:	2200      	movs	r2, #0
 8000b88:	601a      	str	r2, [r3, #0]
 8000b8a:	605a      	str	r2, [r3, #4]
 8000b8c:	609a      	str	r2, [r3, #8]
 8000b8e:	60da      	str	r2, [r3, #12]
 8000b90:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000b92:	4b59      	ldr	r3, [pc, #356]	@ (8000cf8 <MX_GPIO_Init+0x17c>)
 8000b94:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000b96:	4a58      	ldr	r2, [pc, #352]	@ (8000cf8 <MX_GPIO_Init+0x17c>)
 8000b98:	f043 0304 	orr.w	r3, r3, #4
 8000b9c:	6313      	str	r3, [r2, #48]	@ 0x30
 8000b9e:	4b56      	ldr	r3, [pc, #344]	@ (8000cf8 <MX_GPIO_Init+0x17c>)
 8000ba0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000ba2:	f003 0304 	and.w	r3, r3, #4
 8000ba6:	623b      	str	r3, [r7, #32]
 8000ba8:	6a3b      	ldr	r3, [r7, #32]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 8000baa:	4b53      	ldr	r3, [pc, #332]	@ (8000cf8 <MX_GPIO_Init+0x17c>)
 8000bac:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000bae:	4a52      	ldr	r2, [pc, #328]	@ (8000cf8 <MX_GPIO_Init+0x17c>)
 8000bb0:	f043 0320 	orr.w	r3, r3, #32
 8000bb4:	6313      	str	r3, [r2, #48]	@ 0x30
 8000bb6:	4b50      	ldr	r3, [pc, #320]	@ (8000cf8 <MX_GPIO_Init+0x17c>)
 8000bb8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000bba:	f003 0320 	and.w	r3, r3, #32
 8000bbe:	61fb      	str	r3, [r7, #28]
 8000bc0:	69fb      	ldr	r3, [r7, #28]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8000bc2:	4b4d      	ldr	r3, [pc, #308]	@ (8000cf8 <MX_GPIO_Init+0x17c>)
 8000bc4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000bc6:	4a4c      	ldr	r2, [pc, #304]	@ (8000cf8 <MX_GPIO_Init+0x17c>)
 8000bc8:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8000bcc:	6313      	str	r3, [r2, #48]	@ 0x30
 8000bce:	4b4a      	ldr	r3, [pc, #296]	@ (8000cf8 <MX_GPIO_Init+0x17c>)
 8000bd0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000bd2:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8000bd6:	61bb      	str	r3, [r7, #24]
 8000bd8:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000bda:	4b47      	ldr	r3, [pc, #284]	@ (8000cf8 <MX_GPIO_Init+0x17c>)
 8000bdc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000bde:	4a46      	ldr	r2, [pc, #280]	@ (8000cf8 <MX_GPIO_Init+0x17c>)
 8000be0:	f043 0301 	orr.w	r3, r3, #1
 8000be4:	6313      	str	r3, [r2, #48]	@ 0x30
 8000be6:	4b44      	ldr	r3, [pc, #272]	@ (8000cf8 <MX_GPIO_Init+0x17c>)
 8000be8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000bea:	f003 0301 	and.w	r3, r3, #1
 8000bee:	617b      	str	r3, [r7, #20]
 8000bf0:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000bf2:	4b41      	ldr	r3, [pc, #260]	@ (8000cf8 <MX_GPIO_Init+0x17c>)
 8000bf4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000bf6:	4a40      	ldr	r2, [pc, #256]	@ (8000cf8 <MX_GPIO_Init+0x17c>)
 8000bf8:	f043 0302 	orr.w	r3, r3, #2
 8000bfc:	6313      	str	r3, [r2, #48]	@ 0x30
 8000bfe:	4b3e      	ldr	r3, [pc, #248]	@ (8000cf8 <MX_GPIO_Init+0x17c>)
 8000c00:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000c02:	f003 0302 	and.w	r3, r3, #2
 8000c06:	613b      	str	r3, [r7, #16]
 8000c08:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8000c0a:	4b3b      	ldr	r3, [pc, #236]	@ (8000cf8 <MX_GPIO_Init+0x17c>)
 8000c0c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000c0e:	4a3a      	ldr	r2, [pc, #232]	@ (8000cf8 <MX_GPIO_Init+0x17c>)
 8000c10:	f043 0310 	orr.w	r3, r3, #16
 8000c14:	6313      	str	r3, [r2, #48]	@ 0x30
 8000c16:	4b38      	ldr	r3, [pc, #224]	@ (8000cf8 <MX_GPIO_Init+0x17c>)
 8000c18:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000c1a:	f003 0310 	and.w	r3, r3, #16
 8000c1e:	60fb      	str	r3, [r7, #12]
 8000c20:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000c22:	4b35      	ldr	r3, [pc, #212]	@ (8000cf8 <MX_GPIO_Init+0x17c>)
 8000c24:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000c26:	4a34      	ldr	r2, [pc, #208]	@ (8000cf8 <MX_GPIO_Init+0x17c>)
 8000c28:	f043 0308 	orr.w	r3, r3, #8
 8000c2c:	6313      	str	r3, [r2, #48]	@ 0x30
 8000c2e:	4b32      	ldr	r3, [pc, #200]	@ (8000cf8 <MX_GPIO_Init+0x17c>)
 8000c30:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000c32:	f003 0308 	and.w	r3, r3, #8
 8000c36:	60bb      	str	r3, [r7, #8]
 8000c38:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 8000c3a:	4b2f      	ldr	r3, [pc, #188]	@ (8000cf8 <MX_GPIO_Init+0x17c>)
 8000c3c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000c3e:	4a2e      	ldr	r2, [pc, #184]	@ (8000cf8 <MX_GPIO_Init+0x17c>)
 8000c40:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8000c44:	6313      	str	r3, [r2, #48]	@ 0x30
 8000c46:	4b2c      	ldr	r3, [pc, #176]	@ (8000cf8 <MX_GPIO_Init+0x17c>)
 8000c48:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000c4a:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8000c4e:	607b      	str	r3, [r7, #4]
 8000c50:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, LD1_Pin|LD3_Pin|LD2_Pin, GPIO_PIN_RESET);
 8000c52:	2200      	movs	r2, #0
 8000c54:	f244 0181 	movw	r1, #16513	@ 0x4081
 8000c58:	4828      	ldr	r0, [pc, #160]	@ (8000cfc <MX_GPIO_Init+0x180>)
 8000c5a:	f002 f973 	bl	8002f44 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(USB_PowerSwitchOn_GPIO_Port, USB_PowerSwitchOn_Pin, GPIO_PIN_RESET);
 8000c5e:	2200      	movs	r2, #0
 8000c60:	2140      	movs	r1, #64	@ 0x40
 8000c62:	4827      	ldr	r0, [pc, #156]	@ (8000d00 <MX_GPIO_Init+0x184>)
 8000c64:	f002 f96e 	bl	8002f44 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : USER_Btn_Pin */
  GPIO_InitStruct.Pin = USER_Btn_Pin;
 8000c68:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8000c6c:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8000c6e:	f44f 1388 	mov.w	r3, #1114112	@ 0x110000
 8000c72:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c74:	2300      	movs	r3, #0
 8000c76:	62fb      	str	r3, [r7, #44]	@ 0x2c
  HAL_GPIO_Init(USER_Btn_GPIO_Port, &GPIO_InitStruct);
 8000c78:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8000c7c:	4619      	mov	r1, r3
 8000c7e:	4821      	ldr	r0, [pc, #132]	@ (8000d04 <MX_GPIO_Init+0x188>)
 8000c80:	f001 ff9c 	bl	8002bbc <HAL_GPIO_Init>

  /*Configure GPIO pins : LD1_Pin LD3_Pin LD2_Pin */
  GPIO_InitStruct.Pin = LD1_Pin|LD3_Pin|LD2_Pin;
 8000c84:	f244 0381 	movw	r3, #16513	@ 0x4081
 8000c88:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000c8a:	2301      	movs	r3, #1
 8000c8c:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c8e:	2300      	movs	r3, #0
 8000c90:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000c92:	2300      	movs	r3, #0
 8000c94:	633b      	str	r3, [r7, #48]	@ 0x30
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000c96:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8000c9a:	4619      	mov	r1, r3
 8000c9c:	4817      	ldr	r0, [pc, #92]	@ (8000cfc <MX_GPIO_Init+0x180>)
 8000c9e:	f001 ff8d 	bl	8002bbc <HAL_GPIO_Init>

  /*Configure GPIO pin : PE9 */
  GPIO_InitStruct.Pin = GPIO_PIN_9;
 8000ca2:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8000ca6:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000ca8:	2300      	movs	r3, #0
 8000caa:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8000cac:	2301      	movs	r3, #1
 8000cae:	62fb      	str	r3, [r7, #44]	@ 0x2c
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8000cb0:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8000cb4:	4619      	mov	r1, r3
 8000cb6:	4814      	ldr	r0, [pc, #80]	@ (8000d08 <MX_GPIO_Init+0x18c>)
 8000cb8:	f001 ff80 	bl	8002bbc <HAL_GPIO_Init>

  /*Configure GPIO pin : USB_PowerSwitchOn_Pin */
  GPIO_InitStruct.Pin = USB_PowerSwitchOn_Pin;
 8000cbc:	2340      	movs	r3, #64	@ 0x40
 8000cbe:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000cc0:	2301      	movs	r3, #1
 8000cc2:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000cc4:	2300      	movs	r3, #0
 8000cc6:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000cc8:	2300      	movs	r3, #0
 8000cca:	633b      	str	r3, [r7, #48]	@ 0x30
  HAL_GPIO_Init(USB_PowerSwitchOn_GPIO_Port, &GPIO_InitStruct);
 8000ccc:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8000cd0:	4619      	mov	r1, r3
 8000cd2:	480b      	ldr	r0, [pc, #44]	@ (8000d00 <MX_GPIO_Init+0x184>)
 8000cd4:	f001 ff72 	bl	8002bbc <HAL_GPIO_Init>

  /*Configure GPIO pin : USB_OverCurrent_Pin */
  GPIO_InitStruct.Pin = USB_OverCurrent_Pin;
 8000cd8:	2380      	movs	r3, #128	@ 0x80
 8000cda:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000cdc:	2300      	movs	r3, #0
 8000cde:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ce0:	2300      	movs	r3, #0
 8000ce2:	62fb      	str	r3, [r7, #44]	@ 0x2c
  HAL_GPIO_Init(USB_OverCurrent_GPIO_Port, &GPIO_InitStruct);
 8000ce4:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8000ce8:	4619      	mov	r1, r3
 8000cea:	4805      	ldr	r0, [pc, #20]	@ (8000d00 <MX_GPIO_Init+0x184>)
 8000cec:	f001 ff66 	bl	8002bbc <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8000cf0:	bf00      	nop
 8000cf2:	3738      	adds	r7, #56	@ 0x38
 8000cf4:	46bd      	mov	sp, r7
 8000cf6:	bd80      	pop	{r7, pc}
 8000cf8:	40023800 	.word	0x40023800
 8000cfc:	40020400 	.word	0x40020400
 8000d00:	40021800 	.word	0x40021800
 8000d04:	40020800 	.word	0x40020800
 8000d08:	40021000 	.word	0x40021000

08000d0c <HAL_UART_RxCpltCallback>:

/* USER CODE BEGIN 4 */
void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 8000d0c:	b580      	push	{r7, lr}
 8000d0e:	b082      	sub	sp, #8
 8000d10:	af00      	add	r7, sp, #0
 8000d12:	6078      	str	r0, [r7, #4]
  if (huart == &huart3)
 8000d14:	687b      	ldr	r3, [r7, #4]
 8000d16:	4a07      	ldr	r2, [pc, #28]	@ (8000d34 <HAL_UART_RxCpltCallback+0x28>)
 8000d18:	4293      	cmp	r3, r2
 8000d1a:	d107      	bne.n	8000d2c <HAL_UART_RxCpltCallback+0x20>
  {
//    HAL_UART_Transmit(&huart3, (uint8_t *)"Received", 8, HAL_MAX_DELAY);

	  image_ready = 1;
 8000d1c:	4b06      	ldr	r3, [pc, #24]	@ (8000d38 <HAL_UART_RxCpltCallback+0x2c>)
 8000d1e:	2201      	movs	r2, #1
 8000d20:	701a      	strb	r2, [r3, #0]

//	  HAL_UART_Receive_IT(&huart3, (uint8_t*)image_buffer, 28 * 28);

	  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_0, 1);
 8000d22:	2201      	movs	r2, #1
 8000d24:	2101      	movs	r1, #1
 8000d26:	4805      	ldr	r0, [pc, #20]	@ (8000d3c <HAL_UART_RxCpltCallback+0x30>)
 8000d28:	f002 f90c 	bl	8002f44 <HAL_GPIO_WritePin>
  }
}
 8000d2c:	bf00      	nop
 8000d2e:	3708      	adds	r7, #8
 8000d30:	46bd      	mov	sp, r7
 8000d32:	bd80      	pop	{r7, pc}
 8000d34:	2003cbc0 	.word	0x2003cbc0
 8000d38:	2003ca18 	.word	0x2003ca18
 8000d3c:	40020400 	.word	0x40020400

08000d40 <PlayWav>:



void PlayWav(void) {
 8000d40:	b580      	push	{r7, lr}
 8000d42:	af00      	add	r7, sp, #0
    wav_index = 0;
 8000d44:	4b05      	ldr	r3, [pc, #20]	@ (8000d5c <PlayWav+0x1c>)
 8000d46:	2200      	movs	r2, #0
 8000d48:	601a      	str	r2, [r3, #0]
    HAL_TIM_Base_Start_IT(&htim4);
 8000d4a:	4805      	ldr	r0, [pc, #20]	@ (8000d60 <PlayWav+0x20>)
 8000d4c:	f004 f8b8 	bl	8004ec0 <HAL_TIM_Base_Start_IT>
    HAL_DAC_Start(&hdac, DAC_CHANNEL_1);
 8000d50:	2100      	movs	r1, #0
 8000d52:	4804      	ldr	r0, [pc, #16]	@ (8000d64 <PlayWav+0x24>)
 8000d54:	f001 fa55 	bl	8002202 <HAL_DAC_Start>
}
 8000d58:	bf00      	nop
 8000d5a:	bd80      	pop	{r7, pc}
 8000d5c:	2003ca1c 	.word	0x2003ca1c
 8000d60:	2003cb74 	.word	0x2003cb74
 8000d64:	2003ca5c 	.word	0x2003ca5c

08000d68 <Taskuser>:
  * @param  argument: Not used
  * @retval None
  */
/* USER CODE END Header_Taskuser */
void Taskuser(void *argument)
{
 8000d68:	b580      	push	{r7, lr}
 8000d6a:	b082      	sub	sp, #8
 8000d6c:	af00      	add	r7, sp, #0
 8000d6e:	6078      	str	r0, [r7, #4]

  /* Infinite loop */
  for(;;)
  {

	  if (HAL_GPIO_ReadPin(GPIOE, GPIO_PIN_9) == 0) {
 8000d70:	f44f 7100 	mov.w	r1, #512	@ 0x200
 8000d74:	4832      	ldr	r0, [pc, #200]	@ (8000e40 <Taskuser+0xd8>)
 8000d76:	f002 f8cd 	bl	8002f14 <HAL_GPIO_ReadPin>
 8000d7a:	4603      	mov	r3, r0
 8000d7c:	2b00      	cmp	r3, #0
 8000d7e:	d146      	bne.n	8000e0e <Taskuser+0xa6>
	        HAL_GPIO_WritePin(GPIOB, GPIO_PIN_7, 1);
 8000d80:	2201      	movs	r2, #1
 8000d82:	2180      	movs	r1, #128	@ 0x80
 8000d84:	482f      	ldr	r0, [pc, #188]	@ (8000e44 <Taskuser+0xdc>)
 8000d86:	f002 f8dd 	bl	8002f44 <HAL_GPIO_WritePin>

	        if (game_started == 0) {
 8000d8a:	4b2f      	ldr	r3, [pc, #188]	@ (8000e48 <Taskuser+0xe0>)
 8000d8c:	f993 3000 	ldrsb.w	r3, [r3]
 8000d90:	2b00      	cmp	r3, #0
 8000d92:	d125      	bne.n	8000de0 <Taskuser+0x78>
	          srand(HAL_GetTick());
 8000d94:	f001 f8d2 	bl	8001f3c <HAL_GetTick>
 8000d98:	4603      	mov	r3, r0
 8000d9a:	4618      	mov	r0, r3
 8000d9c:	f00e feb2 	bl	800fb04 <srand>
	          random_digit = rand() % 10;
 8000da0:	f00e fede 	bl	800fb60 <rand>
 8000da4:	4602      	mov	r2, r0
 8000da6:	4b29      	ldr	r3, [pc, #164]	@ (8000e4c <Taskuser+0xe4>)
 8000da8:	fb83 1302 	smull	r1, r3, r3, r2
 8000dac:	1099      	asrs	r1, r3, #2
 8000dae:	17d3      	asrs	r3, r2, #31
 8000db0:	1ac9      	subs	r1, r1, r3
 8000db2:	460b      	mov	r3, r1
 8000db4:	009b      	lsls	r3, r3, #2
 8000db6:	440b      	add	r3, r1
 8000db8:	005b      	lsls	r3, r3, #1
 8000dba:	1ad1      	subs	r1, r2, r3
 8000dbc:	b2ca      	uxtb	r2, r1
 8000dbe:	4b24      	ldr	r3, [pc, #144]	@ (8000e50 <Taskuser+0xe8>)
 8000dc0:	701a      	strb	r2, [r3, #0]
	          game_started = 1;
 8000dc2:	4b21      	ldr	r3, [pc, #132]	@ (8000e48 <Taskuser+0xe0>)
 8000dc4:	2201      	movs	r2, #1
 8000dc6:	701a      	strb	r2, [r3, #0]
	          ssd1306_Fill(Black);
 8000dc8:	2000      	movs	r0, #0
 8000dca:	f000 fb17 	bl	80013fc <ssd1306_Fill>
	          ssd1306_UpdateScreen();
 8000dce:	f000 fb2d 	bl	800142c <ssd1306_UpdateScreen>
	          HAL_UART_Receive_IT(&huart3, (uint8_t*)image_buffer, 28 * 28);
 8000dd2:	f44f 7244 	mov.w	r2, #784	@ 0x310
 8000dd6:	491f      	ldr	r1, [pc, #124]	@ (8000e54 <Taskuser+0xec>)
 8000dd8:	481f      	ldr	r0, [pc, #124]	@ (8000e58 <Taskuser+0xf0>)
 8000dda:	f004 fde4 	bl	80059a6 <HAL_UART_Receive_IT>
 8000dde:	e016      	b.n	8000e0e <Taskuser+0xa6>
	        }
	        else{
	        	srand(HAL_GetTick());
 8000de0:	f001 f8ac 	bl	8001f3c <HAL_GetTick>
 8000de4:	4603      	mov	r3, r0
 8000de6:	4618      	mov	r0, r3
 8000de8:	f00e fe8c 	bl	800fb04 <srand>
	        	random_digit = rand() % 10;
 8000dec:	f00e feb8 	bl	800fb60 <rand>
 8000df0:	4602      	mov	r2, r0
 8000df2:	4b16      	ldr	r3, [pc, #88]	@ (8000e4c <Taskuser+0xe4>)
 8000df4:	fb83 1302 	smull	r1, r3, r3, r2
 8000df8:	1099      	asrs	r1, r3, #2
 8000dfa:	17d3      	asrs	r3, r2, #31
 8000dfc:	1ac9      	subs	r1, r1, r3
 8000dfe:	460b      	mov	r3, r1
 8000e00:	009b      	lsls	r3, r3, #2
 8000e02:	440b      	add	r3, r1
 8000e04:	005b      	lsls	r3, r3, #1
 8000e06:	1ad1      	subs	r1, r2, r3
 8000e08:	b2ca      	uxtb	r2, r1
 8000e0a:	4b11      	ldr	r3, [pc, #68]	@ (8000e50 <Taskuser+0xe8>)
 8000e0c:	701a      	strb	r2, [r3, #0]
	        }
	      }

	   HAL_GPIO_WritePin(GPIOB, GPIO_PIN_14, game_started ? 1 : 0);
 8000e0e:	4b0e      	ldr	r3, [pc, #56]	@ (8000e48 <Taskuser+0xe0>)
 8000e10:	f993 3000 	ldrsb.w	r3, [r3]
 8000e14:	2b00      	cmp	r3, #0
 8000e16:	bf14      	ite	ne
 8000e18:	2301      	movne	r3, #1
 8000e1a:	2300      	moveq	r3, #0
 8000e1c:	b2db      	uxtb	r3, r3
 8000e1e:	461a      	mov	r2, r3
 8000e20:	f44f 4180 	mov.w	r1, #16384	@ 0x4000
 8000e24:	4807      	ldr	r0, [pc, #28]	@ (8000e44 <Taskuser+0xdc>)
 8000e26:	f002 f88d 	bl	8002f44 <HAL_GPIO_WritePin>

	 HAL_UART_Transmit(&huart3, "1", 1, HAL_MAX_DELAY);
 8000e2a:	f04f 33ff 	mov.w	r3, #4294967295
 8000e2e:	2201      	movs	r2, #1
 8000e30:	490a      	ldr	r1, [pc, #40]	@ (8000e5c <Taskuser+0xf4>)
 8000e32:	4809      	ldr	r0, [pc, #36]	@ (8000e58 <Taskuser+0xf0>)
 8000e34:	f004 fd2e 	bl	8005894 <HAL_UART_Transmit>
    osDelay(10);
 8000e38:	200a      	movs	r0, #10
 8000e3a:	f006 fc3f 	bl	80076bc <osDelay>
	  if (HAL_GPIO_ReadPin(GPIOE, GPIO_PIN_9) == 0) {
 8000e3e:	e797      	b.n	8000d70 <Taskuser+0x8>
 8000e40:	40021000 	.word	0x40021000
 8000e44:	40020400 	.word	0x40020400
 8000e48:	2003ca19 	.word	0x2003ca19
 8000e4c:	66666667 	.word	0x66666667
 8000e50:	2003ca1a 	.word	0x2003ca1a
 8000e54:	2003c708 	.word	0x2003c708
 8000e58:	2003cbc0 	.word	0x2003cbc0
 8000e5c:	08010f7c 	.word	0x08010f7c

08000e60 <Task02image>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_Task02image */
void Task02image(void *argument)
{
 8000e60:	b580      	push	{r7, lr}
 8000e62:	b086      	sub	sp, #24
 8000e64:	af00      	add	r7, sp, #0
 8000e66:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Task02image */
	char buffer[10];
  /* Infinite loop */
  for(;;)
  {
	   if(image_ready == 1)
 8000e68:	4b20      	ldr	r3, [pc, #128]	@ (8000eec <Task02image+0x8c>)
 8000e6a:	f993 3000 	ldrsb.w	r3, [r3]
 8000e6e:	2b01      	cmp	r3, #1
 8000e70:	d130      	bne.n	8000ed4 <Task02image+0x74>
	    {

	      MX_X_CUBE_AI_Process();
 8000e72:	f009 fa8f 	bl	800a394 <MX_X_CUBE_AI_Process>

	      sprintf(buffer, "%d", player_guess);
 8000e76:	4b1e      	ldr	r3, [pc, #120]	@ (8000ef0 <Task02image+0x90>)
 8000e78:	f993 3000 	ldrsb.w	r3, [r3]
 8000e7c:	461a      	mov	r2, r3
 8000e7e:	f107 030c 	add.w	r3, r7, #12
 8000e82:	491c      	ldr	r1, [pc, #112]	@ (8000ef4 <Task02image+0x94>)
 8000e84:	4618      	mov	r0, r3
 8000e86:	f00f f82f 	bl	800fee8 <siprintf>
	      HAL_UART_Transmit(&huart3, (uint8_t *)buffer, strlen(buffer), HAL_MAX_DELAY);
 8000e8a:	f107 030c 	add.w	r3, r7, #12
 8000e8e:	4618      	mov	r0, r3
 8000e90:	f7ff f9d6 	bl	8000240 <strlen>
 8000e94:	4603      	mov	r3, r0
 8000e96:	b29a      	uxth	r2, r3
 8000e98:	f107 010c 	add.w	r1, r7, #12
 8000e9c:	f04f 33ff 	mov.w	r3, #4294967295
 8000ea0:	4815      	ldr	r0, [pc, #84]	@ (8000ef8 <Task02image+0x98>)
 8000ea2:	f004 fcf7 	bl	8005894 <HAL_UART_Transmit>

//	      HAL_UART_Receive_IT(&huart3, (uint8_t*)image_buffer, 28 * 28);

	      memset(image_buffer, 0, sizeof(image_buffer));
 8000ea6:	f44f 7244 	mov.w	r2, #784	@ 0x310
 8000eaa:	2100      	movs	r1, #0
 8000eac:	4813      	ldr	r0, [pc, #76]	@ (8000efc <Task02image+0x9c>)
 8000eae:	f00f f87e 	bl	800ffae <memset>

	      image_ready = 0;
 8000eb2:	4b0e      	ldr	r3, [pc, #56]	@ (8000eec <Task02image+0x8c>)
 8000eb4:	2200      	movs	r2, #0
 8000eb6:	701a      	strb	r2, [r3, #0]

	      HAL_GPIO_WritePin(GPIOB, GPIO_PIN_0, 0);
 8000eb8:	2200      	movs	r2, #0
 8000eba:	2101      	movs	r1, #1
 8000ebc:	4810      	ldr	r0, [pc, #64]	@ (8000f00 <Task02image+0xa0>)
 8000ebe:	f002 f841 	bl	8002f44 <HAL_GPIO_WritePin>
	      xQueueSend(xQueue_DigitResult, &buffer, portMAX_DELAY);
 8000ec2:	4b10      	ldr	r3, [pc, #64]	@ (8000f04 <Task02image+0xa4>)
 8000ec4:	6818      	ldr	r0, [r3, #0]
 8000ec6:	f107 010c 	add.w	r1, r7, #12
 8000eca:	2300      	movs	r3, #0
 8000ecc:	f04f 32ff 	mov.w	r2, #4294967295
 8000ed0:	f006 fe64 	bl	8007b9c <xQueueGenericSend>

	    }

	  HAL_UART_Transmit(&huart3, "2", 1, HAL_MAX_DELAY);
 8000ed4:	f04f 33ff 	mov.w	r3, #4294967295
 8000ed8:	2201      	movs	r2, #1
 8000eda:	490b      	ldr	r1, [pc, #44]	@ (8000f08 <Task02image+0xa8>)
 8000edc:	4806      	ldr	r0, [pc, #24]	@ (8000ef8 <Task02image+0x98>)
 8000ede:	f004 fcd9 	bl	8005894 <HAL_UART_Transmit>
    osDelay(10);
 8000ee2:	200a      	movs	r0, #10
 8000ee4:	f006 fbea 	bl	80076bc <osDelay>
	   if(image_ready == 1)
 8000ee8:	e7be      	b.n	8000e68 <Task02image+0x8>
 8000eea:	bf00      	nop
 8000eec:	2003ca18 	.word	0x2003ca18
 8000ef0:	20000000 	.word	0x20000000
 8000ef4:	08010f80 	.word	0x08010f80
 8000ef8:	2003cbc0 	.word	0x2003cbc0
 8000efc:	2003c708 	.word	0x2003c708
 8000f00:	40020400 	.word	0x40020400
 8000f04:	2003c6fc 	.word	0x2003c6fc
 8000f08:	08010f84 	.word	0x08010f84

08000f0c <Task03logic>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_Task03logic */
void Task03logic(void *argument)
{
 8000f0c:	b580      	push	{r7, lr}
 8000f0e:	b08e      	sub	sp, #56	@ 0x38
 8000f10:	af00      	add	r7, sp, #0
 8000f12:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Task03logic */
	char buffer[10];
	char messageDis[20];
	char messageSound[10];
	uint8_t song = 0;
 8000f14:	2300      	movs	r3, #0
 8000f16:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37
  /* Infinite loop */
  for(;;)
  {

	  if(game_started == 1){
 8000f1a:	4b60      	ldr	r3, [pc, #384]	@ (800109c <Task03logic+0x190>)
 8000f1c:	f993 3000 	ldrsb.w	r3, [r3]
 8000f20:	2b01      	cmp	r3, #1
 8000f22:	f040 80b0 	bne.w	8001086 <Task03logic+0x17a>

	   if (xQueueReceive(xQueue_DigitResult, &buffer, portMAX_DELAY) == pdTRUE) {
 8000f26:	4b5e      	ldr	r3, [pc, #376]	@ (80010a0 <Task03logic+0x194>)
 8000f28:	681b      	ldr	r3, [r3, #0]
 8000f2a:	f107 012c 	add.w	r1, r7, #44	@ 0x2c
 8000f2e:	f04f 32ff 	mov.w	r2, #4294967295
 8000f32:	4618      	mov	r0, r3
 8000f34:	f006 ffe0 	bl	8007ef8 <xQueueReceive>
 8000f38:	4603      	mov	r3, r0
 8000f3a:	2b01      	cmp	r3, #1
 8000f3c:	f040 80a3 	bne.w	8001086 <Task03logic+0x17a>


		            	 uint8_t number_player = atoi(buffer);
 8000f40:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8000f44:	4618      	mov	r0, r3
 8000f46:	f00e fd23 	bl	800f990 <atoi>
 8000f4a:	4603      	mov	r3, r0
 8000f4c:	f887 3036 	strb.w	r3, [r7, #54]	@ 0x36

		            	 if (random_digit  == number_player) {
 8000f50:	4b54      	ldr	r3, [pc, #336]	@ (80010a4 <Task03logic+0x198>)
 8000f52:	781b      	ldrb	r3, [r3, #0]
 8000f54:	f897 2036 	ldrb.w	r2, [r7, #54]	@ 0x36
 8000f58:	429a      	cmp	r2, r3
 8000f5a:	d13d      	bne.n	8000fd8 <Task03logic+0xcc>

		            		 srand(HAL_GetTick());
 8000f5c:	f000 ffee 	bl	8001f3c <HAL_GetTick>
 8000f60:	4603      	mov	r3, r0
 8000f62:	4618      	mov	r0, r3
 8000f64:	f00e fdce 	bl	800fb04 <srand>
		            		 random_digit = rand() % 10;
 8000f68:	f00e fdfa 	bl	800fb60 <rand>
 8000f6c:	4602      	mov	r2, r0
 8000f6e:	4b4e      	ldr	r3, [pc, #312]	@ (80010a8 <Task03logic+0x19c>)
 8000f70:	fb83 1302 	smull	r1, r3, r3, r2
 8000f74:	1099      	asrs	r1, r3, #2
 8000f76:	17d3      	asrs	r3, r2, #31
 8000f78:	1ac9      	subs	r1, r1, r3
 8000f7a:	460b      	mov	r3, r1
 8000f7c:	009b      	lsls	r3, r3, #2
 8000f7e:	440b      	add	r3, r1
 8000f80:	005b      	lsls	r3, r3, #1
 8000f82:	1ad1      	subs	r1, r2, r3
 8000f84:	b2ca      	uxtb	r2, r1
 8000f86:	4b47      	ldr	r3, [pc, #284]	@ (80010a4 <Task03logic+0x198>)
 8000f88:	701a      	strb	r2, [r3, #0]

//		            		 game_started = 1; //1

							 sprintf((char*)messageDis, "Correct!");
 8000f8a:	f107 0318 	add.w	r3, r7, #24
 8000f8e:	4947      	ldr	r1, [pc, #284]	@ (80010ac <Task03logic+0x1a0>)
 8000f90:	4618      	mov	r0, r3
 8000f92:	f00e ffa9 	bl	800fee8 <siprintf>
							 xQueueSend(xQueue_Display, &messageDis, portMAX_DELAY);
 8000f96:	4b46      	ldr	r3, [pc, #280]	@ (80010b0 <Task03logic+0x1a4>)
 8000f98:	6818      	ldr	r0, [r3, #0]
 8000f9a:	f107 0118 	add.w	r1, r7, #24
 8000f9e:	2300      	movs	r3, #0
 8000fa0:	f04f 32ff 	mov.w	r2, #4294967295
 8000fa4:	f006 fdfa 	bl	8007b9c <xQueueGenericSend>

							 song = 3;
 8000fa8:	2303      	movs	r3, #3
 8000faa:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37
							 sprintf(messageSound, "%d", song);
 8000fae:	f897 2037 	ldrb.w	r2, [r7, #55]	@ 0x37
 8000fb2:	f107 030c 	add.w	r3, r7, #12
 8000fb6:	493f      	ldr	r1, [pc, #252]	@ (80010b4 <Task03logic+0x1a8>)
 8000fb8:	4618      	mov	r0, r3
 8000fba:	f00e ff95 	bl	800fee8 <siprintf>
							 xQueueSend(xQueue_SoundCommand, &messageSound, portMAX_DELAY);
 8000fbe:	4b3e      	ldr	r3, [pc, #248]	@ (80010b8 <Task03logic+0x1ac>)
 8000fc0:	6818      	ldr	r0, [r3, #0]
 8000fc2:	f107 010c 	add.w	r1, r7, #12
 8000fc6:	2300      	movs	r3, #0
 8000fc8:	f04f 32ff 	mov.w	r2, #4294967295
 8000fcc:	f006 fde6 	bl	8007b9c <xQueueGenericSend>

							 game_started = 0; //1
 8000fd0:	4b32      	ldr	r3, [pc, #200]	@ (800109c <Task03logic+0x190>)
 8000fd2:	2200      	movs	r2, #0
 8000fd4:	701a      	strb	r2, [r3, #0]
 8000fd6:	e056      	b.n	8001086 <Task03logic+0x17a>

		            	 }
		            	 else if (random_digit < number_player) {
 8000fd8:	4b32      	ldr	r3, [pc, #200]	@ (80010a4 <Task03logic+0x198>)
 8000fda:	781b      	ldrb	r3, [r3, #0]
 8000fdc:	f897 2036 	ldrb.w	r2, [r7, #54]	@ 0x36
 8000fe0:	429a      	cmp	r2, r3
 8000fe2:	d925      	bls.n	8001030 <Task03logic+0x124>

		            		 sprintf((char*)messageDis, "%d Too much",number_player);
 8000fe4:	f897 2036 	ldrb.w	r2, [r7, #54]	@ 0x36
 8000fe8:	f107 0318 	add.w	r3, r7, #24
 8000fec:	4933      	ldr	r1, [pc, #204]	@ (80010bc <Task03logic+0x1b0>)
 8000fee:	4618      	mov	r0, r3
 8000ff0:	f00e ff7a 	bl	800fee8 <siprintf>
		            	 	 xQueueSend(xQueue_Display, &messageDis, portMAX_DELAY);
 8000ff4:	4b2e      	ldr	r3, [pc, #184]	@ (80010b0 <Task03logic+0x1a4>)
 8000ff6:	6818      	ldr	r0, [r3, #0]
 8000ff8:	f107 0118 	add.w	r1, r7, #24
 8000ffc:	2300      	movs	r3, #0
 8000ffe:	f04f 32ff 	mov.w	r2, #4294967295
 8001002:	f006 fdcb 	bl	8007b9c <xQueueGenericSend>


		            	 	 song = 1;
 8001006:	2301      	movs	r3, #1
 8001008:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37
		            	 	 sprintf(messageSound, "%d", song);
 800100c:	f897 2037 	ldrb.w	r2, [r7, #55]	@ 0x37
 8001010:	f107 030c 	add.w	r3, r7, #12
 8001014:	4927      	ldr	r1, [pc, #156]	@ (80010b4 <Task03logic+0x1a8>)
 8001016:	4618      	mov	r0, r3
 8001018:	f00e ff66 	bl	800fee8 <siprintf>
		            	 	 xQueueSend(xQueue_SoundCommand, &messageSound, portMAX_DELAY);
 800101c:	4b26      	ldr	r3, [pc, #152]	@ (80010b8 <Task03logic+0x1ac>)
 800101e:	6818      	ldr	r0, [r3, #0]
 8001020:	f107 010c 	add.w	r1, r7, #12
 8001024:	2300      	movs	r3, #0
 8001026:	f04f 32ff 	mov.w	r2, #4294967295
 800102a:	f006 fdb7 	bl	8007b9c <xQueueGenericSend>
 800102e:	e02a      	b.n	8001086 <Task03logic+0x17a>
		            	 }
		            	 else if (random_digit > number_player) {
 8001030:	4b1c      	ldr	r3, [pc, #112]	@ (80010a4 <Task03logic+0x198>)
 8001032:	781b      	ldrb	r3, [r3, #0]
 8001034:	f897 2036 	ldrb.w	r2, [r7, #54]	@ 0x36
 8001038:	429a      	cmp	r2, r3
 800103a:	d224      	bcs.n	8001086 <Task03logic+0x17a>

		            		 sprintf((char*)messageDis, "%d Too few",number_player);
 800103c:	f897 2036 	ldrb.w	r2, [r7, #54]	@ 0x36
 8001040:	f107 0318 	add.w	r3, r7, #24
 8001044:	491e      	ldr	r1, [pc, #120]	@ (80010c0 <Task03logic+0x1b4>)
 8001046:	4618      	mov	r0, r3
 8001048:	f00e ff4e 	bl	800fee8 <siprintf>
		            	 	 xQueueSend(xQueue_Display, &messageDis, portMAX_DELAY);
 800104c:	4b18      	ldr	r3, [pc, #96]	@ (80010b0 <Task03logic+0x1a4>)
 800104e:	6818      	ldr	r0, [r3, #0]
 8001050:	f107 0118 	add.w	r1, r7, #24
 8001054:	2300      	movs	r3, #0
 8001056:	f04f 32ff 	mov.w	r2, #4294967295
 800105a:	f006 fd9f 	bl	8007b9c <xQueueGenericSend>

		            	 	 song = 2;
 800105e:	2302      	movs	r3, #2
 8001060:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37
		            	 	 sprintf(messageSound, "%d", song);
 8001064:	f897 2037 	ldrb.w	r2, [r7, #55]	@ 0x37
 8001068:	f107 030c 	add.w	r3, r7, #12
 800106c:	4911      	ldr	r1, [pc, #68]	@ (80010b4 <Task03logic+0x1a8>)
 800106e:	4618      	mov	r0, r3
 8001070:	f00e ff3a 	bl	800fee8 <siprintf>
		            	 	 xQueueSend(xQueue_SoundCommand, &messageSound, portMAX_DELAY);
 8001074:	4b10      	ldr	r3, [pc, #64]	@ (80010b8 <Task03logic+0x1ac>)
 8001076:	6818      	ldr	r0, [r3, #0]
 8001078:	f107 010c 	add.w	r1, r7, #12
 800107c:	2300      	movs	r3, #0
 800107e:	f04f 32ff 	mov.w	r2, #4294967295
 8001082:	f006 fd8b 	bl	8007b9c <xQueueGenericSend>

	   }
	 }


	  HAL_UART_Transmit(&huart3, "3", 1, HAL_MAX_DELAY);
 8001086:	f04f 33ff 	mov.w	r3, #4294967295
 800108a:	2201      	movs	r2, #1
 800108c:	490d      	ldr	r1, [pc, #52]	@ (80010c4 <Task03logic+0x1b8>)
 800108e:	480e      	ldr	r0, [pc, #56]	@ (80010c8 <Task03logic+0x1bc>)
 8001090:	f004 fc00 	bl	8005894 <HAL_UART_Transmit>
    osDelay(10);
 8001094:	200a      	movs	r0, #10
 8001096:	f006 fb11 	bl	80076bc <osDelay>
	  if(game_started == 1){
 800109a:	e73e      	b.n	8000f1a <Task03logic+0xe>
 800109c:	2003ca19 	.word	0x2003ca19
 80010a0:	2003c6fc 	.word	0x2003c6fc
 80010a4:	2003ca1a 	.word	0x2003ca1a
 80010a8:	66666667 	.word	0x66666667
 80010ac:	08010f88 	.word	0x08010f88
 80010b0:	2003c700 	.word	0x2003c700
 80010b4:	08010f80 	.word	0x08010f80
 80010b8:	2003c704 	.word	0x2003c704
 80010bc:	08010f94 	.word	0x08010f94
 80010c0:	08010fa0 	.word	0x08010fa0
 80010c4:	08010fac 	.word	0x08010fac
 80010c8:	2003cbc0 	.word	0x2003cbc0

080010cc <Task04display>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_Task04display */
void Task04display(void *argument)
{
 80010cc:	b580      	push	{r7, lr}
 80010ce:	b09a      	sub	sp, #104	@ 0x68
 80010d0:	af02      	add	r7, sp, #8
 80010d2:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Task04display */
	char messageDis[20];
	char buffer[10];
	char result[10];
	char start_message[20] = "Guess the";
 80010d4:	4a3b      	ldr	r2, [pc, #236]	@ (80011c4 <Task04display+0xf8>)
 80010d6:	f107 0320 	add.w	r3, r7, #32
 80010da:	ca07      	ldmia	r2, {r0, r1, r2}
 80010dc:	c303      	stmia	r3!, {r0, r1}
 80010de:	801a      	strh	r2, [r3, #0]
 80010e0:	f107 032a 	add.w	r3, r7, #42	@ 0x2a
 80010e4:	2200      	movs	r2, #0
 80010e6:	601a      	str	r2, [r3, #0]
 80010e8:	605a      	str	r2, [r3, #4]
 80010ea:	811a      	strh	r2, [r3, #8]
	char end_message[20] = "number?";
 80010ec:	4a36      	ldr	r2, [pc, #216]	@ (80011c8 <Task04display+0xfc>)
 80010ee:	f107 030c 	add.w	r3, r7, #12
 80010f2:	e892 0003 	ldmia.w	r2, {r0, r1}
 80010f6:	e883 0003 	stmia.w	r3, {r0, r1}
 80010fa:	f107 0314 	add.w	r3, r7, #20
 80010fe:	2200      	movs	r2, #0
 8001100:	601a      	str	r2, [r3, #0]
 8001102:	605a      	str	r2, [r3, #4]
 8001104:	609a      	str	r2, [r3, #8]
  /* Infinite loop */
  for(;;)
  {

	  if(game_started == 1){
 8001106:	4b31      	ldr	r3, [pc, #196]	@ (80011cc <Task04display+0x100>)
 8001108:	f993 3000 	ldrsb.w	r3, [r3]
 800110c:	2b01      	cmp	r3, #1
 800110e:	d130      	bne.n	8001172 <Task04display+0xa6>
		  if (xQueueReceive(xQueue_Display, messageDis, portMAX_DELAY) == pdTRUE) {
 8001110:	4b2f      	ldr	r3, [pc, #188]	@ (80011d0 <Task04display+0x104>)
 8001112:	681b      	ldr	r3, [r3, #0]
 8001114:	f107 014c 	add.w	r1, r7, #76	@ 0x4c
 8001118:	f04f 32ff 	mov.w	r2, #4294967295
 800111c:	4618      	mov	r0, r3
 800111e:	f006 feeb 	bl	8007ef8 <xQueueReceive>
 8001122:	4603      	mov	r3, r0
 8001124:	2b01      	cmp	r3, #1
 8001126:	d141      	bne.n	80011ac <Task04display+0xe0>

			  	  	  	sprintf(buffer, "%d", game_started);
 8001128:	4b28      	ldr	r3, [pc, #160]	@ (80011cc <Task04display+0x100>)
 800112a:	f993 3000 	ldrsb.w	r3, [r3]
 800112e:	461a      	mov	r2, r3
 8001130:	f107 0340 	add.w	r3, r7, #64	@ 0x40
 8001134:	4927      	ldr	r1, [pc, #156]	@ (80011d4 <Task04display+0x108>)
 8001136:	4618      	mov	r0, r3
 8001138:	f00e fed6 	bl	800fee8 <siprintf>
			  	  	  	sprintf(result, "%d", random_digit);
 800113c:	4b26      	ldr	r3, [pc, #152]	@ (80011d8 <Task04display+0x10c>)
 800113e:	781b      	ldrb	r3, [r3, #0]
 8001140:	461a      	mov	r2, r3
 8001142:	f107 0334 	add.w	r3, r7, #52	@ 0x34
 8001146:	4923      	ldr	r1, [pc, #140]	@ (80011d4 <Task04display+0x108>)
 8001148:	4618      	mov	r0, r3
 800114a:	f00e fecd 	bl	800fee8 <siprintf>

						ssd1306_Fill(Black);
 800114e:	2000      	movs	r0, #0
 8001150:	f000 f954 	bl	80013fc <ssd1306_Fill>

						ssd1306_SetCursor(5,20);
 8001154:	2114      	movs	r1, #20
 8001156:	2005      	movs	r0, #5
 8001158:	f000 fa9a 	bl	8001690 <ssd1306_SetCursor>
						ssd1306_WriteString(messageDis, Font_11x18, White);
 800115c:	4b1f      	ldr	r3, [pc, #124]	@ (80011dc <Task04display+0x110>)
 800115e:	f107 004c 	add.w	r0, r7, #76	@ 0x4c
 8001162:	2201      	movs	r2, #1
 8001164:	9200      	str	r2, [sp, #0]
 8001166:	cb0e      	ldmia	r3, {r1, r2, r3}
 8001168:	f000 fa6c 	bl	8001644 <ssd1306_WriteString>
//						ssd1306_WriteString(buffer, Font_7x10, White);
//
//						ssd1306_SetCursor(5,15*2);
//						ssd1306_WriteString(result, Font_7x10, White);

						ssd1306_UpdateScreen();
 800116c:	f000 f95e 	bl	800142c <ssd1306_UpdateScreen>
 8001170:	e01c      	b.n	80011ac <Task04display+0xe0>

		  }
	  }
	  else{

		  ssd1306_Fill(Black);
 8001172:	2000      	movs	r0, #0
 8001174:	f000 f942 	bl	80013fc <ssd1306_Fill>
		  ssd1306_SetCursor(5,15);
 8001178:	210f      	movs	r1, #15
 800117a:	2005      	movs	r0, #5
 800117c:	f000 fa88 	bl	8001690 <ssd1306_SetCursor>
		  ssd1306_WriteString(start_message, Font_11x18, White);
 8001180:	4b16      	ldr	r3, [pc, #88]	@ (80011dc <Task04display+0x110>)
 8001182:	f107 0020 	add.w	r0, r7, #32
 8001186:	2201      	movs	r2, #1
 8001188:	9200      	str	r2, [sp, #0]
 800118a:	cb0e      	ldmia	r3, {r1, r2, r3}
 800118c:	f000 fa5a 	bl	8001644 <ssd1306_WriteString>
		  ssd1306_SetCursor(50,32);
 8001190:	2120      	movs	r1, #32
 8001192:	2032      	movs	r0, #50	@ 0x32
 8001194:	f000 fa7c 	bl	8001690 <ssd1306_SetCursor>
		  ssd1306_WriteString(end_message, Font_11x18, White);
 8001198:	4b10      	ldr	r3, [pc, #64]	@ (80011dc <Task04display+0x110>)
 800119a:	f107 000c 	add.w	r0, r7, #12
 800119e:	2201      	movs	r2, #1
 80011a0:	9200      	str	r2, [sp, #0]
 80011a2:	cb0e      	ldmia	r3, {r1, r2, r3}
 80011a4:	f000 fa4e 	bl	8001644 <ssd1306_WriteString>
		  ssd1306_UpdateScreen();
 80011a8:	f000 f940 	bl	800142c <ssd1306_UpdateScreen>

	  }

	  HAL_UART_Transmit(&huart3, "4", 1, HAL_MAX_DELAY);
 80011ac:	f04f 33ff 	mov.w	r3, #4294967295
 80011b0:	2201      	movs	r2, #1
 80011b2:	490b      	ldr	r1, [pc, #44]	@ (80011e0 <Task04display+0x114>)
 80011b4:	480b      	ldr	r0, [pc, #44]	@ (80011e4 <Task04display+0x118>)
 80011b6:	f004 fb6d 	bl	8005894 <HAL_UART_Transmit>
    osDelay(20);
 80011ba:	2014      	movs	r0, #20
 80011bc:	f006 fa7e 	bl	80076bc <osDelay>
	  if(game_started == 1){
 80011c0:	e7a1      	b.n	8001106 <Task04display+0x3a>
 80011c2:	bf00      	nop
 80011c4:	08010fb4 	.word	0x08010fb4
 80011c8:	08010fc8 	.word	0x08010fc8
 80011cc:	2003ca19 	.word	0x2003ca19
 80011d0:	2003c700 	.word	0x2003c700
 80011d4:	08010f80 	.word	0x08010f80
 80011d8:	2003ca1a 	.word	0x2003ca1a
 80011dc:	08011edc 	.word	0x08011edc
 80011e0:	08010fb0 	.word	0x08010fb0
 80011e4:	2003cbc0 	.word	0x2003cbc0

080011e8 <Task05song>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_Task05song */
void Task05song(void *argument)
{
 80011e8:	b580      	push	{r7, lr}
 80011ea:	b086      	sub	sp, #24
 80011ec:	af00      	add	r7, sp, #0
 80011ee:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Task05song */
	char messageSound[10];
  /* Infinite loop */
  for(;;)
  {
	  if(game_started == 1){
 80011f0:	4b27      	ldr	r3, [pc, #156]	@ (8001290 <Task05song+0xa8>)
 80011f2:	f993 3000 	ldrsb.w	r3, [r3]
 80011f6:	2b01      	cmp	r3, #1
 80011f8:	d13e      	bne.n	8001278 <Task05song+0x90>

		  if (xQueueReceive(xQueue_SoundCommand, messageSound, portMAX_DELAY) == pdTRUE) {
 80011fa:	4b26      	ldr	r3, [pc, #152]	@ (8001294 <Task05song+0xac>)
 80011fc:	681b      	ldr	r3, [r3, #0]
 80011fe:	f107 010c 	add.w	r1, r7, #12
 8001202:	f04f 32ff 	mov.w	r2, #4294967295
 8001206:	4618      	mov	r0, r3
 8001208:	f006 fe76 	bl	8007ef8 <xQueueReceive>
 800120c:	4603      	mov	r3, r0
 800120e:	2b01      	cmp	r3, #1
 8001210:	d132      	bne.n	8001278 <Task05song+0x90>

				  uint8_t number_song = atoi(messageSound);
 8001212:	f107 030c 	add.w	r3, r7, #12
 8001216:	4618      	mov	r0, r3
 8001218:	f00e fbba 	bl	800f990 <atoi>
 800121c:	4603      	mov	r3, r0
 800121e:	75fb      	strb	r3, [r7, #23]
							 if (number_song == 1){
 8001220:	7dfb      	ldrb	r3, [r7, #23]
 8001222:	2b01      	cmp	r3, #1
 8001224:	d10b      	bne.n	800123e <Task05song+0x56>

								playsong = 1;
 8001226:	4b1c      	ldr	r3, [pc, #112]	@ (8001298 <Task05song+0xb0>)
 8001228:	2201      	movs	r2, #1
 800122a:	601a      	str	r2, [r3, #0]
								PlayWav();
 800122c:	f7ff fd88 	bl	8000d40 <PlayWav>
								HAL_UART_Receive_IT(&huart3, (uint8_t*)image_buffer, 28 * 28);
 8001230:	f44f 7244 	mov.w	r2, #784	@ 0x310
 8001234:	4919      	ldr	r1, [pc, #100]	@ (800129c <Task05song+0xb4>)
 8001236:	481a      	ldr	r0, [pc, #104]	@ (80012a0 <Task05song+0xb8>)
 8001238:	f004 fbb5 	bl	80059a6 <HAL_UART_Receive_IT>
 800123c:	e01c      	b.n	8001278 <Task05song+0x90>

							 }
							 else if (number_song == 2){
 800123e:	7dfb      	ldrb	r3, [r7, #23]
 8001240:	2b02      	cmp	r3, #2
 8001242:	d10b      	bne.n	800125c <Task05song+0x74>

								playsong = 2;
 8001244:	4b14      	ldr	r3, [pc, #80]	@ (8001298 <Task05song+0xb0>)
 8001246:	2202      	movs	r2, #2
 8001248:	601a      	str	r2, [r3, #0]
								PlayWav();
 800124a:	f7ff fd79 	bl	8000d40 <PlayWav>
								HAL_UART_Receive_IT(&huart3, (uint8_t*)image_buffer, 28 * 28);
 800124e:	f44f 7244 	mov.w	r2, #784	@ 0x310
 8001252:	4912      	ldr	r1, [pc, #72]	@ (800129c <Task05song+0xb4>)
 8001254:	4812      	ldr	r0, [pc, #72]	@ (80012a0 <Task05song+0xb8>)
 8001256:	f004 fba6 	bl	80059a6 <HAL_UART_Receive_IT>
 800125a:	e00d      	b.n	8001278 <Task05song+0x90>
							 }
							 else if (number_song == 3){
 800125c:	7dfb      	ldrb	r3, [r7, #23]
 800125e:	2b03      	cmp	r3, #3
 8001260:	d10a      	bne.n	8001278 <Task05song+0x90>

								playsong = 3;
 8001262:	4b0d      	ldr	r3, [pc, #52]	@ (8001298 <Task05song+0xb0>)
 8001264:	2203      	movs	r2, #3
 8001266:	601a      	str	r2, [r3, #0]
								PlayWav();
 8001268:	f7ff fd6a 	bl	8000d40 <PlayWav>
							    HAL_UART_Receive_IT(&huart3, (uint8_t*)image_buffer, 28 * 28);
 800126c:	f44f 7244 	mov.w	r2, #784	@ 0x310
 8001270:	490a      	ldr	r1, [pc, #40]	@ (800129c <Task05song+0xb4>)
 8001272:	480b      	ldr	r0, [pc, #44]	@ (80012a0 <Task05song+0xb8>)
 8001274:	f004 fb97 	bl	80059a6 <HAL_UART_Receive_IT>
						     }

			}
	  }

	  HAL_UART_Transmit(&huart3, "5", 1, HAL_MAX_DELAY);
 8001278:	f04f 33ff 	mov.w	r3, #4294967295
 800127c:	2201      	movs	r2, #1
 800127e:	4909      	ldr	r1, [pc, #36]	@ (80012a4 <Task05song+0xbc>)
 8001280:	4807      	ldr	r0, [pc, #28]	@ (80012a0 <Task05song+0xb8>)
 8001282:	f004 fb07 	bl	8005894 <HAL_UART_Transmit>
    osDelay(10);
 8001286:	200a      	movs	r0, #10
 8001288:	f006 fa18 	bl	80076bc <osDelay>
	  if(game_started == 1){
 800128c:	e7b0      	b.n	80011f0 <Task05song+0x8>
 800128e:	bf00      	nop
 8001290:	2003ca19 	.word	0x2003ca19
 8001294:	2003c704 	.word	0x2003c704
 8001298:	2003ca20 	.word	0x2003ca20
 800129c:	2003c708 	.word	0x2003c708
 80012a0:	2003cbc0 	.word	0x2003cbc0
 80012a4:	08010fdc 	.word	0x08010fdc

080012a8 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80012a8:	b480      	push	{r7}
 80012aa:	af00      	add	r7, sp, #0
  __ASM volatile ("cpsid i" : : : "memory");
 80012ac:	b672      	cpsid	i
}
 80012ae:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80012b0:	bf00      	nop
 80012b2:	e7fd      	b.n	80012b0 <Error_Handler+0x8>

080012b4 <ssd1306_Reset>:
#include <stdlib.h>
#include <string.h>  // For memcpy

#if defined(SSD1306_USE_I2C)

void ssd1306_Reset(void) {
 80012b4:	b480      	push	{r7}
 80012b6:	af00      	add	r7, sp, #0
    /* for I2C - do nothing */
}
 80012b8:	bf00      	nop
 80012ba:	46bd      	mov	sp, r7
 80012bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012c0:	4770      	bx	lr
	...

080012c4 <ssd1306_WriteCommand>:

// Send a byte to the command register
void ssd1306_WriteCommand(uint8_t byte) {
 80012c4:	b580      	push	{r7, lr}
 80012c6:	b086      	sub	sp, #24
 80012c8:	af04      	add	r7, sp, #16
 80012ca:	4603      	mov	r3, r0
 80012cc:	71fb      	strb	r3, [r7, #7]
    HAL_I2C_Mem_Write(&SSD1306_I2C_PORT, SSD1306_I2C_ADDR, 0x00, 1, &byte, 1, HAL_MAX_DELAY);
 80012ce:	f04f 33ff 	mov.w	r3, #4294967295
 80012d2:	9302      	str	r3, [sp, #8]
 80012d4:	2301      	movs	r3, #1
 80012d6:	9301      	str	r3, [sp, #4]
 80012d8:	1dfb      	adds	r3, r7, #7
 80012da:	9300      	str	r3, [sp, #0]
 80012dc:	2301      	movs	r3, #1
 80012de:	2200      	movs	r2, #0
 80012e0:	2178      	movs	r1, #120	@ 0x78
 80012e2:	4803      	ldr	r0, [pc, #12]	@ (80012f0 <ssd1306_WriteCommand+0x2c>)
 80012e4:	f001 fee4 	bl	80030b0 <HAL_I2C_Mem_Write>
}
 80012e8:	bf00      	nop
 80012ea:	3708      	adds	r7, #8
 80012ec:	46bd      	mov	sp, r7
 80012ee:	bd80      	pop	{r7, pc}
 80012f0:	2003cb20 	.word	0x2003cb20

080012f4 <ssd1306_WriteData>:

// Send data
void ssd1306_WriteData(uint8_t* buffer, size_t buff_size) {
 80012f4:	b580      	push	{r7, lr}
 80012f6:	b086      	sub	sp, #24
 80012f8:	af04      	add	r7, sp, #16
 80012fa:	6078      	str	r0, [r7, #4]
 80012fc:	6039      	str	r1, [r7, #0]
    HAL_I2C_Mem_Write(&SSD1306_I2C_PORT, SSD1306_I2C_ADDR, 0x40, 1, buffer, buff_size, HAL_MAX_DELAY);
 80012fe:	683b      	ldr	r3, [r7, #0]
 8001300:	b29b      	uxth	r3, r3
 8001302:	f04f 32ff 	mov.w	r2, #4294967295
 8001306:	9202      	str	r2, [sp, #8]
 8001308:	9301      	str	r3, [sp, #4]
 800130a:	687b      	ldr	r3, [r7, #4]
 800130c:	9300      	str	r3, [sp, #0]
 800130e:	2301      	movs	r3, #1
 8001310:	2240      	movs	r2, #64	@ 0x40
 8001312:	2178      	movs	r1, #120	@ 0x78
 8001314:	4803      	ldr	r0, [pc, #12]	@ (8001324 <ssd1306_WriteData+0x30>)
 8001316:	f001 fecb 	bl	80030b0 <HAL_I2C_Mem_Write>
}
 800131a:	bf00      	nop
 800131c:	3708      	adds	r7, #8
 800131e:	46bd      	mov	sp, r7
 8001320:	bd80      	pop	{r7, pc}
 8001322:	bf00      	nop
 8001324:	2003cb20 	.word	0x2003cb20

08001328 <ssd1306_Init>:
    }
    return ret;
}

/* Initialize the oled screen */
void ssd1306_Init(void) {
 8001328:	b580      	push	{r7, lr}
 800132a:	af00      	add	r7, sp, #0
    // Reset OLED
    ssd1306_Reset();
 800132c:	f7ff ffc2 	bl	80012b4 <ssd1306_Reset>

    // Wait for the screen to boot
    HAL_Delay(100);
 8001330:	2064      	movs	r0, #100	@ 0x64
 8001332:	f000 fe0f 	bl	8001f54 <HAL_Delay>

    // Init OLED
    ssd1306_SetDisplayOn(0); //display off
 8001336:	2000      	movs	r0, #0
 8001338:	f000 f9d6 	bl	80016e8 <ssd1306_SetDisplayOn>

    ssd1306_WriteCommand(0x20); //Set Memory Addressing Mode
 800133c:	2020      	movs	r0, #32
 800133e:	f7ff ffc1 	bl	80012c4 <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0x00); // 00b,Horizontal Addressing Mode; 01b,Vertical Addressing Mode;
 8001342:	2000      	movs	r0, #0
 8001344:	f7ff ffbe 	bl	80012c4 <ssd1306_WriteCommand>
                                // 10b,Page Addressing Mode (RESET); 11b,Invalid

    ssd1306_WriteCommand(0xB0); //Set Page Start Address for Page Addressing Mode,0-7
 8001348:	20b0      	movs	r0, #176	@ 0xb0
 800134a:	f7ff ffbb 	bl	80012c4 <ssd1306_WriteCommand>

#ifdef SSD1306_MIRROR_VERT
    ssd1306_WriteCommand(0xC0); // Mirror vertically
#else
    ssd1306_WriteCommand(0xC8); //Set COM Output Scan Direction
 800134e:	20c8      	movs	r0, #200	@ 0xc8
 8001350:	f7ff ffb8 	bl	80012c4 <ssd1306_WriteCommand>
#endif

    ssd1306_WriteCommand(0x00); //---set low column address
 8001354:	2000      	movs	r0, #0
 8001356:	f7ff ffb5 	bl	80012c4 <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0x10); //---set high column address
 800135a:	2010      	movs	r0, #16
 800135c:	f7ff ffb2 	bl	80012c4 <ssd1306_WriteCommand>

    ssd1306_WriteCommand(0x40); //--set start line address - CHECK
 8001360:	2040      	movs	r0, #64	@ 0x40
 8001362:	f7ff ffaf 	bl	80012c4 <ssd1306_WriteCommand>

    ssd1306_SetContrast(0xFF);
 8001366:	20ff      	movs	r0, #255	@ 0xff
 8001368:	f000 f9aa 	bl	80016c0 <ssd1306_SetContrast>

#ifdef SSD1306_MIRROR_HORIZ
    ssd1306_WriteCommand(0xA0); // Mirror horizontally
#else
    ssd1306_WriteCommand(0xA1); //--set segment re-map 0 to 127 - CHECK
 800136c:	20a1      	movs	r0, #161	@ 0xa1
 800136e:	f7ff ffa9 	bl	80012c4 <ssd1306_WriteCommand>
#endif

#ifdef SSD1306_INVERSE_COLOR
    ssd1306_WriteCommand(0xA7); //--set inverse color
#else
    ssd1306_WriteCommand(0xA6); //--set normal color
 8001372:	20a6      	movs	r0, #166	@ 0xa6
 8001374:	f7ff ffa6 	bl	80012c4 <ssd1306_WriteCommand>
// Set multiplex ratio.
#if (SSD1306_HEIGHT == 128)
    // Found in the Luma Python lib for SH1106.
    ssd1306_WriteCommand(0xFF);
#else
    ssd1306_WriteCommand(0xA8); //--set multiplex ratio(1 to 64) - CHECK
 8001378:	20a8      	movs	r0, #168	@ 0xa8
 800137a:	f7ff ffa3 	bl	80012c4 <ssd1306_WriteCommand>
#endif

#if (SSD1306_HEIGHT == 32)
    ssd1306_WriteCommand(0x1F); //
#elif (SSD1306_HEIGHT == 64)
    ssd1306_WriteCommand(0x3F); //
 800137e:	203f      	movs	r0, #63	@ 0x3f
 8001380:	f7ff ffa0 	bl	80012c4 <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0x3F); // Seems to work for 128px high displays too.
#else
#error "Only 32, 64, or 128 lines of height are supported!"
#endif

    ssd1306_WriteCommand(0xA4); //0xa4,Output follows RAM content;0xa5,Output ignores RAM content
 8001384:	20a4      	movs	r0, #164	@ 0xa4
 8001386:	f7ff ff9d 	bl	80012c4 <ssd1306_WriteCommand>

    ssd1306_WriteCommand(0xD3); //-set display offset - CHECK
 800138a:	20d3      	movs	r0, #211	@ 0xd3
 800138c:	f7ff ff9a 	bl	80012c4 <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0x00); //-not offset
 8001390:	2000      	movs	r0, #0
 8001392:	f7ff ff97 	bl	80012c4 <ssd1306_WriteCommand>

    ssd1306_WriteCommand(0xD5); //--set display clock divide ratio/oscillator frequency
 8001396:	20d5      	movs	r0, #213	@ 0xd5
 8001398:	f7ff ff94 	bl	80012c4 <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0xF0); //--set divide ratio
 800139c:	20f0      	movs	r0, #240	@ 0xf0
 800139e:	f7ff ff91 	bl	80012c4 <ssd1306_WriteCommand>

    ssd1306_WriteCommand(0xD9); //--set pre-charge period
 80013a2:	20d9      	movs	r0, #217	@ 0xd9
 80013a4:	f7ff ff8e 	bl	80012c4 <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0x22); //
 80013a8:	2022      	movs	r0, #34	@ 0x22
 80013aa:	f7ff ff8b 	bl	80012c4 <ssd1306_WriteCommand>

    ssd1306_WriteCommand(0xDA); //--set com pins hardware configuration - CHECK
 80013ae:	20da      	movs	r0, #218	@ 0xda
 80013b0:	f7ff ff88 	bl	80012c4 <ssd1306_WriteCommand>
#if (SSD1306_HEIGHT == 32)
    ssd1306_WriteCommand(0x02);
#elif (SSD1306_HEIGHT == 64)
    ssd1306_WriteCommand(0x12);
 80013b4:	2012      	movs	r0, #18
 80013b6:	f7ff ff85 	bl	80012c4 <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0x12);
#else
#error "Only 32, 64, or 128 lines of height are supported!"
#endif

    ssd1306_WriteCommand(0xDB); //--set vcomh
 80013ba:	20db      	movs	r0, #219	@ 0xdb
 80013bc:	f7ff ff82 	bl	80012c4 <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0x20); //0x20,0.77xVcc
 80013c0:	2020      	movs	r0, #32
 80013c2:	f7ff ff7f 	bl	80012c4 <ssd1306_WriteCommand>

    ssd1306_WriteCommand(0x8D); //--set DC-DC enable
 80013c6:	208d      	movs	r0, #141	@ 0x8d
 80013c8:	f7ff ff7c 	bl	80012c4 <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0x14); //
 80013cc:	2014      	movs	r0, #20
 80013ce:	f7ff ff79 	bl	80012c4 <ssd1306_WriteCommand>
    ssd1306_SetDisplayOn(1); //--turn on SSD1306 panel
 80013d2:	2001      	movs	r0, #1
 80013d4:	f000 f988 	bl	80016e8 <ssd1306_SetDisplayOn>

    // Clear screen
    ssd1306_Fill(Black);
 80013d8:	2000      	movs	r0, #0
 80013da:	f000 f80f 	bl	80013fc <ssd1306_Fill>
    
    // Flush buffer to screen
    ssd1306_UpdateScreen();
 80013de:	f000 f825 	bl	800142c <ssd1306_UpdateScreen>
    
    // Set default values for screen object
    SSD1306.CurrentX = 0;
 80013e2:	4b05      	ldr	r3, [pc, #20]	@ (80013f8 <ssd1306_Init+0xd0>)
 80013e4:	2200      	movs	r2, #0
 80013e6:	801a      	strh	r2, [r3, #0]
    SSD1306.CurrentY = 0;
 80013e8:	4b03      	ldr	r3, [pc, #12]	@ (80013f8 <ssd1306_Init+0xd0>)
 80013ea:	2200      	movs	r2, #0
 80013ec:	805a      	strh	r2, [r3, #2]
    
    SSD1306.Initialized = 1;
 80013ee:	4b02      	ldr	r3, [pc, #8]	@ (80013f8 <ssd1306_Init+0xd0>)
 80013f0:	2201      	movs	r2, #1
 80013f2:	711a      	strb	r2, [r3, #4]
}
 80013f4:	bf00      	nop
 80013f6:	bd80      	pop	{r7, pc}
 80013f8:	2003d544 	.word	0x2003d544

080013fc <ssd1306_Fill>:

/* Fill the whole screen with the given color */
void ssd1306_Fill(SSD1306_COLOR color) {
 80013fc:	b580      	push	{r7, lr}
 80013fe:	b082      	sub	sp, #8
 8001400:	af00      	add	r7, sp, #0
 8001402:	4603      	mov	r3, r0
 8001404:	71fb      	strb	r3, [r7, #7]
    memset(SSD1306_Buffer, (color == Black) ? 0x00 : 0xFF, sizeof(SSD1306_Buffer));
 8001406:	79fb      	ldrb	r3, [r7, #7]
 8001408:	2b00      	cmp	r3, #0
 800140a:	d101      	bne.n	8001410 <ssd1306_Fill+0x14>
 800140c:	2300      	movs	r3, #0
 800140e:	e000      	b.n	8001412 <ssd1306_Fill+0x16>
 8001410:	23ff      	movs	r3, #255	@ 0xff
 8001412:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8001416:	4619      	mov	r1, r3
 8001418:	4803      	ldr	r0, [pc, #12]	@ (8001428 <ssd1306_Fill+0x2c>)
 800141a:	f00e fdc8 	bl	800ffae <memset>
}
 800141e:	bf00      	nop
 8001420:	3708      	adds	r7, #8
 8001422:	46bd      	mov	sp, r7
 8001424:	bd80      	pop	{r7, pc}
 8001426:	bf00      	nop
 8001428:	2003d144 	.word	0x2003d144

0800142c <ssd1306_UpdateScreen>:

/* Write the screenbuffer with changed to the screen */
void ssd1306_UpdateScreen(void) {
 800142c:	b580      	push	{r7, lr}
 800142e:	b082      	sub	sp, #8
 8001430:	af00      	add	r7, sp, #0
    // depends on the screen height:
    //
    //  * 32px   ==  4 pages
    //  * 64px   ==  8 pages
    //  * 128px  ==  16 pages
    for(uint8_t i = 0; i < SSD1306_HEIGHT/8; i++) {
 8001432:	2300      	movs	r3, #0
 8001434:	71fb      	strb	r3, [r7, #7]
 8001436:	e016      	b.n	8001466 <ssd1306_UpdateScreen+0x3a>
        ssd1306_WriteCommand(0xB0 + i); // Set the current RAM page address.
 8001438:	79fb      	ldrb	r3, [r7, #7]
 800143a:	3b50      	subs	r3, #80	@ 0x50
 800143c:	b2db      	uxtb	r3, r3
 800143e:	4618      	mov	r0, r3
 8001440:	f7ff ff40 	bl	80012c4 <ssd1306_WriteCommand>
        ssd1306_WriteCommand(0x00 + SSD1306_X_OFFSET_LOWER);
 8001444:	2000      	movs	r0, #0
 8001446:	f7ff ff3d 	bl	80012c4 <ssd1306_WriteCommand>
        ssd1306_WriteCommand(0x10 + SSD1306_X_OFFSET_UPPER);
 800144a:	2010      	movs	r0, #16
 800144c:	f7ff ff3a 	bl	80012c4 <ssd1306_WriteCommand>
        ssd1306_WriteData(&SSD1306_Buffer[SSD1306_WIDTH*i],SSD1306_WIDTH);
 8001450:	79fb      	ldrb	r3, [r7, #7]
 8001452:	01db      	lsls	r3, r3, #7
 8001454:	4a08      	ldr	r2, [pc, #32]	@ (8001478 <ssd1306_UpdateScreen+0x4c>)
 8001456:	4413      	add	r3, r2
 8001458:	2180      	movs	r1, #128	@ 0x80
 800145a:	4618      	mov	r0, r3
 800145c:	f7ff ff4a 	bl	80012f4 <ssd1306_WriteData>
    for(uint8_t i = 0; i < SSD1306_HEIGHT/8; i++) {
 8001460:	79fb      	ldrb	r3, [r7, #7]
 8001462:	3301      	adds	r3, #1
 8001464:	71fb      	strb	r3, [r7, #7]
 8001466:	79fb      	ldrb	r3, [r7, #7]
 8001468:	2b07      	cmp	r3, #7
 800146a:	d9e5      	bls.n	8001438 <ssd1306_UpdateScreen+0xc>
    }
}
 800146c:	bf00      	nop
 800146e:	bf00      	nop
 8001470:	3708      	adds	r7, #8
 8001472:	46bd      	mov	sp, r7
 8001474:	bd80      	pop	{r7, pc}
 8001476:	bf00      	nop
 8001478:	2003d144 	.word	0x2003d144

0800147c <ssd1306_DrawPixel>:
 * Draw one pixel in the screenbuffer
 * X => X Coordinate
 * Y => Y Coordinate
 * color => Pixel color
 */
void ssd1306_DrawPixel(uint8_t x, uint8_t y, SSD1306_COLOR color) {
 800147c:	b480      	push	{r7}
 800147e:	b083      	sub	sp, #12
 8001480:	af00      	add	r7, sp, #0
 8001482:	4603      	mov	r3, r0
 8001484:	71fb      	strb	r3, [r7, #7]
 8001486:	460b      	mov	r3, r1
 8001488:	71bb      	strb	r3, [r7, #6]
 800148a:	4613      	mov	r3, r2
 800148c:	717b      	strb	r3, [r7, #5]
    if(x >= SSD1306_WIDTH || y >= SSD1306_HEIGHT) {
 800148e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001492:	2b00      	cmp	r3, #0
 8001494:	db3d      	blt.n	8001512 <ssd1306_DrawPixel+0x96>
 8001496:	79bb      	ldrb	r3, [r7, #6]
 8001498:	2b3f      	cmp	r3, #63	@ 0x3f
 800149a:	d83a      	bhi.n	8001512 <ssd1306_DrawPixel+0x96>
        // Don't write outside the buffer
        return;
    }
   
    // Draw in the right color
    if(color == White) {
 800149c:	797b      	ldrb	r3, [r7, #5]
 800149e:	2b01      	cmp	r3, #1
 80014a0:	d11a      	bne.n	80014d8 <ssd1306_DrawPixel+0x5c>
        SSD1306_Buffer[x + (y / 8) * SSD1306_WIDTH] |= 1 << (y % 8);
 80014a2:	79fa      	ldrb	r2, [r7, #7]
 80014a4:	79bb      	ldrb	r3, [r7, #6]
 80014a6:	08db      	lsrs	r3, r3, #3
 80014a8:	b2d8      	uxtb	r0, r3
 80014aa:	4603      	mov	r3, r0
 80014ac:	01db      	lsls	r3, r3, #7
 80014ae:	4413      	add	r3, r2
 80014b0:	4a1b      	ldr	r2, [pc, #108]	@ (8001520 <ssd1306_DrawPixel+0xa4>)
 80014b2:	5cd3      	ldrb	r3, [r2, r3]
 80014b4:	b25a      	sxtb	r2, r3
 80014b6:	79bb      	ldrb	r3, [r7, #6]
 80014b8:	f003 0307 	and.w	r3, r3, #7
 80014bc:	2101      	movs	r1, #1
 80014be:	fa01 f303 	lsl.w	r3, r1, r3
 80014c2:	b25b      	sxtb	r3, r3
 80014c4:	4313      	orrs	r3, r2
 80014c6:	b259      	sxtb	r1, r3
 80014c8:	79fa      	ldrb	r2, [r7, #7]
 80014ca:	4603      	mov	r3, r0
 80014cc:	01db      	lsls	r3, r3, #7
 80014ce:	4413      	add	r3, r2
 80014d0:	b2c9      	uxtb	r1, r1
 80014d2:	4a13      	ldr	r2, [pc, #76]	@ (8001520 <ssd1306_DrawPixel+0xa4>)
 80014d4:	54d1      	strb	r1, [r2, r3]
 80014d6:	e01d      	b.n	8001514 <ssd1306_DrawPixel+0x98>
    } else { 
        SSD1306_Buffer[x + (y / 8) * SSD1306_WIDTH] &= ~(1 << (y % 8));
 80014d8:	79fa      	ldrb	r2, [r7, #7]
 80014da:	79bb      	ldrb	r3, [r7, #6]
 80014dc:	08db      	lsrs	r3, r3, #3
 80014de:	b2d8      	uxtb	r0, r3
 80014e0:	4603      	mov	r3, r0
 80014e2:	01db      	lsls	r3, r3, #7
 80014e4:	4413      	add	r3, r2
 80014e6:	4a0e      	ldr	r2, [pc, #56]	@ (8001520 <ssd1306_DrawPixel+0xa4>)
 80014e8:	5cd3      	ldrb	r3, [r2, r3]
 80014ea:	b25a      	sxtb	r2, r3
 80014ec:	79bb      	ldrb	r3, [r7, #6]
 80014ee:	f003 0307 	and.w	r3, r3, #7
 80014f2:	2101      	movs	r1, #1
 80014f4:	fa01 f303 	lsl.w	r3, r1, r3
 80014f8:	b25b      	sxtb	r3, r3
 80014fa:	43db      	mvns	r3, r3
 80014fc:	b25b      	sxtb	r3, r3
 80014fe:	4013      	ands	r3, r2
 8001500:	b259      	sxtb	r1, r3
 8001502:	79fa      	ldrb	r2, [r7, #7]
 8001504:	4603      	mov	r3, r0
 8001506:	01db      	lsls	r3, r3, #7
 8001508:	4413      	add	r3, r2
 800150a:	b2c9      	uxtb	r1, r1
 800150c:	4a04      	ldr	r2, [pc, #16]	@ (8001520 <ssd1306_DrawPixel+0xa4>)
 800150e:	54d1      	strb	r1, [r2, r3]
 8001510:	e000      	b.n	8001514 <ssd1306_DrawPixel+0x98>
        return;
 8001512:	bf00      	nop
    }
}
 8001514:	370c      	adds	r7, #12
 8001516:	46bd      	mov	sp, r7
 8001518:	f85d 7b04 	ldr.w	r7, [sp], #4
 800151c:	4770      	bx	lr
 800151e:	bf00      	nop
 8001520:	2003d144 	.word	0x2003d144

08001524 <ssd1306_WriteChar>:
 * Draw 1 char to the screen buffer
 * ch       => char om weg te schrijven
 * Font     => Font waarmee we gaan schrijven
 * color    => Black or White
 */
char ssd1306_WriteChar(char ch, SSD1306_Font_t Font, SSD1306_COLOR color) {
 8001524:	b590      	push	{r4, r7, lr}
 8001526:	b089      	sub	sp, #36	@ 0x24
 8001528:	af00      	add	r7, sp, #0
 800152a:	4604      	mov	r4, r0
 800152c:	4638      	mov	r0, r7
 800152e:	e880 000e 	stmia.w	r0, {r1, r2, r3}
 8001532:	4623      	mov	r3, r4
 8001534:	73fb      	strb	r3, [r7, #15]
    uint32_t i, b, j;
    
    // Check if character is valid
    if (ch < 32 || ch > 126)
 8001536:	7bfb      	ldrb	r3, [r7, #15]
 8001538:	2b1f      	cmp	r3, #31
 800153a:	d902      	bls.n	8001542 <ssd1306_WriteChar+0x1e>
 800153c:	7bfb      	ldrb	r3, [r7, #15]
 800153e:	2b7e      	cmp	r3, #126	@ 0x7e
 8001540:	d901      	bls.n	8001546 <ssd1306_WriteChar+0x22>
        return 0;
 8001542:	2300      	movs	r3, #0
 8001544:	e077      	b.n	8001636 <ssd1306_WriteChar+0x112>
    
    // Check remaining space on current line
    if (SSD1306_WIDTH < (SSD1306.CurrentX + Font.width) ||
 8001546:	4b3e      	ldr	r3, [pc, #248]	@ (8001640 <ssd1306_WriteChar+0x11c>)
 8001548:	881b      	ldrh	r3, [r3, #0]
 800154a:	461a      	mov	r2, r3
 800154c:	783b      	ldrb	r3, [r7, #0]
 800154e:	4413      	add	r3, r2
 8001550:	2b80      	cmp	r3, #128	@ 0x80
 8001552:	dc06      	bgt.n	8001562 <ssd1306_WriteChar+0x3e>
        SSD1306_HEIGHT < (SSD1306.CurrentY + Font.height))
 8001554:	4b3a      	ldr	r3, [pc, #232]	@ (8001640 <ssd1306_WriteChar+0x11c>)
 8001556:	885b      	ldrh	r3, [r3, #2]
 8001558:	461a      	mov	r2, r3
 800155a:	787b      	ldrb	r3, [r7, #1]
 800155c:	4413      	add	r3, r2
    if (SSD1306_WIDTH < (SSD1306.CurrentX + Font.width) ||
 800155e:	2b40      	cmp	r3, #64	@ 0x40
 8001560:	dd01      	ble.n	8001566 <ssd1306_WriteChar+0x42>
    {
        // Not enough space on current line
        return 0;
 8001562:	2300      	movs	r3, #0
 8001564:	e067      	b.n	8001636 <ssd1306_WriteChar+0x112>
    }
    
    // Use the font to write
    for(i = 0; i < Font.height; i++) {
 8001566:	2300      	movs	r3, #0
 8001568:	61fb      	str	r3, [r7, #28]
 800156a:	e04e      	b.n	800160a <ssd1306_WriteChar+0xe6>
        b = Font.data[(ch - 32) * Font.height + i];
 800156c:	687a      	ldr	r2, [r7, #4]
 800156e:	7bfb      	ldrb	r3, [r7, #15]
 8001570:	3b20      	subs	r3, #32
 8001572:	7879      	ldrb	r1, [r7, #1]
 8001574:	fb01 f303 	mul.w	r3, r1, r3
 8001578:	4619      	mov	r1, r3
 800157a:	69fb      	ldr	r3, [r7, #28]
 800157c:	440b      	add	r3, r1
 800157e:	005b      	lsls	r3, r3, #1
 8001580:	4413      	add	r3, r2
 8001582:	881b      	ldrh	r3, [r3, #0]
 8001584:	617b      	str	r3, [r7, #20]
        for(j = 0; j < Font.width; j++) {
 8001586:	2300      	movs	r3, #0
 8001588:	61bb      	str	r3, [r7, #24]
 800158a:	e036      	b.n	80015fa <ssd1306_WriteChar+0xd6>
            if((b << j) & 0x8000)  {
 800158c:	697a      	ldr	r2, [r7, #20]
 800158e:	69bb      	ldr	r3, [r7, #24]
 8001590:	fa02 f303 	lsl.w	r3, r2, r3
 8001594:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8001598:	2b00      	cmp	r3, #0
 800159a:	d013      	beq.n	80015c4 <ssd1306_WriteChar+0xa0>
                ssd1306_DrawPixel(SSD1306.CurrentX + j, (SSD1306.CurrentY + i), (SSD1306_COLOR) color);
 800159c:	4b28      	ldr	r3, [pc, #160]	@ (8001640 <ssd1306_WriteChar+0x11c>)
 800159e:	881b      	ldrh	r3, [r3, #0]
 80015a0:	b2da      	uxtb	r2, r3
 80015a2:	69bb      	ldr	r3, [r7, #24]
 80015a4:	b2db      	uxtb	r3, r3
 80015a6:	4413      	add	r3, r2
 80015a8:	b2d8      	uxtb	r0, r3
 80015aa:	4b25      	ldr	r3, [pc, #148]	@ (8001640 <ssd1306_WriteChar+0x11c>)
 80015ac:	885b      	ldrh	r3, [r3, #2]
 80015ae:	b2da      	uxtb	r2, r3
 80015b0:	69fb      	ldr	r3, [r7, #28]
 80015b2:	b2db      	uxtb	r3, r3
 80015b4:	4413      	add	r3, r2
 80015b6:	b2db      	uxtb	r3, r3
 80015b8:	f897 2030 	ldrb.w	r2, [r7, #48]	@ 0x30
 80015bc:	4619      	mov	r1, r3
 80015be:	f7ff ff5d 	bl	800147c <ssd1306_DrawPixel>
 80015c2:	e017      	b.n	80015f4 <ssd1306_WriteChar+0xd0>
            } else {
                ssd1306_DrawPixel(SSD1306.CurrentX + j, (SSD1306.CurrentY + i), (SSD1306_COLOR)!color);
 80015c4:	4b1e      	ldr	r3, [pc, #120]	@ (8001640 <ssd1306_WriteChar+0x11c>)
 80015c6:	881b      	ldrh	r3, [r3, #0]
 80015c8:	b2da      	uxtb	r2, r3
 80015ca:	69bb      	ldr	r3, [r7, #24]
 80015cc:	b2db      	uxtb	r3, r3
 80015ce:	4413      	add	r3, r2
 80015d0:	b2d8      	uxtb	r0, r3
 80015d2:	4b1b      	ldr	r3, [pc, #108]	@ (8001640 <ssd1306_WriteChar+0x11c>)
 80015d4:	885b      	ldrh	r3, [r3, #2]
 80015d6:	b2da      	uxtb	r2, r3
 80015d8:	69fb      	ldr	r3, [r7, #28]
 80015da:	b2db      	uxtb	r3, r3
 80015dc:	4413      	add	r3, r2
 80015de:	b2d9      	uxtb	r1, r3
 80015e0:	f897 3030 	ldrb.w	r3, [r7, #48]	@ 0x30
 80015e4:	2b00      	cmp	r3, #0
 80015e6:	bf0c      	ite	eq
 80015e8:	2301      	moveq	r3, #1
 80015ea:	2300      	movne	r3, #0
 80015ec:	b2db      	uxtb	r3, r3
 80015ee:	461a      	mov	r2, r3
 80015f0:	f7ff ff44 	bl	800147c <ssd1306_DrawPixel>
        for(j = 0; j < Font.width; j++) {
 80015f4:	69bb      	ldr	r3, [r7, #24]
 80015f6:	3301      	adds	r3, #1
 80015f8:	61bb      	str	r3, [r7, #24]
 80015fa:	783b      	ldrb	r3, [r7, #0]
 80015fc:	461a      	mov	r2, r3
 80015fe:	69bb      	ldr	r3, [r7, #24]
 8001600:	4293      	cmp	r3, r2
 8001602:	d3c3      	bcc.n	800158c <ssd1306_WriteChar+0x68>
    for(i = 0; i < Font.height; i++) {
 8001604:	69fb      	ldr	r3, [r7, #28]
 8001606:	3301      	adds	r3, #1
 8001608:	61fb      	str	r3, [r7, #28]
 800160a:	787b      	ldrb	r3, [r7, #1]
 800160c:	461a      	mov	r2, r3
 800160e:	69fb      	ldr	r3, [r7, #28]
 8001610:	4293      	cmp	r3, r2
 8001612:	d3ab      	bcc.n	800156c <ssd1306_WriteChar+0x48>
            }
        }
    }
    
    // The current space is now taken
    SSD1306.CurrentX += Font.char_width ? Font.char_width[ch - 32] : Font.width;
 8001614:	4b0a      	ldr	r3, [pc, #40]	@ (8001640 <ssd1306_WriteChar+0x11c>)
 8001616:	881b      	ldrh	r3, [r3, #0]
 8001618:	68ba      	ldr	r2, [r7, #8]
 800161a:	2a00      	cmp	r2, #0
 800161c:	d005      	beq.n	800162a <ssd1306_WriteChar+0x106>
 800161e:	68b9      	ldr	r1, [r7, #8]
 8001620:	7bfa      	ldrb	r2, [r7, #15]
 8001622:	3a20      	subs	r2, #32
 8001624:	440a      	add	r2, r1
 8001626:	7812      	ldrb	r2, [r2, #0]
 8001628:	e000      	b.n	800162c <ssd1306_WriteChar+0x108>
 800162a:	783a      	ldrb	r2, [r7, #0]
 800162c:	4413      	add	r3, r2
 800162e:	b29a      	uxth	r2, r3
 8001630:	4b03      	ldr	r3, [pc, #12]	@ (8001640 <ssd1306_WriteChar+0x11c>)
 8001632:	801a      	strh	r2, [r3, #0]
    
    // Return written char for validation
    return ch;
 8001634:	7bfb      	ldrb	r3, [r7, #15]
}
 8001636:	4618      	mov	r0, r3
 8001638:	3724      	adds	r7, #36	@ 0x24
 800163a:	46bd      	mov	sp, r7
 800163c:	bd90      	pop	{r4, r7, pc}
 800163e:	bf00      	nop
 8001640:	2003d544 	.word	0x2003d544

08001644 <ssd1306_WriteString>:

/* Write full string to screenbuffer */
char ssd1306_WriteString(char* str, SSD1306_Font_t Font, SSD1306_COLOR color) {
 8001644:	b580      	push	{r7, lr}
 8001646:	b086      	sub	sp, #24
 8001648:	af02      	add	r7, sp, #8
 800164a:	60f8      	str	r0, [r7, #12]
 800164c:	4638      	mov	r0, r7
 800164e:	e880 000e 	stmia.w	r0, {r1, r2, r3}
    while (*str) {
 8001652:	e013      	b.n	800167c <ssd1306_WriteString+0x38>
        if (ssd1306_WriteChar(*str, Font, color) != *str) {
 8001654:	68fb      	ldr	r3, [r7, #12]
 8001656:	7818      	ldrb	r0, [r3, #0]
 8001658:	7e3b      	ldrb	r3, [r7, #24]
 800165a:	9300      	str	r3, [sp, #0]
 800165c:	463b      	mov	r3, r7
 800165e:	cb0e      	ldmia	r3, {r1, r2, r3}
 8001660:	f7ff ff60 	bl	8001524 <ssd1306_WriteChar>
 8001664:	4603      	mov	r3, r0
 8001666:	461a      	mov	r2, r3
 8001668:	68fb      	ldr	r3, [r7, #12]
 800166a:	781b      	ldrb	r3, [r3, #0]
 800166c:	429a      	cmp	r2, r3
 800166e:	d002      	beq.n	8001676 <ssd1306_WriteString+0x32>
            // Char could not be written
            return *str;
 8001670:	68fb      	ldr	r3, [r7, #12]
 8001672:	781b      	ldrb	r3, [r3, #0]
 8001674:	e008      	b.n	8001688 <ssd1306_WriteString+0x44>
        }
        str++;
 8001676:	68fb      	ldr	r3, [r7, #12]
 8001678:	3301      	adds	r3, #1
 800167a:	60fb      	str	r3, [r7, #12]
    while (*str) {
 800167c:	68fb      	ldr	r3, [r7, #12]
 800167e:	781b      	ldrb	r3, [r3, #0]
 8001680:	2b00      	cmp	r3, #0
 8001682:	d1e7      	bne.n	8001654 <ssd1306_WriteString+0x10>
    }
    
    // Everything ok
    return *str;
 8001684:	68fb      	ldr	r3, [r7, #12]
 8001686:	781b      	ldrb	r3, [r3, #0]
}
 8001688:	4618      	mov	r0, r3
 800168a:	3710      	adds	r7, #16
 800168c:	46bd      	mov	sp, r7
 800168e:	bd80      	pop	{r7, pc}

08001690 <ssd1306_SetCursor>:

/* Position the cursor */
void ssd1306_SetCursor(uint8_t x, uint8_t y) {
 8001690:	b480      	push	{r7}
 8001692:	b083      	sub	sp, #12
 8001694:	af00      	add	r7, sp, #0
 8001696:	4603      	mov	r3, r0
 8001698:	460a      	mov	r2, r1
 800169a:	71fb      	strb	r3, [r7, #7]
 800169c:	4613      	mov	r3, r2
 800169e:	71bb      	strb	r3, [r7, #6]
    SSD1306.CurrentX = x;
 80016a0:	79fb      	ldrb	r3, [r7, #7]
 80016a2:	b29a      	uxth	r2, r3
 80016a4:	4b05      	ldr	r3, [pc, #20]	@ (80016bc <ssd1306_SetCursor+0x2c>)
 80016a6:	801a      	strh	r2, [r3, #0]
    SSD1306.CurrentY = y;
 80016a8:	79bb      	ldrb	r3, [r7, #6]
 80016aa:	b29a      	uxth	r2, r3
 80016ac:	4b03      	ldr	r3, [pc, #12]	@ (80016bc <ssd1306_SetCursor+0x2c>)
 80016ae:	805a      	strh	r2, [r3, #2]
}
 80016b0:	bf00      	nop
 80016b2:	370c      	adds	r7, #12
 80016b4:	46bd      	mov	sp, r7
 80016b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016ba:	4770      	bx	lr
 80016bc:	2003d544 	.word	0x2003d544

080016c0 <ssd1306_SetContrast>:
        }
    }
    return;
}

void ssd1306_SetContrast(const uint8_t value) {
 80016c0:	b580      	push	{r7, lr}
 80016c2:	b084      	sub	sp, #16
 80016c4:	af00      	add	r7, sp, #0
 80016c6:	4603      	mov	r3, r0
 80016c8:	71fb      	strb	r3, [r7, #7]
    const uint8_t kSetContrastControlRegister = 0x81;
 80016ca:	2381      	movs	r3, #129	@ 0x81
 80016cc:	73fb      	strb	r3, [r7, #15]
    ssd1306_WriteCommand(kSetContrastControlRegister);
 80016ce:	7bfb      	ldrb	r3, [r7, #15]
 80016d0:	4618      	mov	r0, r3
 80016d2:	f7ff fdf7 	bl	80012c4 <ssd1306_WriteCommand>
    ssd1306_WriteCommand(value);
 80016d6:	79fb      	ldrb	r3, [r7, #7]
 80016d8:	4618      	mov	r0, r3
 80016da:	f7ff fdf3 	bl	80012c4 <ssd1306_WriteCommand>
}
 80016de:	bf00      	nop
 80016e0:	3710      	adds	r7, #16
 80016e2:	46bd      	mov	sp, r7
 80016e4:	bd80      	pop	{r7, pc}
	...

080016e8 <ssd1306_SetDisplayOn>:

void ssd1306_SetDisplayOn(const uint8_t on) {
 80016e8:	b580      	push	{r7, lr}
 80016ea:	b084      	sub	sp, #16
 80016ec:	af00      	add	r7, sp, #0
 80016ee:	4603      	mov	r3, r0
 80016f0:	71fb      	strb	r3, [r7, #7]
    uint8_t value;
    if (on) {
 80016f2:	79fb      	ldrb	r3, [r7, #7]
 80016f4:	2b00      	cmp	r3, #0
 80016f6:	d005      	beq.n	8001704 <ssd1306_SetDisplayOn+0x1c>
        value = 0xAF;   // Display on
 80016f8:	23af      	movs	r3, #175	@ 0xaf
 80016fa:	73fb      	strb	r3, [r7, #15]
        SSD1306.DisplayOn = 1;
 80016fc:	4b08      	ldr	r3, [pc, #32]	@ (8001720 <ssd1306_SetDisplayOn+0x38>)
 80016fe:	2201      	movs	r2, #1
 8001700:	715a      	strb	r2, [r3, #5]
 8001702:	e004      	b.n	800170e <ssd1306_SetDisplayOn+0x26>
    } else {
        value = 0xAE;   // Display off
 8001704:	23ae      	movs	r3, #174	@ 0xae
 8001706:	73fb      	strb	r3, [r7, #15]
        SSD1306.DisplayOn = 0;
 8001708:	4b05      	ldr	r3, [pc, #20]	@ (8001720 <ssd1306_SetDisplayOn+0x38>)
 800170a:	2200      	movs	r2, #0
 800170c:	715a      	strb	r2, [r3, #5]
    }
    ssd1306_WriteCommand(value);
 800170e:	7bfb      	ldrb	r3, [r7, #15]
 8001710:	4618      	mov	r0, r3
 8001712:	f7ff fdd7 	bl	80012c4 <ssd1306_WriteCommand>
}
 8001716:	bf00      	nop
 8001718:	3710      	adds	r7, #16
 800171a:	46bd      	mov	sp, r7
 800171c:	bd80      	pop	{r7, pc}
 800171e:	bf00      	nop
 8001720:	2003d544 	.word	0x2003d544

08001724 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001724:	b580      	push	{r7, lr}
 8001726:	b082      	sub	sp, #8
 8001728:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_PWR_CLK_ENABLE();
 800172a:	4b11      	ldr	r3, [pc, #68]	@ (8001770 <HAL_MspInit+0x4c>)
 800172c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800172e:	4a10      	ldr	r2, [pc, #64]	@ (8001770 <HAL_MspInit+0x4c>)
 8001730:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8001734:	6413      	str	r3, [r2, #64]	@ 0x40
 8001736:	4b0e      	ldr	r3, [pc, #56]	@ (8001770 <HAL_MspInit+0x4c>)
 8001738:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800173a:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800173e:	607b      	str	r3, [r7, #4]
 8001740:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001742:	4b0b      	ldr	r3, [pc, #44]	@ (8001770 <HAL_MspInit+0x4c>)
 8001744:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001746:	4a0a      	ldr	r2, [pc, #40]	@ (8001770 <HAL_MspInit+0x4c>)
 8001748:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 800174c:	6453      	str	r3, [r2, #68]	@ 0x44
 800174e:	4b08      	ldr	r3, [pc, #32]	@ (8001770 <HAL_MspInit+0x4c>)
 8001750:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001752:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8001756:	603b      	str	r3, [r7, #0]
 8001758:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 800175a:	2200      	movs	r2, #0
 800175c:	210f      	movs	r1, #15
 800175e:	f06f 0001 	mvn.w	r0, #1
 8001762:	f000 fcf6 	bl	8002152 <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001766:	bf00      	nop
 8001768:	3708      	adds	r7, #8
 800176a:	46bd      	mov	sp, r7
 800176c:	bd80      	pop	{r7, pc}
 800176e:	bf00      	nop
 8001770:	40023800 	.word	0x40023800

08001774 <HAL_DAC_MspInit>:
* This function configures the hardware resources used in this example
* @param hdac: DAC handle pointer
* @retval None
*/
void HAL_DAC_MspInit(DAC_HandleTypeDef* hdac)
{
 8001774:	b580      	push	{r7, lr}
 8001776:	b08a      	sub	sp, #40	@ 0x28
 8001778:	af00      	add	r7, sp, #0
 800177a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800177c:	f107 0314 	add.w	r3, r7, #20
 8001780:	2200      	movs	r2, #0
 8001782:	601a      	str	r2, [r3, #0]
 8001784:	605a      	str	r2, [r3, #4]
 8001786:	609a      	str	r2, [r3, #8]
 8001788:	60da      	str	r2, [r3, #12]
 800178a:	611a      	str	r2, [r3, #16]
  if(hdac->Instance==DAC)
 800178c:	687b      	ldr	r3, [r7, #4]
 800178e:	681b      	ldr	r3, [r3, #0]
 8001790:	4a15      	ldr	r2, [pc, #84]	@ (80017e8 <HAL_DAC_MspInit+0x74>)
 8001792:	4293      	cmp	r3, r2
 8001794:	d123      	bne.n	80017de <HAL_DAC_MspInit+0x6a>
  {
  /* USER CODE BEGIN DAC_MspInit 0 */

  /* USER CODE END DAC_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_DAC_CLK_ENABLE();
 8001796:	4b15      	ldr	r3, [pc, #84]	@ (80017ec <HAL_DAC_MspInit+0x78>)
 8001798:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800179a:	4a14      	ldr	r2, [pc, #80]	@ (80017ec <HAL_DAC_MspInit+0x78>)
 800179c:	f043 5300 	orr.w	r3, r3, #536870912	@ 0x20000000
 80017a0:	6413      	str	r3, [r2, #64]	@ 0x40
 80017a2:	4b12      	ldr	r3, [pc, #72]	@ (80017ec <HAL_DAC_MspInit+0x78>)
 80017a4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80017a6:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 80017aa:	613b      	str	r3, [r7, #16]
 80017ac:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80017ae:	4b0f      	ldr	r3, [pc, #60]	@ (80017ec <HAL_DAC_MspInit+0x78>)
 80017b0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80017b2:	4a0e      	ldr	r2, [pc, #56]	@ (80017ec <HAL_DAC_MspInit+0x78>)
 80017b4:	f043 0301 	orr.w	r3, r3, #1
 80017b8:	6313      	str	r3, [r2, #48]	@ 0x30
 80017ba:	4b0c      	ldr	r3, [pc, #48]	@ (80017ec <HAL_DAC_MspInit+0x78>)
 80017bc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80017be:	f003 0301 	and.w	r3, r3, #1
 80017c2:	60fb      	str	r3, [r7, #12]
 80017c4:	68fb      	ldr	r3, [r7, #12]
    /**DAC GPIO Configuration
    PA4     ------> DAC_OUT1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_4;
 80017c6:	2310      	movs	r3, #16
 80017c8:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80017ca:	2303      	movs	r3, #3
 80017cc:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80017ce:	2300      	movs	r3, #0
 80017d0:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80017d2:	f107 0314 	add.w	r3, r7, #20
 80017d6:	4619      	mov	r1, r3
 80017d8:	4805      	ldr	r0, [pc, #20]	@ (80017f0 <HAL_DAC_MspInit+0x7c>)
 80017da:	f001 f9ef 	bl	8002bbc <HAL_GPIO_Init>

  /* USER CODE END DAC_MspInit 1 */

  }

}
 80017de:	bf00      	nop
 80017e0:	3728      	adds	r7, #40	@ 0x28
 80017e2:	46bd      	mov	sp, r7
 80017e4:	bd80      	pop	{r7, pc}
 80017e6:	bf00      	nop
 80017e8:	40007400 	.word	0x40007400
 80017ec:	40023800 	.word	0x40023800
 80017f0:	40020000 	.word	0x40020000

080017f4 <HAL_ETH_MspInit>:
* This function configures the hardware resources used in this example
* @param heth: ETH handle pointer
* @retval None
*/
void HAL_ETH_MspInit(ETH_HandleTypeDef* heth)
{
 80017f4:	b580      	push	{r7, lr}
 80017f6:	b08e      	sub	sp, #56	@ 0x38
 80017f8:	af00      	add	r7, sp, #0
 80017fa:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80017fc:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8001800:	2200      	movs	r2, #0
 8001802:	601a      	str	r2, [r3, #0]
 8001804:	605a      	str	r2, [r3, #4]
 8001806:	609a      	str	r2, [r3, #8]
 8001808:	60da      	str	r2, [r3, #12]
 800180a:	611a      	str	r2, [r3, #16]
  if(heth->Instance==ETH)
 800180c:	687b      	ldr	r3, [r7, #4]
 800180e:	681b      	ldr	r3, [r3, #0]
 8001810:	4a4e      	ldr	r2, [pc, #312]	@ (800194c <HAL_ETH_MspInit+0x158>)
 8001812:	4293      	cmp	r3, r2
 8001814:	f040 8096 	bne.w	8001944 <HAL_ETH_MspInit+0x150>
  {
  /* USER CODE BEGIN ETH_MspInit 0 */

  /* USER CODE END ETH_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ETH_CLK_ENABLE();
 8001818:	4b4d      	ldr	r3, [pc, #308]	@ (8001950 <HAL_ETH_MspInit+0x15c>)
 800181a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800181c:	4a4c      	ldr	r2, [pc, #304]	@ (8001950 <HAL_ETH_MspInit+0x15c>)
 800181e:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 8001822:	6313      	str	r3, [r2, #48]	@ 0x30
 8001824:	4b4a      	ldr	r3, [pc, #296]	@ (8001950 <HAL_ETH_MspInit+0x15c>)
 8001826:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001828:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800182c:	623b      	str	r3, [r7, #32]
 800182e:	6a3b      	ldr	r3, [r7, #32]
 8001830:	4b47      	ldr	r3, [pc, #284]	@ (8001950 <HAL_ETH_MspInit+0x15c>)
 8001832:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001834:	4a46      	ldr	r2, [pc, #280]	@ (8001950 <HAL_ETH_MspInit+0x15c>)
 8001836:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 800183a:	6313      	str	r3, [r2, #48]	@ 0x30
 800183c:	4b44      	ldr	r3, [pc, #272]	@ (8001950 <HAL_ETH_MspInit+0x15c>)
 800183e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001840:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 8001844:	61fb      	str	r3, [r7, #28]
 8001846:	69fb      	ldr	r3, [r7, #28]
 8001848:	4b41      	ldr	r3, [pc, #260]	@ (8001950 <HAL_ETH_MspInit+0x15c>)
 800184a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800184c:	4a40      	ldr	r2, [pc, #256]	@ (8001950 <HAL_ETH_MspInit+0x15c>)
 800184e:	f043 6300 	orr.w	r3, r3, #134217728	@ 0x8000000
 8001852:	6313      	str	r3, [r2, #48]	@ 0x30
 8001854:	4b3e      	ldr	r3, [pc, #248]	@ (8001950 <HAL_ETH_MspInit+0x15c>)
 8001856:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001858:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 800185c:	61bb      	str	r3, [r7, #24]
 800185e:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8001860:	4b3b      	ldr	r3, [pc, #236]	@ (8001950 <HAL_ETH_MspInit+0x15c>)
 8001862:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001864:	4a3a      	ldr	r2, [pc, #232]	@ (8001950 <HAL_ETH_MspInit+0x15c>)
 8001866:	f043 0304 	orr.w	r3, r3, #4
 800186a:	6313      	str	r3, [r2, #48]	@ 0x30
 800186c:	4b38      	ldr	r3, [pc, #224]	@ (8001950 <HAL_ETH_MspInit+0x15c>)
 800186e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001870:	f003 0304 	and.w	r3, r3, #4
 8001874:	617b      	str	r3, [r7, #20]
 8001876:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001878:	4b35      	ldr	r3, [pc, #212]	@ (8001950 <HAL_ETH_MspInit+0x15c>)
 800187a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800187c:	4a34      	ldr	r2, [pc, #208]	@ (8001950 <HAL_ETH_MspInit+0x15c>)
 800187e:	f043 0301 	orr.w	r3, r3, #1
 8001882:	6313      	str	r3, [r2, #48]	@ 0x30
 8001884:	4b32      	ldr	r3, [pc, #200]	@ (8001950 <HAL_ETH_MspInit+0x15c>)
 8001886:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001888:	f003 0301 	and.w	r3, r3, #1
 800188c:	613b      	str	r3, [r7, #16]
 800188e:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001890:	4b2f      	ldr	r3, [pc, #188]	@ (8001950 <HAL_ETH_MspInit+0x15c>)
 8001892:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001894:	4a2e      	ldr	r2, [pc, #184]	@ (8001950 <HAL_ETH_MspInit+0x15c>)
 8001896:	f043 0302 	orr.w	r3, r3, #2
 800189a:	6313      	str	r3, [r2, #48]	@ 0x30
 800189c:	4b2c      	ldr	r3, [pc, #176]	@ (8001950 <HAL_ETH_MspInit+0x15c>)
 800189e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80018a0:	f003 0302 	and.w	r3, r3, #2
 80018a4:	60fb      	str	r3, [r7, #12]
 80018a6:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOG_CLK_ENABLE();
 80018a8:	4b29      	ldr	r3, [pc, #164]	@ (8001950 <HAL_ETH_MspInit+0x15c>)
 80018aa:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80018ac:	4a28      	ldr	r2, [pc, #160]	@ (8001950 <HAL_ETH_MspInit+0x15c>)
 80018ae:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80018b2:	6313      	str	r3, [r2, #48]	@ 0x30
 80018b4:	4b26      	ldr	r3, [pc, #152]	@ (8001950 <HAL_ETH_MspInit+0x15c>)
 80018b6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80018b8:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80018bc:	60bb      	str	r3, [r7, #8]
 80018be:	68bb      	ldr	r3, [r7, #8]
    PC5     ------> ETH_RXD1
    PB13     ------> ETH_TXD1
    PG11     ------> ETH_TX_EN
    PG13     ------> ETH_TXD0
    */
    GPIO_InitStruct.Pin = RMII_MDC_Pin|RMII_RXD0_Pin|RMII_RXD1_Pin;
 80018c0:	2332      	movs	r3, #50	@ 0x32
 80018c2:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80018c4:	2302      	movs	r3, #2
 80018c6:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80018c8:	2300      	movs	r3, #0
 80018ca:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80018cc:	2303      	movs	r3, #3
 80018ce:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 80018d0:	230b      	movs	r3, #11
 80018d2:	637b      	str	r3, [r7, #52]	@ 0x34
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80018d4:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80018d8:	4619      	mov	r1, r3
 80018da:	481e      	ldr	r0, [pc, #120]	@ (8001954 <HAL_ETH_MspInit+0x160>)
 80018dc:	f001 f96e 	bl	8002bbc <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = RMII_REF_CLK_Pin|RMII_MDIO_Pin|RMII_CRS_DV_Pin;
 80018e0:	2386      	movs	r3, #134	@ 0x86
 80018e2:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80018e4:	2302      	movs	r3, #2
 80018e6:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80018e8:	2300      	movs	r3, #0
 80018ea:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80018ec:	2303      	movs	r3, #3
 80018ee:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 80018f0:	230b      	movs	r3, #11
 80018f2:	637b      	str	r3, [r7, #52]	@ 0x34
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80018f4:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80018f8:	4619      	mov	r1, r3
 80018fa:	4817      	ldr	r0, [pc, #92]	@ (8001958 <HAL_ETH_MspInit+0x164>)
 80018fc:	f001 f95e 	bl	8002bbc <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = RMII_TXD1_Pin;
 8001900:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8001904:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001906:	2302      	movs	r3, #2
 8001908:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800190a:	2300      	movs	r3, #0
 800190c:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800190e:	2303      	movs	r3, #3
 8001910:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8001912:	230b      	movs	r3, #11
 8001914:	637b      	str	r3, [r7, #52]	@ 0x34
    HAL_GPIO_Init(RMII_TXD1_GPIO_Port, &GPIO_InitStruct);
 8001916:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800191a:	4619      	mov	r1, r3
 800191c:	480f      	ldr	r0, [pc, #60]	@ (800195c <HAL_ETH_MspInit+0x168>)
 800191e:	f001 f94d 	bl	8002bbc <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = RMII_TX_EN_Pin|RMII_TXD0_Pin;
 8001922:	f44f 5320 	mov.w	r3, #10240	@ 0x2800
 8001926:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001928:	2302      	movs	r3, #2
 800192a:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800192c:	2300      	movs	r3, #0
 800192e:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001930:	2303      	movs	r3, #3
 8001932:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8001934:	230b      	movs	r3, #11
 8001936:	637b      	str	r3, [r7, #52]	@ 0x34
    HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8001938:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800193c:	4619      	mov	r1, r3
 800193e:	4808      	ldr	r0, [pc, #32]	@ (8001960 <HAL_ETH_MspInit+0x16c>)
 8001940:	f001 f93c 	bl	8002bbc <HAL_GPIO_Init>

  /* USER CODE END ETH_MspInit 1 */

  }

}
 8001944:	bf00      	nop
 8001946:	3738      	adds	r7, #56	@ 0x38
 8001948:	46bd      	mov	sp, r7
 800194a:	bd80      	pop	{r7, pc}
 800194c:	40028000 	.word	0x40028000
 8001950:	40023800 	.word	0x40023800
 8001954:	40020800 	.word	0x40020800
 8001958:	40020000 	.word	0x40020000
 800195c:	40020400 	.word	0x40020400
 8001960:	40021800 	.word	0x40021800

08001964 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8001964:	b580      	push	{r7, lr}
 8001966:	b0ae      	sub	sp, #184	@ 0xb8
 8001968:	af00      	add	r7, sp, #0
 800196a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800196c:	f107 03a4 	add.w	r3, r7, #164	@ 0xa4
 8001970:	2200      	movs	r2, #0
 8001972:	601a      	str	r2, [r3, #0]
 8001974:	605a      	str	r2, [r3, #4]
 8001976:	609a      	str	r2, [r3, #8]
 8001978:	60da      	str	r2, [r3, #12]
 800197a:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 800197c:	f107 0314 	add.w	r3, r7, #20
 8001980:	2290      	movs	r2, #144	@ 0x90
 8001982:	2100      	movs	r1, #0
 8001984:	4618      	mov	r0, r3
 8001986:	f00e fb12 	bl	800ffae <memset>
  if(hi2c->Instance==I2C2)
 800198a:	687b      	ldr	r3, [r7, #4]
 800198c:	681b      	ldr	r3, [r3, #0]
 800198e:	4a21      	ldr	r2, [pc, #132]	@ (8001a14 <HAL_I2C_MspInit+0xb0>)
 8001990:	4293      	cmp	r3, r2
 8001992:	d13b      	bne.n	8001a0c <HAL_I2C_MspInit+0xa8>

  /* USER CODE END I2C2_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_I2C2;
 8001994:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8001998:	617b      	str	r3, [r7, #20]
    PeriphClkInitStruct.I2c2ClockSelection = RCC_I2C2CLKSOURCE_PCLK1;
 800199a:	2300      	movs	r3, #0
 800199c:	67fb      	str	r3, [r7, #124]	@ 0x7c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 800199e:	f107 0314 	add.w	r3, r7, #20
 80019a2:	4618      	mov	r0, r3
 80019a4:	f002 fe0c 	bl	80045c0 <HAL_RCCEx_PeriphCLKConfig>
 80019a8:	4603      	mov	r3, r0
 80019aa:	2b00      	cmp	r3, #0
 80019ac:	d001      	beq.n	80019b2 <HAL_I2C_MspInit+0x4e>
    {
      Error_Handler();
 80019ae:	f7ff fc7b 	bl	80012a8 <Error_Handler>
    }

    __HAL_RCC_GPIOF_CLK_ENABLE();
 80019b2:	4b19      	ldr	r3, [pc, #100]	@ (8001a18 <HAL_I2C_MspInit+0xb4>)
 80019b4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80019b6:	4a18      	ldr	r2, [pc, #96]	@ (8001a18 <HAL_I2C_MspInit+0xb4>)
 80019b8:	f043 0320 	orr.w	r3, r3, #32
 80019bc:	6313      	str	r3, [r2, #48]	@ 0x30
 80019be:	4b16      	ldr	r3, [pc, #88]	@ (8001a18 <HAL_I2C_MspInit+0xb4>)
 80019c0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80019c2:	f003 0320 	and.w	r3, r3, #32
 80019c6:	613b      	str	r3, [r7, #16]
 80019c8:	693b      	ldr	r3, [r7, #16]
    /**I2C2 GPIO Configuration
    PF0     ------> I2C2_SDA
    PF1     ------> I2C2_SCL
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 80019ca:	2303      	movs	r3, #3
 80019cc:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 80019d0:	2312      	movs	r3, #18
 80019d2:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 80019d6:	2301      	movs	r3, #1
 80019d8:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80019dc:	2303      	movs	r3, #3
 80019de:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C2;
 80019e2:	2304      	movs	r3, #4
 80019e4:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
    HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 80019e8:	f107 03a4 	add.w	r3, r7, #164	@ 0xa4
 80019ec:	4619      	mov	r1, r3
 80019ee:	480b      	ldr	r0, [pc, #44]	@ (8001a1c <HAL_I2C_MspInit+0xb8>)
 80019f0:	f001 f8e4 	bl	8002bbc <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C2_CLK_ENABLE();
 80019f4:	4b08      	ldr	r3, [pc, #32]	@ (8001a18 <HAL_I2C_MspInit+0xb4>)
 80019f6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80019f8:	4a07      	ldr	r2, [pc, #28]	@ (8001a18 <HAL_I2C_MspInit+0xb4>)
 80019fa:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 80019fe:	6413      	str	r3, [r2, #64]	@ 0x40
 8001a00:	4b05      	ldr	r3, [pc, #20]	@ (8001a18 <HAL_I2C_MspInit+0xb4>)
 8001a02:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001a04:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8001a08:	60fb      	str	r3, [r7, #12]
 8001a0a:	68fb      	ldr	r3, [r7, #12]

  /* USER CODE END I2C2_MspInit 1 */

  }

}
 8001a0c:	bf00      	nop
 8001a0e:	37b8      	adds	r7, #184	@ 0xb8
 8001a10:	46bd      	mov	sp, r7
 8001a12:	bd80      	pop	{r7, pc}
 8001a14:	40005800 	.word	0x40005800
 8001a18:	40023800 	.word	0x40023800
 8001a1c:	40021400 	.word	0x40021400

08001a20 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8001a20:	b580      	push	{r7, lr}
 8001a22:	b084      	sub	sp, #16
 8001a24:	af00      	add	r7, sp, #0
 8001a26:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM4)
 8001a28:	687b      	ldr	r3, [r7, #4]
 8001a2a:	681b      	ldr	r3, [r3, #0]
 8001a2c:	4a0d      	ldr	r2, [pc, #52]	@ (8001a64 <HAL_TIM_Base_MspInit+0x44>)
 8001a2e:	4293      	cmp	r3, r2
 8001a30:	d113      	bne.n	8001a5a <HAL_TIM_Base_MspInit+0x3a>
  {
  /* USER CODE BEGIN TIM4_MspInit 0 */

  /* USER CODE END TIM4_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM4_CLK_ENABLE();
 8001a32:	4b0d      	ldr	r3, [pc, #52]	@ (8001a68 <HAL_TIM_Base_MspInit+0x48>)
 8001a34:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001a36:	4a0c      	ldr	r2, [pc, #48]	@ (8001a68 <HAL_TIM_Base_MspInit+0x48>)
 8001a38:	f043 0304 	orr.w	r3, r3, #4
 8001a3c:	6413      	str	r3, [r2, #64]	@ 0x40
 8001a3e:	4b0a      	ldr	r3, [pc, #40]	@ (8001a68 <HAL_TIM_Base_MspInit+0x48>)
 8001a40:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001a42:	f003 0304 	and.w	r3, r3, #4
 8001a46:	60fb      	str	r3, [r7, #12]
 8001a48:	68fb      	ldr	r3, [r7, #12]
    /* TIM4 interrupt Init */
    HAL_NVIC_SetPriority(TIM4_IRQn, 15, 0);
 8001a4a:	2200      	movs	r2, #0
 8001a4c:	210f      	movs	r1, #15
 8001a4e:	201e      	movs	r0, #30
 8001a50:	f000 fb7f 	bl	8002152 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM4_IRQn);
 8001a54:	201e      	movs	r0, #30
 8001a56:	f000 fb98 	bl	800218a <HAL_NVIC_EnableIRQ>

  /* USER CODE END TIM4_MspInit 1 */

  }

}
 8001a5a:	bf00      	nop
 8001a5c:	3710      	adds	r7, #16
 8001a5e:	46bd      	mov	sp, r7
 8001a60:	bd80      	pop	{r7, pc}
 8001a62:	bf00      	nop
 8001a64:	40000800 	.word	0x40000800
 8001a68:	40023800 	.word	0x40023800

08001a6c <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8001a6c:	b580      	push	{r7, lr}
 8001a6e:	b0ae      	sub	sp, #184	@ 0xb8
 8001a70:	af00      	add	r7, sp, #0
 8001a72:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001a74:	f107 03a4 	add.w	r3, r7, #164	@ 0xa4
 8001a78:	2200      	movs	r2, #0
 8001a7a:	601a      	str	r2, [r3, #0]
 8001a7c:	605a      	str	r2, [r3, #4]
 8001a7e:	609a      	str	r2, [r3, #8]
 8001a80:	60da      	str	r2, [r3, #12]
 8001a82:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8001a84:	f107 0314 	add.w	r3, r7, #20
 8001a88:	2290      	movs	r2, #144	@ 0x90
 8001a8a:	2100      	movs	r1, #0
 8001a8c:	4618      	mov	r0, r3
 8001a8e:	f00e fa8e 	bl	800ffae <memset>
  if(huart->Instance==USART3)
 8001a92:	687b      	ldr	r3, [r7, #4]
 8001a94:	681b      	ldr	r3, [r3, #0]
 8001a96:	4a26      	ldr	r2, [pc, #152]	@ (8001b30 <HAL_UART_MspInit+0xc4>)
 8001a98:	4293      	cmp	r3, r2
 8001a9a:	d144      	bne.n	8001b26 <HAL_UART_MspInit+0xba>

  /* USER CODE END USART3_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART3;
 8001a9c:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8001aa0:	617b      	str	r3, [r7, #20]
    PeriphClkInitStruct.Usart3ClockSelection = RCC_USART3CLKSOURCE_PCLK1;
 8001aa2:	2300      	movs	r3, #0
 8001aa4:	663b      	str	r3, [r7, #96]	@ 0x60
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8001aa6:	f107 0314 	add.w	r3, r7, #20
 8001aaa:	4618      	mov	r0, r3
 8001aac:	f002 fd88 	bl	80045c0 <HAL_RCCEx_PeriphCLKConfig>
 8001ab0:	4603      	mov	r3, r0
 8001ab2:	2b00      	cmp	r3, #0
 8001ab4:	d001      	beq.n	8001aba <HAL_UART_MspInit+0x4e>
    {
      Error_Handler();
 8001ab6:	f7ff fbf7 	bl	80012a8 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_USART3_CLK_ENABLE();
 8001aba:	4b1e      	ldr	r3, [pc, #120]	@ (8001b34 <HAL_UART_MspInit+0xc8>)
 8001abc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001abe:	4a1d      	ldr	r2, [pc, #116]	@ (8001b34 <HAL_UART_MspInit+0xc8>)
 8001ac0:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8001ac4:	6413      	str	r3, [r2, #64]	@ 0x40
 8001ac6:	4b1b      	ldr	r3, [pc, #108]	@ (8001b34 <HAL_UART_MspInit+0xc8>)
 8001ac8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001aca:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8001ace:	613b      	str	r3, [r7, #16]
 8001ad0:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOD_CLK_ENABLE();
 8001ad2:	4b18      	ldr	r3, [pc, #96]	@ (8001b34 <HAL_UART_MspInit+0xc8>)
 8001ad4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001ad6:	4a17      	ldr	r2, [pc, #92]	@ (8001b34 <HAL_UART_MspInit+0xc8>)
 8001ad8:	f043 0308 	orr.w	r3, r3, #8
 8001adc:	6313      	str	r3, [r2, #48]	@ 0x30
 8001ade:	4b15      	ldr	r3, [pc, #84]	@ (8001b34 <HAL_UART_MspInit+0xc8>)
 8001ae0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001ae2:	f003 0308 	and.w	r3, r3, #8
 8001ae6:	60fb      	str	r3, [r7, #12]
 8001ae8:	68fb      	ldr	r3, [r7, #12]
    /**USART3 GPIO Configuration
    PD8     ------> USART3_TX
    PD9     ------> USART3_RX
    */
    GPIO_InitStruct.Pin = STLK_RX_Pin|STLK_TX_Pin;
 8001aea:	f44f 7340 	mov.w	r3, #768	@ 0x300
 8001aee:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001af2:	2302      	movs	r3, #2
 8001af4:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001af8:	2300      	movs	r3, #0
 8001afa:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001afe:	2303      	movs	r3, #3
 8001b00:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 8001b04:	2307      	movs	r3, #7
 8001b06:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8001b0a:	f107 03a4 	add.w	r3, r7, #164	@ 0xa4
 8001b0e:	4619      	mov	r1, r3
 8001b10:	4809      	ldr	r0, [pc, #36]	@ (8001b38 <HAL_UART_MspInit+0xcc>)
 8001b12:	f001 f853 	bl	8002bbc <HAL_GPIO_Init>

    /* USART3 interrupt Init */
    HAL_NVIC_SetPriority(USART3_IRQn, 14, 0);
 8001b16:	2200      	movs	r2, #0
 8001b18:	210e      	movs	r1, #14
 8001b1a:	2027      	movs	r0, #39	@ 0x27
 8001b1c:	f000 fb19 	bl	8002152 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART3_IRQn);
 8001b20:	2027      	movs	r0, #39	@ 0x27
 8001b22:	f000 fb32 	bl	800218a <HAL_NVIC_EnableIRQ>

  /* USER CODE END USART3_MspInit 1 */

  }

}
 8001b26:	bf00      	nop
 8001b28:	37b8      	adds	r7, #184	@ 0xb8
 8001b2a:	46bd      	mov	sp, r7
 8001b2c:	bd80      	pop	{r7, pc}
 8001b2e:	bf00      	nop
 8001b30:	40004800 	.word	0x40004800
 8001b34:	40023800 	.word	0x40023800
 8001b38:	40020c00 	.word	0x40020c00

08001b3c <HAL_PCD_MspInit>:
* This function configures the hardware resources used in this example
* @param hpcd: PCD handle pointer
* @retval None
*/
void HAL_PCD_MspInit(PCD_HandleTypeDef* hpcd)
{
 8001b3c:	b580      	push	{r7, lr}
 8001b3e:	b0ae      	sub	sp, #184	@ 0xb8
 8001b40:	af00      	add	r7, sp, #0
 8001b42:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001b44:	f107 03a4 	add.w	r3, r7, #164	@ 0xa4
 8001b48:	2200      	movs	r2, #0
 8001b4a:	601a      	str	r2, [r3, #0]
 8001b4c:	605a      	str	r2, [r3, #4]
 8001b4e:	609a      	str	r2, [r3, #8]
 8001b50:	60da      	str	r2, [r3, #12]
 8001b52:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8001b54:	f107 0314 	add.w	r3, r7, #20
 8001b58:	2290      	movs	r2, #144	@ 0x90
 8001b5a:	2100      	movs	r1, #0
 8001b5c:	4618      	mov	r0, r3
 8001b5e:	f00e fa26 	bl	800ffae <memset>
  if(hpcd->Instance==USB_OTG_FS)
 8001b62:	687b      	ldr	r3, [r7, #4]
 8001b64:	681b      	ldr	r3, [r3, #0]
 8001b66:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8001b6a:	d159      	bne.n	8001c20 <HAL_PCD_MspInit+0xe4>

  /* USER CODE END USB_OTG_FS_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_CLK48;
 8001b6c:	f44f 1300 	mov.w	r3, #2097152	@ 0x200000
 8001b70:	617b      	str	r3, [r7, #20]
    PeriphClkInitStruct.Clk48ClockSelection = RCC_CLK48SOURCE_PLL;
 8001b72:	2300      	movs	r3, #0
 8001b74:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8001b78:	f107 0314 	add.w	r3, r7, #20
 8001b7c:	4618      	mov	r0, r3
 8001b7e:	f002 fd1f 	bl	80045c0 <HAL_RCCEx_PeriphCLKConfig>
 8001b82:	4603      	mov	r3, r0
 8001b84:	2b00      	cmp	r3, #0
 8001b86:	d001      	beq.n	8001b8c <HAL_PCD_MspInit+0x50>
    {
      Error_Handler();
 8001b88:	f7ff fb8e 	bl	80012a8 <Error_Handler>
    }

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001b8c:	4b26      	ldr	r3, [pc, #152]	@ (8001c28 <HAL_PCD_MspInit+0xec>)
 8001b8e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001b90:	4a25      	ldr	r2, [pc, #148]	@ (8001c28 <HAL_PCD_MspInit+0xec>)
 8001b92:	f043 0301 	orr.w	r3, r3, #1
 8001b96:	6313      	str	r3, [r2, #48]	@ 0x30
 8001b98:	4b23      	ldr	r3, [pc, #140]	@ (8001c28 <HAL_PCD_MspInit+0xec>)
 8001b9a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001b9c:	f003 0301 	and.w	r3, r3, #1
 8001ba0:	613b      	str	r3, [r7, #16]
 8001ba2:	693b      	ldr	r3, [r7, #16]
    PA9     ------> USB_OTG_FS_VBUS
    PA10     ------> USB_OTG_FS_ID
    PA11     ------> USB_OTG_FS_DM
    PA12     ------> USB_OTG_FS_DP
    */
    GPIO_InitStruct.Pin = USB_SOF_Pin|USB_ID_Pin|USB_DM_Pin|USB_DP_Pin;
 8001ba4:	f44f 53e8 	mov.w	r3, #7424	@ 0x1d00
 8001ba8:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001bac:	2302      	movs	r3, #2
 8001bae:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001bb2:	2300      	movs	r3, #0
 8001bb4:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001bb8:	2303      	movs	r3, #3
 8001bba:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 8001bbe:	230a      	movs	r3, #10
 8001bc0:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001bc4:	f107 03a4 	add.w	r3, r7, #164	@ 0xa4
 8001bc8:	4619      	mov	r1, r3
 8001bca:	4818      	ldr	r0, [pc, #96]	@ (8001c2c <HAL_PCD_MspInit+0xf0>)
 8001bcc:	f000 fff6 	bl	8002bbc <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = USB_VBUS_Pin;
 8001bd0:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8001bd4:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001bd8:	2300      	movs	r3, #0
 8001bda:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001bde:	2300      	movs	r3, #0
 8001be0:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
    HAL_GPIO_Init(USB_VBUS_GPIO_Port, &GPIO_InitStruct);
 8001be4:	f107 03a4 	add.w	r3, r7, #164	@ 0xa4
 8001be8:	4619      	mov	r1, r3
 8001bea:	4810      	ldr	r0, [pc, #64]	@ (8001c2c <HAL_PCD_MspInit+0xf0>)
 8001bec:	f000 ffe6 	bl	8002bbc <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 8001bf0:	4b0d      	ldr	r3, [pc, #52]	@ (8001c28 <HAL_PCD_MspInit+0xec>)
 8001bf2:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8001bf4:	4a0c      	ldr	r2, [pc, #48]	@ (8001c28 <HAL_PCD_MspInit+0xec>)
 8001bf6:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8001bfa:	6353      	str	r3, [r2, #52]	@ 0x34
 8001bfc:	4b0a      	ldr	r3, [pc, #40]	@ (8001c28 <HAL_PCD_MspInit+0xec>)
 8001bfe:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8001c00:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8001c04:	60fb      	str	r3, [r7, #12]
 8001c06:	68fb      	ldr	r3, [r7, #12]
 8001c08:	4b07      	ldr	r3, [pc, #28]	@ (8001c28 <HAL_PCD_MspInit+0xec>)
 8001c0a:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001c0c:	4a06      	ldr	r2, [pc, #24]	@ (8001c28 <HAL_PCD_MspInit+0xec>)
 8001c0e:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8001c12:	6453      	str	r3, [r2, #68]	@ 0x44
 8001c14:	4b04      	ldr	r3, [pc, #16]	@ (8001c28 <HAL_PCD_MspInit+0xec>)
 8001c16:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001c18:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8001c1c:	60bb      	str	r3, [r7, #8]
 8001c1e:	68bb      	ldr	r3, [r7, #8]

  /* USER CODE END USB_OTG_FS_MspInit 1 */

  }

}
 8001c20:	bf00      	nop
 8001c22:	37b8      	adds	r7, #184	@ 0xb8
 8001c24:	46bd      	mov	sp, r7
 8001c26:	bd80      	pop	{r7, pc}
 8001c28:	40023800 	.word	0x40023800
 8001c2c:	40020000 	.word	0x40020000

08001c30 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001c30:	b480      	push	{r7}
 8001c32:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8001c34:	bf00      	nop
 8001c36:	e7fd      	b.n	8001c34 <NMI_Handler+0x4>

08001c38 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001c38:	b480      	push	{r7}
 8001c3a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001c3c:	bf00      	nop
 8001c3e:	e7fd      	b.n	8001c3c <HardFault_Handler+0x4>

08001c40 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001c40:	b480      	push	{r7}
 8001c42:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001c44:	bf00      	nop
 8001c46:	e7fd      	b.n	8001c44 <MemManage_Handler+0x4>

08001c48 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001c48:	b480      	push	{r7}
 8001c4a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001c4c:	bf00      	nop
 8001c4e:	e7fd      	b.n	8001c4c <BusFault_Handler+0x4>

08001c50 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001c50:	b480      	push	{r7}
 8001c52:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001c54:	bf00      	nop
 8001c56:	e7fd      	b.n	8001c54 <UsageFault_Handler+0x4>

08001c58 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001c58:	b480      	push	{r7}
 8001c5a:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001c5c:	bf00      	nop
 8001c5e:	46bd      	mov	sp, r7
 8001c60:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c64:	4770      	bx	lr

08001c66 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001c66:	b580      	push	{r7, lr}
 8001c68:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001c6a:	f000 f953 	bl	8001f14 <HAL_IncTick>
#if (INCLUDE_xTaskGetSchedulerState == 1 )
  if (xTaskGetSchedulerState() != taskSCHEDULER_NOT_STARTED)
 8001c6e:	f007 f9e3 	bl	8009038 <xTaskGetSchedulerState>
 8001c72:	4603      	mov	r3, r0
 8001c74:	2b01      	cmp	r3, #1
 8001c76:	d001      	beq.n	8001c7c <SysTick_Handler+0x16>
  {
#endif /* INCLUDE_xTaskGetSchedulerState */
  xPortSysTickHandler();
 8001c78:	f007 ffce 	bl	8009c18 <xPortSysTickHandler>
  }
#endif /* INCLUDE_xTaskGetSchedulerState */
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001c7c:	bf00      	nop
 8001c7e:	bd80      	pop	{r7, pc}

08001c80 <TIM4_IRQHandler>:

/**
  * @brief This function handles TIM4 global interrupt.
  */
void TIM4_IRQHandler(void)
{
 8001c80:	b580      	push	{r7, lr}
 8001c82:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM4_IRQn 0 */
	if (__HAL_TIM_GET_FLAG(&htim4, TIM_FLAG_UPDATE)) {
 8001c84:	4b3d      	ldr	r3, [pc, #244]	@ (8001d7c <TIM4_IRQHandler+0xfc>)
 8001c86:	681b      	ldr	r3, [r3, #0]
 8001c88:	691b      	ldr	r3, [r3, #16]
 8001c8a:	f003 0301 	and.w	r3, r3, #1
 8001c8e:	2b01      	cmp	r3, #1
 8001c90:	d16f      	bne.n	8001d72 <TIM4_IRQHandler+0xf2>
			        __HAL_TIM_CLEAR_FLAG(&htim4, TIM_FLAG_UPDATE);
 8001c92:	4b3a      	ldr	r3, [pc, #232]	@ (8001d7c <TIM4_IRQHandler+0xfc>)
 8001c94:	681b      	ldr	r3, [r3, #0]
 8001c96:	f06f 0201 	mvn.w	r2, #1
 8001c9a:	611a      	str	r2, [r3, #16]

			       if (playsong == 1){
 8001c9c:	4b38      	ldr	r3, [pc, #224]	@ (8001d80 <TIM4_IRQHandler+0x100>)
 8001c9e:	681b      	ldr	r3, [r3, #0]
 8001ca0:	2b01      	cmp	r3, #1
 8001ca2:	d11f      	bne.n	8001ce4 <TIM4_IRQHandler+0x64>
			    	   if (wav_index < songA_wav_len) {
 8001ca4:	4b37      	ldr	r3, [pc, #220]	@ (8001d84 <TIM4_IRQHandler+0x104>)
 8001ca6:	681a      	ldr	r2, [r3, #0]
 8001ca8:	4b37      	ldr	r3, [pc, #220]	@ (8001d88 <TIM4_IRQHandler+0x108>)
 8001caa:	681b      	ldr	r3, [r3, #0]
 8001cac:	429a      	cmp	r2, r3
 8001cae:	d20e      	bcs.n	8001cce <TIM4_IRQHandler+0x4e>
			    	   		            HAL_DAC_SetValue(&hdac, DAC_CHANNEL_1, DAC_ALIGN_12B_R, songA_speech_wav[wav_index]);
 8001cb0:	4b34      	ldr	r3, [pc, #208]	@ (8001d84 <TIM4_IRQHandler+0x104>)
 8001cb2:	681b      	ldr	r3, [r3, #0]
 8001cb4:	4a35      	ldr	r2, [pc, #212]	@ (8001d8c <TIM4_IRQHandler+0x10c>)
 8001cb6:	5cd3      	ldrb	r3, [r2, r3]
 8001cb8:	2200      	movs	r2, #0
 8001cba:	2100      	movs	r1, #0
 8001cbc:	4834      	ldr	r0, [pc, #208]	@ (8001d90 <TIM4_IRQHandler+0x110>)
 8001cbe:	f000 fb19 	bl	80022f4 <HAL_DAC_SetValue>
			    	   		            wav_index++;
 8001cc2:	4b30      	ldr	r3, [pc, #192]	@ (8001d84 <TIM4_IRQHandler+0x104>)
 8001cc4:	681b      	ldr	r3, [r3, #0]
 8001cc6:	3301      	adds	r3, #1
 8001cc8:	4a2e      	ldr	r2, [pc, #184]	@ (8001d84 <TIM4_IRQHandler+0x104>)
 8001cca:	6013      	str	r3, [r2, #0]
 8001ccc:	e051      	b.n	8001d72 <TIM4_IRQHandler+0xf2>
			    	   }
			    	   else {

			    	   		            HAL_TIM_Base_Stop_IT(&htim4);
 8001cce:	482b      	ldr	r0, [pc, #172]	@ (8001d7c <TIM4_IRQHandler+0xfc>)
 8001cd0:	f003 f96e 	bl	8004fb0 <HAL_TIM_Base_Stop_IT>
			    	   		            HAL_DAC_Stop(&hdac, DAC_CHANNEL_1);
 8001cd4:	2100      	movs	r1, #0
 8001cd6:	482e      	ldr	r0, [pc, #184]	@ (8001d90 <TIM4_IRQHandler+0x110>)
 8001cd8:	f000 faea 	bl	80022b0 <HAL_DAC_Stop>
			    	   		            wav_index = 0;
 8001cdc:	4b29      	ldr	r3, [pc, #164]	@ (8001d84 <TIM4_IRQHandler+0x104>)
 8001cde:	2200      	movs	r2, #0
 8001ce0:	601a      	str	r2, [r3, #0]
 8001ce2:	e046      	b.n	8001d72 <TIM4_IRQHandler+0xf2>
			    	   }
			       }
			       else if (playsong == 2){
 8001ce4:	4b26      	ldr	r3, [pc, #152]	@ (8001d80 <TIM4_IRQHandler+0x100>)
 8001ce6:	681b      	ldr	r3, [r3, #0]
 8001ce8:	2b02      	cmp	r3, #2
 8001cea:	d11f      	bne.n	8001d2c <TIM4_IRQHandler+0xac>
			    	   if (wav_index < songB_wav_len) {
 8001cec:	4b25      	ldr	r3, [pc, #148]	@ (8001d84 <TIM4_IRQHandler+0x104>)
 8001cee:	681a      	ldr	r2, [r3, #0]
 8001cf0:	4b28      	ldr	r3, [pc, #160]	@ (8001d94 <TIM4_IRQHandler+0x114>)
 8001cf2:	681b      	ldr	r3, [r3, #0]
 8001cf4:	429a      	cmp	r2, r3
 8001cf6:	d20e      	bcs.n	8001d16 <TIM4_IRQHandler+0x96>
			    	   		     HAL_DAC_SetValue(&hdac, DAC_CHANNEL_1, DAC_ALIGN_12B_R, songB_speech_wav[wav_index]);
 8001cf8:	4b22      	ldr	r3, [pc, #136]	@ (8001d84 <TIM4_IRQHandler+0x104>)
 8001cfa:	681b      	ldr	r3, [r3, #0]
 8001cfc:	4a26      	ldr	r2, [pc, #152]	@ (8001d98 <TIM4_IRQHandler+0x118>)
 8001cfe:	5cd3      	ldrb	r3, [r2, r3]
 8001d00:	2200      	movs	r2, #0
 8001d02:	2100      	movs	r1, #0
 8001d04:	4822      	ldr	r0, [pc, #136]	@ (8001d90 <TIM4_IRQHandler+0x110>)
 8001d06:	f000 faf5 	bl	80022f4 <HAL_DAC_SetValue>
			    	   		     wav_index++;
 8001d0a:	4b1e      	ldr	r3, [pc, #120]	@ (8001d84 <TIM4_IRQHandler+0x104>)
 8001d0c:	681b      	ldr	r3, [r3, #0]
 8001d0e:	3301      	adds	r3, #1
 8001d10:	4a1c      	ldr	r2, [pc, #112]	@ (8001d84 <TIM4_IRQHandler+0x104>)
 8001d12:	6013      	str	r3, [r2, #0]
 8001d14:	e02d      	b.n	8001d72 <TIM4_IRQHandler+0xf2>
			    	   }
			    	   else {

			    	   		            HAL_TIM_Base_Stop_IT(&htim4);
 8001d16:	4819      	ldr	r0, [pc, #100]	@ (8001d7c <TIM4_IRQHandler+0xfc>)
 8001d18:	f003 f94a 	bl	8004fb0 <HAL_TIM_Base_Stop_IT>
			    	   		            HAL_DAC_Stop(&hdac, DAC_CHANNEL_1);
 8001d1c:	2100      	movs	r1, #0
 8001d1e:	481c      	ldr	r0, [pc, #112]	@ (8001d90 <TIM4_IRQHandler+0x110>)
 8001d20:	f000 fac6 	bl	80022b0 <HAL_DAC_Stop>
			    	   		            wav_index = 0;
 8001d24:	4b17      	ldr	r3, [pc, #92]	@ (8001d84 <TIM4_IRQHandler+0x104>)
 8001d26:	2200      	movs	r2, #0
 8001d28:	601a      	str	r2, [r3, #0]
 8001d2a:	e022      	b.n	8001d72 <TIM4_IRQHandler+0xf2>
			    	  }
			       }

			       else if (playsong == 3){
 8001d2c:	4b14      	ldr	r3, [pc, #80]	@ (8001d80 <TIM4_IRQHandler+0x100>)
 8001d2e:	681b      	ldr	r3, [r3, #0]
 8001d30:	2b03      	cmp	r3, #3
 8001d32:	d11e      	bne.n	8001d72 <TIM4_IRQHandler+0xf2>
					   if (wav_index < songC_wav_len) {
 8001d34:	4b13      	ldr	r3, [pc, #76]	@ (8001d84 <TIM4_IRQHandler+0x104>)
 8001d36:	681a      	ldr	r2, [r3, #0]
 8001d38:	4b18      	ldr	r3, [pc, #96]	@ (8001d9c <TIM4_IRQHandler+0x11c>)
 8001d3a:	681b      	ldr	r3, [r3, #0]
 8001d3c:	429a      	cmp	r2, r3
 8001d3e:	d20e      	bcs.n	8001d5e <TIM4_IRQHandler+0xde>
								 HAL_DAC_SetValue(&hdac, DAC_CHANNEL_1, DAC_ALIGN_12B_R, songC_speech_wav[wav_index]);
 8001d40:	4b10      	ldr	r3, [pc, #64]	@ (8001d84 <TIM4_IRQHandler+0x104>)
 8001d42:	681b      	ldr	r3, [r3, #0]
 8001d44:	4a16      	ldr	r2, [pc, #88]	@ (8001da0 <TIM4_IRQHandler+0x120>)
 8001d46:	5cd3      	ldrb	r3, [r2, r3]
 8001d48:	2200      	movs	r2, #0
 8001d4a:	2100      	movs	r1, #0
 8001d4c:	4810      	ldr	r0, [pc, #64]	@ (8001d90 <TIM4_IRQHandler+0x110>)
 8001d4e:	f000 fad1 	bl	80022f4 <HAL_DAC_SetValue>
								 wav_index++;
 8001d52:	4b0c      	ldr	r3, [pc, #48]	@ (8001d84 <TIM4_IRQHandler+0x104>)
 8001d54:	681b      	ldr	r3, [r3, #0]
 8001d56:	3301      	adds	r3, #1
 8001d58:	4a0a      	ldr	r2, [pc, #40]	@ (8001d84 <TIM4_IRQHandler+0x104>)
 8001d5a:	6013      	str	r3, [r2, #0]
 8001d5c:	e009      	b.n	8001d72 <TIM4_IRQHandler+0xf2>
					   }
					   else {

										HAL_TIM_Base_Stop_IT(&htim4);
 8001d5e:	4807      	ldr	r0, [pc, #28]	@ (8001d7c <TIM4_IRQHandler+0xfc>)
 8001d60:	f003 f926 	bl	8004fb0 <HAL_TIM_Base_Stop_IT>
										HAL_DAC_Stop(&hdac, DAC_CHANNEL_1);
 8001d64:	2100      	movs	r1, #0
 8001d66:	480a      	ldr	r0, [pc, #40]	@ (8001d90 <TIM4_IRQHandler+0x110>)
 8001d68:	f000 faa2 	bl	80022b0 <HAL_DAC_Stop>
										wav_index = 0;
 8001d6c:	4b05      	ldr	r3, [pc, #20]	@ (8001d84 <TIM4_IRQHandler+0x104>)
 8001d6e:	2200      	movs	r2, #0
 8001d70:	601a      	str	r2, [r3, #0]
	      }



  /* USER CODE END TIM4_IRQn 0 */
  HAL_TIM_IRQHandler(&htim4);
 8001d72:	4802      	ldr	r0, [pc, #8]	@ (8001d7c <TIM4_IRQHandler+0xfc>)
 8001d74:	f003 f94b 	bl	800500e <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM4_IRQn 1 */

  /* USER CODE END TIM4_IRQn 1 */
}
 8001d78:	bf00      	nop
 8001d7a:	bd80      	pop	{r7, pc}
 8001d7c:	2003cb74 	.word	0x2003cb74
 8001d80:	2003ca20 	.word	0x2003ca20
 8001d84:	2003ca1c 	.word	0x2003ca1c
 8001d88:	200279a8 	.word	0x200279a8
 8001d8c:	20013b58 	.word	0x20013b58
 8001d90:	2003ca5c 	.word	0x2003ca5c
 8001d94:	2003bafc 	.word	0x2003bafc
 8001d98:	200279ac 	.word	0x200279ac
 8001d9c:	20013b54 	.word	0x20013b54
 8001da0:	20000004 	.word	0x20000004

08001da4 <USART3_IRQHandler>:

/**
  * @brief This function handles USART3 global interrupt.
  */
void USART3_IRQHandler(void)
{
 8001da4:	b580      	push	{r7, lr}
 8001da6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART3_IRQn 0 */

  /* USER CODE END USART3_IRQn 0 */
  HAL_UART_IRQHandler(&huart3);
 8001da8:	4802      	ldr	r0, [pc, #8]	@ (8001db4 <USART3_IRQHandler+0x10>)
 8001daa:	f003 fe41 	bl	8005a30 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART3_IRQn 1 */

  /* USER CODE END USART3_IRQn 1 */
}
 8001dae:	bf00      	nop
 8001db0:	bd80      	pop	{r7, pc}
 8001db2:	bf00      	nop
 8001db4:	2003cbc0 	.word	0x2003cbc0

08001db8 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8001db8:	b580      	push	{r7, lr}
 8001dba:	b086      	sub	sp, #24
 8001dbc:	af00      	add	r7, sp, #0
 8001dbe:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001dc0:	4a14      	ldr	r2, [pc, #80]	@ (8001e14 <_sbrk+0x5c>)
 8001dc2:	4b15      	ldr	r3, [pc, #84]	@ (8001e18 <_sbrk+0x60>)
 8001dc4:	1ad3      	subs	r3, r2, r3
 8001dc6:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8001dc8:	697b      	ldr	r3, [r7, #20]
 8001dca:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001dcc:	4b13      	ldr	r3, [pc, #76]	@ (8001e1c <_sbrk+0x64>)
 8001dce:	681b      	ldr	r3, [r3, #0]
 8001dd0:	2b00      	cmp	r3, #0
 8001dd2:	d102      	bne.n	8001dda <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8001dd4:	4b11      	ldr	r3, [pc, #68]	@ (8001e1c <_sbrk+0x64>)
 8001dd6:	4a12      	ldr	r2, [pc, #72]	@ (8001e20 <_sbrk+0x68>)
 8001dd8:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8001dda:	4b10      	ldr	r3, [pc, #64]	@ (8001e1c <_sbrk+0x64>)
 8001ddc:	681a      	ldr	r2, [r3, #0]
 8001dde:	687b      	ldr	r3, [r7, #4]
 8001de0:	4413      	add	r3, r2
 8001de2:	693a      	ldr	r2, [r7, #16]
 8001de4:	429a      	cmp	r2, r3
 8001de6:	d207      	bcs.n	8001df8 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8001de8:	f00e f940 	bl	801006c <__errno>
 8001dec:	4603      	mov	r3, r0
 8001dee:	220c      	movs	r2, #12
 8001df0:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8001df2:	f04f 33ff 	mov.w	r3, #4294967295
 8001df6:	e009      	b.n	8001e0c <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8001df8:	4b08      	ldr	r3, [pc, #32]	@ (8001e1c <_sbrk+0x64>)
 8001dfa:	681b      	ldr	r3, [r3, #0]
 8001dfc:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8001dfe:	4b07      	ldr	r3, [pc, #28]	@ (8001e1c <_sbrk+0x64>)
 8001e00:	681a      	ldr	r2, [r3, #0]
 8001e02:	687b      	ldr	r3, [r7, #4]
 8001e04:	4413      	add	r3, r2
 8001e06:	4a05      	ldr	r2, [pc, #20]	@ (8001e1c <_sbrk+0x64>)
 8001e08:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8001e0a:	68fb      	ldr	r3, [r7, #12]
}
 8001e0c:	4618      	mov	r0, r3
 8001e0e:	3718      	adds	r7, #24
 8001e10:	46bd      	mov	sp, r7
 8001e12:	bd80      	pop	{r7, pc}
 8001e14:	20080000 	.word	0x20080000
 8001e18:	00000800 	.word	0x00000800
 8001e1c:	2003d54c 	.word	0x2003d54c
 8001e20:	20043e90 	.word	0x20043e90

08001e24 <SystemInit>:
  *         SystemFrequency variable.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8001e24:	b480      	push	{r7}
 8001e26:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8001e28:	4b06      	ldr	r3, [pc, #24]	@ (8001e44 <SystemInit+0x20>)
 8001e2a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8001e2e:	4a05      	ldr	r2, [pc, #20]	@ (8001e44 <SystemInit+0x20>)
 8001e30:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8001e34:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001e38:	bf00      	nop
 8001e3a:	46bd      	mov	sp, r7
 8001e3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e40:	4770      	bx	lr
 8001e42:	bf00      	nop
 8001e44:	e000ed00 	.word	0xe000ed00

08001e48 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 8001e48:	f8df d034 	ldr.w	sp, [pc, #52]	@ 8001e80 <LoopFillZerobss+0xe>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 8001e4c:	f7ff ffea 	bl	8001e24 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8001e50:	480c      	ldr	r0, [pc, #48]	@ (8001e84 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8001e52:	490d      	ldr	r1, [pc, #52]	@ (8001e88 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8001e54:	4a0d      	ldr	r2, [pc, #52]	@ (8001e8c <LoopFillZerobss+0x1a>)
  movs r3, #0
 8001e56:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001e58:	e002      	b.n	8001e60 <LoopCopyDataInit>

08001e5a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001e5a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001e5c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001e5e:	3304      	adds	r3, #4

08001e60 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001e60:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001e62:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001e64:	d3f9      	bcc.n	8001e5a <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001e66:	4a0a      	ldr	r2, [pc, #40]	@ (8001e90 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8001e68:	4c0a      	ldr	r4, [pc, #40]	@ (8001e94 <LoopFillZerobss+0x22>)
  movs r3, #0
 8001e6a:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001e6c:	e001      	b.n	8001e72 <LoopFillZerobss>

08001e6e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001e6e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001e70:	3204      	adds	r2, #4

08001e72 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001e72:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001e74:	d3fb      	bcc.n	8001e6e <FillZerobss>
  
/* Call static constructors */
    bl __libc_init_array
 8001e76:	f00e f8ff 	bl	8010078 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8001e7a:	f7fe fc1b 	bl	80006b4 <main>
  bx  lr    
 8001e7e:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8001e80:	20080000 	.word	0x20080000
  ldr r0, =_sdata
 8001e84:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001e88:	2003c594 	.word	0x2003c594
  ldr r2, =_sidata
 8001e8c:	0801ba40 	.word	0x0801ba40
  ldr r2, =_sbss
 8001e90:	2003c6e0 	.word	0x2003c6e0
  ldr r4, =_ebss
 8001e94:	20043e8c 	.word	0x20043e8c

08001e98 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8001e98:	e7fe      	b.n	8001e98 <ADC_IRQHandler>

08001e9a <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001e9a:	b580      	push	{r7, lr}
 8001e9c:	af00      	add	r7, sp, #0
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001e9e:	2003      	movs	r0, #3
 8001ea0:	f000 f94c 	bl	800213c <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8001ea4:	200f      	movs	r0, #15
 8001ea6:	f000 f805 	bl	8001eb4 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8001eaa:	f7ff fc3b 	bl	8001724 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001eae:	2300      	movs	r3, #0
}
 8001eb0:	4618      	mov	r0, r3
 8001eb2:	bd80      	pop	{r7, pc}

08001eb4 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001eb4:	b580      	push	{r7, lr}
 8001eb6:	b082      	sub	sp, #8
 8001eb8:	af00      	add	r7, sp, #0
 8001eba:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8001ebc:	4b12      	ldr	r3, [pc, #72]	@ (8001f08 <HAL_InitTick+0x54>)
 8001ebe:	681a      	ldr	r2, [r3, #0]
 8001ec0:	4b12      	ldr	r3, [pc, #72]	@ (8001f0c <HAL_InitTick+0x58>)
 8001ec2:	781b      	ldrb	r3, [r3, #0]
 8001ec4:	4619      	mov	r1, r3
 8001ec6:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8001eca:	fbb3 f3f1 	udiv	r3, r3, r1
 8001ece:	fbb2 f3f3 	udiv	r3, r2, r3
 8001ed2:	4618      	mov	r0, r3
 8001ed4:	f000 f967 	bl	80021a6 <HAL_SYSTICK_Config>
 8001ed8:	4603      	mov	r3, r0
 8001eda:	2b00      	cmp	r3, #0
 8001edc:	d001      	beq.n	8001ee2 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8001ede:	2301      	movs	r3, #1
 8001ee0:	e00e      	b.n	8001f00 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001ee2:	687b      	ldr	r3, [r7, #4]
 8001ee4:	2b0f      	cmp	r3, #15
 8001ee6:	d80a      	bhi.n	8001efe <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001ee8:	2200      	movs	r2, #0
 8001eea:	6879      	ldr	r1, [r7, #4]
 8001eec:	f04f 30ff 	mov.w	r0, #4294967295
 8001ef0:	f000 f92f 	bl	8002152 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001ef4:	4a06      	ldr	r2, [pc, #24]	@ (8001f10 <HAL_InitTick+0x5c>)
 8001ef6:	687b      	ldr	r3, [r7, #4]
 8001ef8:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8001efa:	2300      	movs	r3, #0
 8001efc:	e000      	b.n	8001f00 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8001efe:	2301      	movs	r3, #1
}
 8001f00:	4618      	mov	r0, r3
 8001f02:	3708      	adds	r7, #8
 8001f04:	46bd      	mov	sp, r7
 8001f06:	bd80      	pop	{r7, pc}
 8001f08:	2003bb00 	.word	0x2003bb00
 8001f0c:	2003bb08 	.word	0x2003bb08
 8001f10:	2003bb04 	.word	0x2003bb04

08001f14 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001f14:	b480      	push	{r7}
 8001f16:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001f18:	4b06      	ldr	r3, [pc, #24]	@ (8001f34 <HAL_IncTick+0x20>)
 8001f1a:	781b      	ldrb	r3, [r3, #0]
 8001f1c:	461a      	mov	r2, r3
 8001f1e:	4b06      	ldr	r3, [pc, #24]	@ (8001f38 <HAL_IncTick+0x24>)
 8001f20:	681b      	ldr	r3, [r3, #0]
 8001f22:	4413      	add	r3, r2
 8001f24:	4a04      	ldr	r2, [pc, #16]	@ (8001f38 <HAL_IncTick+0x24>)
 8001f26:	6013      	str	r3, [r2, #0]
}
 8001f28:	bf00      	nop
 8001f2a:	46bd      	mov	sp, r7
 8001f2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f30:	4770      	bx	lr
 8001f32:	bf00      	nop
 8001f34:	2003bb08 	.word	0x2003bb08
 8001f38:	2003d550 	.word	0x2003d550

08001f3c <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001f3c:	b480      	push	{r7}
 8001f3e:	af00      	add	r7, sp, #0
  return uwTick;
 8001f40:	4b03      	ldr	r3, [pc, #12]	@ (8001f50 <HAL_GetTick+0x14>)
 8001f42:	681b      	ldr	r3, [r3, #0]
}
 8001f44:	4618      	mov	r0, r3
 8001f46:	46bd      	mov	sp, r7
 8001f48:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f4c:	4770      	bx	lr
 8001f4e:	bf00      	nop
 8001f50:	2003d550 	.word	0x2003d550

08001f54 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001f54:	b580      	push	{r7, lr}
 8001f56:	b084      	sub	sp, #16
 8001f58:	af00      	add	r7, sp, #0
 8001f5a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001f5c:	f7ff ffee 	bl	8001f3c <HAL_GetTick>
 8001f60:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8001f62:	687b      	ldr	r3, [r7, #4]
 8001f64:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8001f66:	68fb      	ldr	r3, [r7, #12]
 8001f68:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001f6c:	d005      	beq.n	8001f7a <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8001f6e:	4b0a      	ldr	r3, [pc, #40]	@ (8001f98 <HAL_Delay+0x44>)
 8001f70:	781b      	ldrb	r3, [r3, #0]
 8001f72:	461a      	mov	r2, r3
 8001f74:	68fb      	ldr	r3, [r7, #12]
 8001f76:	4413      	add	r3, r2
 8001f78:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8001f7a:	bf00      	nop
 8001f7c:	f7ff ffde 	bl	8001f3c <HAL_GetTick>
 8001f80:	4602      	mov	r2, r0
 8001f82:	68bb      	ldr	r3, [r7, #8]
 8001f84:	1ad3      	subs	r3, r2, r3
 8001f86:	68fa      	ldr	r2, [r7, #12]
 8001f88:	429a      	cmp	r2, r3
 8001f8a:	d8f7      	bhi.n	8001f7c <HAL_Delay+0x28>
  {
  }
}
 8001f8c:	bf00      	nop
 8001f8e:	bf00      	nop
 8001f90:	3710      	adds	r7, #16
 8001f92:	46bd      	mov	sp, r7
 8001f94:	bd80      	pop	{r7, pc}
 8001f96:	bf00      	nop
 8001f98:	2003bb08 	.word	0x2003bb08

08001f9c <__NVIC_SetPriorityGrouping>:
{
 8001f9c:	b480      	push	{r7}
 8001f9e:	b085      	sub	sp, #20
 8001fa0:	af00      	add	r7, sp, #0
 8001fa2:	6078      	str	r0, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001fa4:	687b      	ldr	r3, [r7, #4]
 8001fa6:	f003 0307 	and.w	r3, r3, #7
 8001faa:	60fb      	str	r3, [r7, #12]
  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001fac:	4b0b      	ldr	r3, [pc, #44]	@ (8001fdc <__NVIC_SetPriorityGrouping+0x40>)
 8001fae:	68db      	ldr	r3, [r3, #12]
 8001fb0:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001fb2:	68ba      	ldr	r2, [r7, #8]
 8001fb4:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8001fb8:	4013      	ands	r3, r2
 8001fba:	60bb      	str	r3, [r7, #8]
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001fbc:	68fb      	ldr	r3, [r7, #12]
 8001fbe:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001fc0:	68bb      	ldr	r3, [r7, #8]
 8001fc2:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 8001fc4:	4b06      	ldr	r3, [pc, #24]	@ (8001fe0 <__NVIC_SetPriorityGrouping+0x44>)
 8001fc6:	4313      	orrs	r3, r2
 8001fc8:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001fca:	4a04      	ldr	r2, [pc, #16]	@ (8001fdc <__NVIC_SetPriorityGrouping+0x40>)
 8001fcc:	68bb      	ldr	r3, [r7, #8]
 8001fce:	60d3      	str	r3, [r2, #12]
}
 8001fd0:	bf00      	nop
 8001fd2:	3714      	adds	r7, #20
 8001fd4:	46bd      	mov	sp, r7
 8001fd6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fda:	4770      	bx	lr
 8001fdc:	e000ed00 	.word	0xe000ed00
 8001fe0:	05fa0000 	.word	0x05fa0000

08001fe4 <__NVIC_GetPriorityGrouping>:
{
 8001fe4:	b480      	push	{r7}
 8001fe6:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001fe8:	4b04      	ldr	r3, [pc, #16]	@ (8001ffc <__NVIC_GetPriorityGrouping+0x18>)
 8001fea:	68db      	ldr	r3, [r3, #12]
 8001fec:	0a1b      	lsrs	r3, r3, #8
 8001fee:	f003 0307 	and.w	r3, r3, #7
}
 8001ff2:	4618      	mov	r0, r3
 8001ff4:	46bd      	mov	sp, r7
 8001ff6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ffa:	4770      	bx	lr
 8001ffc:	e000ed00 	.word	0xe000ed00

08002000 <__NVIC_EnableIRQ>:
{
 8002000:	b480      	push	{r7}
 8002002:	b083      	sub	sp, #12
 8002004:	af00      	add	r7, sp, #0
 8002006:	4603      	mov	r3, r0
 8002008:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800200a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800200e:	2b00      	cmp	r3, #0
 8002010:	db0b      	blt.n	800202a <__NVIC_EnableIRQ+0x2a>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8002012:	79fb      	ldrb	r3, [r7, #7]
 8002014:	f003 021f 	and.w	r2, r3, #31
 8002018:	4907      	ldr	r1, [pc, #28]	@ (8002038 <__NVIC_EnableIRQ+0x38>)
 800201a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800201e:	095b      	lsrs	r3, r3, #5
 8002020:	2001      	movs	r0, #1
 8002022:	fa00 f202 	lsl.w	r2, r0, r2
 8002026:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 800202a:	bf00      	nop
 800202c:	370c      	adds	r7, #12
 800202e:	46bd      	mov	sp, r7
 8002030:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002034:	4770      	bx	lr
 8002036:	bf00      	nop
 8002038:	e000e100 	.word	0xe000e100

0800203c <__NVIC_SetPriority>:
{
 800203c:	b480      	push	{r7}
 800203e:	b083      	sub	sp, #12
 8002040:	af00      	add	r7, sp, #0
 8002042:	4603      	mov	r3, r0
 8002044:	6039      	str	r1, [r7, #0]
 8002046:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002048:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800204c:	2b00      	cmp	r3, #0
 800204e:	db0a      	blt.n	8002066 <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002050:	683b      	ldr	r3, [r7, #0]
 8002052:	b2da      	uxtb	r2, r3
 8002054:	490c      	ldr	r1, [pc, #48]	@ (8002088 <__NVIC_SetPriority+0x4c>)
 8002056:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800205a:	0112      	lsls	r2, r2, #4
 800205c:	b2d2      	uxtb	r2, r2
 800205e:	440b      	add	r3, r1
 8002060:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
}
 8002064:	e00a      	b.n	800207c <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002066:	683b      	ldr	r3, [r7, #0]
 8002068:	b2da      	uxtb	r2, r3
 800206a:	4908      	ldr	r1, [pc, #32]	@ (800208c <__NVIC_SetPriority+0x50>)
 800206c:	79fb      	ldrb	r3, [r7, #7]
 800206e:	f003 030f 	and.w	r3, r3, #15
 8002072:	3b04      	subs	r3, #4
 8002074:	0112      	lsls	r2, r2, #4
 8002076:	b2d2      	uxtb	r2, r2
 8002078:	440b      	add	r3, r1
 800207a:	761a      	strb	r2, [r3, #24]
}
 800207c:	bf00      	nop
 800207e:	370c      	adds	r7, #12
 8002080:	46bd      	mov	sp, r7
 8002082:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002086:	4770      	bx	lr
 8002088:	e000e100 	.word	0xe000e100
 800208c:	e000ed00 	.word	0xe000ed00

08002090 <NVIC_EncodePriority>:
{
 8002090:	b480      	push	{r7}
 8002092:	b089      	sub	sp, #36	@ 0x24
 8002094:	af00      	add	r7, sp, #0
 8002096:	60f8      	str	r0, [r7, #12]
 8002098:	60b9      	str	r1, [r7, #8]
 800209a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 800209c:	68fb      	ldr	r3, [r7, #12]
 800209e:	f003 0307 	and.w	r3, r3, #7
 80020a2:	61fb      	str	r3, [r7, #28]
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80020a4:	69fb      	ldr	r3, [r7, #28]
 80020a6:	f1c3 0307 	rsb	r3, r3, #7
 80020aa:	2b04      	cmp	r3, #4
 80020ac:	bf28      	it	cs
 80020ae:	2304      	movcs	r3, #4
 80020b0:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80020b2:	69fb      	ldr	r3, [r7, #28]
 80020b4:	3304      	adds	r3, #4
 80020b6:	2b06      	cmp	r3, #6
 80020b8:	d902      	bls.n	80020c0 <NVIC_EncodePriority+0x30>
 80020ba:	69fb      	ldr	r3, [r7, #28]
 80020bc:	3b03      	subs	r3, #3
 80020be:	e000      	b.n	80020c2 <NVIC_EncodePriority+0x32>
 80020c0:	2300      	movs	r3, #0
 80020c2:	617b      	str	r3, [r7, #20]
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80020c4:	f04f 32ff 	mov.w	r2, #4294967295
 80020c8:	69bb      	ldr	r3, [r7, #24]
 80020ca:	fa02 f303 	lsl.w	r3, r2, r3
 80020ce:	43da      	mvns	r2, r3
 80020d0:	68bb      	ldr	r3, [r7, #8]
 80020d2:	401a      	ands	r2, r3
 80020d4:	697b      	ldr	r3, [r7, #20]
 80020d6:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80020d8:	f04f 31ff 	mov.w	r1, #4294967295
 80020dc:	697b      	ldr	r3, [r7, #20]
 80020de:	fa01 f303 	lsl.w	r3, r1, r3
 80020e2:	43d9      	mvns	r1, r3
 80020e4:	687b      	ldr	r3, [r7, #4]
 80020e6:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80020e8:	4313      	orrs	r3, r2
}
 80020ea:	4618      	mov	r0, r3
 80020ec:	3724      	adds	r7, #36	@ 0x24
 80020ee:	46bd      	mov	sp, r7
 80020f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020f4:	4770      	bx	lr
	...

080020f8 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80020f8:	b580      	push	{r7, lr}
 80020fa:	b082      	sub	sp, #8
 80020fc:	af00      	add	r7, sp, #0
 80020fe:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8002100:	687b      	ldr	r3, [r7, #4]
 8002102:	3b01      	subs	r3, #1
 8002104:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8002108:	d301      	bcc.n	800210e <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800210a:	2301      	movs	r3, #1
 800210c:	e00f      	b.n	800212e <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800210e:	4a0a      	ldr	r2, [pc, #40]	@ (8002138 <SysTick_Config+0x40>)
 8002110:	687b      	ldr	r3, [r7, #4]
 8002112:	3b01      	subs	r3, #1
 8002114:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8002116:	210f      	movs	r1, #15
 8002118:	f04f 30ff 	mov.w	r0, #4294967295
 800211c:	f7ff ff8e 	bl	800203c <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8002120:	4b05      	ldr	r3, [pc, #20]	@ (8002138 <SysTick_Config+0x40>)
 8002122:	2200      	movs	r2, #0
 8002124:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8002126:	4b04      	ldr	r3, [pc, #16]	@ (8002138 <SysTick_Config+0x40>)
 8002128:	2207      	movs	r2, #7
 800212a:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 800212c:	2300      	movs	r3, #0
}
 800212e:	4618      	mov	r0, r3
 8002130:	3708      	adds	r7, #8
 8002132:	46bd      	mov	sp, r7
 8002134:	bd80      	pop	{r7, pc}
 8002136:	bf00      	nop
 8002138:	e000e010 	.word	0xe000e010

0800213c <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800213c:	b580      	push	{r7, lr}
 800213e:	b082      	sub	sp, #8
 8002140:	af00      	add	r7, sp, #0
 8002142:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8002144:	6878      	ldr	r0, [r7, #4]
 8002146:	f7ff ff29 	bl	8001f9c <__NVIC_SetPriorityGrouping>
}
 800214a:	bf00      	nop
 800214c:	3708      	adds	r7, #8
 800214e:	46bd      	mov	sp, r7
 8002150:	bd80      	pop	{r7, pc}

08002152 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8002152:	b580      	push	{r7, lr}
 8002154:	b086      	sub	sp, #24
 8002156:	af00      	add	r7, sp, #0
 8002158:	4603      	mov	r3, r0
 800215a:	60b9      	str	r1, [r7, #8]
 800215c:	607a      	str	r2, [r7, #4]
 800215e:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 8002160:	2300      	movs	r3, #0
 8002162:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8002164:	f7ff ff3e 	bl	8001fe4 <__NVIC_GetPriorityGrouping>
 8002168:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800216a:	687a      	ldr	r2, [r7, #4]
 800216c:	68b9      	ldr	r1, [r7, #8]
 800216e:	6978      	ldr	r0, [r7, #20]
 8002170:	f7ff ff8e 	bl	8002090 <NVIC_EncodePriority>
 8002174:	4602      	mov	r2, r0
 8002176:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800217a:	4611      	mov	r1, r2
 800217c:	4618      	mov	r0, r3
 800217e:	f7ff ff5d 	bl	800203c <__NVIC_SetPriority>
}
 8002182:	bf00      	nop
 8002184:	3718      	adds	r7, #24
 8002186:	46bd      	mov	sp, r7
 8002188:	bd80      	pop	{r7, pc}

0800218a <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f7xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800218a:	b580      	push	{r7, lr}
 800218c:	b082      	sub	sp, #8
 800218e:	af00      	add	r7, sp, #0
 8002190:	4603      	mov	r3, r0
 8002192:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8002194:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002198:	4618      	mov	r0, r3
 800219a:	f7ff ff31 	bl	8002000 <__NVIC_EnableIRQ>
}
 800219e:	bf00      	nop
 80021a0:	3708      	adds	r7, #8
 80021a2:	46bd      	mov	sp, r7
 80021a4:	bd80      	pop	{r7, pc}

080021a6 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80021a6:	b580      	push	{r7, lr}
 80021a8:	b082      	sub	sp, #8
 80021aa:	af00      	add	r7, sp, #0
 80021ac:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80021ae:	6878      	ldr	r0, [r7, #4]
 80021b0:	f7ff ffa2 	bl	80020f8 <SysTick_Config>
 80021b4:	4603      	mov	r3, r0
}
 80021b6:	4618      	mov	r0, r3
 80021b8:	3708      	adds	r7, #8
 80021ba:	46bd      	mov	sp, r7
 80021bc:	bd80      	pop	{r7, pc}

080021be <HAL_DAC_Init>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_Init(DAC_HandleTypeDef *hdac)
{
 80021be:	b580      	push	{r7, lr}
 80021c0:	b082      	sub	sp, #8
 80021c2:	af00      	add	r7, sp, #0
 80021c4:	6078      	str	r0, [r7, #4]
  /* Check the DAC peripheral handle */
  if (hdac == NULL)
 80021c6:	687b      	ldr	r3, [r7, #4]
 80021c8:	2b00      	cmp	r3, #0
 80021ca:	d101      	bne.n	80021d0 <HAL_DAC_Init+0x12>
  {
    return HAL_ERROR;
 80021cc:	2301      	movs	r3, #1
 80021ce:	e014      	b.n	80021fa <HAL_DAC_Init+0x3c>
  }
  /* Check the parameters */
  assert_param(IS_DAC_ALL_INSTANCE(hdac->Instance));

  if (hdac->State == HAL_DAC_STATE_RESET)
 80021d0:	687b      	ldr	r3, [r7, #4]
 80021d2:	791b      	ldrb	r3, [r3, #4]
 80021d4:	b2db      	uxtb	r3, r3
 80021d6:	2b00      	cmp	r3, #0
 80021d8:	d105      	bne.n	80021e6 <HAL_DAC_Init+0x28>
      hdac->MspInitCallback             = HAL_DAC_MspInit;
    }
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */

    /* Allocate lock resource and initialize it */
    hdac->Lock = HAL_UNLOCKED;
 80021da:	687b      	ldr	r3, [r7, #4]
 80021dc:	2200      	movs	r2, #0
 80021de:	715a      	strb	r2, [r3, #5]
#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
    /* Init the low level hardware */
    hdac->MspInitCallback(hdac);
#else
    /* Init the low level hardware */
    HAL_DAC_MspInit(hdac);
 80021e0:	6878      	ldr	r0, [r7, #4]
 80021e2:	f7ff fac7 	bl	8001774 <HAL_DAC_MspInit>
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */
  }

  /* Initialize the DAC state*/
  hdac->State = HAL_DAC_STATE_BUSY;
 80021e6:	687b      	ldr	r3, [r7, #4]
 80021e8:	2202      	movs	r2, #2
 80021ea:	711a      	strb	r2, [r3, #4]

  /* Set DAC error code to none */
  hdac->ErrorCode = HAL_DAC_ERROR_NONE;
 80021ec:	687b      	ldr	r3, [r7, #4]
 80021ee:	2200      	movs	r2, #0
 80021f0:	611a      	str	r2, [r3, #16]

  /* Initialize the DAC state*/
  hdac->State = HAL_DAC_STATE_READY;
 80021f2:	687b      	ldr	r3, [r7, #4]
 80021f4:	2201      	movs	r2, #1
 80021f6:	711a      	strb	r2, [r3, #4]

  /* Return function status */
  return HAL_OK;
 80021f8:	2300      	movs	r3, #0
}
 80021fa:	4618      	mov	r0, r3
 80021fc:	3708      	adds	r7, #8
 80021fe:	46bd      	mov	sp, r7
 8002200:	bd80      	pop	{r7, pc}

08002202 <HAL_DAC_Start>:
  *            @arg DAC_CHANNEL_1: DAC Channel1 selected
  *            @arg DAC_CHANNEL_2: DAC Channel2 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_Start(DAC_HandleTypeDef *hdac, uint32_t Channel)
{
 8002202:	b480      	push	{r7}
 8002204:	b083      	sub	sp, #12
 8002206:	af00      	add	r7, sp, #0
 8002208:	6078      	str	r0, [r7, #4]
 800220a:	6039      	str	r1, [r7, #0]
  /* Check the DAC peripheral handle */
  if (hdac == NULL)
 800220c:	687b      	ldr	r3, [r7, #4]
 800220e:	2b00      	cmp	r3, #0
 8002210:	d101      	bne.n	8002216 <HAL_DAC_Start+0x14>
  {
    return HAL_ERROR;
 8002212:	2301      	movs	r3, #1
 8002214:	e046      	b.n	80022a4 <HAL_DAC_Start+0xa2>

  /* Check the parameters */
  assert_param(IS_DAC_CHANNEL(Channel));

  /* Process locked */
  __HAL_LOCK(hdac);
 8002216:	687b      	ldr	r3, [r7, #4]
 8002218:	795b      	ldrb	r3, [r3, #5]
 800221a:	2b01      	cmp	r3, #1
 800221c:	d101      	bne.n	8002222 <HAL_DAC_Start+0x20>
 800221e:	2302      	movs	r3, #2
 8002220:	e040      	b.n	80022a4 <HAL_DAC_Start+0xa2>
 8002222:	687b      	ldr	r3, [r7, #4]
 8002224:	2201      	movs	r2, #1
 8002226:	715a      	strb	r2, [r3, #5]

  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_BUSY;
 8002228:	687b      	ldr	r3, [r7, #4]
 800222a:	2202      	movs	r2, #2
 800222c:	711a      	strb	r2, [r3, #4]

  /* Enable the Peripheral */
  __HAL_DAC_ENABLE(hdac, Channel);
 800222e:	687b      	ldr	r3, [r7, #4]
 8002230:	681b      	ldr	r3, [r3, #0]
 8002232:	6819      	ldr	r1, [r3, #0]
 8002234:	683b      	ldr	r3, [r7, #0]
 8002236:	f003 0310 	and.w	r3, r3, #16
 800223a:	2201      	movs	r2, #1
 800223c:	409a      	lsls	r2, r3
 800223e:	687b      	ldr	r3, [r7, #4]
 8002240:	681b      	ldr	r3, [r3, #0]
 8002242:	430a      	orrs	r2, r1
 8002244:	601a      	str	r2, [r3, #0]

  if (Channel == DAC_CHANNEL_1)
 8002246:	683b      	ldr	r3, [r7, #0]
 8002248:	2b00      	cmp	r3, #0
 800224a:	d10f      	bne.n	800226c <HAL_DAC_Start+0x6a>
  {
    /* Check if software trigger enabled */
    if ((hdac->Instance->CR & (DAC_CR_TEN1 | DAC_CR_TSEL1)) == DAC_TRIGGER_SOFTWARE)
 800224c:	687b      	ldr	r3, [r7, #4]
 800224e:	681b      	ldr	r3, [r3, #0]
 8002250:	681b      	ldr	r3, [r3, #0]
 8002252:	f003 033c 	and.w	r3, r3, #60	@ 0x3c
 8002256:	2b3c      	cmp	r3, #60	@ 0x3c
 8002258:	d11d      	bne.n	8002296 <HAL_DAC_Start+0x94>
    {
      /* Enable the selected DAC software conversion */
      SET_BIT(hdac->Instance->SWTRIGR, DAC_SWTRIGR_SWTRIG1);
 800225a:	687b      	ldr	r3, [r7, #4]
 800225c:	681b      	ldr	r3, [r3, #0]
 800225e:	685a      	ldr	r2, [r3, #4]
 8002260:	687b      	ldr	r3, [r7, #4]
 8002262:	681b      	ldr	r3, [r3, #0]
 8002264:	f042 0201 	orr.w	r2, r2, #1
 8002268:	605a      	str	r2, [r3, #4]
 800226a:	e014      	b.n	8002296 <HAL_DAC_Start+0x94>
  }

  else
  {
    /* Check if software trigger enabled */
    if ((hdac->Instance->CR & (DAC_CR_TEN2 | DAC_CR_TSEL2)) == (DAC_TRIGGER_SOFTWARE << (Channel & 0x10UL)))
 800226c:	687b      	ldr	r3, [r7, #4]
 800226e:	681b      	ldr	r3, [r3, #0]
 8002270:	681b      	ldr	r3, [r3, #0]
 8002272:	f403 1270 	and.w	r2, r3, #3932160	@ 0x3c0000
 8002276:	683b      	ldr	r3, [r7, #0]
 8002278:	f003 0310 	and.w	r3, r3, #16
 800227c:	213c      	movs	r1, #60	@ 0x3c
 800227e:	fa01 f303 	lsl.w	r3, r1, r3
 8002282:	429a      	cmp	r2, r3
 8002284:	d107      	bne.n	8002296 <HAL_DAC_Start+0x94>
    {
      /* Enable the selected DAC software conversion*/
      SET_BIT(hdac->Instance->SWTRIGR, DAC_SWTRIGR_SWTRIG2);
 8002286:	687b      	ldr	r3, [r7, #4]
 8002288:	681b      	ldr	r3, [r3, #0]
 800228a:	685a      	ldr	r2, [r3, #4]
 800228c:	687b      	ldr	r3, [r7, #4]
 800228e:	681b      	ldr	r3, [r3, #0]
 8002290:	f042 0202 	orr.w	r2, r2, #2
 8002294:	605a      	str	r2, [r3, #4]
    }
  }


  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_READY;
 8002296:	687b      	ldr	r3, [r7, #4]
 8002298:	2201      	movs	r2, #1
 800229a:	711a      	strb	r2, [r3, #4]

  /* Process unlocked */
  __HAL_UNLOCK(hdac);
 800229c:	687b      	ldr	r3, [r7, #4]
 800229e:	2200      	movs	r2, #0
 80022a0:	715a      	strb	r2, [r3, #5]

  /* Return function status */
  return HAL_OK;
 80022a2:	2300      	movs	r3, #0
}
 80022a4:	4618      	mov	r0, r3
 80022a6:	370c      	adds	r7, #12
 80022a8:	46bd      	mov	sp, r7
 80022aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022ae:	4770      	bx	lr

080022b0 <HAL_DAC_Stop>:
  *            @arg DAC_CHANNEL_1: DAC Channel1 selected
  *            @arg DAC_CHANNEL_2: DAC Channel2 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_Stop(DAC_HandleTypeDef *hdac, uint32_t Channel)
{
 80022b0:	b480      	push	{r7}
 80022b2:	b083      	sub	sp, #12
 80022b4:	af00      	add	r7, sp, #0
 80022b6:	6078      	str	r0, [r7, #4]
 80022b8:	6039      	str	r1, [r7, #0]
  /* Check the DAC peripheral handle */
  if (hdac == NULL)
 80022ba:	687b      	ldr	r3, [r7, #4]
 80022bc:	2b00      	cmp	r3, #0
 80022be:	d101      	bne.n	80022c4 <HAL_DAC_Stop+0x14>
  {
    return HAL_ERROR;
 80022c0:	2301      	movs	r3, #1
 80022c2:	e011      	b.n	80022e8 <HAL_DAC_Stop+0x38>

  /* Check the parameters */
  assert_param(IS_DAC_CHANNEL(Channel));

  /* Disable the Peripheral */
  __HAL_DAC_DISABLE(hdac, Channel);
 80022c4:	687b      	ldr	r3, [r7, #4]
 80022c6:	681b      	ldr	r3, [r3, #0]
 80022c8:	6819      	ldr	r1, [r3, #0]
 80022ca:	683b      	ldr	r3, [r7, #0]
 80022cc:	f003 0310 	and.w	r3, r3, #16
 80022d0:	2201      	movs	r2, #1
 80022d2:	fa02 f303 	lsl.w	r3, r2, r3
 80022d6:	43da      	mvns	r2, r3
 80022d8:	687b      	ldr	r3, [r7, #4]
 80022da:	681b      	ldr	r3, [r3, #0]
 80022dc:	400a      	ands	r2, r1
 80022de:	601a      	str	r2, [r3, #0]

  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_READY;
 80022e0:	687b      	ldr	r3, [r7, #4]
 80022e2:	2201      	movs	r2, #1
 80022e4:	711a      	strb	r2, [r3, #4]

  /* Return function status */
  return HAL_OK;
 80022e6:	2300      	movs	r3, #0
}
 80022e8:	4618      	mov	r0, r3
 80022ea:	370c      	adds	r7, #12
 80022ec:	46bd      	mov	sp, r7
 80022ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022f2:	4770      	bx	lr

080022f4 <HAL_DAC_SetValue>:
  *            @arg DAC_ALIGN_12B_R: 12bit right data alignment selected
  * @param  Data Data to be loaded in the selected data holding register.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_SetValue(DAC_HandleTypeDef *hdac, uint32_t Channel, uint32_t Alignment, uint32_t Data)
{
 80022f4:	b480      	push	{r7}
 80022f6:	b087      	sub	sp, #28
 80022f8:	af00      	add	r7, sp, #0
 80022fa:	60f8      	str	r0, [r7, #12]
 80022fc:	60b9      	str	r1, [r7, #8]
 80022fe:	607a      	str	r2, [r7, #4]
 8002300:	603b      	str	r3, [r7, #0]
  __IO uint32_t tmp = 0UL;
 8002302:	2300      	movs	r3, #0
 8002304:	617b      	str	r3, [r7, #20]

  /* Check the DAC peripheral handle */
  if (hdac == NULL)
 8002306:	68fb      	ldr	r3, [r7, #12]
 8002308:	2b00      	cmp	r3, #0
 800230a:	d101      	bne.n	8002310 <HAL_DAC_SetValue+0x1c>
  {
    return HAL_ERROR;
 800230c:	2301      	movs	r3, #1
 800230e:	e015      	b.n	800233c <HAL_DAC_SetValue+0x48>
  /* Check the parameters */
  assert_param(IS_DAC_CHANNEL(Channel));
  assert_param(IS_DAC_ALIGN(Alignment));
  assert_param(IS_DAC_DATA(Data));

  tmp = (uint32_t)hdac->Instance;
 8002310:	68fb      	ldr	r3, [r7, #12]
 8002312:	681b      	ldr	r3, [r3, #0]
 8002314:	617b      	str	r3, [r7, #20]
  if (Channel == DAC_CHANNEL_1)
 8002316:	68bb      	ldr	r3, [r7, #8]
 8002318:	2b00      	cmp	r3, #0
 800231a:	d105      	bne.n	8002328 <HAL_DAC_SetValue+0x34>
  {
    tmp += DAC_DHR12R1_ALIGNMENT(Alignment);
 800231c:	697a      	ldr	r2, [r7, #20]
 800231e:	687b      	ldr	r3, [r7, #4]
 8002320:	4413      	add	r3, r2
 8002322:	3308      	adds	r3, #8
 8002324:	617b      	str	r3, [r7, #20]
 8002326:	e004      	b.n	8002332 <HAL_DAC_SetValue+0x3e>
  }

  else
  {
    tmp += DAC_DHR12R2_ALIGNMENT(Alignment);
 8002328:	697a      	ldr	r2, [r7, #20]
 800232a:	687b      	ldr	r3, [r7, #4]
 800232c:	4413      	add	r3, r2
 800232e:	3314      	adds	r3, #20
 8002330:	617b      	str	r3, [r7, #20]
  }


  /* Set the DAC channel selected data holding register */
  *(__IO uint32_t *) tmp = Data;
 8002332:	697b      	ldr	r3, [r7, #20]
 8002334:	461a      	mov	r2, r3
 8002336:	683b      	ldr	r3, [r7, #0]
 8002338:	6013      	str	r3, [r2, #0]

  /* Return function status */
  return HAL_OK;
 800233a:	2300      	movs	r3, #0
}
 800233c:	4618      	mov	r0, r3
 800233e:	371c      	adds	r7, #28
 8002340:	46bd      	mov	sp, r7
 8002342:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002346:	4770      	bx	lr

08002348 <HAL_DAC_ConfigChannel>:
  *            @arg DAC_CHANNEL_2: DAC Channel2 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_ConfigChannel(DAC_HandleTypeDef *hdac,
                                        const DAC_ChannelConfTypeDef *sConfig, uint32_t Channel)
{
 8002348:	b480      	push	{r7}
 800234a:	b089      	sub	sp, #36	@ 0x24
 800234c:	af00      	add	r7, sp, #0
 800234e:	60f8      	str	r0, [r7, #12]
 8002350:	60b9      	str	r1, [r7, #8]
 8002352:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8002354:	2300      	movs	r3, #0
 8002356:	77fb      	strb	r3, [r7, #31]
  uint32_t tmpreg1;
  uint32_t tmpreg2;

  /* Check the DAC peripheral handle and channel configuration struct */
  if ((hdac == NULL) || (sConfig == NULL))
 8002358:	68fb      	ldr	r3, [r7, #12]
 800235a:	2b00      	cmp	r3, #0
 800235c:	d002      	beq.n	8002364 <HAL_DAC_ConfigChannel+0x1c>
 800235e:	68bb      	ldr	r3, [r7, #8]
 8002360:	2b00      	cmp	r3, #0
 8002362:	d101      	bne.n	8002368 <HAL_DAC_ConfigChannel+0x20>
  {
    return HAL_ERROR;
 8002364:	2301      	movs	r3, #1
 8002366:	e042      	b.n	80023ee <HAL_DAC_ConfigChannel+0xa6>
  assert_param(IS_DAC_TRIGGER(sConfig->DAC_Trigger));
  assert_param(IS_DAC_OUTPUT_BUFFER_STATE(sConfig->DAC_OutputBuffer));
  assert_param(IS_DAC_CHANNEL(Channel));

  /* Process locked */
  __HAL_LOCK(hdac);
 8002368:	68fb      	ldr	r3, [r7, #12]
 800236a:	795b      	ldrb	r3, [r3, #5]
 800236c:	2b01      	cmp	r3, #1
 800236e:	d101      	bne.n	8002374 <HAL_DAC_ConfigChannel+0x2c>
 8002370:	2302      	movs	r3, #2
 8002372:	e03c      	b.n	80023ee <HAL_DAC_ConfigChannel+0xa6>
 8002374:	68fb      	ldr	r3, [r7, #12]
 8002376:	2201      	movs	r2, #1
 8002378:	715a      	strb	r2, [r3, #5]

  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_BUSY;
 800237a:	68fb      	ldr	r3, [r7, #12]
 800237c:	2202      	movs	r2, #2
 800237e:	711a      	strb	r2, [r3, #4]

  /* Get the DAC CR value */
  tmpreg1 = hdac->Instance->CR;
 8002380:	68fb      	ldr	r3, [r7, #12]
 8002382:	681b      	ldr	r3, [r3, #0]
 8002384:	681b      	ldr	r3, [r3, #0]
 8002386:	61bb      	str	r3, [r7, #24]
  /* Clear BOFFx, TENx, TSELx, WAVEx and MAMPx bits */
  tmpreg1 &= ~(((uint32_t)(DAC_CR_MAMP1 | DAC_CR_WAVE1 | DAC_CR_TSEL1 | DAC_CR_TEN1 | DAC_CR_BOFF1))
               << (Channel & 0x10UL));
 8002388:	687b      	ldr	r3, [r7, #4]
 800238a:	f003 0310 	and.w	r3, r3, #16
 800238e:	f640 72fe 	movw	r2, #4094	@ 0xffe
 8002392:	fa02 f303 	lsl.w	r3, r2, r3
  tmpreg1 &= ~(((uint32_t)(DAC_CR_MAMP1 | DAC_CR_WAVE1 | DAC_CR_TSEL1 | DAC_CR_TEN1 | DAC_CR_BOFF1))
 8002396:	43db      	mvns	r3, r3
 8002398:	69ba      	ldr	r2, [r7, #24]
 800239a:	4013      	ands	r3, r2
 800239c:	61bb      	str	r3, [r7, #24]
  /* Configure for the selected DAC channel: buffer output, trigger */
  /* Set TSELx and TENx bits according to DAC_Trigger value */
  /* Set BOFFx bit according to DAC_OutputBuffer value */
  tmpreg2 = (sConfig->DAC_Trigger | sConfig->DAC_OutputBuffer);
 800239e:	68bb      	ldr	r3, [r7, #8]
 80023a0:	681a      	ldr	r2, [r3, #0]
 80023a2:	68bb      	ldr	r3, [r7, #8]
 80023a4:	685b      	ldr	r3, [r3, #4]
 80023a6:	4313      	orrs	r3, r2
 80023a8:	617b      	str	r3, [r7, #20]
  /* Calculate CR register value depending on DAC_Channel */
  tmpreg1 |= tmpreg2 << (Channel & 0x10UL);
 80023aa:	687b      	ldr	r3, [r7, #4]
 80023ac:	f003 0310 	and.w	r3, r3, #16
 80023b0:	697a      	ldr	r2, [r7, #20]
 80023b2:	fa02 f303 	lsl.w	r3, r2, r3
 80023b6:	69ba      	ldr	r2, [r7, #24]
 80023b8:	4313      	orrs	r3, r2
 80023ba:	61bb      	str	r3, [r7, #24]
  /* Write to DAC CR */
  hdac->Instance->CR = tmpreg1;
 80023bc:	68fb      	ldr	r3, [r7, #12]
 80023be:	681b      	ldr	r3, [r3, #0]
 80023c0:	69ba      	ldr	r2, [r7, #24]
 80023c2:	601a      	str	r2, [r3, #0]
  /* Disable wave generation */
  CLEAR_BIT(hdac->Instance->CR, (DAC_CR_WAVE1 << (Channel & 0x10UL)));
 80023c4:	68fb      	ldr	r3, [r7, #12]
 80023c6:	681b      	ldr	r3, [r3, #0]
 80023c8:	6819      	ldr	r1, [r3, #0]
 80023ca:	687b      	ldr	r3, [r7, #4]
 80023cc:	f003 0310 	and.w	r3, r3, #16
 80023d0:	22c0      	movs	r2, #192	@ 0xc0
 80023d2:	fa02 f303 	lsl.w	r3, r2, r3
 80023d6:	43da      	mvns	r2, r3
 80023d8:	68fb      	ldr	r3, [r7, #12]
 80023da:	681b      	ldr	r3, [r3, #0]
 80023dc:	400a      	ands	r2, r1
 80023de:	601a      	str	r2, [r3, #0]

  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_READY;
 80023e0:	68fb      	ldr	r3, [r7, #12]
 80023e2:	2201      	movs	r2, #1
 80023e4:	711a      	strb	r2, [r3, #4]

  /* Process unlocked */
  __HAL_UNLOCK(hdac);
 80023e6:	68fb      	ldr	r3, [r7, #12]
 80023e8:	2200      	movs	r2, #0
 80023ea:	715a      	strb	r2, [r3, #5]

  /* Return function status */
  return status;
 80023ec:	7ffb      	ldrb	r3, [r7, #31]
}
 80023ee:	4618      	mov	r0, r3
 80023f0:	3724      	adds	r7, #36	@ 0x24
 80023f2:	46bd      	mov	sp, r7
 80023f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023f8:	4770      	bx	lr

080023fa <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 80023fa:	b580      	push	{r7, lr}
 80023fc:	b084      	sub	sp, #16
 80023fe:	af00      	add	r7, sp, #0
 8002400:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8002402:	687b      	ldr	r3, [r7, #4]
 8002404:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002406:	60fb      	str	r3, [r7, #12]
  
  uint32_t tickstart = HAL_GetTick();
 8002408:	f7ff fd98 	bl	8001f3c <HAL_GetTick>
 800240c:	60b8      	str	r0, [r7, #8]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 800240e:	687b      	ldr	r3, [r7, #4]
 8002410:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8002414:	b2db      	uxtb	r3, r3
 8002416:	2b02      	cmp	r3, #2
 8002418:	d008      	beq.n	800242c <HAL_DMA_Abort+0x32>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 800241a:	687b      	ldr	r3, [r7, #4]
 800241c:	2280      	movs	r2, #128	@ 0x80
 800241e:	655a      	str	r2, [r3, #84]	@ 0x54
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8002420:	687b      	ldr	r3, [r7, #4]
 8002422:	2200      	movs	r2, #0
 8002424:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    
    return HAL_ERROR;
 8002428:	2301      	movs	r3, #1
 800242a:	e052      	b.n	80024d2 <HAL_DMA_Abort+0xd8>
  }
  else
  {
    /* Disable all the transfer interrupts */
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 800242c:	687b      	ldr	r3, [r7, #4]
 800242e:	681b      	ldr	r3, [r3, #0]
 8002430:	681a      	ldr	r2, [r3, #0]
 8002432:	687b      	ldr	r3, [r7, #4]
 8002434:	681b      	ldr	r3, [r3, #0]
 8002436:	f022 0216 	bic.w	r2, r2, #22
 800243a:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 800243c:	687b      	ldr	r3, [r7, #4]
 800243e:	681b      	ldr	r3, [r3, #0]
 8002440:	695a      	ldr	r2, [r3, #20]
 8002442:	687b      	ldr	r3, [r7, #4]
 8002444:	681b      	ldr	r3, [r3, #0]
 8002446:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 800244a:	615a      	str	r2, [r3, #20]
    
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 800244c:	687b      	ldr	r3, [r7, #4]
 800244e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002450:	2b00      	cmp	r3, #0
 8002452:	d103      	bne.n	800245c <HAL_DMA_Abort+0x62>
 8002454:	687b      	ldr	r3, [r7, #4]
 8002456:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8002458:	2b00      	cmp	r3, #0
 800245a:	d007      	beq.n	800246c <HAL_DMA_Abort+0x72>
    {
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 800245c:	687b      	ldr	r3, [r7, #4]
 800245e:	681b      	ldr	r3, [r3, #0]
 8002460:	681a      	ldr	r2, [r3, #0]
 8002462:	687b      	ldr	r3, [r7, #4]
 8002464:	681b      	ldr	r3, [r3, #0]
 8002466:	f022 0208 	bic.w	r2, r2, #8
 800246a:	601a      	str	r2, [r3, #0]
    }
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 800246c:	687b      	ldr	r3, [r7, #4]
 800246e:	681b      	ldr	r3, [r3, #0]
 8002470:	681a      	ldr	r2, [r3, #0]
 8002472:	687b      	ldr	r3, [r7, #4]
 8002474:	681b      	ldr	r3, [r3, #0]
 8002476:	f022 0201 	bic.w	r2, r2, #1
 800247a:	601a      	str	r2, [r3, #0]
    
    /* Check if the DMA Stream is effectively disabled */
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 800247c:	e013      	b.n	80024a6 <HAL_DMA_Abort+0xac>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 800247e:	f7ff fd5d 	bl	8001f3c <HAL_GetTick>
 8002482:	4602      	mov	r2, r0
 8002484:	68bb      	ldr	r3, [r7, #8]
 8002486:	1ad3      	subs	r3, r2, r3
 8002488:	2b05      	cmp	r3, #5
 800248a:	d90c      	bls.n	80024a6 <HAL_DMA_Abort+0xac>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 800248c:	687b      	ldr	r3, [r7, #4]
 800248e:	2220      	movs	r2, #32
 8002490:	655a      	str	r2, [r3, #84]	@ 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 8002492:	687b      	ldr	r3, [r7, #4]
 8002494:	2203      	movs	r2, #3
 8002496:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
        
        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 800249a:	687b      	ldr	r3, [r7, #4]
 800249c:	2200      	movs	r2, #0
 800249e:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

        return HAL_TIMEOUT;
 80024a2:	2303      	movs	r3, #3
 80024a4:	e015      	b.n	80024d2 <HAL_DMA_Abort+0xd8>
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 80024a6:	687b      	ldr	r3, [r7, #4]
 80024a8:	681b      	ldr	r3, [r3, #0]
 80024aa:	681b      	ldr	r3, [r3, #0]
 80024ac:	f003 0301 	and.w	r3, r3, #1
 80024b0:	2b00      	cmp	r3, #0
 80024b2:	d1e4      	bne.n	800247e <HAL_DMA_Abort+0x84>
      }
    }
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 80024b4:	687b      	ldr	r3, [r7, #4]
 80024b6:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80024b8:	223f      	movs	r2, #63	@ 0x3f
 80024ba:	409a      	lsls	r2, r3
 80024bc:	68fb      	ldr	r3, [r7, #12]
 80024be:	609a      	str	r2, [r3, #8]
    
    /* Change the DMA state*/
    hdma->State = HAL_DMA_STATE_READY;
 80024c0:	687b      	ldr	r3, [r7, #4]
 80024c2:	2201      	movs	r2, #1
 80024c4:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80024c8:	687b      	ldr	r3, [r7, #4]
 80024ca:	2200      	movs	r2, #0
 80024cc:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    
  }
  return HAL_OK;
 80024d0:	2300      	movs	r3, #0
}
 80024d2:	4618      	mov	r0, r3
 80024d4:	3710      	adds	r7, #16
 80024d6:	46bd      	mov	sp, r7
 80024d8:	bd80      	pop	{r7, pc}

080024da <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 80024da:	b480      	push	{r7}
 80024dc:	b083      	sub	sp, #12
 80024de:	af00      	add	r7, sp, #0
 80024e0:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 80024e2:	687b      	ldr	r3, [r7, #4]
 80024e4:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 80024e8:	b2db      	uxtb	r3, r3
 80024ea:	2b02      	cmp	r3, #2
 80024ec:	d004      	beq.n	80024f8 <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80024ee:	687b      	ldr	r3, [r7, #4]
 80024f0:	2280      	movs	r2, #128	@ 0x80
 80024f2:	655a      	str	r2, [r3, #84]	@ 0x54
    return HAL_ERROR;
 80024f4:	2301      	movs	r3, #1
 80024f6:	e00c      	b.n	8002512 <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 80024f8:	687b      	ldr	r3, [r7, #4]
 80024fa:	2205      	movs	r2, #5
 80024fc:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8002500:	687b      	ldr	r3, [r7, #4]
 8002502:	681b      	ldr	r3, [r3, #0]
 8002504:	681a      	ldr	r2, [r3, #0]
 8002506:	687b      	ldr	r3, [r7, #4]
 8002508:	681b      	ldr	r3, [r3, #0]
 800250a:	f022 0201 	bic.w	r2, r2, #1
 800250e:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 8002510:	2300      	movs	r3, #0
}
 8002512:	4618      	mov	r0, r3
 8002514:	370c      	adds	r7, #12
 8002516:	46bd      	mov	sp, r7
 8002518:	f85d 7b04 	ldr.w	r7, [sp], #4
 800251c:	4770      	bx	lr
	...

08002520 <HAL_ETH_Init>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_Init(ETH_HandleTypeDef *heth)
{
 8002520:	b580      	push	{r7, lr}
 8002522:	b084      	sub	sp, #16
 8002524:	af00      	add	r7, sp, #0
 8002526:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  if (heth == NULL)
 8002528:	687b      	ldr	r3, [r7, #4]
 800252a:	2b00      	cmp	r3, #0
 800252c:	d101      	bne.n	8002532 <HAL_ETH_Init+0x12>
  {
    return HAL_ERROR;
 800252e:	2301      	movs	r3, #1
 8002530:	e086      	b.n	8002640 <HAL_ETH_Init+0x120>
  }
  if (heth->gState == HAL_ETH_STATE_RESET)
 8002532:	687b      	ldr	r3, [r7, #4]
 8002534:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8002538:	2b00      	cmp	r3, #0
 800253a:	d106      	bne.n	800254a <HAL_ETH_Init+0x2a>
  {
    heth->gState = HAL_ETH_STATE_BUSY;
 800253c:	687b      	ldr	r3, [r7, #4]
 800253e:	2223      	movs	r2, #35	@ 0x23
 8002540:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

    /* Init the low level hardware */
    heth->MspInitCallback(heth);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC. */
    HAL_ETH_MspInit(heth);
 8002544:	6878      	ldr	r0, [r7, #4]
 8002546:	f7ff f955 	bl	80017f4 <HAL_ETH_MspInit>

#endif /* (USE_HAL_ETH_REGISTER_CALLBACKS) */
  }

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800254a:	4b3f      	ldr	r3, [pc, #252]	@ (8002648 <HAL_ETH_Init+0x128>)
 800254c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800254e:	4a3e      	ldr	r2, [pc, #248]	@ (8002648 <HAL_ETH_Init+0x128>)
 8002550:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8002554:	6453      	str	r3, [r2, #68]	@ 0x44
 8002556:	4b3c      	ldr	r3, [pc, #240]	@ (8002648 <HAL_ETH_Init+0x128>)
 8002558:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800255a:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800255e:	60bb      	str	r3, [r7, #8]
 8002560:	68bb      	ldr	r3, [r7, #8]

  /* Select MII or RMII Mode*/
  SYSCFG->PMC &= ~(SYSCFG_PMC_MII_RMII_SEL);
 8002562:	4b3a      	ldr	r3, [pc, #232]	@ (800264c <HAL_ETH_Init+0x12c>)
 8002564:	685b      	ldr	r3, [r3, #4]
 8002566:	4a39      	ldr	r2, [pc, #228]	@ (800264c <HAL_ETH_Init+0x12c>)
 8002568:	f423 0300 	bic.w	r3, r3, #8388608	@ 0x800000
 800256c:	6053      	str	r3, [r2, #4]
  SYSCFG->PMC |= (uint32_t)heth->Init.MediaInterface;
 800256e:	4b37      	ldr	r3, [pc, #220]	@ (800264c <HAL_ETH_Init+0x12c>)
 8002570:	685a      	ldr	r2, [r3, #4]
 8002572:	687b      	ldr	r3, [r7, #4]
 8002574:	689b      	ldr	r3, [r3, #8]
 8002576:	4935      	ldr	r1, [pc, #212]	@ (800264c <HAL_ETH_Init+0x12c>)
 8002578:	4313      	orrs	r3, r2
 800257a:	604b      	str	r3, [r1, #4]
  /* Dummy read to sync SYSCFG with ETH */
  (void)SYSCFG->PMC;
 800257c:	4b33      	ldr	r3, [pc, #204]	@ (800264c <HAL_ETH_Init+0x12c>)
 800257e:	685b      	ldr	r3, [r3, #4]

  /* Ethernet Software reset */
  /* Set the SWR bit: resets all MAC subsystem internal registers and logic */
  /* After reset all the registers holds their respective reset values */
  SET_BIT(heth->Instance->DMABMR, ETH_DMABMR_SR);
 8002580:	687b      	ldr	r3, [r7, #4]
 8002582:	681b      	ldr	r3, [r3, #0]
 8002584:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8002588:	681b      	ldr	r3, [r3, #0]
 800258a:	687a      	ldr	r2, [r7, #4]
 800258c:	6812      	ldr	r2, [r2, #0]
 800258e:	f043 0301 	orr.w	r3, r3, #1
 8002592:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 8002596:	6013      	str	r3, [r2, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8002598:	f7ff fcd0 	bl	8001f3c <HAL_GetTick>
 800259c:	60f8      	str	r0, [r7, #12]

  /* Wait for software reset */
  while (READ_BIT(heth->Instance->DMABMR, ETH_DMABMR_SR) > 0U)
 800259e:	e011      	b.n	80025c4 <HAL_ETH_Init+0xa4>
  {
    if (((HAL_GetTick() - tickstart) > ETH_SWRESET_TIMEOUT))
 80025a0:	f7ff fccc 	bl	8001f3c <HAL_GetTick>
 80025a4:	4602      	mov	r2, r0
 80025a6:	68fb      	ldr	r3, [r7, #12]
 80025a8:	1ad3      	subs	r3, r2, r3
 80025aa:	f5b3 7ffa 	cmp.w	r3, #500	@ 0x1f4
 80025ae:	d909      	bls.n	80025c4 <HAL_ETH_Init+0xa4>
    {
      /* Set Error Code */
      heth->ErrorCode = HAL_ETH_ERROR_TIMEOUT;
 80025b0:	687b      	ldr	r3, [r7, #4]
 80025b2:	2204      	movs	r2, #4
 80025b4:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
      /* Set State as Error */
      heth->gState = HAL_ETH_STATE_ERROR;
 80025b8:	687b      	ldr	r3, [r7, #4]
 80025ba:	22e0      	movs	r2, #224	@ 0xe0
 80025bc:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
      /* Return Error */
      return HAL_ERROR;
 80025c0:	2301      	movs	r3, #1
 80025c2:	e03d      	b.n	8002640 <HAL_ETH_Init+0x120>
  while (READ_BIT(heth->Instance->DMABMR, ETH_DMABMR_SR) > 0U)
 80025c4:	687b      	ldr	r3, [r7, #4]
 80025c6:	681b      	ldr	r3, [r3, #0]
 80025c8:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 80025cc:	681b      	ldr	r3, [r3, #0]
 80025ce:	f003 0301 	and.w	r3, r3, #1
 80025d2:	2b00      	cmp	r3, #0
 80025d4:	d1e4      	bne.n	80025a0 <HAL_ETH_Init+0x80>
    }
  }


  /*------------------ MAC, MTL and DMA default Configuration ----------------*/
  ETH_MACDMAConfig(heth);
 80025d6:	6878      	ldr	r0, [r7, #4]
 80025d8:	f000 f97a 	bl	80028d0 <ETH_MACDMAConfig>


  /*------------------ DMA Tx Descriptors Configuration ----------------------*/
  ETH_DMATxDescListInit(heth);
 80025dc:	6878      	ldr	r0, [r7, #4]
 80025de:	f000 fa25 	bl	8002a2c <ETH_DMATxDescListInit>

  /*------------------ DMA Rx Descriptors Configuration ----------------------*/
  ETH_DMARxDescListInit(heth);
 80025e2:	6878      	ldr	r0, [r7, #4]
 80025e4:	f000 fa7b 	bl	8002ade <ETH_DMARxDescListInit>

  /*--------------------- ETHERNET MAC Address Configuration ------------------*/
  ETH_MACAddressConfig(heth, ETH_MAC_ADDRESS0, heth->Init.MACAddr);
 80025e8:	687b      	ldr	r3, [r7, #4]
 80025ea:	685b      	ldr	r3, [r3, #4]
 80025ec:	461a      	mov	r2, r3
 80025ee:	2100      	movs	r1, #0
 80025f0:	6878      	ldr	r0, [r7, #4]
 80025f2:	f000 f9e3 	bl	80029bc <ETH_MACAddressConfig>

  /* Disable MMC Interrupts */
  SET_BIT(heth->Instance->MACIMR, ETH_MACIMR_TSTIM | ETH_MACIMR_PMTIM);
 80025f6:	687b      	ldr	r3, [r7, #4]
 80025f8:	681b      	ldr	r3, [r3, #0]
 80025fa:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 80025fc:	687b      	ldr	r3, [r7, #4]
 80025fe:	681b      	ldr	r3, [r3, #0]
 8002600:	f442 7202 	orr.w	r2, r2, #520	@ 0x208
 8002604:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Disable Rx MMC Interrupts */
  SET_BIT(heth->Instance->MMCRIMR, ETH_MMCRIMR_RGUFM | ETH_MMCRIMR_RFAEM | \
 8002606:	687b      	ldr	r3, [r7, #4]
 8002608:	681b      	ldr	r3, [r3, #0]
 800260a:	f8d3 110c 	ldr.w	r1, [r3, #268]	@ 0x10c
 800260e:	687b      	ldr	r3, [r7, #4]
 8002610:	681a      	ldr	r2, [r3, #0]
 8002612:	4b0f      	ldr	r3, [pc, #60]	@ (8002650 <HAL_ETH_Init+0x130>)
 8002614:	430b      	orrs	r3, r1
 8002616:	f8c2 310c 	str.w	r3, [r2, #268]	@ 0x10c
          ETH_MMCRIMR_RFCEM);

  /* Disable Tx MMC Interrupts */
  SET_BIT(heth->Instance->MMCTIMR, ETH_MMCTIMR_TGFM | ETH_MMCTIMR_TGFMSCM | \
 800261a:	687b      	ldr	r3, [r7, #4]
 800261c:	681b      	ldr	r3, [r3, #0]
 800261e:	f8d3 2110 	ldr.w	r2, [r3, #272]	@ 0x110
 8002622:	687b      	ldr	r3, [r7, #4]
 8002624:	681b      	ldr	r3, [r3, #0]
 8002626:	f442 1203 	orr.w	r2, r2, #2146304	@ 0x20c000
 800262a:	f8c3 2110 	str.w	r2, [r3, #272]	@ 0x110
          ETH_MMCTIMR_TGFSCM);

  heth->ErrorCode = HAL_ETH_ERROR_NONE;
 800262e:	687b      	ldr	r3, [r7, #4]
 8002630:	2200      	movs	r2, #0
 8002632:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
  heth->gState = HAL_ETH_STATE_READY;
 8002636:	687b      	ldr	r3, [r7, #4]
 8002638:	2210      	movs	r2, #16
 800263a:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 800263e:	2300      	movs	r3, #0
}
 8002640:	4618      	mov	r0, r3
 8002642:	3710      	adds	r7, #16
 8002644:	46bd      	mov	sp, r7
 8002646:	bd80      	pop	{r7, pc}
 8002648:	40023800 	.word	0x40023800
 800264c:	40013800 	.word	0x40013800
 8002650:	00020060 	.word	0x00020060

08002654 <ETH_SetMACConfig>:
  HAL_Delay(ETH_REG_WRITE_DELAY);
  (heth->Instance)->DMAOMR = tmpreg;
}

static void ETH_SetMACConfig(ETH_HandleTypeDef *heth, const ETH_MACConfigTypeDef *macconf)
{
 8002654:	b580      	push	{r7, lr}
 8002656:	b084      	sub	sp, #16
 8002658:	af00      	add	r7, sp, #0
 800265a:	6078      	str	r0, [r7, #4]
 800265c:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg1;

  /*------------------------ ETHERNET MACCR Configuration --------------------*/
  /* Get the ETHERNET MACCR value */
  tmpreg1 = (heth->Instance)->MACCR;
 800265e:	687b      	ldr	r3, [r7, #4]
 8002660:	681b      	ldr	r3, [r3, #0]
 8002662:	681b      	ldr	r3, [r3, #0]
 8002664:	60fb      	str	r3, [r7, #12]
  /* Clear CSTF, WD, PCE, PS, TE and RE bits */
  tmpreg1 &= ETH_MACCR_CLEAR_MASK;
 8002666:	68fa      	ldr	r2, [r7, #12]
 8002668:	4b53      	ldr	r3, [pc, #332]	@ (80027b8 <ETH_SetMACConfig+0x164>)
 800266a:	4013      	ands	r3, r2
 800266c:	60fb      	str	r3, [r7, #12]

  tmpreg1 |= (uint32_t)(((uint32_t)macconf->CRCStripTypePacket << 25U) |
 800266e:	683b      	ldr	r3, [r7, #0]
 8002670:	7b9b      	ldrb	r3, [r3, #14]
 8002672:	065b      	lsls	r3, r3, #25
                        ((uint32_t)((macconf->Watchdog == DISABLE) ? 1U : 0U) << 23U) |
 8002674:	683a      	ldr	r2, [r7, #0]
 8002676:	7c12      	ldrb	r2, [r2, #16]
 8002678:	2a00      	cmp	r2, #0
 800267a:	d102      	bne.n	8002682 <ETH_SetMACConfig+0x2e>
 800267c:	f44f 0200 	mov.w	r2, #8388608	@ 0x800000
 8002680:	e000      	b.n	8002684 <ETH_SetMACConfig+0x30>
 8002682:	2200      	movs	r2, #0
  tmpreg1 |= (uint32_t)(((uint32_t)macconf->CRCStripTypePacket << 25U) |
 8002684:	4313      	orrs	r3, r2
                        ((uint32_t)((macconf->Jabber == DISABLE) ? 1U : 0U) << 22U) |
 8002686:	683a      	ldr	r2, [r7, #0]
 8002688:	7c52      	ldrb	r2, [r2, #17]
 800268a:	2a00      	cmp	r2, #0
 800268c:	d102      	bne.n	8002694 <ETH_SetMACConfig+0x40>
 800268e:	f44f 0280 	mov.w	r2, #4194304	@ 0x400000
 8002692:	e000      	b.n	8002696 <ETH_SetMACConfig+0x42>
 8002694:	2200      	movs	r2, #0
                        ((uint32_t)((macconf->Watchdog == DISABLE) ? 1U : 0U) << 23U) |
 8002696:	431a      	orrs	r2, r3
                        (uint32_t)macconf->InterPacketGapVal |
 8002698:	683b      	ldr	r3, [r7, #0]
 800269a:	689b      	ldr	r3, [r3, #8]
                        ((uint32_t)((macconf->Jabber == DISABLE) ? 1U : 0U) << 22U) |
 800269c:	431a      	orrs	r2, r3
                        ((uint32_t)macconf->CarrierSenseDuringTransmit << 16U) |
 800269e:	683b      	ldr	r3, [r7, #0]
 80026a0:	7fdb      	ldrb	r3, [r3, #31]
 80026a2:	041b      	lsls	r3, r3, #16
                        (uint32_t)macconf->InterPacketGapVal |
 80026a4:	431a      	orrs	r2, r3
                        macconf->Speed |
 80026a6:	683b      	ldr	r3, [r7, #0]
 80026a8:	695b      	ldr	r3, [r3, #20]
                        ((uint32_t)macconf->CarrierSenseDuringTransmit << 16U) |
 80026aa:	4313      	orrs	r3, r2
                        ((uint32_t)((macconf->ReceiveOwn == DISABLE) ? 1U : 0U) << 13U) |
 80026ac:	683a      	ldr	r2, [r7, #0]
 80026ae:	7f92      	ldrb	r2, [r2, #30]
 80026b0:	2a00      	cmp	r2, #0
 80026b2:	d102      	bne.n	80026ba <ETH_SetMACConfig+0x66>
 80026b4:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 80026b8:	e000      	b.n	80026bc <ETH_SetMACConfig+0x68>
 80026ba:	2200      	movs	r2, #0
                        macconf->Speed |
 80026bc:	431a      	orrs	r2, r3
                        ((uint32_t)macconf->LoopbackMode << 12U) |
 80026be:	683b      	ldr	r3, [r7, #0]
 80026c0:	7f1b      	ldrb	r3, [r3, #28]
 80026c2:	031b      	lsls	r3, r3, #12
                        ((uint32_t)((macconf->ReceiveOwn == DISABLE) ? 1U : 0U) << 13U) |
 80026c4:	431a      	orrs	r2, r3
                        macconf->DuplexMode |
 80026c6:	683b      	ldr	r3, [r7, #0]
 80026c8:	699b      	ldr	r3, [r3, #24]
                        ((uint32_t)macconf->LoopbackMode << 12U) |
 80026ca:	431a      	orrs	r2, r3
                        ((uint32_t)macconf->ChecksumOffload << 10U) |
 80026cc:	683b      	ldr	r3, [r7, #0]
 80026ce:	791b      	ldrb	r3, [r3, #4]
 80026d0:	029b      	lsls	r3, r3, #10
                        macconf->DuplexMode |
 80026d2:	4313      	orrs	r3, r2
                        ((uint32_t)((macconf->RetryTransmission == DISABLE) ? 1U : 0U) << 9U) |
 80026d4:	683a      	ldr	r2, [r7, #0]
 80026d6:	f892 2020 	ldrb.w	r2, [r2, #32]
 80026da:	2a00      	cmp	r2, #0
 80026dc:	d102      	bne.n	80026e4 <ETH_SetMACConfig+0x90>
 80026de:	f44f 7200 	mov.w	r2, #512	@ 0x200
 80026e2:	e000      	b.n	80026e6 <ETH_SetMACConfig+0x92>
 80026e4:	2200      	movs	r2, #0
                        ((uint32_t)macconf->ChecksumOffload << 10U) |
 80026e6:	431a      	orrs	r2, r3
                        ((uint32_t)macconf->AutomaticPadCRCStrip << 7U) |
 80026e8:	683b      	ldr	r3, [r7, #0]
 80026ea:	7bdb      	ldrb	r3, [r3, #15]
 80026ec:	01db      	lsls	r3, r3, #7
                        ((uint32_t)((macconf->RetryTransmission == DISABLE) ? 1U : 0U) << 9U) |
 80026ee:	431a      	orrs	r2, r3
                        macconf->BackOffLimit |
 80026f0:	683b      	ldr	r3, [r7, #0]
 80026f2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
                        ((uint32_t)macconf->AutomaticPadCRCStrip << 7U) |
 80026f4:	431a      	orrs	r2, r3
                        ((uint32_t)macconf->DeferralCheck << 4U));
 80026f6:	683b      	ldr	r3, [r7, #0]
 80026f8:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 80026fc:	011b      	lsls	r3, r3, #4
  tmpreg1 |= (uint32_t)(((uint32_t)macconf->CRCStripTypePacket << 25U) |
 80026fe:	4313      	orrs	r3, r2
 8002700:	68fa      	ldr	r2, [r7, #12]
 8002702:	4313      	orrs	r3, r2
 8002704:	60fb      	str	r3, [r7, #12]

  /* Write to ETHERNET MACCR */
  (heth->Instance)->MACCR = (uint32_t)tmpreg1;
 8002706:	687b      	ldr	r3, [r7, #4]
 8002708:	681b      	ldr	r3, [r3, #0]
 800270a:	68fa      	ldr	r2, [r7, #12]
 800270c:	601a      	str	r2, [r3, #0]

  /* Wait until the write operation will be taken into account :
  at least four TX_CLK/RX_CLK clock cycles */
  tmpreg1 = (heth->Instance)->MACCR;
 800270e:	687b      	ldr	r3, [r7, #4]
 8002710:	681b      	ldr	r3, [r3, #0]
 8002712:	681b      	ldr	r3, [r3, #0]
 8002714:	60fb      	str	r3, [r7, #12]
  HAL_Delay(ETH_REG_WRITE_DELAY);
 8002716:	2001      	movs	r0, #1
 8002718:	f7ff fc1c 	bl	8001f54 <HAL_Delay>
  (heth->Instance)->MACCR = tmpreg1;
 800271c:	687b      	ldr	r3, [r7, #4]
 800271e:	681b      	ldr	r3, [r3, #0]
 8002720:	68fa      	ldr	r2, [r7, #12]
 8002722:	601a      	str	r2, [r3, #0]

  /*----------------------- ETHERNET MACFCR Configuration --------------------*/

  /* Get the ETHERNET MACFCR value */
  tmpreg1 = (heth->Instance)->MACFCR;
 8002724:	687b      	ldr	r3, [r7, #4]
 8002726:	681b      	ldr	r3, [r3, #0]
 8002728:	699b      	ldr	r3, [r3, #24]
 800272a:	60fb      	str	r3, [r7, #12]
  /* Clear xx bits */
  tmpreg1 &= ETH_MACFCR_CLEAR_MASK;
 800272c:	68fa      	ldr	r2, [r7, #12]
 800272e:	f64f 7341 	movw	r3, #65345	@ 0xff41
 8002732:	4013      	ands	r3, r2
 8002734:	60fb      	str	r3, [r7, #12]

  tmpreg1 |= (uint32_t)((macconf->PauseTime << 16U) |
 8002736:	683b      	ldr	r3, [r7, #0]
 8002738:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800273a:	041b      	lsls	r3, r3, #16
                        ((uint32_t)((macconf->ZeroQuantaPause == DISABLE) ? 1U : 0U) << 7U) |
 800273c:	683a      	ldr	r2, [r7, #0]
 800273e:	f892 204c 	ldrb.w	r2, [r2, #76]	@ 0x4c
 8002742:	2a00      	cmp	r2, #0
 8002744:	d101      	bne.n	800274a <ETH_SetMACConfig+0xf6>
 8002746:	2280      	movs	r2, #128	@ 0x80
 8002748:	e000      	b.n	800274c <ETH_SetMACConfig+0xf8>
 800274a:	2200      	movs	r2, #0
  tmpreg1 |= (uint32_t)((macconf->PauseTime << 16U) |
 800274c:	431a      	orrs	r2, r3
                        macconf->PauseLowThreshold |
 800274e:	683b      	ldr	r3, [r7, #0]
 8002750:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
                        ((uint32_t)((macconf->ZeroQuantaPause == DISABLE) ? 1U : 0U) << 7U) |
 8002752:	4313      	orrs	r3, r2
                        ((uint32_t)((macconf->UnicastPausePacketDetect == ENABLE) ? 1U : 0U) << 3U) |
 8002754:	683a      	ldr	r2, [r7, #0]
 8002756:	f892 2055 	ldrb.w	r2, [r2, #85]	@ 0x55
 800275a:	2a01      	cmp	r2, #1
 800275c:	d101      	bne.n	8002762 <ETH_SetMACConfig+0x10e>
 800275e:	2208      	movs	r2, #8
 8002760:	e000      	b.n	8002764 <ETH_SetMACConfig+0x110>
 8002762:	2200      	movs	r2, #0
                        macconf->PauseLowThreshold |
 8002764:	4313      	orrs	r3, r2
                        ((uint32_t)((macconf->ReceiveFlowControl == ENABLE) ? 1U : 0U) << 2U) |
 8002766:	683a      	ldr	r2, [r7, #0]
 8002768:	f892 2056 	ldrb.w	r2, [r2, #86]	@ 0x56
 800276c:	2a01      	cmp	r2, #1
 800276e:	d101      	bne.n	8002774 <ETH_SetMACConfig+0x120>
 8002770:	2204      	movs	r2, #4
 8002772:	e000      	b.n	8002776 <ETH_SetMACConfig+0x122>
 8002774:	2200      	movs	r2, #0
                        ((uint32_t)((macconf->UnicastPausePacketDetect == ENABLE) ? 1U : 0U) << 3U) |
 8002776:	4313      	orrs	r3, r2
                        ((uint32_t)((macconf->TransmitFlowControl == ENABLE) ? 1U : 0U) << 1U));
 8002778:	683a      	ldr	r2, [r7, #0]
 800277a:	f892 2054 	ldrb.w	r2, [r2, #84]	@ 0x54
 800277e:	2a01      	cmp	r2, #1
 8002780:	d101      	bne.n	8002786 <ETH_SetMACConfig+0x132>
 8002782:	2202      	movs	r2, #2
 8002784:	e000      	b.n	8002788 <ETH_SetMACConfig+0x134>
 8002786:	2200      	movs	r2, #0
  tmpreg1 |= (uint32_t)((macconf->PauseTime << 16U) |
 8002788:	4313      	orrs	r3, r2
 800278a:	68fa      	ldr	r2, [r7, #12]
 800278c:	4313      	orrs	r3, r2
 800278e:	60fb      	str	r3, [r7, #12]

  /* Write to ETHERNET MACFCR */
  (heth->Instance)->MACFCR = (uint32_t)tmpreg1;
 8002790:	687b      	ldr	r3, [r7, #4]
 8002792:	681b      	ldr	r3, [r3, #0]
 8002794:	68fa      	ldr	r2, [r7, #12]
 8002796:	619a      	str	r2, [r3, #24]

  /* Wait until the write operation will be taken into account :
  at least four TX_CLK/RX_CLK clock cycles */
  tmpreg1 = (heth->Instance)->MACFCR;
 8002798:	687b      	ldr	r3, [r7, #4]
 800279a:	681b      	ldr	r3, [r3, #0]
 800279c:	699b      	ldr	r3, [r3, #24]
 800279e:	60fb      	str	r3, [r7, #12]
  HAL_Delay(ETH_REG_WRITE_DELAY);
 80027a0:	2001      	movs	r0, #1
 80027a2:	f7ff fbd7 	bl	8001f54 <HAL_Delay>
  (heth->Instance)->MACFCR = tmpreg1;
 80027a6:	687b      	ldr	r3, [r7, #4]
 80027a8:	681b      	ldr	r3, [r3, #0]
 80027aa:	68fa      	ldr	r2, [r7, #12]
 80027ac:	619a      	str	r2, [r3, #24]
}
 80027ae:	bf00      	nop
 80027b0:	3710      	adds	r7, #16
 80027b2:	46bd      	mov	sp, r7
 80027b4:	bd80      	pop	{r7, pc}
 80027b6:	bf00      	nop
 80027b8:	fd20810f 	.word	0xfd20810f

080027bc <ETH_SetDMAConfig>:

static void ETH_SetDMAConfig(ETH_HandleTypeDef *heth, const ETH_DMAConfigTypeDef *dmaconf)
{
 80027bc:	b580      	push	{r7, lr}
 80027be:	b084      	sub	sp, #16
 80027c0:	af00      	add	r7, sp, #0
 80027c2:	6078      	str	r0, [r7, #4]
 80027c4:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg1;

  /*----------------------- ETHERNET DMAOMR Configuration --------------------*/
  /* Get the ETHERNET DMAOMR value */
  tmpreg1 = (heth->Instance)->DMAOMR;
 80027c6:	687b      	ldr	r3, [r7, #4]
 80027c8:	681b      	ldr	r3, [r3, #0]
 80027ca:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 80027ce:	699b      	ldr	r3, [r3, #24]
 80027d0:	60fb      	str	r3, [r7, #12]
  /* Clear xx bits */
  tmpreg1 &= ETH_DMAOMR_CLEAR_MASK;
 80027d2:	68fa      	ldr	r2, [r7, #12]
 80027d4:	4b3d      	ldr	r3, [pc, #244]	@ (80028cc <ETH_SetDMAConfig+0x110>)
 80027d6:	4013      	ands	r3, r2
 80027d8:	60fb      	str	r3, [r7, #12]

  tmpreg1 |= (uint32_t)(((uint32_t)((dmaconf->DropTCPIPChecksumErrorFrame == DISABLE) ? 1U : 0U) << 26U) |
 80027da:	683b      	ldr	r3, [r7, #0]
 80027dc:	7b1b      	ldrb	r3, [r3, #12]
 80027de:	2b00      	cmp	r3, #0
 80027e0:	d102      	bne.n	80027e8 <ETH_SetDMAConfig+0x2c>
 80027e2:	f04f 6280 	mov.w	r2, #67108864	@ 0x4000000
 80027e6:	e000      	b.n	80027ea <ETH_SetDMAConfig+0x2e>
 80027e8:	2200      	movs	r2, #0
                        ((uint32_t)dmaconf->ReceiveStoreForward << 25U) |
 80027ea:	683b      	ldr	r3, [r7, #0]
 80027ec:	7b5b      	ldrb	r3, [r3, #13]
 80027ee:	065b      	lsls	r3, r3, #25
  tmpreg1 |= (uint32_t)(((uint32_t)((dmaconf->DropTCPIPChecksumErrorFrame == DISABLE) ? 1U : 0U) << 26U) |
 80027f0:	4313      	orrs	r3, r2
                        ((uint32_t)((dmaconf->FlushRxPacket == DISABLE) ? 1U : 0U) << 20U) |
 80027f2:	683a      	ldr	r2, [r7, #0]
 80027f4:	7f52      	ldrb	r2, [r2, #29]
 80027f6:	2a00      	cmp	r2, #0
 80027f8:	d102      	bne.n	8002800 <ETH_SetDMAConfig+0x44>
 80027fa:	f44f 1280 	mov.w	r2, #1048576	@ 0x100000
 80027fe:	e000      	b.n	8002802 <ETH_SetDMAConfig+0x46>
 8002800:	2200      	movs	r2, #0
                        ((uint32_t)dmaconf->ReceiveStoreForward << 25U) |
 8002802:	431a      	orrs	r2, r3
                        ((uint32_t)dmaconf->TransmitStoreForward << 21U) |
 8002804:	683b      	ldr	r3, [r7, #0]
 8002806:	7b9b      	ldrb	r3, [r3, #14]
 8002808:	055b      	lsls	r3, r3, #21
                        ((uint32_t)((dmaconf->FlushRxPacket == DISABLE) ? 1U : 0U) << 20U) |
 800280a:	431a      	orrs	r2, r3
                        dmaconf->TransmitThresholdControl |
 800280c:	683b      	ldr	r3, [r7, #0]
 800280e:	695b      	ldr	r3, [r3, #20]
                        ((uint32_t)dmaconf->TransmitStoreForward << 21U) |
 8002810:	431a      	orrs	r2, r3
                        ((uint32_t)dmaconf->ForwardErrorFrames << 7U) |
 8002812:	683b      	ldr	r3, [r7, #0]
 8002814:	7f1b      	ldrb	r3, [r3, #28]
 8002816:	01db      	lsls	r3, r3, #7
                        dmaconf->TransmitThresholdControl |
 8002818:	431a      	orrs	r2, r3
                        ((uint32_t)dmaconf->ForwardUndersizedGoodFrames << 6U) |
 800281a:	683b      	ldr	r3, [r7, #0]
 800281c:	7f9b      	ldrb	r3, [r3, #30]
 800281e:	019b      	lsls	r3, r3, #6
                        ((uint32_t)dmaconf->ForwardErrorFrames << 7U) |
 8002820:	431a      	orrs	r2, r3
                        dmaconf->ReceiveThresholdControl |
 8002822:	683b      	ldr	r3, [r7, #0]
 8002824:	6a1b      	ldr	r3, [r3, #32]
                        ((uint32_t)dmaconf->ForwardUndersizedGoodFrames << 6U) |
 8002826:	431a      	orrs	r2, r3
                        ((uint32_t)dmaconf->SecondFrameOperate << 2U));
 8002828:	683b      	ldr	r3, [r7, #0]
 800282a:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 800282e:	009b      	lsls	r3, r3, #2
  tmpreg1 |= (uint32_t)(((uint32_t)((dmaconf->DropTCPIPChecksumErrorFrame == DISABLE) ? 1U : 0U) << 26U) |
 8002830:	4313      	orrs	r3, r2
 8002832:	68fa      	ldr	r2, [r7, #12]
 8002834:	4313      	orrs	r3, r2
 8002836:	60fb      	str	r3, [r7, #12]

  /* Write to ETHERNET DMAOMR */
  (heth->Instance)->DMAOMR = (uint32_t)tmpreg1;
 8002838:	687b      	ldr	r3, [r7, #4]
 800283a:	681b      	ldr	r3, [r3, #0]
 800283c:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8002840:	461a      	mov	r2, r3
 8002842:	68fb      	ldr	r3, [r7, #12]
 8002844:	6193      	str	r3, [r2, #24]

  /* Wait until the write operation will be taken into account:
  at least four TX_CLK/RX_CLK clock cycles */
  tmpreg1 = (heth->Instance)->DMAOMR;
 8002846:	687b      	ldr	r3, [r7, #4]
 8002848:	681b      	ldr	r3, [r3, #0]
 800284a:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800284e:	699b      	ldr	r3, [r3, #24]
 8002850:	60fb      	str	r3, [r7, #12]
  HAL_Delay(ETH_REG_WRITE_DELAY);
 8002852:	2001      	movs	r0, #1
 8002854:	f7ff fb7e 	bl	8001f54 <HAL_Delay>
  (heth->Instance)->DMAOMR = tmpreg1;
 8002858:	687b      	ldr	r3, [r7, #4]
 800285a:	681b      	ldr	r3, [r3, #0]
 800285c:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8002860:	461a      	mov	r2, r3
 8002862:	68fb      	ldr	r3, [r7, #12]
 8002864:	6193      	str	r3, [r2, #24]

  /*----------------------- ETHERNET DMABMR Configuration --------------------*/
  (heth->Instance)->DMABMR = (uint32_t)(((uint32_t)dmaconf->AddressAlignedBeats << 25U) |
 8002866:	683b      	ldr	r3, [r7, #0]
 8002868:	791b      	ldrb	r3, [r3, #4]
 800286a:	065a      	lsls	r2, r3, #25
                                        dmaconf->BurstMode |
 800286c:	683b      	ldr	r3, [r7, #0]
 800286e:	689b      	ldr	r3, [r3, #8]
  (heth->Instance)->DMABMR = (uint32_t)(((uint32_t)dmaconf->AddressAlignedBeats << 25U) |
 8002870:	431a      	orrs	r2, r3
                                        dmaconf->RxDMABurstLength | /* !! if 4xPBL is selected for Tx or
 8002872:	683b      	ldr	r3, [r7, #0]
 8002874:	699b      	ldr	r3, [r3, #24]
                                        dmaconf->BurstMode |
 8002876:	431a      	orrs	r2, r3
                                                                       Rx it is applied for the other */
                                        dmaconf->TxDMABurstLength |
 8002878:	683b      	ldr	r3, [r7, #0]
 800287a:	691b      	ldr	r3, [r3, #16]
                                        dmaconf->RxDMABurstLength | /* !! if 4xPBL is selected for Tx or
 800287c:	431a      	orrs	r2, r3
                                        ((uint32_t)dmaconf->EnhancedDescriptorFormat << 7U) |
 800287e:	683b      	ldr	r3, [r7, #0]
 8002880:	f893 3025 	ldrb.w	r3, [r3, #37]	@ 0x25
 8002884:	01db      	lsls	r3, r3, #7
                                        dmaconf->TxDMABurstLength |
 8002886:	431a      	orrs	r2, r3
                                        (dmaconf->DescriptorSkipLength << 2U) |
 8002888:	683b      	ldr	r3, [r7, #0]
 800288a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800288c:	009b      	lsls	r3, r3, #2
                                        ((uint32_t)dmaconf->EnhancedDescriptorFormat << 7U) |
 800288e:	431a      	orrs	r2, r3
                                        dmaconf->DMAArbitration |
 8002890:	683b      	ldr	r3, [r7, #0]
 8002892:	681b      	ldr	r3, [r3, #0]
                                        (dmaconf->DescriptorSkipLength << 2U) |
 8002894:	4313      	orrs	r3, r2
  (heth->Instance)->DMABMR = (uint32_t)(((uint32_t)dmaconf->AddressAlignedBeats << 25U) |
 8002896:	687a      	ldr	r2, [r7, #4]
 8002898:	6812      	ldr	r2, [r2, #0]
 800289a:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 800289e:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 80028a2:	6013      	str	r3, [r2, #0]
                                        ETH_DMABMR_USP); /* Enable use of separate PBL for Rx and Tx */

  /* Wait until the write operation will be taken into account:
     at least four TX_CLK/RX_CLK clock cycles */
  tmpreg1 = (heth->Instance)->DMABMR;
 80028a4:	687b      	ldr	r3, [r7, #4]
 80028a6:	681b      	ldr	r3, [r3, #0]
 80028a8:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 80028ac:	681b      	ldr	r3, [r3, #0]
 80028ae:	60fb      	str	r3, [r7, #12]
  HAL_Delay(ETH_REG_WRITE_DELAY);
 80028b0:	2001      	movs	r0, #1
 80028b2:	f7ff fb4f 	bl	8001f54 <HAL_Delay>
  (heth->Instance)->DMABMR = tmpreg1;
 80028b6:	687b      	ldr	r3, [r7, #4]
 80028b8:	681b      	ldr	r3, [r3, #0]
 80028ba:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 80028be:	461a      	mov	r2, r3
 80028c0:	68fb      	ldr	r3, [r7, #12]
 80028c2:	6013      	str	r3, [r2, #0]
}
 80028c4:	bf00      	nop
 80028c6:	3710      	adds	r7, #16
 80028c8:	46bd      	mov	sp, r7
 80028ca:	bd80      	pop	{r7, pc}
 80028cc:	f8de3f23 	.word	0xf8de3f23

080028d0 <ETH_MACDMAConfig>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
static void ETH_MACDMAConfig(ETH_HandleTypeDef *heth)
{
 80028d0:	b580      	push	{r7, lr}
 80028d2:	b0a6      	sub	sp, #152	@ 0x98
 80028d4:	af00      	add	r7, sp, #0
 80028d6:	6078      	str	r0, [r7, #4]
  ETH_MACConfigTypeDef macDefaultConf;
  ETH_DMAConfigTypeDef dmaDefaultConf;

  /*--------------- ETHERNET MAC registers default Configuration --------------*/
  macDefaultConf.Watchdog = ENABLE;
 80028d8:	2301      	movs	r3, #1
 80028da:	f887 3044 	strb.w	r3, [r7, #68]	@ 0x44
  macDefaultConf.Jabber = ENABLE;
 80028de:	2301      	movs	r3, #1
 80028e0:	f887 3045 	strb.w	r3, [r7, #69]	@ 0x45
  macDefaultConf.InterPacketGapVal = ETH_INTERFRAMEGAP_96BIT;
 80028e4:	2300      	movs	r3, #0
 80028e6:	63fb      	str	r3, [r7, #60]	@ 0x3c
  macDefaultConf.CarrierSenseDuringTransmit = DISABLE;
 80028e8:	2300      	movs	r3, #0
 80028ea:	f887 3053 	strb.w	r3, [r7, #83]	@ 0x53
  macDefaultConf.ReceiveOwn = ENABLE;
 80028ee:	2301      	movs	r3, #1
 80028f0:	f887 3052 	strb.w	r3, [r7, #82]	@ 0x52
  macDefaultConf.LoopbackMode = DISABLE;
 80028f4:	2300      	movs	r3, #0
 80028f6:	f887 3050 	strb.w	r3, [r7, #80]	@ 0x50
  macDefaultConf.CRCStripTypePacket = ENABLE;
 80028fa:	2301      	movs	r3, #1
 80028fc:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
  macDefaultConf.ChecksumOffload = ENABLE;
 8002900:	2301      	movs	r3, #1
 8002902:	f887 3038 	strb.w	r3, [r7, #56]	@ 0x38
  macDefaultConf.RetryTransmission = DISABLE;
 8002906:	2300      	movs	r3, #0
 8002908:	f887 3054 	strb.w	r3, [r7, #84]	@ 0x54
  macDefaultConf.AutomaticPadCRCStrip = DISABLE;
 800290c:	2300      	movs	r3, #0
 800290e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
  macDefaultConf.BackOffLimit = ETH_BACKOFFLIMIT_10;
 8002912:	2300      	movs	r3, #0
 8002914:	65bb      	str	r3, [r7, #88]	@ 0x58
  macDefaultConf.DeferralCheck = DISABLE;
 8002916:	2300      	movs	r3, #0
 8002918:	f887 305c 	strb.w	r3, [r7, #92]	@ 0x5c
  macDefaultConf.PauseTime = 0x0U;
 800291c:	2300      	movs	r3, #0
 800291e:	67fb      	str	r3, [r7, #124]	@ 0x7c
  macDefaultConf.ZeroQuantaPause = DISABLE;
 8002920:	2300      	movs	r3, #0
 8002922:	f887 3080 	strb.w	r3, [r7, #128]	@ 0x80
  macDefaultConf.PauseLowThreshold = ETH_PAUSELOWTHRESHOLD_MINUS4;
 8002926:	2300      	movs	r3, #0
 8002928:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
  macDefaultConf.ReceiveFlowControl = DISABLE;
 800292c:	2300      	movs	r3, #0
 800292e:	f887 308a 	strb.w	r3, [r7, #138]	@ 0x8a
  macDefaultConf.TransmitFlowControl = DISABLE;
 8002932:	2300      	movs	r3, #0
 8002934:	f887 3088 	strb.w	r3, [r7, #136]	@ 0x88
  macDefaultConf.Speed = ETH_SPEED_100M;
 8002938:	f44f 4380 	mov.w	r3, #16384	@ 0x4000
 800293c:	64bb      	str	r3, [r7, #72]	@ 0x48
  macDefaultConf.DuplexMode = ETH_FULLDUPLEX_MODE;
 800293e:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 8002942:	64fb      	str	r3, [r7, #76]	@ 0x4c
  macDefaultConf.UnicastPausePacketDetect = DISABLE;
 8002944:	2300      	movs	r3, #0
 8002946:	f887 3089 	strb.w	r3, [r7, #137]	@ 0x89

  /* MAC default configuration */
  ETH_SetMACConfig(heth, &macDefaultConf);
 800294a:	f107 0334 	add.w	r3, r7, #52	@ 0x34
 800294e:	4619      	mov	r1, r3
 8002950:	6878      	ldr	r0, [r7, #4]
 8002952:	f7ff fe7f 	bl	8002654 <ETH_SetMACConfig>

  /*--------------- ETHERNET DMA registers default Configuration --------------*/
  dmaDefaultConf.DropTCPIPChecksumErrorFrame = ENABLE;
 8002956:	2301      	movs	r3, #1
 8002958:	753b      	strb	r3, [r7, #20]
  dmaDefaultConf.ReceiveStoreForward = ENABLE;
 800295a:	2301      	movs	r3, #1
 800295c:	757b      	strb	r3, [r7, #21]
  dmaDefaultConf.FlushRxPacket = ENABLE;
 800295e:	2301      	movs	r3, #1
 8002960:	f887 3025 	strb.w	r3, [r7, #37]	@ 0x25
  dmaDefaultConf.TransmitStoreForward = ENABLE;
 8002964:	2301      	movs	r3, #1
 8002966:	75bb      	strb	r3, [r7, #22]
  dmaDefaultConf.TransmitThresholdControl = ETH_TRANSMITTHRESHOLDCONTROL_64BYTES;
 8002968:	2300      	movs	r3, #0
 800296a:	61fb      	str	r3, [r7, #28]
  dmaDefaultConf.ForwardErrorFrames = DISABLE;
 800296c:	2300      	movs	r3, #0
 800296e:	f887 3024 	strb.w	r3, [r7, #36]	@ 0x24
  dmaDefaultConf.ForwardUndersizedGoodFrames = DISABLE;
 8002972:	2300      	movs	r3, #0
 8002974:	f887 3026 	strb.w	r3, [r7, #38]	@ 0x26
  dmaDefaultConf.ReceiveThresholdControl = ETH_RECEIVEDTHRESHOLDCONTROL_64BYTES;
 8002978:	2300      	movs	r3, #0
 800297a:	62bb      	str	r3, [r7, #40]	@ 0x28
  dmaDefaultConf.SecondFrameOperate = ENABLE;
 800297c:	2301      	movs	r3, #1
 800297e:	f887 302c 	strb.w	r3, [r7, #44]	@ 0x2c
  dmaDefaultConf.AddressAlignedBeats = ENABLE;
 8002982:	2301      	movs	r3, #1
 8002984:	733b      	strb	r3, [r7, #12]
  dmaDefaultConf.BurstMode = ETH_BURSTLENGTH_FIXED;
 8002986:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 800298a:	613b      	str	r3, [r7, #16]
  dmaDefaultConf.RxDMABurstLength = ETH_RXDMABURSTLENGTH_32BEAT;
 800298c:	f44f 0380 	mov.w	r3, #4194304	@ 0x400000
 8002990:	623b      	str	r3, [r7, #32]
  dmaDefaultConf.TxDMABurstLength = ETH_TXDMABURSTLENGTH_32BEAT;
 8002992:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8002996:	61bb      	str	r3, [r7, #24]
  dmaDefaultConf.EnhancedDescriptorFormat = ENABLE;
 8002998:	2301      	movs	r3, #1
 800299a:	f887 302d 	strb.w	r3, [r7, #45]	@ 0x2d
  dmaDefaultConf.DescriptorSkipLength = 0x0U;
 800299e:	2300      	movs	r3, #0
 80029a0:	633b      	str	r3, [r7, #48]	@ 0x30
  dmaDefaultConf.DMAArbitration = ETH_DMAARBITRATION_ROUNDROBIN_RXTX_1_1;
 80029a2:	2300      	movs	r3, #0
 80029a4:	60bb      	str	r3, [r7, #8]

  /* DMA default configuration */
  ETH_SetDMAConfig(heth, &dmaDefaultConf);
 80029a6:	f107 0308 	add.w	r3, r7, #8
 80029aa:	4619      	mov	r1, r3
 80029ac:	6878      	ldr	r0, [r7, #4]
 80029ae:	f7ff ff05 	bl	80027bc <ETH_SetDMAConfig>
}
 80029b2:	bf00      	nop
 80029b4:	3798      	adds	r7, #152	@ 0x98
 80029b6:	46bd      	mov	sp, r7
 80029b8:	bd80      	pop	{r7, pc}
	...

080029bc <ETH_MACAddressConfig>:
  *             @arg ETH_MAC_Address3: MAC Address3
  * @param  Addr Pointer to MAC address buffer data (6 bytes)
  * @retval HAL status
  */
static void ETH_MACAddressConfig(ETH_HandleTypeDef *heth, uint32_t MacAddr, uint8_t *Addr)
{
 80029bc:	b480      	push	{r7}
 80029be:	b087      	sub	sp, #28
 80029c0:	af00      	add	r7, sp, #0
 80029c2:	60f8      	str	r0, [r7, #12]
 80029c4:	60b9      	str	r1, [r7, #8]
 80029c6:	607a      	str	r2, [r7, #4]

  /* Prevent unused argument(s) compilation warning */
  UNUSED(heth);

  /* Calculate the selected MAC address high register */
  tmpreg1 = ((uint32_t)Addr[5U] << 8U) | (uint32_t)Addr[4U];
 80029c8:	687b      	ldr	r3, [r7, #4]
 80029ca:	3305      	adds	r3, #5
 80029cc:	781b      	ldrb	r3, [r3, #0]
 80029ce:	021b      	lsls	r3, r3, #8
 80029d0:	687a      	ldr	r2, [r7, #4]
 80029d2:	3204      	adds	r2, #4
 80029d4:	7812      	ldrb	r2, [r2, #0]
 80029d6:	4313      	orrs	r3, r2
 80029d8:	617b      	str	r3, [r7, #20]
  /* Load the selected MAC address high register */
  (*(__IO uint32_t *)((uint32_t)(ETH_MAC_ADDR_HBASE + MacAddr))) = tmpreg1;
 80029da:	68ba      	ldr	r2, [r7, #8]
 80029dc:	4b11      	ldr	r3, [pc, #68]	@ (8002a24 <ETH_MACAddressConfig+0x68>)
 80029de:	4413      	add	r3, r2
 80029e0:	461a      	mov	r2, r3
 80029e2:	697b      	ldr	r3, [r7, #20]
 80029e4:	6013      	str	r3, [r2, #0]
  /* Calculate the selected MAC address low register */
  tmpreg1 = ((uint32_t)Addr[3U] << 24U) | ((uint32_t)Addr[2U] << 16U) | ((uint32_t)Addr[1U] << 8U) | Addr[0U];
 80029e6:	687b      	ldr	r3, [r7, #4]
 80029e8:	3303      	adds	r3, #3
 80029ea:	781b      	ldrb	r3, [r3, #0]
 80029ec:	061a      	lsls	r2, r3, #24
 80029ee:	687b      	ldr	r3, [r7, #4]
 80029f0:	3302      	adds	r3, #2
 80029f2:	781b      	ldrb	r3, [r3, #0]
 80029f4:	041b      	lsls	r3, r3, #16
 80029f6:	431a      	orrs	r2, r3
 80029f8:	687b      	ldr	r3, [r7, #4]
 80029fa:	3301      	adds	r3, #1
 80029fc:	781b      	ldrb	r3, [r3, #0]
 80029fe:	021b      	lsls	r3, r3, #8
 8002a00:	4313      	orrs	r3, r2
 8002a02:	687a      	ldr	r2, [r7, #4]
 8002a04:	7812      	ldrb	r2, [r2, #0]
 8002a06:	4313      	orrs	r3, r2
 8002a08:	617b      	str	r3, [r7, #20]

  /* Load the selected MAC address low register */
  (*(__IO uint32_t *)((uint32_t)(ETH_MAC_ADDR_LBASE + MacAddr))) = tmpreg1;
 8002a0a:	68ba      	ldr	r2, [r7, #8]
 8002a0c:	4b06      	ldr	r3, [pc, #24]	@ (8002a28 <ETH_MACAddressConfig+0x6c>)
 8002a0e:	4413      	add	r3, r2
 8002a10:	461a      	mov	r2, r3
 8002a12:	697b      	ldr	r3, [r7, #20]
 8002a14:	6013      	str	r3, [r2, #0]
}
 8002a16:	bf00      	nop
 8002a18:	371c      	adds	r7, #28
 8002a1a:	46bd      	mov	sp, r7
 8002a1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a20:	4770      	bx	lr
 8002a22:	bf00      	nop
 8002a24:	40028040 	.word	0x40028040
 8002a28:	40028044 	.word	0x40028044

08002a2c <ETH_DMATxDescListInit>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
static void ETH_DMATxDescListInit(ETH_HandleTypeDef *heth)
{
 8002a2c:	b480      	push	{r7}
 8002a2e:	b085      	sub	sp, #20
 8002a30:	af00      	add	r7, sp, #0
 8002a32:	6078      	str	r0, [r7, #4]
  ETH_DMADescTypeDef *dmatxdesc;
  uint32_t i;

  /* Fill each DMATxDesc descriptor with the right values */
  for (i = 0; i < (uint32_t)ETH_TX_DESC_CNT; i++)
 8002a34:	2300      	movs	r3, #0
 8002a36:	60fb      	str	r3, [r7, #12]
 8002a38:	e03e      	b.n	8002ab8 <ETH_DMATxDescListInit+0x8c>
  {
    dmatxdesc = heth->Init.TxDesc + i;
 8002a3a:	687b      	ldr	r3, [r7, #4]
 8002a3c:	68d9      	ldr	r1, [r3, #12]
 8002a3e:	68fa      	ldr	r2, [r7, #12]
 8002a40:	4613      	mov	r3, r2
 8002a42:	009b      	lsls	r3, r3, #2
 8002a44:	4413      	add	r3, r2
 8002a46:	00db      	lsls	r3, r3, #3
 8002a48:	440b      	add	r3, r1
 8002a4a:	60bb      	str	r3, [r7, #8]

    WRITE_REG(dmatxdesc->DESC0, 0x0U);
 8002a4c:	68bb      	ldr	r3, [r7, #8]
 8002a4e:	2200      	movs	r2, #0
 8002a50:	601a      	str	r2, [r3, #0]
    WRITE_REG(dmatxdesc->DESC1, 0x0U);
 8002a52:	68bb      	ldr	r3, [r7, #8]
 8002a54:	2200      	movs	r2, #0
 8002a56:	605a      	str	r2, [r3, #4]
    WRITE_REG(dmatxdesc->DESC2, 0x0U);
 8002a58:	68bb      	ldr	r3, [r7, #8]
 8002a5a:	2200      	movs	r2, #0
 8002a5c:	609a      	str	r2, [r3, #8]
    WRITE_REG(dmatxdesc->DESC3, 0x0U);
 8002a5e:	68bb      	ldr	r3, [r7, #8]
 8002a60:	2200      	movs	r2, #0
 8002a62:	60da      	str	r2, [r3, #12]

    WRITE_REG(heth->TxDescList.TxDesc[i], (uint32_t)dmatxdesc);
 8002a64:	68b9      	ldr	r1, [r7, #8]
 8002a66:	687b      	ldr	r3, [r7, #4]
 8002a68:	68fa      	ldr	r2, [r7, #12]
 8002a6a:	3206      	adds	r2, #6
 8002a6c:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

    /* Set Second Address Chained bit */
    SET_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_TCH);
 8002a70:	68bb      	ldr	r3, [r7, #8]
 8002a72:	681b      	ldr	r3, [r3, #0]
 8002a74:	f443 1280 	orr.w	r2, r3, #1048576	@ 0x100000
 8002a78:	68bb      	ldr	r3, [r7, #8]
 8002a7a:	601a      	str	r2, [r3, #0]

    if (i < ((uint32_t)ETH_TX_DESC_CNT - 1U))
 8002a7c:	68fb      	ldr	r3, [r7, #12]
 8002a7e:	2b02      	cmp	r3, #2
 8002a80:	d80c      	bhi.n	8002a9c <ETH_DMATxDescListInit+0x70>
    {
      WRITE_REG(dmatxdesc->DESC3, (uint32_t)(heth->Init.TxDesc + i + 1U));
 8002a82:	687b      	ldr	r3, [r7, #4]
 8002a84:	68d9      	ldr	r1, [r3, #12]
 8002a86:	68fb      	ldr	r3, [r7, #12]
 8002a88:	1c5a      	adds	r2, r3, #1
 8002a8a:	4613      	mov	r3, r2
 8002a8c:	009b      	lsls	r3, r3, #2
 8002a8e:	4413      	add	r3, r2
 8002a90:	00db      	lsls	r3, r3, #3
 8002a92:	440b      	add	r3, r1
 8002a94:	461a      	mov	r2, r3
 8002a96:	68bb      	ldr	r3, [r7, #8]
 8002a98:	60da      	str	r2, [r3, #12]
 8002a9a:	e004      	b.n	8002aa6 <ETH_DMATxDescListInit+0x7a>
    }
    else
    {
      WRITE_REG(dmatxdesc->DESC3, (uint32_t)(heth->Init.TxDesc));
 8002a9c:	687b      	ldr	r3, [r7, #4]
 8002a9e:	68db      	ldr	r3, [r3, #12]
 8002aa0:	461a      	mov	r2, r3
 8002aa2:	68bb      	ldr	r3, [r7, #8]
 8002aa4:	60da      	str	r2, [r3, #12]
    }

    /* Set the DMA Tx descriptors checksum insertion */
    SET_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_CHECKSUMTCPUDPICMPFULL);
 8002aa6:	68bb      	ldr	r3, [r7, #8]
 8002aa8:	681b      	ldr	r3, [r3, #0]
 8002aaa:	f443 0240 	orr.w	r2, r3, #12582912	@ 0xc00000
 8002aae:	68bb      	ldr	r3, [r7, #8]
 8002ab0:	601a      	str	r2, [r3, #0]
  for (i = 0; i < (uint32_t)ETH_TX_DESC_CNT; i++)
 8002ab2:	68fb      	ldr	r3, [r7, #12]
 8002ab4:	3301      	adds	r3, #1
 8002ab6:	60fb      	str	r3, [r7, #12]
 8002ab8:	68fb      	ldr	r3, [r7, #12]
 8002aba:	2b03      	cmp	r3, #3
 8002abc:	d9bd      	bls.n	8002a3a <ETH_DMATxDescListInit+0xe>
  }

  heth->TxDescList.CurTxDesc = 0;
 8002abe:	687b      	ldr	r3, [r7, #4]
 8002ac0:	2200      	movs	r2, #0
 8002ac2:	629a      	str	r2, [r3, #40]	@ 0x28

  /* Set Transmit Descriptor List Address */
  WRITE_REG(heth->Instance->DMATDLAR, (uint32_t) heth->Init.TxDesc);
 8002ac4:	687b      	ldr	r3, [r7, #4]
 8002ac6:	68da      	ldr	r2, [r3, #12]
 8002ac8:	687b      	ldr	r3, [r7, #4]
 8002aca:	681b      	ldr	r3, [r3, #0]
 8002acc:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8002ad0:	611a      	str	r2, [r3, #16]
}
 8002ad2:	bf00      	nop
 8002ad4:	3714      	adds	r7, #20
 8002ad6:	46bd      	mov	sp, r7
 8002ad8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002adc:	4770      	bx	lr

08002ade <ETH_DMARxDescListInit>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
static void ETH_DMARxDescListInit(ETH_HandleTypeDef *heth)
{
 8002ade:	b480      	push	{r7}
 8002ae0:	b085      	sub	sp, #20
 8002ae2:	af00      	add	r7, sp, #0
 8002ae4:	6078      	str	r0, [r7, #4]
  ETH_DMADescTypeDef *dmarxdesc;
  uint32_t i;

  for (i = 0; i < (uint32_t)ETH_RX_DESC_CNT; i++)
 8002ae6:	2300      	movs	r3, #0
 8002ae8:	60fb      	str	r3, [r7, #12]
 8002aea:	e048      	b.n	8002b7e <ETH_DMARxDescListInit+0xa0>
  {
    dmarxdesc =  heth->Init.RxDesc + i;
 8002aec:	687b      	ldr	r3, [r7, #4]
 8002aee:	6919      	ldr	r1, [r3, #16]
 8002af0:	68fa      	ldr	r2, [r7, #12]
 8002af2:	4613      	mov	r3, r2
 8002af4:	009b      	lsls	r3, r3, #2
 8002af6:	4413      	add	r3, r2
 8002af8:	00db      	lsls	r3, r3, #3
 8002afa:	440b      	add	r3, r1
 8002afc:	60bb      	str	r3, [r7, #8]

    WRITE_REG(dmarxdesc->DESC0, 0x0U);
 8002afe:	68bb      	ldr	r3, [r7, #8]
 8002b00:	2200      	movs	r2, #0
 8002b02:	601a      	str	r2, [r3, #0]
    WRITE_REG(dmarxdesc->DESC1, 0x0U);
 8002b04:	68bb      	ldr	r3, [r7, #8]
 8002b06:	2200      	movs	r2, #0
 8002b08:	605a      	str	r2, [r3, #4]
    WRITE_REG(dmarxdesc->DESC2, 0x0U);
 8002b0a:	68bb      	ldr	r3, [r7, #8]
 8002b0c:	2200      	movs	r2, #0
 8002b0e:	609a      	str	r2, [r3, #8]
    WRITE_REG(dmarxdesc->DESC3, 0x0U);
 8002b10:	68bb      	ldr	r3, [r7, #8]
 8002b12:	2200      	movs	r2, #0
 8002b14:	60da      	str	r2, [r3, #12]
    WRITE_REG(dmarxdesc->BackupAddr0, 0x0U);
 8002b16:	68bb      	ldr	r3, [r7, #8]
 8002b18:	2200      	movs	r2, #0
 8002b1a:	621a      	str	r2, [r3, #32]
    WRITE_REG(dmarxdesc->BackupAddr1, 0x0U);
 8002b1c:	68bb      	ldr	r3, [r7, #8]
 8002b1e:	2200      	movs	r2, #0
 8002b20:	625a      	str	r2, [r3, #36]	@ 0x24

    /* Set Own bit of the Rx descriptor Status */
    dmarxdesc->DESC0 = ETH_DMARXDESC_OWN;
 8002b22:	68bb      	ldr	r3, [r7, #8]
 8002b24:	f04f 4200 	mov.w	r2, #2147483648	@ 0x80000000
 8002b28:	601a      	str	r2, [r3, #0]

    /* Set Buffer1 size and Second Address Chained bit */
    dmarxdesc->DESC1 = heth->Init.RxBuffLen | ETH_DMARXDESC_RCH;
 8002b2a:	687b      	ldr	r3, [r7, #4]
 8002b2c:	695b      	ldr	r3, [r3, #20]
 8002b2e:	f443 4280 	orr.w	r2, r3, #16384	@ 0x4000
 8002b32:	68bb      	ldr	r3, [r7, #8]
 8002b34:	605a      	str	r2, [r3, #4]

    /* Enable Ethernet DMA Rx Descriptor interrupt */
    dmarxdesc->DESC1 &= ~ETH_DMARXDESC_DIC;
 8002b36:	68bb      	ldr	r3, [r7, #8]
 8002b38:	685b      	ldr	r3, [r3, #4]
 8002b3a:	f023 4200 	bic.w	r2, r3, #2147483648	@ 0x80000000
 8002b3e:	68bb      	ldr	r3, [r7, #8]
 8002b40:	605a      	str	r2, [r3, #4]
    /* Set Rx descritors addresses */
    WRITE_REG(heth->RxDescList.RxDesc[i], (uint32_t)dmarxdesc);
 8002b42:	68b9      	ldr	r1, [r7, #8]
 8002b44:	687b      	ldr	r3, [r7, #4]
 8002b46:	68fa      	ldr	r2, [r7, #12]
 8002b48:	3212      	adds	r2, #18
 8002b4a:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

    if (i < ((uint32_t)ETH_RX_DESC_CNT - 1U))
 8002b4e:	68fb      	ldr	r3, [r7, #12]
 8002b50:	2b02      	cmp	r3, #2
 8002b52:	d80c      	bhi.n	8002b6e <ETH_DMARxDescListInit+0x90>
    {
      WRITE_REG(dmarxdesc->DESC3, (uint32_t)(heth->Init.RxDesc + i + 1U));
 8002b54:	687b      	ldr	r3, [r7, #4]
 8002b56:	6919      	ldr	r1, [r3, #16]
 8002b58:	68fb      	ldr	r3, [r7, #12]
 8002b5a:	1c5a      	adds	r2, r3, #1
 8002b5c:	4613      	mov	r3, r2
 8002b5e:	009b      	lsls	r3, r3, #2
 8002b60:	4413      	add	r3, r2
 8002b62:	00db      	lsls	r3, r3, #3
 8002b64:	440b      	add	r3, r1
 8002b66:	461a      	mov	r2, r3
 8002b68:	68bb      	ldr	r3, [r7, #8]
 8002b6a:	60da      	str	r2, [r3, #12]
 8002b6c:	e004      	b.n	8002b78 <ETH_DMARxDescListInit+0x9a>
    }
    else
    {
      WRITE_REG(dmarxdesc->DESC3, (uint32_t)(heth->Init.RxDesc));
 8002b6e:	687b      	ldr	r3, [r7, #4]
 8002b70:	691b      	ldr	r3, [r3, #16]
 8002b72:	461a      	mov	r2, r3
 8002b74:	68bb      	ldr	r3, [r7, #8]
 8002b76:	60da      	str	r2, [r3, #12]
  for (i = 0; i < (uint32_t)ETH_RX_DESC_CNT; i++)
 8002b78:	68fb      	ldr	r3, [r7, #12]
 8002b7a:	3301      	adds	r3, #1
 8002b7c:	60fb      	str	r3, [r7, #12]
 8002b7e:	68fb      	ldr	r3, [r7, #12]
 8002b80:	2b03      	cmp	r3, #3
 8002b82:	d9b3      	bls.n	8002aec <ETH_DMARxDescListInit+0xe>
    }
  }

  WRITE_REG(heth->RxDescList.RxDescIdx, 0U);
 8002b84:	687b      	ldr	r3, [r7, #4]
 8002b86:	2200      	movs	r2, #0
 8002b88:	65da      	str	r2, [r3, #92]	@ 0x5c
  WRITE_REG(heth->RxDescList.RxDescCnt, 0U);
 8002b8a:	687b      	ldr	r3, [r7, #4]
 8002b8c:	2200      	movs	r2, #0
 8002b8e:	661a      	str	r2, [r3, #96]	@ 0x60
  WRITE_REG(heth->RxDescList.RxBuildDescIdx, 0U);
 8002b90:	687b      	ldr	r3, [r7, #4]
 8002b92:	2200      	movs	r2, #0
 8002b94:	669a      	str	r2, [r3, #104]	@ 0x68
  WRITE_REG(heth->RxDescList.RxBuildDescCnt, 0U);
 8002b96:	687b      	ldr	r3, [r7, #4]
 8002b98:	2200      	movs	r2, #0
 8002b9a:	66da      	str	r2, [r3, #108]	@ 0x6c
  WRITE_REG(heth->RxDescList.ItMode, 0U);
 8002b9c:	687b      	ldr	r3, [r7, #4]
 8002b9e:	2200      	movs	r2, #0
 8002ba0:	659a      	str	r2, [r3, #88]	@ 0x58

  /* Set Receive Descriptor List Address */
  WRITE_REG(heth->Instance->DMARDLAR, (uint32_t) heth->Init.RxDesc);
 8002ba2:	687b      	ldr	r3, [r7, #4]
 8002ba4:	691a      	ldr	r2, [r3, #16]
 8002ba6:	687b      	ldr	r3, [r7, #4]
 8002ba8:	681b      	ldr	r3, [r3, #0]
 8002baa:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8002bae:	60da      	str	r2, [r3, #12]
}
 8002bb0:	bf00      	nop
 8002bb2:	3714      	adds	r7, #20
 8002bb4:	46bd      	mov	sp, r7
 8002bb6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002bba:	4770      	bx	lr

08002bbc <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8002bbc:	b480      	push	{r7}
 8002bbe:	b089      	sub	sp, #36	@ 0x24
 8002bc0:	af00      	add	r7, sp, #0
 8002bc2:	6078      	str	r0, [r7, #4]
 8002bc4:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00;
 8002bc6:	2300      	movs	r3, #0
 8002bc8:	61fb      	str	r3, [r7, #28]
  uint32_t ioposition = 0x00;
 8002bca:	2300      	movs	r3, #0
 8002bcc:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00;
 8002bce:	2300      	movs	r3, #0
 8002bd0:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00;
 8002bd2:	2300      	movs	r3, #0
 8002bd4:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for (position = 0; position < GPIO_NUMBER; position++)
 8002bd6:	2300      	movs	r3, #0
 8002bd8:	61fb      	str	r3, [r7, #28]
 8002bda:	e175      	b.n	8002ec8 <HAL_GPIO_Init+0x30c>
  {
    /* Get the IO position */
    ioposition = ((uint32_t)0x01) << position;
 8002bdc:	2201      	movs	r2, #1
 8002bde:	69fb      	ldr	r3, [r7, #28]
 8002be0:	fa02 f303 	lsl.w	r3, r2, r3
 8002be4:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8002be6:	683b      	ldr	r3, [r7, #0]
 8002be8:	681b      	ldr	r3, [r3, #0]
 8002bea:	697a      	ldr	r2, [r7, #20]
 8002bec:	4013      	ands	r3, r2
 8002bee:	613b      	str	r3, [r7, #16]

    if (iocurrent == ioposition)
 8002bf0:	693a      	ldr	r2, [r7, #16]
 8002bf2:	697b      	ldr	r3, [r7, #20]
 8002bf4:	429a      	cmp	r2, r3
 8002bf6:	f040 8164 	bne.w	8002ec2 <HAL_GPIO_Init+0x306>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8002bfa:	683b      	ldr	r3, [r7, #0]
 8002bfc:	685b      	ldr	r3, [r3, #4]
 8002bfe:	f003 0303 	and.w	r3, r3, #3
 8002c02:	2b01      	cmp	r3, #1
 8002c04:	d005      	beq.n	8002c12 <HAL_GPIO_Init+0x56>
 8002c06:	683b      	ldr	r3, [r7, #0]
 8002c08:	685b      	ldr	r3, [r3, #4]
 8002c0a:	f003 0303 	and.w	r3, r3, #3
 8002c0e:	2b02      	cmp	r3, #2
 8002c10:	d130      	bne.n	8002c74 <HAL_GPIO_Init+0xb8>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8002c12:	687b      	ldr	r3, [r7, #4]
 8002c14:	689b      	ldr	r3, [r3, #8]
 8002c16:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2));
 8002c18:	69fb      	ldr	r3, [r7, #28]
 8002c1a:	005b      	lsls	r3, r3, #1
 8002c1c:	2203      	movs	r2, #3
 8002c1e:	fa02 f303 	lsl.w	r3, r2, r3
 8002c22:	43db      	mvns	r3, r3
 8002c24:	69ba      	ldr	r2, [r7, #24]
 8002c26:	4013      	ands	r3, r2
 8002c28:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2));
 8002c2a:	683b      	ldr	r3, [r7, #0]
 8002c2c:	68da      	ldr	r2, [r3, #12]
 8002c2e:	69fb      	ldr	r3, [r7, #28]
 8002c30:	005b      	lsls	r3, r3, #1
 8002c32:	fa02 f303 	lsl.w	r3, r2, r3
 8002c36:	69ba      	ldr	r2, [r7, #24]
 8002c38:	4313      	orrs	r3, r2
 8002c3a:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8002c3c:	687b      	ldr	r3, [r7, #4]
 8002c3e:	69ba      	ldr	r2, [r7, #24]
 8002c40:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8002c42:	687b      	ldr	r3, [r7, #4]
 8002c44:	685b      	ldr	r3, [r3, #4]
 8002c46:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8002c48:	2201      	movs	r2, #1
 8002c4a:	69fb      	ldr	r3, [r7, #28]
 8002c4c:	fa02 f303 	lsl.w	r3, r2, r3
 8002c50:	43db      	mvns	r3, r3
 8002c52:	69ba      	ldr	r2, [r7, #24]
 8002c54:	4013      	ands	r3, r2
 8002c56:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8002c58:	683b      	ldr	r3, [r7, #0]
 8002c5a:	685b      	ldr	r3, [r3, #4]
 8002c5c:	091b      	lsrs	r3, r3, #4
 8002c5e:	f003 0201 	and.w	r2, r3, #1
 8002c62:	69fb      	ldr	r3, [r7, #28]
 8002c64:	fa02 f303 	lsl.w	r3, r2, r3
 8002c68:	69ba      	ldr	r2, [r7, #24]
 8002c6a:	4313      	orrs	r3, r2
 8002c6c:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8002c6e:	687b      	ldr	r3, [r7, #4]
 8002c70:	69ba      	ldr	r2, [r7, #24]
 8002c72:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8002c74:	683b      	ldr	r3, [r7, #0]
 8002c76:	685b      	ldr	r3, [r3, #4]
 8002c78:	f003 0303 	and.w	r3, r3, #3
 8002c7c:	2b03      	cmp	r3, #3
 8002c7e:	d017      	beq.n	8002cb0 <HAL_GPIO_Init+0xf4>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8002c80:	687b      	ldr	r3, [r7, #4]
 8002c82:	68db      	ldr	r3, [r3, #12]
 8002c84:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2));
 8002c86:	69fb      	ldr	r3, [r7, #28]
 8002c88:	005b      	lsls	r3, r3, #1
 8002c8a:	2203      	movs	r2, #3
 8002c8c:	fa02 f303 	lsl.w	r3, r2, r3
 8002c90:	43db      	mvns	r3, r3
 8002c92:	69ba      	ldr	r2, [r7, #24]
 8002c94:	4013      	ands	r3, r2
 8002c96:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2));
 8002c98:	683b      	ldr	r3, [r7, #0]
 8002c9a:	689a      	ldr	r2, [r3, #8]
 8002c9c:	69fb      	ldr	r3, [r7, #28]
 8002c9e:	005b      	lsls	r3, r3, #1
 8002ca0:	fa02 f303 	lsl.w	r3, r2, r3
 8002ca4:	69ba      	ldr	r2, [r7, #24]
 8002ca6:	4313      	orrs	r3, r2
 8002ca8:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8002caa:	687b      	ldr	r3, [r7, #4]
 8002cac:	69ba      	ldr	r2, [r7, #24]
 8002cae:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8002cb0:	683b      	ldr	r3, [r7, #0]
 8002cb2:	685b      	ldr	r3, [r3, #4]
 8002cb4:	f003 0303 	and.w	r3, r3, #3
 8002cb8:	2b02      	cmp	r3, #2
 8002cba:	d123      	bne.n	8002d04 <HAL_GPIO_Init+0x148>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3];
 8002cbc:	69fb      	ldr	r3, [r7, #28]
 8002cbe:	08da      	lsrs	r2, r3, #3
 8002cc0:	687b      	ldr	r3, [r7, #4]
 8002cc2:	3208      	adds	r2, #8
 8002cc4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002cc8:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)0xF << ((uint32_t)(position & (uint32_t)0x07) * 4)) ;
 8002cca:	69fb      	ldr	r3, [r7, #28]
 8002ccc:	f003 0307 	and.w	r3, r3, #7
 8002cd0:	009b      	lsls	r3, r3, #2
 8002cd2:	220f      	movs	r2, #15
 8002cd4:	fa02 f303 	lsl.w	r3, r2, r3
 8002cd8:	43db      	mvns	r3, r3
 8002cda:	69ba      	ldr	r2, [r7, #24]
 8002cdc:	4013      	ands	r3, r2
 8002cde:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & (uint32_t)0x07) * 4));
 8002ce0:	683b      	ldr	r3, [r7, #0]
 8002ce2:	691a      	ldr	r2, [r3, #16]
 8002ce4:	69fb      	ldr	r3, [r7, #28]
 8002ce6:	f003 0307 	and.w	r3, r3, #7
 8002cea:	009b      	lsls	r3, r3, #2
 8002cec:	fa02 f303 	lsl.w	r3, r2, r3
 8002cf0:	69ba      	ldr	r2, [r7, #24]
 8002cf2:	4313      	orrs	r3, r2
 8002cf4:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3] = temp;
 8002cf6:	69fb      	ldr	r3, [r7, #28]
 8002cf8:	08da      	lsrs	r2, r3, #3
 8002cfa:	687b      	ldr	r3, [r7, #4]
 8002cfc:	3208      	adds	r2, #8
 8002cfe:	69b9      	ldr	r1, [r7, #24]
 8002d00:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8002d04:	687b      	ldr	r3, [r7, #4]
 8002d06:	681b      	ldr	r3, [r3, #0]
 8002d08:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2));
 8002d0a:	69fb      	ldr	r3, [r7, #28]
 8002d0c:	005b      	lsls	r3, r3, #1
 8002d0e:	2203      	movs	r2, #3
 8002d10:	fa02 f303 	lsl.w	r3, r2, r3
 8002d14:	43db      	mvns	r3, r3
 8002d16:	69ba      	ldr	r2, [r7, #24]
 8002d18:	4013      	ands	r3, r2
 8002d1a:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2));
 8002d1c:	683b      	ldr	r3, [r7, #0]
 8002d1e:	685b      	ldr	r3, [r3, #4]
 8002d20:	f003 0203 	and.w	r2, r3, #3
 8002d24:	69fb      	ldr	r3, [r7, #28]
 8002d26:	005b      	lsls	r3, r3, #1
 8002d28:	fa02 f303 	lsl.w	r3, r2, r3
 8002d2c:	69ba      	ldr	r2, [r7, #24]
 8002d2e:	4313      	orrs	r3, r2
 8002d30:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8002d32:	687b      	ldr	r3, [r7, #4]
 8002d34:	69ba      	ldr	r2, [r7, #24]
 8002d36:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8002d38:	683b      	ldr	r3, [r7, #0]
 8002d3a:	685b      	ldr	r3, [r3, #4]
 8002d3c:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8002d40:	2b00      	cmp	r3, #0
 8002d42:	f000 80be 	beq.w	8002ec2 <HAL_GPIO_Init+0x306>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002d46:	4b66      	ldr	r3, [pc, #408]	@ (8002ee0 <HAL_GPIO_Init+0x324>)
 8002d48:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002d4a:	4a65      	ldr	r2, [pc, #404]	@ (8002ee0 <HAL_GPIO_Init+0x324>)
 8002d4c:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8002d50:	6453      	str	r3, [r2, #68]	@ 0x44
 8002d52:	4b63      	ldr	r3, [pc, #396]	@ (8002ee0 <HAL_GPIO_Init+0x324>)
 8002d54:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002d56:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8002d5a:	60fb      	str	r3, [r7, #12]
 8002d5c:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2];
 8002d5e:	4a61      	ldr	r2, [pc, #388]	@ (8002ee4 <HAL_GPIO_Init+0x328>)
 8002d60:	69fb      	ldr	r3, [r7, #28]
 8002d62:	089b      	lsrs	r3, r3, #2
 8002d64:	3302      	adds	r3, #2
 8002d66:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002d6a:	61bb      	str	r3, [r7, #24]
        temp &= ~(((uint32_t)0x0F) << (4 * (position & 0x03)));
 8002d6c:	69fb      	ldr	r3, [r7, #28]
 8002d6e:	f003 0303 	and.w	r3, r3, #3
 8002d72:	009b      	lsls	r3, r3, #2
 8002d74:	220f      	movs	r2, #15
 8002d76:	fa02 f303 	lsl.w	r3, r2, r3
 8002d7a:	43db      	mvns	r3, r3
 8002d7c:	69ba      	ldr	r2, [r7, #24]
 8002d7e:	4013      	ands	r3, r2
 8002d80:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03)));
 8002d82:	687b      	ldr	r3, [r7, #4]
 8002d84:	4a58      	ldr	r2, [pc, #352]	@ (8002ee8 <HAL_GPIO_Init+0x32c>)
 8002d86:	4293      	cmp	r3, r2
 8002d88:	d037      	beq.n	8002dfa <HAL_GPIO_Init+0x23e>
 8002d8a:	687b      	ldr	r3, [r7, #4]
 8002d8c:	4a57      	ldr	r2, [pc, #348]	@ (8002eec <HAL_GPIO_Init+0x330>)
 8002d8e:	4293      	cmp	r3, r2
 8002d90:	d031      	beq.n	8002df6 <HAL_GPIO_Init+0x23a>
 8002d92:	687b      	ldr	r3, [r7, #4]
 8002d94:	4a56      	ldr	r2, [pc, #344]	@ (8002ef0 <HAL_GPIO_Init+0x334>)
 8002d96:	4293      	cmp	r3, r2
 8002d98:	d02b      	beq.n	8002df2 <HAL_GPIO_Init+0x236>
 8002d9a:	687b      	ldr	r3, [r7, #4]
 8002d9c:	4a55      	ldr	r2, [pc, #340]	@ (8002ef4 <HAL_GPIO_Init+0x338>)
 8002d9e:	4293      	cmp	r3, r2
 8002da0:	d025      	beq.n	8002dee <HAL_GPIO_Init+0x232>
 8002da2:	687b      	ldr	r3, [r7, #4]
 8002da4:	4a54      	ldr	r2, [pc, #336]	@ (8002ef8 <HAL_GPIO_Init+0x33c>)
 8002da6:	4293      	cmp	r3, r2
 8002da8:	d01f      	beq.n	8002dea <HAL_GPIO_Init+0x22e>
 8002daa:	687b      	ldr	r3, [r7, #4]
 8002dac:	4a53      	ldr	r2, [pc, #332]	@ (8002efc <HAL_GPIO_Init+0x340>)
 8002dae:	4293      	cmp	r3, r2
 8002db0:	d019      	beq.n	8002de6 <HAL_GPIO_Init+0x22a>
 8002db2:	687b      	ldr	r3, [r7, #4]
 8002db4:	4a52      	ldr	r2, [pc, #328]	@ (8002f00 <HAL_GPIO_Init+0x344>)
 8002db6:	4293      	cmp	r3, r2
 8002db8:	d013      	beq.n	8002de2 <HAL_GPIO_Init+0x226>
 8002dba:	687b      	ldr	r3, [r7, #4]
 8002dbc:	4a51      	ldr	r2, [pc, #324]	@ (8002f04 <HAL_GPIO_Init+0x348>)
 8002dbe:	4293      	cmp	r3, r2
 8002dc0:	d00d      	beq.n	8002dde <HAL_GPIO_Init+0x222>
 8002dc2:	687b      	ldr	r3, [r7, #4]
 8002dc4:	4a50      	ldr	r2, [pc, #320]	@ (8002f08 <HAL_GPIO_Init+0x34c>)
 8002dc6:	4293      	cmp	r3, r2
 8002dc8:	d007      	beq.n	8002dda <HAL_GPIO_Init+0x21e>
 8002dca:	687b      	ldr	r3, [r7, #4]
 8002dcc:	4a4f      	ldr	r2, [pc, #316]	@ (8002f0c <HAL_GPIO_Init+0x350>)
 8002dce:	4293      	cmp	r3, r2
 8002dd0:	d101      	bne.n	8002dd6 <HAL_GPIO_Init+0x21a>
 8002dd2:	2309      	movs	r3, #9
 8002dd4:	e012      	b.n	8002dfc <HAL_GPIO_Init+0x240>
 8002dd6:	230a      	movs	r3, #10
 8002dd8:	e010      	b.n	8002dfc <HAL_GPIO_Init+0x240>
 8002dda:	2308      	movs	r3, #8
 8002ddc:	e00e      	b.n	8002dfc <HAL_GPIO_Init+0x240>
 8002dde:	2307      	movs	r3, #7
 8002de0:	e00c      	b.n	8002dfc <HAL_GPIO_Init+0x240>
 8002de2:	2306      	movs	r3, #6
 8002de4:	e00a      	b.n	8002dfc <HAL_GPIO_Init+0x240>
 8002de6:	2305      	movs	r3, #5
 8002de8:	e008      	b.n	8002dfc <HAL_GPIO_Init+0x240>
 8002dea:	2304      	movs	r3, #4
 8002dec:	e006      	b.n	8002dfc <HAL_GPIO_Init+0x240>
 8002dee:	2303      	movs	r3, #3
 8002df0:	e004      	b.n	8002dfc <HAL_GPIO_Init+0x240>
 8002df2:	2302      	movs	r3, #2
 8002df4:	e002      	b.n	8002dfc <HAL_GPIO_Init+0x240>
 8002df6:	2301      	movs	r3, #1
 8002df8:	e000      	b.n	8002dfc <HAL_GPIO_Init+0x240>
 8002dfa:	2300      	movs	r3, #0
 8002dfc:	69fa      	ldr	r2, [r7, #28]
 8002dfe:	f002 0203 	and.w	r2, r2, #3
 8002e02:	0092      	lsls	r2, r2, #2
 8002e04:	4093      	lsls	r3, r2
 8002e06:	69ba      	ldr	r2, [r7, #24]
 8002e08:	4313      	orrs	r3, r2
 8002e0a:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2] = temp;
 8002e0c:	4935      	ldr	r1, [pc, #212]	@ (8002ee4 <HAL_GPIO_Init+0x328>)
 8002e0e:	69fb      	ldr	r3, [r7, #28]
 8002e10:	089b      	lsrs	r3, r3, #2
 8002e12:	3302      	adds	r3, #2
 8002e14:	69ba      	ldr	r2, [r7, #24]
 8002e16:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8002e1a:	4b3d      	ldr	r3, [pc, #244]	@ (8002f10 <HAL_GPIO_Init+0x354>)
 8002e1c:	689b      	ldr	r3, [r3, #8]
 8002e1e:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002e20:	693b      	ldr	r3, [r7, #16]
 8002e22:	43db      	mvns	r3, r3
 8002e24:	69ba      	ldr	r2, [r7, #24]
 8002e26:	4013      	ands	r3, r2
 8002e28:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8002e2a:	683b      	ldr	r3, [r7, #0]
 8002e2c:	685b      	ldr	r3, [r3, #4]
 8002e2e:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8002e32:	2b00      	cmp	r3, #0
 8002e34:	d003      	beq.n	8002e3e <HAL_GPIO_Init+0x282>
        {
          temp |= iocurrent;
 8002e36:	69ba      	ldr	r2, [r7, #24]
 8002e38:	693b      	ldr	r3, [r7, #16]
 8002e3a:	4313      	orrs	r3, r2
 8002e3c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8002e3e:	4a34      	ldr	r2, [pc, #208]	@ (8002f10 <HAL_GPIO_Init+0x354>)
 8002e40:	69bb      	ldr	r3, [r7, #24]
 8002e42:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8002e44:	4b32      	ldr	r3, [pc, #200]	@ (8002f10 <HAL_GPIO_Init+0x354>)
 8002e46:	68db      	ldr	r3, [r3, #12]
 8002e48:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002e4a:	693b      	ldr	r3, [r7, #16]
 8002e4c:	43db      	mvns	r3, r3
 8002e4e:	69ba      	ldr	r2, [r7, #24]
 8002e50:	4013      	ands	r3, r2
 8002e52:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8002e54:	683b      	ldr	r3, [r7, #0]
 8002e56:	685b      	ldr	r3, [r3, #4]
 8002e58:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8002e5c:	2b00      	cmp	r3, #0
 8002e5e:	d003      	beq.n	8002e68 <HAL_GPIO_Init+0x2ac>
        {
          temp |= iocurrent;
 8002e60:	69ba      	ldr	r2, [r7, #24]
 8002e62:	693b      	ldr	r3, [r7, #16]
 8002e64:	4313      	orrs	r3, r2
 8002e66:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8002e68:	4a29      	ldr	r2, [pc, #164]	@ (8002f10 <HAL_GPIO_Init+0x354>)
 8002e6a:	69bb      	ldr	r3, [r7, #24]
 8002e6c:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8002e6e:	4b28      	ldr	r3, [pc, #160]	@ (8002f10 <HAL_GPIO_Init+0x354>)
 8002e70:	685b      	ldr	r3, [r3, #4]
 8002e72:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002e74:	693b      	ldr	r3, [r7, #16]
 8002e76:	43db      	mvns	r3, r3
 8002e78:	69ba      	ldr	r2, [r7, #24]
 8002e7a:	4013      	ands	r3, r2
 8002e7c:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8002e7e:	683b      	ldr	r3, [r7, #0]
 8002e80:	685b      	ldr	r3, [r3, #4]
 8002e82:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002e86:	2b00      	cmp	r3, #0
 8002e88:	d003      	beq.n	8002e92 <HAL_GPIO_Init+0x2d6>
        {
          temp |= iocurrent;
 8002e8a:	69ba      	ldr	r2, [r7, #24]
 8002e8c:	693b      	ldr	r3, [r7, #16]
 8002e8e:	4313      	orrs	r3, r2
 8002e90:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8002e92:	4a1f      	ldr	r2, [pc, #124]	@ (8002f10 <HAL_GPIO_Init+0x354>)
 8002e94:	69bb      	ldr	r3, [r7, #24]
 8002e96:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8002e98:	4b1d      	ldr	r3, [pc, #116]	@ (8002f10 <HAL_GPIO_Init+0x354>)
 8002e9a:	681b      	ldr	r3, [r3, #0]
 8002e9c:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002e9e:	693b      	ldr	r3, [r7, #16]
 8002ea0:	43db      	mvns	r3, r3
 8002ea2:	69ba      	ldr	r2, [r7, #24]
 8002ea4:	4013      	ands	r3, r2
 8002ea6:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8002ea8:	683b      	ldr	r3, [r7, #0]
 8002eaa:	685b      	ldr	r3, [r3, #4]
 8002eac:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8002eb0:	2b00      	cmp	r3, #0
 8002eb2:	d003      	beq.n	8002ebc <HAL_GPIO_Init+0x300>
        {
          temp |= iocurrent;
 8002eb4:	69ba      	ldr	r2, [r7, #24]
 8002eb6:	693b      	ldr	r3, [r7, #16]
 8002eb8:	4313      	orrs	r3, r2
 8002eba:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8002ebc:	4a14      	ldr	r2, [pc, #80]	@ (8002f10 <HAL_GPIO_Init+0x354>)
 8002ebe:	69bb      	ldr	r3, [r7, #24]
 8002ec0:	6013      	str	r3, [r2, #0]
  for (position = 0; position < GPIO_NUMBER; position++)
 8002ec2:	69fb      	ldr	r3, [r7, #28]
 8002ec4:	3301      	adds	r3, #1
 8002ec6:	61fb      	str	r3, [r7, #28]
 8002ec8:	69fb      	ldr	r3, [r7, #28]
 8002eca:	2b0f      	cmp	r3, #15
 8002ecc:	f67f ae86 	bls.w	8002bdc <HAL_GPIO_Init+0x20>
      }
    }
  }
}
 8002ed0:	bf00      	nop
 8002ed2:	bf00      	nop
 8002ed4:	3724      	adds	r7, #36	@ 0x24
 8002ed6:	46bd      	mov	sp, r7
 8002ed8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002edc:	4770      	bx	lr
 8002ede:	bf00      	nop
 8002ee0:	40023800 	.word	0x40023800
 8002ee4:	40013800 	.word	0x40013800
 8002ee8:	40020000 	.word	0x40020000
 8002eec:	40020400 	.word	0x40020400
 8002ef0:	40020800 	.word	0x40020800
 8002ef4:	40020c00 	.word	0x40020c00
 8002ef8:	40021000 	.word	0x40021000
 8002efc:	40021400 	.word	0x40021400
 8002f00:	40021800 	.word	0x40021800
 8002f04:	40021c00 	.word	0x40021c00
 8002f08:	40022000 	.word	0x40022000
 8002f0c:	40022400 	.word	0x40022400
 8002f10:	40013c00 	.word	0x40013c00

08002f14 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be any combination of GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8002f14:	b480      	push	{r7}
 8002f16:	b085      	sub	sp, #20
 8002f18:	af00      	add	r7, sp, #0
 8002f1a:	6078      	str	r0, [r7, #4]
 8002f1c:	460b      	mov	r3, r1
 8002f1e:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8002f20:	687b      	ldr	r3, [r7, #4]
 8002f22:	691a      	ldr	r2, [r3, #16]
 8002f24:	887b      	ldrh	r3, [r7, #2]
 8002f26:	4013      	ands	r3, r2
 8002f28:	2b00      	cmp	r3, #0
 8002f2a:	d002      	beq.n	8002f32 <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8002f2c:	2301      	movs	r3, #1
 8002f2e:	73fb      	strb	r3, [r7, #15]
 8002f30:	e001      	b.n	8002f36 <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8002f32:	2300      	movs	r3, #0
 8002f34:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8002f36:	7bfb      	ldrb	r3, [r7, #15]
}
 8002f38:	4618      	mov	r0, r3
 8002f3a:	3714      	adds	r7, #20
 8002f3c:	46bd      	mov	sp, r7
 8002f3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f42:	4770      	bx	lr

08002f44 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8002f44:	b480      	push	{r7}
 8002f46:	b083      	sub	sp, #12
 8002f48:	af00      	add	r7, sp, #0
 8002f4a:	6078      	str	r0, [r7, #4]
 8002f4c:	460b      	mov	r3, r1
 8002f4e:	807b      	strh	r3, [r7, #2]
 8002f50:	4613      	mov	r3, r2
 8002f52:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8002f54:	787b      	ldrb	r3, [r7, #1]
 8002f56:	2b00      	cmp	r3, #0
 8002f58:	d003      	beq.n	8002f62 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8002f5a:	887a      	ldrh	r2, [r7, #2]
 8002f5c:	687b      	ldr	r3, [r7, #4]
 8002f5e:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16;
  }
}
 8002f60:	e003      	b.n	8002f6a <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16;
 8002f62:	887b      	ldrh	r3, [r7, #2]
 8002f64:	041a      	lsls	r2, r3, #16
 8002f66:	687b      	ldr	r3, [r7, #4]
 8002f68:	619a      	str	r2, [r3, #24]
}
 8002f6a:	bf00      	nop
 8002f6c:	370c      	adds	r7, #12
 8002f6e:	46bd      	mov	sp, r7
 8002f70:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f74:	4770      	bx	lr
	...

08002f78 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8002f78:	b580      	push	{r7, lr}
 8002f7a:	b082      	sub	sp, #8
 8002f7c:	af00      	add	r7, sp, #0
 8002f7e:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8002f80:	687b      	ldr	r3, [r7, #4]
 8002f82:	2b00      	cmp	r3, #0
 8002f84:	d101      	bne.n	8002f8a <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8002f86:	2301      	movs	r3, #1
 8002f88:	e08b      	b.n	80030a2 <HAL_I2C_Init+0x12a>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8002f8a:	687b      	ldr	r3, [r7, #4]
 8002f8c:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8002f90:	b2db      	uxtb	r3, r3
 8002f92:	2b00      	cmp	r3, #0
 8002f94:	d106      	bne.n	8002fa4 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8002f96:	687b      	ldr	r3, [r7, #4]
 8002f98:	2200      	movs	r2, #0
 8002f9a:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 8002f9e:	6878      	ldr	r0, [r7, #4]
 8002fa0:	f7fe fce0 	bl	8001964 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8002fa4:	687b      	ldr	r3, [r7, #4]
 8002fa6:	2224      	movs	r2, #36	@ 0x24
 8002fa8:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8002fac:	687b      	ldr	r3, [r7, #4]
 8002fae:	681b      	ldr	r3, [r3, #0]
 8002fb0:	681a      	ldr	r2, [r3, #0]
 8002fb2:	687b      	ldr	r3, [r7, #4]
 8002fb4:	681b      	ldr	r3, [r3, #0]
 8002fb6:	f022 0201 	bic.w	r2, r2, #1
 8002fba:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 8002fbc:	687b      	ldr	r3, [r7, #4]
 8002fbe:	685a      	ldr	r2, [r3, #4]
 8002fc0:	687b      	ldr	r3, [r7, #4]
 8002fc2:	681b      	ldr	r3, [r3, #0]
 8002fc4:	f022 6270 	bic.w	r2, r2, #251658240	@ 0xf000000
 8002fc8:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 8002fca:	687b      	ldr	r3, [r7, #4]
 8002fcc:	681b      	ldr	r3, [r3, #0]
 8002fce:	689a      	ldr	r2, [r3, #8]
 8002fd0:	687b      	ldr	r3, [r7, #4]
 8002fd2:	681b      	ldr	r3, [r3, #0]
 8002fd4:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 8002fd8:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8002fda:	687b      	ldr	r3, [r7, #4]
 8002fdc:	68db      	ldr	r3, [r3, #12]
 8002fde:	2b01      	cmp	r3, #1
 8002fe0:	d107      	bne.n	8002ff2 <HAL_I2C_Init+0x7a>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 8002fe2:	687b      	ldr	r3, [r7, #4]
 8002fe4:	689a      	ldr	r2, [r3, #8]
 8002fe6:	687b      	ldr	r3, [r7, #4]
 8002fe8:	681b      	ldr	r3, [r3, #0]
 8002fea:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 8002fee:	609a      	str	r2, [r3, #8]
 8002ff0:	e006      	b.n	8003000 <HAL_I2C_Init+0x88>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 8002ff2:	687b      	ldr	r3, [r7, #4]
 8002ff4:	689a      	ldr	r2, [r3, #8]
 8002ff6:	687b      	ldr	r3, [r7, #4]
 8002ff8:	681b      	ldr	r3, [r3, #0]
 8002ffa:	f442 4204 	orr.w	r2, r2, #33792	@ 0x8400
 8002ffe:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 8003000:	687b      	ldr	r3, [r7, #4]
 8003002:	68db      	ldr	r3, [r3, #12]
 8003004:	2b02      	cmp	r3, #2
 8003006:	d108      	bne.n	800301a <HAL_I2C_Init+0xa2>
  {
    SET_BIT(hi2c->Instance->CR2, I2C_CR2_ADD10);
 8003008:	687b      	ldr	r3, [r7, #4]
 800300a:	681b      	ldr	r3, [r3, #0]
 800300c:	685a      	ldr	r2, [r3, #4]
 800300e:	687b      	ldr	r3, [r7, #4]
 8003010:	681b      	ldr	r3, [r3, #0]
 8003012:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8003016:	605a      	str	r2, [r3, #4]
 8003018:	e007      	b.n	800302a <HAL_I2C_Init+0xb2>
  }
  else
  {
    /* Clear the I2C ADD10 bit */
    CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_ADD10);
 800301a:	687b      	ldr	r3, [r7, #4]
 800301c:	681b      	ldr	r3, [r3, #0]
 800301e:	685a      	ldr	r2, [r3, #4]
 8003020:	687b      	ldr	r3, [r7, #4]
 8003022:	681b      	ldr	r3, [r3, #0]
 8003024:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8003028:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 800302a:	687b      	ldr	r3, [r7, #4]
 800302c:	681b      	ldr	r3, [r3, #0]
 800302e:	6859      	ldr	r1, [r3, #4]
 8003030:	687b      	ldr	r3, [r7, #4]
 8003032:	681a      	ldr	r2, [r3, #0]
 8003034:	4b1d      	ldr	r3, [pc, #116]	@ (80030ac <HAL_I2C_Init+0x134>)
 8003036:	430b      	orrs	r3, r1
 8003038:	6053      	str	r3, [r2, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 800303a:	687b      	ldr	r3, [r7, #4]
 800303c:	681b      	ldr	r3, [r3, #0]
 800303e:	68da      	ldr	r2, [r3, #12]
 8003040:	687b      	ldr	r3, [r7, #4]
 8003042:	681b      	ldr	r3, [r3, #0]
 8003044:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 8003048:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 800304a:	687b      	ldr	r3, [r7, #4]
 800304c:	691a      	ldr	r2, [r3, #16]
 800304e:	687b      	ldr	r3, [r7, #4]
 8003050:	695b      	ldr	r3, [r3, #20]
 8003052:	ea42 0103 	orr.w	r1, r2, r3
                          (hi2c->Init.OwnAddress2Masks << 8));
 8003056:	687b      	ldr	r3, [r7, #4]
 8003058:	699b      	ldr	r3, [r3, #24]
 800305a:	021a      	lsls	r2, r3, #8
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 800305c:	687b      	ldr	r3, [r7, #4]
 800305e:	681b      	ldr	r3, [r3, #0]
 8003060:	430a      	orrs	r2, r1
 8003062:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 8003064:	687b      	ldr	r3, [r7, #4]
 8003066:	69d9      	ldr	r1, [r3, #28]
 8003068:	687b      	ldr	r3, [r7, #4]
 800306a:	6a1a      	ldr	r2, [r3, #32]
 800306c:	687b      	ldr	r3, [r7, #4]
 800306e:	681b      	ldr	r3, [r3, #0]
 8003070:	430a      	orrs	r2, r1
 8003072:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8003074:	687b      	ldr	r3, [r7, #4]
 8003076:	681b      	ldr	r3, [r3, #0]
 8003078:	681a      	ldr	r2, [r3, #0]
 800307a:	687b      	ldr	r3, [r7, #4]
 800307c:	681b      	ldr	r3, [r3, #0]
 800307e:	f042 0201 	orr.w	r2, r2, #1
 8003082:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8003084:	687b      	ldr	r3, [r7, #4]
 8003086:	2200      	movs	r2, #0
 8003088:	645a      	str	r2, [r3, #68]	@ 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 800308a:	687b      	ldr	r3, [r7, #4]
 800308c:	2220      	movs	r2, #32
 800308e:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 8003092:	687b      	ldr	r3, [r7, #4]
 8003094:	2200      	movs	r2, #0
 8003096:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8003098:	687b      	ldr	r3, [r7, #4]
 800309a:	2200      	movs	r2, #0
 800309c:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

  return HAL_OK;
 80030a0:	2300      	movs	r3, #0
}
 80030a2:	4618      	mov	r0, r3
 80030a4:	3708      	adds	r7, #8
 80030a6:	46bd      	mov	sp, r7
 80030a8:	bd80      	pop	{r7, pc}
 80030aa:	bf00      	nop
 80030ac:	02008000 	.word	0x02008000

080030b0 <HAL_I2C_Mem_Write>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress,
                                    uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80030b0:	b580      	push	{r7, lr}
 80030b2:	b088      	sub	sp, #32
 80030b4:	af02      	add	r7, sp, #8
 80030b6:	60f8      	str	r0, [r7, #12]
 80030b8:	4608      	mov	r0, r1
 80030ba:	4611      	mov	r1, r2
 80030bc:	461a      	mov	r2, r3
 80030be:	4603      	mov	r3, r0
 80030c0:	817b      	strh	r3, [r7, #10]
 80030c2:	460b      	mov	r3, r1
 80030c4:	813b      	strh	r3, [r7, #8]
 80030c6:	4613      	mov	r3, r2
 80030c8:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80030ca:	68fb      	ldr	r3, [r7, #12]
 80030cc:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80030d0:	b2db      	uxtb	r3, r3
 80030d2:	2b20      	cmp	r3, #32
 80030d4:	f040 80f9 	bne.w	80032ca <HAL_I2C_Mem_Write+0x21a>
  {
    if ((pData == NULL) || (Size == 0U))
 80030d8:	6a3b      	ldr	r3, [r7, #32]
 80030da:	2b00      	cmp	r3, #0
 80030dc:	d002      	beq.n	80030e4 <HAL_I2C_Mem_Write+0x34>
 80030de:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 80030e0:	2b00      	cmp	r3, #0
 80030e2:	d105      	bne.n	80030f0 <HAL_I2C_Mem_Write+0x40>
    {
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
 80030e4:	68fb      	ldr	r3, [r7, #12]
 80030e6:	f44f 7200 	mov.w	r2, #512	@ 0x200
 80030ea:	645a      	str	r2, [r3, #68]	@ 0x44
      return  HAL_ERROR;
 80030ec:	2301      	movs	r3, #1
 80030ee:	e0ed      	b.n	80032cc <HAL_I2C_Mem_Write+0x21c>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 80030f0:	68fb      	ldr	r3, [r7, #12]
 80030f2:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 80030f6:	2b01      	cmp	r3, #1
 80030f8:	d101      	bne.n	80030fe <HAL_I2C_Mem_Write+0x4e>
 80030fa:	2302      	movs	r3, #2
 80030fc:	e0e6      	b.n	80032cc <HAL_I2C_Mem_Write+0x21c>
 80030fe:	68fb      	ldr	r3, [r7, #12]
 8003100:	2201      	movs	r2, #1
 8003102:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 8003106:	f7fe ff19 	bl	8001f3c <HAL_GetTick>
 800310a:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 800310c:	697b      	ldr	r3, [r7, #20]
 800310e:	9300      	str	r3, [sp, #0]
 8003110:	2319      	movs	r3, #25
 8003112:	2201      	movs	r2, #1
 8003114:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 8003118:	68f8      	ldr	r0, [r7, #12]
 800311a:	f000 f955 	bl	80033c8 <I2C_WaitOnFlagUntilTimeout>
 800311e:	4603      	mov	r3, r0
 8003120:	2b00      	cmp	r3, #0
 8003122:	d001      	beq.n	8003128 <HAL_I2C_Mem_Write+0x78>
    {
      return HAL_ERROR;
 8003124:	2301      	movs	r3, #1
 8003126:	e0d1      	b.n	80032cc <HAL_I2C_Mem_Write+0x21c>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 8003128:	68fb      	ldr	r3, [r7, #12]
 800312a:	2221      	movs	r2, #33	@ 0x21
 800312c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8003130:	68fb      	ldr	r3, [r7, #12]
 8003132:	2240      	movs	r2, #64	@ 0x40
 8003134:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8003138:	68fb      	ldr	r3, [r7, #12]
 800313a:	2200      	movs	r2, #0
 800313c:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 800313e:	68fb      	ldr	r3, [r7, #12]
 8003140:	6a3a      	ldr	r2, [r7, #32]
 8003142:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount = Size;
 8003144:	68fb      	ldr	r3, [r7, #12]
 8003146:	8cba      	ldrh	r2, [r7, #36]	@ 0x24
 8003148:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferISR   = NULL;
 800314a:	68fb      	ldr	r3, [r7, #12]
 800314c:	2200      	movs	r2, #0
 800314e:	635a      	str	r2, [r3, #52]	@ 0x34

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8003150:	88f8      	ldrh	r0, [r7, #6]
 8003152:	893a      	ldrh	r2, [r7, #8]
 8003154:	8979      	ldrh	r1, [r7, #10]
 8003156:	697b      	ldr	r3, [r7, #20]
 8003158:	9301      	str	r3, [sp, #4]
 800315a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800315c:	9300      	str	r3, [sp, #0]
 800315e:	4603      	mov	r3, r0
 8003160:	68f8      	ldr	r0, [r7, #12]
 8003162:	f000 f8b9 	bl	80032d8 <I2C_RequestMemoryWrite>
 8003166:	4603      	mov	r3, r0
 8003168:	2b00      	cmp	r3, #0
 800316a:	d005      	beq.n	8003178 <HAL_I2C_Mem_Write+0xc8>
    {
      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 800316c:	68fb      	ldr	r3, [r7, #12]
 800316e:	2200      	movs	r2, #0
 8003170:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
      return HAL_ERROR;
 8003174:	2301      	movs	r3, #1
 8003176:	e0a9      	b.n	80032cc <HAL_I2C_Mem_Write+0x21c>
    }

    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8003178:	68fb      	ldr	r3, [r7, #12]
 800317a:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800317c:	b29b      	uxth	r3, r3
 800317e:	2bff      	cmp	r3, #255	@ 0xff
 8003180:	d90e      	bls.n	80031a0 <HAL_I2C_Mem_Write+0xf0>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8003182:	68fb      	ldr	r3, [r7, #12]
 8003184:	22ff      	movs	r2, #255	@ 0xff
 8003186:	851a      	strh	r2, [r3, #40]	@ 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE, I2C_NO_STARTSTOP);
 8003188:	68fb      	ldr	r3, [r7, #12]
 800318a:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800318c:	b2da      	uxtb	r2, r3
 800318e:	8979      	ldrh	r1, [r7, #10]
 8003190:	2300      	movs	r3, #0
 8003192:	9300      	str	r3, [sp, #0]
 8003194:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 8003198:	68f8      	ldr	r0, [r7, #12]
 800319a:	f000 fad9 	bl	8003750 <I2C_TransferConfig>
 800319e:	e00f      	b.n	80031c0 <HAL_I2C_Mem_Write+0x110>
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 80031a0:	68fb      	ldr	r3, [r7, #12]
 80031a2:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80031a4:	b29a      	uxth	r2, r3
 80031a6:	68fb      	ldr	r3, [r7, #12]
 80031a8:	851a      	strh	r2, [r3, #40]	@ 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
 80031aa:	68fb      	ldr	r3, [r7, #12]
 80031ac:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80031ae:	b2da      	uxtb	r2, r3
 80031b0:	8979      	ldrh	r1, [r7, #10]
 80031b2:	2300      	movs	r3, #0
 80031b4:	9300      	str	r3, [sp, #0]
 80031b6:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 80031ba:	68f8      	ldr	r0, [r7, #12]
 80031bc:	f000 fac8 	bl	8003750 <I2C_TransferConfig>
    }

    do
    {
      /* Wait until TXIS flag is set */
      if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80031c0:	697a      	ldr	r2, [r7, #20]
 80031c2:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 80031c4:	68f8      	ldr	r0, [r7, #12]
 80031c6:	f000 f958 	bl	800347a <I2C_WaitOnTXISFlagUntilTimeout>
 80031ca:	4603      	mov	r3, r0
 80031cc:	2b00      	cmp	r3, #0
 80031ce:	d001      	beq.n	80031d4 <HAL_I2C_Mem_Write+0x124>
      {
        return HAL_ERROR;
 80031d0:	2301      	movs	r3, #1
 80031d2:	e07b      	b.n	80032cc <HAL_I2C_Mem_Write+0x21c>
      }

      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 80031d4:	68fb      	ldr	r3, [r7, #12]
 80031d6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80031d8:	781a      	ldrb	r2, [r3, #0]
 80031da:	68fb      	ldr	r3, [r7, #12]
 80031dc:	681b      	ldr	r3, [r3, #0]
 80031de:	629a      	str	r2, [r3, #40]	@ 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 80031e0:	68fb      	ldr	r3, [r7, #12]
 80031e2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80031e4:	1c5a      	adds	r2, r3, #1
 80031e6:	68fb      	ldr	r3, [r7, #12]
 80031e8:	625a      	str	r2, [r3, #36]	@ 0x24

      hi2c->XferCount--;
 80031ea:	68fb      	ldr	r3, [r7, #12]
 80031ec:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80031ee:	b29b      	uxth	r3, r3
 80031f0:	3b01      	subs	r3, #1
 80031f2:	b29a      	uxth	r2, r3
 80031f4:	68fb      	ldr	r3, [r7, #12]
 80031f6:	855a      	strh	r2, [r3, #42]	@ 0x2a
      hi2c->XferSize--;
 80031f8:	68fb      	ldr	r3, [r7, #12]
 80031fa:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80031fc:	3b01      	subs	r3, #1
 80031fe:	b29a      	uxth	r2, r3
 8003200:	68fb      	ldr	r3, [r7, #12]
 8003202:	851a      	strh	r2, [r3, #40]	@ 0x28

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8003204:	68fb      	ldr	r3, [r7, #12]
 8003206:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003208:	b29b      	uxth	r3, r3
 800320a:	2b00      	cmp	r3, #0
 800320c:	d034      	beq.n	8003278 <HAL_I2C_Mem_Write+0x1c8>
 800320e:	68fb      	ldr	r3, [r7, #12]
 8003210:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003212:	2b00      	cmp	r3, #0
 8003214:	d130      	bne.n	8003278 <HAL_I2C_Mem_Write+0x1c8>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 8003216:	697b      	ldr	r3, [r7, #20]
 8003218:	9300      	str	r3, [sp, #0]
 800321a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800321c:	2200      	movs	r2, #0
 800321e:	2180      	movs	r1, #128	@ 0x80
 8003220:	68f8      	ldr	r0, [r7, #12]
 8003222:	f000 f8d1 	bl	80033c8 <I2C_WaitOnFlagUntilTimeout>
 8003226:	4603      	mov	r3, r0
 8003228:	2b00      	cmp	r3, #0
 800322a:	d001      	beq.n	8003230 <HAL_I2C_Mem_Write+0x180>
        {
          return HAL_ERROR;
 800322c:	2301      	movs	r3, #1
 800322e:	e04d      	b.n	80032cc <HAL_I2C_Mem_Write+0x21c>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8003230:	68fb      	ldr	r3, [r7, #12]
 8003232:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003234:	b29b      	uxth	r3, r3
 8003236:	2bff      	cmp	r3, #255	@ 0xff
 8003238:	d90e      	bls.n	8003258 <HAL_I2C_Mem_Write+0x1a8>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 800323a:	68fb      	ldr	r3, [r7, #12]
 800323c:	22ff      	movs	r2, #255	@ 0xff
 800323e:	851a      	strh	r2, [r3, #40]	@ 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 8003240:	68fb      	ldr	r3, [r7, #12]
 8003242:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003244:	b2da      	uxtb	r2, r3
 8003246:	8979      	ldrh	r1, [r7, #10]
 8003248:	2300      	movs	r3, #0
 800324a:	9300      	str	r3, [sp, #0]
 800324c:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 8003250:	68f8      	ldr	r0, [r7, #12]
 8003252:	f000 fa7d 	bl	8003750 <I2C_TransferConfig>
 8003256:	e00f      	b.n	8003278 <HAL_I2C_Mem_Write+0x1c8>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 8003258:	68fb      	ldr	r3, [r7, #12]
 800325a:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800325c:	b29a      	uxth	r2, r3
 800325e:	68fb      	ldr	r3, [r7, #12]
 8003260:	851a      	strh	r2, [r3, #40]	@ 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8003262:	68fb      	ldr	r3, [r7, #12]
 8003264:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003266:	b2da      	uxtb	r2, r3
 8003268:	8979      	ldrh	r1, [r7, #10]
 800326a:	2300      	movs	r3, #0
 800326c:	9300      	str	r3, [sp, #0]
 800326e:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8003272:	68f8      	ldr	r0, [r7, #12]
 8003274:	f000 fa6c 	bl	8003750 <I2C_TransferConfig>
                             I2C_NO_STARTSTOP);
        }
      }

    } while (hi2c->XferCount > 0U);
 8003278:	68fb      	ldr	r3, [r7, #12]
 800327a:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800327c:	b29b      	uxth	r3, r3
 800327e:	2b00      	cmp	r3, #0
 8003280:	d19e      	bne.n	80031c0 <HAL_I2C_Mem_Write+0x110>

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is reset */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8003282:	697a      	ldr	r2, [r7, #20]
 8003284:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8003286:	68f8      	ldr	r0, [r7, #12]
 8003288:	f000 f93e 	bl	8003508 <I2C_WaitOnSTOPFlagUntilTimeout>
 800328c:	4603      	mov	r3, r0
 800328e:	2b00      	cmp	r3, #0
 8003290:	d001      	beq.n	8003296 <HAL_I2C_Mem_Write+0x1e6>
    {
      return HAL_ERROR;
 8003292:	2301      	movs	r3, #1
 8003294:	e01a      	b.n	80032cc <HAL_I2C_Mem_Write+0x21c>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8003296:	68fb      	ldr	r3, [r7, #12]
 8003298:	681b      	ldr	r3, [r3, #0]
 800329a:	2220      	movs	r2, #32
 800329c:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 800329e:	68fb      	ldr	r3, [r7, #12]
 80032a0:	681b      	ldr	r3, [r3, #0]
 80032a2:	6859      	ldr	r1, [r3, #4]
 80032a4:	68fb      	ldr	r3, [r7, #12]
 80032a6:	681a      	ldr	r2, [r3, #0]
 80032a8:	4b0a      	ldr	r3, [pc, #40]	@ (80032d4 <HAL_I2C_Mem_Write+0x224>)
 80032aa:	400b      	ands	r3, r1
 80032ac:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 80032ae:	68fb      	ldr	r3, [r7, #12]
 80032b0:	2220      	movs	r2, #32
 80032b2:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 80032b6:	68fb      	ldr	r3, [r7, #12]
 80032b8:	2200      	movs	r2, #0
 80032ba:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80032be:	68fb      	ldr	r3, [r7, #12]
 80032c0:	2200      	movs	r2, #0
 80032c2:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 80032c6:	2300      	movs	r3, #0
 80032c8:	e000      	b.n	80032cc <HAL_I2C_Mem_Write+0x21c>
  }
  else
  {
    return HAL_BUSY;
 80032ca:	2302      	movs	r3, #2
  }
}
 80032cc:	4618      	mov	r0, r3
 80032ce:	3718      	adds	r7, #24
 80032d0:	46bd      	mov	sp, r7
 80032d2:	bd80      	pop	{r7, pc}
 80032d4:	fe00e800 	.word	0xfe00e800

080032d8 <I2C_RequestMemoryWrite>:
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress,
                                                uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout,
                                                uint32_t Tickstart)
{
 80032d8:	b580      	push	{r7, lr}
 80032da:	b086      	sub	sp, #24
 80032dc:	af02      	add	r7, sp, #8
 80032de:	60f8      	str	r0, [r7, #12]
 80032e0:	4608      	mov	r0, r1
 80032e2:	4611      	mov	r1, r2
 80032e4:	461a      	mov	r2, r3
 80032e6:	4603      	mov	r3, r0
 80032e8:	817b      	strh	r3, [r7, #10]
 80032ea:	460b      	mov	r3, r1
 80032ec:	813b      	strh	r3, [r7, #8]
 80032ee:	4613      	mov	r3, r2
 80032f0:	80fb      	strh	r3, [r7, #6]
  I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_RELOAD_MODE, I2C_GENERATE_START_WRITE);
 80032f2:	88fb      	ldrh	r3, [r7, #6]
 80032f4:	b2da      	uxtb	r2, r3
 80032f6:	8979      	ldrh	r1, [r7, #10]
 80032f8:	4b20      	ldr	r3, [pc, #128]	@ (800337c <I2C_RequestMemoryWrite+0xa4>)
 80032fa:	9300      	str	r3, [sp, #0]
 80032fc:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 8003300:	68f8      	ldr	r0, [r7, #12]
 8003302:	f000 fa25 	bl	8003750 <I2C_TransferConfig>

  /* Wait until TXIS flag is set */
  if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8003306:	69fa      	ldr	r2, [r7, #28]
 8003308:	69b9      	ldr	r1, [r7, #24]
 800330a:	68f8      	ldr	r0, [r7, #12]
 800330c:	f000 f8b5 	bl	800347a <I2C_WaitOnTXISFlagUntilTimeout>
 8003310:	4603      	mov	r3, r0
 8003312:	2b00      	cmp	r3, #0
 8003314:	d001      	beq.n	800331a <I2C_RequestMemoryWrite+0x42>
  {
    return HAL_ERROR;
 8003316:	2301      	movs	r3, #1
 8003318:	e02c      	b.n	8003374 <I2C_RequestMemoryWrite+0x9c>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 800331a:	88fb      	ldrh	r3, [r7, #6]
 800331c:	2b01      	cmp	r3, #1
 800331e:	d105      	bne.n	800332c <I2C_RequestMemoryWrite+0x54>
  {
    /* Send Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8003320:	893b      	ldrh	r3, [r7, #8]
 8003322:	b2da      	uxtb	r2, r3
 8003324:	68fb      	ldr	r3, [r7, #12]
 8003326:	681b      	ldr	r3, [r3, #0]
 8003328:	629a      	str	r2, [r3, #40]	@ 0x28
 800332a:	e015      	b.n	8003358 <I2C_RequestMemoryWrite+0x80>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress);
 800332c:	893b      	ldrh	r3, [r7, #8]
 800332e:	0a1b      	lsrs	r3, r3, #8
 8003330:	b29b      	uxth	r3, r3
 8003332:	b2da      	uxtb	r2, r3
 8003334:	68fb      	ldr	r3, [r7, #12]
 8003336:	681b      	ldr	r3, [r3, #0]
 8003338:	629a      	str	r2, [r3, #40]	@ 0x28

    /* Wait until TXIS flag is set */
    if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800333a:	69fa      	ldr	r2, [r7, #28]
 800333c:	69b9      	ldr	r1, [r7, #24]
 800333e:	68f8      	ldr	r0, [r7, #12]
 8003340:	f000 f89b 	bl	800347a <I2C_WaitOnTXISFlagUntilTimeout>
 8003344:	4603      	mov	r3, r0
 8003346:	2b00      	cmp	r3, #0
 8003348:	d001      	beq.n	800334e <I2C_RequestMemoryWrite+0x76>
    {
      return HAL_ERROR;
 800334a:	2301      	movs	r3, #1
 800334c:	e012      	b.n	8003374 <I2C_RequestMemoryWrite+0x9c>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 800334e:	893b      	ldrh	r3, [r7, #8]
 8003350:	b2da      	uxtb	r2, r3
 8003352:	68fb      	ldr	r3, [r7, #12]
 8003354:	681b      	ldr	r3, [r3, #0]
 8003356:	629a      	str	r2, [r3, #40]	@ 0x28
  }

  /* Wait until TCR flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, Tickstart) != HAL_OK)
 8003358:	69fb      	ldr	r3, [r7, #28]
 800335a:	9300      	str	r3, [sp, #0]
 800335c:	69bb      	ldr	r3, [r7, #24]
 800335e:	2200      	movs	r2, #0
 8003360:	2180      	movs	r1, #128	@ 0x80
 8003362:	68f8      	ldr	r0, [r7, #12]
 8003364:	f000 f830 	bl	80033c8 <I2C_WaitOnFlagUntilTimeout>
 8003368:	4603      	mov	r3, r0
 800336a:	2b00      	cmp	r3, #0
 800336c:	d001      	beq.n	8003372 <I2C_RequestMemoryWrite+0x9a>
  {
    return HAL_ERROR;
 800336e:	2301      	movs	r3, #1
 8003370:	e000      	b.n	8003374 <I2C_RequestMemoryWrite+0x9c>
  }

  return HAL_OK;
 8003372:	2300      	movs	r3, #0
}
 8003374:	4618      	mov	r0, r3
 8003376:	3710      	adds	r7, #16
 8003378:	46bd      	mov	sp, r7
 800337a:	bd80      	pop	{r7, pc}
 800337c:	80002000 	.word	0x80002000

08003380 <I2C_Flush_TXDR>:
  * @brief  I2C Tx data register flush process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_Flush_TXDR(I2C_HandleTypeDef *hi2c)
{
 8003380:	b480      	push	{r7}
 8003382:	b083      	sub	sp, #12
 8003384:	af00      	add	r7, sp, #0
 8003386:	6078      	str	r0, [r7, #4]
  /* If a pending TXIS flag is set */
  /* Write a dummy data in TXDR to clear it */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) != RESET)
 8003388:	687b      	ldr	r3, [r7, #4]
 800338a:	681b      	ldr	r3, [r3, #0]
 800338c:	699b      	ldr	r3, [r3, #24]
 800338e:	f003 0302 	and.w	r3, r3, #2
 8003392:	2b02      	cmp	r3, #2
 8003394:	d103      	bne.n	800339e <I2C_Flush_TXDR+0x1e>
  {
    hi2c->Instance->TXDR = 0x00U;
 8003396:	687b      	ldr	r3, [r7, #4]
 8003398:	681b      	ldr	r3, [r3, #0]
 800339a:	2200      	movs	r2, #0
 800339c:	629a      	str	r2, [r3, #40]	@ 0x28
  }

  /* Flush TX register if not empty */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 800339e:	687b      	ldr	r3, [r7, #4]
 80033a0:	681b      	ldr	r3, [r3, #0]
 80033a2:	699b      	ldr	r3, [r3, #24]
 80033a4:	f003 0301 	and.w	r3, r3, #1
 80033a8:	2b01      	cmp	r3, #1
 80033aa:	d007      	beq.n	80033bc <I2C_Flush_TXDR+0x3c>
  {
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_TXE);
 80033ac:	687b      	ldr	r3, [r7, #4]
 80033ae:	681b      	ldr	r3, [r3, #0]
 80033b0:	699a      	ldr	r2, [r3, #24]
 80033b2:	687b      	ldr	r3, [r7, #4]
 80033b4:	681b      	ldr	r3, [r3, #0]
 80033b6:	f042 0201 	orr.w	r2, r2, #1
 80033ba:	619a      	str	r2, [r3, #24]
  }
}
 80033bc:	bf00      	nop
 80033be:	370c      	adds	r7, #12
 80033c0:	46bd      	mov	sp, r7
 80033c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80033c6:	4770      	bx	lr

080033c8 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status,
                                                    uint32_t Timeout, uint32_t Tickstart)
{
 80033c8:	b580      	push	{r7, lr}
 80033ca:	b084      	sub	sp, #16
 80033cc:	af00      	add	r7, sp, #0
 80033ce:	60f8      	str	r0, [r7, #12]
 80033d0:	60b9      	str	r1, [r7, #8]
 80033d2:	603b      	str	r3, [r7, #0]
 80033d4:	4613      	mov	r3, r2
 80033d6:	71fb      	strb	r3, [r7, #7]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 80033d8:	e03b      	b.n	8003452 <I2C_WaitOnFlagUntilTimeout+0x8a>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 80033da:	69ba      	ldr	r2, [r7, #24]
 80033dc:	6839      	ldr	r1, [r7, #0]
 80033de:	68f8      	ldr	r0, [r7, #12]
 80033e0:	f000 f8d6 	bl	8003590 <I2C_IsErrorOccurred>
 80033e4:	4603      	mov	r3, r0
 80033e6:	2b00      	cmp	r3, #0
 80033e8:	d001      	beq.n	80033ee <I2C_WaitOnFlagUntilTimeout+0x26>
    {
      return HAL_ERROR;
 80033ea:	2301      	movs	r3, #1
 80033ec:	e041      	b.n	8003472 <I2C_WaitOnFlagUntilTimeout+0xaa>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80033ee:	683b      	ldr	r3, [r7, #0]
 80033f0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80033f4:	d02d      	beq.n	8003452 <I2C_WaitOnFlagUntilTimeout+0x8a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80033f6:	f7fe fda1 	bl	8001f3c <HAL_GetTick>
 80033fa:	4602      	mov	r2, r0
 80033fc:	69bb      	ldr	r3, [r7, #24]
 80033fe:	1ad3      	subs	r3, r2, r3
 8003400:	683a      	ldr	r2, [r7, #0]
 8003402:	429a      	cmp	r2, r3
 8003404:	d302      	bcc.n	800340c <I2C_WaitOnFlagUntilTimeout+0x44>
 8003406:	683b      	ldr	r3, [r7, #0]
 8003408:	2b00      	cmp	r3, #0
 800340a:	d122      	bne.n	8003452 <I2C_WaitOnFlagUntilTimeout+0x8a>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == Status))
 800340c:	68fb      	ldr	r3, [r7, #12]
 800340e:	681b      	ldr	r3, [r3, #0]
 8003410:	699a      	ldr	r2, [r3, #24]
 8003412:	68bb      	ldr	r3, [r7, #8]
 8003414:	4013      	ands	r3, r2
 8003416:	68ba      	ldr	r2, [r7, #8]
 8003418:	429a      	cmp	r2, r3
 800341a:	bf0c      	ite	eq
 800341c:	2301      	moveq	r3, #1
 800341e:	2300      	movne	r3, #0
 8003420:	b2db      	uxtb	r3, r3
 8003422:	461a      	mov	r2, r3
 8003424:	79fb      	ldrb	r3, [r7, #7]
 8003426:	429a      	cmp	r2, r3
 8003428:	d113      	bne.n	8003452 <I2C_WaitOnFlagUntilTimeout+0x8a>
        {
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 800342a:	68fb      	ldr	r3, [r7, #12]
 800342c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800342e:	f043 0220 	orr.w	r2, r3, #32
 8003432:	68fb      	ldr	r3, [r7, #12]
 8003434:	645a      	str	r2, [r3, #68]	@ 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 8003436:	68fb      	ldr	r3, [r7, #12]
 8003438:	2220      	movs	r2, #32
 800343a:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
          hi2c->Mode = HAL_I2C_MODE_NONE;
 800343e:	68fb      	ldr	r3, [r7, #12]
 8003440:	2200      	movs	r2, #0
 8003442:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8003446:	68fb      	ldr	r3, [r7, #12]
 8003448:	2200      	movs	r2, #0
 800344a:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
          return HAL_ERROR;
 800344e:	2301      	movs	r3, #1
 8003450:	e00f      	b.n	8003472 <I2C_WaitOnFlagUntilTimeout+0xaa>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8003452:	68fb      	ldr	r3, [r7, #12]
 8003454:	681b      	ldr	r3, [r3, #0]
 8003456:	699a      	ldr	r2, [r3, #24]
 8003458:	68bb      	ldr	r3, [r7, #8]
 800345a:	4013      	ands	r3, r2
 800345c:	68ba      	ldr	r2, [r7, #8]
 800345e:	429a      	cmp	r2, r3
 8003460:	bf0c      	ite	eq
 8003462:	2301      	moveq	r3, #1
 8003464:	2300      	movne	r3, #0
 8003466:	b2db      	uxtb	r3, r3
 8003468:	461a      	mov	r2, r3
 800346a:	79fb      	ldrb	r3, [r7, #7]
 800346c:	429a      	cmp	r2, r3
 800346e:	d0b4      	beq.n	80033da <I2C_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8003470:	2300      	movs	r3, #0
}
 8003472:	4618      	mov	r0, r3
 8003474:	3710      	adds	r7, #16
 8003476:	46bd      	mov	sp, r7
 8003478:	bd80      	pop	{r7, pc}

0800347a <I2C_WaitOnTXISFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXISFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 800347a:	b580      	push	{r7, lr}
 800347c:	b084      	sub	sp, #16
 800347e:	af00      	add	r7, sp, #0
 8003480:	60f8      	str	r0, [r7, #12]
 8003482:	60b9      	str	r1, [r7, #8]
 8003484:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 8003486:	e033      	b.n	80034f0 <I2C_WaitOnTXISFlagUntilTimeout+0x76>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 8003488:	687a      	ldr	r2, [r7, #4]
 800348a:	68b9      	ldr	r1, [r7, #8]
 800348c:	68f8      	ldr	r0, [r7, #12]
 800348e:	f000 f87f 	bl	8003590 <I2C_IsErrorOccurred>
 8003492:	4603      	mov	r3, r0
 8003494:	2b00      	cmp	r3, #0
 8003496:	d001      	beq.n	800349c <I2C_WaitOnTXISFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 8003498:	2301      	movs	r3, #1
 800349a:	e031      	b.n	8003500 <I2C_WaitOnTXISFlagUntilTimeout+0x86>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800349c:	68bb      	ldr	r3, [r7, #8]
 800349e:	f1b3 3fff 	cmp.w	r3, #4294967295
 80034a2:	d025      	beq.n	80034f0 <I2C_WaitOnTXISFlagUntilTimeout+0x76>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80034a4:	f7fe fd4a 	bl	8001f3c <HAL_GetTick>
 80034a8:	4602      	mov	r2, r0
 80034aa:	687b      	ldr	r3, [r7, #4]
 80034ac:	1ad3      	subs	r3, r2, r3
 80034ae:	68ba      	ldr	r2, [r7, #8]
 80034b0:	429a      	cmp	r2, r3
 80034b2:	d302      	bcc.n	80034ba <I2C_WaitOnTXISFlagUntilTimeout+0x40>
 80034b4:	68bb      	ldr	r3, [r7, #8]
 80034b6:	2b00      	cmp	r3, #0
 80034b8:	d11a      	bne.n	80034f0 <I2C_WaitOnTXISFlagUntilTimeout+0x76>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET))
 80034ba:	68fb      	ldr	r3, [r7, #12]
 80034bc:	681b      	ldr	r3, [r3, #0]
 80034be:	699b      	ldr	r3, [r3, #24]
 80034c0:	f003 0302 	and.w	r3, r3, #2
 80034c4:	2b02      	cmp	r3, #2
 80034c6:	d013      	beq.n	80034f0 <I2C_WaitOnTXISFlagUntilTimeout+0x76>
        {
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 80034c8:	68fb      	ldr	r3, [r7, #12]
 80034ca:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80034cc:	f043 0220 	orr.w	r2, r3, #32
 80034d0:	68fb      	ldr	r3, [r7, #12]
 80034d2:	645a      	str	r2, [r3, #68]	@ 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 80034d4:	68fb      	ldr	r3, [r7, #12]
 80034d6:	2220      	movs	r2, #32
 80034d8:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
          hi2c->Mode = HAL_I2C_MODE_NONE;
 80034dc:	68fb      	ldr	r3, [r7, #12]
 80034de:	2200      	movs	r2, #0
 80034e0:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 80034e4:	68fb      	ldr	r3, [r7, #12]
 80034e6:	2200      	movs	r2, #0
 80034e8:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

          return HAL_ERROR;
 80034ec:	2301      	movs	r3, #1
 80034ee:	e007      	b.n	8003500 <I2C_WaitOnTXISFlagUntilTimeout+0x86>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 80034f0:	68fb      	ldr	r3, [r7, #12]
 80034f2:	681b      	ldr	r3, [r3, #0]
 80034f4:	699b      	ldr	r3, [r3, #24]
 80034f6:	f003 0302 	and.w	r3, r3, #2
 80034fa:	2b02      	cmp	r3, #2
 80034fc:	d1c4      	bne.n	8003488 <I2C_WaitOnTXISFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 80034fe:	2300      	movs	r3, #0
}
 8003500:	4618      	mov	r0, r3
 8003502:	3710      	adds	r7, #16
 8003504:	46bd      	mov	sp, r7
 8003506:	bd80      	pop	{r7, pc}

08003508 <I2C_WaitOnSTOPFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnSTOPFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 8003508:	b580      	push	{r7, lr}
 800350a:	b084      	sub	sp, #16
 800350c:	af00      	add	r7, sp, #0
 800350e:	60f8      	str	r0, [r7, #12]
 8003510:	60b9      	str	r1, [r7, #8]
 8003512:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8003514:	e02f      	b.n	8003576 <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 8003516:	687a      	ldr	r2, [r7, #4]
 8003518:	68b9      	ldr	r1, [r7, #8]
 800351a:	68f8      	ldr	r0, [r7, #12]
 800351c:	f000 f838 	bl	8003590 <I2C_IsErrorOccurred>
 8003520:	4603      	mov	r3, r0
 8003522:	2b00      	cmp	r3, #0
 8003524:	d001      	beq.n	800352a <I2C_WaitOnSTOPFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 8003526:	2301      	movs	r3, #1
 8003528:	e02d      	b.n	8003586 <I2C_WaitOnSTOPFlagUntilTimeout+0x7e>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800352a:	f7fe fd07 	bl	8001f3c <HAL_GetTick>
 800352e:	4602      	mov	r2, r0
 8003530:	687b      	ldr	r3, [r7, #4]
 8003532:	1ad3      	subs	r3, r2, r3
 8003534:	68ba      	ldr	r2, [r7, #8]
 8003536:	429a      	cmp	r2, r3
 8003538:	d302      	bcc.n	8003540 <I2C_WaitOnSTOPFlagUntilTimeout+0x38>
 800353a:	68bb      	ldr	r3, [r7, #8]
 800353c:	2b00      	cmp	r3, #0
 800353e:	d11a      	bne.n	8003576 <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
    {
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET))
 8003540:	68fb      	ldr	r3, [r7, #12]
 8003542:	681b      	ldr	r3, [r3, #0]
 8003544:	699b      	ldr	r3, [r3, #24]
 8003546:	f003 0320 	and.w	r3, r3, #32
 800354a:	2b20      	cmp	r3, #32
 800354c:	d013      	beq.n	8003576 <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 800354e:	68fb      	ldr	r3, [r7, #12]
 8003550:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003552:	f043 0220 	orr.w	r2, r3, #32
 8003556:	68fb      	ldr	r3, [r7, #12]
 8003558:	645a      	str	r2, [r3, #68]	@ 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 800355a:	68fb      	ldr	r3, [r7, #12]
 800355c:	2220      	movs	r2, #32
 800355e:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8003562:	68fb      	ldr	r3, [r7, #12]
 8003564:	2200      	movs	r2, #0
 8003566:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800356a:	68fb      	ldr	r3, [r7, #12]
 800356c:	2200      	movs	r2, #0
 800356e:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

        return HAL_ERROR;
 8003572:	2301      	movs	r3, #1
 8003574:	e007      	b.n	8003586 <I2C_WaitOnSTOPFlagUntilTimeout+0x7e>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8003576:	68fb      	ldr	r3, [r7, #12]
 8003578:	681b      	ldr	r3, [r3, #0]
 800357a:	699b      	ldr	r3, [r3, #24]
 800357c:	f003 0320 	and.w	r3, r3, #32
 8003580:	2b20      	cmp	r3, #32
 8003582:	d1c8      	bne.n	8003516 <I2C_WaitOnSTOPFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8003584:	2300      	movs	r3, #0
}
 8003586:	4618      	mov	r0, r3
 8003588:	3710      	adds	r7, #16
 800358a:	46bd      	mov	sp, r7
 800358c:	bd80      	pop	{r7, pc}
	...

08003590 <I2C_IsErrorOccurred>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsErrorOccurred(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8003590:	b580      	push	{r7, lr}
 8003592:	b08a      	sub	sp, #40	@ 0x28
 8003594:	af00      	add	r7, sp, #0
 8003596:	60f8      	str	r0, [r7, #12]
 8003598:	60b9      	str	r1, [r7, #8]
 800359a:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800359c:	2300      	movs	r3, #0
 800359e:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  uint32_t itflag   = hi2c->Instance->ISR;
 80035a2:	68fb      	ldr	r3, [r7, #12]
 80035a4:	681b      	ldr	r3, [r3, #0]
 80035a6:	699b      	ldr	r3, [r3, #24]
 80035a8:	61bb      	str	r3, [r7, #24]
  uint32_t error_code = 0;
 80035aa:	2300      	movs	r3, #0
 80035ac:	623b      	str	r3, [r7, #32]
  uint32_t tickstart = Tickstart;
 80035ae:	687b      	ldr	r3, [r7, #4]
 80035b0:	61fb      	str	r3, [r7, #28]
  uint32_t tmp1;
  HAL_I2C_ModeTypeDef tmp2;

  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_AF))
 80035b2:	69bb      	ldr	r3, [r7, #24]
 80035b4:	f003 0310 	and.w	r3, r3, #16
 80035b8:	2b00      	cmp	r3, #0
 80035ba:	d068      	beq.n	800368e <I2C_IsErrorOccurred+0xfe>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80035bc:	68fb      	ldr	r3, [r7, #12]
 80035be:	681b      	ldr	r3, [r3, #0]
 80035c0:	2210      	movs	r2, #16
 80035c2:	61da      	str	r2, [r3, #28]

    /* Wait until STOP Flag is set or timeout occurred */
    /* AutoEnd should be initiate after AF */
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 80035c4:	e049      	b.n	800365a <I2C_IsErrorOccurred+0xca>
    {
      /* Check for the Timeout */
      if (Timeout != HAL_MAX_DELAY)
 80035c6:	68bb      	ldr	r3, [r7, #8]
 80035c8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80035cc:	d045      	beq.n	800365a <I2C_IsErrorOccurred+0xca>
      {
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 80035ce:	f7fe fcb5 	bl	8001f3c <HAL_GetTick>
 80035d2:	4602      	mov	r2, r0
 80035d4:	69fb      	ldr	r3, [r7, #28]
 80035d6:	1ad3      	subs	r3, r2, r3
 80035d8:	68ba      	ldr	r2, [r7, #8]
 80035da:	429a      	cmp	r2, r3
 80035dc:	d302      	bcc.n	80035e4 <I2C_IsErrorOccurred+0x54>
 80035de:	68bb      	ldr	r3, [r7, #8]
 80035e0:	2b00      	cmp	r3, #0
 80035e2:	d13a      	bne.n	800365a <I2C_IsErrorOccurred+0xca>
        {
          tmp1 = (uint32_t)(hi2c->Instance->CR2 & I2C_CR2_STOP);
 80035e4:	68fb      	ldr	r3, [r7, #12]
 80035e6:	681b      	ldr	r3, [r3, #0]
 80035e8:	685b      	ldr	r3, [r3, #4]
 80035ea:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80035ee:	617b      	str	r3, [r7, #20]
          tmp2 = hi2c->Mode;
 80035f0:	68fb      	ldr	r3, [r7, #12]
 80035f2:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 80035f6:	74fb      	strb	r3, [r7, #19]

          /* In case of I2C still busy, try to regenerate a STOP manually */
          if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) != RESET) && \
 80035f8:	68fb      	ldr	r3, [r7, #12]
 80035fa:	681b      	ldr	r3, [r3, #0]
 80035fc:	699b      	ldr	r3, [r3, #24]
 80035fe:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8003602:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8003606:	d121      	bne.n	800364c <I2C_IsErrorOccurred+0xbc>
 8003608:	697b      	ldr	r3, [r7, #20]
 800360a:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 800360e:	d01d      	beq.n	800364c <I2C_IsErrorOccurred+0xbc>
              (tmp1 != I2C_CR2_STOP) && \
 8003610:	7cfb      	ldrb	r3, [r7, #19]
 8003612:	2b20      	cmp	r3, #32
 8003614:	d01a      	beq.n	800364c <I2C_IsErrorOccurred+0xbc>
              (tmp2 != HAL_I2C_MODE_SLAVE))
          {
            /* Generate Stop */
            hi2c->Instance->CR2 |= I2C_CR2_STOP;
 8003616:	68fb      	ldr	r3, [r7, #12]
 8003618:	681b      	ldr	r3, [r3, #0]
 800361a:	685a      	ldr	r2, [r3, #4]
 800361c:	68fb      	ldr	r3, [r7, #12]
 800361e:	681b      	ldr	r3, [r3, #0]
 8003620:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 8003624:	605a      	str	r2, [r3, #4]

            /* Update Tick with new reference */
            tickstart = HAL_GetTick();
 8003626:	f7fe fc89 	bl	8001f3c <HAL_GetTick>
 800362a:	61f8      	str	r0, [r7, #28]
          }

          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 800362c:	e00e      	b.n	800364c <I2C_IsErrorOccurred+0xbc>
          {
            /* Check for the Timeout */
            if ((HAL_GetTick() - tickstart) > I2C_TIMEOUT_STOPF)
 800362e:	f7fe fc85 	bl	8001f3c <HAL_GetTick>
 8003632:	4602      	mov	r2, r0
 8003634:	69fb      	ldr	r3, [r7, #28]
 8003636:	1ad3      	subs	r3, r2, r3
 8003638:	2b19      	cmp	r3, #25
 800363a:	d907      	bls.n	800364c <I2C_IsErrorOccurred+0xbc>
            {
              error_code |= HAL_I2C_ERROR_TIMEOUT;
 800363c:	6a3b      	ldr	r3, [r7, #32]
 800363e:	f043 0320 	orr.w	r3, r3, #32
 8003642:	623b      	str	r3, [r7, #32]

              status = HAL_ERROR;
 8003644:	2301      	movs	r3, #1
 8003646:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27

              break;
 800364a:	e006      	b.n	800365a <I2C_IsErrorOccurred+0xca>
          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 800364c:	68fb      	ldr	r3, [r7, #12]
 800364e:	681b      	ldr	r3, [r3, #0]
 8003650:	699b      	ldr	r3, [r3, #24]
 8003652:	f003 0320 	and.w	r3, r3, #32
 8003656:	2b20      	cmp	r3, #32
 8003658:	d1e9      	bne.n	800362e <I2C_IsErrorOccurred+0x9e>
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 800365a:	68fb      	ldr	r3, [r7, #12]
 800365c:	681b      	ldr	r3, [r3, #0]
 800365e:	699b      	ldr	r3, [r3, #24]
 8003660:	f003 0320 	and.w	r3, r3, #32
 8003664:	2b20      	cmp	r3, #32
 8003666:	d003      	beq.n	8003670 <I2C_IsErrorOccurred+0xe0>
 8003668:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 800366c:	2b00      	cmp	r3, #0
 800366e:	d0aa      	beq.n	80035c6 <I2C_IsErrorOccurred+0x36>
        }
      }
    }

    /* In case STOP Flag is detected, clear it */
    if (status == HAL_OK)
 8003670:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8003674:	2b00      	cmp	r3, #0
 8003676:	d103      	bne.n	8003680 <I2C_IsErrorOccurred+0xf0>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8003678:	68fb      	ldr	r3, [r7, #12]
 800367a:	681b      	ldr	r3, [r3, #0]
 800367c:	2220      	movs	r2, #32
 800367e:	61da      	str	r2, [r3, #28]
    }

    error_code |= HAL_I2C_ERROR_AF;
 8003680:	6a3b      	ldr	r3, [r7, #32]
 8003682:	f043 0304 	orr.w	r3, r3, #4
 8003686:	623b      	str	r3, [r7, #32]

    status = HAL_ERROR;
 8003688:	2301      	movs	r3, #1
 800368a:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  }

  /* Refresh Content of Status register */
  itflag = hi2c->Instance->ISR;
 800368e:	68fb      	ldr	r3, [r7, #12]
 8003690:	681b      	ldr	r3, [r3, #0]
 8003692:	699b      	ldr	r3, [r3, #24]
 8003694:	61bb      	str	r3, [r7, #24]

  /* Then verify if an additional errors occurs */
  /* Check if a Bus error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_BERR))
 8003696:	69bb      	ldr	r3, [r7, #24]
 8003698:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800369c:	2b00      	cmp	r3, #0
 800369e:	d00b      	beq.n	80036b8 <I2C_IsErrorOccurred+0x128>
  {
    error_code |= HAL_I2C_ERROR_BERR;
 80036a0:	6a3b      	ldr	r3, [r7, #32]
 80036a2:	f043 0301 	orr.w	r3, r3, #1
 80036a6:	623b      	str	r3, [r7, #32]

    /* Clear BERR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_BERR);
 80036a8:	68fb      	ldr	r3, [r7, #12]
 80036aa:	681b      	ldr	r3, [r3, #0]
 80036ac:	f44f 7280 	mov.w	r2, #256	@ 0x100
 80036b0:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 80036b2:	2301      	movs	r3, #1
 80036b4:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  }

  /* Check if an Over-Run/Under-Run error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_OVR))
 80036b8:	69bb      	ldr	r3, [r7, #24]
 80036ba:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80036be:	2b00      	cmp	r3, #0
 80036c0:	d00b      	beq.n	80036da <I2C_IsErrorOccurred+0x14a>
  {
    error_code |= HAL_I2C_ERROR_OVR;
 80036c2:	6a3b      	ldr	r3, [r7, #32]
 80036c4:	f043 0308 	orr.w	r3, r3, #8
 80036c8:	623b      	str	r3, [r7, #32]

    /* Clear OVR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
 80036ca:	68fb      	ldr	r3, [r7, #12]
 80036cc:	681b      	ldr	r3, [r3, #0]
 80036ce:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 80036d2:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 80036d4:	2301      	movs	r3, #1
 80036d6:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  }

  /* Check if an Arbitration Loss error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_ARLO))
 80036da:	69bb      	ldr	r3, [r7, #24]
 80036dc:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 80036e0:	2b00      	cmp	r3, #0
 80036e2:	d00b      	beq.n	80036fc <I2C_IsErrorOccurred+0x16c>
  {
    error_code |= HAL_I2C_ERROR_ARLO;
 80036e4:	6a3b      	ldr	r3, [r7, #32]
 80036e6:	f043 0302 	orr.w	r3, r3, #2
 80036ea:	623b      	str	r3, [r7, #32]

    /* Clear ARLO flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
 80036ec:	68fb      	ldr	r3, [r7, #12]
 80036ee:	681b      	ldr	r3, [r3, #0]
 80036f0:	f44f 7200 	mov.w	r2, #512	@ 0x200
 80036f4:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 80036f6:	2301      	movs	r3, #1
 80036f8:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  }

  if (status != HAL_OK)
 80036fc:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8003700:	2b00      	cmp	r3, #0
 8003702:	d01c      	beq.n	800373e <I2C_IsErrorOccurred+0x1ae>
  {
    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 8003704:	68f8      	ldr	r0, [r7, #12]
 8003706:	f7ff fe3b 	bl	8003380 <I2C_Flush_TXDR>

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 800370a:	68fb      	ldr	r3, [r7, #12]
 800370c:	681b      	ldr	r3, [r3, #0]
 800370e:	6859      	ldr	r1, [r3, #4]
 8003710:	68fb      	ldr	r3, [r7, #12]
 8003712:	681a      	ldr	r2, [r3, #0]
 8003714:	4b0d      	ldr	r3, [pc, #52]	@ (800374c <I2C_IsErrorOccurred+0x1bc>)
 8003716:	400b      	ands	r3, r1
 8003718:	6053      	str	r3, [r2, #4]

    hi2c->ErrorCode |= error_code;
 800371a:	68fb      	ldr	r3, [r7, #12]
 800371c:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 800371e:	6a3b      	ldr	r3, [r7, #32]
 8003720:	431a      	orrs	r2, r3
 8003722:	68fb      	ldr	r3, [r7, #12]
 8003724:	645a      	str	r2, [r3, #68]	@ 0x44
    hi2c->State = HAL_I2C_STATE_READY;
 8003726:	68fb      	ldr	r3, [r7, #12]
 8003728:	2220      	movs	r2, #32
 800372a:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode = HAL_I2C_MODE_NONE;
 800372e:	68fb      	ldr	r3, [r7, #12]
 8003730:	2200      	movs	r2, #0
 8003732:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003736:	68fb      	ldr	r3, [r7, #12]
 8003738:	2200      	movs	r2, #0
 800373a:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
  }

  return status;
 800373e:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
}
 8003742:	4618      	mov	r0, r3
 8003744:	3728      	adds	r7, #40	@ 0x28
 8003746:	46bd      	mov	sp, r7
 8003748:	bd80      	pop	{r7, pc}
 800374a:	bf00      	nop
 800374c:	fe00e800 	.word	0xfe00e800

08003750 <I2C_TransferConfig>:
  *     @arg @ref I2C_GENERATE_START_WRITE Generate Restart for write request.
  * @retval None
  */
static void I2C_TransferConfig(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t Size, uint32_t Mode,
                               uint32_t Request)
{
 8003750:	b480      	push	{r7}
 8003752:	b087      	sub	sp, #28
 8003754:	af00      	add	r7, sp, #0
 8003756:	60f8      	str	r0, [r7, #12]
 8003758:	607b      	str	r3, [r7, #4]
 800375a:	460b      	mov	r3, r1
 800375c:	817b      	strh	r3, [r7, #10]
 800375e:	4613      	mov	r3, r2
 8003760:	727b      	strb	r3, [r7, #9]
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_TRANSFER_MODE(Mode));
  assert_param(IS_TRANSFER_REQUEST(Request));

  /* Declaration of tmp to prevent undefined behavior of volatile usage */
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8003762:	897b      	ldrh	r3, [r7, #10]
 8003764:	f3c3 0209 	ubfx	r2, r3, #0, #10
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 8003768:	7a7b      	ldrb	r3, [r7, #9]
 800376a:	041b      	lsls	r3, r3, #16
 800376c:	f403 037f 	and.w	r3, r3, #16711680	@ 0xff0000
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8003770:	431a      	orrs	r2, r3
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 8003772:	687b      	ldr	r3, [r7, #4]
 8003774:	431a      	orrs	r2, r3
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8003776:	6a3b      	ldr	r3, [r7, #32]
 8003778:	4313      	orrs	r3, r2
 800377a:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 800377e:	617b      	str	r3, [r7, #20]
                             (uint32_t)Mode | (uint32_t)Request) & (~0x80000000U));

  /* update CR2 register */
  MODIFY_REG(hi2c->Instance->CR2, \
 8003780:	68fb      	ldr	r3, [r7, #12]
 8003782:	681b      	ldr	r3, [r3, #0]
 8003784:	685a      	ldr	r2, [r3, #4]
 8003786:	6a3b      	ldr	r3, [r7, #32]
 8003788:	0d5b      	lsrs	r3, r3, #21
 800378a:	f403 6180 	and.w	r1, r3, #1024	@ 0x400
 800378e:	4b08      	ldr	r3, [pc, #32]	@ (80037b0 <I2C_TransferConfig+0x60>)
 8003790:	430b      	orrs	r3, r1
 8003792:	43db      	mvns	r3, r3
 8003794:	ea02 0103 	and.w	r1, r2, r3
 8003798:	68fb      	ldr	r3, [r7, #12]
 800379a:	681b      	ldr	r3, [r3, #0]
 800379c:	697a      	ldr	r2, [r7, #20]
 800379e:	430a      	orrs	r2, r1
 80037a0:	605a      	str	r2, [r3, #4]
             ((I2C_CR2_SADD | I2C_CR2_NBYTES | I2C_CR2_RELOAD | I2C_CR2_AUTOEND | \
               (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) | \
               I2C_CR2_START | I2C_CR2_STOP)), tmp);
}
 80037a2:	bf00      	nop
 80037a4:	371c      	adds	r7, #28
 80037a6:	46bd      	mov	sp, r7
 80037a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80037ac:	4770      	bx	lr
 80037ae:	bf00      	nop
 80037b0:	03ff63ff 	.word	0x03ff63ff

080037b4 <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 80037b4:	b480      	push	{r7}
 80037b6:	b083      	sub	sp, #12
 80037b8:	af00      	add	r7, sp, #0
 80037ba:	6078      	str	r0, [r7, #4]
 80037bc:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80037be:	687b      	ldr	r3, [r7, #4]
 80037c0:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80037c4:	b2db      	uxtb	r3, r3
 80037c6:	2b20      	cmp	r3, #32
 80037c8:	d138      	bne.n	800383c <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 80037ca:	687b      	ldr	r3, [r7, #4]
 80037cc:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 80037d0:	2b01      	cmp	r3, #1
 80037d2:	d101      	bne.n	80037d8 <HAL_I2CEx_ConfigAnalogFilter+0x24>
 80037d4:	2302      	movs	r3, #2
 80037d6:	e032      	b.n	800383e <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 80037d8:	687b      	ldr	r3, [r7, #4]
 80037da:	2201      	movs	r2, #1
 80037dc:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 80037e0:	687b      	ldr	r3, [r7, #4]
 80037e2:	2224      	movs	r2, #36	@ 0x24
 80037e4:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 80037e8:	687b      	ldr	r3, [r7, #4]
 80037ea:	681b      	ldr	r3, [r3, #0]
 80037ec:	681a      	ldr	r2, [r3, #0]
 80037ee:	687b      	ldr	r3, [r7, #4]
 80037f0:	681b      	ldr	r3, [r3, #0]
 80037f2:	f022 0201 	bic.w	r2, r2, #1
 80037f6:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 80037f8:	687b      	ldr	r3, [r7, #4]
 80037fa:	681b      	ldr	r3, [r3, #0]
 80037fc:	681a      	ldr	r2, [r3, #0]
 80037fe:	687b      	ldr	r3, [r7, #4]
 8003800:	681b      	ldr	r3, [r3, #0]
 8003802:	f422 5280 	bic.w	r2, r2, #4096	@ 0x1000
 8003806:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 8003808:	687b      	ldr	r3, [r7, #4]
 800380a:	681b      	ldr	r3, [r3, #0]
 800380c:	6819      	ldr	r1, [r3, #0]
 800380e:	687b      	ldr	r3, [r7, #4]
 8003810:	681b      	ldr	r3, [r3, #0]
 8003812:	683a      	ldr	r2, [r7, #0]
 8003814:	430a      	orrs	r2, r1
 8003816:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8003818:	687b      	ldr	r3, [r7, #4]
 800381a:	681b      	ldr	r3, [r3, #0]
 800381c:	681a      	ldr	r2, [r3, #0]
 800381e:	687b      	ldr	r3, [r7, #4]
 8003820:	681b      	ldr	r3, [r3, #0]
 8003822:	f042 0201 	orr.w	r2, r2, #1
 8003826:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8003828:	687b      	ldr	r3, [r7, #4]
 800382a:	2220      	movs	r2, #32
 800382c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003830:	687b      	ldr	r3, [r7, #4]
 8003832:	2200      	movs	r2, #0
 8003834:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 8003838:	2300      	movs	r3, #0
 800383a:	e000      	b.n	800383e <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 800383c:	2302      	movs	r3, #2
  }
}
 800383e:	4618      	mov	r0, r3
 8003840:	370c      	adds	r7, #12
 8003842:	46bd      	mov	sp, r7
 8003844:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003848:	4770      	bx	lr

0800384a <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 800384a:	b480      	push	{r7}
 800384c:	b085      	sub	sp, #20
 800384e:	af00      	add	r7, sp, #0
 8003850:	6078      	str	r0, [r7, #4]
 8003852:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8003854:	687b      	ldr	r3, [r7, #4]
 8003856:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800385a:	b2db      	uxtb	r3, r3
 800385c:	2b20      	cmp	r3, #32
 800385e:	d139      	bne.n	80038d4 <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8003860:	687b      	ldr	r3, [r7, #4]
 8003862:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8003866:	2b01      	cmp	r3, #1
 8003868:	d101      	bne.n	800386e <HAL_I2CEx_ConfigDigitalFilter+0x24>
 800386a:	2302      	movs	r3, #2
 800386c:	e033      	b.n	80038d6 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 800386e:	687b      	ldr	r3, [r7, #4]
 8003870:	2201      	movs	r2, #1
 8003872:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8003876:	687b      	ldr	r3, [r7, #4]
 8003878:	2224      	movs	r2, #36	@ 0x24
 800387a:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 800387e:	687b      	ldr	r3, [r7, #4]
 8003880:	681b      	ldr	r3, [r3, #0]
 8003882:	681a      	ldr	r2, [r3, #0]
 8003884:	687b      	ldr	r3, [r7, #4]
 8003886:	681b      	ldr	r3, [r3, #0]
 8003888:	f022 0201 	bic.w	r2, r2, #1
 800388c:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 800388e:	687b      	ldr	r3, [r7, #4]
 8003890:	681b      	ldr	r3, [r3, #0]
 8003892:	681b      	ldr	r3, [r3, #0]
 8003894:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 8003896:	68fb      	ldr	r3, [r7, #12]
 8003898:	f423 6370 	bic.w	r3, r3, #3840	@ 0xf00
 800389c:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 800389e:	683b      	ldr	r3, [r7, #0]
 80038a0:	021b      	lsls	r3, r3, #8
 80038a2:	68fa      	ldr	r2, [r7, #12]
 80038a4:	4313      	orrs	r3, r2
 80038a6:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 80038a8:	687b      	ldr	r3, [r7, #4]
 80038aa:	681b      	ldr	r3, [r3, #0]
 80038ac:	68fa      	ldr	r2, [r7, #12]
 80038ae:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 80038b0:	687b      	ldr	r3, [r7, #4]
 80038b2:	681b      	ldr	r3, [r3, #0]
 80038b4:	681a      	ldr	r2, [r3, #0]
 80038b6:	687b      	ldr	r3, [r7, #4]
 80038b8:	681b      	ldr	r3, [r3, #0]
 80038ba:	f042 0201 	orr.w	r2, r2, #1
 80038be:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 80038c0:	687b      	ldr	r3, [r7, #4]
 80038c2:	2220      	movs	r2, #32
 80038c4:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80038c8:	687b      	ldr	r3, [r7, #4]
 80038ca:	2200      	movs	r2, #0
 80038cc:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 80038d0:	2300      	movs	r3, #0
 80038d2:	e000      	b.n	80038d6 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 80038d4:	2302      	movs	r3, #2
  }
}
 80038d6:	4618      	mov	r0, r3
 80038d8:	3714      	adds	r7, #20
 80038da:	46bd      	mov	sp, r7
 80038dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80038e0:	4770      	bx	lr

080038e2 <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 80038e2:	b580      	push	{r7, lr}
 80038e4:	b086      	sub	sp, #24
 80038e6:	af02      	add	r7, sp, #8
 80038e8:	6078      	str	r0, [r7, #4]
  const USB_OTG_GlobalTypeDef *USBx;
#endif /* defined (USB_OTG_FS) */
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 80038ea:	687b      	ldr	r3, [r7, #4]
 80038ec:	2b00      	cmp	r3, #0
 80038ee:	d101      	bne.n	80038f4 <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 80038f0:	2301      	movs	r3, #1
 80038f2:	e108      	b.n	8003b06 <HAL_PCD_Init+0x224>

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

#if defined (USB_OTG_FS)
  USBx = hpcd->Instance;
 80038f4:	687b      	ldr	r3, [r7, #4]
 80038f6:	681b      	ldr	r3, [r3, #0]
 80038f8:	60bb      	str	r3, [r7, #8]
#endif /* defined (USB_OTG_FS) */

  if (hpcd->State == HAL_PCD_STATE_RESET)
 80038fa:	687b      	ldr	r3, [r7, #4]
 80038fc:	f893 3495 	ldrb.w	r3, [r3, #1173]	@ 0x495
 8003900:	b2db      	uxtb	r3, r3
 8003902:	2b00      	cmp	r3, #0
 8003904:	d106      	bne.n	8003914 <HAL_PCD_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 8003906:	687b      	ldr	r3, [r7, #4]
 8003908:	2200      	movs	r2, #0
 800390a:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 800390e:	6878      	ldr	r0, [r7, #4]
 8003910:	f7fe f914 	bl	8001b3c <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 8003914:	687b      	ldr	r3, [r7, #4]
 8003916:	2203      	movs	r2, #3
 8003918:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495

#if defined (USB_OTG_FS)
  /* Disable DMA mode for FS instance */
  if (USBx == USB_OTG_FS)
 800391c:	68bb      	ldr	r3, [r7, #8]
 800391e:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8003922:	d102      	bne.n	800392a <HAL_PCD_Init+0x48>
  {
    hpcd->Init.dma_enable = 0U;
 8003924:	687b      	ldr	r3, [r7, #4]
 8003926:	2200      	movs	r2, #0
 8003928:	719a      	strb	r2, [r3, #6]
  }
#endif /* defined (USB_OTG_FS) */

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 800392a:	687b      	ldr	r3, [r7, #4]
 800392c:	681b      	ldr	r3, [r3, #0]
 800392e:	4618      	mov	r0, r3
 8003930:	f003 fb18 	bl	8006f64 <USB_DisableGlobalInt>

  /*Init the Core (common init.) */
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8003934:	687b      	ldr	r3, [r7, #4]
 8003936:	6818      	ldr	r0, [r3, #0]
 8003938:	687b      	ldr	r3, [r7, #4]
 800393a:	7c1a      	ldrb	r2, [r3, #16]
 800393c:	f88d 2000 	strb.w	r2, [sp]
 8003940:	3304      	adds	r3, #4
 8003942:	cb0e      	ldmia	r3, {r1, r2, r3}
 8003944:	f003 fab4 	bl	8006eb0 <USB_CoreInit>
 8003948:	4603      	mov	r3, r0
 800394a:	2b00      	cmp	r3, #0
 800394c:	d005      	beq.n	800395a <HAL_PCD_Init+0x78>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 800394e:	687b      	ldr	r3, [r7, #4]
 8003950:	2202      	movs	r2, #2
 8003952:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495
    return HAL_ERROR;
 8003956:	2301      	movs	r3, #1
 8003958:	e0d5      	b.n	8003b06 <HAL_PCD_Init+0x224>
  }

  /* Force Device Mode */
  if (USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE) != HAL_OK)
 800395a:	687b      	ldr	r3, [r7, #4]
 800395c:	681b      	ldr	r3, [r3, #0]
 800395e:	2100      	movs	r1, #0
 8003960:	4618      	mov	r0, r3
 8003962:	f003 fb10 	bl	8006f86 <USB_SetCurrentMode>
 8003966:	4603      	mov	r3, r0
 8003968:	2b00      	cmp	r3, #0
 800396a:	d005      	beq.n	8003978 <HAL_PCD_Init+0x96>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 800396c:	687b      	ldr	r3, [r7, #4]
 800396e:	2202      	movs	r2, #2
 8003970:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495
    return HAL_ERROR;
 8003974:	2301      	movs	r3, #1
 8003976:	e0c6      	b.n	8003b06 <HAL_PCD_Init+0x224>
  }

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8003978:	2300      	movs	r3, #0
 800397a:	73fb      	strb	r3, [r7, #15]
 800397c:	e04a      	b.n	8003a14 <HAL_PCD_Init+0x132>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 800397e:	7bfa      	ldrb	r2, [r7, #15]
 8003980:	6879      	ldr	r1, [r7, #4]
 8003982:	4613      	mov	r3, r2
 8003984:	00db      	lsls	r3, r3, #3
 8003986:	4413      	add	r3, r2
 8003988:	009b      	lsls	r3, r3, #2
 800398a:	440b      	add	r3, r1
 800398c:	3315      	adds	r3, #21
 800398e:	2201      	movs	r2, #1
 8003990:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 8003992:	7bfa      	ldrb	r2, [r7, #15]
 8003994:	6879      	ldr	r1, [r7, #4]
 8003996:	4613      	mov	r3, r2
 8003998:	00db      	lsls	r3, r3, #3
 800399a:	4413      	add	r3, r2
 800399c:	009b      	lsls	r3, r3, #2
 800399e:	440b      	add	r3, r1
 80039a0:	3314      	adds	r3, #20
 80039a2:	7bfa      	ldrb	r2, [r7, #15]
 80039a4:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].tx_fifo_num = i;
 80039a6:	7bfa      	ldrb	r2, [r7, #15]
 80039a8:	7bfb      	ldrb	r3, [r7, #15]
 80039aa:	b298      	uxth	r0, r3
 80039ac:	6879      	ldr	r1, [r7, #4]
 80039ae:	4613      	mov	r3, r2
 80039b0:	00db      	lsls	r3, r3, #3
 80039b2:	4413      	add	r3, r2
 80039b4:	009b      	lsls	r3, r3, #2
 80039b6:	440b      	add	r3, r1
 80039b8:	332e      	adds	r3, #46	@ 0x2e
 80039ba:	4602      	mov	r2, r0
 80039bc:	801a      	strh	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 80039be:	7bfa      	ldrb	r2, [r7, #15]
 80039c0:	6879      	ldr	r1, [r7, #4]
 80039c2:	4613      	mov	r3, r2
 80039c4:	00db      	lsls	r3, r3, #3
 80039c6:	4413      	add	r3, r2
 80039c8:	009b      	lsls	r3, r3, #2
 80039ca:	440b      	add	r3, r1
 80039cc:	3318      	adds	r3, #24
 80039ce:	2200      	movs	r2, #0
 80039d0:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 80039d2:	7bfa      	ldrb	r2, [r7, #15]
 80039d4:	6879      	ldr	r1, [r7, #4]
 80039d6:	4613      	mov	r3, r2
 80039d8:	00db      	lsls	r3, r3, #3
 80039da:	4413      	add	r3, r2
 80039dc:	009b      	lsls	r3, r3, #2
 80039de:	440b      	add	r3, r1
 80039e0:	331c      	adds	r3, #28
 80039e2:	2200      	movs	r2, #0
 80039e4:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 80039e6:	7bfa      	ldrb	r2, [r7, #15]
 80039e8:	6879      	ldr	r1, [r7, #4]
 80039ea:	4613      	mov	r3, r2
 80039ec:	00db      	lsls	r3, r3, #3
 80039ee:	4413      	add	r3, r2
 80039f0:	009b      	lsls	r3, r3, #2
 80039f2:	440b      	add	r3, r1
 80039f4:	3320      	adds	r3, #32
 80039f6:	2200      	movs	r2, #0
 80039f8:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 80039fa:	7bfa      	ldrb	r2, [r7, #15]
 80039fc:	6879      	ldr	r1, [r7, #4]
 80039fe:	4613      	mov	r3, r2
 8003a00:	00db      	lsls	r3, r3, #3
 8003a02:	4413      	add	r3, r2
 8003a04:	009b      	lsls	r3, r3, #2
 8003a06:	440b      	add	r3, r1
 8003a08:	3324      	adds	r3, #36	@ 0x24
 8003a0a:	2200      	movs	r2, #0
 8003a0c:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8003a0e:	7bfb      	ldrb	r3, [r7, #15]
 8003a10:	3301      	adds	r3, #1
 8003a12:	73fb      	strb	r3, [r7, #15]
 8003a14:	687b      	ldr	r3, [r7, #4]
 8003a16:	791b      	ldrb	r3, [r3, #4]
 8003a18:	7bfa      	ldrb	r2, [r7, #15]
 8003a1a:	429a      	cmp	r2, r3
 8003a1c:	d3af      	bcc.n	800397e <HAL_PCD_Init+0x9c>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8003a1e:	2300      	movs	r3, #0
 8003a20:	73fb      	strb	r3, [r7, #15]
 8003a22:	e044      	b.n	8003aae <HAL_PCD_Init+0x1cc>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 8003a24:	7bfa      	ldrb	r2, [r7, #15]
 8003a26:	6879      	ldr	r1, [r7, #4]
 8003a28:	4613      	mov	r3, r2
 8003a2a:	00db      	lsls	r3, r3, #3
 8003a2c:	4413      	add	r3, r2
 8003a2e:	009b      	lsls	r3, r3, #2
 8003a30:	440b      	add	r3, r1
 8003a32:	f203 2355 	addw	r3, r3, #597	@ 0x255
 8003a36:	2200      	movs	r2, #0
 8003a38:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 8003a3a:	7bfa      	ldrb	r2, [r7, #15]
 8003a3c:	6879      	ldr	r1, [r7, #4]
 8003a3e:	4613      	mov	r3, r2
 8003a40:	00db      	lsls	r3, r3, #3
 8003a42:	4413      	add	r3, r2
 8003a44:	009b      	lsls	r3, r3, #2
 8003a46:	440b      	add	r3, r1
 8003a48:	f503 7315 	add.w	r3, r3, #596	@ 0x254
 8003a4c:	7bfa      	ldrb	r2, [r7, #15]
 8003a4e:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 8003a50:	7bfa      	ldrb	r2, [r7, #15]
 8003a52:	6879      	ldr	r1, [r7, #4]
 8003a54:	4613      	mov	r3, r2
 8003a56:	00db      	lsls	r3, r3, #3
 8003a58:	4413      	add	r3, r2
 8003a5a:	009b      	lsls	r3, r3, #2
 8003a5c:	440b      	add	r3, r1
 8003a5e:	f503 7316 	add.w	r3, r3, #600	@ 0x258
 8003a62:	2200      	movs	r2, #0
 8003a64:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 8003a66:	7bfa      	ldrb	r2, [r7, #15]
 8003a68:	6879      	ldr	r1, [r7, #4]
 8003a6a:	4613      	mov	r3, r2
 8003a6c:	00db      	lsls	r3, r3, #3
 8003a6e:	4413      	add	r3, r2
 8003a70:	009b      	lsls	r3, r3, #2
 8003a72:	440b      	add	r3, r1
 8003a74:	f503 7317 	add.w	r3, r3, #604	@ 0x25c
 8003a78:	2200      	movs	r2, #0
 8003a7a:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 8003a7c:	7bfa      	ldrb	r2, [r7, #15]
 8003a7e:	6879      	ldr	r1, [r7, #4]
 8003a80:	4613      	mov	r3, r2
 8003a82:	00db      	lsls	r3, r3, #3
 8003a84:	4413      	add	r3, r2
 8003a86:	009b      	lsls	r3, r3, #2
 8003a88:	440b      	add	r3, r1
 8003a8a:	f503 7318 	add.w	r3, r3, #608	@ 0x260
 8003a8e:	2200      	movs	r2, #0
 8003a90:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 8003a92:	7bfa      	ldrb	r2, [r7, #15]
 8003a94:	6879      	ldr	r1, [r7, #4]
 8003a96:	4613      	mov	r3, r2
 8003a98:	00db      	lsls	r3, r3, #3
 8003a9a:	4413      	add	r3, r2
 8003a9c:	009b      	lsls	r3, r3, #2
 8003a9e:	440b      	add	r3, r1
 8003aa0:	f503 7319 	add.w	r3, r3, #612	@ 0x264
 8003aa4:	2200      	movs	r2, #0
 8003aa6:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8003aa8:	7bfb      	ldrb	r3, [r7, #15]
 8003aaa:	3301      	adds	r3, #1
 8003aac:	73fb      	strb	r3, [r7, #15]
 8003aae:	687b      	ldr	r3, [r7, #4]
 8003ab0:	791b      	ldrb	r3, [r3, #4]
 8003ab2:	7bfa      	ldrb	r2, [r7, #15]
 8003ab4:	429a      	cmp	r2, r3
 8003ab6:	d3b5      	bcc.n	8003a24 <HAL_PCD_Init+0x142>
  }

  /* Init Device */
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8003ab8:	687b      	ldr	r3, [r7, #4]
 8003aba:	6818      	ldr	r0, [r3, #0]
 8003abc:	687b      	ldr	r3, [r7, #4]
 8003abe:	7c1a      	ldrb	r2, [r3, #16]
 8003ac0:	f88d 2000 	strb.w	r2, [sp]
 8003ac4:	3304      	adds	r3, #4
 8003ac6:	cb0e      	ldmia	r3, {r1, r2, r3}
 8003ac8:	f003 faaa 	bl	8007020 <USB_DevInit>
 8003acc:	4603      	mov	r3, r0
 8003ace:	2b00      	cmp	r3, #0
 8003ad0:	d005      	beq.n	8003ade <HAL_PCD_Init+0x1fc>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8003ad2:	687b      	ldr	r3, [r7, #4]
 8003ad4:	2202      	movs	r2, #2
 8003ad6:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495
    return HAL_ERROR;
 8003ada:	2301      	movs	r3, #1
 8003adc:	e013      	b.n	8003b06 <HAL_PCD_Init+0x224>
  }

  hpcd->USB_Address = 0U;
 8003ade:	687b      	ldr	r3, [r7, #4]
 8003ae0:	2200      	movs	r2, #0
 8003ae2:	745a      	strb	r2, [r3, #17]
  hpcd->State = HAL_PCD_STATE_READY;
 8003ae4:	687b      	ldr	r3, [r7, #4]
 8003ae6:	2201      	movs	r2, #1
 8003ae8:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495

  /* Activate LPM */
  if (hpcd->Init.lpm_enable == 1U)
 8003aec:	687b      	ldr	r3, [r7, #4]
 8003aee:	7b1b      	ldrb	r3, [r3, #12]
 8003af0:	2b01      	cmp	r3, #1
 8003af2:	d102      	bne.n	8003afa <HAL_PCD_Init+0x218>
  {
    (void)HAL_PCDEx_ActivateLPM(hpcd);
 8003af4:	6878      	ldr	r0, [r7, #4]
 8003af6:	f000 f80b 	bl	8003b10 <HAL_PCDEx_ActivateLPM>
  }

  (void)USB_DevDisconnect(hpcd->Instance);
 8003afa:	687b      	ldr	r3, [r7, #4]
 8003afc:	681b      	ldr	r3, [r3, #0]
 8003afe:	4618      	mov	r0, r3
 8003b00:	f003 fc65 	bl	80073ce <USB_DevDisconnect>

  return HAL_OK;
 8003b04:	2300      	movs	r3, #0
}
 8003b06:	4618      	mov	r0, r3
 8003b08:	3710      	adds	r7, #16
 8003b0a:	46bd      	mov	sp, r7
 8003b0c:	bd80      	pop	{r7, pc}
	...

08003b10 <HAL_PCDEx_ActivateLPM>:
  * @brief  Activate LPM feature.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_ActivateLPM(PCD_HandleTypeDef *hpcd)
{
 8003b10:	b480      	push	{r7}
 8003b12:	b085      	sub	sp, #20
 8003b14:	af00      	add	r7, sp, #0
 8003b16:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8003b18:	687b      	ldr	r3, [r7, #4]
 8003b1a:	681b      	ldr	r3, [r3, #0]
 8003b1c:	60fb      	str	r3, [r7, #12]

  hpcd->lpm_active = 1U;
 8003b1e:	687b      	ldr	r3, [r7, #4]
 8003b20:	2201      	movs	r2, #1
 8003b22:	f8c3 24d8 	str.w	r2, [r3, #1240]	@ 0x4d8
  hpcd->LPM_State = LPM_L0;
 8003b26:	687b      	ldr	r3, [r7, #4]
 8003b28:	2200      	movs	r2, #0
 8003b2a:	f883 24cc 	strb.w	r2, [r3, #1228]	@ 0x4cc
  USBx->GINTMSK |= USB_OTG_GINTMSK_LPMINTM;
 8003b2e:	68fb      	ldr	r3, [r7, #12]
 8003b30:	699b      	ldr	r3, [r3, #24]
 8003b32:	f043 6200 	orr.w	r2, r3, #134217728	@ 0x8000000
 8003b36:	68fb      	ldr	r3, [r7, #12]
 8003b38:	619a      	str	r2, [r3, #24]
  USBx->GLPMCFG |= (USB_OTG_GLPMCFG_LPMEN | USB_OTG_GLPMCFG_LPMACK | USB_OTG_GLPMCFG_ENBESL);
 8003b3a:	68fb      	ldr	r3, [r7, #12]
 8003b3c:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 8003b3e:	4b05      	ldr	r3, [pc, #20]	@ (8003b54 <HAL_PCDEx_ActivateLPM+0x44>)
 8003b40:	4313      	orrs	r3, r2
 8003b42:	68fa      	ldr	r2, [r7, #12]
 8003b44:	6553      	str	r3, [r2, #84]	@ 0x54

  return HAL_OK;
 8003b46:	2300      	movs	r3, #0
}
 8003b48:	4618      	mov	r0, r3
 8003b4a:	3714      	adds	r7, #20
 8003b4c:	46bd      	mov	sp, r7
 8003b4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b52:	4770      	bx	lr
 8003b54:	10000003 	.word	0x10000003

08003b58 <HAL_PWR_EnableBkUpAccess>:
  * @note If the HSE divided by 2, 3, ..31 is used as the RTC clock, the 
  *         Backup Domain Access should be kept enabled.
  * @retval None
  */
void HAL_PWR_EnableBkUpAccess(void)
{
 8003b58:	b480      	push	{r7}
 8003b5a:	af00      	add	r7, sp, #0
  /* Enable access to RTC and backup registers */
  SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8003b5c:	4b05      	ldr	r3, [pc, #20]	@ (8003b74 <HAL_PWR_EnableBkUpAccess+0x1c>)
 8003b5e:	681b      	ldr	r3, [r3, #0]
 8003b60:	4a04      	ldr	r2, [pc, #16]	@ (8003b74 <HAL_PWR_EnableBkUpAccess+0x1c>)
 8003b62:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8003b66:	6013      	str	r3, [r2, #0]
}
 8003b68:	bf00      	nop
 8003b6a:	46bd      	mov	sp, r7
 8003b6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b70:	4770      	bx	lr
 8003b72:	bf00      	nop
 8003b74:	40007000 	.word	0x40007000

08003b78 <HAL_PWREx_EnableOverDrive>:
  *         During the Over-drive switch activation, no peripheral clocks should be enabled.   
  *         The peripheral clocks must be enabled once the Over-drive mode is activated.   
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PWREx_EnableOverDrive(void)
{
 8003b78:	b580      	push	{r7, lr}
 8003b7a:	b082      	sub	sp, #8
 8003b7c:	af00      	add	r7, sp, #0
  uint32_t tickstart = 0;
 8003b7e:	2300      	movs	r3, #0
 8003b80:	607b      	str	r3, [r7, #4]

  __HAL_RCC_PWR_CLK_ENABLE();
 8003b82:	4b23      	ldr	r3, [pc, #140]	@ (8003c10 <HAL_PWREx_EnableOverDrive+0x98>)
 8003b84:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003b86:	4a22      	ldr	r2, [pc, #136]	@ (8003c10 <HAL_PWREx_EnableOverDrive+0x98>)
 8003b88:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8003b8c:	6413      	str	r3, [r2, #64]	@ 0x40
 8003b8e:	4b20      	ldr	r3, [pc, #128]	@ (8003c10 <HAL_PWREx_EnableOverDrive+0x98>)
 8003b90:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003b92:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8003b96:	603b      	str	r3, [r7, #0]
 8003b98:	683b      	ldr	r3, [r7, #0]
  
  /* Enable the Over-drive to extend the clock frequency to 216 MHz */
  __HAL_PWR_OVERDRIVE_ENABLE();
 8003b9a:	4b1e      	ldr	r3, [pc, #120]	@ (8003c14 <HAL_PWREx_EnableOverDrive+0x9c>)
 8003b9c:	681b      	ldr	r3, [r3, #0]
 8003b9e:	4a1d      	ldr	r2, [pc, #116]	@ (8003c14 <HAL_PWREx_EnableOverDrive+0x9c>)
 8003ba0:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8003ba4:	6013      	str	r3, [r2, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8003ba6:	f7fe f9c9 	bl	8001f3c <HAL_GetTick>
 8003baa:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 8003bac:	e009      	b.n	8003bc2 <HAL_PWREx_EnableOverDrive+0x4a>
  {
    if((HAL_GetTick() - tickstart ) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 8003bae:	f7fe f9c5 	bl	8001f3c <HAL_GetTick>
 8003bb2:	4602      	mov	r2, r0
 8003bb4:	687b      	ldr	r3, [r7, #4]
 8003bb6:	1ad3      	subs	r3, r2, r3
 8003bb8:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 8003bbc:	d901      	bls.n	8003bc2 <HAL_PWREx_EnableOverDrive+0x4a>
    {
      return HAL_TIMEOUT;
 8003bbe:	2303      	movs	r3, #3
 8003bc0:	e022      	b.n	8003c08 <HAL_PWREx_EnableOverDrive+0x90>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 8003bc2:	4b14      	ldr	r3, [pc, #80]	@ (8003c14 <HAL_PWREx_EnableOverDrive+0x9c>)
 8003bc4:	685b      	ldr	r3, [r3, #4]
 8003bc6:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8003bca:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8003bce:	d1ee      	bne.n	8003bae <HAL_PWREx_EnableOverDrive+0x36>
    }
  }
  
  /* Enable the Over-drive switch */
  __HAL_PWR_OVERDRIVESWITCHING_ENABLE();
 8003bd0:	4b10      	ldr	r3, [pc, #64]	@ (8003c14 <HAL_PWREx_EnableOverDrive+0x9c>)
 8003bd2:	681b      	ldr	r3, [r3, #0]
 8003bd4:	4a0f      	ldr	r2, [pc, #60]	@ (8003c14 <HAL_PWREx_EnableOverDrive+0x9c>)
 8003bd6:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8003bda:	6013      	str	r3, [r2, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8003bdc:	f7fe f9ae 	bl	8001f3c <HAL_GetTick>
 8003be0:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 8003be2:	e009      	b.n	8003bf8 <HAL_PWREx_EnableOverDrive+0x80>
  {
    if((HAL_GetTick() - tickstart ) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 8003be4:	f7fe f9aa 	bl	8001f3c <HAL_GetTick>
 8003be8:	4602      	mov	r2, r0
 8003bea:	687b      	ldr	r3, [r7, #4]
 8003bec:	1ad3      	subs	r3, r2, r3
 8003bee:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 8003bf2:	d901      	bls.n	8003bf8 <HAL_PWREx_EnableOverDrive+0x80>
    {
      return HAL_TIMEOUT;
 8003bf4:	2303      	movs	r3, #3
 8003bf6:	e007      	b.n	8003c08 <HAL_PWREx_EnableOverDrive+0x90>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 8003bf8:	4b06      	ldr	r3, [pc, #24]	@ (8003c14 <HAL_PWREx_EnableOverDrive+0x9c>)
 8003bfa:	685b      	ldr	r3, [r3, #4]
 8003bfc:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003c00:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8003c04:	d1ee      	bne.n	8003be4 <HAL_PWREx_EnableOverDrive+0x6c>
    }
  } 
  return HAL_OK;
 8003c06:	2300      	movs	r3, #0
}
 8003c08:	4618      	mov	r0, r3
 8003c0a:	3708      	adds	r7, #8
 8003c0c:	46bd      	mov	sp, r7
 8003c0e:	bd80      	pop	{r7, pc}
 8003c10:	40023800 	.word	0x40023800
 8003c14:	40007000 	.word	0x40007000

08003c18 <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8003c18:	b580      	push	{r7, lr}
 8003c1a:	b086      	sub	sp, #24
 8003c1c:	af00      	add	r7, sp, #0
 8003c1e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  FlagStatus pwrclkchanged = RESET;
 8003c20:	2300      	movs	r3, #0
 8003c22:	75fb      	strb	r3, [r7, #23]

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8003c24:	687b      	ldr	r3, [r7, #4]
 8003c26:	2b00      	cmp	r3, #0
 8003c28:	d101      	bne.n	8003c2e <HAL_RCC_OscConfig+0x16>
  {
    return HAL_ERROR;
 8003c2a:	2301      	movs	r3, #1
 8003c2c:	e29b      	b.n	8004166 <HAL_RCC_OscConfig+0x54e>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8003c2e:	687b      	ldr	r3, [r7, #4]
 8003c30:	681b      	ldr	r3, [r3, #0]
 8003c32:	f003 0301 	and.w	r3, r3, #1
 8003c36:	2b00      	cmp	r3, #0
 8003c38:	f000 8087 	beq.w	8003d4a <HAL_RCC_OscConfig+0x132>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL, It can not be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8003c3c:	4b96      	ldr	r3, [pc, #600]	@ (8003e98 <HAL_RCC_OscConfig+0x280>)
 8003c3e:	689b      	ldr	r3, [r3, #8]
 8003c40:	f003 030c 	and.w	r3, r3, #12
 8003c44:	2b04      	cmp	r3, #4
 8003c46:	d00c      	beq.n	8003c62 <HAL_RCC_OscConfig+0x4a>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8003c48:	4b93      	ldr	r3, [pc, #588]	@ (8003e98 <HAL_RCC_OscConfig+0x280>)
 8003c4a:	689b      	ldr	r3, [r3, #8]
 8003c4c:	f003 030c 	and.w	r3, r3, #12
 8003c50:	2b08      	cmp	r3, #8
 8003c52:	d112      	bne.n	8003c7a <HAL_RCC_OscConfig+0x62>
 8003c54:	4b90      	ldr	r3, [pc, #576]	@ (8003e98 <HAL_RCC_OscConfig+0x280>)
 8003c56:	685b      	ldr	r3, [r3, #4]
 8003c58:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8003c5c:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8003c60:	d10b      	bne.n	8003c7a <HAL_RCC_OscConfig+0x62>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003c62:	4b8d      	ldr	r3, [pc, #564]	@ (8003e98 <HAL_RCC_OscConfig+0x280>)
 8003c64:	681b      	ldr	r3, [r3, #0]
 8003c66:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003c6a:	2b00      	cmp	r3, #0
 8003c6c:	d06c      	beq.n	8003d48 <HAL_RCC_OscConfig+0x130>
 8003c6e:	687b      	ldr	r3, [r7, #4]
 8003c70:	685b      	ldr	r3, [r3, #4]
 8003c72:	2b00      	cmp	r3, #0
 8003c74:	d168      	bne.n	8003d48 <HAL_RCC_OscConfig+0x130>
      {
        return HAL_ERROR;
 8003c76:	2301      	movs	r3, #1
 8003c78:	e275      	b.n	8004166 <HAL_RCC_OscConfig+0x54e>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8003c7a:	687b      	ldr	r3, [r7, #4]
 8003c7c:	685b      	ldr	r3, [r3, #4]
 8003c7e:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8003c82:	d106      	bne.n	8003c92 <HAL_RCC_OscConfig+0x7a>
 8003c84:	4b84      	ldr	r3, [pc, #528]	@ (8003e98 <HAL_RCC_OscConfig+0x280>)
 8003c86:	681b      	ldr	r3, [r3, #0]
 8003c88:	4a83      	ldr	r2, [pc, #524]	@ (8003e98 <HAL_RCC_OscConfig+0x280>)
 8003c8a:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8003c8e:	6013      	str	r3, [r2, #0]
 8003c90:	e02e      	b.n	8003cf0 <HAL_RCC_OscConfig+0xd8>
 8003c92:	687b      	ldr	r3, [r7, #4]
 8003c94:	685b      	ldr	r3, [r3, #4]
 8003c96:	2b00      	cmp	r3, #0
 8003c98:	d10c      	bne.n	8003cb4 <HAL_RCC_OscConfig+0x9c>
 8003c9a:	4b7f      	ldr	r3, [pc, #508]	@ (8003e98 <HAL_RCC_OscConfig+0x280>)
 8003c9c:	681b      	ldr	r3, [r3, #0]
 8003c9e:	4a7e      	ldr	r2, [pc, #504]	@ (8003e98 <HAL_RCC_OscConfig+0x280>)
 8003ca0:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8003ca4:	6013      	str	r3, [r2, #0]
 8003ca6:	4b7c      	ldr	r3, [pc, #496]	@ (8003e98 <HAL_RCC_OscConfig+0x280>)
 8003ca8:	681b      	ldr	r3, [r3, #0]
 8003caa:	4a7b      	ldr	r2, [pc, #492]	@ (8003e98 <HAL_RCC_OscConfig+0x280>)
 8003cac:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8003cb0:	6013      	str	r3, [r2, #0]
 8003cb2:	e01d      	b.n	8003cf0 <HAL_RCC_OscConfig+0xd8>
 8003cb4:	687b      	ldr	r3, [r7, #4]
 8003cb6:	685b      	ldr	r3, [r3, #4]
 8003cb8:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8003cbc:	d10c      	bne.n	8003cd8 <HAL_RCC_OscConfig+0xc0>
 8003cbe:	4b76      	ldr	r3, [pc, #472]	@ (8003e98 <HAL_RCC_OscConfig+0x280>)
 8003cc0:	681b      	ldr	r3, [r3, #0]
 8003cc2:	4a75      	ldr	r2, [pc, #468]	@ (8003e98 <HAL_RCC_OscConfig+0x280>)
 8003cc4:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8003cc8:	6013      	str	r3, [r2, #0]
 8003cca:	4b73      	ldr	r3, [pc, #460]	@ (8003e98 <HAL_RCC_OscConfig+0x280>)
 8003ccc:	681b      	ldr	r3, [r3, #0]
 8003cce:	4a72      	ldr	r2, [pc, #456]	@ (8003e98 <HAL_RCC_OscConfig+0x280>)
 8003cd0:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8003cd4:	6013      	str	r3, [r2, #0]
 8003cd6:	e00b      	b.n	8003cf0 <HAL_RCC_OscConfig+0xd8>
 8003cd8:	4b6f      	ldr	r3, [pc, #444]	@ (8003e98 <HAL_RCC_OscConfig+0x280>)
 8003cda:	681b      	ldr	r3, [r3, #0]
 8003cdc:	4a6e      	ldr	r2, [pc, #440]	@ (8003e98 <HAL_RCC_OscConfig+0x280>)
 8003cde:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8003ce2:	6013      	str	r3, [r2, #0]
 8003ce4:	4b6c      	ldr	r3, [pc, #432]	@ (8003e98 <HAL_RCC_OscConfig+0x280>)
 8003ce6:	681b      	ldr	r3, [r3, #0]
 8003ce8:	4a6b      	ldr	r2, [pc, #428]	@ (8003e98 <HAL_RCC_OscConfig+0x280>)
 8003cea:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8003cee:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8003cf0:	687b      	ldr	r3, [r7, #4]
 8003cf2:	685b      	ldr	r3, [r3, #4]
 8003cf4:	2b00      	cmp	r3, #0
 8003cf6:	d013      	beq.n	8003d20 <HAL_RCC_OscConfig+0x108>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003cf8:	f7fe f920 	bl	8001f3c <HAL_GetTick>
 8003cfc:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003cfe:	e008      	b.n	8003d12 <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8003d00:	f7fe f91c 	bl	8001f3c <HAL_GetTick>
 8003d04:	4602      	mov	r2, r0
 8003d06:	693b      	ldr	r3, [r7, #16]
 8003d08:	1ad3      	subs	r3, r2, r3
 8003d0a:	2b64      	cmp	r3, #100	@ 0x64
 8003d0c:	d901      	bls.n	8003d12 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8003d0e:	2303      	movs	r3, #3
 8003d10:	e229      	b.n	8004166 <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003d12:	4b61      	ldr	r3, [pc, #388]	@ (8003e98 <HAL_RCC_OscConfig+0x280>)
 8003d14:	681b      	ldr	r3, [r3, #0]
 8003d16:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003d1a:	2b00      	cmp	r3, #0
 8003d1c:	d0f0      	beq.n	8003d00 <HAL_RCC_OscConfig+0xe8>
 8003d1e:	e014      	b.n	8003d4a <HAL_RCC_OscConfig+0x132>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003d20:	f7fe f90c 	bl	8001f3c <HAL_GetTick>
 8003d24:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8003d26:	e008      	b.n	8003d3a <HAL_RCC_OscConfig+0x122>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8003d28:	f7fe f908 	bl	8001f3c <HAL_GetTick>
 8003d2c:	4602      	mov	r2, r0
 8003d2e:	693b      	ldr	r3, [r7, #16]
 8003d30:	1ad3      	subs	r3, r2, r3
 8003d32:	2b64      	cmp	r3, #100	@ 0x64
 8003d34:	d901      	bls.n	8003d3a <HAL_RCC_OscConfig+0x122>
          {
            return HAL_TIMEOUT;
 8003d36:	2303      	movs	r3, #3
 8003d38:	e215      	b.n	8004166 <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8003d3a:	4b57      	ldr	r3, [pc, #348]	@ (8003e98 <HAL_RCC_OscConfig+0x280>)
 8003d3c:	681b      	ldr	r3, [r3, #0]
 8003d3e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003d42:	2b00      	cmp	r3, #0
 8003d44:	d1f0      	bne.n	8003d28 <HAL_RCC_OscConfig+0x110>
 8003d46:	e000      	b.n	8003d4a <HAL_RCC_OscConfig+0x132>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003d48:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8003d4a:	687b      	ldr	r3, [r7, #4]
 8003d4c:	681b      	ldr	r3, [r3, #0]
 8003d4e:	f003 0302 	and.w	r3, r3, #2
 8003d52:	2b00      	cmp	r3, #0
 8003d54:	d069      	beq.n	8003e2a <HAL_RCC_OscConfig+0x212>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8003d56:	4b50      	ldr	r3, [pc, #320]	@ (8003e98 <HAL_RCC_OscConfig+0x280>)
 8003d58:	689b      	ldr	r3, [r3, #8]
 8003d5a:	f003 030c 	and.w	r3, r3, #12
 8003d5e:	2b00      	cmp	r3, #0
 8003d60:	d00b      	beq.n	8003d7a <HAL_RCC_OscConfig+0x162>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8003d62:	4b4d      	ldr	r3, [pc, #308]	@ (8003e98 <HAL_RCC_OscConfig+0x280>)
 8003d64:	689b      	ldr	r3, [r3, #8]
 8003d66:	f003 030c 	and.w	r3, r3, #12
 8003d6a:	2b08      	cmp	r3, #8
 8003d6c:	d11c      	bne.n	8003da8 <HAL_RCC_OscConfig+0x190>
 8003d6e:	4b4a      	ldr	r3, [pc, #296]	@ (8003e98 <HAL_RCC_OscConfig+0x280>)
 8003d70:	685b      	ldr	r3, [r3, #4]
 8003d72:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8003d76:	2b00      	cmp	r3, #0
 8003d78:	d116      	bne.n	8003da8 <HAL_RCC_OscConfig+0x190>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8003d7a:	4b47      	ldr	r3, [pc, #284]	@ (8003e98 <HAL_RCC_OscConfig+0x280>)
 8003d7c:	681b      	ldr	r3, [r3, #0]
 8003d7e:	f003 0302 	and.w	r3, r3, #2
 8003d82:	2b00      	cmp	r3, #0
 8003d84:	d005      	beq.n	8003d92 <HAL_RCC_OscConfig+0x17a>
 8003d86:	687b      	ldr	r3, [r7, #4]
 8003d88:	68db      	ldr	r3, [r3, #12]
 8003d8a:	2b01      	cmp	r3, #1
 8003d8c:	d001      	beq.n	8003d92 <HAL_RCC_OscConfig+0x17a>
      {
        return HAL_ERROR;
 8003d8e:	2301      	movs	r3, #1
 8003d90:	e1e9      	b.n	8004166 <HAL_RCC_OscConfig+0x54e>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003d92:	4b41      	ldr	r3, [pc, #260]	@ (8003e98 <HAL_RCC_OscConfig+0x280>)
 8003d94:	681b      	ldr	r3, [r3, #0]
 8003d96:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8003d9a:	687b      	ldr	r3, [r7, #4]
 8003d9c:	691b      	ldr	r3, [r3, #16]
 8003d9e:	00db      	lsls	r3, r3, #3
 8003da0:	493d      	ldr	r1, [pc, #244]	@ (8003e98 <HAL_RCC_OscConfig+0x280>)
 8003da2:	4313      	orrs	r3, r2
 8003da4:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8003da6:	e040      	b.n	8003e2a <HAL_RCC_OscConfig+0x212>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 8003da8:	687b      	ldr	r3, [r7, #4]
 8003daa:	68db      	ldr	r3, [r3, #12]
 8003dac:	2b00      	cmp	r3, #0
 8003dae:	d023      	beq.n	8003df8 <HAL_RCC_OscConfig+0x1e0>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8003db0:	4b39      	ldr	r3, [pc, #228]	@ (8003e98 <HAL_RCC_OscConfig+0x280>)
 8003db2:	681b      	ldr	r3, [r3, #0]
 8003db4:	4a38      	ldr	r2, [pc, #224]	@ (8003e98 <HAL_RCC_OscConfig+0x280>)
 8003db6:	f043 0301 	orr.w	r3, r3, #1
 8003dba:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003dbc:	f7fe f8be 	bl	8001f3c <HAL_GetTick>
 8003dc0:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003dc2:	e008      	b.n	8003dd6 <HAL_RCC_OscConfig+0x1be>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8003dc4:	f7fe f8ba 	bl	8001f3c <HAL_GetTick>
 8003dc8:	4602      	mov	r2, r0
 8003dca:	693b      	ldr	r3, [r7, #16]
 8003dcc:	1ad3      	subs	r3, r2, r3
 8003dce:	2b02      	cmp	r3, #2
 8003dd0:	d901      	bls.n	8003dd6 <HAL_RCC_OscConfig+0x1be>
          {
            return HAL_TIMEOUT;
 8003dd2:	2303      	movs	r3, #3
 8003dd4:	e1c7      	b.n	8004166 <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003dd6:	4b30      	ldr	r3, [pc, #192]	@ (8003e98 <HAL_RCC_OscConfig+0x280>)
 8003dd8:	681b      	ldr	r3, [r3, #0]
 8003dda:	f003 0302 	and.w	r3, r3, #2
 8003dde:	2b00      	cmp	r3, #0
 8003de0:	d0f0      	beq.n	8003dc4 <HAL_RCC_OscConfig+0x1ac>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003de2:	4b2d      	ldr	r3, [pc, #180]	@ (8003e98 <HAL_RCC_OscConfig+0x280>)
 8003de4:	681b      	ldr	r3, [r3, #0]
 8003de6:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8003dea:	687b      	ldr	r3, [r7, #4]
 8003dec:	691b      	ldr	r3, [r3, #16]
 8003dee:	00db      	lsls	r3, r3, #3
 8003df0:	4929      	ldr	r1, [pc, #164]	@ (8003e98 <HAL_RCC_OscConfig+0x280>)
 8003df2:	4313      	orrs	r3, r2
 8003df4:	600b      	str	r3, [r1, #0]
 8003df6:	e018      	b.n	8003e2a <HAL_RCC_OscConfig+0x212>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8003df8:	4b27      	ldr	r3, [pc, #156]	@ (8003e98 <HAL_RCC_OscConfig+0x280>)
 8003dfa:	681b      	ldr	r3, [r3, #0]
 8003dfc:	4a26      	ldr	r2, [pc, #152]	@ (8003e98 <HAL_RCC_OscConfig+0x280>)
 8003dfe:	f023 0301 	bic.w	r3, r3, #1
 8003e02:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003e04:	f7fe f89a 	bl	8001f3c <HAL_GetTick>
 8003e08:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8003e0a:	e008      	b.n	8003e1e <HAL_RCC_OscConfig+0x206>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8003e0c:	f7fe f896 	bl	8001f3c <HAL_GetTick>
 8003e10:	4602      	mov	r2, r0
 8003e12:	693b      	ldr	r3, [r7, #16]
 8003e14:	1ad3      	subs	r3, r2, r3
 8003e16:	2b02      	cmp	r3, #2
 8003e18:	d901      	bls.n	8003e1e <HAL_RCC_OscConfig+0x206>
          {
            return HAL_TIMEOUT;
 8003e1a:	2303      	movs	r3, #3
 8003e1c:	e1a3      	b.n	8004166 <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8003e1e:	4b1e      	ldr	r3, [pc, #120]	@ (8003e98 <HAL_RCC_OscConfig+0x280>)
 8003e20:	681b      	ldr	r3, [r3, #0]
 8003e22:	f003 0302 	and.w	r3, r3, #2
 8003e26:	2b00      	cmp	r3, #0
 8003e28:	d1f0      	bne.n	8003e0c <HAL_RCC_OscConfig+0x1f4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8003e2a:	687b      	ldr	r3, [r7, #4]
 8003e2c:	681b      	ldr	r3, [r3, #0]
 8003e2e:	f003 0308 	and.w	r3, r3, #8
 8003e32:	2b00      	cmp	r3, #0
 8003e34:	d038      	beq.n	8003ea8 <HAL_RCC_OscConfig+0x290>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 8003e36:	687b      	ldr	r3, [r7, #4]
 8003e38:	695b      	ldr	r3, [r3, #20]
 8003e3a:	2b00      	cmp	r3, #0
 8003e3c:	d019      	beq.n	8003e72 <HAL_RCC_OscConfig+0x25a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8003e3e:	4b16      	ldr	r3, [pc, #88]	@ (8003e98 <HAL_RCC_OscConfig+0x280>)
 8003e40:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8003e42:	4a15      	ldr	r2, [pc, #84]	@ (8003e98 <HAL_RCC_OscConfig+0x280>)
 8003e44:	f043 0301 	orr.w	r3, r3, #1
 8003e48:	6753      	str	r3, [r2, #116]	@ 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003e4a:	f7fe f877 	bl	8001f3c <HAL_GetTick>
 8003e4e:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003e50:	e008      	b.n	8003e64 <HAL_RCC_OscConfig+0x24c>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8003e52:	f7fe f873 	bl	8001f3c <HAL_GetTick>
 8003e56:	4602      	mov	r2, r0
 8003e58:	693b      	ldr	r3, [r7, #16]
 8003e5a:	1ad3      	subs	r3, r2, r3
 8003e5c:	2b02      	cmp	r3, #2
 8003e5e:	d901      	bls.n	8003e64 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8003e60:	2303      	movs	r3, #3
 8003e62:	e180      	b.n	8004166 <HAL_RCC_OscConfig+0x54e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003e64:	4b0c      	ldr	r3, [pc, #48]	@ (8003e98 <HAL_RCC_OscConfig+0x280>)
 8003e66:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8003e68:	f003 0302 	and.w	r3, r3, #2
 8003e6c:	2b00      	cmp	r3, #0
 8003e6e:	d0f0      	beq.n	8003e52 <HAL_RCC_OscConfig+0x23a>
 8003e70:	e01a      	b.n	8003ea8 <HAL_RCC_OscConfig+0x290>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8003e72:	4b09      	ldr	r3, [pc, #36]	@ (8003e98 <HAL_RCC_OscConfig+0x280>)
 8003e74:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8003e76:	4a08      	ldr	r2, [pc, #32]	@ (8003e98 <HAL_RCC_OscConfig+0x280>)
 8003e78:	f023 0301 	bic.w	r3, r3, #1
 8003e7c:	6753      	str	r3, [r2, #116]	@ 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003e7e:	f7fe f85d 	bl	8001f3c <HAL_GetTick>
 8003e82:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003e84:	e00a      	b.n	8003e9c <HAL_RCC_OscConfig+0x284>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8003e86:	f7fe f859 	bl	8001f3c <HAL_GetTick>
 8003e8a:	4602      	mov	r2, r0
 8003e8c:	693b      	ldr	r3, [r7, #16]
 8003e8e:	1ad3      	subs	r3, r2, r3
 8003e90:	2b02      	cmp	r3, #2
 8003e92:	d903      	bls.n	8003e9c <HAL_RCC_OscConfig+0x284>
        {
          return HAL_TIMEOUT;
 8003e94:	2303      	movs	r3, #3
 8003e96:	e166      	b.n	8004166 <HAL_RCC_OscConfig+0x54e>
 8003e98:	40023800 	.word	0x40023800
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003e9c:	4b92      	ldr	r3, [pc, #584]	@ (80040e8 <HAL_RCC_OscConfig+0x4d0>)
 8003e9e:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8003ea0:	f003 0302 	and.w	r3, r3, #2
 8003ea4:	2b00      	cmp	r3, #0
 8003ea6:	d1ee      	bne.n	8003e86 <HAL_RCC_OscConfig+0x26e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8003ea8:	687b      	ldr	r3, [r7, #4]
 8003eaa:	681b      	ldr	r3, [r3, #0]
 8003eac:	f003 0304 	and.w	r3, r3, #4
 8003eb0:	2b00      	cmp	r3, #0
 8003eb2:	f000 80a4 	beq.w	8003ffe <HAL_RCC_OscConfig+0x3e6>
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8003eb6:	4b8c      	ldr	r3, [pc, #560]	@ (80040e8 <HAL_RCC_OscConfig+0x4d0>)
 8003eb8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003eba:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8003ebe:	2b00      	cmp	r3, #0
 8003ec0:	d10d      	bne.n	8003ede <HAL_RCC_OscConfig+0x2c6>
    {
      /* Enable Power Clock*/
      __HAL_RCC_PWR_CLK_ENABLE();
 8003ec2:	4b89      	ldr	r3, [pc, #548]	@ (80040e8 <HAL_RCC_OscConfig+0x4d0>)
 8003ec4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003ec6:	4a88      	ldr	r2, [pc, #544]	@ (80040e8 <HAL_RCC_OscConfig+0x4d0>)
 8003ec8:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8003ecc:	6413      	str	r3, [r2, #64]	@ 0x40
 8003ece:	4b86      	ldr	r3, [pc, #536]	@ (80040e8 <HAL_RCC_OscConfig+0x4d0>)
 8003ed0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003ed2:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8003ed6:	60bb      	str	r3, [r7, #8]
 8003ed8:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8003eda:	2301      	movs	r3, #1
 8003edc:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8003ede:	4b83      	ldr	r3, [pc, #524]	@ (80040ec <HAL_RCC_OscConfig+0x4d4>)
 8003ee0:	681b      	ldr	r3, [r3, #0]
 8003ee2:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003ee6:	2b00      	cmp	r3, #0
 8003ee8:	d118      	bne.n	8003f1c <HAL_RCC_OscConfig+0x304>
    {
      /* Enable write access to Backup domain */
      PWR->CR1 |= PWR_CR1_DBP;
 8003eea:	4b80      	ldr	r3, [pc, #512]	@ (80040ec <HAL_RCC_OscConfig+0x4d4>)
 8003eec:	681b      	ldr	r3, [r3, #0]
 8003eee:	4a7f      	ldr	r2, [pc, #508]	@ (80040ec <HAL_RCC_OscConfig+0x4d4>)
 8003ef0:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8003ef4:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8003ef6:	f7fe f821 	bl	8001f3c <HAL_GetTick>
 8003efa:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8003efc:	e008      	b.n	8003f10 <HAL_RCC_OscConfig+0x2f8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003efe:	f7fe f81d 	bl	8001f3c <HAL_GetTick>
 8003f02:	4602      	mov	r2, r0
 8003f04:	693b      	ldr	r3, [r7, #16]
 8003f06:	1ad3      	subs	r3, r2, r3
 8003f08:	2b64      	cmp	r3, #100	@ 0x64
 8003f0a:	d901      	bls.n	8003f10 <HAL_RCC_OscConfig+0x2f8>
        {
          return HAL_TIMEOUT;
 8003f0c:	2303      	movs	r3, #3
 8003f0e:	e12a      	b.n	8004166 <HAL_RCC_OscConfig+0x54e>
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8003f10:	4b76      	ldr	r3, [pc, #472]	@ (80040ec <HAL_RCC_OscConfig+0x4d4>)
 8003f12:	681b      	ldr	r3, [r3, #0]
 8003f14:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003f18:	2b00      	cmp	r3, #0
 8003f1a:	d0f0      	beq.n	8003efe <HAL_RCC_OscConfig+0x2e6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8003f1c:	687b      	ldr	r3, [r7, #4]
 8003f1e:	689b      	ldr	r3, [r3, #8]
 8003f20:	2b01      	cmp	r3, #1
 8003f22:	d106      	bne.n	8003f32 <HAL_RCC_OscConfig+0x31a>
 8003f24:	4b70      	ldr	r3, [pc, #448]	@ (80040e8 <HAL_RCC_OscConfig+0x4d0>)
 8003f26:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003f28:	4a6f      	ldr	r2, [pc, #444]	@ (80040e8 <HAL_RCC_OscConfig+0x4d0>)
 8003f2a:	f043 0301 	orr.w	r3, r3, #1
 8003f2e:	6713      	str	r3, [r2, #112]	@ 0x70
 8003f30:	e02d      	b.n	8003f8e <HAL_RCC_OscConfig+0x376>
 8003f32:	687b      	ldr	r3, [r7, #4]
 8003f34:	689b      	ldr	r3, [r3, #8]
 8003f36:	2b00      	cmp	r3, #0
 8003f38:	d10c      	bne.n	8003f54 <HAL_RCC_OscConfig+0x33c>
 8003f3a:	4b6b      	ldr	r3, [pc, #428]	@ (80040e8 <HAL_RCC_OscConfig+0x4d0>)
 8003f3c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003f3e:	4a6a      	ldr	r2, [pc, #424]	@ (80040e8 <HAL_RCC_OscConfig+0x4d0>)
 8003f40:	f023 0301 	bic.w	r3, r3, #1
 8003f44:	6713      	str	r3, [r2, #112]	@ 0x70
 8003f46:	4b68      	ldr	r3, [pc, #416]	@ (80040e8 <HAL_RCC_OscConfig+0x4d0>)
 8003f48:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003f4a:	4a67      	ldr	r2, [pc, #412]	@ (80040e8 <HAL_RCC_OscConfig+0x4d0>)
 8003f4c:	f023 0304 	bic.w	r3, r3, #4
 8003f50:	6713      	str	r3, [r2, #112]	@ 0x70
 8003f52:	e01c      	b.n	8003f8e <HAL_RCC_OscConfig+0x376>
 8003f54:	687b      	ldr	r3, [r7, #4]
 8003f56:	689b      	ldr	r3, [r3, #8]
 8003f58:	2b05      	cmp	r3, #5
 8003f5a:	d10c      	bne.n	8003f76 <HAL_RCC_OscConfig+0x35e>
 8003f5c:	4b62      	ldr	r3, [pc, #392]	@ (80040e8 <HAL_RCC_OscConfig+0x4d0>)
 8003f5e:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003f60:	4a61      	ldr	r2, [pc, #388]	@ (80040e8 <HAL_RCC_OscConfig+0x4d0>)
 8003f62:	f043 0304 	orr.w	r3, r3, #4
 8003f66:	6713      	str	r3, [r2, #112]	@ 0x70
 8003f68:	4b5f      	ldr	r3, [pc, #380]	@ (80040e8 <HAL_RCC_OscConfig+0x4d0>)
 8003f6a:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003f6c:	4a5e      	ldr	r2, [pc, #376]	@ (80040e8 <HAL_RCC_OscConfig+0x4d0>)
 8003f6e:	f043 0301 	orr.w	r3, r3, #1
 8003f72:	6713      	str	r3, [r2, #112]	@ 0x70
 8003f74:	e00b      	b.n	8003f8e <HAL_RCC_OscConfig+0x376>
 8003f76:	4b5c      	ldr	r3, [pc, #368]	@ (80040e8 <HAL_RCC_OscConfig+0x4d0>)
 8003f78:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003f7a:	4a5b      	ldr	r2, [pc, #364]	@ (80040e8 <HAL_RCC_OscConfig+0x4d0>)
 8003f7c:	f023 0301 	bic.w	r3, r3, #1
 8003f80:	6713      	str	r3, [r2, #112]	@ 0x70
 8003f82:	4b59      	ldr	r3, [pc, #356]	@ (80040e8 <HAL_RCC_OscConfig+0x4d0>)
 8003f84:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003f86:	4a58      	ldr	r2, [pc, #352]	@ (80040e8 <HAL_RCC_OscConfig+0x4d0>)
 8003f88:	f023 0304 	bic.w	r3, r3, #4
 8003f8c:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8003f8e:	687b      	ldr	r3, [r7, #4]
 8003f90:	689b      	ldr	r3, [r3, #8]
 8003f92:	2b00      	cmp	r3, #0
 8003f94:	d015      	beq.n	8003fc2 <HAL_RCC_OscConfig+0x3aa>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003f96:	f7fd ffd1 	bl	8001f3c <HAL_GetTick>
 8003f9a:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003f9c:	e00a      	b.n	8003fb4 <HAL_RCC_OscConfig+0x39c>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003f9e:	f7fd ffcd 	bl	8001f3c <HAL_GetTick>
 8003fa2:	4602      	mov	r2, r0
 8003fa4:	693b      	ldr	r3, [r7, #16]
 8003fa6:	1ad3      	subs	r3, r2, r3
 8003fa8:	f241 3288 	movw	r2, #5000	@ 0x1388
 8003fac:	4293      	cmp	r3, r2
 8003fae:	d901      	bls.n	8003fb4 <HAL_RCC_OscConfig+0x39c>
        {
          return HAL_TIMEOUT;
 8003fb0:	2303      	movs	r3, #3
 8003fb2:	e0d8      	b.n	8004166 <HAL_RCC_OscConfig+0x54e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003fb4:	4b4c      	ldr	r3, [pc, #304]	@ (80040e8 <HAL_RCC_OscConfig+0x4d0>)
 8003fb6:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003fb8:	f003 0302 	and.w	r3, r3, #2
 8003fbc:	2b00      	cmp	r3, #0
 8003fbe:	d0ee      	beq.n	8003f9e <HAL_RCC_OscConfig+0x386>
 8003fc0:	e014      	b.n	8003fec <HAL_RCC_OscConfig+0x3d4>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003fc2:	f7fd ffbb 	bl	8001f3c <HAL_GetTick>
 8003fc6:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003fc8:	e00a      	b.n	8003fe0 <HAL_RCC_OscConfig+0x3c8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003fca:	f7fd ffb7 	bl	8001f3c <HAL_GetTick>
 8003fce:	4602      	mov	r2, r0
 8003fd0:	693b      	ldr	r3, [r7, #16]
 8003fd2:	1ad3      	subs	r3, r2, r3
 8003fd4:	f241 3288 	movw	r2, #5000	@ 0x1388
 8003fd8:	4293      	cmp	r3, r2
 8003fda:	d901      	bls.n	8003fe0 <HAL_RCC_OscConfig+0x3c8>
        {
          return HAL_TIMEOUT;
 8003fdc:	2303      	movs	r3, #3
 8003fde:	e0c2      	b.n	8004166 <HAL_RCC_OscConfig+0x54e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003fe0:	4b41      	ldr	r3, [pc, #260]	@ (80040e8 <HAL_RCC_OscConfig+0x4d0>)
 8003fe2:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003fe4:	f003 0302 	and.w	r3, r3, #2
 8003fe8:	2b00      	cmp	r3, #0
 8003fea:	d1ee      	bne.n	8003fca <HAL_RCC_OscConfig+0x3b2>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8003fec:	7dfb      	ldrb	r3, [r7, #23]
 8003fee:	2b01      	cmp	r3, #1
 8003ff0:	d105      	bne.n	8003ffe <HAL_RCC_OscConfig+0x3e6>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003ff2:	4b3d      	ldr	r3, [pc, #244]	@ (80040e8 <HAL_RCC_OscConfig+0x4d0>)
 8003ff4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003ff6:	4a3c      	ldr	r2, [pc, #240]	@ (80040e8 <HAL_RCC_OscConfig+0x4d0>)
 8003ff8:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8003ffc:	6413      	str	r3, [r2, #64]	@ 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8003ffe:	687b      	ldr	r3, [r7, #4]
 8004000:	699b      	ldr	r3, [r3, #24]
 8004002:	2b00      	cmp	r3, #0
 8004004:	f000 80ae 	beq.w	8004164 <HAL_RCC_OscConfig+0x54c>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8004008:	4b37      	ldr	r3, [pc, #220]	@ (80040e8 <HAL_RCC_OscConfig+0x4d0>)
 800400a:	689b      	ldr	r3, [r3, #8]
 800400c:	f003 030c 	and.w	r3, r3, #12
 8004010:	2b08      	cmp	r3, #8
 8004012:	d06d      	beq.n	80040f0 <HAL_RCC_OscConfig+0x4d8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8004014:	687b      	ldr	r3, [r7, #4]
 8004016:	699b      	ldr	r3, [r3, #24]
 8004018:	2b02      	cmp	r3, #2
 800401a:	d14b      	bne.n	80040b4 <HAL_RCC_OscConfig+0x49c>
#if defined (RCC_PLLCFGR_PLLR)
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
#endif

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800401c:	4b32      	ldr	r3, [pc, #200]	@ (80040e8 <HAL_RCC_OscConfig+0x4d0>)
 800401e:	681b      	ldr	r3, [r3, #0]
 8004020:	4a31      	ldr	r2, [pc, #196]	@ (80040e8 <HAL_RCC_OscConfig+0x4d0>)
 8004022:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8004026:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004028:	f7fd ff88 	bl	8001f3c <HAL_GetTick>
 800402c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800402e:	e008      	b.n	8004042 <HAL_RCC_OscConfig+0x42a>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004030:	f7fd ff84 	bl	8001f3c <HAL_GetTick>
 8004034:	4602      	mov	r2, r0
 8004036:	693b      	ldr	r3, [r7, #16]
 8004038:	1ad3      	subs	r3, r2, r3
 800403a:	2b02      	cmp	r3, #2
 800403c:	d901      	bls.n	8004042 <HAL_RCC_OscConfig+0x42a>
          {
            return HAL_TIMEOUT;
 800403e:	2303      	movs	r3, #3
 8004040:	e091      	b.n	8004166 <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004042:	4b29      	ldr	r3, [pc, #164]	@ (80040e8 <HAL_RCC_OscConfig+0x4d0>)
 8004044:	681b      	ldr	r3, [r3, #0]
 8004046:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800404a:	2b00      	cmp	r3, #0
 800404c:	d1f0      	bne.n	8004030 <HAL_RCC_OscConfig+0x418>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
#if defined (RCC_PLLCFGR_PLLR)
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 800404e:	687b      	ldr	r3, [r7, #4]
 8004050:	69da      	ldr	r2, [r3, #28]
 8004052:	687b      	ldr	r3, [r7, #4]
 8004054:	6a1b      	ldr	r3, [r3, #32]
 8004056:	431a      	orrs	r2, r3
 8004058:	687b      	ldr	r3, [r7, #4]
 800405a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800405c:	019b      	lsls	r3, r3, #6
 800405e:	431a      	orrs	r2, r3
 8004060:	687b      	ldr	r3, [r7, #4]
 8004062:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004064:	085b      	lsrs	r3, r3, #1
 8004066:	3b01      	subs	r3, #1
 8004068:	041b      	lsls	r3, r3, #16
 800406a:	431a      	orrs	r2, r3
 800406c:	687b      	ldr	r3, [r7, #4]
 800406e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004070:	061b      	lsls	r3, r3, #24
 8004072:	431a      	orrs	r2, r3
 8004074:	687b      	ldr	r3, [r7, #4]
 8004076:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004078:	071b      	lsls	r3, r3, #28
 800407a:	491b      	ldr	r1, [pc, #108]	@ (80040e8 <HAL_RCC_OscConfig+0x4d0>)
 800407c:	4313      	orrs	r3, r2
 800407e:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ);
#endif

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8004080:	4b19      	ldr	r3, [pc, #100]	@ (80040e8 <HAL_RCC_OscConfig+0x4d0>)
 8004082:	681b      	ldr	r3, [r3, #0]
 8004084:	4a18      	ldr	r2, [pc, #96]	@ (80040e8 <HAL_RCC_OscConfig+0x4d0>)
 8004086:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 800408a:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800408c:	f7fd ff56 	bl	8001f3c <HAL_GetTick>
 8004090:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8004092:	e008      	b.n	80040a6 <HAL_RCC_OscConfig+0x48e>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004094:	f7fd ff52 	bl	8001f3c <HAL_GetTick>
 8004098:	4602      	mov	r2, r0
 800409a:	693b      	ldr	r3, [r7, #16]
 800409c:	1ad3      	subs	r3, r2, r3
 800409e:	2b02      	cmp	r3, #2
 80040a0:	d901      	bls.n	80040a6 <HAL_RCC_OscConfig+0x48e>
          {
            return HAL_TIMEOUT;
 80040a2:	2303      	movs	r3, #3
 80040a4:	e05f      	b.n	8004166 <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80040a6:	4b10      	ldr	r3, [pc, #64]	@ (80040e8 <HAL_RCC_OscConfig+0x4d0>)
 80040a8:	681b      	ldr	r3, [r3, #0]
 80040aa:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80040ae:	2b00      	cmp	r3, #0
 80040b0:	d0f0      	beq.n	8004094 <HAL_RCC_OscConfig+0x47c>
 80040b2:	e057      	b.n	8004164 <HAL_RCC_OscConfig+0x54c>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80040b4:	4b0c      	ldr	r3, [pc, #48]	@ (80040e8 <HAL_RCC_OscConfig+0x4d0>)
 80040b6:	681b      	ldr	r3, [r3, #0]
 80040b8:	4a0b      	ldr	r2, [pc, #44]	@ (80040e8 <HAL_RCC_OscConfig+0x4d0>)
 80040ba:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 80040be:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80040c0:	f7fd ff3c 	bl	8001f3c <HAL_GetTick>
 80040c4:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80040c6:	e008      	b.n	80040da <HAL_RCC_OscConfig+0x4c2>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80040c8:	f7fd ff38 	bl	8001f3c <HAL_GetTick>
 80040cc:	4602      	mov	r2, r0
 80040ce:	693b      	ldr	r3, [r7, #16]
 80040d0:	1ad3      	subs	r3, r2, r3
 80040d2:	2b02      	cmp	r3, #2
 80040d4:	d901      	bls.n	80040da <HAL_RCC_OscConfig+0x4c2>
          {
            return HAL_TIMEOUT;
 80040d6:	2303      	movs	r3, #3
 80040d8:	e045      	b.n	8004166 <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80040da:	4b03      	ldr	r3, [pc, #12]	@ (80040e8 <HAL_RCC_OscConfig+0x4d0>)
 80040dc:	681b      	ldr	r3, [r3, #0]
 80040de:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80040e2:	2b00      	cmp	r3, #0
 80040e4:	d1f0      	bne.n	80040c8 <HAL_RCC_OscConfig+0x4b0>
 80040e6:	e03d      	b.n	8004164 <HAL_RCC_OscConfig+0x54c>
 80040e8:	40023800 	.word	0x40023800
 80040ec:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      pll_config = RCC->PLLCFGR;
 80040f0:	4b1f      	ldr	r3, [pc, #124]	@ (8004170 <HAL_RCC_OscConfig+0x558>)
 80040f2:	685b      	ldr	r3, [r3, #4]
 80040f4:	60fb      	str	r3, [r7, #12]
#if defined (RCC_PLLCFGR_PLLR)
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80040f6:	687b      	ldr	r3, [r7, #4]
 80040f8:	699b      	ldr	r3, [r3, #24]
 80040fa:	2b01      	cmp	r3, #1
 80040fc:	d030      	beq.n	8004160 <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80040fe:	68fb      	ldr	r3, [r7, #12]
 8004100:	f403 0280 	and.w	r2, r3, #4194304	@ 0x400000
 8004104:	687b      	ldr	r3, [r7, #4]
 8004106:	69db      	ldr	r3, [r3, #28]
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8004108:	429a      	cmp	r2, r3
 800410a:	d129      	bne.n	8004160 <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 800410c:	68fb      	ldr	r3, [r7, #12]
 800410e:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 8004112:	687b      	ldr	r3, [r7, #4]
 8004114:	6a1b      	ldr	r3, [r3, #32]
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8004116:	429a      	cmp	r2, r3
 8004118:	d122      	bne.n	8004160 <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 800411a:	68fa      	ldr	r2, [r7, #12]
 800411c:	f647 73c0 	movw	r3, #32704	@ 0x7fc0
 8004120:	4013      	ands	r3, r2
 8004122:	687a      	ldr	r2, [r7, #4]
 8004124:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 8004126:	0192      	lsls	r2, r2, #6
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8004128:	4293      	cmp	r3, r2
 800412a:	d119      	bne.n	8004160 <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
 800412c:	68fb      	ldr	r3, [r7, #12]
 800412e:	f403 3240 	and.w	r2, r3, #196608	@ 0x30000
 8004132:	687b      	ldr	r3, [r7, #4]
 8004134:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004136:	085b      	lsrs	r3, r3, #1
 8004138:	3b01      	subs	r3, #1
 800413a:	041b      	lsls	r3, r3, #16
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 800413c:	429a      	cmp	r2, r3
 800413e:	d10f      	bne.n	8004160 <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 8004140:	68fb      	ldr	r3, [r7, #12]
 8004142:	f003 6270 	and.w	r2, r3, #251658240	@ 0xf000000
 8004146:	687b      	ldr	r3, [r7, #4]
 8004148:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800414a:	061b      	lsls	r3, r3, #24
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
 800414c:	429a      	cmp	r2, r3
 800414e:	d107      	bne.n	8004160 <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
 8004150:	68fb      	ldr	r3, [r7, #12]
 8004152:	f003 42e0 	and.w	r2, r3, #1879048192	@ 0x70000000
 8004156:	687b      	ldr	r3, [r7, #4]
 8004158:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800415a:	071b      	lsls	r3, r3, #28
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 800415c:	429a      	cmp	r2, r3
 800415e:	d001      	beq.n	8004164 <HAL_RCC_OscConfig+0x54c>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
#endif
      {
        return HAL_ERROR;
 8004160:	2301      	movs	r3, #1
 8004162:	e000      	b.n	8004166 <HAL_RCC_OscConfig+0x54e>
      }
    }
  }
  return HAL_OK;
 8004164:	2300      	movs	r3, #0
}
 8004166:	4618      	mov	r0, r3
 8004168:	3718      	adds	r7, #24
 800416a:	46bd      	mov	sp, r7
 800416c:	bd80      	pop	{r7, pc}
 800416e:	bf00      	nop
 8004170:	40023800 	.word	0x40023800

08004174 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8004174:	b580      	push	{r7, lr}
 8004176:	b084      	sub	sp, #16
 8004178:	af00      	add	r7, sp, #0
 800417a:	6078      	str	r0, [r7, #4]
 800417c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0;
 800417e:	2300      	movs	r3, #0
 8004180:	60fb      	str	r3, [r7, #12]

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8004182:	687b      	ldr	r3, [r7, #4]
 8004184:	2b00      	cmp	r3, #0
 8004186:	d101      	bne.n	800418c <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 8004188:	2301      	movs	r3, #1
 800418a:	e0d0      	b.n	800432e <HAL_RCC_ClockConfig+0x1ba>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
     must be correctly programmed according to the frequency of the CPU clock
     (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 800418c:	4b6a      	ldr	r3, [pc, #424]	@ (8004338 <HAL_RCC_ClockConfig+0x1c4>)
 800418e:	681b      	ldr	r3, [r3, #0]
 8004190:	f003 030f 	and.w	r3, r3, #15
 8004194:	683a      	ldr	r2, [r7, #0]
 8004196:	429a      	cmp	r2, r3
 8004198:	d910      	bls.n	80041bc <HAL_RCC_ClockConfig+0x48>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800419a:	4b67      	ldr	r3, [pc, #412]	@ (8004338 <HAL_RCC_ClockConfig+0x1c4>)
 800419c:	681b      	ldr	r3, [r3, #0]
 800419e:	f023 020f 	bic.w	r2, r3, #15
 80041a2:	4965      	ldr	r1, [pc, #404]	@ (8004338 <HAL_RCC_ClockConfig+0x1c4>)
 80041a4:	683b      	ldr	r3, [r7, #0]
 80041a6:	4313      	orrs	r3, r2
 80041a8:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80041aa:	4b63      	ldr	r3, [pc, #396]	@ (8004338 <HAL_RCC_ClockConfig+0x1c4>)
 80041ac:	681b      	ldr	r3, [r3, #0]
 80041ae:	f003 030f 	and.w	r3, r3, #15
 80041b2:	683a      	ldr	r2, [r7, #0]
 80041b4:	429a      	cmp	r2, r3
 80041b6:	d001      	beq.n	80041bc <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 80041b8:	2301      	movs	r3, #1
 80041ba:	e0b8      	b.n	800432e <HAL_RCC_ClockConfig+0x1ba>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80041bc:	687b      	ldr	r3, [r7, #4]
 80041be:	681b      	ldr	r3, [r3, #0]
 80041c0:	f003 0302 	and.w	r3, r3, #2
 80041c4:	2b00      	cmp	r3, #0
 80041c6:	d020      	beq.n	800420a <HAL_RCC_ClockConfig+0x96>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80041c8:	687b      	ldr	r3, [r7, #4]
 80041ca:	681b      	ldr	r3, [r3, #0]
 80041cc:	f003 0304 	and.w	r3, r3, #4
 80041d0:	2b00      	cmp	r3, #0
 80041d2:	d005      	beq.n	80041e0 <HAL_RCC_ClockConfig+0x6c>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80041d4:	4b59      	ldr	r3, [pc, #356]	@ (800433c <HAL_RCC_ClockConfig+0x1c8>)
 80041d6:	689b      	ldr	r3, [r3, #8]
 80041d8:	4a58      	ldr	r2, [pc, #352]	@ (800433c <HAL_RCC_ClockConfig+0x1c8>)
 80041da:	f443 53e0 	orr.w	r3, r3, #7168	@ 0x1c00
 80041de:	6093      	str	r3, [r2, #8]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80041e0:	687b      	ldr	r3, [r7, #4]
 80041e2:	681b      	ldr	r3, [r3, #0]
 80041e4:	f003 0308 	and.w	r3, r3, #8
 80041e8:	2b00      	cmp	r3, #0
 80041ea:	d005      	beq.n	80041f8 <HAL_RCC_ClockConfig+0x84>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80041ec:	4b53      	ldr	r3, [pc, #332]	@ (800433c <HAL_RCC_ClockConfig+0x1c8>)
 80041ee:	689b      	ldr	r3, [r3, #8]
 80041f0:	4a52      	ldr	r2, [pc, #328]	@ (800433c <HAL_RCC_ClockConfig+0x1c8>)
 80041f2:	f443 4360 	orr.w	r3, r3, #57344	@ 0xe000
 80041f6:	6093      	str	r3, [r2, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80041f8:	4b50      	ldr	r3, [pc, #320]	@ (800433c <HAL_RCC_ClockConfig+0x1c8>)
 80041fa:	689b      	ldr	r3, [r3, #8]
 80041fc:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8004200:	687b      	ldr	r3, [r7, #4]
 8004202:	689b      	ldr	r3, [r3, #8]
 8004204:	494d      	ldr	r1, [pc, #308]	@ (800433c <HAL_RCC_ClockConfig+0x1c8>)
 8004206:	4313      	orrs	r3, r2
 8004208:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800420a:	687b      	ldr	r3, [r7, #4]
 800420c:	681b      	ldr	r3, [r3, #0]
 800420e:	f003 0301 	and.w	r3, r3, #1
 8004212:	2b00      	cmp	r3, #0
 8004214:	d040      	beq.n	8004298 <HAL_RCC_ClockConfig+0x124>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8004216:	687b      	ldr	r3, [r7, #4]
 8004218:	685b      	ldr	r3, [r3, #4]
 800421a:	2b01      	cmp	r3, #1
 800421c:	d107      	bne.n	800422e <HAL_RCC_ClockConfig+0xba>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800421e:	4b47      	ldr	r3, [pc, #284]	@ (800433c <HAL_RCC_ClockConfig+0x1c8>)
 8004220:	681b      	ldr	r3, [r3, #0]
 8004222:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8004226:	2b00      	cmp	r3, #0
 8004228:	d115      	bne.n	8004256 <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 800422a:	2301      	movs	r3, #1
 800422c:	e07f      	b.n	800432e <HAL_RCC_ClockConfig+0x1ba>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800422e:	687b      	ldr	r3, [r7, #4]
 8004230:	685b      	ldr	r3, [r3, #4]
 8004232:	2b02      	cmp	r3, #2
 8004234:	d107      	bne.n	8004246 <HAL_RCC_ClockConfig+0xd2>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8004236:	4b41      	ldr	r3, [pc, #260]	@ (800433c <HAL_RCC_ClockConfig+0x1c8>)
 8004238:	681b      	ldr	r3, [r3, #0]
 800423a:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800423e:	2b00      	cmp	r3, #0
 8004240:	d109      	bne.n	8004256 <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 8004242:	2301      	movs	r3, #1
 8004244:	e073      	b.n	800432e <HAL_RCC_ClockConfig+0x1ba>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004246:	4b3d      	ldr	r3, [pc, #244]	@ (800433c <HAL_RCC_ClockConfig+0x1c8>)
 8004248:	681b      	ldr	r3, [r3, #0]
 800424a:	f003 0302 	and.w	r3, r3, #2
 800424e:	2b00      	cmp	r3, #0
 8004250:	d101      	bne.n	8004256 <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 8004252:	2301      	movs	r3, #1
 8004254:	e06b      	b.n	800432e <HAL_RCC_ClockConfig+0x1ba>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8004256:	4b39      	ldr	r3, [pc, #228]	@ (800433c <HAL_RCC_ClockConfig+0x1c8>)
 8004258:	689b      	ldr	r3, [r3, #8]
 800425a:	f023 0203 	bic.w	r2, r3, #3
 800425e:	687b      	ldr	r3, [r7, #4]
 8004260:	685b      	ldr	r3, [r3, #4]
 8004262:	4936      	ldr	r1, [pc, #216]	@ (800433c <HAL_RCC_ClockConfig+0x1c8>)
 8004264:	4313      	orrs	r3, r2
 8004266:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8004268:	f7fd fe68 	bl	8001f3c <HAL_GetTick>
 800426c:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800426e:	e00a      	b.n	8004286 <HAL_RCC_ClockConfig+0x112>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8004270:	f7fd fe64 	bl	8001f3c <HAL_GetTick>
 8004274:	4602      	mov	r2, r0
 8004276:	68fb      	ldr	r3, [r7, #12]
 8004278:	1ad3      	subs	r3, r2, r3
 800427a:	f241 3288 	movw	r2, #5000	@ 0x1388
 800427e:	4293      	cmp	r3, r2
 8004280:	d901      	bls.n	8004286 <HAL_RCC_ClockConfig+0x112>
      {
        return HAL_TIMEOUT;
 8004282:	2303      	movs	r3, #3
 8004284:	e053      	b.n	800432e <HAL_RCC_ClockConfig+0x1ba>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004286:	4b2d      	ldr	r3, [pc, #180]	@ (800433c <HAL_RCC_ClockConfig+0x1c8>)
 8004288:	689b      	ldr	r3, [r3, #8]
 800428a:	f003 020c 	and.w	r2, r3, #12
 800428e:	687b      	ldr	r3, [r7, #4]
 8004290:	685b      	ldr	r3, [r3, #4]
 8004292:	009b      	lsls	r3, r3, #2
 8004294:	429a      	cmp	r2, r3
 8004296:	d1eb      	bne.n	8004270 <HAL_RCC_ClockConfig+0xfc>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8004298:	4b27      	ldr	r3, [pc, #156]	@ (8004338 <HAL_RCC_ClockConfig+0x1c4>)
 800429a:	681b      	ldr	r3, [r3, #0]
 800429c:	f003 030f 	and.w	r3, r3, #15
 80042a0:	683a      	ldr	r2, [r7, #0]
 80042a2:	429a      	cmp	r2, r3
 80042a4:	d210      	bcs.n	80042c8 <HAL_RCC_ClockConfig+0x154>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80042a6:	4b24      	ldr	r3, [pc, #144]	@ (8004338 <HAL_RCC_ClockConfig+0x1c4>)
 80042a8:	681b      	ldr	r3, [r3, #0]
 80042aa:	f023 020f 	bic.w	r2, r3, #15
 80042ae:	4922      	ldr	r1, [pc, #136]	@ (8004338 <HAL_RCC_ClockConfig+0x1c4>)
 80042b0:	683b      	ldr	r3, [r7, #0]
 80042b2:	4313      	orrs	r3, r2
 80042b4:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80042b6:	4b20      	ldr	r3, [pc, #128]	@ (8004338 <HAL_RCC_ClockConfig+0x1c4>)
 80042b8:	681b      	ldr	r3, [r3, #0]
 80042ba:	f003 030f 	and.w	r3, r3, #15
 80042be:	683a      	ldr	r2, [r7, #0]
 80042c0:	429a      	cmp	r2, r3
 80042c2:	d001      	beq.n	80042c8 <HAL_RCC_ClockConfig+0x154>
    {
      return HAL_ERROR;
 80042c4:	2301      	movs	r3, #1
 80042c6:	e032      	b.n	800432e <HAL_RCC_ClockConfig+0x1ba>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80042c8:	687b      	ldr	r3, [r7, #4]
 80042ca:	681b      	ldr	r3, [r3, #0]
 80042cc:	f003 0304 	and.w	r3, r3, #4
 80042d0:	2b00      	cmp	r3, #0
 80042d2:	d008      	beq.n	80042e6 <HAL_RCC_ClockConfig+0x172>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80042d4:	4b19      	ldr	r3, [pc, #100]	@ (800433c <HAL_RCC_ClockConfig+0x1c8>)
 80042d6:	689b      	ldr	r3, [r3, #8]
 80042d8:	f423 52e0 	bic.w	r2, r3, #7168	@ 0x1c00
 80042dc:	687b      	ldr	r3, [r7, #4]
 80042de:	68db      	ldr	r3, [r3, #12]
 80042e0:	4916      	ldr	r1, [pc, #88]	@ (800433c <HAL_RCC_ClockConfig+0x1c8>)
 80042e2:	4313      	orrs	r3, r2
 80042e4:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80042e6:	687b      	ldr	r3, [r7, #4]
 80042e8:	681b      	ldr	r3, [r3, #0]
 80042ea:	f003 0308 	and.w	r3, r3, #8
 80042ee:	2b00      	cmp	r3, #0
 80042f0:	d009      	beq.n	8004306 <HAL_RCC_ClockConfig+0x192>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 80042f2:	4b12      	ldr	r3, [pc, #72]	@ (800433c <HAL_RCC_ClockConfig+0x1c8>)
 80042f4:	689b      	ldr	r3, [r3, #8]
 80042f6:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 80042fa:	687b      	ldr	r3, [r7, #4]
 80042fc:	691b      	ldr	r3, [r3, #16]
 80042fe:	00db      	lsls	r3, r3, #3
 8004300:	490e      	ldr	r1, [pc, #56]	@ (800433c <HAL_RCC_ClockConfig+0x1c8>)
 8004302:	4313      	orrs	r3, r2
 8004304:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8004306:	f000 f821 	bl	800434c <HAL_RCC_GetSysClockFreq>
 800430a:	4602      	mov	r2, r0
 800430c:	4b0b      	ldr	r3, [pc, #44]	@ (800433c <HAL_RCC_ClockConfig+0x1c8>)
 800430e:	689b      	ldr	r3, [r3, #8]
 8004310:	091b      	lsrs	r3, r3, #4
 8004312:	f003 030f 	and.w	r3, r3, #15
 8004316:	490a      	ldr	r1, [pc, #40]	@ (8004340 <HAL_RCC_ClockConfig+0x1cc>)
 8004318:	5ccb      	ldrb	r3, [r1, r3]
 800431a:	fa22 f303 	lsr.w	r3, r2, r3
 800431e:	4a09      	ldr	r2, [pc, #36]	@ (8004344 <HAL_RCC_ClockConfig+0x1d0>)
 8004320:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 8004322:	4b09      	ldr	r3, [pc, #36]	@ (8004348 <HAL_RCC_ClockConfig+0x1d4>)
 8004324:	681b      	ldr	r3, [r3, #0]
 8004326:	4618      	mov	r0, r3
 8004328:	f7fd fdc4 	bl	8001eb4 <HAL_InitTick>

  return HAL_OK;
 800432c:	2300      	movs	r3, #0
}
 800432e:	4618      	mov	r0, r3
 8004330:	3710      	adds	r7, #16
 8004332:	46bd      	mov	sp, r7
 8004334:	bd80      	pop	{r7, pc}
 8004336:	bf00      	nop
 8004338:	40023c00 	.word	0x40023c00
 800433c:	40023800 	.word	0x40023800
 8004340:	08011ee8 	.word	0x08011ee8
 8004344:	2003bb00 	.word	0x2003bb00
 8004348:	2003bb04 	.word	0x2003bb04

0800434c <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 800434c:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8004350:	b094      	sub	sp, #80	@ 0x50
 8004352:	af00      	add	r7, sp, #0
  uint32_t pllm = 0, pllvco = 0, pllp = 0;
 8004354:	2300      	movs	r3, #0
 8004356:	647b      	str	r3, [r7, #68]	@ 0x44
 8004358:	2300      	movs	r3, #0
 800435a:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800435c:	2300      	movs	r3, #0
 800435e:	643b      	str	r3, [r7, #64]	@ 0x40
  uint32_t sysclockfreq = 0;
 8004360:	2300      	movs	r3, #0
 8004362:	64bb      	str	r3, [r7, #72]	@ 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8004364:	4b79      	ldr	r3, [pc, #484]	@ (800454c <HAL_RCC_GetSysClockFreq+0x200>)
 8004366:	689b      	ldr	r3, [r3, #8]
 8004368:	f003 030c 	and.w	r3, r3, #12
 800436c:	2b08      	cmp	r3, #8
 800436e:	d00d      	beq.n	800438c <HAL_RCC_GetSysClockFreq+0x40>
 8004370:	2b08      	cmp	r3, #8
 8004372:	f200 80e1 	bhi.w	8004538 <HAL_RCC_GetSysClockFreq+0x1ec>
 8004376:	2b00      	cmp	r3, #0
 8004378:	d002      	beq.n	8004380 <HAL_RCC_GetSysClockFreq+0x34>
 800437a:	2b04      	cmp	r3, #4
 800437c:	d003      	beq.n	8004386 <HAL_RCC_GetSysClockFreq+0x3a>
 800437e:	e0db      	b.n	8004538 <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8004380:	4b73      	ldr	r3, [pc, #460]	@ (8004550 <HAL_RCC_GetSysClockFreq+0x204>)
 8004382:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 8004384:	e0db      	b.n	800453e <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8004386:	4b73      	ldr	r3, [pc, #460]	@ (8004554 <HAL_RCC_GetSysClockFreq+0x208>)
 8004388:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 800438a:	e0d8      	b.n	800453e <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 800438c:	4b6f      	ldr	r3, [pc, #444]	@ (800454c <HAL_RCC_GetSysClockFreq+0x200>)
 800438e:	685b      	ldr	r3, [r3, #4]
 8004390:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8004394:	647b      	str	r3, [r7, #68]	@ 0x44
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLCFGR_PLLSRC_HSI)
 8004396:	4b6d      	ldr	r3, [pc, #436]	@ (800454c <HAL_RCC_GetSysClockFreq+0x200>)
 8004398:	685b      	ldr	r3, [r3, #4]
 800439a:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800439e:	2b00      	cmp	r3, #0
 80043a0:	d063      	beq.n	800446a <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80043a2:	4b6a      	ldr	r3, [pc, #424]	@ (800454c <HAL_RCC_GetSysClockFreq+0x200>)
 80043a4:	685b      	ldr	r3, [r3, #4]
 80043a6:	099b      	lsrs	r3, r3, #6
 80043a8:	2200      	movs	r2, #0
 80043aa:	63bb      	str	r3, [r7, #56]	@ 0x38
 80043ac:	63fa      	str	r2, [r7, #60]	@ 0x3c
 80043ae:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80043b0:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80043b4:	633b      	str	r3, [r7, #48]	@ 0x30
 80043b6:	2300      	movs	r3, #0
 80043b8:	637b      	str	r3, [r7, #52]	@ 0x34
 80043ba:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	@ 0x30
 80043be:	4622      	mov	r2, r4
 80043c0:	462b      	mov	r3, r5
 80043c2:	f04f 0000 	mov.w	r0, #0
 80043c6:	f04f 0100 	mov.w	r1, #0
 80043ca:	0159      	lsls	r1, r3, #5
 80043cc:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 80043d0:	0150      	lsls	r0, r2, #5
 80043d2:	4602      	mov	r2, r0
 80043d4:	460b      	mov	r3, r1
 80043d6:	4621      	mov	r1, r4
 80043d8:	1a51      	subs	r1, r2, r1
 80043da:	6139      	str	r1, [r7, #16]
 80043dc:	4629      	mov	r1, r5
 80043de:	eb63 0301 	sbc.w	r3, r3, r1
 80043e2:	617b      	str	r3, [r7, #20]
 80043e4:	f04f 0200 	mov.w	r2, #0
 80043e8:	f04f 0300 	mov.w	r3, #0
 80043ec:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 80043f0:	4659      	mov	r1, fp
 80043f2:	018b      	lsls	r3, r1, #6
 80043f4:	4651      	mov	r1, sl
 80043f6:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 80043fa:	4651      	mov	r1, sl
 80043fc:	018a      	lsls	r2, r1, #6
 80043fe:	4651      	mov	r1, sl
 8004400:	ebb2 0801 	subs.w	r8, r2, r1
 8004404:	4659      	mov	r1, fp
 8004406:	eb63 0901 	sbc.w	r9, r3, r1
 800440a:	f04f 0200 	mov.w	r2, #0
 800440e:	f04f 0300 	mov.w	r3, #0
 8004412:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8004416:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 800441a:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 800441e:	4690      	mov	r8, r2
 8004420:	4699      	mov	r9, r3
 8004422:	4623      	mov	r3, r4
 8004424:	eb18 0303 	adds.w	r3, r8, r3
 8004428:	60bb      	str	r3, [r7, #8]
 800442a:	462b      	mov	r3, r5
 800442c:	eb49 0303 	adc.w	r3, r9, r3
 8004430:	60fb      	str	r3, [r7, #12]
 8004432:	f04f 0200 	mov.w	r2, #0
 8004436:	f04f 0300 	mov.w	r3, #0
 800443a:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 800443e:	4629      	mov	r1, r5
 8004440:	024b      	lsls	r3, r1, #9
 8004442:	4621      	mov	r1, r4
 8004444:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 8004448:	4621      	mov	r1, r4
 800444a:	024a      	lsls	r2, r1, #9
 800444c:	4610      	mov	r0, r2
 800444e:	4619      	mov	r1, r3
 8004450:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8004452:	2200      	movs	r2, #0
 8004454:	62bb      	str	r3, [r7, #40]	@ 0x28
 8004456:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8004458:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 800445c:	f7fb ff48 	bl	80002f0 <__aeabi_uldivmod>
 8004460:	4602      	mov	r2, r0
 8004462:	460b      	mov	r3, r1
 8004464:	4613      	mov	r3, r2
 8004466:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8004468:	e058      	b.n	800451c <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800446a:	4b38      	ldr	r3, [pc, #224]	@ (800454c <HAL_RCC_GetSysClockFreq+0x200>)
 800446c:	685b      	ldr	r3, [r3, #4]
 800446e:	099b      	lsrs	r3, r3, #6
 8004470:	2200      	movs	r2, #0
 8004472:	4618      	mov	r0, r3
 8004474:	4611      	mov	r1, r2
 8004476:	f3c0 0308 	ubfx	r3, r0, #0, #9
 800447a:	623b      	str	r3, [r7, #32]
 800447c:	2300      	movs	r3, #0
 800447e:	627b      	str	r3, [r7, #36]	@ 0x24
 8004480:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 8004484:	4642      	mov	r2, r8
 8004486:	464b      	mov	r3, r9
 8004488:	f04f 0000 	mov.w	r0, #0
 800448c:	f04f 0100 	mov.w	r1, #0
 8004490:	0159      	lsls	r1, r3, #5
 8004492:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8004496:	0150      	lsls	r0, r2, #5
 8004498:	4602      	mov	r2, r0
 800449a:	460b      	mov	r3, r1
 800449c:	4641      	mov	r1, r8
 800449e:	ebb2 0a01 	subs.w	sl, r2, r1
 80044a2:	4649      	mov	r1, r9
 80044a4:	eb63 0b01 	sbc.w	fp, r3, r1
 80044a8:	f04f 0200 	mov.w	r2, #0
 80044ac:	f04f 0300 	mov.w	r3, #0
 80044b0:	ea4f 138b 	mov.w	r3, fp, lsl #6
 80044b4:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 80044b8:	ea4f 128a 	mov.w	r2, sl, lsl #6
 80044bc:	ebb2 040a 	subs.w	r4, r2, sl
 80044c0:	eb63 050b 	sbc.w	r5, r3, fp
 80044c4:	f04f 0200 	mov.w	r2, #0
 80044c8:	f04f 0300 	mov.w	r3, #0
 80044cc:	00eb      	lsls	r3, r5, #3
 80044ce:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 80044d2:	00e2      	lsls	r2, r4, #3
 80044d4:	4614      	mov	r4, r2
 80044d6:	461d      	mov	r5, r3
 80044d8:	4643      	mov	r3, r8
 80044da:	18e3      	adds	r3, r4, r3
 80044dc:	603b      	str	r3, [r7, #0]
 80044de:	464b      	mov	r3, r9
 80044e0:	eb45 0303 	adc.w	r3, r5, r3
 80044e4:	607b      	str	r3, [r7, #4]
 80044e6:	f04f 0200 	mov.w	r2, #0
 80044ea:	f04f 0300 	mov.w	r3, #0
 80044ee:	e9d7 4500 	ldrd	r4, r5, [r7]
 80044f2:	4629      	mov	r1, r5
 80044f4:	028b      	lsls	r3, r1, #10
 80044f6:	4621      	mov	r1, r4
 80044f8:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 80044fc:	4621      	mov	r1, r4
 80044fe:	028a      	lsls	r2, r1, #10
 8004500:	4610      	mov	r0, r2
 8004502:	4619      	mov	r1, r3
 8004504:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8004506:	2200      	movs	r2, #0
 8004508:	61bb      	str	r3, [r7, #24]
 800450a:	61fa      	str	r2, [r7, #28]
 800450c:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8004510:	f7fb feee 	bl	80002f0 <__aeabi_uldivmod>
 8004514:	4602      	mov	r2, r0
 8004516:	460b      	mov	r3, r1
 8004518:	4613      	mov	r3, r2
 800451a:	64fb      	str	r3, [r7, #76]	@ 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1) * 2);
 800451c:	4b0b      	ldr	r3, [pc, #44]	@ (800454c <HAL_RCC_GetSysClockFreq+0x200>)
 800451e:	685b      	ldr	r3, [r3, #4]
 8004520:	0c1b      	lsrs	r3, r3, #16
 8004522:	f003 0303 	and.w	r3, r3, #3
 8004526:	3301      	adds	r3, #1
 8004528:	005b      	lsls	r3, r3, #1
 800452a:	643b      	str	r3, [r7, #64]	@ 0x40

      sysclockfreq = pllvco / pllp;
 800452c:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 800452e:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8004530:	fbb2 f3f3 	udiv	r3, r2, r3
 8004534:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 8004536:	e002      	b.n	800453e <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8004538:	4b05      	ldr	r3, [pc, #20]	@ (8004550 <HAL_RCC_GetSysClockFreq+0x204>)
 800453a:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 800453c:	bf00      	nop
    }
  }
  return sysclockfreq;
 800453e:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
}
 8004540:	4618      	mov	r0, r3
 8004542:	3750      	adds	r7, #80	@ 0x50
 8004544:	46bd      	mov	sp, r7
 8004546:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800454a:	bf00      	nop
 800454c:	40023800 	.word	0x40023800
 8004550:	00f42400 	.word	0x00f42400
 8004554:	007a1200 	.word	0x007a1200

08004558 <HAL_RCC_GetHCLKFreq>:
  *         right HCLK value. Otherwise, any configuration based on this function will be incorrect.
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8004558:	b480      	push	{r7}
 800455a:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 800455c:	4b03      	ldr	r3, [pc, #12]	@ (800456c <HAL_RCC_GetHCLKFreq+0x14>)
 800455e:	681b      	ldr	r3, [r3, #0]
}
 8004560:	4618      	mov	r0, r3
 8004562:	46bd      	mov	sp, r7
 8004564:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004568:	4770      	bx	lr
 800456a:	bf00      	nop
 800456c:	2003bb00 	.word	0x2003bb00

08004570 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8004570:	b580      	push	{r7, lr}
 8004572:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8004574:	f7ff fff0 	bl	8004558 <HAL_RCC_GetHCLKFreq>
 8004578:	4602      	mov	r2, r0
 800457a:	4b05      	ldr	r3, [pc, #20]	@ (8004590 <HAL_RCC_GetPCLK1Freq+0x20>)
 800457c:	689b      	ldr	r3, [r3, #8]
 800457e:	0a9b      	lsrs	r3, r3, #10
 8004580:	f003 0307 	and.w	r3, r3, #7
 8004584:	4903      	ldr	r1, [pc, #12]	@ (8004594 <HAL_RCC_GetPCLK1Freq+0x24>)
 8004586:	5ccb      	ldrb	r3, [r1, r3]
 8004588:	fa22 f303 	lsr.w	r3, r2, r3
}
 800458c:	4618      	mov	r0, r3
 800458e:	bd80      	pop	{r7, pc}
 8004590:	40023800 	.word	0x40023800
 8004594:	08011ef8 	.word	0x08011ef8

08004598 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8004598:	b580      	push	{r7, lr}
 800459a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 800459c:	f7ff ffdc 	bl	8004558 <HAL_RCC_GetHCLKFreq>
 80045a0:	4602      	mov	r2, r0
 80045a2:	4b05      	ldr	r3, [pc, #20]	@ (80045b8 <HAL_RCC_GetPCLK2Freq+0x20>)
 80045a4:	689b      	ldr	r3, [r3, #8]
 80045a6:	0b5b      	lsrs	r3, r3, #13
 80045a8:	f003 0307 	and.w	r3, r3, #7
 80045ac:	4903      	ldr	r1, [pc, #12]	@ (80045bc <HAL_RCC_GetPCLK2Freq+0x24>)
 80045ae:	5ccb      	ldrb	r3, [r1, r3]
 80045b0:	fa22 f303 	lsr.w	r3, r2, r3
}
 80045b4:	4618      	mov	r0, r3
 80045b6:	bd80      	pop	{r7, pc}
 80045b8:	40023800 	.word	0x40023800
 80045bc:	08011ef8 	.word	0x08011ef8

080045c0 <HAL_RCCEx_PeriphCLKConfig>:
  *         the backup registers) are set to their reset values.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 80045c0:	b580      	push	{r7, lr}
 80045c2:	b088      	sub	sp, #32
 80045c4:	af00      	add	r7, sp, #0
 80045c6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0;
 80045c8:	2300      	movs	r3, #0
 80045ca:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg0 = 0;
 80045cc:	2300      	movs	r3, #0
 80045ce:	613b      	str	r3, [r7, #16]
  uint32_t tmpreg1 = 0;
 80045d0:	2300      	movs	r3, #0
 80045d2:	60fb      	str	r3, [r7, #12]
  uint32_t plli2sused = 0;
 80045d4:	2300      	movs	r3, #0
 80045d6:	61fb      	str	r3, [r7, #28]
  uint32_t pllsaiused = 0;
 80045d8:	2300      	movs	r3, #0
 80045da:	61bb      	str	r3, [r7, #24]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*----------------------------------- I2S configuration ----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == (RCC_PERIPHCLK_I2S))
 80045dc:	687b      	ldr	r3, [r7, #4]
 80045de:	681b      	ldr	r3, [r3, #0]
 80045e0:	f003 0301 	and.w	r3, r3, #1
 80045e4:	2b00      	cmp	r3, #0
 80045e6:	d012      	beq.n	800460e <HAL_RCCEx_PeriphCLKConfig+0x4e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));

    /* Configure I2S Clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 80045e8:	4b69      	ldr	r3, [pc, #420]	@ (8004790 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80045ea:	689b      	ldr	r3, [r3, #8]
 80045ec:	4a68      	ldr	r2, [pc, #416]	@ (8004790 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80045ee:	f423 0300 	bic.w	r3, r3, #8388608	@ 0x800000
 80045f2:	6093      	str	r3, [r2, #8]
 80045f4:	4b66      	ldr	r3, [pc, #408]	@ (8004790 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80045f6:	689a      	ldr	r2, [r3, #8]
 80045f8:	687b      	ldr	r3, [r7, #4]
 80045fa:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80045fc:	4964      	ldr	r1, [pc, #400]	@ (8004790 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80045fe:	4313      	orrs	r3, r2
 8004600:	608b      	str	r3, [r1, #8]

    /* Enable the PLLI2S when it's used as clock source for I2S */
    if(PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLLI2S)
 8004602:	687b      	ldr	r3, [r7, #4]
 8004604:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8004606:	2b00      	cmp	r3, #0
 8004608:	d101      	bne.n	800460e <HAL_RCCEx_PeriphCLKConfig+0x4e>
    {
      plli2sused = 1;
 800460a:	2301      	movs	r3, #1
 800460c:	61fb      	str	r3, [r7, #28]
    }
  }

  /*------------------------------------ SAI1 configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == (RCC_PERIPHCLK_SAI1))
 800460e:	687b      	ldr	r3, [r7, #4]
 8004610:	681b      	ldr	r3, [r3, #0]
 8004612:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8004616:	2b00      	cmp	r3, #0
 8004618:	d017      	beq.n	800464a <HAL_RCCEx_PeriphCLKConfig+0x8a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLKSOURCE(PeriphClkInit->Sai1ClockSelection));

    /* Configure SAI1 Clock source */
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 800461a:	4b5d      	ldr	r3, [pc, #372]	@ (8004790 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800461c:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8004620:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 8004624:	687b      	ldr	r3, [r7, #4]
 8004626:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004628:	4959      	ldr	r1, [pc, #356]	@ (8004790 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800462a:	4313      	orrs	r3, r2
 800462c:	f8c1 308c 	str.w	r3, [r1, #140]	@ 0x8c
    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)
 8004630:	687b      	ldr	r3, [r7, #4]
 8004632:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004634:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8004638:	d101      	bne.n	800463e <HAL_RCCEx_PeriphCLKConfig+0x7e>
    {
      plli2sused = 1;
 800463a:	2301      	movs	r3, #1
 800463c:	61fb      	str	r3, [r7, #28]
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)
 800463e:	687b      	ldr	r3, [r7, #4]
 8004640:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004642:	2b00      	cmp	r3, #0
 8004644:	d101      	bne.n	800464a <HAL_RCCEx_PeriphCLKConfig+0x8a>
    {
      pllsaiused = 1;
 8004646:	2301      	movs	r3, #1
 8004648:	61bb      	str	r3, [r7, #24]
    }
  }

  /*------------------------------------ SAI2 configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == (RCC_PERIPHCLK_SAI2))
 800464a:	687b      	ldr	r3, [r7, #4]
 800464c:	681b      	ldr	r3, [r3, #0]
 800464e:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8004652:	2b00      	cmp	r3, #0
 8004654:	d017      	beq.n	8004686 <HAL_RCCEx_PeriphCLKConfig+0xc6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLKSOURCE(PeriphClkInit->Sai2ClockSelection));

    /* Configure SAI2 Clock source */
    __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 8004656:	4b4e      	ldr	r3, [pc, #312]	@ (8004790 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004658:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 800465c:	f423 0240 	bic.w	r2, r3, #12582912	@ 0xc00000
 8004660:	687b      	ldr	r3, [r7, #4]
 8004662:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004664:	494a      	ldr	r1, [pc, #296]	@ (8004790 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004666:	4313      	orrs	r3, r2
 8004668:	f8c1 308c 	str.w	r3, [r1, #140]	@ 0x8c

    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)
 800466c:	687b      	ldr	r3, [r7, #4]
 800466e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004670:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8004674:	d101      	bne.n	800467a <HAL_RCCEx_PeriphCLKConfig+0xba>
    {
      plli2sused = 1;
 8004676:	2301      	movs	r3, #1
 8004678:	61fb      	str	r3, [r7, #28]
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)
 800467a:	687b      	ldr	r3, [r7, #4]
 800467c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800467e:	2b00      	cmp	r3, #0
 8004680:	d101      	bne.n	8004686 <HAL_RCCEx_PeriphCLKConfig+0xc6>
    {
      pllsaiused = 1;
 8004682:	2301      	movs	r3, #1
 8004684:	61bb      	str	r3, [r7, #24]
    }
  }

  /*-------------------------------------- SPDIF-RX Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 8004686:	687b      	ldr	r3, [r7, #4]
 8004688:	681b      	ldr	r3, [r3, #0]
 800468a:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 800468e:	2b00      	cmp	r3, #0
 8004690:	d001      	beq.n	8004696 <HAL_RCCEx_PeriphCLKConfig+0xd6>
  {
      plli2sused = 1;
 8004692:	2301      	movs	r3, #1
 8004694:	61fb      	str	r3, [r7, #28]
  }

  /*------------------------------------ RTC configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 8004696:	687b      	ldr	r3, [r7, #4]
 8004698:	681b      	ldr	r3, [r3, #0]
 800469a:	f003 0320 	and.w	r3, r3, #32
 800469e:	2b00      	cmp	r3, #0
 80046a0:	f000 808b 	beq.w	80047ba <HAL_RCCEx_PeriphCLKConfig+0x1fa>
  {
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 80046a4:	4b3a      	ldr	r3, [pc, #232]	@ (8004790 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80046a6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80046a8:	4a39      	ldr	r2, [pc, #228]	@ (8004790 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80046aa:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80046ae:	6413      	str	r3, [r2, #64]	@ 0x40
 80046b0:	4b37      	ldr	r3, [pc, #220]	@ (8004790 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80046b2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80046b4:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80046b8:	60bb      	str	r3, [r7, #8]
 80046ba:	68bb      	ldr	r3, [r7, #8]

    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 80046bc:	4b35      	ldr	r3, [pc, #212]	@ (8004794 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 80046be:	681b      	ldr	r3, [r3, #0]
 80046c0:	4a34      	ldr	r2, [pc, #208]	@ (8004794 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 80046c2:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80046c6:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80046c8:	f7fd fc38 	bl	8001f3c <HAL_GetTick>
 80046cc:	6178      	str	r0, [r7, #20]

    /* Wait for Backup domain Write protection disable */
    while((PWR->CR1 & PWR_CR1_DBP) == RESET)
 80046ce:	e008      	b.n	80046e2 <HAL_RCCEx_PeriphCLKConfig+0x122>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80046d0:	f7fd fc34 	bl	8001f3c <HAL_GetTick>
 80046d4:	4602      	mov	r2, r0
 80046d6:	697b      	ldr	r3, [r7, #20]
 80046d8:	1ad3      	subs	r3, r2, r3
 80046da:	2b64      	cmp	r3, #100	@ 0x64
 80046dc:	d901      	bls.n	80046e2 <HAL_RCCEx_PeriphCLKConfig+0x122>
      {
        return HAL_TIMEOUT;
 80046de:	2303      	movs	r3, #3
 80046e0:	e38f      	b.n	8004e02 <HAL_RCCEx_PeriphCLKConfig+0x842>
    while((PWR->CR1 & PWR_CR1_DBP) == RESET)
 80046e2:	4b2c      	ldr	r3, [pc, #176]	@ (8004794 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 80046e4:	681b      	ldr	r3, [r3, #0]
 80046e6:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80046ea:	2b00      	cmp	r3, #0
 80046ec:	d0f0      	beq.n	80046d0 <HAL_RCCEx_PeriphCLKConfig+0x110>
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified */
    tmpreg0 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 80046ee:	4b28      	ldr	r3, [pc, #160]	@ (8004790 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80046f0:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80046f2:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 80046f6:	613b      	str	r3, [r7, #16]

    if((tmpreg0 != 0x00000000U) && (tmpreg0 != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 80046f8:	693b      	ldr	r3, [r7, #16]
 80046fa:	2b00      	cmp	r3, #0
 80046fc:	d035      	beq.n	800476a <HAL_RCCEx_PeriphCLKConfig+0x1aa>
 80046fe:	687b      	ldr	r3, [r7, #4]
 8004700:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004702:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8004706:	693a      	ldr	r2, [r7, #16]
 8004708:	429a      	cmp	r2, r3
 800470a:	d02e      	beq.n	800476a <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      tmpreg0 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 800470c:	4b20      	ldr	r3, [pc, #128]	@ (8004790 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800470e:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004710:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8004714:	613b      	str	r3, [r7, #16]

      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8004716:	4b1e      	ldr	r3, [pc, #120]	@ (8004790 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004718:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800471a:	4a1d      	ldr	r2, [pc, #116]	@ (8004790 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800471c:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8004720:	6713      	str	r3, [r2, #112]	@ 0x70
      __HAL_RCC_BACKUPRESET_RELEASE();
 8004722:	4b1b      	ldr	r3, [pc, #108]	@ (8004790 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004724:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004726:	4a1a      	ldr	r2, [pc, #104]	@ (8004790 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004728:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800472c:	6713      	str	r3, [r2, #112]	@ 0x70

      /* Restore the Content of BDCR register */
      RCC->BDCR = tmpreg0;
 800472e:	4a18      	ldr	r2, [pc, #96]	@ (8004790 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004730:	693b      	ldr	r3, [r7, #16]
 8004732:	6713      	str	r3, [r2, #112]	@ 0x70

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 8004734:	4b16      	ldr	r3, [pc, #88]	@ (8004790 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004736:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004738:	f003 0301 	and.w	r3, r3, #1
 800473c:	2b01      	cmp	r3, #1
 800473e:	d114      	bne.n	800476a <HAL_RCCEx_PeriphCLKConfig+0x1aa>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004740:	f7fd fbfc 	bl	8001f3c <HAL_GetTick>
 8004744:	6178      	str	r0, [r7, #20]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004746:	e00a      	b.n	800475e <HAL_RCCEx_PeriphCLKConfig+0x19e>
        {
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8004748:	f7fd fbf8 	bl	8001f3c <HAL_GetTick>
 800474c:	4602      	mov	r2, r0
 800474e:	697b      	ldr	r3, [r7, #20]
 8004750:	1ad3      	subs	r3, r2, r3
 8004752:	f241 3288 	movw	r2, #5000	@ 0x1388
 8004756:	4293      	cmp	r3, r2
 8004758:	d901      	bls.n	800475e <HAL_RCCEx_PeriphCLKConfig+0x19e>
          {
            return HAL_TIMEOUT;
 800475a:	2303      	movs	r3, #3
 800475c:	e351      	b.n	8004e02 <HAL_RCCEx_PeriphCLKConfig+0x842>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800475e:	4b0c      	ldr	r3, [pc, #48]	@ (8004790 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004760:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004762:	f003 0302 	and.w	r3, r3, #2
 8004766:	2b00      	cmp	r3, #0
 8004768:	d0ee      	beq.n	8004748 <HAL_RCCEx_PeriphCLKConfig+0x188>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 800476a:	687b      	ldr	r3, [r7, #4]
 800476c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800476e:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8004772:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8004776:	d111      	bne.n	800479c <HAL_RCCEx_PeriphCLKConfig+0x1dc>
 8004778:	4b05      	ldr	r3, [pc, #20]	@ (8004790 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800477a:	689b      	ldr	r3, [r3, #8]
 800477c:	f423 12f8 	bic.w	r2, r3, #2031616	@ 0x1f0000
 8004780:	687b      	ldr	r3, [r7, #4]
 8004782:	6b19      	ldr	r1, [r3, #48]	@ 0x30
 8004784:	4b04      	ldr	r3, [pc, #16]	@ (8004798 <HAL_RCCEx_PeriphCLKConfig+0x1d8>)
 8004786:	400b      	ands	r3, r1
 8004788:	4901      	ldr	r1, [pc, #4]	@ (8004790 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800478a:	4313      	orrs	r3, r2
 800478c:	608b      	str	r3, [r1, #8]
 800478e:	e00b      	b.n	80047a8 <HAL_RCCEx_PeriphCLKConfig+0x1e8>
 8004790:	40023800 	.word	0x40023800
 8004794:	40007000 	.word	0x40007000
 8004798:	0ffffcff 	.word	0x0ffffcff
 800479c:	4bac      	ldr	r3, [pc, #688]	@ (8004a50 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 800479e:	689b      	ldr	r3, [r3, #8]
 80047a0:	4aab      	ldr	r2, [pc, #684]	@ (8004a50 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80047a2:	f423 13f8 	bic.w	r3, r3, #2031616	@ 0x1f0000
 80047a6:	6093      	str	r3, [r2, #8]
 80047a8:	4ba9      	ldr	r3, [pc, #676]	@ (8004a50 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80047aa:	6f1a      	ldr	r2, [r3, #112]	@ 0x70
 80047ac:	687b      	ldr	r3, [r7, #4]
 80047ae:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80047b0:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80047b4:	49a6      	ldr	r1, [pc, #664]	@ (8004a50 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80047b6:	4313      	orrs	r3, r2
 80047b8:	670b      	str	r3, [r1, #112]	@ 0x70
  }

  /*------------------------------------ TIM configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
 80047ba:	687b      	ldr	r3, [r7, #4]
 80047bc:	681b      	ldr	r3, [r3, #0]
 80047be:	f003 0310 	and.w	r3, r3, #16
 80047c2:	2b00      	cmp	r3, #0
 80047c4:	d010      	beq.n	80047e8 <HAL_RCCEx_PeriphCLKConfig+0x228>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 80047c6:	4ba2      	ldr	r3, [pc, #648]	@ (8004a50 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80047c8:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 80047cc:	4aa0      	ldr	r2, [pc, #640]	@ (8004a50 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80047ce:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 80047d2:	f8c2 308c 	str.w	r3, [r2, #140]	@ 0x8c
 80047d6:	4b9e      	ldr	r3, [pc, #632]	@ (8004a50 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80047d8:	f8d3 208c 	ldr.w	r2, [r3, #140]	@ 0x8c
 80047dc:	687b      	ldr	r3, [r7, #4]
 80047de:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80047e0:	499b      	ldr	r1, [pc, #620]	@ (8004a50 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80047e2:	4313      	orrs	r3, r2
 80047e4:	f8c1 308c 	str.w	r3, [r1, #140]	@ 0x8c
  }

  /*-------------------------------------- I2C1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 80047e8:	687b      	ldr	r3, [r7, #4]
 80047ea:	681b      	ldr	r3, [r3, #0]
 80047ec:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80047f0:	2b00      	cmp	r3, #0
 80047f2:	d00a      	beq.n	800480a <HAL_RCCEx_PeriphCLKConfig+0x24a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 80047f4:	4b96      	ldr	r3, [pc, #600]	@ (8004a50 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80047f6:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80047fa:	f423 3240 	bic.w	r2, r3, #196608	@ 0x30000
 80047fe:	687b      	ldr	r3, [r7, #4]
 8004800:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8004802:	4993      	ldr	r1, [pc, #588]	@ (8004a50 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8004804:	4313      	orrs	r3, r2
 8004806:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- I2C2 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 800480a:	687b      	ldr	r3, [r7, #4]
 800480c:	681b      	ldr	r3, [r3, #0]
 800480e:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8004812:	2b00      	cmp	r3, #0
 8004814:	d00a      	beq.n	800482c <HAL_RCCEx_PeriphCLKConfig+0x26c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8004816:	4b8e      	ldr	r3, [pc, #568]	@ (8004a50 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8004818:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800481c:	f423 2240 	bic.w	r2, r3, #786432	@ 0xc0000
 8004820:	687b      	ldr	r3, [r7, #4]
 8004822:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8004824:	498a      	ldr	r1, [pc, #552]	@ (8004a50 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8004826:	4313      	orrs	r3, r2
 8004828:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- I2C3 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 800482c:	687b      	ldr	r3, [r7, #4]
 800482e:	681b      	ldr	r3, [r3, #0]
 8004830:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8004834:	2b00      	cmp	r3, #0
 8004836:	d00a      	beq.n	800484e <HAL_RCCEx_PeriphCLKConfig+0x28e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8004838:	4b85      	ldr	r3, [pc, #532]	@ (8004a50 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 800483a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800483e:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 8004842:	687b      	ldr	r3, [r7, #4]
 8004844:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8004846:	4982      	ldr	r1, [pc, #520]	@ (8004a50 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8004848:	4313      	orrs	r3, r2
 800484a:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- I2C4 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 800484e:	687b      	ldr	r3, [r7, #4]
 8004850:	681b      	ldr	r3, [r3, #0]
 8004852:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8004856:	2b00      	cmp	r3, #0
 8004858:	d00a      	beq.n	8004870 <HAL_RCCEx_PeriphCLKConfig+0x2b0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    /* Configure the I2C4 clock source */
    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 800485a:	4b7d      	ldr	r3, [pc, #500]	@ (8004a50 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 800485c:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8004860:	f423 0240 	bic.w	r2, r3, #12582912	@ 0xc00000
 8004864:	687b      	ldr	r3, [r7, #4]
 8004866:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004868:	4979      	ldr	r1, [pc, #484]	@ (8004a50 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 800486a:	4313      	orrs	r3, r2
 800486c:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- USART1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8004870:	687b      	ldr	r3, [r7, #4]
 8004872:	681b      	ldr	r3, [r3, #0]
 8004874:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004878:	2b00      	cmp	r3, #0
 800487a:	d00a      	beq.n	8004892 <HAL_RCCEx_PeriphCLKConfig+0x2d2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 800487c:	4b74      	ldr	r3, [pc, #464]	@ (8004a50 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 800487e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8004882:	f023 0203 	bic.w	r2, r3, #3
 8004886:	687b      	ldr	r3, [r7, #4]
 8004888:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800488a:	4971      	ldr	r1, [pc, #452]	@ (8004a50 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 800488c:	4313      	orrs	r3, r2
 800488e:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- USART2 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8004892:	687b      	ldr	r3, [r7, #4]
 8004894:	681b      	ldr	r3, [r3, #0]
 8004896:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800489a:	2b00      	cmp	r3, #0
 800489c:	d00a      	beq.n	80048b4 <HAL_RCCEx_PeriphCLKConfig+0x2f4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 800489e:	4b6c      	ldr	r3, [pc, #432]	@ (8004a50 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80048a0:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80048a4:	f023 020c 	bic.w	r2, r3, #12
 80048a8:	687b      	ldr	r3, [r7, #4]
 80048aa:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80048ac:	4968      	ldr	r1, [pc, #416]	@ (8004a50 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80048ae:	4313      	orrs	r3, r2
 80048b0:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- USART3 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 80048b4:	687b      	ldr	r3, [r7, #4]
 80048b6:	681b      	ldr	r3, [r3, #0]
 80048b8:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80048bc:	2b00      	cmp	r3, #0
 80048be:	d00a      	beq.n	80048d6 <HAL_RCCEx_PeriphCLKConfig+0x316>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 80048c0:	4b63      	ldr	r3, [pc, #396]	@ (8004a50 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80048c2:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80048c6:	f023 0230 	bic.w	r2, r3, #48	@ 0x30
 80048ca:	687b      	ldr	r3, [r7, #4]
 80048cc:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80048ce:	4960      	ldr	r1, [pc, #384]	@ (8004a50 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80048d0:	4313      	orrs	r3, r2
 80048d2:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- UART4 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 80048d6:	687b      	ldr	r3, [r7, #4]
 80048d8:	681b      	ldr	r3, [r3, #0]
 80048da:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 80048de:	2b00      	cmp	r3, #0
 80048e0:	d00a      	beq.n	80048f8 <HAL_RCCEx_PeriphCLKConfig+0x338>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 80048e2:	4b5b      	ldr	r3, [pc, #364]	@ (8004a50 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80048e4:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80048e8:	f023 02c0 	bic.w	r2, r3, #192	@ 0xc0
 80048ec:	687b      	ldr	r3, [r7, #4]
 80048ee:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80048f0:	4957      	ldr	r1, [pc, #348]	@ (8004a50 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80048f2:	4313      	orrs	r3, r2
 80048f4:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- UART5 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 80048f8:	687b      	ldr	r3, [r7, #4]
 80048fa:	681b      	ldr	r3, [r3, #0]
 80048fc:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8004900:	2b00      	cmp	r3, #0
 8004902:	d00a      	beq.n	800491a <HAL_RCCEx_PeriphCLKConfig+0x35a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 8004904:	4b52      	ldr	r3, [pc, #328]	@ (8004a50 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8004906:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800490a:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 800490e:	687b      	ldr	r3, [r7, #4]
 8004910:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004912:	494f      	ldr	r1, [pc, #316]	@ (8004a50 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8004914:	4313      	orrs	r3, r2
 8004916:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- USART6 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART6) == RCC_PERIPHCLK_USART6)
 800491a:	687b      	ldr	r3, [r7, #4]
 800491c:	681b      	ldr	r3, [r3, #0]
 800491e:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8004922:	2b00      	cmp	r3, #0
 8004924:	d00a      	beq.n	800493c <HAL_RCCEx_PeriphCLKConfig+0x37c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART6CLKSOURCE(PeriphClkInit->Usart6ClockSelection));

    /* Configure the USART6 clock source */
    __HAL_RCC_USART6_CONFIG(PeriphClkInit->Usart6ClockSelection);
 8004926:	4b4a      	ldr	r3, [pc, #296]	@ (8004a50 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8004928:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800492c:	f423 6240 	bic.w	r2, r3, #3072	@ 0xc00
 8004930:	687b      	ldr	r3, [r7, #4]
 8004932:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004934:	4946      	ldr	r1, [pc, #280]	@ (8004a50 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8004936:	4313      	orrs	r3, r2
 8004938:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- UART7 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART7) == RCC_PERIPHCLK_UART7)
 800493c:	687b      	ldr	r3, [r7, #4]
 800493e:	681b      	ldr	r3, [r3, #0]
 8004940:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8004944:	2b00      	cmp	r3, #0
 8004946:	d00a      	beq.n	800495e <HAL_RCCEx_PeriphCLKConfig+0x39e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART7CLKSOURCE(PeriphClkInit->Uart7ClockSelection));

    /* Configure the UART7 clock source */
    __HAL_RCC_UART7_CONFIG(PeriphClkInit->Uart7ClockSelection);
 8004948:	4b41      	ldr	r3, [pc, #260]	@ (8004a50 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 800494a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800494e:	f423 5240 	bic.w	r2, r3, #12288	@ 0x3000
 8004952:	687b      	ldr	r3, [r7, #4]
 8004954:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8004956:	493e      	ldr	r1, [pc, #248]	@ (8004a50 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8004958:	4313      	orrs	r3, r2
 800495a:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- UART8 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART8) == RCC_PERIPHCLK_UART8)
 800495e:	687b      	ldr	r3, [r7, #4]
 8004960:	681b      	ldr	r3, [r3, #0]
 8004962:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8004966:	2b00      	cmp	r3, #0
 8004968:	d00a      	beq.n	8004980 <HAL_RCCEx_PeriphCLKConfig+0x3c0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART8CLKSOURCE(PeriphClkInit->Uart8ClockSelection));

    /* Configure the UART8 clock source */
    __HAL_RCC_UART8_CONFIG(PeriphClkInit->Uart8ClockSelection);
 800496a:	4b39      	ldr	r3, [pc, #228]	@ (8004a50 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 800496c:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8004970:	f423 4240 	bic.w	r2, r3, #49152	@ 0xc000
 8004974:	687b      	ldr	r3, [r7, #4]
 8004976:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8004978:	4935      	ldr	r1, [pc, #212]	@ (8004a50 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 800497a:	4313      	orrs	r3, r2
 800497c:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*--------------------------------------- CEC Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 8004980:	687b      	ldr	r3, [r7, #4]
 8004982:	681b      	ldr	r3, [r3, #0]
 8004984:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8004988:	2b00      	cmp	r3, #0
 800498a:	d00a      	beq.n	80049a2 <HAL_RCCEx_PeriphCLKConfig+0x3e2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 800498c:	4b30      	ldr	r3, [pc, #192]	@ (8004a50 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 800498e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8004992:	f023 6280 	bic.w	r2, r3, #67108864	@ 0x4000000
 8004996:	687b      	ldr	r3, [r7, #4]
 8004998:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 800499a:	492d      	ldr	r1, [pc, #180]	@ (8004a50 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 800499c:	4313      	orrs	r3, r2
 800499e:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- CK48 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48)
 80049a2:	687b      	ldr	r3, [r7, #4]
 80049a4:	681b      	ldr	r3, [r3, #0]
 80049a6:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 80049aa:	2b00      	cmp	r3, #0
 80049ac:	d011      	beq.n	80049d2 <HAL_RCCEx_PeriphCLKConfig+0x412>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLK48SOURCE(PeriphClkInit->Clk48ClockSelection));

    /* Configure the CLK48 source */
    __HAL_RCC_CLK48_CONFIG(PeriphClkInit->Clk48ClockSelection);
 80049ae:	4b28      	ldr	r3, [pc, #160]	@ (8004a50 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80049b0:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80049b4:	f023 6200 	bic.w	r2, r3, #134217728	@ 0x8000000
 80049b8:	687b      	ldr	r3, [r7, #4]
 80049ba:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 80049bc:	4924      	ldr	r1, [pc, #144]	@ (8004a50 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80049be:	4313      	orrs	r3, r2
 80049c0:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90

    /* Enable the PLLSAI when it's used as clock source for CK48 */
    if(PeriphClkInit->Clk48ClockSelection == RCC_CLK48SOURCE_PLLSAIP)
 80049c4:	687b      	ldr	r3, [r7, #4]
 80049c6:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 80049c8:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 80049cc:	d101      	bne.n	80049d2 <HAL_RCCEx_PeriphCLKConfig+0x412>
    {
      pllsaiused = 1;
 80049ce:	2301      	movs	r3, #1
 80049d0:	61bb      	str	r3, [r7, #24]
    }
  }

  /*-------------------------------------- LTDC Configuration -----------------------------------*/
#if defined(STM32F746xx) || defined(STM32F756xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx) || defined (STM32F750xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 80049d2:	687b      	ldr	r3, [r7, #4]
 80049d4:	681b      	ldr	r3, [r3, #0]
 80049d6:	f003 0308 	and.w	r3, r3, #8
 80049da:	2b00      	cmp	r3, #0
 80049dc:	d001      	beq.n	80049e2 <HAL_RCCEx_PeriphCLKConfig+0x422>
  {
    pllsaiused = 1;
 80049de:	2301      	movs	r3, #1
 80049e0:	61bb      	str	r3, [r7, #24]
  }
#endif /* STM32F746xx || STM32F756xx || STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx || STM32F750xx */

  /*-------------------------------------- LPTIM1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 80049e2:	687b      	ldr	r3, [r7, #4]
 80049e4:	681b      	ldr	r3, [r3, #0]
 80049e6:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 80049ea:	2b00      	cmp	r3, #0
 80049ec:	d00a      	beq.n	8004a04 <HAL_RCCEx_PeriphCLKConfig+0x444>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));

    /* Configure the LTPIM1 clock source */
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 80049ee:	4b18      	ldr	r3, [pc, #96]	@ (8004a50 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80049f0:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80049f4:	f023 7240 	bic.w	r2, r3, #50331648	@ 0x3000000
 80049f8:	687b      	ldr	r3, [r7, #4]
 80049fa:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80049fc:	4914      	ldr	r1, [pc, #80]	@ (8004a50 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80049fe:	4313      	orrs	r3, r2
 8004a00:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
   }

  /*------------------------------------- SDMMC1 Configuration ------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == RCC_PERIPHCLK_SDMMC1)
 8004a04:	687b      	ldr	r3, [r7, #4]
 8004a06:	681b      	ldr	r3, [r3, #0]
 8004a08:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8004a0c:	2b00      	cmp	r3, #0
 8004a0e:	d00b      	beq.n	8004a28 <HAL_RCCEx_PeriphCLKConfig+0x468>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));

    /* Configure the SDMMC1 clock source */
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 8004a10:	4b0f      	ldr	r3, [pc, #60]	@ (8004a50 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8004a12:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8004a16:	f023 5280 	bic.w	r2, r3, #268435456	@ 0x10000000
 8004a1a:	687b      	ldr	r3, [r7, #4]
 8004a1c:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8004a20:	490b      	ldr	r1, [pc, #44]	@ (8004a50 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8004a22:	4313      	orrs	r3, r2
 8004a24:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

#if defined (STM32F765xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx)
  /*------------------------------------- SDMMC2 Configuration ------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC2) == RCC_PERIPHCLK_SDMMC2)
 8004a28:	687b      	ldr	r3, [r7, #4]
 8004a2a:	681b      	ldr	r3, [r3, #0]
 8004a2c:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 8004a30:	2b00      	cmp	r3, #0
 8004a32:	d00f      	beq.n	8004a54 <HAL_RCCEx_PeriphCLKConfig+0x494>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC2CLKSOURCE(PeriphClkInit->Sdmmc2ClockSelection));

    /* Configure the SDMMC2 clock source */
    __HAL_RCC_SDMMC2_CONFIG(PeriphClkInit->Sdmmc2ClockSelection);
 8004a34:	4b06      	ldr	r3, [pc, #24]	@ (8004a50 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8004a36:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8004a3a:	f023 5200 	bic.w	r2, r3, #536870912	@ 0x20000000
 8004a3e:	687b      	ldr	r3, [r7, #4]
 8004a40:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8004a44:	4902      	ldr	r1, [pc, #8]	@ (8004a50 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8004a46:	4313      	orrs	r3, r2
 8004a48:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
 8004a4c:	e002      	b.n	8004a54 <HAL_RCCEx_PeriphCLKConfig+0x494>
 8004a4e:	bf00      	nop
 8004a50:	40023800 	.word	0x40023800
  }

  /*------------------------------------- DFSDM1 Configuration -------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 8004a54:	687b      	ldr	r3, [r7, #4]
 8004a56:	681b      	ldr	r3, [r3, #0]
 8004a58:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8004a5c:	2b00      	cmp	r3, #0
 8004a5e:	d00b      	beq.n	8004a78 <HAL_RCCEx_PeriphCLKConfig+0x4b8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 8004a60:	4b8a      	ldr	r3, [pc, #552]	@ (8004c8c <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8004a62:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8004a66:	f023 7200 	bic.w	r2, r3, #33554432	@ 0x2000000
 8004a6a:	687b      	ldr	r3, [r7, #4]
 8004a6c:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004a70:	4986      	ldr	r1, [pc, #536]	@ (8004c8c <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8004a72:	4313      	orrs	r3, r2
 8004a74:	f8c1 308c 	str.w	r3, [r1, #140]	@ 0x8c
  }

  /*------------------------------------- DFSDM AUDIO Configuration -------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1_AUDIO) == RCC_PERIPHCLK_DFSDM1_AUDIO)
 8004a78:	687b      	ldr	r3, [r7, #4]
 8004a7a:	681b      	ldr	r3, [r3, #0]
 8004a7c:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8004a80:	2b00      	cmp	r3, #0
 8004a82:	d00b      	beq.n	8004a9c <HAL_RCCEx_PeriphCLKConfig+0x4dc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1AUDIOCLKSOURCE(PeriphClkInit->Dfsdm1AudioClockSelection));

    /* Configure the DFSDM interface clock source */
    __HAL_RCC_DFSDM1AUDIO_CONFIG(PeriphClkInit->Dfsdm1AudioClockSelection);
 8004a84:	4b81      	ldr	r3, [pc, #516]	@ (8004c8c <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8004a86:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8004a8a:	f023 6280 	bic.w	r2, r3, #67108864	@ 0x4000000
 8004a8e:	687b      	ldr	r3, [r7, #4]
 8004a90:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8004a94:	497d      	ldr	r1, [pc, #500]	@ (8004c8c <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8004a96:	4313      	orrs	r3, r2
 8004a98:	f8c1 308c 	str.w	r3, [r1, #140]	@ 0x8c
  }
#endif /* STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx */

  /*-------------------------------------- PLLI2S Configuration ---------------------------------*/
  /* PLLI2S is configured when a peripheral will use it as source clock : SAI1, SAI2, I2S or SPDIF-RX */
  if((plli2sused == 1) || ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S))
 8004a9c:	69fb      	ldr	r3, [r7, #28]
 8004a9e:	2b01      	cmp	r3, #1
 8004aa0:	d006      	beq.n	8004ab0 <HAL_RCCEx_PeriphCLKConfig+0x4f0>
 8004aa2:	687b      	ldr	r3, [r7, #4]
 8004aa4:	681b      	ldr	r3, [r3, #0]
 8004aa6:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8004aaa:	2b00      	cmp	r3, #0
 8004aac:	f000 80d6 	beq.w	8004c5c <HAL_RCCEx_PeriphCLKConfig+0x69c>
  {
    /* Disable the PLLI2S */
    __HAL_RCC_PLLI2S_DISABLE();
 8004ab0:	4b76      	ldr	r3, [pc, #472]	@ (8004c8c <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8004ab2:	681b      	ldr	r3, [r3, #0]
 8004ab4:	4a75      	ldr	r2, [pc, #468]	@ (8004c8c <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8004ab6:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 8004aba:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8004abc:	f7fd fa3e 	bl	8001f3c <HAL_GetTick>
 8004ac0:	6178      	str	r0, [r7, #20]

    /* Wait till PLLI2S is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8004ac2:	e008      	b.n	8004ad6 <HAL_RCCEx_PeriphCLKConfig+0x516>
    {
      if((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 8004ac4:	f7fd fa3a 	bl	8001f3c <HAL_GetTick>
 8004ac8:	4602      	mov	r2, r0
 8004aca:	697b      	ldr	r3, [r7, #20]
 8004acc:	1ad3      	subs	r3, r2, r3
 8004ace:	2b64      	cmp	r3, #100	@ 0x64
 8004ad0:	d901      	bls.n	8004ad6 <HAL_RCCEx_PeriphCLKConfig+0x516>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8004ad2:	2303      	movs	r3, #3
 8004ad4:	e195      	b.n	8004e02 <HAL_RCCEx_PeriphCLKConfig+0x842>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8004ad6:	4b6d      	ldr	r3, [pc, #436]	@ (8004c8c <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8004ad8:	681b      	ldr	r3, [r3, #0]
 8004ada:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8004ade:	2b00      	cmp	r3, #0
 8004ae0:	d1f0      	bne.n	8004ac4 <HAL_RCCEx_PeriphCLKConfig+0x504>

    /* check for common PLLI2S Parameters */
    assert_param(IS_RCC_PLLI2SN_VALUE(PeriphClkInit->PLLI2S.PLLI2SN));

    /*----------------- In Case of PLLI2S is selected as source clock for I2S -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) && (PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLLI2S)))
 8004ae2:	687b      	ldr	r3, [r7, #4]
 8004ae4:	681b      	ldr	r3, [r3, #0]
 8004ae6:	f003 0301 	and.w	r3, r3, #1
 8004aea:	2b00      	cmp	r3, #0
 8004aec:	d021      	beq.n	8004b32 <HAL_RCCEx_PeriphCLKConfig+0x572>
 8004aee:	687b      	ldr	r3, [r7, #4]
 8004af0:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8004af2:	2b00      	cmp	r3, #0
 8004af4:	d11d      	bne.n	8004b32 <HAL_RCCEx_PeriphCLKConfig+0x572>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SR_VALUE(PeriphClkInit->PLLI2S.PLLI2SR));

      /* Read PLLI2SP and PLLI2SQ value from PLLI2SCFGR register (this value is not needed for I2S configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos);
 8004af6:	4b65      	ldr	r3, [pc, #404]	@ (8004c8c <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8004af8:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8004afc:	0c1b      	lsrs	r3, r3, #16
 8004afe:	f003 0303 	and.w	r3, r3, #3
 8004b02:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 8004b04:	4b61      	ldr	r3, [pc, #388]	@ (8004c8c <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8004b06:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8004b0a:	0e1b      	lsrs	r3, r3, #24
 8004b0c:	f003 030f 	and.w	r3, r3, #15
 8004b10:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLM) */
      /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , tmpreg0, tmpreg1, PeriphClkInit->PLLI2S.PLLI2SR);
 8004b12:	687b      	ldr	r3, [r7, #4]
 8004b14:	685b      	ldr	r3, [r3, #4]
 8004b16:	019a      	lsls	r2, r3, #6
 8004b18:	693b      	ldr	r3, [r7, #16]
 8004b1a:	041b      	lsls	r3, r3, #16
 8004b1c:	431a      	orrs	r2, r3
 8004b1e:	68fb      	ldr	r3, [r7, #12]
 8004b20:	061b      	lsls	r3, r3, #24
 8004b22:	431a      	orrs	r2, r3
 8004b24:	687b      	ldr	r3, [r7, #4]
 8004b26:	689b      	ldr	r3, [r3, #8]
 8004b28:	071b      	lsls	r3, r3, #28
 8004b2a:	4958      	ldr	r1, [pc, #352]	@ (8004c8c <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8004b2c:	4313      	orrs	r3, r2
 8004b2e:	f8c1 3084 	str.w	r3, [r1, #132]	@ 0x84
    }

    /*----------------- In Case of PLLI2S is selected as source clock for SAI -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 8004b32:	687b      	ldr	r3, [r7, #4]
 8004b34:	681b      	ldr	r3, [r3, #0]
 8004b36:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8004b3a:	2b00      	cmp	r3, #0
 8004b3c:	d004      	beq.n	8004b48 <HAL_RCCEx_PeriphCLKConfig+0x588>
 8004b3e:	687b      	ldr	r3, [r7, #4]
 8004b40:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004b42:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8004b46:	d00a      	beq.n	8004b5e <HAL_RCCEx_PeriphCLKConfig+0x59e>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 8004b48:	687b      	ldr	r3, [r7, #4]
 8004b4a:	681b      	ldr	r3, [r3, #0]
 8004b4c:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 8004b50:	2b00      	cmp	r3, #0
 8004b52:	d02e      	beq.n	8004bb2 <HAL_RCCEx_PeriphCLKConfig+0x5f2>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 8004b54:	687b      	ldr	r3, [r7, #4]
 8004b56:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004b58:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8004b5c:	d129      	bne.n	8004bb2 <HAL_RCCEx_PeriphCLKConfig+0x5f2>
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));
      /* Check for PLLI2S/DIVQ parameters */
      assert_param(IS_RCC_PLLI2S_DIVQ_VALUE(PeriphClkInit->PLLI2SDivQ));

      /* Read PLLI2SP and PLLI2SR values from PLLI2SCFGR register (this value is not needed for SAI configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos);
 8004b5e:	4b4b      	ldr	r3, [pc, #300]	@ (8004c8c <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8004b60:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8004b64:	0c1b      	lsrs	r3, r3, #16
 8004b66:	f003 0303 	and.w	r3, r3, #3
 8004b6a:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 8004b6c:	4b47      	ldr	r3, [pc, #284]	@ (8004c8c <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8004b6e:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8004b72:	0f1b      	lsrs	r3, r3, #28
 8004b74:	f003 0307 	and.w	r3, r3, #7
 8004b78:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLI2S_VCO Output = PLLI2S_VCO Input * PLLI2SN */
      /* SAI_CLK(first level) = PLLI2S_VCO Output/PLLI2SQ */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN, tmpreg0, PeriphClkInit->PLLI2S.PLLI2SQ, tmpreg1);
 8004b7a:	687b      	ldr	r3, [r7, #4]
 8004b7c:	685b      	ldr	r3, [r3, #4]
 8004b7e:	019a      	lsls	r2, r3, #6
 8004b80:	693b      	ldr	r3, [r7, #16]
 8004b82:	041b      	lsls	r3, r3, #16
 8004b84:	431a      	orrs	r2, r3
 8004b86:	687b      	ldr	r3, [r7, #4]
 8004b88:	68db      	ldr	r3, [r3, #12]
 8004b8a:	061b      	lsls	r3, r3, #24
 8004b8c:	431a      	orrs	r2, r3
 8004b8e:	68fb      	ldr	r3, [r7, #12]
 8004b90:	071b      	lsls	r3, r3, #28
 8004b92:	493e      	ldr	r1, [pc, #248]	@ (8004c8c <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8004b94:	4313      	orrs	r3, r2
 8004b96:	f8c1 3084 	str.w	r3, [r1, #132]	@ 0x84

      /* SAI_CLK_x = SAI_CLK(first level)/PLLI2SDIVQ */
      __HAL_RCC_PLLI2S_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLI2SDivQ);
 8004b9a:	4b3c      	ldr	r3, [pc, #240]	@ (8004c8c <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8004b9c:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8004ba0:	f023 021f 	bic.w	r2, r3, #31
 8004ba4:	687b      	ldr	r3, [r7, #4]
 8004ba6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004ba8:	3b01      	subs	r3, #1
 8004baa:	4938      	ldr	r1, [pc, #224]	@ (8004c8c <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8004bac:	4313      	orrs	r3, r2
 8004bae:	f8c1 308c 	str.w	r3, [r1, #140]	@ 0x8c
    }

    /*----------------- In Case of PLLI2S is selected as source clock for SPDIF-RX -------------------*/
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 8004bb2:	687b      	ldr	r3, [r7, #4]
 8004bb4:	681b      	ldr	r3, [r3, #0]
 8004bb6:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8004bba:	2b00      	cmp	r3, #0
 8004bbc:	d01d      	beq.n	8004bfa <HAL_RCCEx_PeriphCLKConfig+0x63a>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SP_VALUE(PeriphClkInit->PLLI2S.PLLI2SP));

     /* Read PLLI2SR value from PLLI2SCFGR register (this value is not needed for SPDIF-RX configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 8004bbe:	4b33      	ldr	r3, [pc, #204]	@ (8004c8c <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8004bc0:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8004bc4:	0e1b      	lsrs	r3, r3, #24
 8004bc6:	f003 030f 	and.w	r3, r3, #15
 8004bca:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 8004bcc:	4b2f      	ldr	r3, [pc, #188]	@ (8004c8c <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8004bce:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8004bd2:	0f1b      	lsrs	r3, r3, #28
 8004bd4:	f003 0307 	and.w	r3, r3, #7
 8004bd8:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLM) */
      /* SPDIFCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SP */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, tmpreg0, tmpreg1);
 8004bda:	687b      	ldr	r3, [r7, #4]
 8004bdc:	685b      	ldr	r3, [r3, #4]
 8004bde:	019a      	lsls	r2, r3, #6
 8004be0:	687b      	ldr	r3, [r7, #4]
 8004be2:	691b      	ldr	r3, [r3, #16]
 8004be4:	041b      	lsls	r3, r3, #16
 8004be6:	431a      	orrs	r2, r3
 8004be8:	693b      	ldr	r3, [r7, #16]
 8004bea:	061b      	lsls	r3, r3, #24
 8004bec:	431a      	orrs	r2, r3
 8004bee:	68fb      	ldr	r3, [r7, #12]
 8004bf0:	071b      	lsls	r3, r3, #28
 8004bf2:	4926      	ldr	r1, [pc, #152]	@ (8004c8c <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8004bf4:	4313      	orrs	r3, r2
 8004bf6:	f8c1 3084 	str.w	r3, [r1, #132]	@ 0x84
    }

    /*----------------- In Case of PLLI2S is just selected  -----------------*/
    if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S)
 8004bfa:	687b      	ldr	r3, [r7, #4]
 8004bfc:	681b      	ldr	r3, [r3, #0]
 8004bfe:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8004c02:	2b00      	cmp	r3, #0
 8004c04:	d011      	beq.n	8004c2a <HAL_RCCEx_PeriphCLKConfig+0x66a>
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));

      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLI2SM) */
      /* SPDIFRXCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SP */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, PeriphClkInit->PLLI2S.PLLI2SQ, PeriphClkInit->PLLI2S.PLLI2SR);
 8004c06:	687b      	ldr	r3, [r7, #4]
 8004c08:	685b      	ldr	r3, [r3, #4]
 8004c0a:	019a      	lsls	r2, r3, #6
 8004c0c:	687b      	ldr	r3, [r7, #4]
 8004c0e:	691b      	ldr	r3, [r3, #16]
 8004c10:	041b      	lsls	r3, r3, #16
 8004c12:	431a      	orrs	r2, r3
 8004c14:	687b      	ldr	r3, [r7, #4]
 8004c16:	68db      	ldr	r3, [r3, #12]
 8004c18:	061b      	lsls	r3, r3, #24
 8004c1a:	431a      	orrs	r2, r3
 8004c1c:	687b      	ldr	r3, [r7, #4]
 8004c1e:	689b      	ldr	r3, [r3, #8]
 8004c20:	071b      	lsls	r3, r3, #28
 8004c22:	491a      	ldr	r1, [pc, #104]	@ (8004c8c <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8004c24:	4313      	orrs	r3, r2
 8004c26:	f8c1 3084 	str.w	r3, [r1, #132]	@ 0x84
    }

    /* Enable the PLLI2S */
    __HAL_RCC_PLLI2S_ENABLE();
 8004c2a:	4b18      	ldr	r3, [pc, #96]	@ (8004c8c <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8004c2c:	681b      	ldr	r3, [r3, #0]
 8004c2e:	4a17      	ldr	r2, [pc, #92]	@ (8004c8c <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8004c30:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 8004c34:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8004c36:	f7fd f981 	bl	8001f3c <HAL_GetTick>
 8004c3a:	6178      	str	r0, [r7, #20]

    /* Wait till PLLI2S is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8004c3c:	e008      	b.n	8004c50 <HAL_RCCEx_PeriphCLKConfig+0x690>
    {
      if((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 8004c3e:	f7fd f97d 	bl	8001f3c <HAL_GetTick>
 8004c42:	4602      	mov	r2, r0
 8004c44:	697b      	ldr	r3, [r7, #20]
 8004c46:	1ad3      	subs	r3, r2, r3
 8004c48:	2b64      	cmp	r3, #100	@ 0x64
 8004c4a:	d901      	bls.n	8004c50 <HAL_RCCEx_PeriphCLKConfig+0x690>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8004c4c:	2303      	movs	r3, #3
 8004c4e:	e0d8      	b.n	8004e02 <HAL_RCCEx_PeriphCLKConfig+0x842>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8004c50:	4b0e      	ldr	r3, [pc, #56]	@ (8004c8c <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8004c52:	681b      	ldr	r3, [r3, #0]
 8004c54:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8004c58:	2b00      	cmp	r3, #0
 8004c5a:	d0f0      	beq.n	8004c3e <HAL_RCCEx_PeriphCLKConfig+0x67e>
    }
  }

  /*-------------------------------------- PLLSAI Configuration ---------------------------------*/
  /* PLLSAI is configured when a peripheral will use it as source clock : SAI1, SAI2, LTDC or CK48 */
  if(pllsaiused == 1)
 8004c5c:	69bb      	ldr	r3, [r7, #24]
 8004c5e:	2b01      	cmp	r3, #1
 8004c60:	f040 80ce 	bne.w	8004e00 <HAL_RCCEx_PeriphCLKConfig+0x840>
  {
    /* Disable PLLSAI Clock */
    __HAL_RCC_PLLSAI_DISABLE();
 8004c64:	4b09      	ldr	r3, [pc, #36]	@ (8004c8c <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8004c66:	681b      	ldr	r3, [r3, #0]
 8004c68:	4a08      	ldr	r2, [pc, #32]	@ (8004c8c <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8004c6a:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8004c6e:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8004c70:	f7fd f964 	bl	8001f3c <HAL_GetTick>
 8004c74:	6178      	str	r0, [r7, #20]

    /* Wait till PLLSAI is disabled */
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 8004c76:	e00b      	b.n	8004c90 <HAL_RCCEx_PeriphCLKConfig+0x6d0>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 8004c78:	f7fd f960 	bl	8001f3c <HAL_GetTick>
 8004c7c:	4602      	mov	r2, r0
 8004c7e:	697b      	ldr	r3, [r7, #20]
 8004c80:	1ad3      	subs	r3, r2, r3
 8004c82:	2b64      	cmp	r3, #100	@ 0x64
 8004c84:	d904      	bls.n	8004c90 <HAL_RCCEx_PeriphCLKConfig+0x6d0>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8004c86:	2303      	movs	r3, #3
 8004c88:	e0bb      	b.n	8004e02 <HAL_RCCEx_PeriphCLKConfig+0x842>
 8004c8a:	bf00      	nop
 8004c8c:	40023800 	.word	0x40023800
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 8004c90:	4b5e      	ldr	r3, [pc, #376]	@ (8004e0c <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8004c92:	681b      	ldr	r3, [r3, #0]
 8004c94:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8004c98:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8004c9c:	d0ec      	beq.n	8004c78 <HAL_RCCEx_PeriphCLKConfig+0x6b8>

    /* Check the PLLSAI division factors */
    assert_param(IS_RCC_PLLSAIN_VALUE(PeriphClkInit->PLLSAI.PLLSAIN));

    /*----------------- In Case of PLLSAI is selected as source clock for SAI -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||\
 8004c9e:	687b      	ldr	r3, [r7, #4]
 8004ca0:	681b      	ldr	r3, [r3, #0]
 8004ca2:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8004ca6:	2b00      	cmp	r3, #0
 8004ca8:	d003      	beq.n	8004cb2 <HAL_RCCEx_PeriphCLKConfig+0x6f2>
 8004caa:	687b      	ldr	r3, [r7, #4]
 8004cac:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004cae:	2b00      	cmp	r3, #0
 8004cb0:	d009      	beq.n	8004cc6 <HAL_RCCEx_PeriphCLKConfig+0x706>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 8004cb2:	687b      	ldr	r3, [r7, #4]
 8004cb4:	681b      	ldr	r3, [r3, #0]
 8004cb6:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||\
 8004cba:	2b00      	cmp	r3, #0
 8004cbc:	d02e      	beq.n	8004d1c <HAL_RCCEx_PeriphCLKConfig+0x75c>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 8004cbe:	687b      	ldr	r3, [r7, #4]
 8004cc0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004cc2:	2b00      	cmp	r3, #0
 8004cc4:	d12a      	bne.n	8004d1c <HAL_RCCEx_PeriphCLKConfig+0x75c>
      assert_param(IS_RCC_PLLSAIQ_VALUE(PeriphClkInit->PLLSAI.PLLSAIQ));
      /* check for PLLSAI/DIVQ Parameter */
      assert_param(IS_RCC_PLLSAI_DIVQ_VALUE(PeriphClkInit->PLLSAIDivQ));

      /* Read PLLSAIP value from PLLSAICFGR register (this value is not needed for SAI configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos);
 8004cc6:	4b51      	ldr	r3, [pc, #324]	@ (8004e0c <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8004cc8:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004ccc:	0c1b      	lsrs	r3, r3, #16
 8004cce:	f003 0303 	and.w	r3, r3, #3
 8004cd2:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 8004cd4:	4b4d      	ldr	r3, [pc, #308]	@ (8004e0c <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8004cd6:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004cda:	0f1b      	lsrs	r3, r3, #28
 8004cdc:	f003 0307 	and.w	r3, r3, #7
 8004ce0:	60fb      	str	r3, [r7, #12]
      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* SAI_CLK(first level) = PLLSAI_VCO Output/PLLSAIQ */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg0, PeriphClkInit->PLLSAI.PLLSAIQ, tmpreg1);
 8004ce2:	687b      	ldr	r3, [r7, #4]
 8004ce4:	695b      	ldr	r3, [r3, #20]
 8004ce6:	019a      	lsls	r2, r3, #6
 8004ce8:	693b      	ldr	r3, [r7, #16]
 8004cea:	041b      	lsls	r3, r3, #16
 8004cec:	431a      	orrs	r2, r3
 8004cee:	687b      	ldr	r3, [r7, #4]
 8004cf0:	699b      	ldr	r3, [r3, #24]
 8004cf2:	061b      	lsls	r3, r3, #24
 8004cf4:	431a      	orrs	r2, r3
 8004cf6:	68fb      	ldr	r3, [r7, #12]
 8004cf8:	071b      	lsls	r3, r3, #28
 8004cfa:	4944      	ldr	r1, [pc, #272]	@ (8004e0c <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8004cfc:	4313      	orrs	r3, r2
 8004cfe:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

      /* SAI_CLK_x = SAI_CLK(first level)/PLLSAIDIVQ */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLSAIDivQ);
 8004d02:	4b42      	ldr	r3, [pc, #264]	@ (8004e0c <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8004d04:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8004d08:	f423 52f8 	bic.w	r2, r3, #7936	@ 0x1f00
 8004d0c:	687b      	ldr	r3, [r7, #4]
 8004d0e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004d10:	3b01      	subs	r3, #1
 8004d12:	021b      	lsls	r3, r3, #8
 8004d14:	493d      	ldr	r1, [pc, #244]	@ (8004e0c <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8004d16:	4313      	orrs	r3, r2
 8004d18:	f8c1 308c 	str.w	r3, [r1, #140]	@ 0x8c
    }

    /*----------------- In Case of PLLSAI is selected as source clock for CLK48 -------------------*/
    /* In Case of PLLI2S is selected as source clock for CK48 */
    if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48) && (PeriphClkInit->Clk48ClockSelection == RCC_CLK48SOURCE_PLLSAIP))
 8004d1c:	687b      	ldr	r3, [r7, #4]
 8004d1e:	681b      	ldr	r3, [r3, #0]
 8004d20:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8004d24:	2b00      	cmp	r3, #0
 8004d26:	d022      	beq.n	8004d6e <HAL_RCCEx_PeriphCLKConfig+0x7ae>
 8004d28:	687b      	ldr	r3, [r7, #4]
 8004d2a:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8004d2c:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8004d30:	d11d      	bne.n	8004d6e <HAL_RCCEx_PeriphCLKConfig+0x7ae>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLSAIP_VALUE(PeriphClkInit->PLLSAI.PLLSAIP));
      /* Read PLLSAIQ and PLLSAIR value from PLLSAICFGR register (this value is not needed for CK48 configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 8004d32:	4b36      	ldr	r3, [pc, #216]	@ (8004e0c <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8004d34:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004d38:	0e1b      	lsrs	r3, r3, #24
 8004d3a:	f003 030f 	and.w	r3, r3, #15
 8004d3e:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 8004d40:	4b32      	ldr	r3, [pc, #200]	@ (8004e0c <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8004d42:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004d46:	0f1b      	lsrs	r3, r3, #28
 8004d48:	f003 0307 	and.w	r3, r3, #7
 8004d4c:	60fb      	str	r3, [r7, #12]

      /* Configure the PLLSAI division factors */
      /* PLLSAI_VCO = f(VCO clock) = f(PLLSAI clock input) x (PLLI2SN/PLLM) */
      /* 48CLK = f(PLLSAI clock output) = f(VCO clock) / PLLSAIP */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , PeriphClkInit->PLLSAI.PLLSAIP, tmpreg0, tmpreg1);
 8004d4e:	687b      	ldr	r3, [r7, #4]
 8004d50:	695b      	ldr	r3, [r3, #20]
 8004d52:	019a      	lsls	r2, r3, #6
 8004d54:	687b      	ldr	r3, [r7, #4]
 8004d56:	6a1b      	ldr	r3, [r3, #32]
 8004d58:	041b      	lsls	r3, r3, #16
 8004d5a:	431a      	orrs	r2, r3
 8004d5c:	693b      	ldr	r3, [r7, #16]
 8004d5e:	061b      	lsls	r3, r3, #24
 8004d60:	431a      	orrs	r2, r3
 8004d62:	68fb      	ldr	r3, [r7, #12]
 8004d64:	071b      	lsls	r3, r3, #28
 8004d66:	4929      	ldr	r1, [pc, #164]	@ (8004e0c <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8004d68:	4313      	orrs	r3, r2
 8004d6a:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    }

#if defined(STM32F746xx) || defined(STM32F756xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx) || defined (STM32F750xx)
    /*---------------------------- LTDC configuration -------------------------------*/
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == (RCC_PERIPHCLK_LTDC))
 8004d6e:	687b      	ldr	r3, [r7, #4]
 8004d70:	681b      	ldr	r3, [r3, #0]
 8004d72:	f003 0308 	and.w	r3, r3, #8
 8004d76:	2b00      	cmp	r3, #0
 8004d78:	d028      	beq.n	8004dcc <HAL_RCCEx_PeriphCLKConfig+0x80c>
    {
      assert_param(IS_RCC_PLLSAIR_VALUE(PeriphClkInit->PLLSAI.PLLSAIR));
      assert_param(IS_RCC_PLLSAI_DIVR_VALUE(PeriphClkInit->PLLSAIDivR));

      /* Read PLLSAIP and PLLSAIQ value from PLLSAICFGR register (these value are not needed for LTDC configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 8004d7a:	4b24      	ldr	r3, [pc, #144]	@ (8004e0c <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8004d7c:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004d80:	0e1b      	lsrs	r3, r3, #24
 8004d82:	f003 030f 	and.w	r3, r3, #15
 8004d86:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos);
 8004d88:	4b20      	ldr	r3, [pc, #128]	@ (8004e0c <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8004d8a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004d8e:	0c1b      	lsrs	r3, r3, #16
 8004d90:	f003 0303 	and.w	r3, r3, #3
 8004d94:	60fb      	str	r3, [r7, #12]

      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* LTDC_CLK(first level) = PLLSAI_VCO Output/PLLSAIR */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg1, tmpreg0, PeriphClkInit->PLLSAI.PLLSAIR);
 8004d96:	687b      	ldr	r3, [r7, #4]
 8004d98:	695b      	ldr	r3, [r3, #20]
 8004d9a:	019a      	lsls	r2, r3, #6
 8004d9c:	68fb      	ldr	r3, [r7, #12]
 8004d9e:	041b      	lsls	r3, r3, #16
 8004da0:	431a      	orrs	r2, r3
 8004da2:	693b      	ldr	r3, [r7, #16]
 8004da4:	061b      	lsls	r3, r3, #24
 8004da6:	431a      	orrs	r2, r3
 8004da8:	687b      	ldr	r3, [r7, #4]
 8004daa:	69db      	ldr	r3, [r3, #28]
 8004dac:	071b      	lsls	r3, r3, #28
 8004dae:	4917      	ldr	r1, [pc, #92]	@ (8004e0c <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8004db0:	4313      	orrs	r3, r2
 8004db2:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

      /* LTDC_CLK = LTDC_CLK(first level)/PLLSAIDIVR */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVR_CONFIG(PeriphClkInit->PLLSAIDivR);
 8004db6:	4b15      	ldr	r3, [pc, #84]	@ (8004e0c <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8004db8:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8004dbc:	f423 3240 	bic.w	r2, r3, #196608	@ 0x30000
 8004dc0:	687b      	ldr	r3, [r7, #4]
 8004dc2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004dc4:	4911      	ldr	r1, [pc, #68]	@ (8004e0c <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8004dc6:	4313      	orrs	r3, r2
 8004dc8:	f8c1 308c 	str.w	r3, [r1, #140]	@ 0x8c
    }
#endif /* STM32F746xx || STM32F756xx || STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx || STM32F750xx  */

    /* Enable PLLSAI Clock */
    __HAL_RCC_PLLSAI_ENABLE();
 8004dcc:	4b0f      	ldr	r3, [pc, #60]	@ (8004e0c <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8004dce:	681b      	ldr	r3, [r3, #0]
 8004dd0:	4a0e      	ldr	r2, [pc, #56]	@ (8004e0c <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8004dd2:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8004dd6:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8004dd8:	f7fd f8b0 	bl	8001f3c <HAL_GetTick>
 8004ddc:	6178      	str	r0, [r7, #20]

    /* Wait till PLLSAI is ready */
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 8004dde:	e008      	b.n	8004df2 <HAL_RCCEx_PeriphCLKConfig+0x832>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 8004de0:	f7fd f8ac 	bl	8001f3c <HAL_GetTick>
 8004de4:	4602      	mov	r2, r0
 8004de6:	697b      	ldr	r3, [r7, #20]
 8004de8:	1ad3      	subs	r3, r2, r3
 8004dea:	2b64      	cmp	r3, #100	@ 0x64
 8004dec:	d901      	bls.n	8004df2 <HAL_RCCEx_PeriphCLKConfig+0x832>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8004dee:	2303      	movs	r3, #3
 8004df0:	e007      	b.n	8004e02 <HAL_RCCEx_PeriphCLKConfig+0x842>
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 8004df2:	4b06      	ldr	r3, [pc, #24]	@ (8004e0c <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8004df4:	681b      	ldr	r3, [r3, #0]
 8004df6:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8004dfa:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8004dfe:	d1ef      	bne.n	8004de0 <HAL_RCCEx_PeriphCLKConfig+0x820>
      }
    }
  }
  return HAL_OK;
 8004e00:	2300      	movs	r3, #0
}
 8004e02:	4618      	mov	r0, r3
 8004e04:	3720      	adds	r7, #32
 8004e06:	46bd      	mov	sp, r7
 8004e08:	bd80      	pop	{r7, pc}
 8004e0a:	bf00      	nop
 8004e0c:	40023800 	.word	0x40023800

08004e10 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8004e10:	b580      	push	{r7, lr}
 8004e12:	b082      	sub	sp, #8
 8004e14:	af00      	add	r7, sp, #0
 8004e16:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8004e18:	687b      	ldr	r3, [r7, #4]
 8004e1a:	2b00      	cmp	r3, #0
 8004e1c:	d101      	bne.n	8004e22 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8004e1e:	2301      	movs	r3, #1
 8004e20:	e049      	b.n	8004eb6 <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8004e22:	687b      	ldr	r3, [r7, #4]
 8004e24:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8004e28:	b2db      	uxtb	r3, r3
 8004e2a:	2b00      	cmp	r3, #0
 8004e2c:	d106      	bne.n	8004e3c <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8004e2e:	687b      	ldr	r3, [r7, #4]
 8004e30:	2200      	movs	r2, #0
 8004e32:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8004e36:	6878      	ldr	r0, [r7, #4]
 8004e38:	f7fc fdf2 	bl	8001a20 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004e3c:	687b      	ldr	r3, [r7, #4]
 8004e3e:	2202      	movs	r2, #2
 8004e40:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8004e44:	687b      	ldr	r3, [r7, #4]
 8004e46:	681a      	ldr	r2, [r3, #0]
 8004e48:	687b      	ldr	r3, [r7, #4]
 8004e4a:	3304      	adds	r3, #4
 8004e4c:	4619      	mov	r1, r3
 8004e4e:	4610      	mov	r0, r2
 8004e50:	f000 fae0 	bl	8005414 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8004e54:	687b      	ldr	r3, [r7, #4]
 8004e56:	2201      	movs	r2, #1
 8004e58:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004e5c:	687b      	ldr	r3, [r7, #4]
 8004e5e:	2201      	movs	r2, #1
 8004e60:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8004e64:	687b      	ldr	r3, [r7, #4]
 8004e66:	2201      	movs	r2, #1
 8004e68:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8004e6c:	687b      	ldr	r3, [r7, #4]
 8004e6e:	2201      	movs	r2, #1
 8004e70:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8004e74:	687b      	ldr	r3, [r7, #4]
 8004e76:	2201      	movs	r2, #1
 8004e78:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 8004e7c:	687b      	ldr	r3, [r7, #4]
 8004e7e:	2201      	movs	r2, #1
 8004e80:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8004e84:	687b      	ldr	r3, [r7, #4]
 8004e86:	2201      	movs	r2, #1
 8004e88:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004e8c:	687b      	ldr	r3, [r7, #4]
 8004e8e:	2201      	movs	r2, #1
 8004e90:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8004e94:	687b      	ldr	r3, [r7, #4]
 8004e96:	2201      	movs	r2, #1
 8004e98:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8004e9c:	687b      	ldr	r3, [r7, #4]
 8004e9e:	2201      	movs	r2, #1
 8004ea0:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
 8004ea4:	687b      	ldr	r3, [r7, #4]
 8004ea6:	2201      	movs	r2, #1
 8004ea8:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8004eac:	687b      	ldr	r3, [r7, #4]
 8004eae:	2201      	movs	r2, #1
 8004eb0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8004eb4:	2300      	movs	r3, #0
}
 8004eb6:	4618      	mov	r0, r3
 8004eb8:	3708      	adds	r7, #8
 8004eba:	46bd      	mov	sp, r7
 8004ebc:	bd80      	pop	{r7, pc}
	...

08004ec0 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8004ec0:	b480      	push	{r7}
 8004ec2:	b085      	sub	sp, #20
 8004ec4:	af00      	add	r7, sp, #0
 8004ec6:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8004ec8:	687b      	ldr	r3, [r7, #4]
 8004eca:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8004ece:	b2db      	uxtb	r3, r3
 8004ed0:	2b01      	cmp	r3, #1
 8004ed2:	d001      	beq.n	8004ed8 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8004ed4:	2301      	movs	r3, #1
 8004ed6:	e054      	b.n	8004f82 <HAL_TIM_Base_Start_IT+0xc2>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004ed8:	687b      	ldr	r3, [r7, #4]
 8004eda:	2202      	movs	r2, #2
 8004edc:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8004ee0:	687b      	ldr	r3, [r7, #4]
 8004ee2:	681b      	ldr	r3, [r3, #0]
 8004ee4:	68da      	ldr	r2, [r3, #12]
 8004ee6:	687b      	ldr	r3, [r7, #4]
 8004ee8:	681b      	ldr	r3, [r3, #0]
 8004eea:	f042 0201 	orr.w	r2, r2, #1
 8004eee:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8004ef0:	687b      	ldr	r3, [r7, #4]
 8004ef2:	681b      	ldr	r3, [r3, #0]
 8004ef4:	4a26      	ldr	r2, [pc, #152]	@ (8004f90 <HAL_TIM_Base_Start_IT+0xd0>)
 8004ef6:	4293      	cmp	r3, r2
 8004ef8:	d022      	beq.n	8004f40 <HAL_TIM_Base_Start_IT+0x80>
 8004efa:	687b      	ldr	r3, [r7, #4]
 8004efc:	681b      	ldr	r3, [r3, #0]
 8004efe:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8004f02:	d01d      	beq.n	8004f40 <HAL_TIM_Base_Start_IT+0x80>
 8004f04:	687b      	ldr	r3, [r7, #4]
 8004f06:	681b      	ldr	r3, [r3, #0]
 8004f08:	4a22      	ldr	r2, [pc, #136]	@ (8004f94 <HAL_TIM_Base_Start_IT+0xd4>)
 8004f0a:	4293      	cmp	r3, r2
 8004f0c:	d018      	beq.n	8004f40 <HAL_TIM_Base_Start_IT+0x80>
 8004f0e:	687b      	ldr	r3, [r7, #4]
 8004f10:	681b      	ldr	r3, [r3, #0]
 8004f12:	4a21      	ldr	r2, [pc, #132]	@ (8004f98 <HAL_TIM_Base_Start_IT+0xd8>)
 8004f14:	4293      	cmp	r3, r2
 8004f16:	d013      	beq.n	8004f40 <HAL_TIM_Base_Start_IT+0x80>
 8004f18:	687b      	ldr	r3, [r7, #4]
 8004f1a:	681b      	ldr	r3, [r3, #0]
 8004f1c:	4a1f      	ldr	r2, [pc, #124]	@ (8004f9c <HAL_TIM_Base_Start_IT+0xdc>)
 8004f1e:	4293      	cmp	r3, r2
 8004f20:	d00e      	beq.n	8004f40 <HAL_TIM_Base_Start_IT+0x80>
 8004f22:	687b      	ldr	r3, [r7, #4]
 8004f24:	681b      	ldr	r3, [r3, #0]
 8004f26:	4a1e      	ldr	r2, [pc, #120]	@ (8004fa0 <HAL_TIM_Base_Start_IT+0xe0>)
 8004f28:	4293      	cmp	r3, r2
 8004f2a:	d009      	beq.n	8004f40 <HAL_TIM_Base_Start_IT+0x80>
 8004f2c:	687b      	ldr	r3, [r7, #4]
 8004f2e:	681b      	ldr	r3, [r3, #0]
 8004f30:	4a1c      	ldr	r2, [pc, #112]	@ (8004fa4 <HAL_TIM_Base_Start_IT+0xe4>)
 8004f32:	4293      	cmp	r3, r2
 8004f34:	d004      	beq.n	8004f40 <HAL_TIM_Base_Start_IT+0x80>
 8004f36:	687b      	ldr	r3, [r7, #4]
 8004f38:	681b      	ldr	r3, [r3, #0]
 8004f3a:	4a1b      	ldr	r2, [pc, #108]	@ (8004fa8 <HAL_TIM_Base_Start_IT+0xe8>)
 8004f3c:	4293      	cmp	r3, r2
 8004f3e:	d115      	bne.n	8004f6c <HAL_TIM_Base_Start_IT+0xac>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8004f40:	687b      	ldr	r3, [r7, #4]
 8004f42:	681b      	ldr	r3, [r3, #0]
 8004f44:	689a      	ldr	r2, [r3, #8]
 8004f46:	4b19      	ldr	r3, [pc, #100]	@ (8004fac <HAL_TIM_Base_Start_IT+0xec>)
 8004f48:	4013      	ands	r3, r2
 8004f4a:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004f4c:	68fb      	ldr	r3, [r7, #12]
 8004f4e:	2b06      	cmp	r3, #6
 8004f50:	d015      	beq.n	8004f7e <HAL_TIM_Base_Start_IT+0xbe>
 8004f52:	68fb      	ldr	r3, [r7, #12]
 8004f54:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8004f58:	d011      	beq.n	8004f7e <HAL_TIM_Base_Start_IT+0xbe>
    {
      __HAL_TIM_ENABLE(htim);
 8004f5a:	687b      	ldr	r3, [r7, #4]
 8004f5c:	681b      	ldr	r3, [r3, #0]
 8004f5e:	681a      	ldr	r2, [r3, #0]
 8004f60:	687b      	ldr	r3, [r7, #4]
 8004f62:	681b      	ldr	r3, [r3, #0]
 8004f64:	f042 0201 	orr.w	r2, r2, #1
 8004f68:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004f6a:	e008      	b.n	8004f7e <HAL_TIM_Base_Start_IT+0xbe>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8004f6c:	687b      	ldr	r3, [r7, #4]
 8004f6e:	681b      	ldr	r3, [r3, #0]
 8004f70:	681a      	ldr	r2, [r3, #0]
 8004f72:	687b      	ldr	r3, [r7, #4]
 8004f74:	681b      	ldr	r3, [r3, #0]
 8004f76:	f042 0201 	orr.w	r2, r2, #1
 8004f7a:	601a      	str	r2, [r3, #0]
 8004f7c:	e000      	b.n	8004f80 <HAL_TIM_Base_Start_IT+0xc0>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004f7e:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8004f80:	2300      	movs	r3, #0
}
 8004f82:	4618      	mov	r0, r3
 8004f84:	3714      	adds	r7, #20
 8004f86:	46bd      	mov	sp, r7
 8004f88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f8c:	4770      	bx	lr
 8004f8e:	bf00      	nop
 8004f90:	40010000 	.word	0x40010000
 8004f94:	40000400 	.word	0x40000400
 8004f98:	40000800 	.word	0x40000800
 8004f9c:	40000c00 	.word	0x40000c00
 8004fa0:	40010400 	.word	0x40010400
 8004fa4:	40014000 	.word	0x40014000
 8004fa8:	40001800 	.word	0x40001800
 8004fac:	00010007 	.word	0x00010007

08004fb0 <HAL_TIM_Base_Stop_IT>:
  * @brief  Stops the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Stop_IT(TIM_HandleTypeDef *htim)
{
 8004fb0:	b480      	push	{r7}
 8004fb2:	b083      	sub	sp, #12
 8004fb4:	af00      	add	r7, sp, #0
 8004fb6:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Disable the TIM Update interrupt */
  __HAL_TIM_DISABLE_IT(htim, TIM_IT_UPDATE);
 8004fb8:	687b      	ldr	r3, [r7, #4]
 8004fba:	681b      	ldr	r3, [r3, #0]
 8004fbc:	68da      	ldr	r2, [r3, #12]
 8004fbe:	687b      	ldr	r3, [r7, #4]
 8004fc0:	681b      	ldr	r3, [r3, #0]
 8004fc2:	f022 0201 	bic.w	r2, r2, #1
 8004fc6:	60da      	str	r2, [r3, #12]

  /* Disable the Peripheral */
  __HAL_TIM_DISABLE(htim);
 8004fc8:	687b      	ldr	r3, [r7, #4]
 8004fca:	681b      	ldr	r3, [r3, #0]
 8004fcc:	6a1a      	ldr	r2, [r3, #32]
 8004fce:	f241 1311 	movw	r3, #4369	@ 0x1111
 8004fd2:	4013      	ands	r3, r2
 8004fd4:	2b00      	cmp	r3, #0
 8004fd6:	d10f      	bne.n	8004ff8 <HAL_TIM_Base_Stop_IT+0x48>
 8004fd8:	687b      	ldr	r3, [r7, #4]
 8004fda:	681b      	ldr	r3, [r3, #0]
 8004fdc:	6a1a      	ldr	r2, [r3, #32]
 8004fde:	f240 4344 	movw	r3, #1092	@ 0x444
 8004fe2:	4013      	ands	r3, r2
 8004fe4:	2b00      	cmp	r3, #0
 8004fe6:	d107      	bne.n	8004ff8 <HAL_TIM_Base_Stop_IT+0x48>
 8004fe8:	687b      	ldr	r3, [r7, #4]
 8004fea:	681b      	ldr	r3, [r3, #0]
 8004fec:	681a      	ldr	r2, [r3, #0]
 8004fee:	687b      	ldr	r3, [r7, #4]
 8004ff0:	681b      	ldr	r3, [r3, #0]
 8004ff2:	f022 0201 	bic.w	r2, r2, #1
 8004ff6:	601a      	str	r2, [r3, #0]

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_READY;
 8004ff8:	687b      	ldr	r3, [r7, #4]
 8004ffa:	2201      	movs	r2, #1
 8004ffc:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Return function status */
  return HAL_OK;
 8005000:	2300      	movs	r3, #0
}
 8005002:	4618      	mov	r0, r3
 8005004:	370c      	adds	r7, #12
 8005006:	46bd      	mov	sp, r7
 8005008:	f85d 7b04 	ldr.w	r7, [sp], #4
 800500c:	4770      	bx	lr

0800500e <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 800500e:	b580      	push	{r7, lr}
 8005010:	b084      	sub	sp, #16
 8005012:	af00      	add	r7, sp, #0
 8005014:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 8005016:	687b      	ldr	r3, [r7, #4]
 8005018:	681b      	ldr	r3, [r3, #0]
 800501a:	68db      	ldr	r3, [r3, #12]
 800501c:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 800501e:	687b      	ldr	r3, [r7, #4]
 8005020:	681b      	ldr	r3, [r3, #0]
 8005022:	691b      	ldr	r3, [r3, #16]
 8005024:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 8005026:	68bb      	ldr	r3, [r7, #8]
 8005028:	f003 0302 	and.w	r3, r3, #2
 800502c:	2b00      	cmp	r3, #0
 800502e:	d020      	beq.n	8005072 <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 8005030:	68fb      	ldr	r3, [r7, #12]
 8005032:	f003 0302 	and.w	r3, r3, #2
 8005036:	2b00      	cmp	r3, #0
 8005038:	d01b      	beq.n	8005072 <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 800503a:	687b      	ldr	r3, [r7, #4]
 800503c:	681b      	ldr	r3, [r3, #0]
 800503e:	f06f 0202 	mvn.w	r2, #2
 8005042:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8005044:	687b      	ldr	r3, [r7, #4]
 8005046:	2201      	movs	r2, #1
 8005048:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 800504a:	687b      	ldr	r3, [r7, #4]
 800504c:	681b      	ldr	r3, [r3, #0]
 800504e:	699b      	ldr	r3, [r3, #24]
 8005050:	f003 0303 	and.w	r3, r3, #3
 8005054:	2b00      	cmp	r3, #0
 8005056:	d003      	beq.n	8005060 <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8005058:	6878      	ldr	r0, [r7, #4]
 800505a:	f000 f9bd 	bl	80053d8 <HAL_TIM_IC_CaptureCallback>
 800505e:	e005      	b.n	800506c <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8005060:	6878      	ldr	r0, [r7, #4]
 8005062:	f000 f9af 	bl	80053c4 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005066:	6878      	ldr	r0, [r7, #4]
 8005068:	f000 f9c0 	bl	80053ec <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800506c:	687b      	ldr	r3, [r7, #4]
 800506e:	2200      	movs	r2, #0
 8005070:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 8005072:	68bb      	ldr	r3, [r7, #8]
 8005074:	f003 0304 	and.w	r3, r3, #4
 8005078:	2b00      	cmp	r3, #0
 800507a:	d020      	beq.n	80050be <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 800507c:	68fb      	ldr	r3, [r7, #12]
 800507e:	f003 0304 	and.w	r3, r3, #4
 8005082:	2b00      	cmp	r3, #0
 8005084:	d01b      	beq.n	80050be <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 8005086:	687b      	ldr	r3, [r7, #4]
 8005088:	681b      	ldr	r3, [r3, #0]
 800508a:	f06f 0204 	mvn.w	r2, #4
 800508e:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8005090:	687b      	ldr	r3, [r7, #4]
 8005092:	2202      	movs	r2, #2
 8005094:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8005096:	687b      	ldr	r3, [r7, #4]
 8005098:	681b      	ldr	r3, [r3, #0]
 800509a:	699b      	ldr	r3, [r3, #24]
 800509c:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 80050a0:	2b00      	cmp	r3, #0
 80050a2:	d003      	beq.n	80050ac <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80050a4:	6878      	ldr	r0, [r7, #4]
 80050a6:	f000 f997 	bl	80053d8 <HAL_TIM_IC_CaptureCallback>
 80050aa:	e005      	b.n	80050b8 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80050ac:	6878      	ldr	r0, [r7, #4]
 80050ae:	f000 f989 	bl	80053c4 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80050b2:	6878      	ldr	r0, [r7, #4]
 80050b4:	f000 f99a 	bl	80053ec <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80050b8:	687b      	ldr	r3, [r7, #4]
 80050ba:	2200      	movs	r2, #0
 80050bc:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 80050be:	68bb      	ldr	r3, [r7, #8]
 80050c0:	f003 0308 	and.w	r3, r3, #8
 80050c4:	2b00      	cmp	r3, #0
 80050c6:	d020      	beq.n	800510a <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 80050c8:	68fb      	ldr	r3, [r7, #12]
 80050ca:	f003 0308 	and.w	r3, r3, #8
 80050ce:	2b00      	cmp	r3, #0
 80050d0:	d01b      	beq.n	800510a <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 80050d2:	687b      	ldr	r3, [r7, #4]
 80050d4:	681b      	ldr	r3, [r3, #0]
 80050d6:	f06f 0208 	mvn.w	r2, #8
 80050da:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 80050dc:	687b      	ldr	r3, [r7, #4]
 80050de:	2204      	movs	r2, #4
 80050e0:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 80050e2:	687b      	ldr	r3, [r7, #4]
 80050e4:	681b      	ldr	r3, [r3, #0]
 80050e6:	69db      	ldr	r3, [r3, #28]
 80050e8:	f003 0303 	and.w	r3, r3, #3
 80050ec:	2b00      	cmp	r3, #0
 80050ee:	d003      	beq.n	80050f8 <HAL_TIM_IRQHandler+0xea>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80050f0:	6878      	ldr	r0, [r7, #4]
 80050f2:	f000 f971 	bl	80053d8 <HAL_TIM_IC_CaptureCallback>
 80050f6:	e005      	b.n	8005104 <HAL_TIM_IRQHandler+0xf6>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80050f8:	6878      	ldr	r0, [r7, #4]
 80050fa:	f000 f963 	bl	80053c4 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80050fe:	6878      	ldr	r0, [r7, #4]
 8005100:	f000 f974 	bl	80053ec <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005104:	687b      	ldr	r3, [r7, #4]
 8005106:	2200      	movs	r2, #0
 8005108:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 800510a:	68bb      	ldr	r3, [r7, #8]
 800510c:	f003 0310 	and.w	r3, r3, #16
 8005110:	2b00      	cmp	r3, #0
 8005112:	d020      	beq.n	8005156 <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 8005114:	68fb      	ldr	r3, [r7, #12]
 8005116:	f003 0310 	and.w	r3, r3, #16
 800511a:	2b00      	cmp	r3, #0
 800511c:	d01b      	beq.n	8005156 <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 800511e:	687b      	ldr	r3, [r7, #4]
 8005120:	681b      	ldr	r3, [r3, #0]
 8005122:	f06f 0210 	mvn.w	r2, #16
 8005126:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8005128:	687b      	ldr	r3, [r7, #4]
 800512a:	2208      	movs	r2, #8
 800512c:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 800512e:	687b      	ldr	r3, [r7, #4]
 8005130:	681b      	ldr	r3, [r3, #0]
 8005132:	69db      	ldr	r3, [r3, #28]
 8005134:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8005138:	2b00      	cmp	r3, #0
 800513a:	d003      	beq.n	8005144 <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800513c:	6878      	ldr	r0, [r7, #4]
 800513e:	f000 f94b 	bl	80053d8 <HAL_TIM_IC_CaptureCallback>
 8005142:	e005      	b.n	8005150 <HAL_TIM_IRQHandler+0x142>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8005144:	6878      	ldr	r0, [r7, #4]
 8005146:	f000 f93d 	bl	80053c4 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800514a:	6878      	ldr	r0, [r7, #4]
 800514c:	f000 f94e 	bl	80053ec <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005150:	687b      	ldr	r3, [r7, #4]
 8005152:	2200      	movs	r2, #0
 8005154:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 8005156:	68bb      	ldr	r3, [r7, #8]
 8005158:	f003 0301 	and.w	r3, r3, #1
 800515c:	2b00      	cmp	r3, #0
 800515e:	d00c      	beq.n	800517a <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 8005160:	68fb      	ldr	r3, [r7, #12]
 8005162:	f003 0301 	and.w	r3, r3, #1
 8005166:	2b00      	cmp	r3, #0
 8005168:	d007      	beq.n	800517a <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 800516a:	687b      	ldr	r3, [r7, #4]
 800516c:	681b      	ldr	r3, [r3, #0]
 800516e:	f06f 0201 	mvn.w	r2, #1
 8005172:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8005174:	6878      	ldr	r0, [r7, #4]
 8005176:	f000 f91b 	bl	80053b0 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK)) || \
 800517a:	68bb      	ldr	r3, [r7, #8]
 800517c:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8005180:	2b00      	cmp	r3, #0
 8005182:	d104      	bne.n	800518e <HAL_TIM_IRQHandler+0x180>
      ((itflag & (TIM_FLAG_SYSTEM_BREAK)) == (TIM_FLAG_SYSTEM_BREAK)))
 8005184:	68bb      	ldr	r3, [r7, #8]
 8005186:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
  if (((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK)) || \
 800518a:	2b00      	cmp	r3, #0
 800518c:	d00c      	beq.n	80051a8 <HAL_TIM_IRQHandler+0x19a>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 800518e:	68fb      	ldr	r3, [r7, #12]
 8005190:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8005194:	2b00      	cmp	r3, #0
 8005196:	d007      	beq.n	80051a8 <HAL_TIM_IRQHandler+0x19a>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK | TIM_FLAG_SYSTEM_BREAK);
 8005198:	687b      	ldr	r3, [r7, #4]
 800519a:	681b      	ldr	r3, [r3, #0]
 800519c:	f46f 5202 	mvn.w	r2, #8320	@ 0x2080
 80051a0:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 80051a2:	6878      	ldr	r0, [r7, #4]
 80051a4:	f000 fb14 	bl	80057d0 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if ((itflag & (TIM_FLAG_BREAK2)) == (TIM_FLAG_BREAK2))
 80051a8:	68bb      	ldr	r3, [r7, #8]
 80051aa:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80051ae:	2b00      	cmp	r3, #0
 80051b0:	d00c      	beq.n	80051cc <HAL_TIM_IRQHandler+0x1be>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 80051b2:	68fb      	ldr	r3, [r7, #12]
 80051b4:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80051b8:	2b00      	cmp	r3, #0
 80051ba:	d007      	beq.n	80051cc <HAL_TIM_IRQHandler+0x1be>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 80051bc:	687b      	ldr	r3, [r7, #4]
 80051be:	681b      	ldr	r3, [r3, #0]
 80051c0:	f46f 7280 	mvn.w	r2, #256	@ 0x100
 80051c4:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 80051c6:	6878      	ldr	r0, [r7, #4]
 80051c8:	f000 fb0c 	bl	80057e4 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 80051cc:	68bb      	ldr	r3, [r7, #8]
 80051ce:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80051d2:	2b00      	cmp	r3, #0
 80051d4:	d00c      	beq.n	80051f0 <HAL_TIM_IRQHandler+0x1e2>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 80051d6:	68fb      	ldr	r3, [r7, #12]
 80051d8:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80051dc:	2b00      	cmp	r3, #0
 80051de:	d007      	beq.n	80051f0 <HAL_TIM_IRQHandler+0x1e2>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 80051e0:	687b      	ldr	r3, [r7, #4]
 80051e2:	681b      	ldr	r3, [r3, #0]
 80051e4:	f06f 0240 	mvn.w	r2, #64	@ 0x40
 80051e8:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 80051ea:	6878      	ldr	r0, [r7, #4]
 80051ec:	f000 f908 	bl	8005400 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 80051f0:	68bb      	ldr	r3, [r7, #8]
 80051f2:	f003 0320 	and.w	r3, r3, #32
 80051f6:	2b00      	cmp	r3, #0
 80051f8:	d00c      	beq.n	8005214 <HAL_TIM_IRQHandler+0x206>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 80051fa:	68fb      	ldr	r3, [r7, #12]
 80051fc:	f003 0320 	and.w	r3, r3, #32
 8005200:	2b00      	cmp	r3, #0
 8005202:	d007      	beq.n	8005214 <HAL_TIM_IRQHandler+0x206>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 8005204:	687b      	ldr	r3, [r7, #4]
 8005206:	681b      	ldr	r3, [r3, #0]
 8005208:	f06f 0220 	mvn.w	r2, #32
 800520c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 800520e:	6878      	ldr	r0, [r7, #4]
 8005210:	f000 fad4 	bl	80057bc <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8005214:	bf00      	nop
 8005216:	3710      	adds	r7, #16
 8005218:	46bd      	mov	sp, r7
 800521a:	bd80      	pop	{r7, pc}

0800521c <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 800521c:	b580      	push	{r7, lr}
 800521e:	b084      	sub	sp, #16
 8005220:	af00      	add	r7, sp, #0
 8005222:	6078      	str	r0, [r7, #4]
 8005224:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8005226:	2300      	movs	r3, #0
 8005228:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 800522a:	687b      	ldr	r3, [r7, #4]
 800522c:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8005230:	2b01      	cmp	r3, #1
 8005232:	d101      	bne.n	8005238 <HAL_TIM_ConfigClockSource+0x1c>
 8005234:	2302      	movs	r3, #2
 8005236:	e0b4      	b.n	80053a2 <HAL_TIM_ConfigClockSource+0x186>
 8005238:	687b      	ldr	r3, [r7, #4]
 800523a:	2201      	movs	r2, #1
 800523c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8005240:	687b      	ldr	r3, [r7, #4]
 8005242:	2202      	movs	r2, #2
 8005244:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8005248:	687b      	ldr	r3, [r7, #4]
 800524a:	681b      	ldr	r3, [r3, #0]
 800524c:	689b      	ldr	r3, [r3, #8]
 800524e:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8005250:	68ba      	ldr	r2, [r7, #8]
 8005252:	4b56      	ldr	r3, [pc, #344]	@ (80053ac <HAL_TIM_ConfigClockSource+0x190>)
 8005254:	4013      	ands	r3, r2
 8005256:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8005258:	68bb      	ldr	r3, [r7, #8]
 800525a:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 800525e:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8005260:	687b      	ldr	r3, [r7, #4]
 8005262:	681b      	ldr	r3, [r3, #0]
 8005264:	68ba      	ldr	r2, [r7, #8]
 8005266:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8005268:	683b      	ldr	r3, [r7, #0]
 800526a:	681b      	ldr	r3, [r3, #0]
 800526c:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8005270:	d03e      	beq.n	80052f0 <HAL_TIM_ConfigClockSource+0xd4>
 8005272:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8005276:	f200 8087 	bhi.w	8005388 <HAL_TIM_ConfigClockSource+0x16c>
 800527a:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800527e:	f000 8086 	beq.w	800538e <HAL_TIM_ConfigClockSource+0x172>
 8005282:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8005286:	d87f      	bhi.n	8005388 <HAL_TIM_ConfigClockSource+0x16c>
 8005288:	2b70      	cmp	r3, #112	@ 0x70
 800528a:	d01a      	beq.n	80052c2 <HAL_TIM_ConfigClockSource+0xa6>
 800528c:	2b70      	cmp	r3, #112	@ 0x70
 800528e:	d87b      	bhi.n	8005388 <HAL_TIM_ConfigClockSource+0x16c>
 8005290:	2b60      	cmp	r3, #96	@ 0x60
 8005292:	d050      	beq.n	8005336 <HAL_TIM_ConfigClockSource+0x11a>
 8005294:	2b60      	cmp	r3, #96	@ 0x60
 8005296:	d877      	bhi.n	8005388 <HAL_TIM_ConfigClockSource+0x16c>
 8005298:	2b50      	cmp	r3, #80	@ 0x50
 800529a:	d03c      	beq.n	8005316 <HAL_TIM_ConfigClockSource+0xfa>
 800529c:	2b50      	cmp	r3, #80	@ 0x50
 800529e:	d873      	bhi.n	8005388 <HAL_TIM_ConfigClockSource+0x16c>
 80052a0:	2b40      	cmp	r3, #64	@ 0x40
 80052a2:	d058      	beq.n	8005356 <HAL_TIM_ConfigClockSource+0x13a>
 80052a4:	2b40      	cmp	r3, #64	@ 0x40
 80052a6:	d86f      	bhi.n	8005388 <HAL_TIM_ConfigClockSource+0x16c>
 80052a8:	2b30      	cmp	r3, #48	@ 0x30
 80052aa:	d064      	beq.n	8005376 <HAL_TIM_ConfigClockSource+0x15a>
 80052ac:	2b30      	cmp	r3, #48	@ 0x30
 80052ae:	d86b      	bhi.n	8005388 <HAL_TIM_ConfigClockSource+0x16c>
 80052b0:	2b20      	cmp	r3, #32
 80052b2:	d060      	beq.n	8005376 <HAL_TIM_ConfigClockSource+0x15a>
 80052b4:	2b20      	cmp	r3, #32
 80052b6:	d867      	bhi.n	8005388 <HAL_TIM_ConfigClockSource+0x16c>
 80052b8:	2b00      	cmp	r3, #0
 80052ba:	d05c      	beq.n	8005376 <HAL_TIM_ConfigClockSource+0x15a>
 80052bc:	2b10      	cmp	r3, #16
 80052be:	d05a      	beq.n	8005376 <HAL_TIM_ConfigClockSource+0x15a>
 80052c0:	e062      	b.n	8005388 <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 80052c2:	687b      	ldr	r3, [r7, #4]
 80052c4:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 80052c6:	683b      	ldr	r3, [r7, #0]
 80052c8:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 80052ca:	683b      	ldr	r3, [r7, #0]
 80052cc:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 80052ce:	683b      	ldr	r3, [r7, #0]
 80052d0:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 80052d2:	f000 f9c5 	bl	8005660 <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 80052d6:	687b      	ldr	r3, [r7, #4]
 80052d8:	681b      	ldr	r3, [r3, #0]
 80052da:	689b      	ldr	r3, [r3, #8]
 80052dc:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 80052de:	68bb      	ldr	r3, [r7, #8]
 80052e0:	f043 0377 	orr.w	r3, r3, #119	@ 0x77
 80052e4:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 80052e6:	687b      	ldr	r3, [r7, #4]
 80052e8:	681b      	ldr	r3, [r3, #0]
 80052ea:	68ba      	ldr	r2, [r7, #8]
 80052ec:	609a      	str	r2, [r3, #8]
      break;
 80052ee:	e04f      	b.n	8005390 <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 80052f0:	687b      	ldr	r3, [r7, #4]
 80052f2:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 80052f4:	683b      	ldr	r3, [r7, #0]
 80052f6:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 80052f8:	683b      	ldr	r3, [r7, #0]
 80052fa:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 80052fc:	683b      	ldr	r3, [r7, #0]
 80052fe:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8005300:	f000 f9ae 	bl	8005660 <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8005304:	687b      	ldr	r3, [r7, #4]
 8005306:	681b      	ldr	r3, [r3, #0]
 8005308:	689a      	ldr	r2, [r3, #8]
 800530a:	687b      	ldr	r3, [r7, #4]
 800530c:	681b      	ldr	r3, [r3, #0]
 800530e:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 8005312:	609a      	str	r2, [r3, #8]
      break;
 8005314:	e03c      	b.n	8005390 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8005316:	687b      	ldr	r3, [r7, #4]
 8005318:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 800531a:	683b      	ldr	r3, [r7, #0]
 800531c:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 800531e:	683b      	ldr	r3, [r7, #0]
 8005320:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8005322:	461a      	mov	r2, r3
 8005324:	f000 f922 	bl	800556c <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8005328:	687b      	ldr	r3, [r7, #4]
 800532a:	681b      	ldr	r3, [r3, #0]
 800532c:	2150      	movs	r1, #80	@ 0x50
 800532e:	4618      	mov	r0, r3
 8005330:	f000 f97b 	bl	800562a <TIM_ITRx_SetConfig>
      break;
 8005334:	e02c      	b.n	8005390 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8005336:	687b      	ldr	r3, [r7, #4]
 8005338:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 800533a:	683b      	ldr	r3, [r7, #0]
 800533c:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 800533e:	683b      	ldr	r3, [r7, #0]
 8005340:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 8005342:	461a      	mov	r2, r3
 8005344:	f000 f941 	bl	80055ca <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8005348:	687b      	ldr	r3, [r7, #4]
 800534a:	681b      	ldr	r3, [r3, #0]
 800534c:	2160      	movs	r1, #96	@ 0x60
 800534e:	4618      	mov	r0, r3
 8005350:	f000 f96b 	bl	800562a <TIM_ITRx_SetConfig>
      break;
 8005354:	e01c      	b.n	8005390 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8005356:	687b      	ldr	r3, [r7, #4]
 8005358:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 800535a:	683b      	ldr	r3, [r7, #0]
 800535c:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 800535e:	683b      	ldr	r3, [r7, #0]
 8005360:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8005362:	461a      	mov	r2, r3
 8005364:	f000 f902 	bl	800556c <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8005368:	687b      	ldr	r3, [r7, #4]
 800536a:	681b      	ldr	r3, [r3, #0]
 800536c:	2140      	movs	r1, #64	@ 0x40
 800536e:	4618      	mov	r0, r3
 8005370:	f000 f95b 	bl	800562a <TIM_ITRx_SetConfig>
      break;
 8005374:	e00c      	b.n	8005390 <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8005376:	687b      	ldr	r3, [r7, #4]
 8005378:	681a      	ldr	r2, [r3, #0]
 800537a:	683b      	ldr	r3, [r7, #0]
 800537c:	681b      	ldr	r3, [r3, #0]
 800537e:	4619      	mov	r1, r3
 8005380:	4610      	mov	r0, r2
 8005382:	f000 f952 	bl	800562a <TIM_ITRx_SetConfig>
      break;
 8005386:	e003      	b.n	8005390 <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 8005388:	2301      	movs	r3, #1
 800538a:	73fb      	strb	r3, [r7, #15]
      break;
 800538c:	e000      	b.n	8005390 <HAL_TIM_ConfigClockSource+0x174>
      break;
 800538e:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8005390:	687b      	ldr	r3, [r7, #4]
 8005392:	2201      	movs	r2, #1
 8005394:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8005398:	687b      	ldr	r3, [r7, #4]
 800539a:	2200      	movs	r2, #0
 800539c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 80053a0:	7bfb      	ldrb	r3, [r7, #15]
}
 80053a2:	4618      	mov	r0, r3
 80053a4:	3710      	adds	r7, #16
 80053a6:	46bd      	mov	sp, r7
 80053a8:	bd80      	pop	{r7, pc}
 80053aa:	bf00      	nop
 80053ac:	fffeff88 	.word	0xfffeff88

080053b0 <HAL_TIM_PeriodElapsedCallback>:
  * @brief  Period elapsed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 80053b0:	b480      	push	{r7}
 80053b2:	b083      	sub	sp, #12
 80053b4:	af00      	add	r7, sp, #0
 80053b6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PeriodElapsedCallback could be implemented in the user file
   */
}
 80053b8:	bf00      	nop
 80053ba:	370c      	adds	r7, #12
 80053bc:	46bd      	mov	sp, r7
 80053be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80053c2:	4770      	bx	lr

080053c4 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 80053c4:	b480      	push	{r7}
 80053c6:	b083      	sub	sp, #12
 80053c8:	af00      	add	r7, sp, #0
 80053ca:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 80053cc:	bf00      	nop
 80053ce:	370c      	adds	r7, #12
 80053d0:	46bd      	mov	sp, r7
 80053d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80053d6:	4770      	bx	lr

080053d8 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 80053d8:	b480      	push	{r7}
 80053da:	b083      	sub	sp, #12
 80053dc:	af00      	add	r7, sp, #0
 80053de:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 80053e0:	bf00      	nop
 80053e2:	370c      	adds	r7, #12
 80053e4:	46bd      	mov	sp, r7
 80053e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80053ea:	4770      	bx	lr

080053ec <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 80053ec:	b480      	push	{r7}
 80053ee:	b083      	sub	sp, #12
 80053f0:	af00      	add	r7, sp, #0
 80053f2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 80053f4:	bf00      	nop
 80053f6:	370c      	adds	r7, #12
 80053f8:	46bd      	mov	sp, r7
 80053fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80053fe:	4770      	bx	lr

08005400 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8005400:	b480      	push	{r7}
 8005402:	b083      	sub	sp, #12
 8005404:	af00      	add	r7, sp, #0
 8005406:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8005408:	bf00      	nop
 800540a:	370c      	adds	r7, #12
 800540c:	46bd      	mov	sp, r7
 800540e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005412:	4770      	bx	lr

08005414 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8005414:	b480      	push	{r7}
 8005416:	b085      	sub	sp, #20
 8005418:	af00      	add	r7, sp, #0
 800541a:	6078      	str	r0, [r7, #4]
 800541c:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800541e:	687b      	ldr	r3, [r7, #4]
 8005420:	681b      	ldr	r3, [r3, #0]
 8005422:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8005424:	687b      	ldr	r3, [r7, #4]
 8005426:	4a46      	ldr	r2, [pc, #280]	@ (8005540 <TIM_Base_SetConfig+0x12c>)
 8005428:	4293      	cmp	r3, r2
 800542a:	d013      	beq.n	8005454 <TIM_Base_SetConfig+0x40>
 800542c:	687b      	ldr	r3, [r7, #4]
 800542e:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8005432:	d00f      	beq.n	8005454 <TIM_Base_SetConfig+0x40>
 8005434:	687b      	ldr	r3, [r7, #4]
 8005436:	4a43      	ldr	r2, [pc, #268]	@ (8005544 <TIM_Base_SetConfig+0x130>)
 8005438:	4293      	cmp	r3, r2
 800543a:	d00b      	beq.n	8005454 <TIM_Base_SetConfig+0x40>
 800543c:	687b      	ldr	r3, [r7, #4]
 800543e:	4a42      	ldr	r2, [pc, #264]	@ (8005548 <TIM_Base_SetConfig+0x134>)
 8005440:	4293      	cmp	r3, r2
 8005442:	d007      	beq.n	8005454 <TIM_Base_SetConfig+0x40>
 8005444:	687b      	ldr	r3, [r7, #4]
 8005446:	4a41      	ldr	r2, [pc, #260]	@ (800554c <TIM_Base_SetConfig+0x138>)
 8005448:	4293      	cmp	r3, r2
 800544a:	d003      	beq.n	8005454 <TIM_Base_SetConfig+0x40>
 800544c:	687b      	ldr	r3, [r7, #4]
 800544e:	4a40      	ldr	r2, [pc, #256]	@ (8005550 <TIM_Base_SetConfig+0x13c>)
 8005450:	4293      	cmp	r3, r2
 8005452:	d108      	bne.n	8005466 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8005454:	68fb      	ldr	r3, [r7, #12]
 8005456:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800545a:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 800545c:	683b      	ldr	r3, [r7, #0]
 800545e:	685b      	ldr	r3, [r3, #4]
 8005460:	68fa      	ldr	r2, [r7, #12]
 8005462:	4313      	orrs	r3, r2
 8005464:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8005466:	687b      	ldr	r3, [r7, #4]
 8005468:	4a35      	ldr	r2, [pc, #212]	@ (8005540 <TIM_Base_SetConfig+0x12c>)
 800546a:	4293      	cmp	r3, r2
 800546c:	d02b      	beq.n	80054c6 <TIM_Base_SetConfig+0xb2>
 800546e:	687b      	ldr	r3, [r7, #4]
 8005470:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8005474:	d027      	beq.n	80054c6 <TIM_Base_SetConfig+0xb2>
 8005476:	687b      	ldr	r3, [r7, #4]
 8005478:	4a32      	ldr	r2, [pc, #200]	@ (8005544 <TIM_Base_SetConfig+0x130>)
 800547a:	4293      	cmp	r3, r2
 800547c:	d023      	beq.n	80054c6 <TIM_Base_SetConfig+0xb2>
 800547e:	687b      	ldr	r3, [r7, #4]
 8005480:	4a31      	ldr	r2, [pc, #196]	@ (8005548 <TIM_Base_SetConfig+0x134>)
 8005482:	4293      	cmp	r3, r2
 8005484:	d01f      	beq.n	80054c6 <TIM_Base_SetConfig+0xb2>
 8005486:	687b      	ldr	r3, [r7, #4]
 8005488:	4a30      	ldr	r2, [pc, #192]	@ (800554c <TIM_Base_SetConfig+0x138>)
 800548a:	4293      	cmp	r3, r2
 800548c:	d01b      	beq.n	80054c6 <TIM_Base_SetConfig+0xb2>
 800548e:	687b      	ldr	r3, [r7, #4]
 8005490:	4a2f      	ldr	r2, [pc, #188]	@ (8005550 <TIM_Base_SetConfig+0x13c>)
 8005492:	4293      	cmp	r3, r2
 8005494:	d017      	beq.n	80054c6 <TIM_Base_SetConfig+0xb2>
 8005496:	687b      	ldr	r3, [r7, #4]
 8005498:	4a2e      	ldr	r2, [pc, #184]	@ (8005554 <TIM_Base_SetConfig+0x140>)
 800549a:	4293      	cmp	r3, r2
 800549c:	d013      	beq.n	80054c6 <TIM_Base_SetConfig+0xb2>
 800549e:	687b      	ldr	r3, [r7, #4]
 80054a0:	4a2d      	ldr	r2, [pc, #180]	@ (8005558 <TIM_Base_SetConfig+0x144>)
 80054a2:	4293      	cmp	r3, r2
 80054a4:	d00f      	beq.n	80054c6 <TIM_Base_SetConfig+0xb2>
 80054a6:	687b      	ldr	r3, [r7, #4]
 80054a8:	4a2c      	ldr	r2, [pc, #176]	@ (800555c <TIM_Base_SetConfig+0x148>)
 80054aa:	4293      	cmp	r3, r2
 80054ac:	d00b      	beq.n	80054c6 <TIM_Base_SetConfig+0xb2>
 80054ae:	687b      	ldr	r3, [r7, #4]
 80054b0:	4a2b      	ldr	r2, [pc, #172]	@ (8005560 <TIM_Base_SetConfig+0x14c>)
 80054b2:	4293      	cmp	r3, r2
 80054b4:	d007      	beq.n	80054c6 <TIM_Base_SetConfig+0xb2>
 80054b6:	687b      	ldr	r3, [r7, #4]
 80054b8:	4a2a      	ldr	r2, [pc, #168]	@ (8005564 <TIM_Base_SetConfig+0x150>)
 80054ba:	4293      	cmp	r3, r2
 80054bc:	d003      	beq.n	80054c6 <TIM_Base_SetConfig+0xb2>
 80054be:	687b      	ldr	r3, [r7, #4]
 80054c0:	4a29      	ldr	r2, [pc, #164]	@ (8005568 <TIM_Base_SetConfig+0x154>)
 80054c2:	4293      	cmp	r3, r2
 80054c4:	d108      	bne.n	80054d8 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 80054c6:	68fb      	ldr	r3, [r7, #12]
 80054c8:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 80054cc:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80054ce:	683b      	ldr	r3, [r7, #0]
 80054d0:	68db      	ldr	r3, [r3, #12]
 80054d2:	68fa      	ldr	r2, [r7, #12]
 80054d4:	4313      	orrs	r3, r2
 80054d6:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80054d8:	68fb      	ldr	r3, [r7, #12]
 80054da:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 80054de:	683b      	ldr	r3, [r7, #0]
 80054e0:	695b      	ldr	r3, [r3, #20]
 80054e2:	4313      	orrs	r3, r2
 80054e4:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 80054e6:	687b      	ldr	r3, [r7, #4]
 80054e8:	68fa      	ldr	r2, [r7, #12]
 80054ea:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80054ec:	683b      	ldr	r3, [r7, #0]
 80054ee:	689a      	ldr	r2, [r3, #8]
 80054f0:	687b      	ldr	r3, [r7, #4]
 80054f2:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 80054f4:	683b      	ldr	r3, [r7, #0]
 80054f6:	681a      	ldr	r2, [r3, #0]
 80054f8:	687b      	ldr	r3, [r7, #4]
 80054fa:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80054fc:	687b      	ldr	r3, [r7, #4]
 80054fe:	4a10      	ldr	r2, [pc, #64]	@ (8005540 <TIM_Base_SetConfig+0x12c>)
 8005500:	4293      	cmp	r3, r2
 8005502:	d003      	beq.n	800550c <TIM_Base_SetConfig+0xf8>
 8005504:	687b      	ldr	r3, [r7, #4]
 8005506:	4a12      	ldr	r2, [pc, #72]	@ (8005550 <TIM_Base_SetConfig+0x13c>)
 8005508:	4293      	cmp	r3, r2
 800550a:	d103      	bne.n	8005514 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 800550c:	683b      	ldr	r3, [r7, #0]
 800550e:	691a      	ldr	r2, [r3, #16]
 8005510:	687b      	ldr	r3, [r7, #4]
 8005512:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8005514:	687b      	ldr	r3, [r7, #4]
 8005516:	2201      	movs	r2, #1
 8005518:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 800551a:	687b      	ldr	r3, [r7, #4]
 800551c:	691b      	ldr	r3, [r3, #16]
 800551e:	f003 0301 	and.w	r3, r3, #1
 8005522:	2b01      	cmp	r3, #1
 8005524:	d105      	bne.n	8005532 <TIM_Base_SetConfig+0x11e>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 8005526:	687b      	ldr	r3, [r7, #4]
 8005528:	691b      	ldr	r3, [r3, #16]
 800552a:	f023 0201 	bic.w	r2, r3, #1
 800552e:	687b      	ldr	r3, [r7, #4]
 8005530:	611a      	str	r2, [r3, #16]
  }
}
 8005532:	bf00      	nop
 8005534:	3714      	adds	r7, #20
 8005536:	46bd      	mov	sp, r7
 8005538:	f85d 7b04 	ldr.w	r7, [sp], #4
 800553c:	4770      	bx	lr
 800553e:	bf00      	nop
 8005540:	40010000 	.word	0x40010000
 8005544:	40000400 	.word	0x40000400
 8005548:	40000800 	.word	0x40000800
 800554c:	40000c00 	.word	0x40000c00
 8005550:	40010400 	.word	0x40010400
 8005554:	40014000 	.word	0x40014000
 8005558:	40014400 	.word	0x40014400
 800555c:	40014800 	.word	0x40014800
 8005560:	40001800 	.word	0x40001800
 8005564:	40001c00 	.word	0x40001c00
 8005568:	40002000 	.word	0x40002000

0800556c <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800556c:	b480      	push	{r7}
 800556e:	b087      	sub	sp, #28
 8005570:	af00      	add	r7, sp, #0
 8005572:	60f8      	str	r0, [r7, #12]
 8005574:	60b9      	str	r1, [r7, #8]
 8005576:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8005578:	68fb      	ldr	r3, [r7, #12]
 800557a:	6a1b      	ldr	r3, [r3, #32]
 800557c:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800557e:	68fb      	ldr	r3, [r7, #12]
 8005580:	6a1b      	ldr	r3, [r3, #32]
 8005582:	f023 0201 	bic.w	r2, r3, #1
 8005586:	68fb      	ldr	r3, [r7, #12]
 8005588:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800558a:	68fb      	ldr	r3, [r7, #12]
 800558c:	699b      	ldr	r3, [r3, #24]
 800558e:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8005590:	693b      	ldr	r3, [r7, #16]
 8005592:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8005596:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8005598:	687b      	ldr	r3, [r7, #4]
 800559a:	011b      	lsls	r3, r3, #4
 800559c:	693a      	ldr	r2, [r7, #16]
 800559e:	4313      	orrs	r3, r2
 80055a0:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 80055a2:	697b      	ldr	r3, [r7, #20]
 80055a4:	f023 030a 	bic.w	r3, r3, #10
 80055a8:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 80055aa:	697a      	ldr	r2, [r7, #20]
 80055ac:	68bb      	ldr	r3, [r7, #8]
 80055ae:	4313      	orrs	r3, r2
 80055b0:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 80055b2:	68fb      	ldr	r3, [r7, #12]
 80055b4:	693a      	ldr	r2, [r7, #16]
 80055b6:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80055b8:	68fb      	ldr	r3, [r7, #12]
 80055ba:	697a      	ldr	r2, [r7, #20]
 80055bc:	621a      	str	r2, [r3, #32]
}
 80055be:	bf00      	nop
 80055c0:	371c      	adds	r7, #28
 80055c2:	46bd      	mov	sp, r7
 80055c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80055c8:	4770      	bx	lr

080055ca <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80055ca:	b480      	push	{r7}
 80055cc:	b087      	sub	sp, #28
 80055ce:	af00      	add	r7, sp, #0
 80055d0:	60f8      	str	r0, [r7, #12]
 80055d2:	60b9      	str	r1, [r7, #8]
 80055d4:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 80055d6:	68fb      	ldr	r3, [r7, #12]
 80055d8:	6a1b      	ldr	r3, [r3, #32]
 80055da:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80055dc:	68fb      	ldr	r3, [r7, #12]
 80055de:	6a1b      	ldr	r3, [r3, #32]
 80055e0:	f023 0210 	bic.w	r2, r3, #16
 80055e4:	68fb      	ldr	r3, [r7, #12]
 80055e6:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80055e8:	68fb      	ldr	r3, [r7, #12]
 80055ea:	699b      	ldr	r3, [r3, #24]
 80055ec:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 80055ee:	693b      	ldr	r3, [r7, #16]
 80055f0:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 80055f4:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 80055f6:	687b      	ldr	r3, [r7, #4]
 80055f8:	031b      	lsls	r3, r3, #12
 80055fa:	693a      	ldr	r2, [r7, #16]
 80055fc:	4313      	orrs	r3, r2
 80055fe:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8005600:	697b      	ldr	r3, [r7, #20]
 8005602:	f023 03a0 	bic.w	r3, r3, #160	@ 0xa0
 8005606:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 8005608:	68bb      	ldr	r3, [r7, #8]
 800560a:	011b      	lsls	r3, r3, #4
 800560c:	697a      	ldr	r2, [r7, #20]
 800560e:	4313      	orrs	r3, r2
 8005610:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8005612:	68fb      	ldr	r3, [r7, #12]
 8005614:	693a      	ldr	r2, [r7, #16]
 8005616:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8005618:	68fb      	ldr	r3, [r7, #12]
 800561a:	697a      	ldr	r2, [r7, #20]
 800561c:	621a      	str	r2, [r3, #32]
}
 800561e:	bf00      	nop
 8005620:	371c      	adds	r7, #28
 8005622:	46bd      	mov	sp, r7
 8005624:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005628:	4770      	bx	lr

0800562a <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 800562a:	b480      	push	{r7}
 800562c:	b085      	sub	sp, #20
 800562e:	af00      	add	r7, sp, #0
 8005630:	6078      	str	r0, [r7, #4]
 8005632:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8005634:	687b      	ldr	r3, [r7, #4]
 8005636:	689b      	ldr	r3, [r3, #8]
 8005638:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 800563a:	68fb      	ldr	r3, [r7, #12]
 800563c:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8005640:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8005642:	683a      	ldr	r2, [r7, #0]
 8005644:	68fb      	ldr	r3, [r7, #12]
 8005646:	4313      	orrs	r3, r2
 8005648:	f043 0307 	orr.w	r3, r3, #7
 800564c:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800564e:	687b      	ldr	r3, [r7, #4]
 8005650:	68fa      	ldr	r2, [r7, #12]
 8005652:	609a      	str	r2, [r3, #8]
}
 8005654:	bf00      	nop
 8005656:	3714      	adds	r7, #20
 8005658:	46bd      	mov	sp, r7
 800565a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800565e:	4770      	bx	lr

08005660 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8005660:	b480      	push	{r7}
 8005662:	b087      	sub	sp, #28
 8005664:	af00      	add	r7, sp, #0
 8005666:	60f8      	str	r0, [r7, #12]
 8005668:	60b9      	str	r1, [r7, #8]
 800566a:	607a      	str	r2, [r7, #4]
 800566c:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 800566e:	68fb      	ldr	r3, [r7, #12]
 8005670:	689b      	ldr	r3, [r3, #8]
 8005672:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8005674:	697b      	ldr	r3, [r7, #20]
 8005676:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 800567a:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 800567c:	683b      	ldr	r3, [r7, #0]
 800567e:	021a      	lsls	r2, r3, #8
 8005680:	687b      	ldr	r3, [r7, #4]
 8005682:	431a      	orrs	r2, r3
 8005684:	68bb      	ldr	r3, [r7, #8]
 8005686:	4313      	orrs	r3, r2
 8005688:	697a      	ldr	r2, [r7, #20]
 800568a:	4313      	orrs	r3, r2
 800568c:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800568e:	68fb      	ldr	r3, [r7, #12]
 8005690:	697a      	ldr	r2, [r7, #20]
 8005692:	609a      	str	r2, [r3, #8]
}
 8005694:	bf00      	nop
 8005696:	371c      	adds	r7, #28
 8005698:	46bd      	mov	sp, r7
 800569a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800569e:	4770      	bx	lr

080056a0 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 80056a0:	b480      	push	{r7}
 80056a2:	b085      	sub	sp, #20
 80056a4:	af00      	add	r7, sp, #0
 80056a6:	6078      	str	r0, [r7, #4]
 80056a8:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 80056aa:	687b      	ldr	r3, [r7, #4]
 80056ac:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 80056b0:	2b01      	cmp	r3, #1
 80056b2:	d101      	bne.n	80056b8 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 80056b4:	2302      	movs	r3, #2
 80056b6:	e06d      	b.n	8005794 <HAL_TIMEx_MasterConfigSynchronization+0xf4>
 80056b8:	687b      	ldr	r3, [r7, #4]
 80056ba:	2201      	movs	r2, #1
 80056bc:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 80056c0:	687b      	ldr	r3, [r7, #4]
 80056c2:	2202      	movs	r2, #2
 80056c4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 80056c8:	687b      	ldr	r3, [r7, #4]
 80056ca:	681b      	ldr	r3, [r3, #0]
 80056cc:	685b      	ldr	r3, [r3, #4]
 80056ce:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 80056d0:	687b      	ldr	r3, [r7, #4]
 80056d2:	681b      	ldr	r3, [r3, #0]
 80056d4:	689b      	ldr	r3, [r3, #8]
 80056d6:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 80056d8:	687b      	ldr	r3, [r7, #4]
 80056da:	681b      	ldr	r3, [r3, #0]
 80056dc:	4a30      	ldr	r2, [pc, #192]	@ (80057a0 <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 80056de:	4293      	cmp	r3, r2
 80056e0:	d004      	beq.n	80056ec <HAL_TIMEx_MasterConfigSynchronization+0x4c>
 80056e2:	687b      	ldr	r3, [r7, #4]
 80056e4:	681b      	ldr	r3, [r3, #0]
 80056e6:	4a2f      	ldr	r2, [pc, #188]	@ (80057a4 <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 80056e8:	4293      	cmp	r3, r2
 80056ea:	d108      	bne.n	80056fe <HAL_TIMEx_MasterConfigSynchronization+0x5e>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 80056ec:	68fb      	ldr	r3, [r7, #12]
 80056ee:	f423 0370 	bic.w	r3, r3, #15728640	@ 0xf00000
 80056f2:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 80056f4:	683b      	ldr	r3, [r7, #0]
 80056f6:	685b      	ldr	r3, [r3, #4]
 80056f8:	68fa      	ldr	r2, [r7, #12]
 80056fa:	4313      	orrs	r3, r2
 80056fc:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 80056fe:	68fb      	ldr	r3, [r7, #12]
 8005700:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8005704:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8005706:	683b      	ldr	r3, [r7, #0]
 8005708:	681b      	ldr	r3, [r3, #0]
 800570a:	68fa      	ldr	r2, [r7, #12]
 800570c:	4313      	orrs	r3, r2
 800570e:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8005710:	687b      	ldr	r3, [r7, #4]
 8005712:	681b      	ldr	r3, [r3, #0]
 8005714:	68fa      	ldr	r2, [r7, #12]
 8005716:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8005718:	687b      	ldr	r3, [r7, #4]
 800571a:	681b      	ldr	r3, [r3, #0]
 800571c:	4a20      	ldr	r2, [pc, #128]	@ (80057a0 <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 800571e:	4293      	cmp	r3, r2
 8005720:	d022      	beq.n	8005768 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8005722:	687b      	ldr	r3, [r7, #4]
 8005724:	681b      	ldr	r3, [r3, #0]
 8005726:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800572a:	d01d      	beq.n	8005768 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800572c:	687b      	ldr	r3, [r7, #4]
 800572e:	681b      	ldr	r3, [r3, #0]
 8005730:	4a1d      	ldr	r2, [pc, #116]	@ (80057a8 <HAL_TIMEx_MasterConfigSynchronization+0x108>)
 8005732:	4293      	cmp	r3, r2
 8005734:	d018      	beq.n	8005768 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8005736:	687b      	ldr	r3, [r7, #4]
 8005738:	681b      	ldr	r3, [r3, #0]
 800573a:	4a1c      	ldr	r2, [pc, #112]	@ (80057ac <HAL_TIMEx_MasterConfigSynchronization+0x10c>)
 800573c:	4293      	cmp	r3, r2
 800573e:	d013      	beq.n	8005768 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8005740:	687b      	ldr	r3, [r7, #4]
 8005742:	681b      	ldr	r3, [r3, #0]
 8005744:	4a1a      	ldr	r2, [pc, #104]	@ (80057b0 <HAL_TIMEx_MasterConfigSynchronization+0x110>)
 8005746:	4293      	cmp	r3, r2
 8005748:	d00e      	beq.n	8005768 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800574a:	687b      	ldr	r3, [r7, #4]
 800574c:	681b      	ldr	r3, [r3, #0]
 800574e:	4a15      	ldr	r2, [pc, #84]	@ (80057a4 <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 8005750:	4293      	cmp	r3, r2
 8005752:	d009      	beq.n	8005768 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8005754:	687b      	ldr	r3, [r7, #4]
 8005756:	681b      	ldr	r3, [r3, #0]
 8005758:	4a16      	ldr	r2, [pc, #88]	@ (80057b4 <HAL_TIMEx_MasterConfigSynchronization+0x114>)
 800575a:	4293      	cmp	r3, r2
 800575c:	d004      	beq.n	8005768 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800575e:	687b      	ldr	r3, [r7, #4]
 8005760:	681b      	ldr	r3, [r3, #0]
 8005762:	4a15      	ldr	r2, [pc, #84]	@ (80057b8 <HAL_TIMEx_MasterConfigSynchronization+0x118>)
 8005764:	4293      	cmp	r3, r2
 8005766:	d10c      	bne.n	8005782 <HAL_TIMEx_MasterConfigSynchronization+0xe2>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8005768:	68bb      	ldr	r3, [r7, #8]
 800576a:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 800576e:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8005770:	683b      	ldr	r3, [r7, #0]
 8005772:	689b      	ldr	r3, [r3, #8]
 8005774:	68ba      	ldr	r2, [r7, #8]
 8005776:	4313      	orrs	r3, r2
 8005778:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 800577a:	687b      	ldr	r3, [r7, #4]
 800577c:	681b      	ldr	r3, [r3, #0]
 800577e:	68ba      	ldr	r2, [r7, #8]
 8005780:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8005782:	687b      	ldr	r3, [r7, #4]
 8005784:	2201      	movs	r2, #1
 8005786:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 800578a:	687b      	ldr	r3, [r7, #4]
 800578c:	2200      	movs	r2, #0
 800578e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 8005792:	2300      	movs	r3, #0
}
 8005794:	4618      	mov	r0, r3
 8005796:	3714      	adds	r7, #20
 8005798:	46bd      	mov	sp, r7
 800579a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800579e:	4770      	bx	lr
 80057a0:	40010000 	.word	0x40010000
 80057a4:	40010400 	.word	0x40010400
 80057a8:	40000400 	.word	0x40000400
 80057ac:	40000800 	.word	0x40000800
 80057b0:	40000c00 	.word	0x40000c00
 80057b4:	40014000 	.word	0x40014000
 80057b8:	40001800 	.word	0x40001800

080057bc <HAL_TIMEx_CommutCallback>:
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 80057bc:	b480      	push	{r7}
 80057be:	b083      	sub	sp, #12
 80057c0:	af00      	add	r7, sp, #0
 80057c2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 80057c4:	bf00      	nop
 80057c6:	370c      	adds	r7, #12
 80057c8:	46bd      	mov	sp, r7
 80057ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80057ce:	4770      	bx	lr

080057d0 <HAL_TIMEx_BreakCallback>:
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 80057d0:	b480      	push	{r7}
 80057d2:	b083      	sub	sp, #12
 80057d4:	af00      	add	r7, sp, #0
 80057d6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 80057d8:	bf00      	nop
 80057da:	370c      	adds	r7, #12
 80057dc:	46bd      	mov	sp, r7
 80057de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80057e2:	4770      	bx	lr

080057e4 <HAL_TIMEx_Break2Callback>:
  * @brief  Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 80057e4:	b480      	push	{r7}
 80057e6:	b083      	sub	sp, #12
 80057e8:	af00      	add	r7, sp, #0
 80057ea:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 80057ec:	bf00      	nop
 80057ee:	370c      	adds	r7, #12
 80057f0:	46bd      	mov	sp, r7
 80057f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80057f6:	4770      	bx	lr

080057f8 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80057f8:	b580      	push	{r7, lr}
 80057fa:	b082      	sub	sp, #8
 80057fc:	af00      	add	r7, sp, #0
 80057fe:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8005800:	687b      	ldr	r3, [r7, #4]
 8005802:	2b00      	cmp	r3, #0
 8005804:	d101      	bne.n	800580a <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8005806:	2301      	movs	r3, #1
 8005808:	e040      	b.n	800588c <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 800580a:	687b      	ldr	r3, [r7, #4]
 800580c:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 800580e:	2b00      	cmp	r3, #0
 8005810:	d106      	bne.n	8005820 <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8005812:	687b      	ldr	r3, [r7, #4]
 8005814:	2200      	movs	r2, #0
 8005816:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800581a:	6878      	ldr	r0, [r7, #4]
 800581c:	f7fc f926 	bl	8001a6c <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8005820:	687b      	ldr	r3, [r7, #4]
 8005822:	2224      	movs	r2, #36	@ 0x24
 8005824:	67da      	str	r2, [r3, #124]	@ 0x7c

  __HAL_UART_DISABLE(huart);
 8005826:	687b      	ldr	r3, [r7, #4]
 8005828:	681b      	ldr	r3, [r3, #0]
 800582a:	681a      	ldr	r2, [r3, #0]
 800582c:	687b      	ldr	r3, [r7, #4]
 800582e:	681b      	ldr	r3, [r3, #0]
 8005830:	f022 0201 	bic.w	r2, r2, #1
 8005834:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8005836:	687b      	ldr	r3, [r7, #4]
 8005838:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800583a:	2b00      	cmp	r3, #0
 800583c:	d002      	beq.n	8005844 <HAL_UART_Init+0x4c>
  {
    UART_AdvFeatureConfig(huart);
 800583e:	6878      	ldr	r0, [r7, #4]
 8005840:	f000 fe6c 	bl	800651c <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8005844:	6878      	ldr	r0, [r7, #4]
 8005846:	f000 fc05 	bl	8006054 <UART_SetConfig>
 800584a:	4603      	mov	r3, r0
 800584c:	2b01      	cmp	r3, #1
 800584e:	d101      	bne.n	8005854 <HAL_UART_Init+0x5c>
  {
    return HAL_ERROR;
 8005850:	2301      	movs	r3, #1
 8005852:	e01b      	b.n	800588c <HAL_UART_Init+0x94>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8005854:	687b      	ldr	r3, [r7, #4]
 8005856:	681b      	ldr	r3, [r3, #0]
 8005858:	685a      	ldr	r2, [r3, #4]
 800585a:	687b      	ldr	r3, [r7, #4]
 800585c:	681b      	ldr	r3, [r3, #0]
 800585e:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 8005862:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8005864:	687b      	ldr	r3, [r7, #4]
 8005866:	681b      	ldr	r3, [r3, #0]
 8005868:	689a      	ldr	r2, [r3, #8]
 800586a:	687b      	ldr	r3, [r7, #4]
 800586c:	681b      	ldr	r3, [r3, #0]
 800586e:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 8005872:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8005874:	687b      	ldr	r3, [r7, #4]
 8005876:	681b      	ldr	r3, [r3, #0]
 8005878:	681a      	ldr	r2, [r3, #0]
 800587a:	687b      	ldr	r3, [r7, #4]
 800587c:	681b      	ldr	r3, [r3, #0]
 800587e:	f042 0201 	orr.w	r2, r2, #1
 8005882:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8005884:	6878      	ldr	r0, [r7, #4]
 8005886:	f000 feeb 	bl	8006660 <UART_CheckIdleState>
 800588a:	4603      	mov	r3, r0
}
 800588c:	4618      	mov	r0, r3
 800588e:	3708      	adds	r7, #8
 8005890:	46bd      	mov	sp, r7
 8005892:	bd80      	pop	{r7, pc}

08005894 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8005894:	b580      	push	{r7, lr}
 8005896:	b08a      	sub	sp, #40	@ 0x28
 8005898:	af02      	add	r7, sp, #8
 800589a:	60f8      	str	r0, [r7, #12]
 800589c:	60b9      	str	r1, [r7, #8]
 800589e:	603b      	str	r3, [r7, #0]
 80058a0:	4613      	mov	r3, r2
 80058a2:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 80058a4:	68fb      	ldr	r3, [r7, #12]
 80058a6:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 80058a8:	2b20      	cmp	r3, #32
 80058aa:	d177      	bne.n	800599c <HAL_UART_Transmit+0x108>
  {
    if ((pData == NULL) || (Size == 0U))
 80058ac:	68bb      	ldr	r3, [r7, #8]
 80058ae:	2b00      	cmp	r3, #0
 80058b0:	d002      	beq.n	80058b8 <HAL_UART_Transmit+0x24>
 80058b2:	88fb      	ldrh	r3, [r7, #6]
 80058b4:	2b00      	cmp	r3, #0
 80058b6:	d101      	bne.n	80058bc <HAL_UART_Transmit+0x28>
    {
      return  HAL_ERROR;
 80058b8:	2301      	movs	r3, #1
 80058ba:	e070      	b.n	800599e <HAL_UART_Transmit+0x10a>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80058bc:	68fb      	ldr	r3, [r7, #12]
 80058be:	2200      	movs	r2, #0
 80058c0:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
    huart->gState = HAL_UART_STATE_BUSY_TX;
 80058c4:	68fb      	ldr	r3, [r7, #12]
 80058c6:	2221      	movs	r2, #33	@ 0x21
 80058c8:	67da      	str	r2, [r3, #124]	@ 0x7c

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 80058ca:	f7fc fb37 	bl	8001f3c <HAL_GetTick>
 80058ce:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 80058d0:	68fb      	ldr	r3, [r7, #12]
 80058d2:	88fa      	ldrh	r2, [r7, #6]
 80058d4:	f8a3 2050 	strh.w	r2, [r3, #80]	@ 0x50
    huart->TxXferCount = Size;
 80058d8:	68fb      	ldr	r3, [r7, #12]
 80058da:	88fa      	ldrh	r2, [r7, #6]
 80058dc:	f8a3 2052 	strh.w	r2, [r3, #82]	@ 0x52

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80058e0:	68fb      	ldr	r3, [r7, #12]
 80058e2:	689b      	ldr	r3, [r3, #8]
 80058e4:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80058e8:	d108      	bne.n	80058fc <HAL_UART_Transmit+0x68>
 80058ea:	68fb      	ldr	r3, [r7, #12]
 80058ec:	691b      	ldr	r3, [r3, #16]
 80058ee:	2b00      	cmp	r3, #0
 80058f0:	d104      	bne.n	80058fc <HAL_UART_Transmit+0x68>
    {
      pdata8bits  = NULL;
 80058f2:	2300      	movs	r3, #0
 80058f4:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 80058f6:	68bb      	ldr	r3, [r7, #8]
 80058f8:	61bb      	str	r3, [r7, #24]
 80058fa:	e003      	b.n	8005904 <HAL_UART_Transmit+0x70>
    }
    else
    {
      pdata8bits  = pData;
 80058fc:	68bb      	ldr	r3, [r7, #8]
 80058fe:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8005900:	2300      	movs	r3, #0
 8005902:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 8005904:	e02f      	b.n	8005966 <HAL_UART_Transmit+0xd2>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8005906:	683b      	ldr	r3, [r7, #0]
 8005908:	9300      	str	r3, [sp, #0]
 800590a:	697b      	ldr	r3, [r7, #20]
 800590c:	2200      	movs	r2, #0
 800590e:	2180      	movs	r1, #128	@ 0x80
 8005910:	68f8      	ldr	r0, [r7, #12]
 8005912:	f000 ff4d 	bl	80067b0 <UART_WaitOnFlagUntilTimeout>
 8005916:	4603      	mov	r3, r0
 8005918:	2b00      	cmp	r3, #0
 800591a:	d004      	beq.n	8005926 <HAL_UART_Transmit+0x92>
      {

        huart->gState = HAL_UART_STATE_READY;
 800591c:	68fb      	ldr	r3, [r7, #12]
 800591e:	2220      	movs	r2, #32
 8005920:	67da      	str	r2, [r3, #124]	@ 0x7c

        return HAL_TIMEOUT;
 8005922:	2303      	movs	r3, #3
 8005924:	e03b      	b.n	800599e <HAL_UART_Transmit+0x10a>
      }
      if (pdata8bits == NULL)
 8005926:	69fb      	ldr	r3, [r7, #28]
 8005928:	2b00      	cmp	r3, #0
 800592a:	d10b      	bne.n	8005944 <HAL_UART_Transmit+0xb0>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 800592c:	69bb      	ldr	r3, [r7, #24]
 800592e:	881b      	ldrh	r3, [r3, #0]
 8005930:	461a      	mov	r2, r3
 8005932:	68fb      	ldr	r3, [r7, #12]
 8005934:	681b      	ldr	r3, [r3, #0]
 8005936:	f3c2 0208 	ubfx	r2, r2, #0, #9
 800593a:	629a      	str	r2, [r3, #40]	@ 0x28
        pdata16bits++;
 800593c:	69bb      	ldr	r3, [r7, #24]
 800593e:	3302      	adds	r3, #2
 8005940:	61bb      	str	r3, [r7, #24]
 8005942:	e007      	b.n	8005954 <HAL_UART_Transmit+0xc0>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 8005944:	69fb      	ldr	r3, [r7, #28]
 8005946:	781a      	ldrb	r2, [r3, #0]
 8005948:	68fb      	ldr	r3, [r7, #12]
 800594a:	681b      	ldr	r3, [r3, #0]
 800594c:	629a      	str	r2, [r3, #40]	@ 0x28
        pdata8bits++;
 800594e:	69fb      	ldr	r3, [r7, #28]
 8005950:	3301      	adds	r3, #1
 8005952:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8005954:	68fb      	ldr	r3, [r7, #12]
 8005956:	f8b3 3052 	ldrh.w	r3, [r3, #82]	@ 0x52
 800595a:	b29b      	uxth	r3, r3
 800595c:	3b01      	subs	r3, #1
 800595e:	b29a      	uxth	r2, r3
 8005960:	68fb      	ldr	r3, [r7, #12]
 8005962:	f8a3 2052 	strh.w	r2, [r3, #82]	@ 0x52
    while (huart->TxXferCount > 0U)
 8005966:	68fb      	ldr	r3, [r7, #12]
 8005968:	f8b3 3052 	ldrh.w	r3, [r3, #82]	@ 0x52
 800596c:	b29b      	uxth	r3, r3
 800596e:	2b00      	cmp	r3, #0
 8005970:	d1c9      	bne.n	8005906 <HAL_UART_Transmit+0x72>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8005972:	683b      	ldr	r3, [r7, #0]
 8005974:	9300      	str	r3, [sp, #0]
 8005976:	697b      	ldr	r3, [r7, #20]
 8005978:	2200      	movs	r2, #0
 800597a:	2140      	movs	r1, #64	@ 0x40
 800597c:	68f8      	ldr	r0, [r7, #12]
 800597e:	f000 ff17 	bl	80067b0 <UART_WaitOnFlagUntilTimeout>
 8005982:	4603      	mov	r3, r0
 8005984:	2b00      	cmp	r3, #0
 8005986:	d004      	beq.n	8005992 <HAL_UART_Transmit+0xfe>
    {
      huart->gState = HAL_UART_STATE_READY;
 8005988:	68fb      	ldr	r3, [r7, #12]
 800598a:	2220      	movs	r2, #32
 800598c:	67da      	str	r2, [r3, #124]	@ 0x7c

      return HAL_TIMEOUT;
 800598e:	2303      	movs	r3, #3
 8005990:	e005      	b.n	800599e <HAL_UART_Transmit+0x10a>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8005992:	68fb      	ldr	r3, [r7, #12]
 8005994:	2220      	movs	r2, #32
 8005996:	67da      	str	r2, [r3, #124]	@ 0x7c

    return HAL_OK;
 8005998:	2300      	movs	r3, #0
 800599a:	e000      	b.n	800599e <HAL_UART_Transmit+0x10a>
  }
  else
  {
    return HAL_BUSY;
 800599c:	2302      	movs	r3, #2
  }
}
 800599e:	4618      	mov	r0, r3
 80059a0:	3720      	adds	r7, #32
 80059a2:	46bd      	mov	sp, r7
 80059a4:	bd80      	pop	{r7, pc}

080059a6 <HAL_UART_Receive_IT>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 80059a6:	b580      	push	{r7, lr}
 80059a8:	b08a      	sub	sp, #40	@ 0x28
 80059aa:	af00      	add	r7, sp, #0
 80059ac:	60f8      	str	r0, [r7, #12]
 80059ae:	60b9      	str	r1, [r7, #8]
 80059b0:	4613      	mov	r3, r2
 80059b2:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 80059b4:	68fb      	ldr	r3, [r7, #12]
 80059b6:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80059ba:	2b20      	cmp	r3, #32
 80059bc:	d132      	bne.n	8005a24 <HAL_UART_Receive_IT+0x7e>
  {
    if ((pData == NULL) || (Size == 0U))
 80059be:	68bb      	ldr	r3, [r7, #8]
 80059c0:	2b00      	cmp	r3, #0
 80059c2:	d002      	beq.n	80059ca <HAL_UART_Receive_IT+0x24>
 80059c4:	88fb      	ldrh	r3, [r7, #6]
 80059c6:	2b00      	cmp	r3, #0
 80059c8:	d101      	bne.n	80059ce <HAL_UART_Receive_IT+0x28>
    {
      return HAL_ERROR;
 80059ca:	2301      	movs	r3, #1
 80059cc:	e02b      	b.n	8005a26 <HAL_UART_Receive_IT+0x80>
    }

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80059ce:	68fb      	ldr	r3, [r7, #12]
 80059d0:	2200      	movs	r2, #0
 80059d2:	661a      	str	r2, [r3, #96]	@ 0x60

    /* Check that USART RTOEN bit is set */
    if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 80059d4:	68fb      	ldr	r3, [r7, #12]
 80059d6:	681b      	ldr	r3, [r3, #0]
 80059d8:	685b      	ldr	r3, [r3, #4]
 80059da:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 80059de:	2b00      	cmp	r3, #0
 80059e0:	d018      	beq.n	8005a14 <HAL_UART_Receive_IT+0x6e>
    {
      /* Enable the UART Receiver Timeout Interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 80059e2:	68fb      	ldr	r3, [r7, #12]
 80059e4:	681b      	ldr	r3, [r3, #0]
 80059e6:	617b      	str	r3, [r7, #20]
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80059e8:	697b      	ldr	r3, [r7, #20]
 80059ea:	e853 3f00 	ldrex	r3, [r3]
 80059ee:	613b      	str	r3, [r7, #16]
   return(result);
 80059f0:	693b      	ldr	r3, [r7, #16]
 80059f2:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 80059f6:	627b      	str	r3, [r7, #36]	@ 0x24
 80059f8:	68fb      	ldr	r3, [r7, #12]
 80059fa:	681b      	ldr	r3, [r3, #0]
 80059fc:	461a      	mov	r2, r3
 80059fe:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005a00:	623b      	str	r3, [r7, #32]
 8005a02:	61fa      	str	r2, [r7, #28]
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005a04:	69f9      	ldr	r1, [r7, #28]
 8005a06:	6a3a      	ldr	r2, [r7, #32]
 8005a08:	e841 2300 	strex	r3, r2, [r1]
 8005a0c:	61bb      	str	r3, [r7, #24]
   return(result);
 8005a0e:	69bb      	ldr	r3, [r7, #24]
 8005a10:	2b00      	cmp	r3, #0
 8005a12:	d1e6      	bne.n	80059e2 <HAL_UART_Receive_IT+0x3c>
    }

    return (UART_Start_Receive_IT(huart, pData, Size));
 8005a14:	88fb      	ldrh	r3, [r7, #6]
 8005a16:	461a      	mov	r2, r3
 8005a18:	68b9      	ldr	r1, [r7, #8]
 8005a1a:	68f8      	ldr	r0, [r7, #12]
 8005a1c:	f000 ff36 	bl	800688c <UART_Start_Receive_IT>
 8005a20:	4603      	mov	r3, r0
 8005a22:	e000      	b.n	8005a26 <HAL_UART_Receive_IT+0x80>
  }
  else
  {
    return HAL_BUSY;
 8005a24:	2302      	movs	r3, #2
  }
}
 8005a26:	4618      	mov	r0, r3
 8005a28:	3728      	adds	r7, #40	@ 0x28
 8005a2a:	46bd      	mov	sp, r7
 8005a2c:	bd80      	pop	{r7, pc}
	...

08005a30 <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8005a30:	b580      	push	{r7, lr}
 8005a32:	b0ba      	sub	sp, #232	@ 0xe8
 8005a34:	af00      	add	r7, sp, #0
 8005a36:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 8005a38:	687b      	ldr	r3, [r7, #4]
 8005a3a:	681b      	ldr	r3, [r3, #0]
 8005a3c:	69db      	ldr	r3, [r3, #28]
 8005a3e:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8005a42:	687b      	ldr	r3, [r7, #4]
 8005a44:	681b      	ldr	r3, [r3, #0]
 8005a46:	681b      	ldr	r3, [r3, #0]
 8005a48:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8005a4c:	687b      	ldr	r3, [r7, #4]
 8005a4e:	681b      	ldr	r3, [r3, #0]
 8005a50:	689b      	ldr	r3, [r3, #8]
 8005a52:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 8005a56:	f8d7 20e4 	ldr.w	r2, [r7, #228]	@ 0xe4
 8005a5a:	f640 030f 	movw	r3, #2063	@ 0x80f
 8005a5e:	4013      	ands	r3, r2
 8005a60:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  if (errorflags == 0U)
 8005a64:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 8005a68:	2b00      	cmp	r3, #0
 8005a6a:	d115      	bne.n	8005a98 <HAL_UART_IRQHandler+0x68>
  {
    /* UART in mode Receiver ---------------------------------------------------*/
    if (((isrflags & USART_ISR_RXNE) != 0U)
 8005a6c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8005a70:	f003 0320 	and.w	r3, r3, #32
 8005a74:	2b00      	cmp	r3, #0
 8005a76:	d00f      	beq.n	8005a98 <HAL_UART_IRQHandler+0x68>
        && ((cr1its & USART_CR1_RXNEIE) != 0U))
 8005a78:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8005a7c:	f003 0320 	and.w	r3, r3, #32
 8005a80:	2b00      	cmp	r3, #0
 8005a82:	d009      	beq.n	8005a98 <HAL_UART_IRQHandler+0x68>
    {
      if (huart->RxISR != NULL)
 8005a84:	687b      	ldr	r3, [r7, #4]
 8005a86:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8005a88:	2b00      	cmp	r3, #0
 8005a8a:	f000 82ac 	beq.w	8005fe6 <HAL_UART_IRQHandler+0x5b6>
      {
        huart->RxISR(huart);
 8005a8e:	687b      	ldr	r3, [r7, #4]
 8005a90:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8005a92:	6878      	ldr	r0, [r7, #4]
 8005a94:	4798      	blx	r3
      }
      return;
 8005a96:	e2a6      	b.n	8005fe6 <HAL_UART_IRQHandler+0x5b6>
    }
  }

  /* If some errors occur */
  if ((errorflags != 0U)
 8005a98:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 8005a9c:	2b00      	cmp	r3, #0
 8005a9e:	f000 8117 	beq.w	8005cd0 <HAL_UART_IRQHandler+0x2a0>
      && (((cr3its & USART_CR3_EIE) != 0U)
 8005aa2:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8005aa6:	f003 0301 	and.w	r3, r3, #1
 8005aaa:	2b00      	cmp	r3, #0
 8005aac:	d106      	bne.n	8005abc <HAL_UART_IRQHandler+0x8c>
          || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U)))
 8005aae:	f8d7 20e0 	ldr.w	r2, [r7, #224]	@ 0xe0
 8005ab2:	4b85      	ldr	r3, [pc, #532]	@ (8005cc8 <HAL_UART_IRQHandler+0x298>)
 8005ab4:	4013      	ands	r3, r2
 8005ab6:	2b00      	cmp	r3, #0
 8005ab8:	f000 810a 	beq.w	8005cd0 <HAL_UART_IRQHandler+0x2a0>
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 8005abc:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8005ac0:	f003 0301 	and.w	r3, r3, #1
 8005ac4:	2b00      	cmp	r3, #0
 8005ac6:	d011      	beq.n	8005aec <HAL_UART_IRQHandler+0xbc>
 8005ac8:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8005acc:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8005ad0:	2b00      	cmp	r3, #0
 8005ad2:	d00b      	beq.n	8005aec <HAL_UART_IRQHandler+0xbc>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 8005ad4:	687b      	ldr	r3, [r7, #4]
 8005ad6:	681b      	ldr	r3, [r3, #0]
 8005ad8:	2201      	movs	r2, #1
 8005ada:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8005adc:	687b      	ldr	r3, [r7, #4]
 8005ade:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8005ae2:	f043 0201 	orr.w	r2, r3, #1
 8005ae6:	687b      	ldr	r3, [r7, #4]
 8005ae8:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8005aec:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8005af0:	f003 0302 	and.w	r3, r3, #2
 8005af4:	2b00      	cmp	r3, #0
 8005af6:	d011      	beq.n	8005b1c <HAL_UART_IRQHandler+0xec>
 8005af8:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8005afc:	f003 0301 	and.w	r3, r3, #1
 8005b00:	2b00      	cmp	r3, #0
 8005b02:	d00b      	beq.n	8005b1c <HAL_UART_IRQHandler+0xec>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 8005b04:	687b      	ldr	r3, [r7, #4]
 8005b06:	681b      	ldr	r3, [r3, #0]
 8005b08:	2202      	movs	r2, #2
 8005b0a:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8005b0c:	687b      	ldr	r3, [r7, #4]
 8005b0e:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8005b12:	f043 0204 	orr.w	r2, r3, #4
 8005b16:	687b      	ldr	r3, [r7, #4]
 8005b18:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8005b1c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8005b20:	f003 0304 	and.w	r3, r3, #4
 8005b24:	2b00      	cmp	r3, #0
 8005b26:	d011      	beq.n	8005b4c <HAL_UART_IRQHandler+0x11c>
 8005b28:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8005b2c:	f003 0301 	and.w	r3, r3, #1
 8005b30:	2b00      	cmp	r3, #0
 8005b32:	d00b      	beq.n	8005b4c <HAL_UART_IRQHandler+0x11c>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 8005b34:	687b      	ldr	r3, [r7, #4]
 8005b36:	681b      	ldr	r3, [r3, #0]
 8005b38:	2204      	movs	r2, #4
 8005b3a:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8005b3c:	687b      	ldr	r3, [r7, #4]
 8005b3e:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8005b42:	f043 0202 	orr.w	r2, r3, #2
 8005b46:	687b      	ldr	r3, [r7, #4]
 8005b48:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
    }

    /* UART Over-Run interrupt occurred -----------------------------------------*/
    if (((isrflags & USART_ISR_ORE) != 0U)
 8005b4c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8005b50:	f003 0308 	and.w	r3, r3, #8
 8005b54:	2b00      	cmp	r3, #0
 8005b56:	d017      	beq.n	8005b88 <HAL_UART_IRQHandler+0x158>
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 8005b58:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8005b5c:	f003 0320 	and.w	r3, r3, #32
 8005b60:	2b00      	cmp	r3, #0
 8005b62:	d105      	bne.n	8005b70 <HAL_UART_IRQHandler+0x140>
            ((cr3its & USART_CR3_EIE) != 0U)))
 8005b64:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8005b68:	f003 0301 	and.w	r3, r3, #1
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 8005b6c:	2b00      	cmp	r3, #0
 8005b6e:	d00b      	beq.n	8005b88 <HAL_UART_IRQHandler+0x158>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8005b70:	687b      	ldr	r3, [r7, #4]
 8005b72:	681b      	ldr	r3, [r3, #0]
 8005b74:	2208      	movs	r2, #8
 8005b76:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8005b78:	687b      	ldr	r3, [r7, #4]
 8005b7a:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8005b7e:	f043 0208 	orr.w	r2, r3, #8
 8005b82:	687b      	ldr	r3, [r7, #4]
 8005b84:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 8005b88:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8005b8c:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8005b90:	2b00      	cmp	r3, #0
 8005b92:	d012      	beq.n	8005bba <HAL_UART_IRQHandler+0x18a>
 8005b94:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8005b98:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 8005b9c:	2b00      	cmp	r3, #0
 8005b9e:	d00c      	beq.n	8005bba <HAL_UART_IRQHandler+0x18a>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8005ba0:	687b      	ldr	r3, [r7, #4]
 8005ba2:	681b      	ldr	r3, [r3, #0]
 8005ba4:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 8005ba8:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 8005baa:	687b      	ldr	r3, [r7, #4]
 8005bac:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8005bb0:	f043 0220 	orr.w	r2, r3, #32
 8005bb4:	687b      	ldr	r3, [r7, #4]
 8005bb6:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8005bba:	687b      	ldr	r3, [r7, #4]
 8005bbc:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8005bc0:	2b00      	cmp	r3, #0
 8005bc2:	f000 8212 	beq.w	8005fea <HAL_UART_IRQHandler+0x5ba>
    {
      /* UART in mode Receiver --------------------------------------------------*/
      if (((isrflags & USART_ISR_RXNE) != 0U)
 8005bc6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8005bca:	f003 0320 	and.w	r3, r3, #32
 8005bce:	2b00      	cmp	r3, #0
 8005bd0:	d00d      	beq.n	8005bee <HAL_UART_IRQHandler+0x1be>
          && ((cr1its & USART_CR1_RXNEIE) != 0U))
 8005bd2:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8005bd6:	f003 0320 	and.w	r3, r3, #32
 8005bda:	2b00      	cmp	r3, #0
 8005bdc:	d007      	beq.n	8005bee <HAL_UART_IRQHandler+0x1be>
      {
        if (huart->RxISR != NULL)
 8005bde:	687b      	ldr	r3, [r7, #4]
 8005be0:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8005be2:	2b00      	cmp	r3, #0
 8005be4:	d003      	beq.n	8005bee <HAL_UART_IRQHandler+0x1be>
        {
          huart->RxISR(huart);
 8005be6:	687b      	ldr	r3, [r7, #4]
 8005be8:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8005bea:	6878      	ldr	r0, [r7, #4]
 8005bec:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 8005bee:	687b      	ldr	r3, [r7, #4]
 8005bf0:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8005bf4:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8005bf8:	687b      	ldr	r3, [r7, #4]
 8005bfa:	681b      	ldr	r3, [r3, #0]
 8005bfc:	689b      	ldr	r3, [r3, #8]
 8005bfe:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8005c02:	2b40      	cmp	r3, #64	@ 0x40
 8005c04:	d005      	beq.n	8005c12 <HAL_UART_IRQHandler+0x1e2>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 8005c06:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8005c0a:	f003 0328 	and.w	r3, r3, #40	@ 0x28
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8005c0e:	2b00      	cmp	r3, #0
 8005c10:	d04f      	beq.n	8005cb2 <HAL_UART_IRQHandler+0x282>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8005c12:	6878      	ldr	r0, [r7, #4]
 8005c14:	f000 ff00 	bl	8006a18 <UART_EndRxTransfer>

        /* Abort the UART DMA Rx channel if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005c18:	687b      	ldr	r3, [r7, #4]
 8005c1a:	681b      	ldr	r3, [r3, #0]
 8005c1c:	689b      	ldr	r3, [r3, #8]
 8005c1e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8005c22:	2b40      	cmp	r3, #64	@ 0x40
 8005c24:	d141      	bne.n	8005caa <HAL_UART_IRQHandler+0x27a>
        {
          /* Disable the UART DMA Rx request if enabled */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8005c26:	687b      	ldr	r3, [r7, #4]
 8005c28:	681b      	ldr	r3, [r3, #0]
 8005c2a:	3308      	adds	r3, #8
 8005c2c:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005c30:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 8005c34:	e853 3f00 	ldrex	r3, [r3]
 8005c38:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
   return(result);
 8005c3c:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 8005c40:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8005c44:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 8005c48:	687b      	ldr	r3, [r7, #4]
 8005c4a:	681b      	ldr	r3, [r3, #0]
 8005c4c:	3308      	adds	r3, #8
 8005c4e:	f8d7 20d0 	ldr.w	r2, [r7, #208]	@ 0xd0
 8005c52:	f8c7 20a8 	str.w	r2, [r7, #168]	@ 0xa8
 8005c56:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005c5a:	f8d7 10a4 	ldr.w	r1, [r7, #164]	@ 0xa4
 8005c5e:	f8d7 20a8 	ldr.w	r2, [r7, #168]	@ 0xa8
 8005c62:	e841 2300 	strex	r3, r2, [r1]
 8005c66:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
   return(result);
 8005c6a:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 8005c6e:	2b00      	cmp	r3, #0
 8005c70:	d1d9      	bne.n	8005c26 <HAL_UART_IRQHandler+0x1f6>

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 8005c72:	687b      	ldr	r3, [r7, #4]
 8005c74:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8005c76:	2b00      	cmp	r3, #0
 8005c78:	d013      	beq.n	8005ca2 <HAL_UART_IRQHandler+0x272>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8005c7a:	687b      	ldr	r3, [r7, #4]
 8005c7c:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8005c7e:	4a13      	ldr	r2, [pc, #76]	@ (8005ccc <HAL_UART_IRQHandler+0x29c>)
 8005c80:	651a      	str	r2, [r3, #80]	@ 0x50

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8005c82:	687b      	ldr	r3, [r7, #4]
 8005c84:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8005c86:	4618      	mov	r0, r3
 8005c88:	f7fc fc27 	bl	80024da <HAL_DMA_Abort_IT>
 8005c8c:	4603      	mov	r3, r0
 8005c8e:	2b00      	cmp	r3, #0
 8005c90:	d017      	beq.n	8005cc2 <HAL_UART_IRQHandler+0x292>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8005c92:	687b      	ldr	r3, [r7, #4]
 8005c94:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8005c96:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8005c98:	687a      	ldr	r2, [r7, #4]
 8005c9a:	6f52      	ldr	r2, [r2, #116]	@ 0x74
 8005c9c:	4610      	mov	r0, r2
 8005c9e:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005ca0:	e00f      	b.n	8005cc2 <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8005ca2:	6878      	ldr	r0, [r7, #4]
 8005ca4:	f000 f9b6 	bl	8006014 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005ca8:	e00b      	b.n	8005cc2 <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8005caa:	6878      	ldr	r0, [r7, #4]
 8005cac:	f000 f9b2 	bl	8006014 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005cb0:	e007      	b.n	8005cc2 <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8005cb2:	6878      	ldr	r0, [r7, #4]
 8005cb4:	f000 f9ae 	bl	8006014 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005cb8:	687b      	ldr	r3, [r7, #4]
 8005cba:	2200      	movs	r2, #0
 8005cbc:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
      }
    }
    return;
 8005cc0:	e193      	b.n	8005fea <HAL_UART_IRQHandler+0x5ba>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005cc2:	bf00      	nop
    return;
 8005cc4:	e191      	b.n	8005fea <HAL_UART_IRQHandler+0x5ba>
 8005cc6:	bf00      	nop
 8005cc8:	04000120 	.word	0x04000120
 8005ccc:	08006ae1 	.word	0x08006ae1

  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8005cd0:	687b      	ldr	r3, [r7, #4]
 8005cd2:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8005cd4:	2b01      	cmp	r3, #1
 8005cd6:	f040 814c 	bne.w	8005f72 <HAL_UART_IRQHandler+0x542>
      && ((isrflags & USART_ISR_IDLE) != 0U)
 8005cda:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8005cde:	f003 0310 	and.w	r3, r3, #16
 8005ce2:	2b00      	cmp	r3, #0
 8005ce4:	f000 8145 	beq.w	8005f72 <HAL_UART_IRQHandler+0x542>
      && ((cr1its & USART_ISR_IDLE) != 0U))
 8005ce8:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8005cec:	f003 0310 	and.w	r3, r3, #16
 8005cf0:	2b00      	cmp	r3, #0
 8005cf2:	f000 813e 	beq.w	8005f72 <HAL_UART_IRQHandler+0x542>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8005cf6:	687b      	ldr	r3, [r7, #4]
 8005cf8:	681b      	ldr	r3, [r3, #0]
 8005cfa:	2210      	movs	r2, #16
 8005cfc:	621a      	str	r2, [r3, #32]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005cfe:	687b      	ldr	r3, [r7, #4]
 8005d00:	681b      	ldr	r3, [r3, #0]
 8005d02:	689b      	ldr	r3, [r3, #8]
 8005d04:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8005d08:	2b40      	cmp	r3, #64	@ 0x40
 8005d0a:	f040 80b6 	bne.w	8005e7a <HAL_UART_IRQHandler+0x44a>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8005d0e:	687b      	ldr	r3, [r7, #4]
 8005d10:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8005d12:	681b      	ldr	r3, [r3, #0]
 8005d14:	685b      	ldr	r3, [r3, #4]
 8005d16:	f8a7 30be 	strh.w	r3, [r7, #190]	@ 0xbe
      if ((nb_remaining_rx_data > 0U)
 8005d1a:	f8b7 30be 	ldrh.w	r3, [r7, #190]	@ 0xbe
 8005d1e:	2b00      	cmp	r3, #0
 8005d20:	f000 8165 	beq.w	8005fee <HAL_UART_IRQHandler+0x5be>
          && (nb_remaining_rx_data < huart->RxXferSize))
 8005d24:	687b      	ldr	r3, [r7, #4]
 8005d26:	f8b3 3058 	ldrh.w	r3, [r3, #88]	@ 0x58
 8005d2a:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 8005d2e:	429a      	cmp	r2, r3
 8005d30:	f080 815d 	bcs.w	8005fee <HAL_UART_IRQHandler+0x5be>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8005d34:	687b      	ldr	r3, [r7, #4]
 8005d36:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 8005d3a:	f8a3 205a 	strh.w	r2, [r3, #90]	@ 0x5a

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 8005d3e:	687b      	ldr	r3, [r7, #4]
 8005d40:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8005d42:	69db      	ldr	r3, [r3, #28]
 8005d44:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8005d48:	f000 8086 	beq.w	8005e58 <HAL_UART_IRQHandler+0x428>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8005d4c:	687b      	ldr	r3, [r7, #4]
 8005d4e:	681b      	ldr	r3, [r3, #0]
 8005d50:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005d54:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 8005d58:	e853 3f00 	ldrex	r3, [r3]
 8005d5c:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
   return(result);
 8005d60:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 8005d64:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8005d68:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 8005d6c:	687b      	ldr	r3, [r7, #4]
 8005d6e:	681b      	ldr	r3, [r3, #0]
 8005d70:	461a      	mov	r2, r3
 8005d72:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 8005d76:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 8005d7a:	f8c7 2090 	str.w	r2, [r7, #144]	@ 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005d7e:	f8d7 1090 	ldr.w	r1, [r7, #144]	@ 0x90
 8005d82:	f8d7 2094 	ldr.w	r2, [r7, #148]	@ 0x94
 8005d86:	e841 2300 	strex	r3, r2, [r1]
 8005d8a:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
   return(result);
 8005d8e:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8005d92:	2b00      	cmp	r3, #0
 8005d94:	d1da      	bne.n	8005d4c <HAL_UART_IRQHandler+0x31c>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005d96:	687b      	ldr	r3, [r7, #4]
 8005d98:	681b      	ldr	r3, [r3, #0]
 8005d9a:	3308      	adds	r3, #8
 8005d9c:	677b      	str	r3, [r7, #116]	@ 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005d9e:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8005da0:	e853 3f00 	ldrex	r3, [r3]
 8005da4:	673b      	str	r3, [r7, #112]	@ 0x70
   return(result);
 8005da6:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8005da8:	f023 0301 	bic.w	r3, r3, #1
 8005dac:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8005db0:	687b      	ldr	r3, [r7, #4]
 8005db2:	681b      	ldr	r3, [r3, #0]
 8005db4:	3308      	adds	r3, #8
 8005db6:	f8d7 20b4 	ldr.w	r2, [r7, #180]	@ 0xb4
 8005dba:	f8c7 2080 	str.w	r2, [r7, #128]	@ 0x80
 8005dbe:	67fb      	str	r3, [r7, #124]	@ 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005dc0:	6ff9      	ldr	r1, [r7, #124]	@ 0x7c
 8005dc2:	f8d7 2080 	ldr.w	r2, [r7, #128]	@ 0x80
 8005dc6:	e841 2300 	strex	r3, r2, [r1]
 8005dca:	67bb      	str	r3, [r7, #120]	@ 0x78
   return(result);
 8005dcc:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8005dce:	2b00      	cmp	r3, #0
 8005dd0:	d1e1      	bne.n	8005d96 <HAL_UART_IRQHandler+0x366>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8005dd2:	687b      	ldr	r3, [r7, #4]
 8005dd4:	681b      	ldr	r3, [r3, #0]
 8005dd6:	3308      	adds	r3, #8
 8005dd8:	663b      	str	r3, [r7, #96]	@ 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005dda:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8005ddc:	e853 3f00 	ldrex	r3, [r3]
 8005de0:	65fb      	str	r3, [r7, #92]	@ 0x5c
   return(result);
 8005de2:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8005de4:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8005de8:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 8005dec:	687b      	ldr	r3, [r7, #4]
 8005dee:	681b      	ldr	r3, [r3, #0]
 8005df0:	3308      	adds	r3, #8
 8005df2:	f8d7 20b0 	ldr.w	r2, [r7, #176]	@ 0xb0
 8005df6:	66fa      	str	r2, [r7, #108]	@ 0x6c
 8005df8:	66bb      	str	r3, [r7, #104]	@ 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005dfa:	6eb9      	ldr	r1, [r7, #104]	@ 0x68
 8005dfc:	6efa      	ldr	r2, [r7, #108]	@ 0x6c
 8005dfe:	e841 2300 	strex	r3, r2, [r1]
 8005e02:	667b      	str	r3, [r7, #100]	@ 0x64
   return(result);
 8005e04:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8005e06:	2b00      	cmp	r3, #0
 8005e08:	d1e3      	bne.n	8005dd2 <HAL_UART_IRQHandler+0x3a2>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8005e0a:	687b      	ldr	r3, [r7, #4]
 8005e0c:	2220      	movs	r2, #32
 8005e0e:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005e12:	687b      	ldr	r3, [r7, #4]
 8005e14:	2200      	movs	r2, #0
 8005e16:	661a      	str	r2, [r3, #96]	@ 0x60

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8005e18:	687b      	ldr	r3, [r7, #4]
 8005e1a:	681b      	ldr	r3, [r3, #0]
 8005e1c:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005e1e:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8005e20:	e853 3f00 	ldrex	r3, [r3]
 8005e24:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 8005e26:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8005e28:	f023 0310 	bic.w	r3, r3, #16
 8005e2c:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 8005e30:	687b      	ldr	r3, [r7, #4]
 8005e32:	681b      	ldr	r3, [r3, #0]
 8005e34:	461a      	mov	r2, r3
 8005e36:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8005e3a:	65bb      	str	r3, [r7, #88]	@ 0x58
 8005e3c:	657a      	str	r2, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005e3e:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 8005e40:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 8005e42:	e841 2300 	strex	r3, r2, [r1]
 8005e46:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 8005e48:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8005e4a:	2b00      	cmp	r3, #0
 8005e4c:	d1e4      	bne.n	8005e18 <HAL_UART_IRQHandler+0x3e8>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8005e4e:	687b      	ldr	r3, [r7, #4]
 8005e50:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8005e52:	4618      	mov	r0, r3
 8005e54:	f7fc fad1 	bl	80023fa <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8005e58:	687b      	ldr	r3, [r7, #4]
 8005e5a:	2202      	movs	r2, #2
 8005e5c:	665a      	str	r2, [r3, #100]	@ 0x64
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8005e5e:	687b      	ldr	r3, [r7, #4]
 8005e60:	f8b3 2058 	ldrh.w	r2, [r3, #88]	@ 0x58
 8005e64:	687b      	ldr	r3, [r7, #4]
 8005e66:	f8b3 305a 	ldrh.w	r3, [r3, #90]	@ 0x5a
 8005e6a:	b29b      	uxth	r3, r3
 8005e6c:	1ad3      	subs	r3, r2, r3
 8005e6e:	b29b      	uxth	r3, r3
 8005e70:	4619      	mov	r1, r3
 8005e72:	6878      	ldr	r0, [r7, #4]
 8005e74:	f000 f8d8 	bl	8006028 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 8005e78:	e0b9      	b.n	8005fee <HAL_UART_IRQHandler+0x5be>
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8005e7a:	687b      	ldr	r3, [r7, #4]
 8005e7c:	f8b3 2058 	ldrh.w	r2, [r3, #88]	@ 0x58
 8005e80:	687b      	ldr	r3, [r7, #4]
 8005e82:	f8b3 305a 	ldrh.w	r3, [r3, #90]	@ 0x5a
 8005e86:	b29b      	uxth	r3, r3
 8005e88:	1ad3      	subs	r3, r2, r3
 8005e8a:	f8a7 30ce 	strh.w	r3, [r7, #206]	@ 0xce
      if ((huart->RxXferCount > 0U)
 8005e8e:	687b      	ldr	r3, [r7, #4]
 8005e90:	f8b3 305a 	ldrh.w	r3, [r3, #90]	@ 0x5a
 8005e94:	b29b      	uxth	r3, r3
 8005e96:	2b00      	cmp	r3, #0
 8005e98:	f000 80ab 	beq.w	8005ff2 <HAL_UART_IRQHandler+0x5c2>
          && (nb_rx_data > 0U))
 8005e9c:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 8005ea0:	2b00      	cmp	r3, #0
 8005ea2:	f000 80a6 	beq.w	8005ff2 <HAL_UART_IRQHandler+0x5c2>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8005ea6:	687b      	ldr	r3, [r7, #4]
 8005ea8:	681b      	ldr	r3, [r3, #0]
 8005eaa:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005eac:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005eae:	e853 3f00 	ldrex	r3, [r3]
 8005eb2:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 8005eb4:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8005eb6:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8005eba:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 8005ebe:	687b      	ldr	r3, [r7, #4]
 8005ec0:	681b      	ldr	r3, [r3, #0]
 8005ec2:	461a      	mov	r2, r3
 8005ec4:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 8005ec8:	647b      	str	r3, [r7, #68]	@ 0x44
 8005eca:	643a      	str	r2, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005ecc:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 8005ece:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8005ed0:	e841 2300 	strex	r3, r2, [r1]
 8005ed4:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 8005ed6:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8005ed8:	2b00      	cmp	r3, #0
 8005eda:	d1e4      	bne.n	8005ea6 <HAL_UART_IRQHandler+0x476>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005edc:	687b      	ldr	r3, [r7, #4]
 8005ede:	681b      	ldr	r3, [r3, #0]
 8005ee0:	3308      	adds	r3, #8
 8005ee2:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005ee4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005ee6:	e853 3f00 	ldrex	r3, [r3]
 8005eea:	623b      	str	r3, [r7, #32]
   return(result);
 8005eec:	6a3b      	ldr	r3, [r7, #32]
 8005eee:	f023 0301 	bic.w	r3, r3, #1
 8005ef2:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 8005ef6:	687b      	ldr	r3, [r7, #4]
 8005ef8:	681b      	ldr	r3, [r3, #0]
 8005efa:	3308      	adds	r3, #8
 8005efc:	f8d7 20c4 	ldr.w	r2, [r7, #196]	@ 0xc4
 8005f00:	633a      	str	r2, [r7, #48]	@ 0x30
 8005f02:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005f04:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8005f06:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8005f08:	e841 2300 	strex	r3, r2, [r1]
 8005f0c:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 8005f0e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005f10:	2b00      	cmp	r3, #0
 8005f12:	d1e3      	bne.n	8005edc <HAL_UART_IRQHandler+0x4ac>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8005f14:	687b      	ldr	r3, [r7, #4]
 8005f16:	2220      	movs	r2, #32
 8005f18:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005f1c:	687b      	ldr	r3, [r7, #4]
 8005f1e:	2200      	movs	r2, #0
 8005f20:	661a      	str	r2, [r3, #96]	@ 0x60

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 8005f22:	687b      	ldr	r3, [r7, #4]
 8005f24:	2200      	movs	r2, #0
 8005f26:	669a      	str	r2, [r3, #104]	@ 0x68

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8005f28:	687b      	ldr	r3, [r7, #4]
 8005f2a:	681b      	ldr	r3, [r3, #0]
 8005f2c:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005f2e:	693b      	ldr	r3, [r7, #16]
 8005f30:	e853 3f00 	ldrex	r3, [r3]
 8005f34:	60fb      	str	r3, [r7, #12]
   return(result);
 8005f36:	68fb      	ldr	r3, [r7, #12]
 8005f38:	f023 0310 	bic.w	r3, r3, #16
 8005f3c:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 8005f40:	687b      	ldr	r3, [r7, #4]
 8005f42:	681b      	ldr	r3, [r3, #0]
 8005f44:	461a      	mov	r2, r3
 8005f46:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 8005f4a:	61fb      	str	r3, [r7, #28]
 8005f4c:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005f4e:	69b9      	ldr	r1, [r7, #24]
 8005f50:	69fa      	ldr	r2, [r7, #28]
 8005f52:	e841 2300 	strex	r3, r2, [r1]
 8005f56:	617b      	str	r3, [r7, #20]
   return(result);
 8005f58:	697b      	ldr	r3, [r7, #20]
 8005f5a:	2b00      	cmp	r3, #0
 8005f5c:	d1e4      	bne.n	8005f28 <HAL_UART_IRQHandler+0x4f8>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8005f5e:	687b      	ldr	r3, [r7, #4]
 8005f60:	2202      	movs	r2, #2
 8005f62:	665a      	str	r2, [r3, #100]	@ 0x64
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8005f64:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 8005f68:	4619      	mov	r1, r3
 8005f6a:	6878      	ldr	r0, [r7, #4]
 8005f6c:	f000 f85c 	bl	8006028 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 8005f70:	e03f      	b.n	8005ff2 <HAL_UART_IRQHandler+0x5c2>
  }
#if defined(USART_CR1_UESM)
#if defined(USART_CR3_WUFIE)

  /* UART wakeup from Stop mode interrupt occurred ---------------------------*/
  if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
 8005f72:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8005f76:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8005f7a:	2b00      	cmp	r3, #0
 8005f7c:	d00e      	beq.n	8005f9c <HAL_UART_IRQHandler+0x56c>
 8005f7e:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8005f82:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8005f86:	2b00      	cmp	r3, #0
 8005f88:	d008      	beq.n	8005f9c <HAL_UART_IRQHandler+0x56c>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 8005f8a:	687b      	ldr	r3, [r7, #4]
 8005f8c:	681b      	ldr	r3, [r3, #0]
 8005f8e:	f44f 1280 	mov.w	r2, #1048576	@ 0x100000
 8005f92:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Wakeup Callback */
    huart->WakeupCallback(huart);
#else
    /* Call legacy weak Wakeup Callback */
    HAL_UARTEx_WakeupCallback(huart);
 8005f94:	6878      	ldr	r0, [r7, #4]
 8005f96:	f000 f853 	bl	8006040 <HAL_UARTEx_WakeupCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 8005f9a:	e02d      	b.n	8005ff8 <HAL_UART_IRQHandler+0x5c8>
  }
#endif /* USART_CR3_WUFIE */
#endif /* USART_CR1_UESM */

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_ISR_TXE) != 0U)
 8005f9c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8005fa0:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8005fa4:	2b00      	cmp	r3, #0
 8005fa6:	d00e      	beq.n	8005fc6 <HAL_UART_IRQHandler+0x596>
      && ((cr1its & USART_CR1_TXEIE) != 0U))
 8005fa8:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8005fac:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8005fb0:	2b00      	cmp	r3, #0
 8005fb2:	d008      	beq.n	8005fc6 <HAL_UART_IRQHandler+0x596>
  {
    if (huart->TxISR != NULL)
 8005fb4:	687b      	ldr	r3, [r7, #4]
 8005fb6:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8005fb8:	2b00      	cmp	r3, #0
 8005fba:	d01c      	beq.n	8005ff6 <HAL_UART_IRQHandler+0x5c6>
    {
      huart->TxISR(huart);
 8005fbc:	687b      	ldr	r3, [r7, #4]
 8005fbe:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8005fc0:	6878      	ldr	r0, [r7, #4]
 8005fc2:	4798      	blx	r3
    }
    return;
 8005fc4:	e017      	b.n	8005ff6 <HAL_UART_IRQHandler+0x5c6>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 8005fc6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8005fca:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8005fce:	2b00      	cmp	r3, #0
 8005fd0:	d012      	beq.n	8005ff8 <HAL_UART_IRQHandler+0x5c8>
 8005fd2:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8005fd6:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8005fda:	2b00      	cmp	r3, #0
 8005fdc:	d00c      	beq.n	8005ff8 <HAL_UART_IRQHandler+0x5c8>
  {
    UART_EndTransmit_IT(huart);
 8005fde:	6878      	ldr	r0, [r7, #4]
 8005fe0:	f000 fd94 	bl	8006b0c <UART_EndTransmit_IT>
    return;
 8005fe4:	e008      	b.n	8005ff8 <HAL_UART_IRQHandler+0x5c8>
      return;
 8005fe6:	bf00      	nop
 8005fe8:	e006      	b.n	8005ff8 <HAL_UART_IRQHandler+0x5c8>
    return;
 8005fea:	bf00      	nop
 8005fec:	e004      	b.n	8005ff8 <HAL_UART_IRQHandler+0x5c8>
      return;
 8005fee:	bf00      	nop
 8005ff0:	e002      	b.n	8005ff8 <HAL_UART_IRQHandler+0x5c8>
      return;
 8005ff2:	bf00      	nop
 8005ff4:	e000      	b.n	8005ff8 <HAL_UART_IRQHandler+0x5c8>
    return;
 8005ff6:	bf00      	nop
  }

}
 8005ff8:	37e8      	adds	r7, #232	@ 0xe8
 8005ffa:	46bd      	mov	sp, r7
 8005ffc:	bd80      	pop	{r7, pc}
 8005ffe:	bf00      	nop

08006000 <HAL_UART_TxCpltCallback>:
  * @brief Tx Transfer completed callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8006000:	b480      	push	{r7}
 8006002:	b083      	sub	sp, #12
 8006004:	af00      	add	r7, sp, #0
 8006006:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_TxCpltCallback can be implemented in the user file.
   */
}
 8006008:	bf00      	nop
 800600a:	370c      	adds	r7, #12
 800600c:	46bd      	mov	sp, r7
 800600e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006012:	4770      	bx	lr

08006014 <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8006014:	b480      	push	{r7}
 8006016:	b083      	sub	sp, #12
 8006018:	af00      	add	r7, sp, #0
 800601a:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 800601c:	bf00      	nop
 800601e:	370c      	adds	r7, #12
 8006020:	46bd      	mov	sp, r7
 8006022:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006026:	4770      	bx	lr

08006028 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8006028:	b480      	push	{r7}
 800602a:	b083      	sub	sp, #12
 800602c:	af00      	add	r7, sp, #0
 800602e:	6078      	str	r0, [r7, #4]
 8006030:	460b      	mov	r3, r1
 8006032:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8006034:	bf00      	nop
 8006036:	370c      	adds	r7, #12
 8006038:	46bd      	mov	sp, r7
 800603a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800603e:	4770      	bx	lr

08006040 <HAL_UARTEx_WakeupCallback>:
  * @brief UART wakeup from Stop mode callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_WakeupCallback(UART_HandleTypeDef *huart)
{
 8006040:	b480      	push	{r7}
 8006042:	b083      	sub	sp, #12
 8006044:	af00      	add	r7, sp, #0
 8006046:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_WakeupCallback can be implemented in the user file.
   */
}
 8006048:	bf00      	nop
 800604a:	370c      	adds	r7, #12
 800604c:	46bd      	mov	sp, r7
 800604e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006052:	4770      	bx	lr

08006054 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8006054:	b580      	push	{r7, lr}
 8006056:	b088      	sub	sp, #32
 8006058:	af00      	add	r7, sp, #0
 800605a:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 800605c:	2300      	movs	r3, #0
 800605e:	77bb      	strb	r3, [r7, #30]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8006060:	687b      	ldr	r3, [r7, #4]
 8006062:	689a      	ldr	r2, [r3, #8]
 8006064:	687b      	ldr	r3, [r7, #4]
 8006066:	691b      	ldr	r3, [r3, #16]
 8006068:	431a      	orrs	r2, r3
 800606a:	687b      	ldr	r3, [r7, #4]
 800606c:	695b      	ldr	r3, [r3, #20]
 800606e:	431a      	orrs	r2, r3
 8006070:	687b      	ldr	r3, [r7, #4]
 8006072:	69db      	ldr	r3, [r3, #28]
 8006074:	4313      	orrs	r3, r2
 8006076:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8006078:	687b      	ldr	r3, [r7, #4]
 800607a:	681b      	ldr	r3, [r3, #0]
 800607c:	681a      	ldr	r2, [r3, #0]
 800607e:	4ba6      	ldr	r3, [pc, #664]	@ (8006318 <UART_SetConfig+0x2c4>)
 8006080:	4013      	ands	r3, r2
 8006082:	687a      	ldr	r2, [r7, #4]
 8006084:	6812      	ldr	r2, [r2, #0]
 8006086:	6979      	ldr	r1, [r7, #20]
 8006088:	430b      	orrs	r3, r1
 800608a:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800608c:	687b      	ldr	r3, [r7, #4]
 800608e:	681b      	ldr	r3, [r3, #0]
 8006090:	685b      	ldr	r3, [r3, #4]
 8006092:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 8006096:	687b      	ldr	r3, [r7, #4]
 8006098:	68da      	ldr	r2, [r3, #12]
 800609a:	687b      	ldr	r3, [r7, #4]
 800609c:	681b      	ldr	r3, [r3, #0]
 800609e:	430a      	orrs	r2, r1
 80060a0:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 80060a2:	687b      	ldr	r3, [r7, #4]
 80060a4:	699b      	ldr	r3, [r3, #24]
 80060a6:	617b      	str	r3, [r7, #20]

  tmpreg |= huart->Init.OneBitSampling;
 80060a8:	687b      	ldr	r3, [r7, #4]
 80060aa:	6a1b      	ldr	r3, [r3, #32]
 80060ac:	697a      	ldr	r2, [r7, #20]
 80060ae:	4313      	orrs	r3, r2
 80060b0:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 80060b2:	687b      	ldr	r3, [r7, #4]
 80060b4:	681b      	ldr	r3, [r3, #0]
 80060b6:	689b      	ldr	r3, [r3, #8]
 80060b8:	f423 6130 	bic.w	r1, r3, #2816	@ 0xb00
 80060bc:	687b      	ldr	r3, [r7, #4]
 80060be:	681b      	ldr	r3, [r3, #0]
 80060c0:	697a      	ldr	r2, [r7, #20]
 80060c2:	430a      	orrs	r2, r1
 80060c4:	609a      	str	r2, [r3, #8]


  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 80060c6:	687b      	ldr	r3, [r7, #4]
 80060c8:	681b      	ldr	r3, [r3, #0]
 80060ca:	4a94      	ldr	r2, [pc, #592]	@ (800631c <UART_SetConfig+0x2c8>)
 80060cc:	4293      	cmp	r3, r2
 80060ce:	d120      	bne.n	8006112 <UART_SetConfig+0xbe>
 80060d0:	4b93      	ldr	r3, [pc, #588]	@ (8006320 <UART_SetConfig+0x2cc>)
 80060d2:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80060d6:	f003 0303 	and.w	r3, r3, #3
 80060da:	2b03      	cmp	r3, #3
 80060dc:	d816      	bhi.n	800610c <UART_SetConfig+0xb8>
 80060de:	a201      	add	r2, pc, #4	@ (adr r2, 80060e4 <UART_SetConfig+0x90>)
 80060e0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80060e4:	080060f5 	.word	0x080060f5
 80060e8:	08006101 	.word	0x08006101
 80060ec:	080060fb 	.word	0x080060fb
 80060f0:	08006107 	.word	0x08006107
 80060f4:	2301      	movs	r3, #1
 80060f6:	77fb      	strb	r3, [r7, #31]
 80060f8:	e150      	b.n	800639c <UART_SetConfig+0x348>
 80060fa:	2302      	movs	r3, #2
 80060fc:	77fb      	strb	r3, [r7, #31]
 80060fe:	e14d      	b.n	800639c <UART_SetConfig+0x348>
 8006100:	2304      	movs	r3, #4
 8006102:	77fb      	strb	r3, [r7, #31]
 8006104:	e14a      	b.n	800639c <UART_SetConfig+0x348>
 8006106:	2308      	movs	r3, #8
 8006108:	77fb      	strb	r3, [r7, #31]
 800610a:	e147      	b.n	800639c <UART_SetConfig+0x348>
 800610c:	2310      	movs	r3, #16
 800610e:	77fb      	strb	r3, [r7, #31]
 8006110:	e144      	b.n	800639c <UART_SetConfig+0x348>
 8006112:	687b      	ldr	r3, [r7, #4]
 8006114:	681b      	ldr	r3, [r3, #0]
 8006116:	4a83      	ldr	r2, [pc, #524]	@ (8006324 <UART_SetConfig+0x2d0>)
 8006118:	4293      	cmp	r3, r2
 800611a:	d132      	bne.n	8006182 <UART_SetConfig+0x12e>
 800611c:	4b80      	ldr	r3, [pc, #512]	@ (8006320 <UART_SetConfig+0x2cc>)
 800611e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8006122:	f003 030c 	and.w	r3, r3, #12
 8006126:	2b0c      	cmp	r3, #12
 8006128:	d828      	bhi.n	800617c <UART_SetConfig+0x128>
 800612a:	a201      	add	r2, pc, #4	@ (adr r2, 8006130 <UART_SetConfig+0xdc>)
 800612c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006130:	08006165 	.word	0x08006165
 8006134:	0800617d 	.word	0x0800617d
 8006138:	0800617d 	.word	0x0800617d
 800613c:	0800617d 	.word	0x0800617d
 8006140:	08006171 	.word	0x08006171
 8006144:	0800617d 	.word	0x0800617d
 8006148:	0800617d 	.word	0x0800617d
 800614c:	0800617d 	.word	0x0800617d
 8006150:	0800616b 	.word	0x0800616b
 8006154:	0800617d 	.word	0x0800617d
 8006158:	0800617d 	.word	0x0800617d
 800615c:	0800617d 	.word	0x0800617d
 8006160:	08006177 	.word	0x08006177
 8006164:	2300      	movs	r3, #0
 8006166:	77fb      	strb	r3, [r7, #31]
 8006168:	e118      	b.n	800639c <UART_SetConfig+0x348>
 800616a:	2302      	movs	r3, #2
 800616c:	77fb      	strb	r3, [r7, #31]
 800616e:	e115      	b.n	800639c <UART_SetConfig+0x348>
 8006170:	2304      	movs	r3, #4
 8006172:	77fb      	strb	r3, [r7, #31]
 8006174:	e112      	b.n	800639c <UART_SetConfig+0x348>
 8006176:	2308      	movs	r3, #8
 8006178:	77fb      	strb	r3, [r7, #31]
 800617a:	e10f      	b.n	800639c <UART_SetConfig+0x348>
 800617c:	2310      	movs	r3, #16
 800617e:	77fb      	strb	r3, [r7, #31]
 8006180:	e10c      	b.n	800639c <UART_SetConfig+0x348>
 8006182:	687b      	ldr	r3, [r7, #4]
 8006184:	681b      	ldr	r3, [r3, #0]
 8006186:	4a68      	ldr	r2, [pc, #416]	@ (8006328 <UART_SetConfig+0x2d4>)
 8006188:	4293      	cmp	r3, r2
 800618a:	d120      	bne.n	80061ce <UART_SetConfig+0x17a>
 800618c:	4b64      	ldr	r3, [pc, #400]	@ (8006320 <UART_SetConfig+0x2cc>)
 800618e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8006192:	f003 0330 	and.w	r3, r3, #48	@ 0x30
 8006196:	2b30      	cmp	r3, #48	@ 0x30
 8006198:	d013      	beq.n	80061c2 <UART_SetConfig+0x16e>
 800619a:	2b30      	cmp	r3, #48	@ 0x30
 800619c:	d814      	bhi.n	80061c8 <UART_SetConfig+0x174>
 800619e:	2b20      	cmp	r3, #32
 80061a0:	d009      	beq.n	80061b6 <UART_SetConfig+0x162>
 80061a2:	2b20      	cmp	r3, #32
 80061a4:	d810      	bhi.n	80061c8 <UART_SetConfig+0x174>
 80061a6:	2b00      	cmp	r3, #0
 80061a8:	d002      	beq.n	80061b0 <UART_SetConfig+0x15c>
 80061aa:	2b10      	cmp	r3, #16
 80061ac:	d006      	beq.n	80061bc <UART_SetConfig+0x168>
 80061ae:	e00b      	b.n	80061c8 <UART_SetConfig+0x174>
 80061b0:	2300      	movs	r3, #0
 80061b2:	77fb      	strb	r3, [r7, #31]
 80061b4:	e0f2      	b.n	800639c <UART_SetConfig+0x348>
 80061b6:	2302      	movs	r3, #2
 80061b8:	77fb      	strb	r3, [r7, #31]
 80061ba:	e0ef      	b.n	800639c <UART_SetConfig+0x348>
 80061bc:	2304      	movs	r3, #4
 80061be:	77fb      	strb	r3, [r7, #31]
 80061c0:	e0ec      	b.n	800639c <UART_SetConfig+0x348>
 80061c2:	2308      	movs	r3, #8
 80061c4:	77fb      	strb	r3, [r7, #31]
 80061c6:	e0e9      	b.n	800639c <UART_SetConfig+0x348>
 80061c8:	2310      	movs	r3, #16
 80061ca:	77fb      	strb	r3, [r7, #31]
 80061cc:	e0e6      	b.n	800639c <UART_SetConfig+0x348>
 80061ce:	687b      	ldr	r3, [r7, #4]
 80061d0:	681b      	ldr	r3, [r3, #0]
 80061d2:	4a56      	ldr	r2, [pc, #344]	@ (800632c <UART_SetConfig+0x2d8>)
 80061d4:	4293      	cmp	r3, r2
 80061d6:	d120      	bne.n	800621a <UART_SetConfig+0x1c6>
 80061d8:	4b51      	ldr	r3, [pc, #324]	@ (8006320 <UART_SetConfig+0x2cc>)
 80061da:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80061de:	f003 03c0 	and.w	r3, r3, #192	@ 0xc0
 80061e2:	2bc0      	cmp	r3, #192	@ 0xc0
 80061e4:	d013      	beq.n	800620e <UART_SetConfig+0x1ba>
 80061e6:	2bc0      	cmp	r3, #192	@ 0xc0
 80061e8:	d814      	bhi.n	8006214 <UART_SetConfig+0x1c0>
 80061ea:	2b80      	cmp	r3, #128	@ 0x80
 80061ec:	d009      	beq.n	8006202 <UART_SetConfig+0x1ae>
 80061ee:	2b80      	cmp	r3, #128	@ 0x80
 80061f0:	d810      	bhi.n	8006214 <UART_SetConfig+0x1c0>
 80061f2:	2b00      	cmp	r3, #0
 80061f4:	d002      	beq.n	80061fc <UART_SetConfig+0x1a8>
 80061f6:	2b40      	cmp	r3, #64	@ 0x40
 80061f8:	d006      	beq.n	8006208 <UART_SetConfig+0x1b4>
 80061fa:	e00b      	b.n	8006214 <UART_SetConfig+0x1c0>
 80061fc:	2300      	movs	r3, #0
 80061fe:	77fb      	strb	r3, [r7, #31]
 8006200:	e0cc      	b.n	800639c <UART_SetConfig+0x348>
 8006202:	2302      	movs	r3, #2
 8006204:	77fb      	strb	r3, [r7, #31]
 8006206:	e0c9      	b.n	800639c <UART_SetConfig+0x348>
 8006208:	2304      	movs	r3, #4
 800620a:	77fb      	strb	r3, [r7, #31]
 800620c:	e0c6      	b.n	800639c <UART_SetConfig+0x348>
 800620e:	2308      	movs	r3, #8
 8006210:	77fb      	strb	r3, [r7, #31]
 8006212:	e0c3      	b.n	800639c <UART_SetConfig+0x348>
 8006214:	2310      	movs	r3, #16
 8006216:	77fb      	strb	r3, [r7, #31]
 8006218:	e0c0      	b.n	800639c <UART_SetConfig+0x348>
 800621a:	687b      	ldr	r3, [r7, #4]
 800621c:	681b      	ldr	r3, [r3, #0]
 800621e:	4a44      	ldr	r2, [pc, #272]	@ (8006330 <UART_SetConfig+0x2dc>)
 8006220:	4293      	cmp	r3, r2
 8006222:	d125      	bne.n	8006270 <UART_SetConfig+0x21c>
 8006224:	4b3e      	ldr	r3, [pc, #248]	@ (8006320 <UART_SetConfig+0x2cc>)
 8006226:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800622a:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800622e:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8006232:	d017      	beq.n	8006264 <UART_SetConfig+0x210>
 8006234:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8006238:	d817      	bhi.n	800626a <UART_SetConfig+0x216>
 800623a:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800623e:	d00b      	beq.n	8006258 <UART_SetConfig+0x204>
 8006240:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8006244:	d811      	bhi.n	800626a <UART_SetConfig+0x216>
 8006246:	2b00      	cmp	r3, #0
 8006248:	d003      	beq.n	8006252 <UART_SetConfig+0x1fe>
 800624a:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800624e:	d006      	beq.n	800625e <UART_SetConfig+0x20a>
 8006250:	e00b      	b.n	800626a <UART_SetConfig+0x216>
 8006252:	2300      	movs	r3, #0
 8006254:	77fb      	strb	r3, [r7, #31]
 8006256:	e0a1      	b.n	800639c <UART_SetConfig+0x348>
 8006258:	2302      	movs	r3, #2
 800625a:	77fb      	strb	r3, [r7, #31]
 800625c:	e09e      	b.n	800639c <UART_SetConfig+0x348>
 800625e:	2304      	movs	r3, #4
 8006260:	77fb      	strb	r3, [r7, #31]
 8006262:	e09b      	b.n	800639c <UART_SetConfig+0x348>
 8006264:	2308      	movs	r3, #8
 8006266:	77fb      	strb	r3, [r7, #31]
 8006268:	e098      	b.n	800639c <UART_SetConfig+0x348>
 800626a:	2310      	movs	r3, #16
 800626c:	77fb      	strb	r3, [r7, #31]
 800626e:	e095      	b.n	800639c <UART_SetConfig+0x348>
 8006270:	687b      	ldr	r3, [r7, #4]
 8006272:	681b      	ldr	r3, [r3, #0]
 8006274:	4a2f      	ldr	r2, [pc, #188]	@ (8006334 <UART_SetConfig+0x2e0>)
 8006276:	4293      	cmp	r3, r2
 8006278:	d125      	bne.n	80062c6 <UART_SetConfig+0x272>
 800627a:	4b29      	ldr	r3, [pc, #164]	@ (8006320 <UART_SetConfig+0x2cc>)
 800627c:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8006280:	f403 6340 	and.w	r3, r3, #3072	@ 0xc00
 8006284:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 8006288:	d017      	beq.n	80062ba <UART_SetConfig+0x266>
 800628a:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 800628e:	d817      	bhi.n	80062c0 <UART_SetConfig+0x26c>
 8006290:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8006294:	d00b      	beq.n	80062ae <UART_SetConfig+0x25a>
 8006296:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 800629a:	d811      	bhi.n	80062c0 <UART_SetConfig+0x26c>
 800629c:	2b00      	cmp	r3, #0
 800629e:	d003      	beq.n	80062a8 <UART_SetConfig+0x254>
 80062a0:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80062a4:	d006      	beq.n	80062b4 <UART_SetConfig+0x260>
 80062a6:	e00b      	b.n	80062c0 <UART_SetConfig+0x26c>
 80062a8:	2301      	movs	r3, #1
 80062aa:	77fb      	strb	r3, [r7, #31]
 80062ac:	e076      	b.n	800639c <UART_SetConfig+0x348>
 80062ae:	2302      	movs	r3, #2
 80062b0:	77fb      	strb	r3, [r7, #31]
 80062b2:	e073      	b.n	800639c <UART_SetConfig+0x348>
 80062b4:	2304      	movs	r3, #4
 80062b6:	77fb      	strb	r3, [r7, #31]
 80062b8:	e070      	b.n	800639c <UART_SetConfig+0x348>
 80062ba:	2308      	movs	r3, #8
 80062bc:	77fb      	strb	r3, [r7, #31]
 80062be:	e06d      	b.n	800639c <UART_SetConfig+0x348>
 80062c0:	2310      	movs	r3, #16
 80062c2:	77fb      	strb	r3, [r7, #31]
 80062c4:	e06a      	b.n	800639c <UART_SetConfig+0x348>
 80062c6:	687b      	ldr	r3, [r7, #4]
 80062c8:	681b      	ldr	r3, [r3, #0]
 80062ca:	4a1b      	ldr	r2, [pc, #108]	@ (8006338 <UART_SetConfig+0x2e4>)
 80062cc:	4293      	cmp	r3, r2
 80062ce:	d138      	bne.n	8006342 <UART_SetConfig+0x2ee>
 80062d0:	4b13      	ldr	r3, [pc, #76]	@ (8006320 <UART_SetConfig+0x2cc>)
 80062d2:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80062d6:	f403 5340 	and.w	r3, r3, #12288	@ 0x3000
 80062da:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 80062de:	d017      	beq.n	8006310 <UART_SetConfig+0x2bc>
 80062e0:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 80062e4:	d82a      	bhi.n	800633c <UART_SetConfig+0x2e8>
 80062e6:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80062ea:	d00b      	beq.n	8006304 <UART_SetConfig+0x2b0>
 80062ec:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80062f0:	d824      	bhi.n	800633c <UART_SetConfig+0x2e8>
 80062f2:	2b00      	cmp	r3, #0
 80062f4:	d003      	beq.n	80062fe <UART_SetConfig+0x2aa>
 80062f6:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80062fa:	d006      	beq.n	800630a <UART_SetConfig+0x2b6>
 80062fc:	e01e      	b.n	800633c <UART_SetConfig+0x2e8>
 80062fe:	2300      	movs	r3, #0
 8006300:	77fb      	strb	r3, [r7, #31]
 8006302:	e04b      	b.n	800639c <UART_SetConfig+0x348>
 8006304:	2302      	movs	r3, #2
 8006306:	77fb      	strb	r3, [r7, #31]
 8006308:	e048      	b.n	800639c <UART_SetConfig+0x348>
 800630a:	2304      	movs	r3, #4
 800630c:	77fb      	strb	r3, [r7, #31]
 800630e:	e045      	b.n	800639c <UART_SetConfig+0x348>
 8006310:	2308      	movs	r3, #8
 8006312:	77fb      	strb	r3, [r7, #31]
 8006314:	e042      	b.n	800639c <UART_SetConfig+0x348>
 8006316:	bf00      	nop
 8006318:	efff69f3 	.word	0xefff69f3
 800631c:	40011000 	.word	0x40011000
 8006320:	40023800 	.word	0x40023800
 8006324:	40004400 	.word	0x40004400
 8006328:	40004800 	.word	0x40004800
 800632c:	40004c00 	.word	0x40004c00
 8006330:	40005000 	.word	0x40005000
 8006334:	40011400 	.word	0x40011400
 8006338:	40007800 	.word	0x40007800
 800633c:	2310      	movs	r3, #16
 800633e:	77fb      	strb	r3, [r7, #31]
 8006340:	e02c      	b.n	800639c <UART_SetConfig+0x348>
 8006342:	687b      	ldr	r3, [r7, #4]
 8006344:	681b      	ldr	r3, [r3, #0]
 8006346:	4a72      	ldr	r2, [pc, #456]	@ (8006510 <UART_SetConfig+0x4bc>)
 8006348:	4293      	cmp	r3, r2
 800634a:	d125      	bne.n	8006398 <UART_SetConfig+0x344>
 800634c:	4b71      	ldr	r3, [pc, #452]	@ (8006514 <UART_SetConfig+0x4c0>)
 800634e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8006352:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 8006356:	f5b3 4f40 	cmp.w	r3, #49152	@ 0xc000
 800635a:	d017      	beq.n	800638c <UART_SetConfig+0x338>
 800635c:	f5b3 4f40 	cmp.w	r3, #49152	@ 0xc000
 8006360:	d817      	bhi.n	8006392 <UART_SetConfig+0x33e>
 8006362:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8006366:	d00b      	beq.n	8006380 <UART_SetConfig+0x32c>
 8006368:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 800636c:	d811      	bhi.n	8006392 <UART_SetConfig+0x33e>
 800636e:	2b00      	cmp	r3, #0
 8006370:	d003      	beq.n	800637a <UART_SetConfig+0x326>
 8006372:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8006376:	d006      	beq.n	8006386 <UART_SetConfig+0x332>
 8006378:	e00b      	b.n	8006392 <UART_SetConfig+0x33e>
 800637a:	2300      	movs	r3, #0
 800637c:	77fb      	strb	r3, [r7, #31]
 800637e:	e00d      	b.n	800639c <UART_SetConfig+0x348>
 8006380:	2302      	movs	r3, #2
 8006382:	77fb      	strb	r3, [r7, #31]
 8006384:	e00a      	b.n	800639c <UART_SetConfig+0x348>
 8006386:	2304      	movs	r3, #4
 8006388:	77fb      	strb	r3, [r7, #31]
 800638a:	e007      	b.n	800639c <UART_SetConfig+0x348>
 800638c:	2308      	movs	r3, #8
 800638e:	77fb      	strb	r3, [r7, #31]
 8006390:	e004      	b.n	800639c <UART_SetConfig+0x348>
 8006392:	2310      	movs	r3, #16
 8006394:	77fb      	strb	r3, [r7, #31]
 8006396:	e001      	b.n	800639c <UART_SetConfig+0x348>
 8006398:	2310      	movs	r3, #16
 800639a:	77fb      	strb	r3, [r7, #31]

  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800639c:	687b      	ldr	r3, [r7, #4]
 800639e:	69db      	ldr	r3, [r3, #28]
 80063a0:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 80063a4:	d15b      	bne.n	800645e <UART_SetConfig+0x40a>
  {
    switch (clocksource)
 80063a6:	7ffb      	ldrb	r3, [r7, #31]
 80063a8:	2b08      	cmp	r3, #8
 80063aa:	d828      	bhi.n	80063fe <UART_SetConfig+0x3aa>
 80063ac:	a201      	add	r2, pc, #4	@ (adr r2, 80063b4 <UART_SetConfig+0x360>)
 80063ae:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80063b2:	bf00      	nop
 80063b4:	080063d9 	.word	0x080063d9
 80063b8:	080063e1 	.word	0x080063e1
 80063bc:	080063e9 	.word	0x080063e9
 80063c0:	080063ff 	.word	0x080063ff
 80063c4:	080063ef 	.word	0x080063ef
 80063c8:	080063ff 	.word	0x080063ff
 80063cc:	080063ff 	.word	0x080063ff
 80063d0:	080063ff 	.word	0x080063ff
 80063d4:	080063f7 	.word	0x080063f7
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80063d8:	f7fe f8ca 	bl	8004570 <HAL_RCC_GetPCLK1Freq>
 80063dc:	61b8      	str	r0, [r7, #24]
        break;
 80063de:	e013      	b.n	8006408 <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 80063e0:	f7fe f8da 	bl	8004598 <HAL_RCC_GetPCLK2Freq>
 80063e4:	61b8      	str	r0, [r7, #24]
        break;
 80063e6:	e00f      	b.n	8006408 <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 80063e8:	4b4b      	ldr	r3, [pc, #300]	@ (8006518 <UART_SetConfig+0x4c4>)
 80063ea:	61bb      	str	r3, [r7, #24]
        break;
 80063ec:	e00c      	b.n	8006408 <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80063ee:	f7fd ffad 	bl	800434c <HAL_RCC_GetSysClockFreq>
 80063f2:	61b8      	str	r0, [r7, #24]
        break;
 80063f4:	e008      	b.n	8006408 <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80063f6:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 80063fa:	61bb      	str	r3, [r7, #24]
        break;
 80063fc:	e004      	b.n	8006408 <UART_SetConfig+0x3b4>
      default:
        pclk = 0U;
 80063fe:	2300      	movs	r3, #0
 8006400:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 8006402:	2301      	movs	r3, #1
 8006404:	77bb      	strb	r3, [r7, #30]
        break;
 8006406:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8006408:	69bb      	ldr	r3, [r7, #24]
 800640a:	2b00      	cmp	r3, #0
 800640c:	d074      	beq.n	80064f8 <UART_SetConfig+0x4a4>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 800640e:	69bb      	ldr	r3, [r7, #24]
 8006410:	005a      	lsls	r2, r3, #1
 8006412:	687b      	ldr	r3, [r7, #4]
 8006414:	685b      	ldr	r3, [r3, #4]
 8006416:	085b      	lsrs	r3, r3, #1
 8006418:	441a      	add	r2, r3
 800641a:	687b      	ldr	r3, [r7, #4]
 800641c:	685b      	ldr	r3, [r3, #4]
 800641e:	fbb2 f3f3 	udiv	r3, r2, r3
 8006422:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8006424:	693b      	ldr	r3, [r7, #16]
 8006426:	2b0f      	cmp	r3, #15
 8006428:	d916      	bls.n	8006458 <UART_SetConfig+0x404>
 800642a:	693b      	ldr	r3, [r7, #16]
 800642c:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8006430:	d212      	bcs.n	8006458 <UART_SetConfig+0x404>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8006432:	693b      	ldr	r3, [r7, #16]
 8006434:	b29b      	uxth	r3, r3
 8006436:	f023 030f 	bic.w	r3, r3, #15
 800643a:	81fb      	strh	r3, [r7, #14]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 800643c:	693b      	ldr	r3, [r7, #16]
 800643e:	085b      	lsrs	r3, r3, #1
 8006440:	b29b      	uxth	r3, r3
 8006442:	f003 0307 	and.w	r3, r3, #7
 8006446:	b29a      	uxth	r2, r3
 8006448:	89fb      	ldrh	r3, [r7, #14]
 800644a:	4313      	orrs	r3, r2
 800644c:	81fb      	strh	r3, [r7, #14]
        huart->Instance->BRR = brrtemp;
 800644e:	687b      	ldr	r3, [r7, #4]
 8006450:	681b      	ldr	r3, [r3, #0]
 8006452:	89fa      	ldrh	r2, [r7, #14]
 8006454:	60da      	str	r2, [r3, #12]
 8006456:	e04f      	b.n	80064f8 <UART_SetConfig+0x4a4>
      }
      else
      {
        ret = HAL_ERROR;
 8006458:	2301      	movs	r3, #1
 800645a:	77bb      	strb	r3, [r7, #30]
 800645c:	e04c      	b.n	80064f8 <UART_SetConfig+0x4a4>
      }
    }
  }
  else
  {
    switch (clocksource)
 800645e:	7ffb      	ldrb	r3, [r7, #31]
 8006460:	2b08      	cmp	r3, #8
 8006462:	d828      	bhi.n	80064b6 <UART_SetConfig+0x462>
 8006464:	a201      	add	r2, pc, #4	@ (adr r2, 800646c <UART_SetConfig+0x418>)
 8006466:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800646a:	bf00      	nop
 800646c:	08006491 	.word	0x08006491
 8006470:	08006499 	.word	0x08006499
 8006474:	080064a1 	.word	0x080064a1
 8006478:	080064b7 	.word	0x080064b7
 800647c:	080064a7 	.word	0x080064a7
 8006480:	080064b7 	.word	0x080064b7
 8006484:	080064b7 	.word	0x080064b7
 8006488:	080064b7 	.word	0x080064b7
 800648c:	080064af 	.word	0x080064af
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8006490:	f7fe f86e 	bl	8004570 <HAL_RCC_GetPCLK1Freq>
 8006494:	61b8      	str	r0, [r7, #24]
        break;
 8006496:	e013      	b.n	80064c0 <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8006498:	f7fe f87e 	bl	8004598 <HAL_RCC_GetPCLK2Freq>
 800649c:	61b8      	str	r0, [r7, #24]
        break;
 800649e:	e00f      	b.n	80064c0 <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 80064a0:	4b1d      	ldr	r3, [pc, #116]	@ (8006518 <UART_SetConfig+0x4c4>)
 80064a2:	61bb      	str	r3, [r7, #24]
        break;
 80064a4:	e00c      	b.n	80064c0 <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80064a6:	f7fd ff51 	bl	800434c <HAL_RCC_GetSysClockFreq>
 80064aa:	61b8      	str	r0, [r7, #24]
        break;
 80064ac:	e008      	b.n	80064c0 <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80064ae:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 80064b2:	61bb      	str	r3, [r7, #24]
        break;
 80064b4:	e004      	b.n	80064c0 <UART_SetConfig+0x46c>
      default:
        pclk = 0U;
 80064b6:	2300      	movs	r3, #0
 80064b8:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 80064ba:	2301      	movs	r3, #1
 80064bc:	77bb      	strb	r3, [r7, #30]
        break;
 80064be:	bf00      	nop
    }

    if (pclk != 0U)
 80064c0:	69bb      	ldr	r3, [r7, #24]
 80064c2:	2b00      	cmp	r3, #0
 80064c4:	d018      	beq.n	80064f8 <UART_SetConfig+0x4a4>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 80064c6:	687b      	ldr	r3, [r7, #4]
 80064c8:	685b      	ldr	r3, [r3, #4]
 80064ca:	085a      	lsrs	r2, r3, #1
 80064cc:	69bb      	ldr	r3, [r7, #24]
 80064ce:	441a      	add	r2, r3
 80064d0:	687b      	ldr	r3, [r7, #4]
 80064d2:	685b      	ldr	r3, [r3, #4]
 80064d4:	fbb2 f3f3 	udiv	r3, r2, r3
 80064d8:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80064da:	693b      	ldr	r3, [r7, #16]
 80064dc:	2b0f      	cmp	r3, #15
 80064de:	d909      	bls.n	80064f4 <UART_SetConfig+0x4a0>
 80064e0:	693b      	ldr	r3, [r7, #16]
 80064e2:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80064e6:	d205      	bcs.n	80064f4 <UART_SetConfig+0x4a0>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 80064e8:	693b      	ldr	r3, [r7, #16]
 80064ea:	b29a      	uxth	r2, r3
 80064ec:	687b      	ldr	r3, [r7, #4]
 80064ee:	681b      	ldr	r3, [r3, #0]
 80064f0:	60da      	str	r2, [r3, #12]
 80064f2:	e001      	b.n	80064f8 <UART_SetConfig+0x4a4>
      }
      else
      {
        ret = HAL_ERROR;
 80064f4:	2301      	movs	r3, #1
 80064f6:	77bb      	strb	r3, [r7, #30]
    }
  }


  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 80064f8:	687b      	ldr	r3, [r7, #4]
 80064fa:	2200      	movs	r2, #0
 80064fc:	669a      	str	r2, [r3, #104]	@ 0x68
  huart->TxISR = NULL;
 80064fe:	687b      	ldr	r3, [r7, #4]
 8006500:	2200      	movs	r2, #0
 8006502:	66da      	str	r2, [r3, #108]	@ 0x6c

  return ret;
 8006504:	7fbb      	ldrb	r3, [r7, #30]
}
 8006506:	4618      	mov	r0, r3
 8006508:	3720      	adds	r7, #32
 800650a:	46bd      	mov	sp, r7
 800650c:	bd80      	pop	{r7, pc}
 800650e:	bf00      	nop
 8006510:	40007c00 	.word	0x40007c00
 8006514:	40023800 	.word	0x40023800
 8006518:	00f42400 	.word	0x00f42400

0800651c <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 800651c:	b480      	push	{r7}
 800651e:	b083      	sub	sp, #12
 8006520:	af00      	add	r7, sp, #0
 8006522:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8006524:	687b      	ldr	r3, [r7, #4]
 8006526:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006528:	f003 0308 	and.w	r3, r3, #8
 800652c:	2b00      	cmp	r3, #0
 800652e:	d00a      	beq.n	8006546 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8006530:	687b      	ldr	r3, [r7, #4]
 8006532:	681b      	ldr	r3, [r3, #0]
 8006534:	685b      	ldr	r3, [r3, #4]
 8006536:	f423 4100 	bic.w	r1, r3, #32768	@ 0x8000
 800653a:	687b      	ldr	r3, [r7, #4]
 800653c:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800653e:	687b      	ldr	r3, [r7, #4]
 8006540:	681b      	ldr	r3, [r3, #0]
 8006542:	430a      	orrs	r2, r1
 8006544:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8006546:	687b      	ldr	r3, [r7, #4]
 8006548:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800654a:	f003 0301 	and.w	r3, r3, #1
 800654e:	2b00      	cmp	r3, #0
 8006550:	d00a      	beq.n	8006568 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8006552:	687b      	ldr	r3, [r7, #4]
 8006554:	681b      	ldr	r3, [r3, #0]
 8006556:	685b      	ldr	r3, [r3, #4]
 8006558:	f423 3100 	bic.w	r1, r3, #131072	@ 0x20000
 800655c:	687b      	ldr	r3, [r7, #4]
 800655e:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8006560:	687b      	ldr	r3, [r7, #4]
 8006562:	681b      	ldr	r3, [r3, #0]
 8006564:	430a      	orrs	r2, r1
 8006566:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8006568:	687b      	ldr	r3, [r7, #4]
 800656a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800656c:	f003 0302 	and.w	r3, r3, #2
 8006570:	2b00      	cmp	r3, #0
 8006572:	d00a      	beq.n	800658a <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8006574:	687b      	ldr	r3, [r7, #4]
 8006576:	681b      	ldr	r3, [r3, #0]
 8006578:	685b      	ldr	r3, [r3, #4]
 800657a:	f423 3180 	bic.w	r1, r3, #65536	@ 0x10000
 800657e:	687b      	ldr	r3, [r7, #4]
 8006580:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8006582:	687b      	ldr	r3, [r7, #4]
 8006584:	681b      	ldr	r3, [r3, #0]
 8006586:	430a      	orrs	r2, r1
 8006588:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 800658a:	687b      	ldr	r3, [r7, #4]
 800658c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800658e:	f003 0304 	and.w	r3, r3, #4
 8006592:	2b00      	cmp	r3, #0
 8006594:	d00a      	beq.n	80065ac <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8006596:	687b      	ldr	r3, [r7, #4]
 8006598:	681b      	ldr	r3, [r3, #0]
 800659a:	685b      	ldr	r3, [r3, #4]
 800659c:	f423 2180 	bic.w	r1, r3, #262144	@ 0x40000
 80065a0:	687b      	ldr	r3, [r7, #4]
 80065a2:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 80065a4:	687b      	ldr	r3, [r7, #4]
 80065a6:	681b      	ldr	r3, [r3, #0]
 80065a8:	430a      	orrs	r2, r1
 80065aa:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 80065ac:	687b      	ldr	r3, [r7, #4]
 80065ae:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80065b0:	f003 0310 	and.w	r3, r3, #16
 80065b4:	2b00      	cmp	r3, #0
 80065b6:	d00a      	beq.n	80065ce <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 80065b8:	687b      	ldr	r3, [r7, #4]
 80065ba:	681b      	ldr	r3, [r3, #0]
 80065bc:	689b      	ldr	r3, [r3, #8]
 80065be:	f423 5180 	bic.w	r1, r3, #4096	@ 0x1000
 80065c2:	687b      	ldr	r3, [r7, #4]
 80065c4:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 80065c6:	687b      	ldr	r3, [r7, #4]
 80065c8:	681b      	ldr	r3, [r3, #0]
 80065ca:	430a      	orrs	r2, r1
 80065cc:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 80065ce:	687b      	ldr	r3, [r7, #4]
 80065d0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80065d2:	f003 0320 	and.w	r3, r3, #32
 80065d6:	2b00      	cmp	r3, #0
 80065d8:	d00a      	beq.n	80065f0 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 80065da:	687b      	ldr	r3, [r7, #4]
 80065dc:	681b      	ldr	r3, [r3, #0]
 80065de:	689b      	ldr	r3, [r3, #8]
 80065e0:	f423 5100 	bic.w	r1, r3, #8192	@ 0x2000
 80065e4:	687b      	ldr	r3, [r7, #4]
 80065e6:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 80065e8:	687b      	ldr	r3, [r7, #4]
 80065ea:	681b      	ldr	r3, [r3, #0]
 80065ec:	430a      	orrs	r2, r1
 80065ee:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 80065f0:	687b      	ldr	r3, [r7, #4]
 80065f2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80065f4:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80065f8:	2b00      	cmp	r3, #0
 80065fa:	d01a      	beq.n	8006632 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 80065fc:	687b      	ldr	r3, [r7, #4]
 80065fe:	681b      	ldr	r3, [r3, #0]
 8006600:	685b      	ldr	r3, [r3, #4]
 8006602:	f423 1180 	bic.w	r1, r3, #1048576	@ 0x100000
 8006606:	687b      	ldr	r3, [r7, #4]
 8006608:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 800660a:	687b      	ldr	r3, [r7, #4]
 800660c:	681b      	ldr	r3, [r3, #0]
 800660e:	430a      	orrs	r2, r1
 8006610:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8006612:	687b      	ldr	r3, [r7, #4]
 8006614:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006616:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 800661a:	d10a      	bne.n	8006632 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 800661c:	687b      	ldr	r3, [r7, #4]
 800661e:	681b      	ldr	r3, [r3, #0]
 8006620:	685b      	ldr	r3, [r3, #4]
 8006622:	f423 01c0 	bic.w	r1, r3, #6291456	@ 0x600000
 8006626:	687b      	ldr	r3, [r7, #4]
 8006628:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 800662a:	687b      	ldr	r3, [r7, #4]
 800662c:	681b      	ldr	r3, [r3, #0]
 800662e:	430a      	orrs	r2, r1
 8006630:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8006632:	687b      	ldr	r3, [r7, #4]
 8006634:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006636:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800663a:	2b00      	cmp	r3, #0
 800663c:	d00a      	beq.n	8006654 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 800663e:	687b      	ldr	r3, [r7, #4]
 8006640:	681b      	ldr	r3, [r3, #0]
 8006642:	685b      	ldr	r3, [r3, #4]
 8006644:	f423 2100 	bic.w	r1, r3, #524288	@ 0x80000
 8006648:	687b      	ldr	r3, [r7, #4]
 800664a:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 800664c:	687b      	ldr	r3, [r7, #4]
 800664e:	681b      	ldr	r3, [r3, #0]
 8006650:	430a      	orrs	r2, r1
 8006652:	605a      	str	r2, [r3, #4]
  }
}
 8006654:	bf00      	nop
 8006656:	370c      	adds	r7, #12
 8006658:	46bd      	mov	sp, r7
 800665a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800665e:	4770      	bx	lr

08006660 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8006660:	b580      	push	{r7, lr}
 8006662:	b098      	sub	sp, #96	@ 0x60
 8006664:	af02      	add	r7, sp, #8
 8006666:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8006668:	687b      	ldr	r3, [r7, #4]
 800666a:	2200      	movs	r2, #0
 800666c:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8006670:	f7fb fc64 	bl	8001f3c <HAL_GetTick>
 8006674:	6578      	str	r0, [r7, #84]	@ 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8006676:	687b      	ldr	r3, [r7, #4]
 8006678:	681b      	ldr	r3, [r3, #0]
 800667a:	681b      	ldr	r3, [r3, #0]
 800667c:	f003 0308 	and.w	r3, r3, #8
 8006680:	2b08      	cmp	r3, #8
 8006682:	d12e      	bne.n	80066e2 <UART_CheckIdleState+0x82>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8006684:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 8006688:	9300      	str	r3, [sp, #0]
 800668a:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800668c:	2200      	movs	r2, #0
 800668e:	f44f 1100 	mov.w	r1, #2097152	@ 0x200000
 8006692:	6878      	ldr	r0, [r7, #4]
 8006694:	f000 f88c 	bl	80067b0 <UART_WaitOnFlagUntilTimeout>
 8006698:	4603      	mov	r3, r0
 800669a:	2b00      	cmp	r3, #0
 800669c:	d021      	beq.n	80066e2 <UART_CheckIdleState+0x82>
    {
      /* Disable TXE interrupt for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE));
 800669e:	687b      	ldr	r3, [r7, #4]
 80066a0:	681b      	ldr	r3, [r3, #0]
 80066a2:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80066a4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80066a6:	e853 3f00 	ldrex	r3, [r3]
 80066aa:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 80066ac:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80066ae:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 80066b2:	653b      	str	r3, [r7, #80]	@ 0x50
 80066b4:	687b      	ldr	r3, [r7, #4]
 80066b6:	681b      	ldr	r3, [r3, #0]
 80066b8:	461a      	mov	r2, r3
 80066ba:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 80066bc:	647b      	str	r3, [r7, #68]	@ 0x44
 80066be:	643a      	str	r2, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80066c0:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 80066c2:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 80066c4:	e841 2300 	strex	r3, r2, [r1]
 80066c8:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 80066ca:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80066cc:	2b00      	cmp	r3, #0
 80066ce:	d1e6      	bne.n	800669e <UART_CheckIdleState+0x3e>

      huart->gState = HAL_UART_STATE_READY;
 80066d0:	687b      	ldr	r3, [r7, #4]
 80066d2:	2220      	movs	r2, #32
 80066d4:	67da      	str	r2, [r3, #124]	@ 0x7c

      __HAL_UNLOCK(huart);
 80066d6:	687b      	ldr	r3, [r7, #4]
 80066d8:	2200      	movs	r2, #0
 80066da:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

      /* Timeout occurred */
      return HAL_TIMEOUT;
 80066de:	2303      	movs	r3, #3
 80066e0:	e062      	b.n	80067a8 <UART_CheckIdleState+0x148>
    }
  }
#if defined(USART_ISR_REACK)

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 80066e2:	687b      	ldr	r3, [r7, #4]
 80066e4:	681b      	ldr	r3, [r3, #0]
 80066e6:	681b      	ldr	r3, [r3, #0]
 80066e8:	f003 0304 	and.w	r3, r3, #4
 80066ec:	2b04      	cmp	r3, #4
 80066ee:	d149      	bne.n	8006784 <UART_CheckIdleState+0x124>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80066f0:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 80066f4:	9300      	str	r3, [sp, #0]
 80066f6:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80066f8:	2200      	movs	r2, #0
 80066fa:	f44f 0180 	mov.w	r1, #4194304	@ 0x400000
 80066fe:	6878      	ldr	r0, [r7, #4]
 8006700:	f000 f856 	bl	80067b0 <UART_WaitOnFlagUntilTimeout>
 8006704:	4603      	mov	r3, r0
 8006706:	2b00      	cmp	r3, #0
 8006708:	d03c      	beq.n	8006784 <UART_CheckIdleState+0x124>
    {
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800670a:	687b      	ldr	r3, [r7, #4]
 800670c:	681b      	ldr	r3, [r3, #0]
 800670e:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006710:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006712:	e853 3f00 	ldrex	r3, [r3]
 8006716:	623b      	str	r3, [r7, #32]
   return(result);
 8006718:	6a3b      	ldr	r3, [r7, #32]
 800671a:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 800671e:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8006720:	687b      	ldr	r3, [r7, #4]
 8006722:	681b      	ldr	r3, [r3, #0]
 8006724:	461a      	mov	r2, r3
 8006726:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8006728:	633b      	str	r3, [r7, #48]	@ 0x30
 800672a:	62fa      	str	r2, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800672c:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 800672e:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8006730:	e841 2300 	strex	r3, r2, [r1]
 8006734:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 8006736:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006738:	2b00      	cmp	r3, #0
 800673a:	d1e6      	bne.n	800670a <UART_CheckIdleState+0xaa>
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800673c:	687b      	ldr	r3, [r7, #4]
 800673e:	681b      	ldr	r3, [r3, #0]
 8006740:	3308      	adds	r3, #8
 8006742:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006744:	693b      	ldr	r3, [r7, #16]
 8006746:	e853 3f00 	ldrex	r3, [r3]
 800674a:	60fb      	str	r3, [r7, #12]
   return(result);
 800674c:	68fb      	ldr	r3, [r7, #12]
 800674e:	f023 0301 	bic.w	r3, r3, #1
 8006752:	64bb      	str	r3, [r7, #72]	@ 0x48
 8006754:	687b      	ldr	r3, [r7, #4]
 8006756:	681b      	ldr	r3, [r3, #0]
 8006758:	3308      	adds	r3, #8
 800675a:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 800675c:	61fa      	str	r2, [r7, #28]
 800675e:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006760:	69b9      	ldr	r1, [r7, #24]
 8006762:	69fa      	ldr	r2, [r7, #28]
 8006764:	e841 2300 	strex	r3, r2, [r1]
 8006768:	617b      	str	r3, [r7, #20]
   return(result);
 800676a:	697b      	ldr	r3, [r7, #20]
 800676c:	2b00      	cmp	r3, #0
 800676e:	d1e5      	bne.n	800673c <UART_CheckIdleState+0xdc>

      huart->RxState = HAL_UART_STATE_READY;
 8006770:	687b      	ldr	r3, [r7, #4]
 8006772:	2220      	movs	r2, #32
 8006774:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80

      __HAL_UNLOCK(huart);
 8006778:	687b      	ldr	r3, [r7, #4]
 800677a:	2200      	movs	r2, #0
 800677c:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8006780:	2303      	movs	r3, #3
 8006782:	e011      	b.n	80067a8 <UART_CheckIdleState+0x148>
    }
  }
#endif /* USART_ISR_REACK */

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8006784:	687b      	ldr	r3, [r7, #4]
 8006786:	2220      	movs	r2, #32
 8006788:	67da      	str	r2, [r3, #124]	@ 0x7c
  huart->RxState = HAL_UART_STATE_READY;
 800678a:	687b      	ldr	r3, [r7, #4]
 800678c:	2220      	movs	r2, #32
 800678e:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006792:	687b      	ldr	r3, [r7, #4]
 8006794:	2200      	movs	r2, #0
 8006796:	661a      	str	r2, [r3, #96]	@ 0x60
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8006798:	687b      	ldr	r3, [r7, #4]
 800679a:	2200      	movs	r2, #0
 800679c:	665a      	str	r2, [r3, #100]	@ 0x64

  __HAL_UNLOCK(huart);
 800679e:	687b      	ldr	r3, [r7, #4]
 80067a0:	2200      	movs	r2, #0
 80067a2:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

  return HAL_OK;
 80067a6:	2300      	movs	r3, #0
}
 80067a8:	4618      	mov	r0, r3
 80067aa:	3758      	adds	r7, #88	@ 0x58
 80067ac:	46bd      	mov	sp, r7
 80067ae:	bd80      	pop	{r7, pc}

080067b0 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 80067b0:	b580      	push	{r7, lr}
 80067b2:	b084      	sub	sp, #16
 80067b4:	af00      	add	r7, sp, #0
 80067b6:	60f8      	str	r0, [r7, #12]
 80067b8:	60b9      	str	r1, [r7, #8]
 80067ba:	603b      	str	r3, [r7, #0]
 80067bc:	4613      	mov	r3, r2
 80067be:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80067c0:	e04f      	b.n	8006862 <UART_WaitOnFlagUntilTimeout+0xb2>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80067c2:	69bb      	ldr	r3, [r7, #24]
 80067c4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80067c8:	d04b      	beq.n	8006862 <UART_WaitOnFlagUntilTimeout+0xb2>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80067ca:	f7fb fbb7 	bl	8001f3c <HAL_GetTick>
 80067ce:	4602      	mov	r2, r0
 80067d0:	683b      	ldr	r3, [r7, #0]
 80067d2:	1ad3      	subs	r3, r2, r3
 80067d4:	69ba      	ldr	r2, [r7, #24]
 80067d6:	429a      	cmp	r2, r3
 80067d8:	d302      	bcc.n	80067e0 <UART_WaitOnFlagUntilTimeout+0x30>
 80067da:	69bb      	ldr	r3, [r7, #24]
 80067dc:	2b00      	cmp	r3, #0
 80067de:	d101      	bne.n	80067e4 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 80067e0:	2303      	movs	r3, #3
 80067e2:	e04e      	b.n	8006882 <UART_WaitOnFlagUntilTimeout+0xd2>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 80067e4:	68fb      	ldr	r3, [r7, #12]
 80067e6:	681b      	ldr	r3, [r3, #0]
 80067e8:	681b      	ldr	r3, [r3, #0]
 80067ea:	f003 0304 	and.w	r3, r3, #4
 80067ee:	2b00      	cmp	r3, #0
 80067f0:	d037      	beq.n	8006862 <UART_WaitOnFlagUntilTimeout+0xb2>
 80067f2:	68bb      	ldr	r3, [r7, #8]
 80067f4:	2b80      	cmp	r3, #128	@ 0x80
 80067f6:	d034      	beq.n	8006862 <UART_WaitOnFlagUntilTimeout+0xb2>
 80067f8:	68bb      	ldr	r3, [r7, #8]
 80067fa:	2b40      	cmp	r3, #64	@ 0x40
 80067fc:	d031      	beq.n	8006862 <UART_WaitOnFlagUntilTimeout+0xb2>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 80067fe:	68fb      	ldr	r3, [r7, #12]
 8006800:	681b      	ldr	r3, [r3, #0]
 8006802:	69db      	ldr	r3, [r3, #28]
 8006804:	f003 0308 	and.w	r3, r3, #8
 8006808:	2b08      	cmp	r3, #8
 800680a:	d110      	bne.n	800682e <UART_WaitOnFlagUntilTimeout+0x7e>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 800680c:	68fb      	ldr	r3, [r7, #12]
 800680e:	681b      	ldr	r3, [r3, #0]
 8006810:	2208      	movs	r2, #8
 8006812:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8006814:	68f8      	ldr	r0, [r7, #12]
 8006816:	f000 f8ff 	bl	8006a18 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 800681a:	68fb      	ldr	r3, [r7, #12]
 800681c:	2208      	movs	r2, #8
 800681e:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8006822:	68fb      	ldr	r3, [r7, #12]
 8006824:	2200      	movs	r2, #0
 8006826:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

          return HAL_ERROR;
 800682a:	2301      	movs	r3, #1
 800682c:	e029      	b.n	8006882 <UART_WaitOnFlagUntilTimeout+0xd2>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 800682e:	68fb      	ldr	r3, [r7, #12]
 8006830:	681b      	ldr	r3, [r3, #0]
 8006832:	69db      	ldr	r3, [r3, #28]
 8006834:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8006838:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 800683c:	d111      	bne.n	8006862 <UART_WaitOnFlagUntilTimeout+0xb2>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 800683e:	68fb      	ldr	r3, [r7, #12]
 8006840:	681b      	ldr	r3, [r3, #0]
 8006842:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 8006846:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8006848:	68f8      	ldr	r0, [r7, #12]
 800684a:	f000 f8e5 	bl	8006a18 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 800684e:	68fb      	ldr	r3, [r7, #12]
 8006850:	2220      	movs	r2, #32
 8006852:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8006856:	68fb      	ldr	r3, [r7, #12]
 8006858:	2200      	movs	r2, #0
 800685a:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

          return HAL_TIMEOUT;
 800685e:	2303      	movs	r3, #3
 8006860:	e00f      	b.n	8006882 <UART_WaitOnFlagUntilTimeout+0xd2>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8006862:	68fb      	ldr	r3, [r7, #12]
 8006864:	681b      	ldr	r3, [r3, #0]
 8006866:	69da      	ldr	r2, [r3, #28]
 8006868:	68bb      	ldr	r3, [r7, #8]
 800686a:	4013      	ands	r3, r2
 800686c:	68ba      	ldr	r2, [r7, #8]
 800686e:	429a      	cmp	r2, r3
 8006870:	bf0c      	ite	eq
 8006872:	2301      	moveq	r3, #1
 8006874:	2300      	movne	r3, #0
 8006876:	b2db      	uxtb	r3, r3
 8006878:	461a      	mov	r2, r3
 800687a:	79fb      	ldrb	r3, [r7, #7]
 800687c:	429a      	cmp	r2, r3
 800687e:	d0a0      	beq.n	80067c2 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8006880:	2300      	movs	r3, #0
}
 8006882:	4618      	mov	r0, r3
 8006884:	3710      	adds	r7, #16
 8006886:	46bd      	mov	sp, r7
 8006888:	bd80      	pop	{r7, pc}
	...

0800688c <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 800688c:	b480      	push	{r7}
 800688e:	b097      	sub	sp, #92	@ 0x5c
 8006890:	af00      	add	r7, sp, #0
 8006892:	60f8      	str	r0, [r7, #12]
 8006894:	60b9      	str	r1, [r7, #8]
 8006896:	4613      	mov	r3, r2
 8006898:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr  = pData;
 800689a:	68fb      	ldr	r3, [r7, #12]
 800689c:	68ba      	ldr	r2, [r7, #8]
 800689e:	655a      	str	r2, [r3, #84]	@ 0x54
  huart->RxXferSize  = Size;
 80068a0:	68fb      	ldr	r3, [r7, #12]
 80068a2:	88fa      	ldrh	r2, [r7, #6]
 80068a4:	f8a3 2058 	strh.w	r2, [r3, #88]	@ 0x58
  huart->RxXferCount = Size;
 80068a8:	68fb      	ldr	r3, [r7, #12]
 80068aa:	88fa      	ldrh	r2, [r7, #6]
 80068ac:	f8a3 205a 	strh.w	r2, [r3, #90]	@ 0x5a
  huart->RxISR       = NULL;
 80068b0:	68fb      	ldr	r3, [r7, #12]
 80068b2:	2200      	movs	r2, #0
 80068b4:	669a      	str	r2, [r3, #104]	@ 0x68

  /* Computation of UART mask to apply to RDR register */
  UART_MASK_COMPUTATION(huart);
 80068b6:	68fb      	ldr	r3, [r7, #12]
 80068b8:	689b      	ldr	r3, [r3, #8]
 80068ba:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80068be:	d10e      	bne.n	80068de <UART_Start_Receive_IT+0x52>
 80068c0:	68fb      	ldr	r3, [r7, #12]
 80068c2:	691b      	ldr	r3, [r3, #16]
 80068c4:	2b00      	cmp	r3, #0
 80068c6:	d105      	bne.n	80068d4 <UART_Start_Receive_IT+0x48>
 80068c8:	68fb      	ldr	r3, [r7, #12]
 80068ca:	f240 12ff 	movw	r2, #511	@ 0x1ff
 80068ce:	f8a3 205c 	strh.w	r2, [r3, #92]	@ 0x5c
 80068d2:	e02d      	b.n	8006930 <UART_Start_Receive_IT+0xa4>
 80068d4:	68fb      	ldr	r3, [r7, #12]
 80068d6:	22ff      	movs	r2, #255	@ 0xff
 80068d8:	f8a3 205c 	strh.w	r2, [r3, #92]	@ 0x5c
 80068dc:	e028      	b.n	8006930 <UART_Start_Receive_IT+0xa4>
 80068de:	68fb      	ldr	r3, [r7, #12]
 80068e0:	689b      	ldr	r3, [r3, #8]
 80068e2:	2b00      	cmp	r3, #0
 80068e4:	d10d      	bne.n	8006902 <UART_Start_Receive_IT+0x76>
 80068e6:	68fb      	ldr	r3, [r7, #12]
 80068e8:	691b      	ldr	r3, [r3, #16]
 80068ea:	2b00      	cmp	r3, #0
 80068ec:	d104      	bne.n	80068f8 <UART_Start_Receive_IT+0x6c>
 80068ee:	68fb      	ldr	r3, [r7, #12]
 80068f0:	22ff      	movs	r2, #255	@ 0xff
 80068f2:	f8a3 205c 	strh.w	r2, [r3, #92]	@ 0x5c
 80068f6:	e01b      	b.n	8006930 <UART_Start_Receive_IT+0xa4>
 80068f8:	68fb      	ldr	r3, [r7, #12]
 80068fa:	227f      	movs	r2, #127	@ 0x7f
 80068fc:	f8a3 205c 	strh.w	r2, [r3, #92]	@ 0x5c
 8006900:	e016      	b.n	8006930 <UART_Start_Receive_IT+0xa4>
 8006902:	68fb      	ldr	r3, [r7, #12]
 8006904:	689b      	ldr	r3, [r3, #8]
 8006906:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 800690a:	d10d      	bne.n	8006928 <UART_Start_Receive_IT+0x9c>
 800690c:	68fb      	ldr	r3, [r7, #12]
 800690e:	691b      	ldr	r3, [r3, #16]
 8006910:	2b00      	cmp	r3, #0
 8006912:	d104      	bne.n	800691e <UART_Start_Receive_IT+0x92>
 8006914:	68fb      	ldr	r3, [r7, #12]
 8006916:	227f      	movs	r2, #127	@ 0x7f
 8006918:	f8a3 205c 	strh.w	r2, [r3, #92]	@ 0x5c
 800691c:	e008      	b.n	8006930 <UART_Start_Receive_IT+0xa4>
 800691e:	68fb      	ldr	r3, [r7, #12]
 8006920:	223f      	movs	r2, #63	@ 0x3f
 8006922:	f8a3 205c 	strh.w	r2, [r3, #92]	@ 0x5c
 8006926:	e003      	b.n	8006930 <UART_Start_Receive_IT+0xa4>
 8006928:	68fb      	ldr	r3, [r7, #12]
 800692a:	2200      	movs	r2, #0
 800692c:	f8a3 205c 	strh.w	r2, [r3, #92]	@ 0x5c

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8006930:	68fb      	ldr	r3, [r7, #12]
 8006932:	2200      	movs	r2, #0
 8006934:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 8006938:	68fb      	ldr	r3, [r7, #12]
 800693a:	2222      	movs	r2, #34	@ 0x22
 800693c:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006940:	68fb      	ldr	r3, [r7, #12]
 8006942:	681b      	ldr	r3, [r3, #0]
 8006944:	3308      	adds	r3, #8
 8006946:	63fb      	str	r3, [r7, #60]	@ 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006948:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800694a:	e853 3f00 	ldrex	r3, [r3]
 800694e:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 8006950:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006952:	f043 0301 	orr.w	r3, r3, #1
 8006956:	657b      	str	r3, [r7, #84]	@ 0x54
 8006958:	68fb      	ldr	r3, [r7, #12]
 800695a:	681b      	ldr	r3, [r3, #0]
 800695c:	3308      	adds	r3, #8
 800695e:	6d7a      	ldr	r2, [r7, #84]	@ 0x54
 8006960:	64ba      	str	r2, [r7, #72]	@ 0x48
 8006962:	647b      	str	r3, [r7, #68]	@ 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006964:	6c79      	ldr	r1, [r7, #68]	@ 0x44
 8006966:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8006968:	e841 2300 	strex	r3, r2, [r1]
 800696c:	643b      	str	r3, [r7, #64]	@ 0x40
   return(result);
 800696e:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8006970:	2b00      	cmp	r3, #0
 8006972:	d1e5      	bne.n	8006940 <UART_Start_Receive_IT+0xb4>

  /* Set the Rx ISR function pointer according to the data word length */
  if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8006974:	68fb      	ldr	r3, [r7, #12]
 8006976:	689b      	ldr	r3, [r3, #8]
 8006978:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800697c:	d107      	bne.n	800698e <UART_Start_Receive_IT+0x102>
 800697e:	68fb      	ldr	r3, [r7, #12]
 8006980:	691b      	ldr	r3, [r3, #16]
 8006982:	2b00      	cmp	r3, #0
 8006984:	d103      	bne.n	800698e <UART_Start_Receive_IT+0x102>
  {
    huart->RxISR = UART_RxISR_16BIT;
 8006986:	68fb      	ldr	r3, [r7, #12]
 8006988:	4a21      	ldr	r2, [pc, #132]	@ (8006a10 <UART_Start_Receive_IT+0x184>)
 800698a:	669a      	str	r2, [r3, #104]	@ 0x68
 800698c:	e002      	b.n	8006994 <UART_Start_Receive_IT+0x108>
  }
  else
  {
    huart->RxISR = UART_RxISR_8BIT;
 800698e:	68fb      	ldr	r3, [r7, #12]
 8006990:	4a20      	ldr	r2, [pc, #128]	@ (8006a14 <UART_Start_Receive_IT+0x188>)
 8006992:	669a      	str	r2, [r3, #104]	@ 0x68
  }

  /* Enable the UART Parity Error interrupt and Data Register Not Empty interrupt */
  if (huart->Init.Parity != UART_PARITY_NONE)
 8006994:	68fb      	ldr	r3, [r7, #12]
 8006996:	691b      	ldr	r3, [r3, #16]
 8006998:	2b00      	cmp	r3, #0
 800699a:	d019      	beq.n	80069d0 <UART_Start_Receive_IT+0x144>
  {
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE | USART_CR1_RXNEIE);
 800699c:	68fb      	ldr	r3, [r7, #12]
 800699e:	681b      	ldr	r3, [r3, #0]
 80069a0:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80069a2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80069a4:	e853 3f00 	ldrex	r3, [r3]
 80069a8:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 80069aa:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80069ac:	f443 7390 	orr.w	r3, r3, #288	@ 0x120
 80069b0:	64fb      	str	r3, [r7, #76]	@ 0x4c
 80069b2:	68fb      	ldr	r3, [r7, #12]
 80069b4:	681b      	ldr	r3, [r3, #0]
 80069b6:	461a      	mov	r2, r3
 80069b8:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80069ba:	637b      	str	r3, [r7, #52]	@ 0x34
 80069bc:	633a      	str	r2, [r7, #48]	@ 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80069be:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 80069c0:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 80069c2:	e841 2300 	strex	r3, r2, [r1]
 80069c6:	62fb      	str	r3, [r7, #44]	@ 0x2c
   return(result);
 80069c8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80069ca:	2b00      	cmp	r3, #0
 80069cc:	d1e6      	bne.n	800699c <UART_Start_Receive_IT+0x110>
 80069ce:	e018      	b.n	8006a02 <UART_Start_Receive_IT+0x176>
  }
  else
  {
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE);
 80069d0:	68fb      	ldr	r3, [r7, #12]
 80069d2:	681b      	ldr	r3, [r3, #0]
 80069d4:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80069d6:	697b      	ldr	r3, [r7, #20]
 80069d8:	e853 3f00 	ldrex	r3, [r3]
 80069dc:	613b      	str	r3, [r7, #16]
   return(result);
 80069de:	693b      	ldr	r3, [r7, #16]
 80069e0:	f043 0320 	orr.w	r3, r3, #32
 80069e4:	653b      	str	r3, [r7, #80]	@ 0x50
 80069e6:	68fb      	ldr	r3, [r7, #12]
 80069e8:	681b      	ldr	r3, [r3, #0]
 80069ea:	461a      	mov	r2, r3
 80069ec:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 80069ee:	623b      	str	r3, [r7, #32]
 80069f0:	61fa      	str	r2, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80069f2:	69f9      	ldr	r1, [r7, #28]
 80069f4:	6a3a      	ldr	r2, [r7, #32]
 80069f6:	e841 2300 	strex	r3, r2, [r1]
 80069fa:	61bb      	str	r3, [r7, #24]
   return(result);
 80069fc:	69bb      	ldr	r3, [r7, #24]
 80069fe:	2b00      	cmp	r3, #0
 8006a00:	d1e6      	bne.n	80069d0 <UART_Start_Receive_IT+0x144>
  }
  return HAL_OK;
 8006a02:	2300      	movs	r3, #0
}
 8006a04:	4618      	mov	r0, r3
 8006a06:	375c      	adds	r7, #92	@ 0x5c
 8006a08:	46bd      	mov	sp, r7
 8006a0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006a0e:	4770      	bx	lr
 8006a10:	08006d09 	.word	0x08006d09
 8006a14:	08006b61 	.word	0x08006b61

08006a18 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8006a18:	b480      	push	{r7}
 8006a1a:	b095      	sub	sp, #84	@ 0x54
 8006a1c:	af00      	add	r7, sp, #0
 8006a1e:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8006a20:	687b      	ldr	r3, [r7, #4]
 8006a22:	681b      	ldr	r3, [r3, #0]
 8006a24:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006a26:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8006a28:	e853 3f00 	ldrex	r3, [r3]
 8006a2c:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 8006a2e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006a30:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8006a34:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8006a36:	687b      	ldr	r3, [r7, #4]
 8006a38:	681b      	ldr	r3, [r3, #0]
 8006a3a:	461a      	mov	r2, r3
 8006a3c:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8006a3e:	643b      	str	r3, [r7, #64]	@ 0x40
 8006a40:	63fa      	str	r2, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006a42:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 8006a44:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8006a46:	e841 2300 	strex	r3, r2, [r1]
 8006a4a:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 8006a4c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006a4e:	2b00      	cmp	r3, #0
 8006a50:	d1e6      	bne.n	8006a20 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006a52:	687b      	ldr	r3, [r7, #4]
 8006a54:	681b      	ldr	r3, [r3, #0]
 8006a56:	3308      	adds	r3, #8
 8006a58:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006a5a:	6a3b      	ldr	r3, [r7, #32]
 8006a5c:	e853 3f00 	ldrex	r3, [r3]
 8006a60:	61fb      	str	r3, [r7, #28]
   return(result);
 8006a62:	69fb      	ldr	r3, [r7, #28]
 8006a64:	f023 0301 	bic.w	r3, r3, #1
 8006a68:	64bb      	str	r3, [r7, #72]	@ 0x48
 8006a6a:	687b      	ldr	r3, [r7, #4]
 8006a6c:	681b      	ldr	r3, [r3, #0]
 8006a6e:	3308      	adds	r3, #8
 8006a70:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8006a72:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8006a74:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006a76:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8006a78:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8006a7a:	e841 2300 	strex	r3, r2, [r1]
 8006a7e:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8006a80:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006a82:	2b00      	cmp	r3, #0
 8006a84:	d1e5      	bne.n	8006a52 <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8006a86:	687b      	ldr	r3, [r7, #4]
 8006a88:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8006a8a:	2b01      	cmp	r3, #1
 8006a8c:	d118      	bne.n	8006ac0 <UART_EndRxTransfer+0xa8>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8006a8e:	687b      	ldr	r3, [r7, #4]
 8006a90:	681b      	ldr	r3, [r3, #0]
 8006a92:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006a94:	68fb      	ldr	r3, [r7, #12]
 8006a96:	e853 3f00 	ldrex	r3, [r3]
 8006a9a:	60bb      	str	r3, [r7, #8]
   return(result);
 8006a9c:	68bb      	ldr	r3, [r7, #8]
 8006a9e:	f023 0310 	bic.w	r3, r3, #16
 8006aa2:	647b      	str	r3, [r7, #68]	@ 0x44
 8006aa4:	687b      	ldr	r3, [r7, #4]
 8006aa6:	681b      	ldr	r3, [r3, #0]
 8006aa8:	461a      	mov	r2, r3
 8006aaa:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8006aac:	61bb      	str	r3, [r7, #24]
 8006aae:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006ab0:	6979      	ldr	r1, [r7, #20]
 8006ab2:	69ba      	ldr	r2, [r7, #24]
 8006ab4:	e841 2300 	strex	r3, r2, [r1]
 8006ab8:	613b      	str	r3, [r7, #16]
   return(result);
 8006aba:	693b      	ldr	r3, [r7, #16]
 8006abc:	2b00      	cmp	r3, #0
 8006abe:	d1e6      	bne.n	8006a8e <UART_EndRxTransfer+0x76>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8006ac0:	687b      	ldr	r3, [r7, #4]
 8006ac2:	2220      	movs	r2, #32
 8006ac4:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006ac8:	687b      	ldr	r3, [r7, #4]
 8006aca:	2200      	movs	r2, #0
 8006acc:	661a      	str	r2, [r3, #96]	@ 0x60

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 8006ace:	687b      	ldr	r3, [r7, #4]
 8006ad0:	2200      	movs	r2, #0
 8006ad2:	669a      	str	r2, [r3, #104]	@ 0x68
}
 8006ad4:	bf00      	nop
 8006ad6:	3754      	adds	r7, #84	@ 0x54
 8006ad8:	46bd      	mov	sp, r7
 8006ada:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006ade:	4770      	bx	lr

08006ae0 <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8006ae0:	b580      	push	{r7, lr}
 8006ae2:	b084      	sub	sp, #16
 8006ae4:	af00      	add	r7, sp, #0
 8006ae6:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8006ae8:	687b      	ldr	r3, [r7, #4]
 8006aea:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006aec:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 8006aee:	68fb      	ldr	r3, [r7, #12]
 8006af0:	2200      	movs	r2, #0
 8006af2:	f8a3 205a 	strh.w	r2, [r3, #90]	@ 0x5a
  huart->TxXferCount = 0U;
 8006af6:	68fb      	ldr	r3, [r7, #12]
 8006af8:	2200      	movs	r2, #0
 8006afa:	f8a3 2052 	strh.w	r2, [r3, #82]	@ 0x52
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8006afe:	68f8      	ldr	r0, [r7, #12]
 8006b00:	f7ff fa88 	bl	8006014 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8006b04:	bf00      	nop
 8006b06:	3710      	adds	r7, #16
 8006b08:	46bd      	mov	sp, r7
 8006b0a:	bd80      	pop	{r7, pc}

08006b0c <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8006b0c:	b580      	push	{r7, lr}
 8006b0e:	b088      	sub	sp, #32
 8006b10:	af00      	add	r7, sp, #0
 8006b12:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8006b14:	687b      	ldr	r3, [r7, #4]
 8006b16:	681b      	ldr	r3, [r3, #0]
 8006b18:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006b1a:	68fb      	ldr	r3, [r7, #12]
 8006b1c:	e853 3f00 	ldrex	r3, [r3]
 8006b20:	60bb      	str	r3, [r7, #8]
   return(result);
 8006b22:	68bb      	ldr	r3, [r7, #8]
 8006b24:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8006b28:	61fb      	str	r3, [r7, #28]
 8006b2a:	687b      	ldr	r3, [r7, #4]
 8006b2c:	681b      	ldr	r3, [r3, #0]
 8006b2e:	461a      	mov	r2, r3
 8006b30:	69fb      	ldr	r3, [r7, #28]
 8006b32:	61bb      	str	r3, [r7, #24]
 8006b34:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006b36:	6979      	ldr	r1, [r7, #20]
 8006b38:	69ba      	ldr	r2, [r7, #24]
 8006b3a:	e841 2300 	strex	r3, r2, [r1]
 8006b3e:	613b      	str	r3, [r7, #16]
   return(result);
 8006b40:	693b      	ldr	r3, [r7, #16]
 8006b42:	2b00      	cmp	r3, #0
 8006b44:	d1e6      	bne.n	8006b14 <UART_EndTransmit_IT+0x8>

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8006b46:	687b      	ldr	r3, [r7, #4]
 8006b48:	2220      	movs	r2, #32
 8006b4a:	67da      	str	r2, [r3, #124]	@ 0x7c

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 8006b4c:	687b      	ldr	r3, [r7, #4]
 8006b4e:	2200      	movs	r2, #0
 8006b50:	66da      	str	r2, [r3, #108]	@ 0x6c
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8006b52:	6878      	ldr	r0, [r7, #4]
 8006b54:	f7ff fa54 	bl	8006000 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8006b58:	bf00      	nop
 8006b5a:	3720      	adds	r7, #32
 8006b5c:	46bd      	mov	sp, r7
 8006b5e:	bd80      	pop	{r7, pc}

08006b60 <UART_RxISR_8BIT>:
  * @brief RX interrupt handler for 7 or 8 bits data word length .
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_8BIT(UART_HandleTypeDef *huart)
{
 8006b60:	b580      	push	{r7, lr}
 8006b62:	b09c      	sub	sp, #112	@ 0x70
 8006b64:	af00      	add	r7, sp, #0
 8006b66:	6078      	str	r0, [r7, #4]
  uint16_t uhMask = huart->Mask;
 8006b68:	687b      	ldr	r3, [r7, #4]
 8006b6a:	f8b3 305c 	ldrh.w	r3, [r3, #92]	@ 0x5c
 8006b6e:	f8a7 306e 	strh.w	r3, [r7, #110]	@ 0x6e
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8006b72:	687b      	ldr	r3, [r7, #4]
 8006b74:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8006b78:	2b22      	cmp	r3, #34	@ 0x22
 8006b7a:	f040 80b9 	bne.w	8006cf0 <UART_RxISR_8BIT+0x190>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 8006b7e:	687b      	ldr	r3, [r7, #4]
 8006b80:	681b      	ldr	r3, [r3, #0]
 8006b82:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006b84:	f8a7 306c 	strh.w	r3, [r7, #108]	@ 0x6c
    *huart->pRxBuffPtr = (uint8_t)(uhdata & (uint8_t)uhMask);
 8006b88:	f8b7 306c 	ldrh.w	r3, [r7, #108]	@ 0x6c
 8006b8c:	b2d9      	uxtb	r1, r3
 8006b8e:	f8b7 306e 	ldrh.w	r3, [r7, #110]	@ 0x6e
 8006b92:	b2da      	uxtb	r2, r3
 8006b94:	687b      	ldr	r3, [r7, #4]
 8006b96:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8006b98:	400a      	ands	r2, r1
 8006b9a:	b2d2      	uxtb	r2, r2
 8006b9c:	701a      	strb	r2, [r3, #0]
    huart->pRxBuffPtr++;
 8006b9e:	687b      	ldr	r3, [r7, #4]
 8006ba0:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8006ba2:	1c5a      	adds	r2, r3, #1
 8006ba4:	687b      	ldr	r3, [r7, #4]
 8006ba6:	655a      	str	r2, [r3, #84]	@ 0x54
    huart->RxXferCount--;
 8006ba8:	687b      	ldr	r3, [r7, #4]
 8006baa:	f8b3 305a 	ldrh.w	r3, [r3, #90]	@ 0x5a
 8006bae:	b29b      	uxth	r3, r3
 8006bb0:	3b01      	subs	r3, #1
 8006bb2:	b29a      	uxth	r2, r3
 8006bb4:	687b      	ldr	r3, [r7, #4]
 8006bb6:	f8a3 205a 	strh.w	r2, [r3, #90]	@ 0x5a

    if (huart->RxXferCount == 0U)
 8006bba:	687b      	ldr	r3, [r7, #4]
 8006bbc:	f8b3 305a 	ldrh.w	r3, [r3, #90]	@ 0x5a
 8006bc0:	b29b      	uxth	r3, r3
 8006bc2:	2b00      	cmp	r3, #0
 8006bc4:	f040 809c 	bne.w	8006d00 <UART_RxISR_8BIT+0x1a0>
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupts */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8006bc8:	687b      	ldr	r3, [r7, #4]
 8006bca:	681b      	ldr	r3, [r3, #0]
 8006bcc:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006bce:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8006bd0:	e853 3f00 	ldrex	r3, [r3]
 8006bd4:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 8006bd6:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8006bd8:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8006bdc:	66bb      	str	r3, [r7, #104]	@ 0x68
 8006bde:	687b      	ldr	r3, [r7, #4]
 8006be0:	681b      	ldr	r3, [r3, #0]
 8006be2:	461a      	mov	r2, r3
 8006be4:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8006be6:	65bb      	str	r3, [r7, #88]	@ 0x58
 8006be8:	657a      	str	r2, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006bea:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 8006bec:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 8006bee:	e841 2300 	strex	r3, r2, [r1]
 8006bf2:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 8006bf4:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8006bf6:	2b00      	cmp	r3, #0
 8006bf8:	d1e6      	bne.n	8006bc8 <UART_RxISR_8BIT+0x68>

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006bfa:	687b      	ldr	r3, [r7, #4]
 8006bfc:	681b      	ldr	r3, [r3, #0]
 8006bfe:	3308      	adds	r3, #8
 8006c00:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006c02:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006c04:	e853 3f00 	ldrex	r3, [r3]
 8006c08:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 8006c0a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8006c0c:	f023 0301 	bic.w	r3, r3, #1
 8006c10:	667b      	str	r3, [r7, #100]	@ 0x64
 8006c12:	687b      	ldr	r3, [r7, #4]
 8006c14:	681b      	ldr	r3, [r3, #0]
 8006c16:	3308      	adds	r3, #8
 8006c18:	6e7a      	ldr	r2, [r7, #100]	@ 0x64
 8006c1a:	647a      	str	r2, [r7, #68]	@ 0x44
 8006c1c:	643b      	str	r3, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006c1e:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 8006c20:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8006c22:	e841 2300 	strex	r3, r2, [r1]
 8006c26:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 8006c28:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8006c2a:	2b00      	cmp	r3, #0
 8006c2c:	d1e5      	bne.n	8006bfa <UART_RxISR_8BIT+0x9a>

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8006c2e:	687b      	ldr	r3, [r7, #4]
 8006c30:	2220      	movs	r2, #32
 8006c32:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 8006c36:	687b      	ldr	r3, [r7, #4]
 8006c38:	2200      	movs	r2, #0
 8006c3a:	669a      	str	r2, [r3, #104]	@ 0x68

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 8006c3c:	687b      	ldr	r3, [r7, #4]
 8006c3e:	2200      	movs	r2, #0
 8006c40:	665a      	str	r2, [r3, #100]	@ 0x64

      /* Check that USART RTOEN bit is set */
      if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 8006c42:	687b      	ldr	r3, [r7, #4]
 8006c44:	681b      	ldr	r3, [r3, #0]
 8006c46:	685b      	ldr	r3, [r3, #4]
 8006c48:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8006c4c:	2b00      	cmp	r3, #0
 8006c4e:	d018      	beq.n	8006c82 <UART_RxISR_8BIT+0x122>
      {
        /* Enable the UART Receiver Timeout Interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 8006c50:	687b      	ldr	r3, [r7, #4]
 8006c52:	681b      	ldr	r3, [r3, #0]
 8006c54:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006c56:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006c58:	e853 3f00 	ldrex	r3, [r3]
 8006c5c:	623b      	str	r3, [r7, #32]
   return(result);
 8006c5e:	6a3b      	ldr	r3, [r7, #32]
 8006c60:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 8006c64:	663b      	str	r3, [r7, #96]	@ 0x60
 8006c66:	687b      	ldr	r3, [r7, #4]
 8006c68:	681b      	ldr	r3, [r3, #0]
 8006c6a:	461a      	mov	r2, r3
 8006c6c:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8006c6e:	633b      	str	r3, [r7, #48]	@ 0x30
 8006c70:	62fa      	str	r2, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006c72:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8006c74:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8006c76:	e841 2300 	strex	r3, r2, [r1]
 8006c7a:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 8006c7c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006c7e:	2b00      	cmp	r3, #0
 8006c80:	d1e6      	bne.n	8006c50 <UART_RxISR_8BIT+0xf0>
      }

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8006c82:	687b      	ldr	r3, [r7, #4]
 8006c84:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8006c86:	2b01      	cmp	r3, #1
 8006c88:	d12e      	bne.n	8006ce8 <UART_RxISR_8BIT+0x188>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006c8a:	687b      	ldr	r3, [r7, #4]
 8006c8c:	2200      	movs	r2, #0
 8006c8e:	661a      	str	r2, [r3, #96]	@ 0x60

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8006c90:	687b      	ldr	r3, [r7, #4]
 8006c92:	681b      	ldr	r3, [r3, #0]
 8006c94:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006c96:	693b      	ldr	r3, [r7, #16]
 8006c98:	e853 3f00 	ldrex	r3, [r3]
 8006c9c:	60fb      	str	r3, [r7, #12]
   return(result);
 8006c9e:	68fb      	ldr	r3, [r7, #12]
 8006ca0:	f023 0310 	bic.w	r3, r3, #16
 8006ca4:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8006ca6:	687b      	ldr	r3, [r7, #4]
 8006ca8:	681b      	ldr	r3, [r3, #0]
 8006caa:	461a      	mov	r2, r3
 8006cac:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8006cae:	61fb      	str	r3, [r7, #28]
 8006cb0:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006cb2:	69b9      	ldr	r1, [r7, #24]
 8006cb4:	69fa      	ldr	r2, [r7, #28]
 8006cb6:	e841 2300 	strex	r3, r2, [r1]
 8006cba:	617b      	str	r3, [r7, #20]
   return(result);
 8006cbc:	697b      	ldr	r3, [r7, #20]
 8006cbe:	2b00      	cmp	r3, #0
 8006cc0:	d1e6      	bne.n	8006c90 <UART_RxISR_8BIT+0x130>

        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 8006cc2:	687b      	ldr	r3, [r7, #4]
 8006cc4:	681b      	ldr	r3, [r3, #0]
 8006cc6:	69db      	ldr	r3, [r3, #28]
 8006cc8:	f003 0310 	and.w	r3, r3, #16
 8006ccc:	2b10      	cmp	r3, #16
 8006cce:	d103      	bne.n	8006cd8 <UART_RxISR_8BIT+0x178>
        {
          /* Clear IDLE Flag */
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8006cd0:	687b      	ldr	r3, [r7, #4]
 8006cd2:	681b      	ldr	r3, [r3, #0]
 8006cd4:	2210      	movs	r2, #16
 8006cd6:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8006cd8:	687b      	ldr	r3, [r7, #4]
 8006cda:	f8b3 3058 	ldrh.w	r3, [r3, #88]	@ 0x58
 8006cde:	4619      	mov	r1, r3
 8006ce0:	6878      	ldr	r0, [r7, #4]
 8006ce2:	f7ff f9a1 	bl	8006028 <HAL_UARTEx_RxEventCallback>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 8006ce6:	e00b      	b.n	8006d00 <UART_RxISR_8BIT+0x1a0>
        HAL_UART_RxCpltCallback(huart);
 8006ce8:	6878      	ldr	r0, [r7, #4]
 8006cea:	f7fa f80f 	bl	8000d0c <HAL_UART_RxCpltCallback>
}
 8006cee:	e007      	b.n	8006d00 <UART_RxISR_8BIT+0x1a0>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 8006cf0:	687b      	ldr	r3, [r7, #4]
 8006cf2:	681b      	ldr	r3, [r3, #0]
 8006cf4:	699a      	ldr	r2, [r3, #24]
 8006cf6:	687b      	ldr	r3, [r7, #4]
 8006cf8:	681b      	ldr	r3, [r3, #0]
 8006cfa:	f042 0208 	orr.w	r2, r2, #8
 8006cfe:	619a      	str	r2, [r3, #24]
}
 8006d00:	bf00      	nop
 8006d02:	3770      	adds	r7, #112	@ 0x70
 8006d04:	46bd      	mov	sp, r7
 8006d06:	bd80      	pop	{r7, pc}

08006d08 <UART_RxISR_16BIT>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_16BIT(UART_HandleTypeDef *huart)
{
 8006d08:	b580      	push	{r7, lr}
 8006d0a:	b09c      	sub	sp, #112	@ 0x70
 8006d0c:	af00      	add	r7, sp, #0
 8006d0e:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;
  uint16_t uhMask = huart->Mask;
 8006d10:	687b      	ldr	r3, [r7, #4]
 8006d12:	f8b3 305c 	ldrh.w	r3, [r3, #92]	@ 0x5c
 8006d16:	f8a7 306e 	strh.w	r3, [r7, #110]	@ 0x6e
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8006d1a:	687b      	ldr	r3, [r7, #4]
 8006d1c:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8006d20:	2b22      	cmp	r3, #34	@ 0x22
 8006d22:	f040 80b9 	bne.w	8006e98 <UART_RxISR_16BIT+0x190>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 8006d26:	687b      	ldr	r3, [r7, #4]
 8006d28:	681b      	ldr	r3, [r3, #0]
 8006d2a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006d2c:	f8a7 306c 	strh.w	r3, [r7, #108]	@ 0x6c
    tmp = (uint16_t *) huart->pRxBuffPtr ;
 8006d30:	687b      	ldr	r3, [r7, #4]
 8006d32:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8006d34:	66bb      	str	r3, [r7, #104]	@ 0x68
    *tmp = (uint16_t)(uhdata & uhMask);
 8006d36:	f8b7 206c 	ldrh.w	r2, [r7, #108]	@ 0x6c
 8006d3a:	f8b7 306e 	ldrh.w	r3, [r7, #110]	@ 0x6e
 8006d3e:	4013      	ands	r3, r2
 8006d40:	b29a      	uxth	r2, r3
 8006d42:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8006d44:	801a      	strh	r2, [r3, #0]
    huart->pRxBuffPtr += 2U;
 8006d46:	687b      	ldr	r3, [r7, #4]
 8006d48:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8006d4a:	1c9a      	adds	r2, r3, #2
 8006d4c:	687b      	ldr	r3, [r7, #4]
 8006d4e:	655a      	str	r2, [r3, #84]	@ 0x54
    huart->RxXferCount--;
 8006d50:	687b      	ldr	r3, [r7, #4]
 8006d52:	f8b3 305a 	ldrh.w	r3, [r3, #90]	@ 0x5a
 8006d56:	b29b      	uxth	r3, r3
 8006d58:	3b01      	subs	r3, #1
 8006d5a:	b29a      	uxth	r2, r3
 8006d5c:	687b      	ldr	r3, [r7, #4]
 8006d5e:	f8a3 205a 	strh.w	r2, [r3, #90]	@ 0x5a

    if (huart->RxXferCount == 0U)
 8006d62:	687b      	ldr	r3, [r7, #4]
 8006d64:	f8b3 305a 	ldrh.w	r3, [r3, #90]	@ 0x5a
 8006d68:	b29b      	uxth	r3, r3
 8006d6a:	2b00      	cmp	r3, #0
 8006d6c:	f040 809c 	bne.w	8006ea8 <UART_RxISR_16BIT+0x1a0>
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupt*/
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8006d70:	687b      	ldr	r3, [r7, #4]
 8006d72:	681b      	ldr	r3, [r3, #0]
 8006d74:	64bb      	str	r3, [r7, #72]	@ 0x48
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006d76:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8006d78:	e853 3f00 	ldrex	r3, [r3]
 8006d7c:	647b      	str	r3, [r7, #68]	@ 0x44
   return(result);
 8006d7e:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8006d80:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8006d84:	667b      	str	r3, [r7, #100]	@ 0x64
 8006d86:	687b      	ldr	r3, [r7, #4]
 8006d88:	681b      	ldr	r3, [r3, #0]
 8006d8a:	461a      	mov	r2, r3
 8006d8c:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8006d8e:	657b      	str	r3, [r7, #84]	@ 0x54
 8006d90:	653a      	str	r2, [r7, #80]	@ 0x50
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006d92:	6d39      	ldr	r1, [r7, #80]	@ 0x50
 8006d94:	6d7a      	ldr	r2, [r7, #84]	@ 0x54
 8006d96:	e841 2300 	strex	r3, r2, [r1]
 8006d9a:	64fb      	str	r3, [r7, #76]	@ 0x4c
   return(result);
 8006d9c:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8006d9e:	2b00      	cmp	r3, #0
 8006da0:	d1e6      	bne.n	8006d70 <UART_RxISR_16BIT+0x68>

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006da2:	687b      	ldr	r3, [r7, #4]
 8006da4:	681b      	ldr	r3, [r3, #0]
 8006da6:	3308      	adds	r3, #8
 8006da8:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006daa:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8006dac:	e853 3f00 	ldrex	r3, [r3]
 8006db0:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 8006db2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006db4:	f023 0301 	bic.w	r3, r3, #1
 8006db8:	663b      	str	r3, [r7, #96]	@ 0x60
 8006dba:	687b      	ldr	r3, [r7, #4]
 8006dbc:	681b      	ldr	r3, [r3, #0]
 8006dbe:	3308      	adds	r3, #8
 8006dc0:	6e3a      	ldr	r2, [r7, #96]	@ 0x60
 8006dc2:	643a      	str	r2, [r7, #64]	@ 0x40
 8006dc4:	63fb      	str	r3, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006dc6:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 8006dc8:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8006dca:	e841 2300 	strex	r3, r2, [r1]
 8006dce:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 8006dd0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006dd2:	2b00      	cmp	r3, #0
 8006dd4:	d1e5      	bne.n	8006da2 <UART_RxISR_16BIT+0x9a>

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8006dd6:	687b      	ldr	r3, [r7, #4]
 8006dd8:	2220      	movs	r2, #32
 8006dda:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 8006dde:	687b      	ldr	r3, [r7, #4]
 8006de0:	2200      	movs	r2, #0
 8006de2:	669a      	str	r2, [r3, #104]	@ 0x68

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 8006de4:	687b      	ldr	r3, [r7, #4]
 8006de6:	2200      	movs	r2, #0
 8006de8:	665a      	str	r2, [r3, #100]	@ 0x64

      /* Check that USART RTOEN bit is set */
      if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 8006dea:	687b      	ldr	r3, [r7, #4]
 8006dec:	681b      	ldr	r3, [r3, #0]
 8006dee:	685b      	ldr	r3, [r3, #4]
 8006df0:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8006df4:	2b00      	cmp	r3, #0
 8006df6:	d018      	beq.n	8006e2a <UART_RxISR_16BIT+0x122>
      {
        /* Enable the UART Receiver Timeout Interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 8006df8:	687b      	ldr	r3, [r7, #4]
 8006dfa:	681b      	ldr	r3, [r3, #0]
 8006dfc:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006dfe:	6a3b      	ldr	r3, [r7, #32]
 8006e00:	e853 3f00 	ldrex	r3, [r3]
 8006e04:	61fb      	str	r3, [r7, #28]
   return(result);
 8006e06:	69fb      	ldr	r3, [r7, #28]
 8006e08:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 8006e0c:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8006e0e:	687b      	ldr	r3, [r7, #4]
 8006e10:	681b      	ldr	r3, [r3, #0]
 8006e12:	461a      	mov	r2, r3
 8006e14:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8006e16:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8006e18:	62ba      	str	r2, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006e1a:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8006e1c:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8006e1e:	e841 2300 	strex	r3, r2, [r1]
 8006e22:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8006e24:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006e26:	2b00      	cmp	r3, #0
 8006e28:	d1e6      	bne.n	8006df8 <UART_RxISR_16BIT+0xf0>
      }

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8006e2a:	687b      	ldr	r3, [r7, #4]
 8006e2c:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8006e2e:	2b01      	cmp	r3, #1
 8006e30:	d12e      	bne.n	8006e90 <UART_RxISR_16BIT+0x188>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006e32:	687b      	ldr	r3, [r7, #4]
 8006e34:	2200      	movs	r2, #0
 8006e36:	661a      	str	r2, [r3, #96]	@ 0x60

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8006e38:	687b      	ldr	r3, [r7, #4]
 8006e3a:	681b      	ldr	r3, [r3, #0]
 8006e3c:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006e3e:	68fb      	ldr	r3, [r7, #12]
 8006e40:	e853 3f00 	ldrex	r3, [r3]
 8006e44:	60bb      	str	r3, [r7, #8]
   return(result);
 8006e46:	68bb      	ldr	r3, [r7, #8]
 8006e48:	f023 0310 	bic.w	r3, r3, #16
 8006e4c:	65bb      	str	r3, [r7, #88]	@ 0x58
 8006e4e:	687b      	ldr	r3, [r7, #4]
 8006e50:	681b      	ldr	r3, [r3, #0]
 8006e52:	461a      	mov	r2, r3
 8006e54:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8006e56:	61bb      	str	r3, [r7, #24]
 8006e58:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006e5a:	6979      	ldr	r1, [r7, #20]
 8006e5c:	69ba      	ldr	r2, [r7, #24]
 8006e5e:	e841 2300 	strex	r3, r2, [r1]
 8006e62:	613b      	str	r3, [r7, #16]
   return(result);
 8006e64:	693b      	ldr	r3, [r7, #16]
 8006e66:	2b00      	cmp	r3, #0
 8006e68:	d1e6      	bne.n	8006e38 <UART_RxISR_16BIT+0x130>

        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 8006e6a:	687b      	ldr	r3, [r7, #4]
 8006e6c:	681b      	ldr	r3, [r3, #0]
 8006e6e:	69db      	ldr	r3, [r3, #28]
 8006e70:	f003 0310 	and.w	r3, r3, #16
 8006e74:	2b10      	cmp	r3, #16
 8006e76:	d103      	bne.n	8006e80 <UART_RxISR_16BIT+0x178>
        {
          /* Clear IDLE Flag */
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8006e78:	687b      	ldr	r3, [r7, #4]
 8006e7a:	681b      	ldr	r3, [r3, #0]
 8006e7c:	2210      	movs	r2, #16
 8006e7e:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8006e80:	687b      	ldr	r3, [r7, #4]
 8006e82:	f8b3 3058 	ldrh.w	r3, [r3, #88]	@ 0x58
 8006e86:	4619      	mov	r1, r3
 8006e88:	6878      	ldr	r0, [r7, #4]
 8006e8a:	f7ff f8cd 	bl	8006028 <HAL_UARTEx_RxEventCallback>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 8006e8e:	e00b      	b.n	8006ea8 <UART_RxISR_16BIT+0x1a0>
        HAL_UART_RxCpltCallback(huart);
 8006e90:	6878      	ldr	r0, [r7, #4]
 8006e92:	f7f9 ff3b 	bl	8000d0c <HAL_UART_RxCpltCallback>
}
 8006e96:	e007      	b.n	8006ea8 <UART_RxISR_16BIT+0x1a0>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 8006e98:	687b      	ldr	r3, [r7, #4]
 8006e9a:	681b      	ldr	r3, [r3, #0]
 8006e9c:	699a      	ldr	r2, [r3, #24]
 8006e9e:	687b      	ldr	r3, [r7, #4]
 8006ea0:	681b      	ldr	r3, [r3, #0]
 8006ea2:	f042 0208 	orr.w	r2, r2, #8
 8006ea6:	619a      	str	r2, [r3, #24]
}
 8006ea8:	bf00      	nop
 8006eaa:	3770      	adds	r7, #112	@ 0x70
 8006eac:	46bd      	mov	sp, r7
 8006eae:	bd80      	pop	{r7, pc}

08006eb0 <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8006eb0:	b084      	sub	sp, #16
 8006eb2:	b580      	push	{r7, lr}
 8006eb4:	b084      	sub	sp, #16
 8006eb6:	af00      	add	r7, sp, #0
 8006eb8:	6078      	str	r0, [r7, #4]
 8006eba:	f107 001c 	add.w	r0, r7, #28
 8006ebe:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 8006ec2:	f897 3021 	ldrb.w	r3, [r7, #33]	@ 0x21
 8006ec6:	2b01      	cmp	r3, #1
 8006ec8:	d121      	bne.n	8006f0e <USB_CoreInit+0x5e>
  {
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 8006eca:	687b      	ldr	r3, [r7, #4]
 8006ecc:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006ece:	f423 3280 	bic.w	r2, r3, #65536	@ 0x10000
 8006ed2:	687b      	ldr	r3, [r7, #4]
 8006ed4:	639a      	str	r2, [r3, #56]	@ 0x38

    /* Init The ULPI Interface */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_TSDPS | USB_OTG_GUSBCFG_ULPIFSLS | USB_OTG_GUSBCFG_PHYSEL);
 8006ed6:	687b      	ldr	r3, [r7, #4]
 8006ed8:	68da      	ldr	r2, [r3, #12]
 8006eda:	4b21      	ldr	r3, [pc, #132]	@ (8006f60 <USB_CoreInit+0xb0>)
 8006edc:	4013      	ands	r3, r2
 8006ede:	687a      	ldr	r2, [r7, #4]
 8006ee0:	60d3      	str	r3, [r2, #12]
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPI_UTMI_SEL;
#endif /* defined(STM32F722xx) || defined(STM32F723xx) || defined(STM32F730xx) ||
          defined(STM32F732xx) || defined(STM32F733xx) */

    /* Select vbus source */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_ULPIEVBUSD | USB_OTG_GUSBCFG_ULPIEVBUSI);
 8006ee2:	687b      	ldr	r3, [r7, #4]
 8006ee4:	68db      	ldr	r3, [r3, #12]
 8006ee6:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 8006eea:	687b      	ldr	r3, [r7, #4]
 8006eec:	60da      	str	r2, [r3, #12]
    if (cfg.use_external_vbus == 1U)
 8006eee:	f897 3028 	ldrb.w	r3, [r7, #40]	@ 0x28
 8006ef2:	2b01      	cmp	r3, #1
 8006ef4:	d105      	bne.n	8006f02 <USB_CoreInit+0x52>
    {
      USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPIEVBUSD;
 8006ef6:	687b      	ldr	r3, [r7, #4]
 8006ef8:	68db      	ldr	r3, [r3, #12]
 8006efa:	f443 1280 	orr.w	r2, r3, #1048576	@ 0x100000
 8006efe:	687b      	ldr	r3, [r7, #4]
 8006f00:	60da      	str	r2, [r3, #12]
    }

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 8006f02:	6878      	ldr	r0, [r7, #4]
 8006f04:	f000 fa92 	bl	800742c <USB_CoreReset>
 8006f08:	4603      	mov	r3, r0
 8006f0a:	73fb      	strb	r3, [r7, #15]
 8006f0c:	e010      	b.n	8006f30 <USB_CoreInit+0x80>
#endif /* defined(STM32F722xx) || defined(STM32F723xx) || defined(STM32F730xx) ||
          defined(STM32F732xx) || defined(STM32F733xx) */
  else /* FS interface (embedded Phy) */
  {
    /* Select FS Embedded PHY */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 8006f0e:	687b      	ldr	r3, [r7, #4]
 8006f10:	68db      	ldr	r3, [r3, #12]
 8006f12:	f043 0240 	orr.w	r2, r3, #64	@ 0x40
 8006f16:	687b      	ldr	r3, [r7, #4]
 8006f18:	60da      	str	r2, [r3, #12]

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 8006f1a:	6878      	ldr	r0, [r7, #4]
 8006f1c:	f000 fa86 	bl	800742c <USB_CoreReset>
 8006f20:	4603      	mov	r3, r0
 8006f22:	73fb      	strb	r3, [r7, #15]

    /* Activate the USB Transceiver */
    USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 8006f24:	687b      	ldr	r3, [r7, #4]
 8006f26:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006f28:	f443 3280 	orr.w	r2, r3, #65536	@ 0x10000
 8006f2c:	687b      	ldr	r3, [r7, #4]
 8006f2e:	639a      	str	r2, [r3, #56]	@ 0x38
  }

  if (cfg.dma_enable == 1U)
 8006f30:	7fbb      	ldrb	r3, [r7, #30]
 8006f32:	2b01      	cmp	r3, #1
 8006f34:	d10b      	bne.n	8006f4e <USB_CoreInit+0x9e>
  {
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_HBSTLEN_2;
 8006f36:	687b      	ldr	r3, [r7, #4]
 8006f38:	689b      	ldr	r3, [r3, #8]
 8006f3a:	f043 0206 	orr.w	r2, r3, #6
 8006f3e:	687b      	ldr	r3, [r7, #4]
 8006f40:	609a      	str	r2, [r3, #8]
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_DMAEN;
 8006f42:	687b      	ldr	r3, [r7, #4]
 8006f44:	689b      	ldr	r3, [r3, #8]
 8006f46:	f043 0220 	orr.w	r2, r3, #32
 8006f4a:	687b      	ldr	r3, [r7, #4]
 8006f4c:	609a      	str	r2, [r3, #8]
  }

  return ret;
 8006f4e:	7bfb      	ldrb	r3, [r7, #15]
}
 8006f50:	4618      	mov	r0, r3
 8006f52:	3710      	adds	r7, #16
 8006f54:	46bd      	mov	sp, r7
 8006f56:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8006f5a:	b004      	add	sp, #16
 8006f5c:	4770      	bx	lr
 8006f5e:	bf00      	nop
 8006f60:	ffbdffbf 	.word	0xffbdffbf

08006f64 <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 8006f64:	b480      	push	{r7}
 8006f66:	b083      	sub	sp, #12
 8006f68:	af00      	add	r7, sp, #0
 8006f6a:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 8006f6c:	687b      	ldr	r3, [r7, #4]
 8006f6e:	689b      	ldr	r3, [r3, #8]
 8006f70:	f023 0201 	bic.w	r2, r3, #1
 8006f74:	687b      	ldr	r3, [r7, #4]
 8006f76:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 8006f78:	2300      	movs	r3, #0
}
 8006f7a:	4618      	mov	r0, r3
 8006f7c:	370c      	adds	r7, #12
 8006f7e:	46bd      	mov	sp, r7
 8006f80:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006f84:	4770      	bx	lr

08006f86 <USB_SetCurrentMode>:
  *            @arg USB_DEVICE_MODE Peripheral mode
  *            @arg USB_HOST_MODE Host mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_OTG_ModeTypeDef mode)
{
 8006f86:	b580      	push	{r7, lr}
 8006f88:	b084      	sub	sp, #16
 8006f8a:	af00      	add	r7, sp, #0
 8006f8c:	6078      	str	r0, [r7, #4]
 8006f8e:	460b      	mov	r3, r1
 8006f90:	70fb      	strb	r3, [r7, #3]
  uint32_t ms = 0U;
 8006f92:	2300      	movs	r3, #0
 8006f94:	60fb      	str	r3, [r7, #12]

  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 8006f96:	687b      	ldr	r3, [r7, #4]
 8006f98:	68db      	ldr	r3, [r3, #12]
 8006f9a:	f023 42c0 	bic.w	r2, r3, #1610612736	@ 0x60000000
 8006f9e:	687b      	ldr	r3, [r7, #4]
 8006fa0:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 8006fa2:	78fb      	ldrb	r3, [r7, #3]
 8006fa4:	2b01      	cmp	r3, #1
 8006fa6:	d115      	bne.n	8006fd4 <USB_SetCurrentMode+0x4e>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 8006fa8:	687b      	ldr	r3, [r7, #4]
 8006faa:	68db      	ldr	r3, [r3, #12]
 8006fac:	f043 5200 	orr.w	r2, r3, #536870912	@ 0x20000000
 8006fb0:	687b      	ldr	r3, [r7, #4]
 8006fb2:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(10U);
 8006fb4:	200a      	movs	r0, #10
 8006fb6:	f7fa ffcd 	bl	8001f54 <HAL_Delay>
      ms += 10U;
 8006fba:	68fb      	ldr	r3, [r7, #12]
 8006fbc:	330a      	adds	r3, #10
 8006fbe:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_HOST_MODE) && (ms < HAL_USB_CURRENT_MODE_MAX_DELAY_MS));
 8006fc0:	6878      	ldr	r0, [r7, #4]
 8006fc2:	f000 fa25 	bl	8007410 <USB_GetMode>
 8006fc6:	4603      	mov	r3, r0
 8006fc8:	2b01      	cmp	r3, #1
 8006fca:	d01e      	beq.n	800700a <USB_SetCurrentMode+0x84>
 8006fcc:	68fb      	ldr	r3, [r7, #12]
 8006fce:	2bc7      	cmp	r3, #199	@ 0xc7
 8006fd0:	d9f0      	bls.n	8006fb4 <USB_SetCurrentMode+0x2e>
 8006fd2:	e01a      	b.n	800700a <USB_SetCurrentMode+0x84>
  }
  else if (mode == USB_DEVICE_MODE)
 8006fd4:	78fb      	ldrb	r3, [r7, #3]
 8006fd6:	2b00      	cmp	r3, #0
 8006fd8:	d115      	bne.n	8007006 <USB_SetCurrentMode+0x80>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 8006fda:	687b      	ldr	r3, [r7, #4]
 8006fdc:	68db      	ldr	r3, [r3, #12]
 8006fde:	f043 4280 	orr.w	r2, r3, #1073741824	@ 0x40000000
 8006fe2:	687b      	ldr	r3, [r7, #4]
 8006fe4:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(10U);
 8006fe6:	200a      	movs	r0, #10
 8006fe8:	f7fa ffb4 	bl	8001f54 <HAL_Delay>
      ms += 10U;
 8006fec:	68fb      	ldr	r3, [r7, #12]
 8006fee:	330a      	adds	r3, #10
 8006ff0:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_DEVICE_MODE) && (ms < HAL_USB_CURRENT_MODE_MAX_DELAY_MS));
 8006ff2:	6878      	ldr	r0, [r7, #4]
 8006ff4:	f000 fa0c 	bl	8007410 <USB_GetMode>
 8006ff8:	4603      	mov	r3, r0
 8006ffa:	2b00      	cmp	r3, #0
 8006ffc:	d005      	beq.n	800700a <USB_SetCurrentMode+0x84>
 8006ffe:	68fb      	ldr	r3, [r7, #12]
 8007000:	2bc7      	cmp	r3, #199	@ 0xc7
 8007002:	d9f0      	bls.n	8006fe6 <USB_SetCurrentMode+0x60>
 8007004:	e001      	b.n	800700a <USB_SetCurrentMode+0x84>
  }
  else
  {
    return HAL_ERROR;
 8007006:	2301      	movs	r3, #1
 8007008:	e005      	b.n	8007016 <USB_SetCurrentMode+0x90>
  }

  if (ms == HAL_USB_CURRENT_MODE_MAX_DELAY_MS)
 800700a:	68fb      	ldr	r3, [r7, #12]
 800700c:	2bc8      	cmp	r3, #200	@ 0xc8
 800700e:	d101      	bne.n	8007014 <USB_SetCurrentMode+0x8e>
  {
    return HAL_ERROR;
 8007010:	2301      	movs	r3, #1
 8007012:	e000      	b.n	8007016 <USB_SetCurrentMode+0x90>
  }

  return HAL_OK;
 8007014:	2300      	movs	r3, #0
}
 8007016:	4618      	mov	r0, r3
 8007018:	3710      	adds	r7, #16
 800701a:	46bd      	mov	sp, r7
 800701c:	bd80      	pop	{r7, pc}
	...

08007020 <USB_DevInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8007020:	b084      	sub	sp, #16
 8007022:	b580      	push	{r7, lr}
 8007024:	b086      	sub	sp, #24
 8007026:	af00      	add	r7, sp, #0
 8007028:	6078      	str	r0, [r7, #4]
 800702a:	f107 0024 	add.w	r0, r7, #36	@ 0x24
 800702e:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret = HAL_OK;
 8007032:	2300      	movs	r3, #0
 8007034:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8007036:	687b      	ldr	r3, [r7, #4]
 8007038:	60fb      	str	r3, [r7, #12]
  uint32_t i;

  for (i = 0U; i < 15U; i++)
 800703a:	2300      	movs	r3, #0
 800703c:	613b      	str	r3, [r7, #16]
 800703e:	e009      	b.n	8007054 <USB_DevInit+0x34>
  {
    USBx->DIEPTXF[i] = 0U;
 8007040:	687a      	ldr	r2, [r7, #4]
 8007042:	693b      	ldr	r3, [r7, #16]
 8007044:	3340      	adds	r3, #64	@ 0x40
 8007046:	009b      	lsls	r3, r3, #2
 8007048:	4413      	add	r3, r2
 800704a:	2200      	movs	r2, #0
 800704c:	605a      	str	r2, [r3, #4]
  for (i = 0U; i < 15U; i++)
 800704e:	693b      	ldr	r3, [r7, #16]
 8007050:	3301      	adds	r3, #1
 8007052:	613b      	str	r3, [r7, #16]
 8007054:	693b      	ldr	r3, [r7, #16]
 8007056:	2b0e      	cmp	r3, #14
 8007058:	d9f2      	bls.n	8007040 <USB_DevInit+0x20>
  }

  /* VBUS Sensing setup */
  if (cfg.vbus_sensing_enable == 0U)
 800705a:	f897 302e 	ldrb.w	r3, [r7, #46]	@ 0x2e
 800705e:	2b00      	cmp	r3, #0
 8007060:	d11c      	bne.n	800709c <USB_DevInit+0x7c>
  {
    USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 8007062:	68fb      	ldr	r3, [r7, #12]
 8007064:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8007068:	685b      	ldr	r3, [r3, #4]
 800706a:	68fa      	ldr	r2, [r7, #12]
 800706c:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8007070:	f043 0302 	orr.w	r3, r3, #2
 8007074:	6053      	str	r3, [r2, #4]

    /* Deactivate VBUS Sensing B */
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBDEN;
 8007076:	687b      	ldr	r3, [r7, #4]
 8007078:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800707a:	f423 1200 	bic.w	r2, r3, #2097152	@ 0x200000
 800707e:	687b      	ldr	r3, [r7, #4]
 8007080:	639a      	str	r2, [r3, #56]	@ 0x38

    /* B-peripheral session valid override enable */
    USBx->GOTGCTL |= USB_OTG_GOTGCTL_BVALOEN;
 8007082:	687b      	ldr	r3, [r7, #4]
 8007084:	681b      	ldr	r3, [r3, #0]
 8007086:	f043 0240 	orr.w	r2, r3, #64	@ 0x40
 800708a:	687b      	ldr	r3, [r7, #4]
 800708c:	601a      	str	r2, [r3, #0]
    USBx->GOTGCTL |= USB_OTG_GOTGCTL_BVALOVAL;
 800708e:	687b      	ldr	r3, [r7, #4]
 8007090:	681b      	ldr	r3, [r3, #0]
 8007092:	f043 0280 	orr.w	r2, r3, #128	@ 0x80
 8007096:	687b      	ldr	r3, [r7, #4]
 8007098:	601a      	str	r2, [r3, #0]
 800709a:	e005      	b.n	80070a8 <USB_DevInit+0x88>
  }
  else
  {
    /* Enable HW VBUS sensing */
    USBx->GCCFG |= USB_OTG_GCCFG_VBDEN;
 800709c:	687b      	ldr	r3, [r7, #4]
 800709e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80070a0:	f443 1200 	orr.w	r2, r3, #2097152	@ 0x200000
 80070a4:	687b      	ldr	r3, [r7, #4]
 80070a6:	639a      	str	r2, [r3, #56]	@ 0x38
  }

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 80070a8:	68fb      	ldr	r3, [r7, #12]
 80070aa:	f503 6360 	add.w	r3, r3, #3584	@ 0xe00
 80070ae:	461a      	mov	r2, r3
 80070b0:	2300      	movs	r3, #0
 80070b2:	6013      	str	r3, [r2, #0]

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 80070b4:	f897 3029 	ldrb.w	r3, [r7, #41]	@ 0x29
 80070b8:	2b01      	cmp	r3, #1
 80070ba:	d10d      	bne.n	80070d8 <USB_DevInit+0xb8>
  {
    if (cfg.speed == USBD_HS_SPEED)
 80070bc:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 80070c0:	2b00      	cmp	r3, #0
 80070c2:	d104      	bne.n	80070ce <USB_DevInit+0xae>
    {
      /* Set Core speed to High speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH);
 80070c4:	2100      	movs	r1, #0
 80070c6:	6878      	ldr	r0, [r7, #4]
 80070c8:	f000 f968 	bl	800739c <USB_SetDevSpeed>
 80070cc:	e008      	b.n	80070e0 <USB_DevInit+0xc0>
    }
    else
    {
      /* Set Core speed to Full speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH_IN_FULL);
 80070ce:	2101      	movs	r1, #1
 80070d0:	6878      	ldr	r0, [r7, #4]
 80070d2:	f000 f963 	bl	800739c <USB_SetDevSpeed>
 80070d6:	e003      	b.n	80070e0 <USB_DevInit+0xc0>
#endif /* defined(STM32F722xx) || defined(STM32F723xx) || defined(STM32F730xx) ||
          defined(STM32F732xx) || defined(STM32F733xx) */
  else
  {
    /* Set Core speed to Full speed mode */
    (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_FULL);
 80070d8:	2103      	movs	r1, #3
 80070da:	6878      	ldr	r0, [r7, #4]
 80070dc:	f000 f95e 	bl	800739c <USB_SetDevSpeed>
  }

  /* Flush the FIFOs */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 80070e0:	2110      	movs	r1, #16
 80070e2:	6878      	ldr	r0, [r7, #4]
 80070e4:	f000 f8fa 	bl	80072dc <USB_FlushTxFifo>
 80070e8:	4603      	mov	r3, r0
 80070ea:	2b00      	cmp	r3, #0
 80070ec:	d001      	beq.n	80070f2 <USB_DevInit+0xd2>
  {
    ret = HAL_ERROR;
 80070ee:	2301      	movs	r3, #1
 80070f0:	75fb      	strb	r3, [r7, #23]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 80070f2:	6878      	ldr	r0, [r7, #4]
 80070f4:	f000 f924 	bl	8007340 <USB_FlushRxFifo>
 80070f8:	4603      	mov	r3, r0
 80070fa:	2b00      	cmp	r3, #0
 80070fc:	d001      	beq.n	8007102 <USB_DevInit+0xe2>
  {
    ret = HAL_ERROR;
 80070fe:	2301      	movs	r3, #1
 8007100:	75fb      	strb	r3, [r7, #23]
  }

  /* Clear all pending Device Interrupts */
  USBx_DEVICE->DIEPMSK = 0U;
 8007102:	68fb      	ldr	r3, [r7, #12]
 8007104:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8007108:	461a      	mov	r2, r3
 800710a:	2300      	movs	r3, #0
 800710c:	6113      	str	r3, [r2, #16]
  USBx_DEVICE->DOEPMSK = 0U;
 800710e:	68fb      	ldr	r3, [r7, #12]
 8007110:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8007114:	461a      	mov	r2, r3
 8007116:	2300      	movs	r3, #0
 8007118:	6153      	str	r3, [r2, #20]
  USBx_DEVICE->DAINTMSK = 0U;
 800711a:	68fb      	ldr	r3, [r7, #12]
 800711c:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8007120:	461a      	mov	r2, r3
 8007122:	2300      	movs	r3, #0
 8007124:	61d3      	str	r3, [r2, #28]

  for (i = 0U; i < cfg.dev_endpoints; i++)
 8007126:	2300      	movs	r3, #0
 8007128:	613b      	str	r3, [r7, #16]
 800712a:	e043      	b.n	80071b4 <USB_DevInit+0x194>
  {
    if ((USBx_INEP(i)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 800712c:	693b      	ldr	r3, [r7, #16]
 800712e:	015a      	lsls	r2, r3, #5
 8007130:	68fb      	ldr	r3, [r7, #12]
 8007132:	4413      	add	r3, r2
 8007134:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8007138:	681b      	ldr	r3, [r3, #0]
 800713a:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 800713e:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8007142:	d118      	bne.n	8007176 <USB_DevInit+0x156>
    {
      if (i == 0U)
 8007144:	693b      	ldr	r3, [r7, #16]
 8007146:	2b00      	cmp	r3, #0
 8007148:	d10a      	bne.n	8007160 <USB_DevInit+0x140>
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_SNAK;
 800714a:	693b      	ldr	r3, [r7, #16]
 800714c:	015a      	lsls	r2, r3, #5
 800714e:	68fb      	ldr	r3, [r7, #12]
 8007150:	4413      	add	r3, r2
 8007152:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8007156:	461a      	mov	r2, r3
 8007158:	f04f 6300 	mov.w	r3, #134217728	@ 0x8000000
 800715c:	6013      	str	r3, [r2, #0]
 800715e:	e013      	b.n	8007188 <USB_DevInit+0x168>
      }
      else
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_EPDIS | USB_OTG_DIEPCTL_SNAK;
 8007160:	693b      	ldr	r3, [r7, #16]
 8007162:	015a      	lsls	r2, r3, #5
 8007164:	68fb      	ldr	r3, [r7, #12]
 8007166:	4413      	add	r3, r2
 8007168:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800716c:	461a      	mov	r2, r3
 800716e:	f04f 4390 	mov.w	r3, #1207959552	@ 0x48000000
 8007172:	6013      	str	r3, [r2, #0]
 8007174:	e008      	b.n	8007188 <USB_DevInit+0x168>
      }
    }
    else
    {
      USBx_INEP(i)->DIEPCTL = 0U;
 8007176:	693b      	ldr	r3, [r7, #16]
 8007178:	015a      	lsls	r2, r3, #5
 800717a:	68fb      	ldr	r3, [r7, #12]
 800717c:	4413      	add	r3, r2
 800717e:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8007182:	461a      	mov	r2, r3
 8007184:	2300      	movs	r3, #0
 8007186:	6013      	str	r3, [r2, #0]
    }

    USBx_INEP(i)->DIEPTSIZ = 0U;
 8007188:	693b      	ldr	r3, [r7, #16]
 800718a:	015a      	lsls	r2, r3, #5
 800718c:	68fb      	ldr	r3, [r7, #12]
 800718e:	4413      	add	r3, r2
 8007190:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8007194:	461a      	mov	r2, r3
 8007196:	2300      	movs	r3, #0
 8007198:	6113      	str	r3, [r2, #16]
    USBx_INEP(i)->DIEPINT  = 0xFB7FU;
 800719a:	693b      	ldr	r3, [r7, #16]
 800719c:	015a      	lsls	r2, r3, #5
 800719e:	68fb      	ldr	r3, [r7, #12]
 80071a0:	4413      	add	r3, r2
 80071a2:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80071a6:	461a      	mov	r2, r3
 80071a8:	f64f 337f 	movw	r3, #64383	@ 0xfb7f
 80071ac:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 80071ae:	693b      	ldr	r3, [r7, #16]
 80071b0:	3301      	adds	r3, #1
 80071b2:	613b      	str	r3, [r7, #16]
 80071b4:	f897 3024 	ldrb.w	r3, [r7, #36]	@ 0x24
 80071b8:	461a      	mov	r2, r3
 80071ba:	693b      	ldr	r3, [r7, #16]
 80071bc:	4293      	cmp	r3, r2
 80071be:	d3b5      	bcc.n	800712c <USB_DevInit+0x10c>
  }

  for (i = 0U; i < cfg.dev_endpoints; i++)
 80071c0:	2300      	movs	r3, #0
 80071c2:	613b      	str	r3, [r7, #16]
 80071c4:	e043      	b.n	800724e <USB_DevInit+0x22e>
  {
    if ((USBx_OUTEP(i)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 80071c6:	693b      	ldr	r3, [r7, #16]
 80071c8:	015a      	lsls	r2, r3, #5
 80071ca:	68fb      	ldr	r3, [r7, #12]
 80071cc:	4413      	add	r3, r2
 80071ce:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80071d2:	681b      	ldr	r3, [r3, #0]
 80071d4:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 80071d8:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 80071dc:	d118      	bne.n	8007210 <USB_DevInit+0x1f0>
    {
      if (i == 0U)
 80071de:	693b      	ldr	r3, [r7, #16]
 80071e0:	2b00      	cmp	r3, #0
 80071e2:	d10a      	bne.n	80071fa <USB_DevInit+0x1da>
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_SNAK;
 80071e4:	693b      	ldr	r3, [r7, #16]
 80071e6:	015a      	lsls	r2, r3, #5
 80071e8:	68fb      	ldr	r3, [r7, #12]
 80071ea:	4413      	add	r3, r2
 80071ec:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80071f0:	461a      	mov	r2, r3
 80071f2:	f04f 6300 	mov.w	r3, #134217728	@ 0x8000000
 80071f6:	6013      	str	r3, [r2, #0]
 80071f8:	e013      	b.n	8007222 <USB_DevInit+0x202>
      }
      else
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_EPDIS | USB_OTG_DOEPCTL_SNAK;
 80071fa:	693b      	ldr	r3, [r7, #16]
 80071fc:	015a      	lsls	r2, r3, #5
 80071fe:	68fb      	ldr	r3, [r7, #12]
 8007200:	4413      	add	r3, r2
 8007202:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8007206:	461a      	mov	r2, r3
 8007208:	f04f 4390 	mov.w	r3, #1207959552	@ 0x48000000
 800720c:	6013      	str	r3, [r2, #0]
 800720e:	e008      	b.n	8007222 <USB_DevInit+0x202>
      }
    }
    else
    {
      USBx_OUTEP(i)->DOEPCTL = 0U;
 8007210:	693b      	ldr	r3, [r7, #16]
 8007212:	015a      	lsls	r2, r3, #5
 8007214:	68fb      	ldr	r3, [r7, #12]
 8007216:	4413      	add	r3, r2
 8007218:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800721c:	461a      	mov	r2, r3
 800721e:	2300      	movs	r3, #0
 8007220:	6013      	str	r3, [r2, #0]
    }

    USBx_OUTEP(i)->DOEPTSIZ = 0U;
 8007222:	693b      	ldr	r3, [r7, #16]
 8007224:	015a      	lsls	r2, r3, #5
 8007226:	68fb      	ldr	r3, [r7, #12]
 8007228:	4413      	add	r3, r2
 800722a:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800722e:	461a      	mov	r2, r3
 8007230:	2300      	movs	r3, #0
 8007232:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(i)->DOEPINT  = 0xFB7FU;
 8007234:	693b      	ldr	r3, [r7, #16]
 8007236:	015a      	lsls	r2, r3, #5
 8007238:	68fb      	ldr	r3, [r7, #12]
 800723a:	4413      	add	r3, r2
 800723c:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8007240:	461a      	mov	r2, r3
 8007242:	f64f 337f 	movw	r3, #64383	@ 0xfb7f
 8007246:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 8007248:	693b      	ldr	r3, [r7, #16]
 800724a:	3301      	adds	r3, #1
 800724c:	613b      	str	r3, [r7, #16]
 800724e:	f897 3024 	ldrb.w	r3, [r7, #36]	@ 0x24
 8007252:	461a      	mov	r2, r3
 8007254:	693b      	ldr	r3, [r7, #16]
 8007256:	4293      	cmp	r3, r2
 8007258:	d3b5      	bcc.n	80071c6 <USB_DevInit+0x1a6>
  }

  USBx_DEVICE->DIEPMSK &= ~(USB_OTG_DIEPMSK_TXFURM);
 800725a:	68fb      	ldr	r3, [r7, #12]
 800725c:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8007260:	691b      	ldr	r3, [r3, #16]
 8007262:	68fa      	ldr	r2, [r7, #12]
 8007264:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8007268:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 800726c:	6113      	str	r3, [r2, #16]

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 800726e:	687b      	ldr	r3, [r7, #4]
 8007270:	2200      	movs	r2, #0
 8007272:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = 0xBFFFFFFFU;
 8007274:	687b      	ldr	r3, [r7, #4]
 8007276:	f06f 4280 	mvn.w	r2, #1073741824	@ 0x40000000
 800727a:	615a      	str	r2, [r3, #20]

  /* Enable the common interrupts */
  if (cfg.dma_enable == 0U)
 800727c:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 8007280:	2b00      	cmp	r3, #0
 8007282:	d105      	bne.n	8007290 <USB_DevInit+0x270>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 8007284:	687b      	ldr	r3, [r7, #4]
 8007286:	699b      	ldr	r3, [r3, #24]
 8007288:	f043 0210 	orr.w	r2, r3, #16
 800728c:	687b      	ldr	r3, [r7, #4]
 800728e:	619a      	str	r2, [r3, #24]
  }

  /* Enable interrupts matching to the Device mode ONLY */
  USBx->GINTMSK |= USB_OTG_GINTMSK_USBSUSPM | USB_OTG_GINTMSK_USBRST |
 8007290:	687b      	ldr	r3, [r7, #4]
 8007292:	699a      	ldr	r2, [r3, #24]
 8007294:	4b0f      	ldr	r3, [pc, #60]	@ (80072d4 <USB_DevInit+0x2b4>)
 8007296:	4313      	orrs	r3, r2
 8007298:	687a      	ldr	r2, [r7, #4]
 800729a:	6193      	str	r3, [r2, #24]
                   USB_OTG_GINTMSK_ENUMDNEM | USB_OTG_GINTMSK_IEPINT |
                   USB_OTG_GINTMSK_OEPINT   | USB_OTG_GINTMSK_IISOIXFRM |
                   USB_OTG_GINTMSK_PXFRM_IISOOXFRM | USB_OTG_GINTMSK_WUIM;

  if (cfg.Sof_enable != 0U)
 800729c:	f897 302a 	ldrb.w	r3, [r7, #42]	@ 0x2a
 80072a0:	2b00      	cmp	r3, #0
 80072a2:	d005      	beq.n	80072b0 <USB_DevInit+0x290>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_SOFM;
 80072a4:	687b      	ldr	r3, [r7, #4]
 80072a6:	699b      	ldr	r3, [r3, #24]
 80072a8:	f043 0208 	orr.w	r2, r3, #8
 80072ac:	687b      	ldr	r3, [r7, #4]
 80072ae:	619a      	str	r2, [r3, #24]
  }

  if (cfg.vbus_sensing_enable == 1U)
 80072b0:	f897 302e 	ldrb.w	r3, [r7, #46]	@ 0x2e
 80072b4:	2b01      	cmp	r3, #1
 80072b6:	d105      	bne.n	80072c4 <USB_DevInit+0x2a4>
  {
    USBx->GINTMSK |= (USB_OTG_GINTMSK_SRQIM | USB_OTG_GINTMSK_OTGINT);
 80072b8:	687b      	ldr	r3, [r7, #4]
 80072ba:	699a      	ldr	r2, [r3, #24]
 80072bc:	4b06      	ldr	r3, [pc, #24]	@ (80072d8 <USB_DevInit+0x2b8>)
 80072be:	4313      	orrs	r3, r2
 80072c0:	687a      	ldr	r2, [r7, #4]
 80072c2:	6193      	str	r3, [r2, #24]
  }

  return ret;
 80072c4:	7dfb      	ldrb	r3, [r7, #23]
}
 80072c6:	4618      	mov	r0, r3
 80072c8:	3718      	adds	r7, #24
 80072ca:	46bd      	mov	sp, r7
 80072cc:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 80072d0:	b004      	add	sp, #16
 80072d2:	4770      	bx	lr
 80072d4:	803c3800 	.word	0x803c3800
 80072d8:	40000004 	.word	0x40000004

080072dc <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 80072dc:	b480      	push	{r7}
 80072de:	b085      	sub	sp, #20
 80072e0:	af00      	add	r7, sp, #0
 80072e2:	6078      	str	r0, [r7, #4]
 80072e4:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 80072e6:	2300      	movs	r3, #0
 80072e8:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 80072ea:	68fb      	ldr	r3, [r7, #12]
 80072ec:	3301      	adds	r3, #1
 80072ee:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 80072f0:	68fb      	ldr	r3, [r7, #12]
 80072f2:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 80072f6:	d901      	bls.n	80072fc <USB_FlushTxFifo+0x20>
    {
      return HAL_TIMEOUT;
 80072f8:	2303      	movs	r3, #3
 80072fa:	e01b      	b.n	8007334 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 80072fc:	687b      	ldr	r3, [r7, #4]
 80072fe:	691b      	ldr	r3, [r3, #16]
 8007300:	2b00      	cmp	r3, #0
 8007302:	daf2      	bge.n	80072ea <USB_FlushTxFifo+0xe>

  /* Flush TX Fifo */
  count = 0U;
 8007304:	2300      	movs	r3, #0
 8007306:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 8007308:	683b      	ldr	r3, [r7, #0]
 800730a:	019b      	lsls	r3, r3, #6
 800730c:	f043 0220 	orr.w	r2, r3, #32
 8007310:	687b      	ldr	r3, [r7, #4]
 8007312:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8007314:	68fb      	ldr	r3, [r7, #12]
 8007316:	3301      	adds	r3, #1
 8007318:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 800731a:	68fb      	ldr	r3, [r7, #12]
 800731c:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 8007320:	d901      	bls.n	8007326 <USB_FlushTxFifo+0x4a>
    {
      return HAL_TIMEOUT;
 8007322:	2303      	movs	r3, #3
 8007324:	e006      	b.n	8007334 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 8007326:	687b      	ldr	r3, [r7, #4]
 8007328:	691b      	ldr	r3, [r3, #16]
 800732a:	f003 0320 	and.w	r3, r3, #32
 800732e:	2b20      	cmp	r3, #32
 8007330:	d0f0      	beq.n	8007314 <USB_FlushTxFifo+0x38>

  return HAL_OK;
 8007332:	2300      	movs	r3, #0
}
 8007334:	4618      	mov	r0, r3
 8007336:	3714      	adds	r7, #20
 8007338:	46bd      	mov	sp, r7
 800733a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800733e:	4770      	bx	lr

08007340 <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo  Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 8007340:	b480      	push	{r7}
 8007342:	b085      	sub	sp, #20
 8007344:	af00      	add	r7, sp, #0
 8007346:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8007348:	2300      	movs	r3, #0
 800734a:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 800734c:	68fb      	ldr	r3, [r7, #12]
 800734e:	3301      	adds	r3, #1
 8007350:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 8007352:	68fb      	ldr	r3, [r7, #12]
 8007354:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 8007358:	d901      	bls.n	800735e <USB_FlushRxFifo+0x1e>
    {
      return HAL_TIMEOUT;
 800735a:	2303      	movs	r3, #3
 800735c:	e018      	b.n	8007390 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 800735e:	687b      	ldr	r3, [r7, #4]
 8007360:	691b      	ldr	r3, [r3, #16]
 8007362:	2b00      	cmp	r3, #0
 8007364:	daf2      	bge.n	800734c <USB_FlushRxFifo+0xc>

  /* Flush RX Fifo */
  count = 0U;
 8007366:	2300      	movs	r3, #0
 8007368:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 800736a:	687b      	ldr	r3, [r7, #4]
 800736c:	2210      	movs	r2, #16
 800736e:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8007370:	68fb      	ldr	r3, [r7, #12]
 8007372:	3301      	adds	r3, #1
 8007374:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 8007376:	68fb      	ldr	r3, [r7, #12]
 8007378:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 800737c:	d901      	bls.n	8007382 <USB_FlushRxFifo+0x42>
    {
      return HAL_TIMEOUT;
 800737e:	2303      	movs	r3, #3
 8007380:	e006      	b.n	8007390 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 8007382:	687b      	ldr	r3, [r7, #4]
 8007384:	691b      	ldr	r3, [r3, #16]
 8007386:	f003 0310 	and.w	r3, r3, #16
 800738a:	2b10      	cmp	r3, #16
 800738c:	d0f0      	beq.n	8007370 <USB_FlushRxFifo+0x30>

  return HAL_OK;
 800738e:	2300      	movs	r3, #0
}
 8007390:	4618      	mov	r0, r3
 8007392:	3714      	adds	r7, #20
 8007394:	46bd      	mov	sp, r7
 8007396:	f85d 7b04 	ldr.w	r7, [sp], #4
 800739a:	4770      	bx	lr

0800739c <USB_SetDevSpeed>:
  *            @arg USB_OTG_SPEED_HIGH_IN_FULL: High speed core in Full Speed mode
  *            @arg USB_OTG_SPEED_FULL: Full speed mode
  * @retval  Hal status
  */
HAL_StatusTypeDef USB_SetDevSpeed(const USB_OTG_GlobalTypeDef *USBx, uint8_t speed)
{
 800739c:	b480      	push	{r7}
 800739e:	b085      	sub	sp, #20
 80073a0:	af00      	add	r7, sp, #0
 80073a2:	6078      	str	r0, [r7, #4]
 80073a4:	460b      	mov	r3, r1
 80073a6:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80073a8:	687b      	ldr	r3, [r7, #4]
 80073aa:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG |= speed;
 80073ac:	68fb      	ldr	r3, [r7, #12]
 80073ae:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80073b2:	681a      	ldr	r2, [r3, #0]
 80073b4:	78fb      	ldrb	r3, [r7, #3]
 80073b6:	68f9      	ldr	r1, [r7, #12]
 80073b8:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 80073bc:	4313      	orrs	r3, r2
 80073be:	600b      	str	r3, [r1, #0]
  return HAL_OK;
 80073c0:	2300      	movs	r3, #0
}
 80073c2:	4618      	mov	r0, r3
 80073c4:	3714      	adds	r7, #20
 80073c6:	46bd      	mov	sp, r7
 80073c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80073cc:	4770      	bx	lr

080073ce <USB_DevDisconnect>:
  * @brief  USB_DevDisconnect : Disconnect the USB device by disabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevDisconnect(const USB_OTG_GlobalTypeDef *USBx)
{
 80073ce:	b480      	push	{r7}
 80073d0:	b085      	sub	sp, #20
 80073d2:	af00      	add	r7, sp, #0
 80073d4:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80073d6:	687b      	ldr	r3, [r7, #4]
 80073d8:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 80073da:	68fb      	ldr	r3, [r7, #12]
 80073dc:	f503 6360 	add.w	r3, r3, #3584	@ 0xe00
 80073e0:	681b      	ldr	r3, [r3, #0]
 80073e2:	68fa      	ldr	r2, [r7, #12]
 80073e4:	f502 6260 	add.w	r2, r2, #3584	@ 0xe00
 80073e8:	f023 0303 	bic.w	r3, r3, #3
 80073ec:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 80073ee:	68fb      	ldr	r3, [r7, #12]
 80073f0:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80073f4:	685b      	ldr	r3, [r3, #4]
 80073f6:	68fa      	ldr	r2, [r7, #12]
 80073f8:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 80073fc:	f043 0302 	orr.w	r3, r3, #2
 8007400:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 8007402:	2300      	movs	r3, #0
}
 8007404:	4618      	mov	r0, r3
 8007406:	3714      	adds	r7, #20
 8007408:	46bd      	mov	sp, r7
 800740a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800740e:	4770      	bx	lr

08007410 <USB_GetMode>:
  *          This parameter can be one of these values:
  *           0 : Host
  *           1 : Device
  */
uint32_t USB_GetMode(const USB_OTG_GlobalTypeDef *USBx)
{
 8007410:	b480      	push	{r7}
 8007412:	b083      	sub	sp, #12
 8007414:	af00      	add	r7, sp, #0
 8007416:	6078      	str	r0, [r7, #4]
  return ((USBx->GINTSTS) & 0x1U);
 8007418:	687b      	ldr	r3, [r7, #4]
 800741a:	695b      	ldr	r3, [r3, #20]
 800741c:	f003 0301 	and.w	r3, r3, #1
}
 8007420:	4618      	mov	r0, r3
 8007422:	370c      	adds	r7, #12
 8007424:	46bd      	mov	sp, r7
 8007426:	f85d 7b04 	ldr.w	r7, [sp], #4
 800742a:	4770      	bx	lr

0800742c <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 800742c:	b480      	push	{r7}
 800742e:	b085      	sub	sp, #20
 8007430:	af00      	add	r7, sp, #0
 8007432:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8007434:	2300      	movs	r3, #0
 8007436:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8007438:	68fb      	ldr	r3, [r7, #12]
 800743a:	3301      	adds	r3, #1
 800743c:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 800743e:	68fb      	ldr	r3, [r7, #12]
 8007440:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 8007444:	d901      	bls.n	800744a <USB_CoreReset+0x1e>
    {
      return HAL_TIMEOUT;
 8007446:	2303      	movs	r3, #3
 8007448:	e01b      	b.n	8007482 <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 800744a:	687b      	ldr	r3, [r7, #4]
 800744c:	691b      	ldr	r3, [r3, #16]
 800744e:	2b00      	cmp	r3, #0
 8007450:	daf2      	bge.n	8007438 <USB_CoreReset+0xc>

  /* Core Soft Reset */
  count = 0U;
 8007452:	2300      	movs	r3, #0
 8007454:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 8007456:	687b      	ldr	r3, [r7, #4]
 8007458:	691b      	ldr	r3, [r3, #16]
 800745a:	f043 0201 	orr.w	r2, r3, #1
 800745e:	687b      	ldr	r3, [r7, #4]
 8007460:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8007462:	68fb      	ldr	r3, [r7, #12]
 8007464:	3301      	adds	r3, #1
 8007466:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 8007468:	68fb      	ldr	r3, [r7, #12]
 800746a:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 800746e:	d901      	bls.n	8007474 <USB_CoreReset+0x48>
    {
      return HAL_TIMEOUT;
 8007470:	2303      	movs	r3, #3
 8007472:	e006      	b.n	8007482 <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 8007474:	687b      	ldr	r3, [r7, #4]
 8007476:	691b      	ldr	r3, [r3, #16]
 8007478:	f003 0301 	and.w	r3, r3, #1
 800747c:	2b01      	cmp	r3, #1
 800747e:	d0f0      	beq.n	8007462 <USB_CoreReset+0x36>

  return HAL_OK;
 8007480:	2300      	movs	r3, #0
}
 8007482:	4618      	mov	r0, r3
 8007484:	3714      	adds	r7, #20
 8007486:	46bd      	mov	sp, r7
 8007488:	f85d 7b04 	ldr.w	r7, [sp], #4
 800748c:	4770      	bx	lr

0800748e <SVC_Setup>:
#endif /* SysTick */

/*
  Setup SVC to reset value.
*/
__STATIC_INLINE void SVC_Setup (void) {
 800748e:	b480      	push	{r7}
 8007490:	af00      	add	r7, sp, #0
  * The issue was logged under:https://github.com/ARM-software/CMSIS-FreeRTOS/issues/35
  * until it is correctly fixed, the code below is commented
  */
/*    NVIC_SetPriority (SVCall_IRQn, 0U); */
#endif
}
 8007492:	bf00      	nop
 8007494:	46bd      	mov	sp, r7
 8007496:	f85d 7b04 	ldr.w	r7, [sp], #4
 800749a:	4770      	bx	lr

0800749c <osKernelInitialize>:

/*---------------------------------------------------------------------------*/

osStatus_t osKernelInitialize (void) {
 800749c:	b480      	push	{r7}
 800749e:	b085      	sub	sp, #20
 80074a0:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 80074a2:	f3ef 8305 	mrs	r3, IPSR
 80074a6:	60bb      	str	r3, [r7, #8]
  return(result);
 80074a8:	68bb      	ldr	r3, [r7, #8]
  osStatus_t stat;

  if (IS_IRQ()) {
 80074aa:	2b00      	cmp	r3, #0
 80074ac:	d10f      	bne.n	80074ce <osKernelInitialize+0x32>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80074ae:	f3ef 8310 	mrs	r3, PRIMASK
 80074b2:	607b      	str	r3, [r7, #4]
  return(result);
 80074b4:	687b      	ldr	r3, [r7, #4]
 80074b6:	2b00      	cmp	r3, #0
 80074b8:	d105      	bne.n	80074c6 <osKernelInitialize+0x2a>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 80074ba:	f3ef 8311 	mrs	r3, BASEPRI
 80074be:	603b      	str	r3, [r7, #0]
  return(result);
 80074c0:	683b      	ldr	r3, [r7, #0]
 80074c2:	2b00      	cmp	r3, #0
 80074c4:	d007      	beq.n	80074d6 <osKernelInitialize+0x3a>
 80074c6:	4b0e      	ldr	r3, [pc, #56]	@ (8007500 <osKernelInitialize+0x64>)
 80074c8:	681b      	ldr	r3, [r3, #0]
 80074ca:	2b02      	cmp	r3, #2
 80074cc:	d103      	bne.n	80074d6 <osKernelInitialize+0x3a>
    stat = osErrorISR;
 80074ce:	f06f 0305 	mvn.w	r3, #5
 80074d2:	60fb      	str	r3, [r7, #12]
 80074d4:	e00c      	b.n	80074f0 <osKernelInitialize+0x54>
  }
  else {
    if (KernelState == osKernelInactive) {
 80074d6:	4b0a      	ldr	r3, [pc, #40]	@ (8007500 <osKernelInitialize+0x64>)
 80074d8:	681b      	ldr	r3, [r3, #0]
 80074da:	2b00      	cmp	r3, #0
 80074dc:	d105      	bne.n	80074ea <osKernelInitialize+0x4e>
      #if defined(USE_FREERTOS_HEAP_5) && (HEAP_5_REGION_SETUP == 1)
        vPortDefineHeapRegions (configHEAP_5_REGIONS);
      #endif
      KernelState = osKernelReady;
 80074de:	4b08      	ldr	r3, [pc, #32]	@ (8007500 <osKernelInitialize+0x64>)
 80074e0:	2201      	movs	r2, #1
 80074e2:	601a      	str	r2, [r3, #0]
      stat = osOK;
 80074e4:	2300      	movs	r3, #0
 80074e6:	60fb      	str	r3, [r7, #12]
 80074e8:	e002      	b.n	80074f0 <osKernelInitialize+0x54>
    } else {
      stat = osError;
 80074ea:	f04f 33ff 	mov.w	r3, #4294967295
 80074ee:	60fb      	str	r3, [r7, #12]
    }
  }

  return (stat);
 80074f0:	68fb      	ldr	r3, [r7, #12]
}
 80074f2:	4618      	mov	r0, r3
 80074f4:	3714      	adds	r7, #20
 80074f6:	46bd      	mov	sp, r7
 80074f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80074fc:	4770      	bx	lr
 80074fe:	bf00      	nop
 8007500:	2003d554 	.word	0x2003d554

08007504 <osKernelStart>:
  }

  return (state);
}

osStatus_t osKernelStart (void) {
 8007504:	b580      	push	{r7, lr}
 8007506:	b084      	sub	sp, #16
 8007508:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800750a:	f3ef 8305 	mrs	r3, IPSR
 800750e:	60bb      	str	r3, [r7, #8]
  return(result);
 8007510:	68bb      	ldr	r3, [r7, #8]
  osStatus_t stat;

  if (IS_IRQ()) {
 8007512:	2b00      	cmp	r3, #0
 8007514:	d10f      	bne.n	8007536 <osKernelStart+0x32>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8007516:	f3ef 8310 	mrs	r3, PRIMASK
 800751a:	607b      	str	r3, [r7, #4]
  return(result);
 800751c:	687b      	ldr	r3, [r7, #4]
 800751e:	2b00      	cmp	r3, #0
 8007520:	d105      	bne.n	800752e <osKernelStart+0x2a>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 8007522:	f3ef 8311 	mrs	r3, BASEPRI
 8007526:	603b      	str	r3, [r7, #0]
  return(result);
 8007528:	683b      	ldr	r3, [r7, #0]
 800752a:	2b00      	cmp	r3, #0
 800752c:	d007      	beq.n	800753e <osKernelStart+0x3a>
 800752e:	4b0f      	ldr	r3, [pc, #60]	@ (800756c <osKernelStart+0x68>)
 8007530:	681b      	ldr	r3, [r3, #0]
 8007532:	2b02      	cmp	r3, #2
 8007534:	d103      	bne.n	800753e <osKernelStart+0x3a>
    stat = osErrorISR;
 8007536:	f06f 0305 	mvn.w	r3, #5
 800753a:	60fb      	str	r3, [r7, #12]
 800753c:	e010      	b.n	8007560 <osKernelStart+0x5c>
  }
  else {
    if (KernelState == osKernelReady) {
 800753e:	4b0b      	ldr	r3, [pc, #44]	@ (800756c <osKernelStart+0x68>)
 8007540:	681b      	ldr	r3, [r3, #0]
 8007542:	2b01      	cmp	r3, #1
 8007544:	d109      	bne.n	800755a <osKernelStart+0x56>
      /* Ensure SVC priority is at the reset value */
      SVC_Setup();
 8007546:	f7ff ffa2 	bl	800748e <SVC_Setup>
      /* Change state to enable IRQ masking check */
      KernelState = osKernelRunning;
 800754a:	4b08      	ldr	r3, [pc, #32]	@ (800756c <osKernelStart+0x68>)
 800754c:	2202      	movs	r2, #2
 800754e:	601a      	str	r2, [r3, #0]
      /* Start the kernel scheduler */
      vTaskStartScheduler();
 8007550:	f001 f90e 	bl	8008770 <vTaskStartScheduler>
      stat = osOK;
 8007554:	2300      	movs	r3, #0
 8007556:	60fb      	str	r3, [r7, #12]
 8007558:	e002      	b.n	8007560 <osKernelStart+0x5c>
    } else {
      stat = osError;
 800755a:	f04f 33ff 	mov.w	r3, #4294967295
 800755e:	60fb      	str	r3, [r7, #12]
    }
  }

  return (stat);
 8007560:	68fb      	ldr	r3, [r7, #12]
}
 8007562:	4618      	mov	r0, r3
 8007564:	3710      	adds	r7, #16
 8007566:	46bd      	mov	sp, r7
 8007568:	bd80      	pop	{r7, pc}
 800756a:	bf00      	nop
 800756c:	2003d554 	.word	0x2003d554

08007570 <osThreadNew>:
  return (configCPU_CLOCK_HZ);
}

/*---------------------------------------------------------------------------*/

osThreadId_t osThreadNew (osThreadFunc_t func, void *argument, const osThreadAttr_t *attr) {
 8007570:	b580      	push	{r7, lr}
 8007572:	b090      	sub	sp, #64	@ 0x40
 8007574:	af04      	add	r7, sp, #16
 8007576:	60f8      	str	r0, [r7, #12]
 8007578:	60b9      	str	r1, [r7, #8]
 800757a:	607a      	str	r2, [r7, #4]
  uint32_t stack;
  TaskHandle_t hTask;
  UBaseType_t prio;
  int32_t mem;

  hTask = NULL;
 800757c:	2300      	movs	r3, #0
 800757e:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8007580:	f3ef 8305 	mrs	r3, IPSR
 8007584:	61fb      	str	r3, [r7, #28]
  return(result);
 8007586:	69fb      	ldr	r3, [r7, #28]

  if (!IS_IRQ() && (func != NULL)) {
 8007588:	2b00      	cmp	r3, #0
 800758a:	f040 808f 	bne.w	80076ac <osThreadNew+0x13c>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800758e:	f3ef 8310 	mrs	r3, PRIMASK
 8007592:	61bb      	str	r3, [r7, #24]
  return(result);
 8007594:	69bb      	ldr	r3, [r7, #24]
 8007596:	2b00      	cmp	r3, #0
 8007598:	d105      	bne.n	80075a6 <osThreadNew+0x36>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 800759a:	f3ef 8311 	mrs	r3, BASEPRI
 800759e:	617b      	str	r3, [r7, #20]
  return(result);
 80075a0:	697b      	ldr	r3, [r7, #20]
 80075a2:	2b00      	cmp	r3, #0
 80075a4:	d003      	beq.n	80075ae <osThreadNew+0x3e>
 80075a6:	4b44      	ldr	r3, [pc, #272]	@ (80076b8 <osThreadNew+0x148>)
 80075a8:	681b      	ldr	r3, [r3, #0]
 80075aa:	2b02      	cmp	r3, #2
 80075ac:	d07e      	beq.n	80076ac <osThreadNew+0x13c>
 80075ae:	68fb      	ldr	r3, [r7, #12]
 80075b0:	2b00      	cmp	r3, #0
 80075b2:	d07b      	beq.n	80076ac <osThreadNew+0x13c>
    stack = configMINIMAL_STACK_SIZE;
 80075b4:	2380      	movs	r3, #128	@ 0x80
 80075b6:	62bb      	str	r3, [r7, #40]	@ 0x28
    prio  = (UBaseType_t)osPriorityNormal;
 80075b8:	2318      	movs	r3, #24
 80075ba:	627b      	str	r3, [r7, #36]	@ 0x24

    name = NULL;
 80075bc:	2300      	movs	r3, #0
 80075be:	62fb      	str	r3, [r7, #44]	@ 0x2c
    mem  = -1;
 80075c0:	f04f 33ff 	mov.w	r3, #4294967295
 80075c4:	623b      	str	r3, [r7, #32]

    if (attr != NULL) {
 80075c6:	687b      	ldr	r3, [r7, #4]
 80075c8:	2b00      	cmp	r3, #0
 80075ca:	d045      	beq.n	8007658 <osThreadNew+0xe8>
      if (attr->name != NULL) {
 80075cc:	687b      	ldr	r3, [r7, #4]
 80075ce:	681b      	ldr	r3, [r3, #0]
 80075d0:	2b00      	cmp	r3, #0
 80075d2:	d002      	beq.n	80075da <osThreadNew+0x6a>
        name = attr->name;
 80075d4:	687b      	ldr	r3, [r7, #4]
 80075d6:	681b      	ldr	r3, [r3, #0]
 80075d8:	62fb      	str	r3, [r7, #44]	@ 0x2c
      }
      if (attr->priority != osPriorityNone) {
 80075da:	687b      	ldr	r3, [r7, #4]
 80075dc:	699b      	ldr	r3, [r3, #24]
 80075de:	2b00      	cmp	r3, #0
 80075e0:	d002      	beq.n	80075e8 <osThreadNew+0x78>
        prio = (UBaseType_t)attr->priority;
 80075e2:	687b      	ldr	r3, [r7, #4]
 80075e4:	699b      	ldr	r3, [r3, #24]
 80075e6:	627b      	str	r3, [r7, #36]	@ 0x24
      }

      if ((prio < osPriorityIdle) || (prio > osPriorityISR) || ((attr->attr_bits & osThreadJoinable) == osThreadJoinable)) {
 80075e8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80075ea:	2b00      	cmp	r3, #0
 80075ec:	d008      	beq.n	8007600 <osThreadNew+0x90>
 80075ee:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80075f0:	2b38      	cmp	r3, #56	@ 0x38
 80075f2:	d805      	bhi.n	8007600 <osThreadNew+0x90>
 80075f4:	687b      	ldr	r3, [r7, #4]
 80075f6:	685b      	ldr	r3, [r3, #4]
 80075f8:	f003 0301 	and.w	r3, r3, #1
 80075fc:	2b00      	cmp	r3, #0
 80075fe:	d001      	beq.n	8007604 <osThreadNew+0x94>
        return (NULL);
 8007600:	2300      	movs	r3, #0
 8007602:	e054      	b.n	80076ae <osThreadNew+0x13e>
      }

      if (attr->stack_size > 0U) {
 8007604:	687b      	ldr	r3, [r7, #4]
 8007606:	695b      	ldr	r3, [r3, #20]
 8007608:	2b00      	cmp	r3, #0
 800760a:	d003      	beq.n	8007614 <osThreadNew+0xa4>
        /* In FreeRTOS stack is not in bytes, but in sizeof(StackType_t) which is 4 on ARM ports.       */
        /* Stack size should be therefore 4 byte aligned in order to avoid division caused side effects */
        stack = attr->stack_size / sizeof(StackType_t);
 800760c:	687b      	ldr	r3, [r7, #4]
 800760e:	695b      	ldr	r3, [r3, #20]
 8007610:	089b      	lsrs	r3, r3, #2
 8007612:	62bb      	str	r3, [r7, #40]	@ 0x28
      }

      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 8007614:	687b      	ldr	r3, [r7, #4]
 8007616:	689b      	ldr	r3, [r3, #8]
 8007618:	2b00      	cmp	r3, #0
 800761a:	d00e      	beq.n	800763a <osThreadNew+0xca>
 800761c:	687b      	ldr	r3, [r7, #4]
 800761e:	68db      	ldr	r3, [r3, #12]
 8007620:	2b5b      	cmp	r3, #91	@ 0x5b
 8007622:	d90a      	bls.n	800763a <osThreadNew+0xca>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 8007624:	687b      	ldr	r3, [r7, #4]
 8007626:	691b      	ldr	r3, [r3, #16]
      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 8007628:	2b00      	cmp	r3, #0
 800762a:	d006      	beq.n	800763a <osThreadNew+0xca>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 800762c:	687b      	ldr	r3, [r7, #4]
 800762e:	695b      	ldr	r3, [r3, #20]
 8007630:	2b00      	cmp	r3, #0
 8007632:	d002      	beq.n	800763a <osThreadNew+0xca>
        mem = 1;
 8007634:	2301      	movs	r3, #1
 8007636:	623b      	str	r3, [r7, #32]
 8007638:	e010      	b.n	800765c <osThreadNew+0xec>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) && (attr->stack_mem == NULL)) {
 800763a:	687b      	ldr	r3, [r7, #4]
 800763c:	689b      	ldr	r3, [r3, #8]
 800763e:	2b00      	cmp	r3, #0
 8007640:	d10c      	bne.n	800765c <osThreadNew+0xec>
 8007642:	687b      	ldr	r3, [r7, #4]
 8007644:	68db      	ldr	r3, [r3, #12]
 8007646:	2b00      	cmp	r3, #0
 8007648:	d108      	bne.n	800765c <osThreadNew+0xec>
 800764a:	687b      	ldr	r3, [r7, #4]
 800764c:	691b      	ldr	r3, [r3, #16]
 800764e:	2b00      	cmp	r3, #0
 8007650:	d104      	bne.n	800765c <osThreadNew+0xec>
          mem = 0;
 8007652:	2300      	movs	r3, #0
 8007654:	623b      	str	r3, [r7, #32]
 8007656:	e001      	b.n	800765c <osThreadNew+0xec>
        }
      }
    }
    else {
      mem = 0;
 8007658:	2300      	movs	r3, #0
 800765a:	623b      	str	r3, [r7, #32]
    }

    if (mem == 1) {
 800765c:	6a3b      	ldr	r3, [r7, #32]
 800765e:	2b01      	cmp	r3, #1
 8007660:	d110      	bne.n	8007684 <osThreadNew+0x114>
      hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 8007662:	687b      	ldr	r3, [r7, #4]
 8007664:	691b      	ldr	r3, [r3, #16]
                                                                                    (StaticTask_t *)attr->cb_mem);
 8007666:	687a      	ldr	r2, [r7, #4]
 8007668:	6892      	ldr	r2, [r2, #8]
      hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 800766a:	9202      	str	r2, [sp, #8]
 800766c:	9301      	str	r3, [sp, #4]
 800766e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007670:	9300      	str	r3, [sp, #0]
 8007672:	68bb      	ldr	r3, [r7, #8]
 8007674:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8007676:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8007678:	68f8      	ldr	r0, [r7, #12]
 800767a:	f000 fe93 	bl	80083a4 <xTaskCreateStatic>
 800767e:	4603      	mov	r3, r0
 8007680:	613b      	str	r3, [r7, #16]
 8007682:	e013      	b.n	80076ac <osThreadNew+0x13c>
    }
    else {
      if (mem == 0) {
 8007684:	6a3b      	ldr	r3, [r7, #32]
 8007686:	2b00      	cmp	r3, #0
 8007688:	d110      	bne.n	80076ac <osThreadNew+0x13c>
        if (xTaskCreate ((TaskFunction_t)func, name, (uint16_t)stack, argument, prio, &hTask) != pdPASS) {
 800768a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800768c:	b29a      	uxth	r2, r3
 800768e:	f107 0310 	add.w	r3, r7, #16
 8007692:	9301      	str	r3, [sp, #4]
 8007694:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007696:	9300      	str	r3, [sp, #0]
 8007698:	68bb      	ldr	r3, [r7, #8]
 800769a:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 800769c:	68f8      	ldr	r0, [r7, #12]
 800769e:	f000 fee7 	bl	8008470 <xTaskCreate>
 80076a2:	4603      	mov	r3, r0
 80076a4:	2b01      	cmp	r3, #1
 80076a6:	d001      	beq.n	80076ac <osThreadNew+0x13c>
          hTask = NULL;
 80076a8:	2300      	movs	r3, #0
 80076aa:	613b      	str	r3, [r7, #16]
        }
      }
    }
  }

  return ((osThreadId_t)hTask);
 80076ac:	693b      	ldr	r3, [r7, #16]
}
 80076ae:	4618      	mov	r0, r3
 80076b0:	3730      	adds	r7, #48	@ 0x30
 80076b2:	46bd      	mov	sp, r7
 80076b4:	bd80      	pop	{r7, pc}
 80076b6:	bf00      	nop
 80076b8:	2003d554 	.word	0x2003d554

080076bc <osDelay>:

  /* Return flags before clearing */
  return (rflags);
}

osStatus_t osDelay (uint32_t ticks) {
 80076bc:	b580      	push	{r7, lr}
 80076be:	b086      	sub	sp, #24
 80076c0:	af00      	add	r7, sp, #0
 80076c2:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 80076c4:	f3ef 8305 	mrs	r3, IPSR
 80076c8:	613b      	str	r3, [r7, #16]
  return(result);
 80076ca:	693b      	ldr	r3, [r7, #16]
  osStatus_t stat;

  if (IS_IRQ()) {
 80076cc:	2b00      	cmp	r3, #0
 80076ce:	d10f      	bne.n	80076f0 <osDelay+0x34>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80076d0:	f3ef 8310 	mrs	r3, PRIMASK
 80076d4:	60fb      	str	r3, [r7, #12]
  return(result);
 80076d6:	68fb      	ldr	r3, [r7, #12]
 80076d8:	2b00      	cmp	r3, #0
 80076da:	d105      	bne.n	80076e8 <osDelay+0x2c>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 80076dc:	f3ef 8311 	mrs	r3, BASEPRI
 80076e0:	60bb      	str	r3, [r7, #8]
  return(result);
 80076e2:	68bb      	ldr	r3, [r7, #8]
 80076e4:	2b00      	cmp	r3, #0
 80076e6:	d007      	beq.n	80076f8 <osDelay+0x3c>
 80076e8:	4b0a      	ldr	r3, [pc, #40]	@ (8007714 <osDelay+0x58>)
 80076ea:	681b      	ldr	r3, [r3, #0]
 80076ec:	2b02      	cmp	r3, #2
 80076ee:	d103      	bne.n	80076f8 <osDelay+0x3c>
    stat = osErrorISR;
 80076f0:	f06f 0305 	mvn.w	r3, #5
 80076f4:	617b      	str	r3, [r7, #20]
 80076f6:	e007      	b.n	8007708 <osDelay+0x4c>
  }
  else {
    stat = osOK;
 80076f8:	2300      	movs	r3, #0
 80076fa:	617b      	str	r3, [r7, #20]

    if (ticks != 0U) {
 80076fc:	687b      	ldr	r3, [r7, #4]
 80076fe:	2b00      	cmp	r3, #0
 8007700:	d002      	beq.n	8007708 <osDelay+0x4c>
      vTaskDelay(ticks);
 8007702:	6878      	ldr	r0, [r7, #4]
 8007704:	f000 fffc 	bl	8008700 <vTaskDelay>
    }
  }

  return (stat);
 8007708:	697b      	ldr	r3, [r7, #20]
}
 800770a:	4618      	mov	r0, r3
 800770c:	3718      	adds	r7, #24
 800770e:	46bd      	mov	sp, r7
 8007710:	bd80      	pop	{r7, pc}
 8007712:	bf00      	nop
 8007714:	2003d554 	.word	0x2003d554

08007718 <vApplicationGetIdleTaskMemory>:

/*
  vApplicationGetIdleTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
void vApplicationGetIdleTaskMemory (StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize) {
 8007718:	b480      	push	{r7}
 800771a:	b085      	sub	sp, #20
 800771c:	af00      	add	r7, sp, #0
 800771e:	60f8      	str	r0, [r7, #12]
 8007720:	60b9      	str	r1, [r7, #8]
 8007722:	607a      	str	r2, [r7, #4]
  *ppxIdleTaskTCBBuffer   = &Idle_TCB;
 8007724:	68fb      	ldr	r3, [r7, #12]
 8007726:	4a07      	ldr	r2, [pc, #28]	@ (8007744 <vApplicationGetIdleTaskMemory+0x2c>)
 8007728:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &Idle_Stack[0];
 800772a:	68bb      	ldr	r3, [r7, #8]
 800772c:	4a06      	ldr	r2, [pc, #24]	@ (8007748 <vApplicationGetIdleTaskMemory+0x30>)
 800772e:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize   = (uint32_t)configMINIMAL_STACK_SIZE;
 8007730:	687b      	ldr	r3, [r7, #4]
 8007732:	2280      	movs	r2, #128	@ 0x80
 8007734:	601a      	str	r2, [r3, #0]
}
 8007736:	bf00      	nop
 8007738:	3714      	adds	r7, #20
 800773a:	46bd      	mov	sp, r7
 800773c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007740:	4770      	bx	lr
 8007742:	bf00      	nop
 8007744:	2003d558 	.word	0x2003d558
 8007748:	2003d5b4 	.word	0x2003d5b4

0800774c <vApplicationGetTimerTaskMemory>:

/*
  vApplicationGetTimerTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
void vApplicationGetTimerTaskMemory (StaticTask_t **ppxTimerTaskTCBBuffer, StackType_t **ppxTimerTaskStackBuffer, uint32_t *pulTimerTaskStackSize) {
 800774c:	b480      	push	{r7}
 800774e:	b085      	sub	sp, #20
 8007750:	af00      	add	r7, sp, #0
 8007752:	60f8      	str	r0, [r7, #12]
 8007754:	60b9      	str	r1, [r7, #8]
 8007756:	607a      	str	r2, [r7, #4]
  *ppxTimerTaskTCBBuffer   = &Timer_TCB;
 8007758:	68fb      	ldr	r3, [r7, #12]
 800775a:	4a07      	ldr	r2, [pc, #28]	@ (8007778 <vApplicationGetTimerTaskMemory+0x2c>)
 800775c:	601a      	str	r2, [r3, #0]
  *ppxTimerTaskStackBuffer = &Timer_Stack[0];
 800775e:	68bb      	ldr	r3, [r7, #8]
 8007760:	4a06      	ldr	r2, [pc, #24]	@ (800777c <vApplicationGetTimerTaskMemory+0x30>)
 8007762:	601a      	str	r2, [r3, #0]
  *pulTimerTaskStackSize   = (uint32_t)configTIMER_TASK_STACK_DEPTH;
 8007764:	687b      	ldr	r3, [r7, #4]
 8007766:	f44f 7280 	mov.w	r2, #256	@ 0x100
 800776a:	601a      	str	r2, [r3, #0]
}
 800776c:	bf00      	nop
 800776e:	3714      	adds	r7, #20
 8007770:	46bd      	mov	sp, r7
 8007772:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007776:	4770      	bx	lr
 8007778:	2003d7b4 	.word	0x2003d7b4
 800777c:	2003d810 	.word	0x2003d810

08007780 <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 8007780:	b480      	push	{r7}
 8007782:	b083      	sub	sp, #12
 8007784:	af00      	add	r7, sp, #0
 8007786:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8007788:	687b      	ldr	r3, [r7, #4]
 800778a:	f103 0208 	add.w	r2, r3, #8
 800778e:	687b      	ldr	r3, [r7, #4]
 8007790:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 8007792:	687b      	ldr	r3, [r7, #4]
 8007794:	f04f 32ff 	mov.w	r2, #4294967295
 8007798:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800779a:	687b      	ldr	r3, [r7, #4]
 800779c:	f103 0208 	add.w	r2, r3, #8
 80077a0:	687b      	ldr	r3, [r7, #4]
 80077a2:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80077a4:	687b      	ldr	r3, [r7, #4]
 80077a6:	f103 0208 	add.w	r2, r3, #8
 80077aa:	687b      	ldr	r3, [r7, #4]
 80077ac:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 80077ae:	687b      	ldr	r3, [r7, #4]
 80077b0:	2200      	movs	r2, #0
 80077b2:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 80077b4:	bf00      	nop
 80077b6:	370c      	adds	r7, #12
 80077b8:	46bd      	mov	sp, r7
 80077ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80077be:	4770      	bx	lr

080077c0 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 80077c0:	b480      	push	{r7}
 80077c2:	b083      	sub	sp, #12
 80077c4:	af00      	add	r7, sp, #0
 80077c6:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 80077c8:	687b      	ldr	r3, [r7, #4]
 80077ca:	2200      	movs	r2, #0
 80077cc:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 80077ce:	bf00      	nop
 80077d0:	370c      	adds	r7, #12
 80077d2:	46bd      	mov	sp, r7
 80077d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80077d8:	4770      	bx	lr

080077da <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 80077da:	b480      	push	{r7}
 80077dc:	b085      	sub	sp, #20
 80077de:	af00      	add	r7, sp, #0
 80077e0:	6078      	str	r0, [r7, #4]
 80077e2:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 80077e4:	687b      	ldr	r3, [r7, #4]
 80077e6:	685b      	ldr	r3, [r3, #4]
 80077e8:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 80077ea:	683b      	ldr	r3, [r7, #0]
 80077ec:	68fa      	ldr	r2, [r7, #12]
 80077ee:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 80077f0:	68fb      	ldr	r3, [r7, #12]
 80077f2:	689a      	ldr	r2, [r3, #8]
 80077f4:	683b      	ldr	r3, [r7, #0]
 80077f6:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 80077f8:	68fb      	ldr	r3, [r7, #12]
 80077fa:	689b      	ldr	r3, [r3, #8]
 80077fc:	683a      	ldr	r2, [r7, #0]
 80077fe:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 8007800:	68fb      	ldr	r3, [r7, #12]
 8007802:	683a      	ldr	r2, [r7, #0]
 8007804:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 8007806:	683b      	ldr	r3, [r7, #0]
 8007808:	687a      	ldr	r2, [r7, #4]
 800780a:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 800780c:	687b      	ldr	r3, [r7, #4]
 800780e:	681b      	ldr	r3, [r3, #0]
 8007810:	1c5a      	adds	r2, r3, #1
 8007812:	687b      	ldr	r3, [r7, #4]
 8007814:	601a      	str	r2, [r3, #0]
}
 8007816:	bf00      	nop
 8007818:	3714      	adds	r7, #20
 800781a:	46bd      	mov	sp, r7
 800781c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007820:	4770      	bx	lr

08007822 <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8007822:	b480      	push	{r7}
 8007824:	b085      	sub	sp, #20
 8007826:	af00      	add	r7, sp, #0
 8007828:	6078      	str	r0, [r7, #4]
 800782a:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 800782c:	683b      	ldr	r3, [r7, #0]
 800782e:	681b      	ldr	r3, [r3, #0]
 8007830:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 8007832:	68bb      	ldr	r3, [r7, #8]
 8007834:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007838:	d103      	bne.n	8007842 <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 800783a:	687b      	ldr	r3, [r7, #4]
 800783c:	691b      	ldr	r3, [r3, #16]
 800783e:	60fb      	str	r3, [r7, #12]
 8007840:	e00c      	b.n	800785c <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 8007842:	687b      	ldr	r3, [r7, #4]
 8007844:	3308      	adds	r3, #8
 8007846:	60fb      	str	r3, [r7, #12]
 8007848:	e002      	b.n	8007850 <vListInsert+0x2e>
 800784a:	68fb      	ldr	r3, [r7, #12]
 800784c:	685b      	ldr	r3, [r3, #4]
 800784e:	60fb      	str	r3, [r7, #12]
 8007850:	68fb      	ldr	r3, [r7, #12]
 8007852:	685b      	ldr	r3, [r3, #4]
 8007854:	681b      	ldr	r3, [r3, #0]
 8007856:	68ba      	ldr	r2, [r7, #8]
 8007858:	429a      	cmp	r2, r3
 800785a:	d2f6      	bcs.n	800784a <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 800785c:	68fb      	ldr	r3, [r7, #12]
 800785e:	685a      	ldr	r2, [r3, #4]
 8007860:	683b      	ldr	r3, [r7, #0]
 8007862:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 8007864:	683b      	ldr	r3, [r7, #0]
 8007866:	685b      	ldr	r3, [r3, #4]
 8007868:	683a      	ldr	r2, [r7, #0]
 800786a:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 800786c:	683b      	ldr	r3, [r7, #0]
 800786e:	68fa      	ldr	r2, [r7, #12]
 8007870:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 8007872:	68fb      	ldr	r3, [r7, #12]
 8007874:	683a      	ldr	r2, [r7, #0]
 8007876:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 8007878:	683b      	ldr	r3, [r7, #0]
 800787a:	687a      	ldr	r2, [r7, #4]
 800787c:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 800787e:	687b      	ldr	r3, [r7, #4]
 8007880:	681b      	ldr	r3, [r3, #0]
 8007882:	1c5a      	adds	r2, r3, #1
 8007884:	687b      	ldr	r3, [r7, #4]
 8007886:	601a      	str	r2, [r3, #0]
}
 8007888:	bf00      	nop
 800788a:	3714      	adds	r7, #20
 800788c:	46bd      	mov	sp, r7
 800788e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007892:	4770      	bx	lr

08007894 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 8007894:	b480      	push	{r7}
 8007896:	b085      	sub	sp, #20
 8007898:	af00      	add	r7, sp, #0
 800789a:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 800789c:	687b      	ldr	r3, [r7, #4]
 800789e:	691b      	ldr	r3, [r3, #16]
 80078a0:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 80078a2:	687b      	ldr	r3, [r7, #4]
 80078a4:	685b      	ldr	r3, [r3, #4]
 80078a6:	687a      	ldr	r2, [r7, #4]
 80078a8:	6892      	ldr	r2, [r2, #8]
 80078aa:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 80078ac:	687b      	ldr	r3, [r7, #4]
 80078ae:	689b      	ldr	r3, [r3, #8]
 80078b0:	687a      	ldr	r2, [r7, #4]
 80078b2:	6852      	ldr	r2, [r2, #4]
 80078b4:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 80078b6:	68fb      	ldr	r3, [r7, #12]
 80078b8:	685b      	ldr	r3, [r3, #4]
 80078ba:	687a      	ldr	r2, [r7, #4]
 80078bc:	429a      	cmp	r2, r3
 80078be:	d103      	bne.n	80078c8 <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 80078c0:	687b      	ldr	r3, [r7, #4]
 80078c2:	689a      	ldr	r2, [r3, #8]
 80078c4:	68fb      	ldr	r3, [r7, #12]
 80078c6:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 80078c8:	687b      	ldr	r3, [r7, #4]
 80078ca:	2200      	movs	r2, #0
 80078cc:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 80078ce:	68fb      	ldr	r3, [r7, #12]
 80078d0:	681b      	ldr	r3, [r3, #0]
 80078d2:	1e5a      	subs	r2, r3, #1
 80078d4:	68fb      	ldr	r3, [r7, #12]
 80078d6:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 80078d8:	68fb      	ldr	r3, [r7, #12]
 80078da:	681b      	ldr	r3, [r3, #0]
}
 80078dc:	4618      	mov	r0, r3
 80078de:	3714      	adds	r7, #20
 80078e0:	46bd      	mov	sp, r7
 80078e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80078e6:	4770      	bx	lr

080078e8 <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 80078e8:	b580      	push	{r7, lr}
 80078ea:	b084      	sub	sp, #16
 80078ec:	af00      	add	r7, sp, #0
 80078ee:	6078      	str	r0, [r7, #4]
 80078f0:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = xQueue;
 80078f2:	687b      	ldr	r3, [r7, #4]
 80078f4:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 80078f6:	68fb      	ldr	r3, [r7, #12]
 80078f8:	2b00      	cmp	r3, #0
 80078fa:	d10d      	bne.n	8007918 <xQueueGenericReset+0x30>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 80078fc:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007900:	b672      	cpsid	i
 8007902:	f383 8811 	msr	BASEPRI, r3
 8007906:	f3bf 8f6f 	isb	sy
 800790a:	f3bf 8f4f 	dsb	sy
 800790e:	b662      	cpsie	i
 8007910:	60bb      	str	r3, [r7, #8]
		"	isb														\n" \
		"	dsb														\n" \
		"	cpsie i													\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 8007912:	bf00      	nop
 8007914:	bf00      	nop
 8007916:	e7fd      	b.n	8007914 <xQueueGenericReset+0x2c>

	taskENTER_CRITICAL();
 8007918:	f002 f8e8 	bl	8009aec <vPortEnterCritical>
	{
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 800791c:	68fb      	ldr	r3, [r7, #12]
 800791e:	681a      	ldr	r2, [r3, #0]
 8007920:	68fb      	ldr	r3, [r7, #12]
 8007922:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8007924:	68f9      	ldr	r1, [r7, #12]
 8007926:	6c09      	ldr	r1, [r1, #64]	@ 0x40
 8007928:	fb01 f303 	mul.w	r3, r1, r3
 800792c:	441a      	add	r2, r3
 800792e:	68fb      	ldr	r3, [r7, #12]
 8007930:	609a      	str	r2, [r3, #8]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 8007932:	68fb      	ldr	r3, [r7, #12]
 8007934:	2200      	movs	r2, #0
 8007936:	639a      	str	r2, [r3, #56]	@ 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 8007938:	68fb      	ldr	r3, [r7, #12]
 800793a:	681a      	ldr	r2, [r3, #0]
 800793c:	68fb      	ldr	r3, [r7, #12]
 800793e:	605a      	str	r2, [r3, #4]
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8007940:	68fb      	ldr	r3, [r7, #12]
 8007942:	681a      	ldr	r2, [r3, #0]
 8007944:	68fb      	ldr	r3, [r7, #12]
 8007946:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8007948:	3b01      	subs	r3, #1
 800794a:	68f9      	ldr	r1, [r7, #12]
 800794c:	6c09      	ldr	r1, [r1, #64]	@ 0x40
 800794e:	fb01 f303 	mul.w	r3, r1, r3
 8007952:	441a      	add	r2, r3
 8007954:	68fb      	ldr	r3, [r7, #12]
 8007956:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 8007958:	68fb      	ldr	r3, [r7, #12]
 800795a:	22ff      	movs	r2, #255	@ 0xff
 800795c:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 8007960:	68fb      	ldr	r3, [r7, #12]
 8007962:	22ff      	movs	r2, #255	@ 0xff
 8007964:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

		if( xNewQueue == pdFALSE )
 8007968:	683b      	ldr	r3, [r7, #0]
 800796a:	2b00      	cmp	r3, #0
 800796c:	d114      	bne.n	8007998 <xQueueGenericReset+0xb0>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800796e:	68fb      	ldr	r3, [r7, #12]
 8007970:	691b      	ldr	r3, [r3, #16]
 8007972:	2b00      	cmp	r3, #0
 8007974:	d01a      	beq.n	80079ac <xQueueGenericReset+0xc4>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8007976:	68fb      	ldr	r3, [r7, #12]
 8007978:	3310      	adds	r3, #16
 800797a:	4618      	mov	r0, r3
 800797c:	f001 f994 	bl	8008ca8 <xTaskRemoveFromEventList>
 8007980:	4603      	mov	r3, r0
 8007982:	2b00      	cmp	r3, #0
 8007984:	d012      	beq.n	80079ac <xQueueGenericReset+0xc4>
				{
					queueYIELD_IF_USING_PREEMPTION();
 8007986:	4b0d      	ldr	r3, [pc, #52]	@ (80079bc <xQueueGenericReset+0xd4>)
 8007988:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800798c:	601a      	str	r2, [r3, #0]
 800798e:	f3bf 8f4f 	dsb	sy
 8007992:	f3bf 8f6f 	isb	sy
 8007996:	e009      	b.n	80079ac <xQueueGenericReset+0xc4>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 8007998:	68fb      	ldr	r3, [r7, #12]
 800799a:	3310      	adds	r3, #16
 800799c:	4618      	mov	r0, r3
 800799e:	f7ff feef 	bl	8007780 <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 80079a2:	68fb      	ldr	r3, [r7, #12]
 80079a4:	3324      	adds	r3, #36	@ 0x24
 80079a6:	4618      	mov	r0, r3
 80079a8:	f7ff feea 	bl	8007780 <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 80079ac:	f002 f8d4 	bl	8009b58 <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 80079b0:	2301      	movs	r3, #1
}
 80079b2:	4618      	mov	r0, r3
 80079b4:	3710      	adds	r7, #16
 80079b6:	46bd      	mov	sp, r7
 80079b8:	bd80      	pop	{r7, pc}
 80079ba:	bf00      	nop
 80079bc:	e000ed04 	.word	0xe000ed04

080079c0 <xQueueGenericCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreateStatic( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, StaticQueue_t *pxStaticQueue, const uint8_t ucQueueType )
	{
 80079c0:	b580      	push	{r7, lr}
 80079c2:	b08e      	sub	sp, #56	@ 0x38
 80079c4:	af02      	add	r7, sp, #8
 80079c6:	60f8      	str	r0, [r7, #12]
 80079c8:	60b9      	str	r1, [r7, #8]
 80079ca:	607a      	str	r2, [r7, #4]
 80079cc:	603b      	str	r3, [r7, #0]
	Queue_t *pxNewQueue;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 80079ce:	68fb      	ldr	r3, [r7, #12]
 80079d0:	2b00      	cmp	r3, #0
 80079d2:	d10d      	bne.n	80079f0 <xQueueGenericCreateStatic+0x30>
	__asm volatile
 80079d4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80079d8:	b672      	cpsid	i
 80079da:	f383 8811 	msr	BASEPRI, r3
 80079de:	f3bf 8f6f 	isb	sy
 80079e2:	f3bf 8f4f 	dsb	sy
 80079e6:	b662      	cpsie	i
 80079e8:	62bb      	str	r3, [r7, #40]	@ 0x28
}
 80079ea:	bf00      	nop
 80079ec:	bf00      	nop
 80079ee:	e7fd      	b.n	80079ec <xQueueGenericCreateStatic+0x2c>

		/* The StaticQueue_t structure and the queue storage area must be
		supplied. */
		configASSERT( pxStaticQueue != NULL );
 80079f0:	683b      	ldr	r3, [r7, #0]
 80079f2:	2b00      	cmp	r3, #0
 80079f4:	d10d      	bne.n	8007a12 <xQueueGenericCreateStatic+0x52>
	__asm volatile
 80079f6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80079fa:	b672      	cpsid	i
 80079fc:	f383 8811 	msr	BASEPRI, r3
 8007a00:	f3bf 8f6f 	isb	sy
 8007a04:	f3bf 8f4f 	dsb	sy
 8007a08:	b662      	cpsie	i
 8007a0a:	627b      	str	r3, [r7, #36]	@ 0x24
}
 8007a0c:	bf00      	nop
 8007a0e:	bf00      	nop
 8007a10:	e7fd      	b.n	8007a0e <xQueueGenericCreateStatic+0x4e>

		/* A queue storage area should be provided if the item size is not 0, and
		should not be provided if the item size is 0. */
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 8007a12:	687b      	ldr	r3, [r7, #4]
 8007a14:	2b00      	cmp	r3, #0
 8007a16:	d002      	beq.n	8007a1e <xQueueGenericCreateStatic+0x5e>
 8007a18:	68bb      	ldr	r3, [r7, #8]
 8007a1a:	2b00      	cmp	r3, #0
 8007a1c:	d001      	beq.n	8007a22 <xQueueGenericCreateStatic+0x62>
 8007a1e:	2301      	movs	r3, #1
 8007a20:	e000      	b.n	8007a24 <xQueueGenericCreateStatic+0x64>
 8007a22:	2300      	movs	r3, #0
 8007a24:	2b00      	cmp	r3, #0
 8007a26:	d10d      	bne.n	8007a44 <xQueueGenericCreateStatic+0x84>
	__asm volatile
 8007a28:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007a2c:	b672      	cpsid	i
 8007a2e:	f383 8811 	msr	BASEPRI, r3
 8007a32:	f3bf 8f6f 	isb	sy
 8007a36:	f3bf 8f4f 	dsb	sy
 8007a3a:	b662      	cpsie	i
 8007a3c:	623b      	str	r3, [r7, #32]
}
 8007a3e:	bf00      	nop
 8007a40:	bf00      	nop
 8007a42:	e7fd      	b.n	8007a40 <xQueueGenericCreateStatic+0x80>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 8007a44:	687b      	ldr	r3, [r7, #4]
 8007a46:	2b00      	cmp	r3, #0
 8007a48:	d102      	bne.n	8007a50 <xQueueGenericCreateStatic+0x90>
 8007a4a:	68bb      	ldr	r3, [r7, #8]
 8007a4c:	2b00      	cmp	r3, #0
 8007a4e:	d101      	bne.n	8007a54 <xQueueGenericCreateStatic+0x94>
 8007a50:	2301      	movs	r3, #1
 8007a52:	e000      	b.n	8007a56 <xQueueGenericCreateStatic+0x96>
 8007a54:	2300      	movs	r3, #0
 8007a56:	2b00      	cmp	r3, #0
 8007a58:	d10d      	bne.n	8007a76 <xQueueGenericCreateStatic+0xb6>
	__asm volatile
 8007a5a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007a5e:	b672      	cpsid	i
 8007a60:	f383 8811 	msr	BASEPRI, r3
 8007a64:	f3bf 8f6f 	isb	sy
 8007a68:	f3bf 8f4f 	dsb	sy
 8007a6c:	b662      	cpsie	i
 8007a6e:	61fb      	str	r3, [r7, #28]
}
 8007a70:	bf00      	nop
 8007a72:	bf00      	nop
 8007a74:	e7fd      	b.n	8007a72 <xQueueGenericCreateStatic+0xb2>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticQueue_t or StaticSemaphore_t equals the size of
			the real queue and semaphore structures. */
			volatile size_t xSize = sizeof( StaticQueue_t );
 8007a76:	2350      	movs	r3, #80	@ 0x50
 8007a78:	617b      	str	r3, [r7, #20]
			configASSERT( xSize == sizeof( Queue_t ) );
 8007a7a:	697b      	ldr	r3, [r7, #20]
 8007a7c:	2b50      	cmp	r3, #80	@ 0x50
 8007a7e:	d00d      	beq.n	8007a9c <xQueueGenericCreateStatic+0xdc>
	__asm volatile
 8007a80:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007a84:	b672      	cpsid	i
 8007a86:	f383 8811 	msr	BASEPRI, r3
 8007a8a:	f3bf 8f6f 	isb	sy
 8007a8e:	f3bf 8f4f 	dsb	sy
 8007a92:	b662      	cpsie	i
 8007a94:	61bb      	str	r3, [r7, #24]
}
 8007a96:	bf00      	nop
 8007a98:	bf00      	nop
 8007a9a:	e7fd      	b.n	8007a98 <xQueueGenericCreateStatic+0xd8>
			( void ) xSize; /* Keeps lint quiet when configASSERT() is not defined. */
 8007a9c:	697b      	ldr	r3, [r7, #20]
		#endif /* configASSERT_DEFINED */

		/* The address of a statically allocated queue was passed in, use it.
		The address of a statically allocated storage area was also passed in
		but is already set. */
		pxNewQueue = ( Queue_t * ) pxStaticQueue; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8007a9e:	683b      	ldr	r3, [r7, #0]
 8007aa0:	62fb      	str	r3, [r7, #44]	@ 0x2c

		if( pxNewQueue != NULL )
 8007aa2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8007aa4:	2b00      	cmp	r3, #0
 8007aa6:	d00d      	beq.n	8007ac4 <xQueueGenericCreateStatic+0x104>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Queues can be allocated wither statically or dynamically, so
				note this queue was allocated statically in case the queue is
				later deleted. */
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 8007aa8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8007aaa:	2201      	movs	r2, #1
 8007aac:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 8007ab0:	f897 2038 	ldrb.w	r2, [r7, #56]	@ 0x38
 8007ab4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8007ab6:	9300      	str	r3, [sp, #0]
 8007ab8:	4613      	mov	r3, r2
 8007aba:	687a      	ldr	r2, [r7, #4]
 8007abc:	68b9      	ldr	r1, [r7, #8]
 8007abe:	68f8      	ldr	r0, [r7, #12]
 8007ac0:	f000 f848 	bl	8007b54 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 8007ac4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
	}
 8007ac6:	4618      	mov	r0, r3
 8007ac8:	3730      	adds	r7, #48	@ 0x30
 8007aca:	46bd      	mov	sp, r7
 8007acc:	bd80      	pop	{r7, pc}

08007ace <xQueueGenericCreate>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreate( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, const uint8_t ucQueueType )
	{
 8007ace:	b580      	push	{r7, lr}
 8007ad0:	b08a      	sub	sp, #40	@ 0x28
 8007ad2:	af02      	add	r7, sp, #8
 8007ad4:	60f8      	str	r0, [r7, #12]
 8007ad6:	60b9      	str	r1, [r7, #8]
 8007ad8:	4613      	mov	r3, r2
 8007ada:	71fb      	strb	r3, [r7, #7]
	Queue_t *pxNewQueue;
	size_t xQueueSizeInBytes;
	uint8_t *pucQueueStorage;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 8007adc:	68fb      	ldr	r3, [r7, #12]
 8007ade:	2b00      	cmp	r3, #0
 8007ae0:	d10d      	bne.n	8007afe <xQueueGenericCreate+0x30>
	__asm volatile
 8007ae2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007ae6:	b672      	cpsid	i
 8007ae8:	f383 8811 	msr	BASEPRI, r3
 8007aec:	f3bf 8f6f 	isb	sy
 8007af0:	f3bf 8f4f 	dsb	sy
 8007af4:	b662      	cpsie	i
 8007af6:	613b      	str	r3, [r7, #16]
}
 8007af8:	bf00      	nop
 8007afa:	bf00      	nop
 8007afc:	e7fd      	b.n	8007afa <xQueueGenericCreate+0x2c>

		if( uxItemSize == ( UBaseType_t ) 0 )
 8007afe:	68bb      	ldr	r3, [r7, #8]
 8007b00:	2b00      	cmp	r3, #0
 8007b02:	d102      	bne.n	8007b0a <xQueueGenericCreate+0x3c>
		{
			/* There is not going to be a queue storage area. */
			xQueueSizeInBytes = ( size_t ) 0;
 8007b04:	2300      	movs	r3, #0
 8007b06:	61fb      	str	r3, [r7, #28]
 8007b08:	e004      	b.n	8007b14 <xQueueGenericCreate+0x46>
		}
		else
		{
			/* Allocate enough space to hold the maximum number of items that
			can be in the queue at any time. */
			xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8007b0a:	68fb      	ldr	r3, [r7, #12]
 8007b0c:	68ba      	ldr	r2, [r7, #8]
 8007b0e:	fb02 f303 	mul.w	r3, r2, r3
 8007b12:	61fb      	str	r3, [r7, #28]
		alignment requirements of the Queue_t structure - which in this case
		is an int8_t *.  Therefore, whenever the stack alignment requirements
		are greater than or equal to the pointer to char requirements the cast
		is safe.  In other cases alignment requirements are not strict (one or
		two bytes). */
		pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes ); /*lint !e9087 !e9079 see comment above. */
 8007b14:	69fb      	ldr	r3, [r7, #28]
 8007b16:	3350      	adds	r3, #80	@ 0x50
 8007b18:	4618      	mov	r0, r3
 8007b1a:	f002 f915 	bl	8009d48 <pvPortMalloc>
 8007b1e:	61b8      	str	r0, [r7, #24]

		if( pxNewQueue != NULL )
 8007b20:	69bb      	ldr	r3, [r7, #24]
 8007b22:	2b00      	cmp	r3, #0
 8007b24:	d011      	beq.n	8007b4a <xQueueGenericCreate+0x7c>
		{
			/* Jump past the queue structure to find the location of the queue
			storage area. */
			pucQueueStorage = ( uint8_t * ) pxNewQueue;
 8007b26:	69bb      	ldr	r3, [r7, #24]
 8007b28:	617b      	str	r3, [r7, #20]
			pucQueueStorage += sizeof( Queue_t ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8007b2a:	697b      	ldr	r3, [r7, #20]
 8007b2c:	3350      	adds	r3, #80	@ 0x50
 8007b2e:	617b      	str	r3, [r7, #20]
			#if( configSUPPORT_STATIC_ALLOCATION == 1 )
			{
				/* Queues can be created either statically or dynamically, so
				note this task was created dynamically in case it is later
				deleted. */
				pxNewQueue->ucStaticallyAllocated = pdFALSE;
 8007b30:	69bb      	ldr	r3, [r7, #24]
 8007b32:	2200      	movs	r2, #0
 8007b34:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 8007b38:	79fa      	ldrb	r2, [r7, #7]
 8007b3a:	69bb      	ldr	r3, [r7, #24]
 8007b3c:	9300      	str	r3, [sp, #0]
 8007b3e:	4613      	mov	r3, r2
 8007b40:	697a      	ldr	r2, [r7, #20]
 8007b42:	68b9      	ldr	r1, [r7, #8]
 8007b44:	68f8      	ldr	r0, [r7, #12]
 8007b46:	f000 f805 	bl	8007b54 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 8007b4a:	69bb      	ldr	r3, [r7, #24]
	}
 8007b4c:	4618      	mov	r0, r3
 8007b4e:	3720      	adds	r7, #32
 8007b50:	46bd      	mov	sp, r7
 8007b52:	bd80      	pop	{r7, pc}

08007b54 <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 8007b54:	b580      	push	{r7, lr}
 8007b56:	b084      	sub	sp, #16
 8007b58:	af00      	add	r7, sp, #0
 8007b5a:	60f8      	str	r0, [r7, #12]
 8007b5c:	60b9      	str	r1, [r7, #8]
 8007b5e:	607a      	str	r2, [r7, #4]
 8007b60:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 8007b62:	68bb      	ldr	r3, [r7, #8]
 8007b64:	2b00      	cmp	r3, #0
 8007b66:	d103      	bne.n	8007b70 <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 8007b68:	69bb      	ldr	r3, [r7, #24]
 8007b6a:	69ba      	ldr	r2, [r7, #24]
 8007b6c:	601a      	str	r2, [r3, #0]
 8007b6e:	e002      	b.n	8007b76 <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 8007b70:	69bb      	ldr	r3, [r7, #24]
 8007b72:	687a      	ldr	r2, [r7, #4]
 8007b74:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 8007b76:	69bb      	ldr	r3, [r7, #24]
 8007b78:	68fa      	ldr	r2, [r7, #12]
 8007b7a:	63da      	str	r2, [r3, #60]	@ 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 8007b7c:	69bb      	ldr	r3, [r7, #24]
 8007b7e:	68ba      	ldr	r2, [r7, #8]
 8007b80:	641a      	str	r2, [r3, #64]	@ 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 8007b82:	2101      	movs	r1, #1
 8007b84:	69b8      	ldr	r0, [r7, #24]
 8007b86:	f7ff feaf 	bl	80078e8 <xQueueGenericReset>

	#if ( configUSE_TRACE_FACILITY == 1 )
	{
		pxNewQueue->ucQueueType = ucQueueType;
 8007b8a:	69bb      	ldr	r3, [r7, #24]
 8007b8c:	78fa      	ldrb	r2, [r7, #3]
 8007b8e:	f883 204c 	strb.w	r2, [r3, #76]	@ 0x4c
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 8007b92:	bf00      	nop
 8007b94:	3710      	adds	r7, #16
 8007b96:	46bd      	mov	sp, r7
 8007b98:	bd80      	pop	{r7, pc}
	...

08007b9c <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 8007b9c:	b580      	push	{r7, lr}
 8007b9e:	b08e      	sub	sp, #56	@ 0x38
 8007ba0:	af00      	add	r7, sp, #0
 8007ba2:	60f8      	str	r0, [r7, #12]
 8007ba4:	60b9      	str	r1, [r7, #8]
 8007ba6:	607a      	str	r2, [r7, #4]
 8007ba8:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 8007baa:	2300      	movs	r3, #0
 8007bac:	637b      	str	r3, [r7, #52]	@ 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 8007bae:	68fb      	ldr	r3, [r7, #12]
 8007bb0:	633b      	str	r3, [r7, #48]	@ 0x30

	configASSERT( pxQueue );
 8007bb2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007bb4:	2b00      	cmp	r3, #0
 8007bb6:	d10d      	bne.n	8007bd4 <xQueueGenericSend+0x38>
	__asm volatile
 8007bb8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007bbc:	b672      	cpsid	i
 8007bbe:	f383 8811 	msr	BASEPRI, r3
 8007bc2:	f3bf 8f6f 	isb	sy
 8007bc6:	f3bf 8f4f 	dsb	sy
 8007bca:	b662      	cpsie	i
 8007bcc:	62bb      	str	r3, [r7, #40]	@ 0x28
}
 8007bce:	bf00      	nop
 8007bd0:	bf00      	nop
 8007bd2:	e7fd      	b.n	8007bd0 <xQueueGenericSend+0x34>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8007bd4:	68bb      	ldr	r3, [r7, #8]
 8007bd6:	2b00      	cmp	r3, #0
 8007bd8:	d103      	bne.n	8007be2 <xQueueGenericSend+0x46>
 8007bda:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007bdc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8007bde:	2b00      	cmp	r3, #0
 8007be0:	d101      	bne.n	8007be6 <xQueueGenericSend+0x4a>
 8007be2:	2301      	movs	r3, #1
 8007be4:	e000      	b.n	8007be8 <xQueueGenericSend+0x4c>
 8007be6:	2300      	movs	r3, #0
 8007be8:	2b00      	cmp	r3, #0
 8007bea:	d10d      	bne.n	8007c08 <xQueueGenericSend+0x6c>
	__asm volatile
 8007bec:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007bf0:	b672      	cpsid	i
 8007bf2:	f383 8811 	msr	BASEPRI, r3
 8007bf6:	f3bf 8f6f 	isb	sy
 8007bfa:	f3bf 8f4f 	dsb	sy
 8007bfe:	b662      	cpsie	i
 8007c00:	627b      	str	r3, [r7, #36]	@ 0x24
}
 8007c02:	bf00      	nop
 8007c04:	bf00      	nop
 8007c06:	e7fd      	b.n	8007c04 <xQueueGenericSend+0x68>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8007c08:	683b      	ldr	r3, [r7, #0]
 8007c0a:	2b02      	cmp	r3, #2
 8007c0c:	d103      	bne.n	8007c16 <xQueueGenericSend+0x7a>
 8007c0e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007c10:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8007c12:	2b01      	cmp	r3, #1
 8007c14:	d101      	bne.n	8007c1a <xQueueGenericSend+0x7e>
 8007c16:	2301      	movs	r3, #1
 8007c18:	e000      	b.n	8007c1c <xQueueGenericSend+0x80>
 8007c1a:	2300      	movs	r3, #0
 8007c1c:	2b00      	cmp	r3, #0
 8007c1e:	d10d      	bne.n	8007c3c <xQueueGenericSend+0xa0>
	__asm volatile
 8007c20:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007c24:	b672      	cpsid	i
 8007c26:	f383 8811 	msr	BASEPRI, r3
 8007c2a:	f3bf 8f6f 	isb	sy
 8007c2e:	f3bf 8f4f 	dsb	sy
 8007c32:	b662      	cpsie	i
 8007c34:	623b      	str	r3, [r7, #32]
}
 8007c36:	bf00      	nop
 8007c38:	bf00      	nop
 8007c3a:	e7fd      	b.n	8007c38 <xQueueGenericSend+0x9c>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8007c3c:	f001 f9fc 	bl	8009038 <xTaskGetSchedulerState>
 8007c40:	4603      	mov	r3, r0
 8007c42:	2b00      	cmp	r3, #0
 8007c44:	d102      	bne.n	8007c4c <xQueueGenericSend+0xb0>
 8007c46:	687b      	ldr	r3, [r7, #4]
 8007c48:	2b00      	cmp	r3, #0
 8007c4a:	d101      	bne.n	8007c50 <xQueueGenericSend+0xb4>
 8007c4c:	2301      	movs	r3, #1
 8007c4e:	e000      	b.n	8007c52 <xQueueGenericSend+0xb6>
 8007c50:	2300      	movs	r3, #0
 8007c52:	2b00      	cmp	r3, #0
 8007c54:	d10d      	bne.n	8007c72 <xQueueGenericSend+0xd6>
	__asm volatile
 8007c56:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007c5a:	b672      	cpsid	i
 8007c5c:	f383 8811 	msr	BASEPRI, r3
 8007c60:	f3bf 8f6f 	isb	sy
 8007c64:	f3bf 8f4f 	dsb	sy
 8007c68:	b662      	cpsie	i
 8007c6a:	61fb      	str	r3, [r7, #28]
}
 8007c6c:	bf00      	nop
 8007c6e:	bf00      	nop
 8007c70:	e7fd      	b.n	8007c6e <xQueueGenericSend+0xd2>
	/*lint -save -e904 This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8007c72:	f001 ff3b 	bl	8009aec <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8007c76:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007c78:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8007c7a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007c7c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8007c7e:	429a      	cmp	r2, r3
 8007c80:	d302      	bcc.n	8007c88 <xQueueGenericSend+0xec>
 8007c82:	683b      	ldr	r3, [r7, #0]
 8007c84:	2b02      	cmp	r3, #2
 8007c86:	d129      	bne.n	8007cdc <xQueueGenericSend+0x140>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8007c88:	683a      	ldr	r2, [r7, #0]
 8007c8a:	68b9      	ldr	r1, [r7, #8]
 8007c8c:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8007c8e:	f000 fa1b 	bl	80080c8 <prvCopyDataToQueue>
 8007c92:	62f8      	str	r0, [r7, #44]	@ 0x2c

					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8007c94:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007c96:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007c98:	2b00      	cmp	r3, #0
 8007c9a:	d010      	beq.n	8007cbe <xQueueGenericSend+0x122>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8007c9c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007c9e:	3324      	adds	r3, #36	@ 0x24
 8007ca0:	4618      	mov	r0, r3
 8007ca2:	f001 f801 	bl	8008ca8 <xTaskRemoveFromEventList>
 8007ca6:	4603      	mov	r3, r0
 8007ca8:	2b00      	cmp	r3, #0
 8007caa:	d013      	beq.n	8007cd4 <xQueueGenericSend+0x138>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 8007cac:	4b3f      	ldr	r3, [pc, #252]	@ (8007dac <xQueueGenericSend+0x210>)
 8007cae:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8007cb2:	601a      	str	r2, [r3, #0]
 8007cb4:	f3bf 8f4f 	dsb	sy
 8007cb8:	f3bf 8f6f 	isb	sy
 8007cbc:	e00a      	b.n	8007cd4 <xQueueGenericSend+0x138>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 8007cbe:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8007cc0:	2b00      	cmp	r3, #0
 8007cc2:	d007      	beq.n	8007cd4 <xQueueGenericSend+0x138>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 8007cc4:	4b39      	ldr	r3, [pc, #228]	@ (8007dac <xQueueGenericSend+0x210>)
 8007cc6:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8007cca:	601a      	str	r2, [r3, #0]
 8007ccc:	f3bf 8f4f 	dsb	sy
 8007cd0:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 8007cd4:	f001 ff40 	bl	8009b58 <vPortExitCritical>
				return pdPASS;
 8007cd8:	2301      	movs	r3, #1
 8007cda:	e063      	b.n	8007da4 <xQueueGenericSend+0x208>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8007cdc:	687b      	ldr	r3, [r7, #4]
 8007cde:	2b00      	cmp	r3, #0
 8007ce0:	d103      	bne.n	8007cea <xQueueGenericSend+0x14e>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 8007ce2:	f001 ff39 	bl	8009b58 <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 8007ce6:	2300      	movs	r3, #0
 8007ce8:	e05c      	b.n	8007da4 <xQueueGenericSend+0x208>
				}
				else if( xEntryTimeSet == pdFALSE )
 8007cea:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8007cec:	2b00      	cmp	r3, #0
 8007cee:	d106      	bne.n	8007cfe <xQueueGenericSend+0x162>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8007cf0:	f107 0314 	add.w	r3, r7, #20
 8007cf4:	4618      	mov	r0, r3
 8007cf6:	f001 f83d 	bl	8008d74 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8007cfa:	2301      	movs	r3, #1
 8007cfc:	637b      	str	r3, [r7, #52]	@ 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8007cfe:	f001 ff2b 	bl	8009b58 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 8007d02:	f000 fda1 	bl	8008848 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8007d06:	f001 fef1 	bl	8009aec <vPortEnterCritical>
 8007d0a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007d0c:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 8007d10:	b25b      	sxtb	r3, r3
 8007d12:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007d16:	d103      	bne.n	8007d20 <xQueueGenericSend+0x184>
 8007d18:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007d1a:	2200      	movs	r2, #0
 8007d1c:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8007d20:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007d22:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8007d26:	b25b      	sxtb	r3, r3
 8007d28:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007d2c:	d103      	bne.n	8007d36 <xQueueGenericSend+0x19a>
 8007d2e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007d30:	2200      	movs	r2, #0
 8007d32:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8007d36:	f001 ff0f 	bl	8009b58 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8007d3a:	1d3a      	adds	r2, r7, #4
 8007d3c:	f107 0314 	add.w	r3, r7, #20
 8007d40:	4611      	mov	r1, r2
 8007d42:	4618      	mov	r0, r3
 8007d44:	f001 f82c 	bl	8008da0 <xTaskCheckForTimeOut>
 8007d48:	4603      	mov	r3, r0
 8007d4a:	2b00      	cmp	r3, #0
 8007d4c:	d124      	bne.n	8007d98 <xQueueGenericSend+0x1fc>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 8007d4e:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8007d50:	f000 fab2 	bl	80082b8 <prvIsQueueFull>
 8007d54:	4603      	mov	r3, r0
 8007d56:	2b00      	cmp	r3, #0
 8007d58:	d018      	beq.n	8007d8c <xQueueGenericSend+0x1f0>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 8007d5a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007d5c:	3310      	adds	r3, #16
 8007d5e:	687a      	ldr	r2, [r7, #4]
 8007d60:	4611      	mov	r1, r2
 8007d62:	4618      	mov	r0, r3
 8007d64:	f000 ff4a 	bl	8008bfc <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 8007d68:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8007d6a:	f000 fa3d 	bl	80081e8 <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 8007d6e:	f000 fd79 	bl	8008864 <xTaskResumeAll>
 8007d72:	4603      	mov	r3, r0
 8007d74:	2b00      	cmp	r3, #0
 8007d76:	f47f af7c 	bne.w	8007c72 <xQueueGenericSend+0xd6>
				{
					portYIELD_WITHIN_API();
 8007d7a:	4b0c      	ldr	r3, [pc, #48]	@ (8007dac <xQueueGenericSend+0x210>)
 8007d7c:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8007d80:	601a      	str	r2, [r3, #0]
 8007d82:	f3bf 8f4f 	dsb	sy
 8007d86:	f3bf 8f6f 	isb	sy
 8007d8a:	e772      	b.n	8007c72 <xQueueGenericSend+0xd6>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 8007d8c:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8007d8e:	f000 fa2b 	bl	80081e8 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8007d92:	f000 fd67 	bl	8008864 <xTaskResumeAll>
 8007d96:	e76c      	b.n	8007c72 <xQueueGenericSend+0xd6>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 8007d98:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8007d9a:	f000 fa25 	bl	80081e8 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8007d9e:	f000 fd61 	bl	8008864 <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 8007da2:	2300      	movs	r3, #0
		}
	} /*lint -restore */
}
 8007da4:	4618      	mov	r0, r3
 8007da6:	3738      	adds	r7, #56	@ 0x38
 8007da8:	46bd      	mov	sp, r7
 8007daa:	bd80      	pop	{r7, pc}
 8007dac:	e000ed04 	.word	0xe000ed04

08007db0 <xQueueGenericSendFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue, const void * const pvItemToQueue, BaseType_t * const pxHigherPriorityTaskWoken, const BaseType_t xCopyPosition )
{
 8007db0:	b580      	push	{r7, lr}
 8007db2:	b08e      	sub	sp, #56	@ 0x38
 8007db4:	af00      	add	r7, sp, #0
 8007db6:	60f8      	str	r0, [r7, #12]
 8007db8:	60b9      	str	r1, [r7, #8]
 8007dba:	607a      	str	r2, [r7, #4]
 8007dbc:	603b      	str	r3, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 8007dbe:	68fb      	ldr	r3, [r7, #12]
 8007dc0:	633b      	str	r3, [r7, #48]	@ 0x30

	configASSERT( pxQueue );
 8007dc2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007dc4:	2b00      	cmp	r3, #0
 8007dc6:	d10d      	bne.n	8007de4 <xQueueGenericSendFromISR+0x34>
	__asm volatile
 8007dc8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007dcc:	b672      	cpsid	i
 8007dce:	f383 8811 	msr	BASEPRI, r3
 8007dd2:	f3bf 8f6f 	isb	sy
 8007dd6:	f3bf 8f4f 	dsb	sy
 8007dda:	b662      	cpsie	i
 8007ddc:	627b      	str	r3, [r7, #36]	@ 0x24
}
 8007dde:	bf00      	nop
 8007de0:	bf00      	nop
 8007de2:	e7fd      	b.n	8007de0 <xQueueGenericSendFromISR+0x30>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8007de4:	68bb      	ldr	r3, [r7, #8]
 8007de6:	2b00      	cmp	r3, #0
 8007de8:	d103      	bne.n	8007df2 <xQueueGenericSendFromISR+0x42>
 8007dea:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007dec:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8007dee:	2b00      	cmp	r3, #0
 8007df0:	d101      	bne.n	8007df6 <xQueueGenericSendFromISR+0x46>
 8007df2:	2301      	movs	r3, #1
 8007df4:	e000      	b.n	8007df8 <xQueueGenericSendFromISR+0x48>
 8007df6:	2300      	movs	r3, #0
 8007df8:	2b00      	cmp	r3, #0
 8007dfa:	d10d      	bne.n	8007e18 <xQueueGenericSendFromISR+0x68>
	__asm volatile
 8007dfc:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007e00:	b672      	cpsid	i
 8007e02:	f383 8811 	msr	BASEPRI, r3
 8007e06:	f3bf 8f6f 	isb	sy
 8007e0a:	f3bf 8f4f 	dsb	sy
 8007e0e:	b662      	cpsie	i
 8007e10:	623b      	str	r3, [r7, #32]
}
 8007e12:	bf00      	nop
 8007e14:	bf00      	nop
 8007e16:	e7fd      	b.n	8007e14 <xQueueGenericSendFromISR+0x64>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8007e18:	683b      	ldr	r3, [r7, #0]
 8007e1a:	2b02      	cmp	r3, #2
 8007e1c:	d103      	bne.n	8007e26 <xQueueGenericSendFromISR+0x76>
 8007e1e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007e20:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8007e22:	2b01      	cmp	r3, #1
 8007e24:	d101      	bne.n	8007e2a <xQueueGenericSendFromISR+0x7a>
 8007e26:	2301      	movs	r3, #1
 8007e28:	e000      	b.n	8007e2c <xQueueGenericSendFromISR+0x7c>
 8007e2a:	2300      	movs	r3, #0
 8007e2c:	2b00      	cmp	r3, #0
 8007e2e:	d10d      	bne.n	8007e4c <xQueueGenericSendFromISR+0x9c>
	__asm volatile
 8007e30:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007e34:	b672      	cpsid	i
 8007e36:	f383 8811 	msr	BASEPRI, r3
 8007e3a:	f3bf 8f6f 	isb	sy
 8007e3e:	f3bf 8f4f 	dsb	sy
 8007e42:	b662      	cpsie	i
 8007e44:	61fb      	str	r3, [r7, #28]
}
 8007e46:	bf00      	nop
 8007e48:	bf00      	nop
 8007e4a:	e7fd      	b.n	8007e48 <xQueueGenericSendFromISR+0x98>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8007e4c:	f001 ff36 	bl	8009cbc <vPortValidateInterruptPriority>

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 8007e50:	f3ef 8211 	mrs	r2, BASEPRI
 8007e54:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007e58:	b672      	cpsid	i
 8007e5a:	f383 8811 	msr	BASEPRI, r3
 8007e5e:	f3bf 8f6f 	isb	sy
 8007e62:	f3bf 8f4f 	dsb	sy
 8007e66:	b662      	cpsie	i
 8007e68:	61ba      	str	r2, [r7, #24]
 8007e6a:	617b      	str	r3, [r7, #20]
		:"=r" (ulOriginalBASEPRI), "=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);

	/* This return will not be reached but is necessary to prevent compiler
	warnings. */
	return ulOriginalBASEPRI;
 8007e6c:	69bb      	ldr	r3, [r7, #24]
	/* Similar to xQueueGenericSend, except without blocking if there is no room
	in the queue.  Also don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 8007e6e:	62fb      	str	r3, [r7, #44]	@ 0x2c
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8007e70:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007e72:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8007e74:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007e76:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8007e78:	429a      	cmp	r2, r3
 8007e7a:	d302      	bcc.n	8007e82 <xQueueGenericSendFromISR+0xd2>
 8007e7c:	683b      	ldr	r3, [r7, #0]
 8007e7e:	2b02      	cmp	r3, #2
 8007e80:	d12c      	bne.n	8007edc <xQueueGenericSendFromISR+0x12c>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 8007e82:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007e84:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8007e88:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
			/* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
			semaphore or mutex.  That means prvCopyDataToQueue() cannot result
			in a task disinheriting a priority and prvCopyDataToQueue() can be
			called here even though the disinherit function does not check if
			the scheduler is suspended before accessing the ready lists. */
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8007e8c:	683a      	ldr	r2, [r7, #0]
 8007e8e:	68b9      	ldr	r1, [r7, #8]
 8007e90:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8007e92:	f000 f919 	bl	80080c8 <prvCopyDataToQueue>

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 8007e96:	f997 302b 	ldrsb.w	r3, [r7, #43]	@ 0x2b
 8007e9a:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007e9e:	d112      	bne.n	8007ec6 <xQueueGenericSendFromISR+0x116>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8007ea0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007ea2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007ea4:	2b00      	cmp	r3, #0
 8007ea6:	d016      	beq.n	8007ed6 <xQueueGenericSendFromISR+0x126>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8007ea8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007eaa:	3324      	adds	r3, #36	@ 0x24
 8007eac:	4618      	mov	r0, r3
 8007eae:	f000 fefb 	bl	8008ca8 <xTaskRemoveFromEventList>
 8007eb2:	4603      	mov	r3, r0
 8007eb4:	2b00      	cmp	r3, #0
 8007eb6:	d00e      	beq.n	8007ed6 <xQueueGenericSendFromISR+0x126>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 8007eb8:	687b      	ldr	r3, [r7, #4]
 8007eba:	2b00      	cmp	r3, #0
 8007ebc:	d00b      	beq.n	8007ed6 <xQueueGenericSendFromISR+0x126>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 8007ebe:	687b      	ldr	r3, [r7, #4]
 8007ec0:	2201      	movs	r2, #1
 8007ec2:	601a      	str	r2, [r3, #0]
 8007ec4:	e007      	b.n	8007ed6 <xQueueGenericSendFromISR+0x126>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 8007ec6:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
 8007eca:	3301      	adds	r3, #1
 8007ecc:	b2db      	uxtb	r3, r3
 8007ece:	b25a      	sxtb	r2, r3
 8007ed0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007ed2:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
			}

			xReturn = pdPASS;
 8007ed6:	2301      	movs	r3, #1
 8007ed8:	637b      	str	r3, [r7, #52]	@ 0x34
		{
 8007eda:	e001      	b.n	8007ee0 <xQueueGenericSendFromISR+0x130>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 8007edc:	2300      	movs	r3, #0
 8007ede:	637b      	str	r3, [r7, #52]	@ 0x34
 8007ee0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8007ee2:	613b      	str	r3, [r7, #16]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 8007ee4:	693b      	ldr	r3, [r7, #16]
 8007ee6:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 8007eea:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 8007eec:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
}
 8007eee:	4618      	mov	r0, r3
 8007ef0:	3738      	adds	r7, #56	@ 0x38
 8007ef2:	46bd      	mov	sp, r7
 8007ef4:	bd80      	pop	{r7, pc}
	...

08007ef8 <xQueueReceive>:
	return xReturn;
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
 8007ef8:	b580      	push	{r7, lr}
 8007efa:	b08c      	sub	sp, #48	@ 0x30
 8007efc:	af00      	add	r7, sp, #0
 8007efe:	60f8      	str	r0, [r7, #12]
 8007f00:	60b9      	str	r1, [r7, #8]
 8007f02:	607a      	str	r2, [r7, #4]
BaseType_t xEntryTimeSet = pdFALSE;
 8007f04:	2300      	movs	r3, #0
 8007f06:	62fb      	str	r3, [r7, #44]	@ 0x2c
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 8007f08:	68fb      	ldr	r3, [r7, #12]
 8007f0a:	62bb      	str	r3, [r7, #40]	@ 0x28

	/* Check the pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 8007f0c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007f0e:	2b00      	cmp	r3, #0
 8007f10:	d10d      	bne.n	8007f2e <xQueueReceive+0x36>
	__asm volatile
 8007f12:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007f16:	b672      	cpsid	i
 8007f18:	f383 8811 	msr	BASEPRI, r3
 8007f1c:	f3bf 8f6f 	isb	sy
 8007f20:	f3bf 8f4f 	dsb	sy
 8007f24:	b662      	cpsie	i
 8007f26:	623b      	str	r3, [r7, #32]
}
 8007f28:	bf00      	nop
 8007f2a:	bf00      	nop
 8007f2c:	e7fd      	b.n	8007f2a <xQueueReceive+0x32>

	/* The buffer into which data is received can only be NULL if the data size
	is zero (so no data is copied into the buffer. */
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8007f2e:	68bb      	ldr	r3, [r7, #8]
 8007f30:	2b00      	cmp	r3, #0
 8007f32:	d103      	bne.n	8007f3c <xQueueReceive+0x44>
 8007f34:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007f36:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8007f38:	2b00      	cmp	r3, #0
 8007f3a:	d101      	bne.n	8007f40 <xQueueReceive+0x48>
 8007f3c:	2301      	movs	r3, #1
 8007f3e:	e000      	b.n	8007f42 <xQueueReceive+0x4a>
 8007f40:	2300      	movs	r3, #0
 8007f42:	2b00      	cmp	r3, #0
 8007f44:	d10d      	bne.n	8007f62 <xQueueReceive+0x6a>
	__asm volatile
 8007f46:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007f4a:	b672      	cpsid	i
 8007f4c:	f383 8811 	msr	BASEPRI, r3
 8007f50:	f3bf 8f6f 	isb	sy
 8007f54:	f3bf 8f4f 	dsb	sy
 8007f58:	b662      	cpsie	i
 8007f5a:	61fb      	str	r3, [r7, #28]
}
 8007f5c:	bf00      	nop
 8007f5e:	bf00      	nop
 8007f60:	e7fd      	b.n	8007f5e <xQueueReceive+0x66>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8007f62:	f001 f869 	bl	8009038 <xTaskGetSchedulerState>
 8007f66:	4603      	mov	r3, r0
 8007f68:	2b00      	cmp	r3, #0
 8007f6a:	d102      	bne.n	8007f72 <xQueueReceive+0x7a>
 8007f6c:	687b      	ldr	r3, [r7, #4]
 8007f6e:	2b00      	cmp	r3, #0
 8007f70:	d101      	bne.n	8007f76 <xQueueReceive+0x7e>
 8007f72:	2301      	movs	r3, #1
 8007f74:	e000      	b.n	8007f78 <xQueueReceive+0x80>
 8007f76:	2300      	movs	r3, #0
 8007f78:	2b00      	cmp	r3, #0
 8007f7a:	d10d      	bne.n	8007f98 <xQueueReceive+0xa0>
	__asm volatile
 8007f7c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007f80:	b672      	cpsid	i
 8007f82:	f383 8811 	msr	BASEPRI, r3
 8007f86:	f3bf 8f6f 	isb	sy
 8007f8a:	f3bf 8f4f 	dsb	sy
 8007f8e:	b662      	cpsie	i
 8007f90:	61bb      	str	r3, [r7, #24]
}
 8007f92:	bf00      	nop
 8007f94:	bf00      	nop
 8007f96:	e7fd      	b.n	8007f94 <xQueueReceive+0x9c>
	/*lint -save -e904  This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8007f98:	f001 fda8 	bl	8009aec <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8007f9c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007f9e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8007fa0:	627b      	str	r3, [r7, #36]	@ 0x24

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8007fa2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007fa4:	2b00      	cmp	r3, #0
 8007fa6:	d01f      	beq.n	8007fe8 <xQueueReceive+0xf0>
			{
				/* Data available, remove one item. */
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 8007fa8:	68b9      	ldr	r1, [r7, #8]
 8007faa:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8007fac:	f000 f8f6 	bl	800819c <prvCopyDataFromQueue>
				traceQUEUE_RECEIVE( pxQueue );
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 8007fb0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007fb2:	1e5a      	subs	r2, r3, #1
 8007fb4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007fb6:	639a      	str	r2, [r3, #56]	@ 0x38

				/* There is now space in the queue, were any tasks waiting to
				post to the queue?  If so, unblock the highest priority waiting
				task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8007fb8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007fba:	691b      	ldr	r3, [r3, #16]
 8007fbc:	2b00      	cmp	r3, #0
 8007fbe:	d00f      	beq.n	8007fe0 <xQueueReceive+0xe8>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8007fc0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007fc2:	3310      	adds	r3, #16
 8007fc4:	4618      	mov	r0, r3
 8007fc6:	f000 fe6f 	bl	8008ca8 <xTaskRemoveFromEventList>
 8007fca:	4603      	mov	r3, r0
 8007fcc:	2b00      	cmp	r3, #0
 8007fce:	d007      	beq.n	8007fe0 <xQueueReceive+0xe8>
					{
						queueYIELD_IF_USING_PREEMPTION();
 8007fd0:	4b3c      	ldr	r3, [pc, #240]	@ (80080c4 <xQueueReceive+0x1cc>)
 8007fd2:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8007fd6:	601a      	str	r2, [r3, #0]
 8007fd8:	f3bf 8f4f 	dsb	sy
 8007fdc:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 8007fe0:	f001 fdba 	bl	8009b58 <vPortExitCritical>
				return pdPASS;
 8007fe4:	2301      	movs	r3, #1
 8007fe6:	e069      	b.n	80080bc <xQueueReceive+0x1c4>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8007fe8:	687b      	ldr	r3, [r7, #4]
 8007fea:	2b00      	cmp	r3, #0
 8007fec:	d103      	bne.n	8007ff6 <xQueueReceive+0xfe>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 8007fee:	f001 fdb3 	bl	8009b58 <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 8007ff2:	2300      	movs	r3, #0
 8007ff4:	e062      	b.n	80080bc <xQueueReceive+0x1c4>
				}
				else if( xEntryTimeSet == pdFALSE )
 8007ff6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8007ff8:	2b00      	cmp	r3, #0
 8007ffa:	d106      	bne.n	800800a <xQueueReceive+0x112>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8007ffc:	f107 0310 	add.w	r3, r7, #16
 8008000:	4618      	mov	r0, r3
 8008002:	f000 feb7 	bl	8008d74 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8008006:	2301      	movs	r3, #1
 8008008:	62fb      	str	r3, [r7, #44]	@ 0x2c
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 800800a:	f001 fda5 	bl	8009b58 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 800800e:	f000 fc1b 	bl	8008848 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8008012:	f001 fd6b 	bl	8009aec <vPortEnterCritical>
 8008016:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008018:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 800801c:	b25b      	sxtb	r3, r3
 800801e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008022:	d103      	bne.n	800802c <xQueueReceive+0x134>
 8008024:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008026:	2200      	movs	r2, #0
 8008028:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 800802c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800802e:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8008032:	b25b      	sxtb	r3, r3
 8008034:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008038:	d103      	bne.n	8008042 <xQueueReceive+0x14a>
 800803a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800803c:	2200      	movs	r2, #0
 800803e:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8008042:	f001 fd89 	bl	8009b58 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8008046:	1d3a      	adds	r2, r7, #4
 8008048:	f107 0310 	add.w	r3, r7, #16
 800804c:	4611      	mov	r1, r2
 800804e:	4618      	mov	r0, r3
 8008050:	f000 fea6 	bl	8008da0 <xTaskCheckForTimeOut>
 8008054:	4603      	mov	r3, r0
 8008056:	2b00      	cmp	r3, #0
 8008058:	d123      	bne.n	80080a2 <xQueueReceive+0x1aa>
		{
			/* The timeout has not expired.  If the queue is still empty place
			the task on the list of tasks waiting to receive from the queue. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800805a:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800805c:	f000 f916 	bl	800828c <prvIsQueueEmpty>
 8008060:	4603      	mov	r3, r0
 8008062:	2b00      	cmp	r3, #0
 8008064:	d017      	beq.n	8008096 <xQueueReceive+0x19e>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 8008066:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008068:	3324      	adds	r3, #36	@ 0x24
 800806a:	687a      	ldr	r2, [r7, #4]
 800806c:	4611      	mov	r1, r2
 800806e:	4618      	mov	r0, r3
 8008070:	f000 fdc4 	bl	8008bfc <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 8008074:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8008076:	f000 f8b7 	bl	80081e8 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 800807a:	f000 fbf3 	bl	8008864 <xTaskResumeAll>
 800807e:	4603      	mov	r3, r0
 8008080:	2b00      	cmp	r3, #0
 8008082:	d189      	bne.n	8007f98 <xQueueReceive+0xa0>
				{
					portYIELD_WITHIN_API();
 8008084:	4b0f      	ldr	r3, [pc, #60]	@ (80080c4 <xQueueReceive+0x1cc>)
 8008086:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800808a:	601a      	str	r2, [r3, #0]
 800808c:	f3bf 8f4f 	dsb	sy
 8008090:	f3bf 8f6f 	isb	sy
 8008094:	e780      	b.n	8007f98 <xQueueReceive+0xa0>
			}
			else
			{
				/* The queue contains data again.  Loop back to try and read the
				data. */
				prvUnlockQueue( pxQueue );
 8008096:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8008098:	f000 f8a6 	bl	80081e8 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 800809c:	f000 fbe2 	bl	8008864 <xTaskResumeAll>
 80080a0:	e77a      	b.n	8007f98 <xQueueReceive+0xa0>
		}
		else
		{
			/* Timed out.  If there is no data in the queue exit, otherwise loop
			back and attempt to read the data. */
			prvUnlockQueue( pxQueue );
 80080a2:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 80080a4:	f000 f8a0 	bl	80081e8 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 80080a8:	f000 fbdc 	bl	8008864 <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 80080ac:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 80080ae:	f000 f8ed 	bl	800828c <prvIsQueueEmpty>
 80080b2:	4603      	mov	r3, r0
 80080b4:	2b00      	cmp	r3, #0
 80080b6:	f43f af6f 	beq.w	8007f98 <xQueueReceive+0xa0>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 80080ba:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 80080bc:	4618      	mov	r0, r3
 80080be:	3730      	adds	r7, #48	@ 0x30
 80080c0:	46bd      	mov	sp, r7
 80080c2:	bd80      	pop	{r7, pc}
 80080c4:	e000ed04 	.word	0xe000ed04

080080c8 <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 80080c8:	b580      	push	{r7, lr}
 80080ca:	b086      	sub	sp, #24
 80080cc:	af00      	add	r7, sp, #0
 80080ce:	60f8      	str	r0, [r7, #12]
 80080d0:	60b9      	str	r1, [r7, #8]
 80080d2:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 80080d4:	2300      	movs	r3, #0
 80080d6:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 80080d8:	68fb      	ldr	r3, [r7, #12]
 80080da:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80080dc:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 80080de:	68fb      	ldr	r3, [r7, #12]
 80080e0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80080e2:	2b00      	cmp	r3, #0
 80080e4:	d10d      	bne.n	8008102 <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 80080e6:	68fb      	ldr	r3, [r7, #12]
 80080e8:	681b      	ldr	r3, [r3, #0]
 80080ea:	2b00      	cmp	r3, #0
 80080ec:	d14d      	bne.n	800818a <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 80080ee:	68fb      	ldr	r3, [r7, #12]
 80080f0:	689b      	ldr	r3, [r3, #8]
 80080f2:	4618      	mov	r0, r3
 80080f4:	f000 ffbe 	bl	8009074 <xTaskPriorityDisinherit>
 80080f8:	6178      	str	r0, [r7, #20]
				pxQueue->u.xSemaphore.xMutexHolder = NULL;
 80080fa:	68fb      	ldr	r3, [r7, #12]
 80080fc:	2200      	movs	r2, #0
 80080fe:	609a      	str	r2, [r3, #8]
 8008100:	e043      	b.n	800818a <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 8008102:	687b      	ldr	r3, [r7, #4]
 8008104:	2b00      	cmp	r3, #0
 8008106:	d119      	bne.n	800813c <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8008108:	68fb      	ldr	r3, [r7, #12]
 800810a:	6858      	ldr	r0, [r3, #4]
 800810c:	68fb      	ldr	r3, [r7, #12]
 800810e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8008110:	461a      	mov	r2, r3
 8008112:	68b9      	ldr	r1, [r7, #8]
 8008114:	f007 ffd7 	bl	80100c6 <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8008118:	68fb      	ldr	r3, [r7, #12]
 800811a:	685a      	ldr	r2, [r3, #4]
 800811c:	68fb      	ldr	r3, [r7, #12]
 800811e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8008120:	441a      	add	r2, r3
 8008122:	68fb      	ldr	r3, [r7, #12]
 8008124:	605a      	str	r2, [r3, #4]
		if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8008126:	68fb      	ldr	r3, [r7, #12]
 8008128:	685a      	ldr	r2, [r3, #4]
 800812a:	68fb      	ldr	r3, [r7, #12]
 800812c:	689b      	ldr	r3, [r3, #8]
 800812e:	429a      	cmp	r2, r3
 8008130:	d32b      	bcc.n	800818a <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 8008132:	68fb      	ldr	r3, [r7, #12]
 8008134:	681a      	ldr	r2, [r3, #0]
 8008136:	68fb      	ldr	r3, [r7, #12]
 8008138:	605a      	str	r2, [r3, #4]
 800813a:	e026      	b.n	800818a <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 800813c:	68fb      	ldr	r3, [r7, #12]
 800813e:	68d8      	ldr	r0, [r3, #12]
 8008140:	68fb      	ldr	r3, [r7, #12]
 8008142:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8008144:	461a      	mov	r2, r3
 8008146:	68b9      	ldr	r1, [r7, #8]
 8008148:	f007 ffbd 	bl	80100c6 <memcpy>
		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 800814c:	68fb      	ldr	r3, [r7, #12]
 800814e:	68da      	ldr	r2, [r3, #12]
 8008150:	68fb      	ldr	r3, [r7, #12]
 8008152:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8008154:	425b      	negs	r3, r3
 8008156:	441a      	add	r2, r3
 8008158:	68fb      	ldr	r3, [r7, #12]
 800815a:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 800815c:	68fb      	ldr	r3, [r7, #12]
 800815e:	68da      	ldr	r2, [r3, #12]
 8008160:	68fb      	ldr	r3, [r7, #12]
 8008162:	681b      	ldr	r3, [r3, #0]
 8008164:	429a      	cmp	r2, r3
 8008166:	d207      	bcs.n	8008178 <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 8008168:	68fb      	ldr	r3, [r7, #12]
 800816a:	689a      	ldr	r2, [r3, #8]
 800816c:	68fb      	ldr	r3, [r7, #12]
 800816e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8008170:	425b      	negs	r3, r3
 8008172:	441a      	add	r2, r3
 8008174:	68fb      	ldr	r3, [r7, #12]
 8008176:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 8008178:	687b      	ldr	r3, [r7, #4]
 800817a:	2b02      	cmp	r3, #2
 800817c:	d105      	bne.n	800818a <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 800817e:	693b      	ldr	r3, [r7, #16]
 8008180:	2b00      	cmp	r3, #0
 8008182:	d002      	beq.n	800818a <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 8008184:	693b      	ldr	r3, [r7, #16]
 8008186:	3b01      	subs	r3, #1
 8008188:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 800818a:	693b      	ldr	r3, [r7, #16]
 800818c:	1c5a      	adds	r2, r3, #1
 800818e:	68fb      	ldr	r3, [r7, #12]
 8008190:	639a      	str	r2, [r3, #56]	@ 0x38

	return xReturn;
 8008192:	697b      	ldr	r3, [r7, #20]
}
 8008194:	4618      	mov	r0, r3
 8008196:	3718      	adds	r7, #24
 8008198:	46bd      	mov	sp, r7
 800819a:	bd80      	pop	{r7, pc}

0800819c <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 800819c:	b580      	push	{r7, lr}
 800819e:	b082      	sub	sp, #8
 80081a0:	af00      	add	r7, sp, #0
 80081a2:	6078      	str	r0, [r7, #4]
 80081a4:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 80081a6:	687b      	ldr	r3, [r7, #4]
 80081a8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80081aa:	2b00      	cmp	r3, #0
 80081ac:	d018      	beq.n	80081e0 <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 80081ae:	687b      	ldr	r3, [r7, #4]
 80081b0:	68da      	ldr	r2, [r3, #12]
 80081b2:	687b      	ldr	r3, [r7, #4]
 80081b4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80081b6:	441a      	add	r2, r3
 80081b8:	687b      	ldr	r3, [r7, #4]
 80081ba:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 80081bc:	687b      	ldr	r3, [r7, #4]
 80081be:	68da      	ldr	r2, [r3, #12]
 80081c0:	687b      	ldr	r3, [r7, #4]
 80081c2:	689b      	ldr	r3, [r3, #8]
 80081c4:	429a      	cmp	r2, r3
 80081c6:	d303      	bcc.n	80081d0 <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 80081c8:	687b      	ldr	r3, [r7, #4]
 80081ca:	681a      	ldr	r2, [r3, #0]
 80081cc:	687b      	ldr	r3, [r7, #4]
 80081ce:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 80081d0:	687b      	ldr	r3, [r7, #4]
 80081d2:	68d9      	ldr	r1, [r3, #12]
 80081d4:	687b      	ldr	r3, [r7, #4]
 80081d6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80081d8:	461a      	mov	r2, r3
 80081da:	6838      	ldr	r0, [r7, #0]
 80081dc:	f007 ff73 	bl	80100c6 <memcpy>
	}
}
 80081e0:	bf00      	nop
 80081e2:	3708      	adds	r7, #8
 80081e4:	46bd      	mov	sp, r7
 80081e6:	bd80      	pop	{r7, pc}

080081e8 <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 80081e8:	b580      	push	{r7, lr}
 80081ea:	b084      	sub	sp, #16
 80081ec:	af00      	add	r7, sp, #0
 80081ee:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 80081f0:	f001 fc7c 	bl	8009aec <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 80081f4:	687b      	ldr	r3, [r7, #4]
 80081f6:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 80081fa:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 80081fc:	e011      	b.n	8008222 <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 80081fe:	687b      	ldr	r3, [r7, #4]
 8008200:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8008202:	2b00      	cmp	r3, #0
 8008204:	d012      	beq.n	800822c <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8008206:	687b      	ldr	r3, [r7, #4]
 8008208:	3324      	adds	r3, #36	@ 0x24
 800820a:	4618      	mov	r0, r3
 800820c:	f000 fd4c 	bl	8008ca8 <xTaskRemoveFromEventList>
 8008210:	4603      	mov	r3, r0
 8008212:	2b00      	cmp	r3, #0
 8008214:	d001      	beq.n	800821a <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 8008216:	f000 fe2b 	bl	8008e70 <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 800821a:	7bfb      	ldrb	r3, [r7, #15]
 800821c:	3b01      	subs	r3, #1
 800821e:	b2db      	uxtb	r3, r3
 8008220:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8008222:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8008226:	2b00      	cmp	r3, #0
 8008228:	dce9      	bgt.n	80081fe <prvUnlockQueue+0x16>
 800822a:	e000      	b.n	800822e <prvUnlockQueue+0x46>
					break;
 800822c:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 800822e:	687b      	ldr	r3, [r7, #4]
 8008230:	22ff      	movs	r2, #255	@ 0xff
 8008232:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
	}
	taskEXIT_CRITICAL();
 8008236:	f001 fc8f 	bl	8009b58 <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 800823a:	f001 fc57 	bl	8009aec <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 800823e:	687b      	ldr	r3, [r7, #4]
 8008240:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 8008244:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 8008246:	e011      	b.n	800826c <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8008248:	687b      	ldr	r3, [r7, #4]
 800824a:	691b      	ldr	r3, [r3, #16]
 800824c:	2b00      	cmp	r3, #0
 800824e:	d012      	beq.n	8008276 <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8008250:	687b      	ldr	r3, [r7, #4]
 8008252:	3310      	adds	r3, #16
 8008254:	4618      	mov	r0, r3
 8008256:	f000 fd27 	bl	8008ca8 <xTaskRemoveFromEventList>
 800825a:	4603      	mov	r3, r0
 800825c:	2b00      	cmp	r3, #0
 800825e:	d001      	beq.n	8008264 <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 8008260:	f000 fe06 	bl	8008e70 <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 8008264:	7bbb      	ldrb	r3, [r7, #14]
 8008266:	3b01      	subs	r3, #1
 8008268:	b2db      	uxtb	r3, r3
 800826a:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 800826c:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8008270:	2b00      	cmp	r3, #0
 8008272:	dce9      	bgt.n	8008248 <prvUnlockQueue+0x60>
 8008274:	e000      	b.n	8008278 <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 8008276:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 8008278:	687b      	ldr	r3, [r7, #4]
 800827a:	22ff      	movs	r2, #255	@ 0xff
 800827c:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
	}
	taskEXIT_CRITICAL();
 8008280:	f001 fc6a 	bl	8009b58 <vPortExitCritical>
}
 8008284:	bf00      	nop
 8008286:	3710      	adds	r7, #16
 8008288:	46bd      	mov	sp, r7
 800828a:	bd80      	pop	{r7, pc}

0800828c <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 800828c:	b580      	push	{r7, lr}
 800828e:	b084      	sub	sp, #16
 8008290:	af00      	add	r7, sp, #0
 8008292:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8008294:	f001 fc2a 	bl	8009aec <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 8008298:	687b      	ldr	r3, [r7, #4]
 800829a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800829c:	2b00      	cmp	r3, #0
 800829e:	d102      	bne.n	80082a6 <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 80082a0:	2301      	movs	r3, #1
 80082a2:	60fb      	str	r3, [r7, #12]
 80082a4:	e001      	b.n	80082aa <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 80082a6:	2300      	movs	r3, #0
 80082a8:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 80082aa:	f001 fc55 	bl	8009b58 <vPortExitCritical>

	return xReturn;
 80082ae:	68fb      	ldr	r3, [r7, #12]
}
 80082b0:	4618      	mov	r0, r3
 80082b2:	3710      	adds	r7, #16
 80082b4:	46bd      	mov	sp, r7
 80082b6:	bd80      	pop	{r7, pc}

080082b8 <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 80082b8:	b580      	push	{r7, lr}
 80082ba:	b084      	sub	sp, #16
 80082bc:	af00      	add	r7, sp, #0
 80082be:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 80082c0:	f001 fc14 	bl	8009aec <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 80082c4:	687b      	ldr	r3, [r7, #4]
 80082c6:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 80082c8:	687b      	ldr	r3, [r7, #4]
 80082ca:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80082cc:	429a      	cmp	r2, r3
 80082ce:	d102      	bne.n	80082d6 <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 80082d0:	2301      	movs	r3, #1
 80082d2:	60fb      	str	r3, [r7, #12]
 80082d4:	e001      	b.n	80082da <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 80082d6:	2300      	movs	r3, #0
 80082d8:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 80082da:	f001 fc3d 	bl	8009b58 <vPortExitCritical>

	return xReturn;
 80082de:	68fb      	ldr	r3, [r7, #12]
}
 80082e0:	4618      	mov	r0, r3
 80082e2:	3710      	adds	r7, #16
 80082e4:	46bd      	mov	sp, r7
 80082e6:	bd80      	pop	{r7, pc}

080082e8 <vQueueAddToRegistry>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueAddToRegistry( QueueHandle_t xQueue, const char *pcQueueName ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
	{
 80082e8:	b480      	push	{r7}
 80082ea:	b085      	sub	sp, #20
 80082ec:	af00      	add	r7, sp, #0
 80082ee:	6078      	str	r0, [r7, #4]
 80082f0:	6039      	str	r1, [r7, #0]
	UBaseType_t ux;

		/* See if there is an empty space in the registry.  A NULL name denotes
		a free slot. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 80082f2:	2300      	movs	r3, #0
 80082f4:	60fb      	str	r3, [r7, #12]
 80082f6:	e014      	b.n	8008322 <vQueueAddToRegistry+0x3a>
		{
			if( xQueueRegistry[ ux ].pcQueueName == NULL )
 80082f8:	4a0f      	ldr	r2, [pc, #60]	@ (8008338 <vQueueAddToRegistry+0x50>)
 80082fa:	68fb      	ldr	r3, [r7, #12]
 80082fc:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 8008300:	2b00      	cmp	r3, #0
 8008302:	d10b      	bne.n	800831c <vQueueAddToRegistry+0x34>
			{
				/* Store the information on this queue. */
				xQueueRegistry[ ux ].pcQueueName = pcQueueName;
 8008304:	490c      	ldr	r1, [pc, #48]	@ (8008338 <vQueueAddToRegistry+0x50>)
 8008306:	68fb      	ldr	r3, [r7, #12]
 8008308:	683a      	ldr	r2, [r7, #0]
 800830a:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
				xQueueRegistry[ ux ].xHandle = xQueue;
 800830e:	4a0a      	ldr	r2, [pc, #40]	@ (8008338 <vQueueAddToRegistry+0x50>)
 8008310:	68fb      	ldr	r3, [r7, #12]
 8008312:	00db      	lsls	r3, r3, #3
 8008314:	4413      	add	r3, r2
 8008316:	687a      	ldr	r2, [r7, #4]
 8008318:	605a      	str	r2, [r3, #4]

				traceQUEUE_REGISTRY_ADD( xQueue, pcQueueName );
				break;
 800831a:	e006      	b.n	800832a <vQueueAddToRegistry+0x42>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 800831c:	68fb      	ldr	r3, [r7, #12]
 800831e:	3301      	adds	r3, #1
 8008320:	60fb      	str	r3, [r7, #12]
 8008322:	68fb      	ldr	r3, [r7, #12]
 8008324:	2b07      	cmp	r3, #7
 8008326:	d9e7      	bls.n	80082f8 <vQueueAddToRegistry+0x10>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
 8008328:	bf00      	nop
 800832a:	bf00      	nop
 800832c:	3714      	adds	r7, #20
 800832e:	46bd      	mov	sp, r7
 8008330:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008334:	4770      	bx	lr
 8008336:	bf00      	nop
 8008338:	2003dc10 	.word	0x2003dc10

0800833c <vQueueWaitForMessageRestricted>:
/*-----------------------------------------------------------*/

#if ( configUSE_TIMERS == 1 )

	void vQueueWaitForMessageRestricted( QueueHandle_t xQueue, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 800833c:	b580      	push	{r7, lr}
 800833e:	b086      	sub	sp, #24
 8008340:	af00      	add	r7, sp, #0
 8008342:	60f8      	str	r0, [r7, #12]
 8008344:	60b9      	str	r1, [r7, #8]
 8008346:	607a      	str	r2, [r7, #4]
	Queue_t * const pxQueue = xQueue;
 8008348:	68fb      	ldr	r3, [r7, #12]
 800834a:	617b      	str	r3, [r7, #20]
		will not actually cause the task to block, just place it on a blocked
		list.  It will not block until the scheduler is unlocked - at which
		time a yield will be performed.  If an item is added to the queue while
		the queue is locked, and the calling task blocks on the queue, then the
		calling task will be immediately unblocked when the queue is unlocked. */
		prvLockQueue( pxQueue );
 800834c:	f001 fbce 	bl	8009aec <vPortEnterCritical>
 8008350:	697b      	ldr	r3, [r7, #20]
 8008352:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 8008356:	b25b      	sxtb	r3, r3
 8008358:	f1b3 3fff 	cmp.w	r3, #4294967295
 800835c:	d103      	bne.n	8008366 <vQueueWaitForMessageRestricted+0x2a>
 800835e:	697b      	ldr	r3, [r7, #20]
 8008360:	2200      	movs	r2, #0
 8008362:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8008366:	697b      	ldr	r3, [r7, #20]
 8008368:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 800836c:	b25b      	sxtb	r3, r3
 800836e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008372:	d103      	bne.n	800837c <vQueueWaitForMessageRestricted+0x40>
 8008374:	697b      	ldr	r3, [r7, #20]
 8008376:	2200      	movs	r2, #0
 8008378:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 800837c:	f001 fbec 	bl	8009b58 <vPortExitCritical>
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
 8008380:	697b      	ldr	r3, [r7, #20]
 8008382:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8008384:	2b00      	cmp	r3, #0
 8008386:	d106      	bne.n	8008396 <vQueueWaitForMessageRestricted+0x5a>
		{
			/* There is nothing in the queue, block for the specified period. */
			vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
 8008388:	697b      	ldr	r3, [r7, #20]
 800838a:	3324      	adds	r3, #36	@ 0x24
 800838c:	687a      	ldr	r2, [r7, #4]
 800838e:	68b9      	ldr	r1, [r7, #8]
 8008390:	4618      	mov	r0, r3
 8008392:	f000 fc5b 	bl	8008c4c <vTaskPlaceOnEventListRestricted>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		prvUnlockQueue( pxQueue );
 8008396:	6978      	ldr	r0, [r7, #20]
 8008398:	f7ff ff26 	bl	80081e8 <prvUnlockQueue>
	}
 800839c:	bf00      	nop
 800839e:	3718      	adds	r7, #24
 80083a0:	46bd      	mov	sp, r7
 80083a2:	bd80      	pop	{r7, pc}

080083a4 <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 80083a4:	b580      	push	{r7, lr}
 80083a6:	b08e      	sub	sp, #56	@ 0x38
 80083a8:	af04      	add	r7, sp, #16
 80083aa:	60f8      	str	r0, [r7, #12]
 80083ac:	60b9      	str	r1, [r7, #8]
 80083ae:	607a      	str	r2, [r7, #4]
 80083b0:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 80083b2:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80083b4:	2b00      	cmp	r3, #0
 80083b6:	d10d      	bne.n	80083d4 <xTaskCreateStatic+0x30>
	__asm volatile
 80083b8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80083bc:	b672      	cpsid	i
 80083be:	f383 8811 	msr	BASEPRI, r3
 80083c2:	f3bf 8f6f 	isb	sy
 80083c6:	f3bf 8f4f 	dsb	sy
 80083ca:	b662      	cpsie	i
 80083cc:	623b      	str	r3, [r7, #32]
}
 80083ce:	bf00      	nop
 80083d0:	bf00      	nop
 80083d2:	e7fd      	b.n	80083d0 <xTaskCreateStatic+0x2c>
		configASSERT( pxTaskBuffer != NULL );
 80083d4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80083d6:	2b00      	cmp	r3, #0
 80083d8:	d10d      	bne.n	80083f6 <xTaskCreateStatic+0x52>
	__asm volatile
 80083da:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80083de:	b672      	cpsid	i
 80083e0:	f383 8811 	msr	BASEPRI, r3
 80083e4:	f3bf 8f6f 	isb	sy
 80083e8:	f3bf 8f4f 	dsb	sy
 80083ec:	b662      	cpsie	i
 80083ee:	61fb      	str	r3, [r7, #28]
}
 80083f0:	bf00      	nop
 80083f2:	bf00      	nop
 80083f4:	e7fd      	b.n	80083f2 <xTaskCreateStatic+0x4e>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 80083f6:	235c      	movs	r3, #92	@ 0x5c
 80083f8:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 80083fa:	693b      	ldr	r3, [r7, #16]
 80083fc:	2b5c      	cmp	r3, #92	@ 0x5c
 80083fe:	d00d      	beq.n	800841c <xTaskCreateStatic+0x78>
	__asm volatile
 8008400:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008404:	b672      	cpsid	i
 8008406:	f383 8811 	msr	BASEPRI, r3
 800840a:	f3bf 8f6f 	isb	sy
 800840e:	f3bf 8f4f 	dsb	sy
 8008412:	b662      	cpsie	i
 8008414:	61bb      	str	r3, [r7, #24]
}
 8008416:	bf00      	nop
 8008418:	bf00      	nop
 800841a:	e7fd      	b.n	8008418 <xTaskCreateStatic+0x74>
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 800841c:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 800841e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008420:	2b00      	cmp	r3, #0
 8008422:	d01e      	beq.n	8008462 <xTaskCreateStatic+0xbe>
 8008424:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8008426:	2b00      	cmp	r3, #0
 8008428:	d01b      	beq.n	8008462 <xTaskCreateStatic+0xbe>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 800842a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800842c:	627b      	str	r3, [r7, #36]	@ 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 800842e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008430:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8008432:	631a      	str	r2, [r3, #48]	@ 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 8008434:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008436:	2202      	movs	r2, #2
 8008438:	f883 2059 	strb.w	r2, [r3, #89]	@ 0x59
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 800843c:	2300      	movs	r3, #0
 800843e:	9303      	str	r3, [sp, #12]
 8008440:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008442:	9302      	str	r3, [sp, #8]
 8008444:	f107 0314 	add.w	r3, r7, #20
 8008448:	9301      	str	r3, [sp, #4]
 800844a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800844c:	9300      	str	r3, [sp, #0]
 800844e:	683b      	ldr	r3, [r7, #0]
 8008450:	687a      	ldr	r2, [r7, #4]
 8008452:	68b9      	ldr	r1, [r7, #8]
 8008454:	68f8      	ldr	r0, [r7, #12]
 8008456:	f000 f850 	bl	80084fa <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 800845a:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 800845c:	f000 f8e0 	bl	8008620 <prvAddNewTaskToReadyList>
 8008460:	e001      	b.n	8008466 <xTaskCreateStatic+0xc2>
		}
		else
		{
			xReturn = NULL;
 8008462:	2300      	movs	r3, #0
 8008464:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 8008466:	697b      	ldr	r3, [r7, #20]
	}
 8008468:	4618      	mov	r0, r3
 800846a:	3728      	adds	r7, #40	@ 0x28
 800846c:	46bd      	mov	sp, r7
 800846e:	bd80      	pop	{r7, pc}

08008470 <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 8008470:	b580      	push	{r7, lr}
 8008472:	b08c      	sub	sp, #48	@ 0x30
 8008474:	af04      	add	r7, sp, #16
 8008476:	60f8      	str	r0, [r7, #12]
 8008478:	60b9      	str	r1, [r7, #8]
 800847a:	603b      	str	r3, [r7, #0]
 800847c:	4613      	mov	r3, r2
 800847e:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 8008480:	88fb      	ldrh	r3, [r7, #6]
 8008482:	009b      	lsls	r3, r3, #2
 8008484:	4618      	mov	r0, r3
 8008486:	f001 fc5f 	bl	8009d48 <pvPortMalloc>
 800848a:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 800848c:	697b      	ldr	r3, [r7, #20]
 800848e:	2b00      	cmp	r3, #0
 8008490:	d00e      	beq.n	80084b0 <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 8008492:	205c      	movs	r0, #92	@ 0x5c
 8008494:	f001 fc58 	bl	8009d48 <pvPortMalloc>
 8008498:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 800849a:	69fb      	ldr	r3, [r7, #28]
 800849c:	2b00      	cmp	r3, #0
 800849e:	d003      	beq.n	80084a8 <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 80084a0:	69fb      	ldr	r3, [r7, #28]
 80084a2:	697a      	ldr	r2, [r7, #20]
 80084a4:	631a      	str	r2, [r3, #48]	@ 0x30
 80084a6:	e005      	b.n	80084b4 <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 80084a8:	6978      	ldr	r0, [r7, #20]
 80084aa:	f001 fd1b 	bl	8009ee4 <vPortFree>
 80084ae:	e001      	b.n	80084b4 <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 80084b0:	2300      	movs	r3, #0
 80084b2:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 80084b4:	69fb      	ldr	r3, [r7, #28]
 80084b6:	2b00      	cmp	r3, #0
 80084b8:	d017      	beq.n	80084ea <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e9029 !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 80084ba:	69fb      	ldr	r3, [r7, #28]
 80084bc:	2200      	movs	r2, #0
 80084be:	f883 2059 	strb.w	r2, [r3, #89]	@ 0x59
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 80084c2:	88fa      	ldrh	r2, [r7, #6]
 80084c4:	2300      	movs	r3, #0
 80084c6:	9303      	str	r3, [sp, #12]
 80084c8:	69fb      	ldr	r3, [r7, #28]
 80084ca:	9302      	str	r3, [sp, #8]
 80084cc:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80084ce:	9301      	str	r3, [sp, #4]
 80084d0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80084d2:	9300      	str	r3, [sp, #0]
 80084d4:	683b      	ldr	r3, [r7, #0]
 80084d6:	68b9      	ldr	r1, [r7, #8]
 80084d8:	68f8      	ldr	r0, [r7, #12]
 80084da:	f000 f80e 	bl	80084fa <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 80084de:	69f8      	ldr	r0, [r7, #28]
 80084e0:	f000 f89e 	bl	8008620 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 80084e4:	2301      	movs	r3, #1
 80084e6:	61bb      	str	r3, [r7, #24]
 80084e8:	e002      	b.n	80084f0 <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 80084ea:	f04f 33ff 	mov.w	r3, #4294967295
 80084ee:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 80084f0:	69bb      	ldr	r3, [r7, #24]
	}
 80084f2:	4618      	mov	r0, r3
 80084f4:	3720      	adds	r7, #32
 80084f6:	46bd      	mov	sp, r7
 80084f8:	bd80      	pop	{r7, pc}

080084fa <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 80084fa:	b580      	push	{r7, lr}
 80084fc:	b088      	sub	sp, #32
 80084fe:	af00      	add	r7, sp, #0
 8008500:	60f8      	str	r0, [r7, #12]
 8008502:	60b9      	str	r1, [r7, #8]
 8008504:	607a      	str	r2, [r7, #4]
 8008506:	603b      	str	r3, [r7, #0]

	/* Avoid dependency on memset() if it is not required. */
	#if( tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1 )
	{
		/* Fill the stack with a known value to assist debugging. */
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 8008508:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800850a:	6b18      	ldr	r0, [r3, #48]	@ 0x30
 800850c:	687b      	ldr	r3, [r7, #4]
 800850e:	009b      	lsls	r3, r3, #2
 8008510:	461a      	mov	r2, r3
 8008512:	21a5      	movs	r1, #165	@ 0xa5
 8008514:	f007 fd4b 	bl	800ffae <memset>
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 8008518:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800851a:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 800851c:	6879      	ldr	r1, [r7, #4]
 800851e:	f06f 4340 	mvn.w	r3, #3221225472	@ 0xc0000000
 8008522:	440b      	add	r3, r1
 8008524:	009b      	lsls	r3, r3, #2
 8008526:	4413      	add	r3, r2
 8008528:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 800852a:	69bb      	ldr	r3, [r7, #24]
 800852c:	f023 0307 	bic.w	r3, r3, #7
 8008530:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 8008532:	69bb      	ldr	r3, [r7, #24]
 8008534:	f003 0307 	and.w	r3, r3, #7
 8008538:	2b00      	cmp	r3, #0
 800853a:	d00d      	beq.n	8008558 <prvInitialiseNewTask+0x5e>
	__asm volatile
 800853c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008540:	b672      	cpsid	i
 8008542:	f383 8811 	msr	BASEPRI, r3
 8008546:	f3bf 8f6f 	isb	sy
 800854a:	f3bf 8f4f 	dsb	sy
 800854e:	b662      	cpsie	i
 8008550:	617b      	str	r3, [r7, #20]
}
 8008552:	bf00      	nop
 8008554:	bf00      	nop
 8008556:	e7fd      	b.n	8008554 <prvInitialiseNewTask+0x5a>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 8008558:	68bb      	ldr	r3, [r7, #8]
 800855a:	2b00      	cmp	r3, #0
 800855c:	d01f      	beq.n	800859e <prvInitialiseNewTask+0xa4>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 800855e:	2300      	movs	r3, #0
 8008560:	61fb      	str	r3, [r7, #28]
 8008562:	e012      	b.n	800858a <prvInitialiseNewTask+0x90>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 8008564:	68ba      	ldr	r2, [r7, #8]
 8008566:	69fb      	ldr	r3, [r7, #28]
 8008568:	4413      	add	r3, r2
 800856a:	7819      	ldrb	r1, [r3, #0]
 800856c:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800856e:	69fb      	ldr	r3, [r7, #28]
 8008570:	4413      	add	r3, r2
 8008572:	3334      	adds	r3, #52	@ 0x34
 8008574:	460a      	mov	r2, r1
 8008576:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 8008578:	68ba      	ldr	r2, [r7, #8]
 800857a:	69fb      	ldr	r3, [r7, #28]
 800857c:	4413      	add	r3, r2
 800857e:	781b      	ldrb	r3, [r3, #0]
 8008580:	2b00      	cmp	r3, #0
 8008582:	d006      	beq.n	8008592 <prvInitialiseNewTask+0x98>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8008584:	69fb      	ldr	r3, [r7, #28]
 8008586:	3301      	adds	r3, #1
 8008588:	61fb      	str	r3, [r7, #28]
 800858a:	69fb      	ldr	r3, [r7, #28]
 800858c:	2b0f      	cmp	r3, #15
 800858e:	d9e9      	bls.n	8008564 <prvInitialiseNewTask+0x6a>
 8008590:	e000      	b.n	8008594 <prvInitialiseNewTask+0x9a>
			{
				break;
 8008592:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 8008594:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008596:	2200      	movs	r2, #0
 8008598:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 800859c:	e003      	b.n	80085a6 <prvInitialiseNewTask+0xac>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 800859e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80085a0:	2200      	movs	r2, #0
 80085a2:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 80085a6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80085a8:	2b37      	cmp	r3, #55	@ 0x37
 80085aa:	d901      	bls.n	80085b0 <prvInitialiseNewTask+0xb6>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 80085ac:	2337      	movs	r3, #55	@ 0x37
 80085ae:	62bb      	str	r3, [r7, #40]	@ 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 80085b0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80085b2:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 80085b4:	62da      	str	r2, [r3, #44]	@ 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 80085b6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80085b8:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 80085ba:	64da      	str	r2, [r3, #76]	@ 0x4c
		pxNewTCB->uxMutexesHeld = 0;
 80085bc:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80085be:	2200      	movs	r2, #0
 80085c0:	651a      	str	r2, [r3, #80]	@ 0x50
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 80085c2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80085c4:	3304      	adds	r3, #4
 80085c6:	4618      	mov	r0, r3
 80085c8:	f7ff f8fa 	bl	80077c0 <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 80085cc:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80085ce:	3318      	adds	r3, #24
 80085d0:	4618      	mov	r0, r3
 80085d2:	f7ff f8f5 	bl	80077c0 <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 80085d6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80085d8:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80085da:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80085dc:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80085de:	f1c3 0238 	rsb	r2, r3, #56	@ 0x38
 80085e2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80085e4:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 80085e6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80085e8:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80085ea:	625a      	str	r2, [r3, #36]	@ 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 80085ec:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80085ee:	2200      	movs	r2, #0
 80085f0:	655a      	str	r2, [r3, #84]	@ 0x54
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 80085f2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80085f4:	2200      	movs	r2, #0
 80085f6:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 80085fa:	683a      	ldr	r2, [r7, #0]
 80085fc:	68f9      	ldr	r1, [r7, #12]
 80085fe:	69b8      	ldr	r0, [r7, #24]
 8008600:	f001 f968 	bl	80098d4 <pxPortInitialiseStack>
 8008604:	4602      	mov	r2, r0
 8008606:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008608:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 800860a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800860c:	2b00      	cmp	r3, #0
 800860e:	d002      	beq.n	8008616 <prvInitialiseNewTask+0x11c>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 8008610:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8008612:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8008614:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8008616:	bf00      	nop
 8008618:	3720      	adds	r7, #32
 800861a:	46bd      	mov	sp, r7
 800861c:	bd80      	pop	{r7, pc}
	...

08008620 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 8008620:	b580      	push	{r7, lr}
 8008622:	b082      	sub	sp, #8
 8008624:	af00      	add	r7, sp, #0
 8008626:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 8008628:	f001 fa60 	bl	8009aec <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 800862c:	4b2d      	ldr	r3, [pc, #180]	@ (80086e4 <prvAddNewTaskToReadyList+0xc4>)
 800862e:	681b      	ldr	r3, [r3, #0]
 8008630:	3301      	adds	r3, #1
 8008632:	4a2c      	ldr	r2, [pc, #176]	@ (80086e4 <prvAddNewTaskToReadyList+0xc4>)
 8008634:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 8008636:	4b2c      	ldr	r3, [pc, #176]	@ (80086e8 <prvAddNewTaskToReadyList+0xc8>)
 8008638:	681b      	ldr	r3, [r3, #0]
 800863a:	2b00      	cmp	r3, #0
 800863c:	d109      	bne.n	8008652 <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 800863e:	4a2a      	ldr	r2, [pc, #168]	@ (80086e8 <prvAddNewTaskToReadyList+0xc8>)
 8008640:	687b      	ldr	r3, [r7, #4]
 8008642:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 8008644:	4b27      	ldr	r3, [pc, #156]	@ (80086e4 <prvAddNewTaskToReadyList+0xc4>)
 8008646:	681b      	ldr	r3, [r3, #0]
 8008648:	2b01      	cmp	r3, #1
 800864a:	d110      	bne.n	800866e <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 800864c:	f000 fc34 	bl	8008eb8 <prvInitialiseTaskLists>
 8008650:	e00d      	b.n	800866e <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 8008652:	4b26      	ldr	r3, [pc, #152]	@ (80086ec <prvAddNewTaskToReadyList+0xcc>)
 8008654:	681b      	ldr	r3, [r3, #0]
 8008656:	2b00      	cmp	r3, #0
 8008658:	d109      	bne.n	800866e <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 800865a:	4b23      	ldr	r3, [pc, #140]	@ (80086e8 <prvAddNewTaskToReadyList+0xc8>)
 800865c:	681b      	ldr	r3, [r3, #0]
 800865e:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8008660:	687b      	ldr	r3, [r7, #4]
 8008662:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8008664:	429a      	cmp	r2, r3
 8008666:	d802      	bhi.n	800866e <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 8008668:	4a1f      	ldr	r2, [pc, #124]	@ (80086e8 <prvAddNewTaskToReadyList+0xc8>)
 800866a:	687b      	ldr	r3, [r7, #4]
 800866c:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 800866e:	4b20      	ldr	r3, [pc, #128]	@ (80086f0 <prvAddNewTaskToReadyList+0xd0>)
 8008670:	681b      	ldr	r3, [r3, #0]
 8008672:	3301      	adds	r3, #1
 8008674:	4a1e      	ldr	r2, [pc, #120]	@ (80086f0 <prvAddNewTaskToReadyList+0xd0>)
 8008676:	6013      	str	r3, [r2, #0]

		#if ( configUSE_TRACE_FACILITY == 1 )
		{
			/* Add a counter into the TCB for tracing only. */
			pxNewTCB->uxTCBNumber = uxTaskNumber;
 8008678:	4b1d      	ldr	r3, [pc, #116]	@ (80086f0 <prvAddNewTaskToReadyList+0xd0>)
 800867a:	681a      	ldr	r2, [r3, #0]
 800867c:	687b      	ldr	r3, [r7, #4]
 800867e:	645a      	str	r2, [r3, #68]	@ 0x44
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 8008680:	687b      	ldr	r3, [r7, #4]
 8008682:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8008684:	4b1b      	ldr	r3, [pc, #108]	@ (80086f4 <prvAddNewTaskToReadyList+0xd4>)
 8008686:	681b      	ldr	r3, [r3, #0]
 8008688:	429a      	cmp	r2, r3
 800868a:	d903      	bls.n	8008694 <prvAddNewTaskToReadyList+0x74>
 800868c:	687b      	ldr	r3, [r7, #4]
 800868e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8008690:	4a18      	ldr	r2, [pc, #96]	@ (80086f4 <prvAddNewTaskToReadyList+0xd4>)
 8008692:	6013      	str	r3, [r2, #0]
 8008694:	687b      	ldr	r3, [r7, #4]
 8008696:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8008698:	4613      	mov	r3, r2
 800869a:	009b      	lsls	r3, r3, #2
 800869c:	4413      	add	r3, r2
 800869e:	009b      	lsls	r3, r3, #2
 80086a0:	4a15      	ldr	r2, [pc, #84]	@ (80086f8 <prvAddNewTaskToReadyList+0xd8>)
 80086a2:	441a      	add	r2, r3
 80086a4:	687b      	ldr	r3, [r7, #4]
 80086a6:	3304      	adds	r3, #4
 80086a8:	4619      	mov	r1, r3
 80086aa:	4610      	mov	r0, r2
 80086ac:	f7ff f895 	bl	80077da <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 80086b0:	f001 fa52 	bl	8009b58 <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 80086b4:	4b0d      	ldr	r3, [pc, #52]	@ (80086ec <prvAddNewTaskToReadyList+0xcc>)
 80086b6:	681b      	ldr	r3, [r3, #0]
 80086b8:	2b00      	cmp	r3, #0
 80086ba:	d00e      	beq.n	80086da <prvAddNewTaskToReadyList+0xba>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 80086bc:	4b0a      	ldr	r3, [pc, #40]	@ (80086e8 <prvAddNewTaskToReadyList+0xc8>)
 80086be:	681b      	ldr	r3, [r3, #0]
 80086c0:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80086c2:	687b      	ldr	r3, [r7, #4]
 80086c4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80086c6:	429a      	cmp	r2, r3
 80086c8:	d207      	bcs.n	80086da <prvAddNewTaskToReadyList+0xba>
		{
			taskYIELD_IF_USING_PREEMPTION();
 80086ca:	4b0c      	ldr	r3, [pc, #48]	@ (80086fc <prvAddNewTaskToReadyList+0xdc>)
 80086cc:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80086d0:	601a      	str	r2, [r3, #0]
 80086d2:	f3bf 8f4f 	dsb	sy
 80086d6:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 80086da:	bf00      	nop
 80086dc:	3708      	adds	r7, #8
 80086de:	46bd      	mov	sp, r7
 80086e0:	bd80      	pop	{r7, pc}
 80086e2:	bf00      	nop
 80086e4:	2003e124 	.word	0x2003e124
 80086e8:	2003dc50 	.word	0x2003dc50
 80086ec:	2003e130 	.word	0x2003e130
 80086f0:	2003e140 	.word	0x2003e140
 80086f4:	2003e12c 	.word	0x2003e12c
 80086f8:	2003dc54 	.word	0x2003dc54
 80086fc:	e000ed04 	.word	0xe000ed04

08008700 <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 8008700:	b580      	push	{r7, lr}
 8008702:	b084      	sub	sp, #16
 8008704:	af00      	add	r7, sp, #0
 8008706:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 8008708:	2300      	movs	r3, #0
 800870a:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 800870c:	687b      	ldr	r3, [r7, #4]
 800870e:	2b00      	cmp	r3, #0
 8008710:	d01a      	beq.n	8008748 <vTaskDelay+0x48>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 8008712:	4b15      	ldr	r3, [pc, #84]	@ (8008768 <vTaskDelay+0x68>)
 8008714:	681b      	ldr	r3, [r3, #0]
 8008716:	2b00      	cmp	r3, #0
 8008718:	d00d      	beq.n	8008736 <vTaskDelay+0x36>
	__asm volatile
 800871a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800871e:	b672      	cpsid	i
 8008720:	f383 8811 	msr	BASEPRI, r3
 8008724:	f3bf 8f6f 	isb	sy
 8008728:	f3bf 8f4f 	dsb	sy
 800872c:	b662      	cpsie	i
 800872e:	60bb      	str	r3, [r7, #8]
}
 8008730:	bf00      	nop
 8008732:	bf00      	nop
 8008734:	e7fd      	b.n	8008732 <vTaskDelay+0x32>
			vTaskSuspendAll();
 8008736:	f000 f887 	bl	8008848 <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 800873a:	2100      	movs	r1, #0
 800873c:	6878      	ldr	r0, [r7, #4]
 800873e:	f000 fd0d 	bl	800915c <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 8008742:	f000 f88f 	bl	8008864 <xTaskResumeAll>
 8008746:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 8008748:	68fb      	ldr	r3, [r7, #12]
 800874a:	2b00      	cmp	r3, #0
 800874c:	d107      	bne.n	800875e <vTaskDelay+0x5e>
		{
			portYIELD_WITHIN_API();
 800874e:	4b07      	ldr	r3, [pc, #28]	@ (800876c <vTaskDelay+0x6c>)
 8008750:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8008754:	601a      	str	r2, [r3, #0]
 8008756:	f3bf 8f4f 	dsb	sy
 800875a:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 800875e:	bf00      	nop
 8008760:	3710      	adds	r7, #16
 8008762:	46bd      	mov	sp, r7
 8008764:	bd80      	pop	{r7, pc}
 8008766:	bf00      	nop
 8008768:	2003e14c 	.word	0x2003e14c
 800876c:	e000ed04 	.word	0xe000ed04

08008770 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 8008770:	b580      	push	{r7, lr}
 8008772:	b08a      	sub	sp, #40	@ 0x28
 8008774:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 8008776:	2300      	movs	r3, #0
 8008778:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 800877a:	2300      	movs	r3, #0
 800877c:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 800877e:	463a      	mov	r2, r7
 8008780:	1d39      	adds	r1, r7, #4
 8008782:	f107 0308 	add.w	r3, r7, #8
 8008786:	4618      	mov	r0, r3
 8008788:	f7fe ffc6 	bl	8007718 <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 800878c:	6839      	ldr	r1, [r7, #0]
 800878e:	687b      	ldr	r3, [r7, #4]
 8008790:	68ba      	ldr	r2, [r7, #8]
 8008792:	9202      	str	r2, [sp, #8]
 8008794:	9301      	str	r3, [sp, #4]
 8008796:	2300      	movs	r3, #0
 8008798:	9300      	str	r3, [sp, #0]
 800879a:	2300      	movs	r3, #0
 800879c:	460a      	mov	r2, r1
 800879e:	4924      	ldr	r1, [pc, #144]	@ (8008830 <vTaskStartScheduler+0xc0>)
 80087a0:	4824      	ldr	r0, [pc, #144]	@ (8008834 <vTaskStartScheduler+0xc4>)
 80087a2:	f7ff fdff 	bl	80083a4 <xTaskCreateStatic>
 80087a6:	4603      	mov	r3, r0
 80087a8:	4a23      	ldr	r2, [pc, #140]	@ (8008838 <vTaskStartScheduler+0xc8>)
 80087aa:	6013      	str	r3, [r2, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												portPRIVILEGE_BIT, /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_PRIORITY is zero. */
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 80087ac:	4b22      	ldr	r3, [pc, #136]	@ (8008838 <vTaskStartScheduler+0xc8>)
 80087ae:	681b      	ldr	r3, [r3, #0]
 80087b0:	2b00      	cmp	r3, #0
 80087b2:	d002      	beq.n	80087ba <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 80087b4:	2301      	movs	r3, #1
 80087b6:	617b      	str	r3, [r7, #20]
 80087b8:	e001      	b.n	80087be <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 80087ba:	2300      	movs	r3, #0
 80087bc:	617b      	str	r3, [r7, #20]
	}
	#endif /* configSUPPORT_STATIC_ALLOCATION */

	#if ( configUSE_TIMERS == 1 )
	{
		if( xReturn == pdPASS )
 80087be:	697b      	ldr	r3, [r7, #20]
 80087c0:	2b01      	cmp	r3, #1
 80087c2:	d102      	bne.n	80087ca <vTaskStartScheduler+0x5a>
		{
			xReturn = xTimerCreateTimerTask();
 80087c4:	f000 fd1e 	bl	8009204 <xTimerCreateTimerTask>
 80087c8:	6178      	str	r0, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 80087ca:	697b      	ldr	r3, [r7, #20]
 80087cc:	2b01      	cmp	r3, #1
 80087ce:	d118      	bne.n	8008802 <vTaskStartScheduler+0x92>
	__asm volatile
 80087d0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80087d4:	b672      	cpsid	i
 80087d6:	f383 8811 	msr	BASEPRI, r3
 80087da:	f3bf 8f6f 	isb	sy
 80087de:	f3bf 8f4f 	dsb	sy
 80087e2:	b662      	cpsie	i
 80087e4:	613b      	str	r3, [r7, #16]
}
 80087e6:	bf00      	nop
			structure specific to the task that will run first. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 80087e8:	4b14      	ldr	r3, [pc, #80]	@ (800883c <vTaskStartScheduler+0xcc>)
 80087ea:	f04f 32ff 	mov.w	r2, #4294967295
 80087ee:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 80087f0:	4b13      	ldr	r3, [pc, #76]	@ (8008840 <vTaskStartScheduler+0xd0>)
 80087f2:	2201      	movs	r2, #1
 80087f4:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 80087f6:	4b13      	ldr	r3, [pc, #76]	@ (8008844 <vTaskStartScheduler+0xd4>)
 80087f8:	2200      	movs	r2, #0
 80087fa:	601a      	str	r2, [r3, #0]

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 80087fc:	f001 f8f8 	bl	80099f0 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 8008800:	e011      	b.n	8008826 <vTaskStartScheduler+0xb6>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 8008802:	697b      	ldr	r3, [r7, #20]
 8008804:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008808:	d10d      	bne.n	8008826 <vTaskStartScheduler+0xb6>
	__asm volatile
 800880a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800880e:	b672      	cpsid	i
 8008810:	f383 8811 	msr	BASEPRI, r3
 8008814:	f3bf 8f6f 	isb	sy
 8008818:	f3bf 8f4f 	dsb	sy
 800881c:	b662      	cpsie	i
 800881e:	60fb      	str	r3, [r7, #12]
}
 8008820:	bf00      	nop
 8008822:	bf00      	nop
 8008824:	e7fd      	b.n	8008822 <vTaskStartScheduler+0xb2>
}
 8008826:	bf00      	nop
 8008828:	3718      	adds	r7, #24
 800882a:	46bd      	mov	sp, r7
 800882c:	bd80      	pop	{r7, pc}
 800882e:	bf00      	nop
 8008830:	08010fe0 	.word	0x08010fe0
 8008834:	08008e89 	.word	0x08008e89
 8008838:	2003e148 	.word	0x2003e148
 800883c:	2003e144 	.word	0x2003e144
 8008840:	2003e130 	.word	0x2003e130
 8008844:	2003e128 	.word	0x2003e128

08008848 <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 8008848:	b480      	push	{r7}
 800884a:	af00      	add	r7, sp, #0
	/* A critical section is not required as the variable is of type
	BaseType_t.  Please read Richard Barry's reply in the following link to a
	post in the FreeRTOS support forum before reporting this as a bug! -
	http://goo.gl/wu4acr */
	++uxSchedulerSuspended;
 800884c:	4b04      	ldr	r3, [pc, #16]	@ (8008860 <vTaskSuspendAll+0x18>)
 800884e:	681b      	ldr	r3, [r3, #0]
 8008850:	3301      	adds	r3, #1
 8008852:	4a03      	ldr	r2, [pc, #12]	@ (8008860 <vTaskSuspendAll+0x18>)
 8008854:	6013      	str	r3, [r2, #0]
	portMEMORY_BARRIER();
}
 8008856:	bf00      	nop
 8008858:	46bd      	mov	sp, r7
 800885a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800885e:	4770      	bx	lr
 8008860:	2003e14c 	.word	0x2003e14c

08008864 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 8008864:	b580      	push	{r7, lr}
 8008866:	b084      	sub	sp, #16
 8008868:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 800886a:	2300      	movs	r3, #0
 800886c:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 800886e:	2300      	movs	r3, #0
 8008870:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 8008872:	4b43      	ldr	r3, [pc, #268]	@ (8008980 <xTaskResumeAll+0x11c>)
 8008874:	681b      	ldr	r3, [r3, #0]
 8008876:	2b00      	cmp	r3, #0
 8008878:	d10d      	bne.n	8008896 <xTaskResumeAll+0x32>
	__asm volatile
 800887a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800887e:	b672      	cpsid	i
 8008880:	f383 8811 	msr	BASEPRI, r3
 8008884:	f3bf 8f6f 	isb	sy
 8008888:	f3bf 8f4f 	dsb	sy
 800888c:	b662      	cpsie	i
 800888e:	603b      	str	r3, [r7, #0]
}
 8008890:	bf00      	nop
 8008892:	bf00      	nop
 8008894:	e7fd      	b.n	8008892 <xTaskResumeAll+0x2e>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 8008896:	f001 f929 	bl	8009aec <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 800889a:	4b39      	ldr	r3, [pc, #228]	@ (8008980 <xTaskResumeAll+0x11c>)
 800889c:	681b      	ldr	r3, [r3, #0]
 800889e:	3b01      	subs	r3, #1
 80088a0:	4a37      	ldr	r2, [pc, #220]	@ (8008980 <xTaskResumeAll+0x11c>)
 80088a2:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80088a4:	4b36      	ldr	r3, [pc, #216]	@ (8008980 <xTaskResumeAll+0x11c>)
 80088a6:	681b      	ldr	r3, [r3, #0]
 80088a8:	2b00      	cmp	r3, #0
 80088aa:	d162      	bne.n	8008972 <xTaskResumeAll+0x10e>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 80088ac:	4b35      	ldr	r3, [pc, #212]	@ (8008984 <xTaskResumeAll+0x120>)
 80088ae:	681b      	ldr	r3, [r3, #0]
 80088b0:	2b00      	cmp	r3, #0
 80088b2:	d05e      	beq.n	8008972 <xTaskResumeAll+0x10e>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 80088b4:	e02f      	b.n	8008916 <xTaskResumeAll+0xb2>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80088b6:	4b34      	ldr	r3, [pc, #208]	@ (8008988 <xTaskResumeAll+0x124>)
 80088b8:	68db      	ldr	r3, [r3, #12]
 80088ba:	68db      	ldr	r3, [r3, #12]
 80088bc:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 80088be:	68fb      	ldr	r3, [r7, #12]
 80088c0:	3318      	adds	r3, #24
 80088c2:	4618      	mov	r0, r3
 80088c4:	f7fe ffe6 	bl	8007894 <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 80088c8:	68fb      	ldr	r3, [r7, #12]
 80088ca:	3304      	adds	r3, #4
 80088cc:	4618      	mov	r0, r3
 80088ce:	f7fe ffe1 	bl	8007894 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 80088d2:	68fb      	ldr	r3, [r7, #12]
 80088d4:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80088d6:	4b2d      	ldr	r3, [pc, #180]	@ (800898c <xTaskResumeAll+0x128>)
 80088d8:	681b      	ldr	r3, [r3, #0]
 80088da:	429a      	cmp	r2, r3
 80088dc:	d903      	bls.n	80088e6 <xTaskResumeAll+0x82>
 80088de:	68fb      	ldr	r3, [r7, #12]
 80088e0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80088e2:	4a2a      	ldr	r2, [pc, #168]	@ (800898c <xTaskResumeAll+0x128>)
 80088e4:	6013      	str	r3, [r2, #0]
 80088e6:	68fb      	ldr	r3, [r7, #12]
 80088e8:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80088ea:	4613      	mov	r3, r2
 80088ec:	009b      	lsls	r3, r3, #2
 80088ee:	4413      	add	r3, r2
 80088f0:	009b      	lsls	r3, r3, #2
 80088f2:	4a27      	ldr	r2, [pc, #156]	@ (8008990 <xTaskResumeAll+0x12c>)
 80088f4:	441a      	add	r2, r3
 80088f6:	68fb      	ldr	r3, [r7, #12]
 80088f8:	3304      	adds	r3, #4
 80088fa:	4619      	mov	r1, r3
 80088fc:	4610      	mov	r0, r2
 80088fe:	f7fe ff6c 	bl	80077da <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8008902:	68fb      	ldr	r3, [r7, #12]
 8008904:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8008906:	4b23      	ldr	r3, [pc, #140]	@ (8008994 <xTaskResumeAll+0x130>)
 8008908:	681b      	ldr	r3, [r3, #0]
 800890a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800890c:	429a      	cmp	r2, r3
 800890e:	d302      	bcc.n	8008916 <xTaskResumeAll+0xb2>
					{
						xYieldPending = pdTRUE;
 8008910:	4b21      	ldr	r3, [pc, #132]	@ (8008998 <xTaskResumeAll+0x134>)
 8008912:	2201      	movs	r2, #1
 8008914:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8008916:	4b1c      	ldr	r3, [pc, #112]	@ (8008988 <xTaskResumeAll+0x124>)
 8008918:	681b      	ldr	r3, [r3, #0]
 800891a:	2b00      	cmp	r3, #0
 800891c:	d1cb      	bne.n	80088b6 <xTaskResumeAll+0x52>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 800891e:	68fb      	ldr	r3, [r7, #12]
 8008920:	2b00      	cmp	r3, #0
 8008922:	d001      	beq.n	8008928 <xTaskResumeAll+0xc4>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 8008924:	f000 fb68 	bl	8008ff8 <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					UBaseType_t uxPendedCounts = uxPendedTicks; /* Non-volatile copy. */
 8008928:	4b1c      	ldr	r3, [pc, #112]	@ (800899c <xTaskResumeAll+0x138>)
 800892a:	681b      	ldr	r3, [r3, #0]
 800892c:	607b      	str	r3, [r7, #4]

					if( uxPendedCounts > ( UBaseType_t ) 0U )
 800892e:	687b      	ldr	r3, [r7, #4]
 8008930:	2b00      	cmp	r3, #0
 8008932:	d010      	beq.n	8008956 <xTaskResumeAll+0xf2>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 8008934:	f000 f846 	bl	80089c4 <xTaskIncrementTick>
 8008938:	4603      	mov	r3, r0
 800893a:	2b00      	cmp	r3, #0
 800893c:	d002      	beq.n	8008944 <xTaskResumeAll+0xe0>
							{
								xYieldPending = pdTRUE;
 800893e:	4b16      	ldr	r3, [pc, #88]	@ (8008998 <xTaskResumeAll+0x134>)
 8008940:	2201      	movs	r2, #1
 8008942:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--uxPendedCounts;
 8008944:	687b      	ldr	r3, [r7, #4]
 8008946:	3b01      	subs	r3, #1
 8008948:	607b      	str	r3, [r7, #4]
						} while( uxPendedCounts > ( UBaseType_t ) 0U );
 800894a:	687b      	ldr	r3, [r7, #4]
 800894c:	2b00      	cmp	r3, #0
 800894e:	d1f1      	bne.n	8008934 <xTaskResumeAll+0xd0>

						uxPendedTicks = 0;
 8008950:	4b12      	ldr	r3, [pc, #72]	@ (800899c <xTaskResumeAll+0x138>)
 8008952:	2200      	movs	r2, #0
 8008954:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 8008956:	4b10      	ldr	r3, [pc, #64]	@ (8008998 <xTaskResumeAll+0x134>)
 8008958:	681b      	ldr	r3, [r3, #0]
 800895a:	2b00      	cmp	r3, #0
 800895c:	d009      	beq.n	8008972 <xTaskResumeAll+0x10e>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 800895e:	2301      	movs	r3, #1
 8008960:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 8008962:	4b0f      	ldr	r3, [pc, #60]	@ (80089a0 <xTaskResumeAll+0x13c>)
 8008964:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8008968:	601a      	str	r2, [r3, #0]
 800896a:	f3bf 8f4f 	dsb	sy
 800896e:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8008972:	f001 f8f1 	bl	8009b58 <vPortExitCritical>

	return xAlreadyYielded;
 8008976:	68bb      	ldr	r3, [r7, #8]
}
 8008978:	4618      	mov	r0, r3
 800897a:	3710      	adds	r7, #16
 800897c:	46bd      	mov	sp, r7
 800897e:	bd80      	pop	{r7, pc}
 8008980:	2003e14c 	.word	0x2003e14c
 8008984:	2003e124 	.word	0x2003e124
 8008988:	2003e0e4 	.word	0x2003e0e4
 800898c:	2003e12c 	.word	0x2003e12c
 8008990:	2003dc54 	.word	0x2003dc54
 8008994:	2003dc50 	.word	0x2003dc50
 8008998:	2003e138 	.word	0x2003e138
 800899c:	2003e134 	.word	0x2003e134
 80089a0:	e000ed04 	.word	0xe000ed04

080089a4 <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 80089a4:	b480      	push	{r7}
 80089a6:	b083      	sub	sp, #12
 80089a8:	af00      	add	r7, sp, #0
TickType_t xTicks;

	/* Critical section required if running on a 16 bit processor. */
	portTICK_TYPE_ENTER_CRITICAL();
	{
		xTicks = xTickCount;
 80089aa:	4b05      	ldr	r3, [pc, #20]	@ (80089c0 <xTaskGetTickCount+0x1c>)
 80089ac:	681b      	ldr	r3, [r3, #0]
 80089ae:	607b      	str	r3, [r7, #4]
	}
	portTICK_TYPE_EXIT_CRITICAL();

	return xTicks;
 80089b0:	687b      	ldr	r3, [r7, #4]
}
 80089b2:	4618      	mov	r0, r3
 80089b4:	370c      	adds	r7, #12
 80089b6:	46bd      	mov	sp, r7
 80089b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80089bc:	4770      	bx	lr
 80089be:	bf00      	nop
 80089c0:	2003e128 	.word	0x2003e128

080089c4 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 80089c4:	b580      	push	{r7, lr}
 80089c6:	b086      	sub	sp, #24
 80089c8:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 80089ca:	2300      	movs	r3, #0
 80089cc:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80089ce:	4b50      	ldr	r3, [pc, #320]	@ (8008b10 <xTaskIncrementTick+0x14c>)
 80089d0:	681b      	ldr	r3, [r3, #0]
 80089d2:	2b00      	cmp	r3, #0
 80089d4:	f040 808c 	bne.w	8008af0 <xTaskIncrementTick+0x12c>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 80089d8:	4b4e      	ldr	r3, [pc, #312]	@ (8008b14 <xTaskIncrementTick+0x150>)
 80089da:	681b      	ldr	r3, [r3, #0]
 80089dc:	3301      	adds	r3, #1
 80089de:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 80089e0:	4a4c      	ldr	r2, [pc, #304]	@ (8008b14 <xTaskIncrementTick+0x150>)
 80089e2:	693b      	ldr	r3, [r7, #16]
 80089e4:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 80089e6:	693b      	ldr	r3, [r7, #16]
 80089e8:	2b00      	cmp	r3, #0
 80089ea:	d123      	bne.n	8008a34 <xTaskIncrementTick+0x70>
		{
			taskSWITCH_DELAYED_LISTS();
 80089ec:	4b4a      	ldr	r3, [pc, #296]	@ (8008b18 <xTaskIncrementTick+0x154>)
 80089ee:	681b      	ldr	r3, [r3, #0]
 80089f0:	681b      	ldr	r3, [r3, #0]
 80089f2:	2b00      	cmp	r3, #0
 80089f4:	d00d      	beq.n	8008a12 <xTaskIncrementTick+0x4e>
	__asm volatile
 80089f6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80089fa:	b672      	cpsid	i
 80089fc:	f383 8811 	msr	BASEPRI, r3
 8008a00:	f3bf 8f6f 	isb	sy
 8008a04:	f3bf 8f4f 	dsb	sy
 8008a08:	b662      	cpsie	i
 8008a0a:	603b      	str	r3, [r7, #0]
}
 8008a0c:	bf00      	nop
 8008a0e:	bf00      	nop
 8008a10:	e7fd      	b.n	8008a0e <xTaskIncrementTick+0x4a>
 8008a12:	4b41      	ldr	r3, [pc, #260]	@ (8008b18 <xTaskIncrementTick+0x154>)
 8008a14:	681b      	ldr	r3, [r3, #0]
 8008a16:	60fb      	str	r3, [r7, #12]
 8008a18:	4b40      	ldr	r3, [pc, #256]	@ (8008b1c <xTaskIncrementTick+0x158>)
 8008a1a:	681b      	ldr	r3, [r3, #0]
 8008a1c:	4a3e      	ldr	r2, [pc, #248]	@ (8008b18 <xTaskIncrementTick+0x154>)
 8008a1e:	6013      	str	r3, [r2, #0]
 8008a20:	4a3e      	ldr	r2, [pc, #248]	@ (8008b1c <xTaskIncrementTick+0x158>)
 8008a22:	68fb      	ldr	r3, [r7, #12]
 8008a24:	6013      	str	r3, [r2, #0]
 8008a26:	4b3e      	ldr	r3, [pc, #248]	@ (8008b20 <xTaskIncrementTick+0x15c>)
 8008a28:	681b      	ldr	r3, [r3, #0]
 8008a2a:	3301      	adds	r3, #1
 8008a2c:	4a3c      	ldr	r2, [pc, #240]	@ (8008b20 <xTaskIncrementTick+0x15c>)
 8008a2e:	6013      	str	r3, [r2, #0]
 8008a30:	f000 fae2 	bl	8008ff8 <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 8008a34:	4b3b      	ldr	r3, [pc, #236]	@ (8008b24 <xTaskIncrementTick+0x160>)
 8008a36:	681b      	ldr	r3, [r3, #0]
 8008a38:	693a      	ldr	r2, [r7, #16]
 8008a3a:	429a      	cmp	r2, r3
 8008a3c:	d349      	bcc.n	8008ad2 <xTaskIncrementTick+0x10e>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8008a3e:	4b36      	ldr	r3, [pc, #216]	@ (8008b18 <xTaskIncrementTick+0x154>)
 8008a40:	681b      	ldr	r3, [r3, #0]
 8008a42:	681b      	ldr	r3, [r3, #0]
 8008a44:	2b00      	cmp	r3, #0
 8008a46:	d104      	bne.n	8008a52 <xTaskIncrementTick+0x8e>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8008a48:	4b36      	ldr	r3, [pc, #216]	@ (8008b24 <xTaskIncrementTick+0x160>)
 8008a4a:	f04f 32ff 	mov.w	r2, #4294967295
 8008a4e:	601a      	str	r2, [r3, #0]
					break;
 8008a50:	e03f      	b.n	8008ad2 <xTaskIncrementTick+0x10e>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8008a52:	4b31      	ldr	r3, [pc, #196]	@ (8008b18 <xTaskIncrementTick+0x154>)
 8008a54:	681b      	ldr	r3, [r3, #0]
 8008a56:	68db      	ldr	r3, [r3, #12]
 8008a58:	68db      	ldr	r3, [r3, #12]
 8008a5a:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 8008a5c:	68bb      	ldr	r3, [r7, #8]
 8008a5e:	685b      	ldr	r3, [r3, #4]
 8008a60:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 8008a62:	693a      	ldr	r2, [r7, #16]
 8008a64:	687b      	ldr	r3, [r7, #4]
 8008a66:	429a      	cmp	r2, r3
 8008a68:	d203      	bcs.n	8008a72 <xTaskIncrementTick+0xae>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 8008a6a:	4a2e      	ldr	r2, [pc, #184]	@ (8008b24 <xTaskIncrementTick+0x160>)
 8008a6c:	687b      	ldr	r3, [r7, #4]
 8008a6e:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 8008a70:	e02f      	b.n	8008ad2 <xTaskIncrementTick+0x10e>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8008a72:	68bb      	ldr	r3, [r7, #8]
 8008a74:	3304      	adds	r3, #4
 8008a76:	4618      	mov	r0, r3
 8008a78:	f7fe ff0c 	bl	8007894 <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 8008a7c:	68bb      	ldr	r3, [r7, #8]
 8008a7e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8008a80:	2b00      	cmp	r3, #0
 8008a82:	d004      	beq.n	8008a8e <xTaskIncrementTick+0xca>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8008a84:	68bb      	ldr	r3, [r7, #8]
 8008a86:	3318      	adds	r3, #24
 8008a88:	4618      	mov	r0, r3
 8008a8a:	f7fe ff03 	bl	8007894 <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 8008a8e:	68bb      	ldr	r3, [r7, #8]
 8008a90:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8008a92:	4b25      	ldr	r3, [pc, #148]	@ (8008b28 <xTaskIncrementTick+0x164>)
 8008a94:	681b      	ldr	r3, [r3, #0]
 8008a96:	429a      	cmp	r2, r3
 8008a98:	d903      	bls.n	8008aa2 <xTaskIncrementTick+0xde>
 8008a9a:	68bb      	ldr	r3, [r7, #8]
 8008a9c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8008a9e:	4a22      	ldr	r2, [pc, #136]	@ (8008b28 <xTaskIncrementTick+0x164>)
 8008aa0:	6013      	str	r3, [r2, #0]
 8008aa2:	68bb      	ldr	r3, [r7, #8]
 8008aa4:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8008aa6:	4613      	mov	r3, r2
 8008aa8:	009b      	lsls	r3, r3, #2
 8008aaa:	4413      	add	r3, r2
 8008aac:	009b      	lsls	r3, r3, #2
 8008aae:	4a1f      	ldr	r2, [pc, #124]	@ (8008b2c <xTaskIncrementTick+0x168>)
 8008ab0:	441a      	add	r2, r3
 8008ab2:	68bb      	ldr	r3, [r7, #8]
 8008ab4:	3304      	adds	r3, #4
 8008ab6:	4619      	mov	r1, r3
 8008ab8:	4610      	mov	r0, r2
 8008aba:	f7fe fe8e 	bl	80077da <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8008abe:	68bb      	ldr	r3, [r7, #8]
 8008ac0:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8008ac2:	4b1b      	ldr	r3, [pc, #108]	@ (8008b30 <xTaskIncrementTick+0x16c>)
 8008ac4:	681b      	ldr	r3, [r3, #0]
 8008ac6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8008ac8:	429a      	cmp	r2, r3
 8008aca:	d3b8      	bcc.n	8008a3e <xTaskIncrementTick+0x7a>
						{
							xSwitchRequired = pdTRUE;
 8008acc:	2301      	movs	r3, #1
 8008ace:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8008ad0:	e7b5      	b.n	8008a3e <xTaskIncrementTick+0x7a>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 8008ad2:	4b17      	ldr	r3, [pc, #92]	@ (8008b30 <xTaskIncrementTick+0x16c>)
 8008ad4:	681b      	ldr	r3, [r3, #0]
 8008ad6:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8008ad8:	4914      	ldr	r1, [pc, #80]	@ (8008b2c <xTaskIncrementTick+0x168>)
 8008ada:	4613      	mov	r3, r2
 8008adc:	009b      	lsls	r3, r3, #2
 8008ade:	4413      	add	r3, r2
 8008ae0:	009b      	lsls	r3, r3, #2
 8008ae2:	440b      	add	r3, r1
 8008ae4:	681b      	ldr	r3, [r3, #0]
 8008ae6:	2b01      	cmp	r3, #1
 8008ae8:	d907      	bls.n	8008afa <xTaskIncrementTick+0x136>
			{
				xSwitchRequired = pdTRUE;
 8008aea:	2301      	movs	r3, #1
 8008aec:	617b      	str	r3, [r7, #20]
 8008aee:	e004      	b.n	8008afa <xTaskIncrementTick+0x136>
		}
		#endif /* configUSE_TICK_HOOK */
	}
	else
	{
		++uxPendedTicks;
 8008af0:	4b10      	ldr	r3, [pc, #64]	@ (8008b34 <xTaskIncrementTick+0x170>)
 8008af2:	681b      	ldr	r3, [r3, #0]
 8008af4:	3301      	adds	r3, #1
 8008af6:	4a0f      	ldr	r2, [pc, #60]	@ (8008b34 <xTaskIncrementTick+0x170>)
 8008af8:	6013      	str	r3, [r2, #0]
		#endif
	}

	#if ( configUSE_PREEMPTION == 1 )
	{
		if( xYieldPending != pdFALSE )
 8008afa:	4b0f      	ldr	r3, [pc, #60]	@ (8008b38 <xTaskIncrementTick+0x174>)
 8008afc:	681b      	ldr	r3, [r3, #0]
 8008afe:	2b00      	cmp	r3, #0
 8008b00:	d001      	beq.n	8008b06 <xTaskIncrementTick+0x142>
		{
			xSwitchRequired = pdTRUE;
 8008b02:	2301      	movs	r3, #1
 8008b04:	617b      	str	r3, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_PREEMPTION */

	return xSwitchRequired;
 8008b06:	697b      	ldr	r3, [r7, #20]
}
 8008b08:	4618      	mov	r0, r3
 8008b0a:	3718      	adds	r7, #24
 8008b0c:	46bd      	mov	sp, r7
 8008b0e:	bd80      	pop	{r7, pc}
 8008b10:	2003e14c 	.word	0x2003e14c
 8008b14:	2003e128 	.word	0x2003e128
 8008b18:	2003e0dc 	.word	0x2003e0dc
 8008b1c:	2003e0e0 	.word	0x2003e0e0
 8008b20:	2003e13c 	.word	0x2003e13c
 8008b24:	2003e144 	.word	0x2003e144
 8008b28:	2003e12c 	.word	0x2003e12c
 8008b2c:	2003dc54 	.word	0x2003dc54
 8008b30:	2003dc50 	.word	0x2003dc50
 8008b34:	2003e134 	.word	0x2003e134
 8008b38:	2003e138 	.word	0x2003e138

08008b3c <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 8008b3c:	b480      	push	{r7}
 8008b3e:	b085      	sub	sp, #20
 8008b40:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 8008b42:	4b29      	ldr	r3, [pc, #164]	@ (8008be8 <vTaskSwitchContext+0xac>)
 8008b44:	681b      	ldr	r3, [r3, #0]
 8008b46:	2b00      	cmp	r3, #0
 8008b48:	d003      	beq.n	8008b52 <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 8008b4a:	4b28      	ldr	r3, [pc, #160]	@ (8008bec <vTaskSwitchContext+0xb0>)
 8008b4c:	2201      	movs	r2, #1
 8008b4e:	601a      	str	r2, [r3, #0]
			structure specific to this task. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 8008b50:	e044      	b.n	8008bdc <vTaskSwitchContext+0xa0>
		xYieldPending = pdFALSE;
 8008b52:	4b26      	ldr	r3, [pc, #152]	@ (8008bec <vTaskSwitchContext+0xb0>)
 8008b54:	2200      	movs	r2, #0
 8008b56:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8008b58:	4b25      	ldr	r3, [pc, #148]	@ (8008bf0 <vTaskSwitchContext+0xb4>)
 8008b5a:	681b      	ldr	r3, [r3, #0]
 8008b5c:	60fb      	str	r3, [r7, #12]
 8008b5e:	e013      	b.n	8008b88 <vTaskSwitchContext+0x4c>
 8008b60:	68fb      	ldr	r3, [r7, #12]
 8008b62:	2b00      	cmp	r3, #0
 8008b64:	d10d      	bne.n	8008b82 <vTaskSwitchContext+0x46>
	__asm volatile
 8008b66:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008b6a:	b672      	cpsid	i
 8008b6c:	f383 8811 	msr	BASEPRI, r3
 8008b70:	f3bf 8f6f 	isb	sy
 8008b74:	f3bf 8f4f 	dsb	sy
 8008b78:	b662      	cpsie	i
 8008b7a:	607b      	str	r3, [r7, #4]
}
 8008b7c:	bf00      	nop
 8008b7e:	bf00      	nop
 8008b80:	e7fd      	b.n	8008b7e <vTaskSwitchContext+0x42>
 8008b82:	68fb      	ldr	r3, [r7, #12]
 8008b84:	3b01      	subs	r3, #1
 8008b86:	60fb      	str	r3, [r7, #12]
 8008b88:	491a      	ldr	r1, [pc, #104]	@ (8008bf4 <vTaskSwitchContext+0xb8>)
 8008b8a:	68fa      	ldr	r2, [r7, #12]
 8008b8c:	4613      	mov	r3, r2
 8008b8e:	009b      	lsls	r3, r3, #2
 8008b90:	4413      	add	r3, r2
 8008b92:	009b      	lsls	r3, r3, #2
 8008b94:	440b      	add	r3, r1
 8008b96:	681b      	ldr	r3, [r3, #0]
 8008b98:	2b00      	cmp	r3, #0
 8008b9a:	d0e1      	beq.n	8008b60 <vTaskSwitchContext+0x24>
 8008b9c:	68fa      	ldr	r2, [r7, #12]
 8008b9e:	4613      	mov	r3, r2
 8008ba0:	009b      	lsls	r3, r3, #2
 8008ba2:	4413      	add	r3, r2
 8008ba4:	009b      	lsls	r3, r3, #2
 8008ba6:	4a13      	ldr	r2, [pc, #76]	@ (8008bf4 <vTaskSwitchContext+0xb8>)
 8008ba8:	4413      	add	r3, r2
 8008baa:	60bb      	str	r3, [r7, #8]
 8008bac:	68bb      	ldr	r3, [r7, #8]
 8008bae:	685b      	ldr	r3, [r3, #4]
 8008bb0:	685a      	ldr	r2, [r3, #4]
 8008bb2:	68bb      	ldr	r3, [r7, #8]
 8008bb4:	605a      	str	r2, [r3, #4]
 8008bb6:	68bb      	ldr	r3, [r7, #8]
 8008bb8:	685a      	ldr	r2, [r3, #4]
 8008bba:	68bb      	ldr	r3, [r7, #8]
 8008bbc:	3308      	adds	r3, #8
 8008bbe:	429a      	cmp	r2, r3
 8008bc0:	d104      	bne.n	8008bcc <vTaskSwitchContext+0x90>
 8008bc2:	68bb      	ldr	r3, [r7, #8]
 8008bc4:	685b      	ldr	r3, [r3, #4]
 8008bc6:	685a      	ldr	r2, [r3, #4]
 8008bc8:	68bb      	ldr	r3, [r7, #8]
 8008bca:	605a      	str	r2, [r3, #4]
 8008bcc:	68bb      	ldr	r3, [r7, #8]
 8008bce:	685b      	ldr	r3, [r3, #4]
 8008bd0:	68db      	ldr	r3, [r3, #12]
 8008bd2:	4a09      	ldr	r2, [pc, #36]	@ (8008bf8 <vTaskSwitchContext+0xbc>)
 8008bd4:	6013      	str	r3, [r2, #0]
 8008bd6:	4a06      	ldr	r2, [pc, #24]	@ (8008bf0 <vTaskSwitchContext+0xb4>)
 8008bd8:	68fb      	ldr	r3, [r7, #12]
 8008bda:	6013      	str	r3, [r2, #0]
}
 8008bdc:	bf00      	nop
 8008bde:	3714      	adds	r7, #20
 8008be0:	46bd      	mov	sp, r7
 8008be2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008be6:	4770      	bx	lr
 8008be8:	2003e14c 	.word	0x2003e14c
 8008bec:	2003e138 	.word	0x2003e138
 8008bf0:	2003e12c 	.word	0x2003e12c
 8008bf4:	2003dc54 	.word	0x2003dc54
 8008bf8:	2003dc50 	.word	0x2003dc50

08008bfc <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 8008bfc:	b580      	push	{r7, lr}
 8008bfe:	b084      	sub	sp, #16
 8008c00:	af00      	add	r7, sp, #0
 8008c02:	6078      	str	r0, [r7, #4]
 8008c04:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 8008c06:	687b      	ldr	r3, [r7, #4]
 8008c08:	2b00      	cmp	r3, #0
 8008c0a:	d10d      	bne.n	8008c28 <vTaskPlaceOnEventList+0x2c>
	__asm volatile
 8008c0c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008c10:	b672      	cpsid	i
 8008c12:	f383 8811 	msr	BASEPRI, r3
 8008c16:	f3bf 8f6f 	isb	sy
 8008c1a:	f3bf 8f4f 	dsb	sy
 8008c1e:	b662      	cpsie	i
 8008c20:	60fb      	str	r3, [r7, #12]
}
 8008c22:	bf00      	nop
 8008c24:	bf00      	nop
 8008c26:	e7fd      	b.n	8008c24 <vTaskPlaceOnEventList+0x28>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8008c28:	4b07      	ldr	r3, [pc, #28]	@ (8008c48 <vTaskPlaceOnEventList+0x4c>)
 8008c2a:	681b      	ldr	r3, [r3, #0]
 8008c2c:	3318      	adds	r3, #24
 8008c2e:	4619      	mov	r1, r3
 8008c30:	6878      	ldr	r0, [r7, #4]
 8008c32:	f7fe fdf6 	bl	8007822 <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 8008c36:	2101      	movs	r1, #1
 8008c38:	6838      	ldr	r0, [r7, #0]
 8008c3a:	f000 fa8f 	bl	800915c <prvAddCurrentTaskToDelayedList>
}
 8008c3e:	bf00      	nop
 8008c40:	3710      	adds	r7, #16
 8008c42:	46bd      	mov	sp, r7
 8008c44:	bd80      	pop	{r7, pc}
 8008c46:	bf00      	nop
 8008c48:	2003dc50 	.word	0x2003dc50

08008c4c <vTaskPlaceOnEventListRestricted>:
/*-----------------------------------------------------------*/

#if( configUSE_TIMERS == 1 )

	void vTaskPlaceOnEventListRestricted( List_t * const pxEventList, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 8008c4c:	b580      	push	{r7, lr}
 8008c4e:	b086      	sub	sp, #24
 8008c50:	af00      	add	r7, sp, #0
 8008c52:	60f8      	str	r0, [r7, #12]
 8008c54:	60b9      	str	r1, [r7, #8]
 8008c56:	607a      	str	r2, [r7, #4]
		configASSERT( pxEventList );
 8008c58:	68fb      	ldr	r3, [r7, #12]
 8008c5a:	2b00      	cmp	r3, #0
 8008c5c:	d10d      	bne.n	8008c7a <vTaskPlaceOnEventListRestricted+0x2e>
	__asm volatile
 8008c5e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008c62:	b672      	cpsid	i
 8008c64:	f383 8811 	msr	BASEPRI, r3
 8008c68:	f3bf 8f6f 	isb	sy
 8008c6c:	f3bf 8f4f 	dsb	sy
 8008c70:	b662      	cpsie	i
 8008c72:	617b      	str	r3, [r7, #20]
}
 8008c74:	bf00      	nop
 8008c76:	bf00      	nop
 8008c78:	e7fd      	b.n	8008c76 <vTaskPlaceOnEventListRestricted+0x2a>

		/* Place the event list item of the TCB in the appropriate event list.
		In this case it is assume that this is the only task that is going to
		be waiting on this event list, so the faster vListInsertEnd() function
		can be used in place of vListInsert. */
		vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8008c7a:	4b0a      	ldr	r3, [pc, #40]	@ (8008ca4 <vTaskPlaceOnEventListRestricted+0x58>)
 8008c7c:	681b      	ldr	r3, [r3, #0]
 8008c7e:	3318      	adds	r3, #24
 8008c80:	4619      	mov	r1, r3
 8008c82:	68f8      	ldr	r0, [r7, #12]
 8008c84:	f7fe fda9 	bl	80077da <vListInsertEnd>

		/* If the task should block indefinitely then set the block time to a
		value that will be recognised as an indefinite delay inside the
		prvAddCurrentTaskToDelayedList() function. */
		if( xWaitIndefinitely != pdFALSE )
 8008c88:	687b      	ldr	r3, [r7, #4]
 8008c8a:	2b00      	cmp	r3, #0
 8008c8c:	d002      	beq.n	8008c94 <vTaskPlaceOnEventListRestricted+0x48>
		{
			xTicksToWait = portMAX_DELAY;
 8008c8e:	f04f 33ff 	mov.w	r3, #4294967295
 8008c92:	60bb      	str	r3, [r7, #8]
		}

		traceTASK_DELAY_UNTIL( ( xTickCount + xTicksToWait ) );
		prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 8008c94:	6879      	ldr	r1, [r7, #4]
 8008c96:	68b8      	ldr	r0, [r7, #8]
 8008c98:	f000 fa60 	bl	800915c <prvAddCurrentTaskToDelayedList>
	}
 8008c9c:	bf00      	nop
 8008c9e:	3718      	adds	r7, #24
 8008ca0:	46bd      	mov	sp, r7
 8008ca2:	bd80      	pop	{r7, pc}
 8008ca4:	2003dc50 	.word	0x2003dc50

08008ca8 <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 8008ca8:	b580      	push	{r7, lr}
 8008caa:	b086      	sub	sp, #24
 8008cac:	af00      	add	r7, sp, #0
 8008cae:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8008cb0:	687b      	ldr	r3, [r7, #4]
 8008cb2:	68db      	ldr	r3, [r3, #12]
 8008cb4:	68db      	ldr	r3, [r3, #12]
 8008cb6:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 8008cb8:	693b      	ldr	r3, [r7, #16]
 8008cba:	2b00      	cmp	r3, #0
 8008cbc:	d10d      	bne.n	8008cda <xTaskRemoveFromEventList+0x32>
	__asm volatile
 8008cbe:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008cc2:	b672      	cpsid	i
 8008cc4:	f383 8811 	msr	BASEPRI, r3
 8008cc8:	f3bf 8f6f 	isb	sy
 8008ccc:	f3bf 8f4f 	dsb	sy
 8008cd0:	b662      	cpsie	i
 8008cd2:	60fb      	str	r3, [r7, #12]
}
 8008cd4:	bf00      	nop
 8008cd6:	bf00      	nop
 8008cd8:	e7fd      	b.n	8008cd6 <xTaskRemoveFromEventList+0x2e>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 8008cda:	693b      	ldr	r3, [r7, #16]
 8008cdc:	3318      	adds	r3, #24
 8008cde:	4618      	mov	r0, r3
 8008ce0:	f7fe fdd8 	bl	8007894 <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8008ce4:	4b1d      	ldr	r3, [pc, #116]	@ (8008d5c <xTaskRemoveFromEventList+0xb4>)
 8008ce6:	681b      	ldr	r3, [r3, #0]
 8008ce8:	2b00      	cmp	r3, #0
 8008cea:	d11d      	bne.n	8008d28 <xTaskRemoveFromEventList+0x80>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 8008cec:	693b      	ldr	r3, [r7, #16]
 8008cee:	3304      	adds	r3, #4
 8008cf0:	4618      	mov	r0, r3
 8008cf2:	f7fe fdcf 	bl	8007894 <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 8008cf6:	693b      	ldr	r3, [r7, #16]
 8008cf8:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8008cfa:	4b19      	ldr	r3, [pc, #100]	@ (8008d60 <xTaskRemoveFromEventList+0xb8>)
 8008cfc:	681b      	ldr	r3, [r3, #0]
 8008cfe:	429a      	cmp	r2, r3
 8008d00:	d903      	bls.n	8008d0a <xTaskRemoveFromEventList+0x62>
 8008d02:	693b      	ldr	r3, [r7, #16]
 8008d04:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8008d06:	4a16      	ldr	r2, [pc, #88]	@ (8008d60 <xTaskRemoveFromEventList+0xb8>)
 8008d08:	6013      	str	r3, [r2, #0]
 8008d0a:	693b      	ldr	r3, [r7, #16]
 8008d0c:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8008d0e:	4613      	mov	r3, r2
 8008d10:	009b      	lsls	r3, r3, #2
 8008d12:	4413      	add	r3, r2
 8008d14:	009b      	lsls	r3, r3, #2
 8008d16:	4a13      	ldr	r2, [pc, #76]	@ (8008d64 <xTaskRemoveFromEventList+0xbc>)
 8008d18:	441a      	add	r2, r3
 8008d1a:	693b      	ldr	r3, [r7, #16]
 8008d1c:	3304      	adds	r3, #4
 8008d1e:	4619      	mov	r1, r3
 8008d20:	4610      	mov	r0, r2
 8008d22:	f7fe fd5a 	bl	80077da <vListInsertEnd>
 8008d26:	e005      	b.n	8008d34 <xTaskRemoveFromEventList+0x8c>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 8008d28:	693b      	ldr	r3, [r7, #16]
 8008d2a:	3318      	adds	r3, #24
 8008d2c:	4619      	mov	r1, r3
 8008d2e:	480e      	ldr	r0, [pc, #56]	@ (8008d68 <xTaskRemoveFromEventList+0xc0>)
 8008d30:	f7fe fd53 	bl	80077da <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 8008d34:	693b      	ldr	r3, [r7, #16]
 8008d36:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8008d38:	4b0c      	ldr	r3, [pc, #48]	@ (8008d6c <xTaskRemoveFromEventList+0xc4>)
 8008d3a:	681b      	ldr	r3, [r3, #0]
 8008d3c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8008d3e:	429a      	cmp	r2, r3
 8008d40:	d905      	bls.n	8008d4e <xTaskRemoveFromEventList+0xa6>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 8008d42:	2301      	movs	r3, #1
 8008d44:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 8008d46:	4b0a      	ldr	r3, [pc, #40]	@ (8008d70 <xTaskRemoveFromEventList+0xc8>)
 8008d48:	2201      	movs	r2, #1
 8008d4a:	601a      	str	r2, [r3, #0]
 8008d4c:	e001      	b.n	8008d52 <xTaskRemoveFromEventList+0xaa>
	}
	else
	{
		xReturn = pdFALSE;
 8008d4e:	2300      	movs	r3, #0
 8008d50:	617b      	str	r3, [r7, #20]
	}

	return xReturn;
 8008d52:	697b      	ldr	r3, [r7, #20]
}
 8008d54:	4618      	mov	r0, r3
 8008d56:	3718      	adds	r7, #24
 8008d58:	46bd      	mov	sp, r7
 8008d5a:	bd80      	pop	{r7, pc}
 8008d5c:	2003e14c 	.word	0x2003e14c
 8008d60:	2003e12c 	.word	0x2003e12c
 8008d64:	2003dc54 	.word	0x2003dc54
 8008d68:	2003e0e4 	.word	0x2003e0e4
 8008d6c:	2003dc50 	.word	0x2003dc50
 8008d70:	2003e138 	.word	0x2003e138

08008d74 <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 8008d74:	b480      	push	{r7}
 8008d76:	b083      	sub	sp, #12
 8008d78:	af00      	add	r7, sp, #0
 8008d7a:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 8008d7c:	4b06      	ldr	r3, [pc, #24]	@ (8008d98 <vTaskInternalSetTimeOutState+0x24>)
 8008d7e:	681a      	ldr	r2, [r3, #0]
 8008d80:	687b      	ldr	r3, [r7, #4]
 8008d82:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 8008d84:	4b05      	ldr	r3, [pc, #20]	@ (8008d9c <vTaskInternalSetTimeOutState+0x28>)
 8008d86:	681a      	ldr	r2, [r3, #0]
 8008d88:	687b      	ldr	r3, [r7, #4]
 8008d8a:	605a      	str	r2, [r3, #4]
}
 8008d8c:	bf00      	nop
 8008d8e:	370c      	adds	r7, #12
 8008d90:	46bd      	mov	sp, r7
 8008d92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008d96:	4770      	bx	lr
 8008d98:	2003e13c 	.word	0x2003e13c
 8008d9c:	2003e128 	.word	0x2003e128

08008da0 <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 8008da0:	b580      	push	{r7, lr}
 8008da2:	b088      	sub	sp, #32
 8008da4:	af00      	add	r7, sp, #0
 8008da6:	6078      	str	r0, [r7, #4]
 8008da8:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 8008daa:	687b      	ldr	r3, [r7, #4]
 8008dac:	2b00      	cmp	r3, #0
 8008dae:	d10d      	bne.n	8008dcc <xTaskCheckForTimeOut+0x2c>
	__asm volatile
 8008db0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008db4:	b672      	cpsid	i
 8008db6:	f383 8811 	msr	BASEPRI, r3
 8008dba:	f3bf 8f6f 	isb	sy
 8008dbe:	f3bf 8f4f 	dsb	sy
 8008dc2:	b662      	cpsie	i
 8008dc4:	613b      	str	r3, [r7, #16]
}
 8008dc6:	bf00      	nop
 8008dc8:	bf00      	nop
 8008dca:	e7fd      	b.n	8008dc8 <xTaskCheckForTimeOut+0x28>
	configASSERT( pxTicksToWait );
 8008dcc:	683b      	ldr	r3, [r7, #0]
 8008dce:	2b00      	cmp	r3, #0
 8008dd0:	d10d      	bne.n	8008dee <xTaskCheckForTimeOut+0x4e>
	__asm volatile
 8008dd2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008dd6:	b672      	cpsid	i
 8008dd8:	f383 8811 	msr	BASEPRI, r3
 8008ddc:	f3bf 8f6f 	isb	sy
 8008de0:	f3bf 8f4f 	dsb	sy
 8008de4:	b662      	cpsie	i
 8008de6:	60fb      	str	r3, [r7, #12]
}
 8008de8:	bf00      	nop
 8008dea:	bf00      	nop
 8008dec:	e7fd      	b.n	8008dea <xTaskCheckForTimeOut+0x4a>

	taskENTER_CRITICAL();
 8008dee:	f000 fe7d 	bl	8009aec <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 8008df2:	4b1d      	ldr	r3, [pc, #116]	@ (8008e68 <xTaskCheckForTimeOut+0xc8>)
 8008df4:	681b      	ldr	r3, [r3, #0]
 8008df6:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 8008df8:	687b      	ldr	r3, [r7, #4]
 8008dfa:	685b      	ldr	r3, [r3, #4]
 8008dfc:	69ba      	ldr	r2, [r7, #24]
 8008dfe:	1ad3      	subs	r3, r2, r3
 8008e00:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 8008e02:	683b      	ldr	r3, [r7, #0]
 8008e04:	681b      	ldr	r3, [r3, #0]
 8008e06:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008e0a:	d102      	bne.n	8008e12 <xTaskCheckForTimeOut+0x72>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 8008e0c:	2300      	movs	r3, #0
 8008e0e:	61fb      	str	r3, [r7, #28]
 8008e10:	e023      	b.n	8008e5a <xTaskCheckForTimeOut+0xba>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 8008e12:	687b      	ldr	r3, [r7, #4]
 8008e14:	681a      	ldr	r2, [r3, #0]
 8008e16:	4b15      	ldr	r3, [pc, #84]	@ (8008e6c <xTaskCheckForTimeOut+0xcc>)
 8008e18:	681b      	ldr	r3, [r3, #0]
 8008e1a:	429a      	cmp	r2, r3
 8008e1c:	d007      	beq.n	8008e2e <xTaskCheckForTimeOut+0x8e>
 8008e1e:	687b      	ldr	r3, [r7, #4]
 8008e20:	685b      	ldr	r3, [r3, #4]
 8008e22:	69ba      	ldr	r2, [r7, #24]
 8008e24:	429a      	cmp	r2, r3
 8008e26:	d302      	bcc.n	8008e2e <xTaskCheckForTimeOut+0x8e>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 8008e28:	2301      	movs	r3, #1
 8008e2a:	61fb      	str	r3, [r7, #28]
 8008e2c:	e015      	b.n	8008e5a <xTaskCheckForTimeOut+0xba>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 8008e2e:	683b      	ldr	r3, [r7, #0]
 8008e30:	681b      	ldr	r3, [r3, #0]
 8008e32:	697a      	ldr	r2, [r7, #20]
 8008e34:	429a      	cmp	r2, r3
 8008e36:	d20b      	bcs.n	8008e50 <xTaskCheckForTimeOut+0xb0>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 8008e38:	683b      	ldr	r3, [r7, #0]
 8008e3a:	681a      	ldr	r2, [r3, #0]
 8008e3c:	697b      	ldr	r3, [r7, #20]
 8008e3e:	1ad2      	subs	r2, r2, r3
 8008e40:	683b      	ldr	r3, [r7, #0]
 8008e42:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 8008e44:	6878      	ldr	r0, [r7, #4]
 8008e46:	f7ff ff95 	bl	8008d74 <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 8008e4a:	2300      	movs	r3, #0
 8008e4c:	61fb      	str	r3, [r7, #28]
 8008e4e:	e004      	b.n	8008e5a <xTaskCheckForTimeOut+0xba>
		}
		else
		{
			*pxTicksToWait = 0;
 8008e50:	683b      	ldr	r3, [r7, #0]
 8008e52:	2200      	movs	r2, #0
 8008e54:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 8008e56:	2301      	movs	r3, #1
 8008e58:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 8008e5a:	f000 fe7d 	bl	8009b58 <vPortExitCritical>

	return xReturn;
 8008e5e:	69fb      	ldr	r3, [r7, #28]
}
 8008e60:	4618      	mov	r0, r3
 8008e62:	3720      	adds	r7, #32
 8008e64:	46bd      	mov	sp, r7
 8008e66:	bd80      	pop	{r7, pc}
 8008e68:	2003e128 	.word	0x2003e128
 8008e6c:	2003e13c 	.word	0x2003e13c

08008e70 <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 8008e70:	b480      	push	{r7}
 8008e72:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 8008e74:	4b03      	ldr	r3, [pc, #12]	@ (8008e84 <vTaskMissedYield+0x14>)
 8008e76:	2201      	movs	r2, #1
 8008e78:	601a      	str	r2, [r3, #0]
}
 8008e7a:	bf00      	nop
 8008e7c:	46bd      	mov	sp, r7
 8008e7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008e82:	4770      	bx	lr
 8008e84:	2003e138 	.word	0x2003e138

08008e88 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 8008e88:	b580      	push	{r7, lr}
 8008e8a:	b082      	sub	sp, #8
 8008e8c:	af00      	add	r7, sp, #0
 8008e8e:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 8008e90:	f000 f852 	bl	8008f38 <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 8008e94:	4b06      	ldr	r3, [pc, #24]	@ (8008eb0 <prvIdleTask+0x28>)
 8008e96:	681b      	ldr	r3, [r3, #0]
 8008e98:	2b01      	cmp	r3, #1
 8008e9a:	d9f9      	bls.n	8008e90 <prvIdleTask+0x8>
			{
				taskYIELD();
 8008e9c:	4b05      	ldr	r3, [pc, #20]	@ (8008eb4 <prvIdleTask+0x2c>)
 8008e9e:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8008ea2:	601a      	str	r2, [r3, #0]
 8008ea4:	f3bf 8f4f 	dsb	sy
 8008ea8:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 8008eac:	e7f0      	b.n	8008e90 <prvIdleTask+0x8>
 8008eae:	bf00      	nop
 8008eb0:	2003dc54 	.word	0x2003dc54
 8008eb4:	e000ed04 	.word	0xe000ed04

08008eb8 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 8008eb8:	b580      	push	{r7, lr}
 8008eba:	b082      	sub	sp, #8
 8008ebc:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8008ebe:	2300      	movs	r3, #0
 8008ec0:	607b      	str	r3, [r7, #4]
 8008ec2:	e00c      	b.n	8008ede <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 8008ec4:	687a      	ldr	r2, [r7, #4]
 8008ec6:	4613      	mov	r3, r2
 8008ec8:	009b      	lsls	r3, r3, #2
 8008eca:	4413      	add	r3, r2
 8008ecc:	009b      	lsls	r3, r3, #2
 8008ece:	4a12      	ldr	r2, [pc, #72]	@ (8008f18 <prvInitialiseTaskLists+0x60>)
 8008ed0:	4413      	add	r3, r2
 8008ed2:	4618      	mov	r0, r3
 8008ed4:	f7fe fc54 	bl	8007780 <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8008ed8:	687b      	ldr	r3, [r7, #4]
 8008eda:	3301      	adds	r3, #1
 8008edc:	607b      	str	r3, [r7, #4]
 8008ede:	687b      	ldr	r3, [r7, #4]
 8008ee0:	2b37      	cmp	r3, #55	@ 0x37
 8008ee2:	d9ef      	bls.n	8008ec4 <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 8008ee4:	480d      	ldr	r0, [pc, #52]	@ (8008f1c <prvInitialiseTaskLists+0x64>)
 8008ee6:	f7fe fc4b 	bl	8007780 <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 8008eea:	480d      	ldr	r0, [pc, #52]	@ (8008f20 <prvInitialiseTaskLists+0x68>)
 8008eec:	f7fe fc48 	bl	8007780 <vListInitialise>
	vListInitialise( &xPendingReadyList );
 8008ef0:	480c      	ldr	r0, [pc, #48]	@ (8008f24 <prvInitialiseTaskLists+0x6c>)
 8008ef2:	f7fe fc45 	bl	8007780 <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 8008ef6:	480c      	ldr	r0, [pc, #48]	@ (8008f28 <prvInitialiseTaskLists+0x70>)
 8008ef8:	f7fe fc42 	bl	8007780 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 8008efc:	480b      	ldr	r0, [pc, #44]	@ (8008f2c <prvInitialiseTaskLists+0x74>)
 8008efe:	f7fe fc3f 	bl	8007780 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 8008f02:	4b0b      	ldr	r3, [pc, #44]	@ (8008f30 <prvInitialiseTaskLists+0x78>)
 8008f04:	4a05      	ldr	r2, [pc, #20]	@ (8008f1c <prvInitialiseTaskLists+0x64>)
 8008f06:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 8008f08:	4b0a      	ldr	r3, [pc, #40]	@ (8008f34 <prvInitialiseTaskLists+0x7c>)
 8008f0a:	4a05      	ldr	r2, [pc, #20]	@ (8008f20 <prvInitialiseTaskLists+0x68>)
 8008f0c:	601a      	str	r2, [r3, #0]
}
 8008f0e:	bf00      	nop
 8008f10:	3708      	adds	r7, #8
 8008f12:	46bd      	mov	sp, r7
 8008f14:	bd80      	pop	{r7, pc}
 8008f16:	bf00      	nop
 8008f18:	2003dc54 	.word	0x2003dc54
 8008f1c:	2003e0b4 	.word	0x2003e0b4
 8008f20:	2003e0c8 	.word	0x2003e0c8
 8008f24:	2003e0e4 	.word	0x2003e0e4
 8008f28:	2003e0f8 	.word	0x2003e0f8
 8008f2c:	2003e110 	.word	0x2003e110
 8008f30:	2003e0dc 	.word	0x2003e0dc
 8008f34:	2003e0e0 	.word	0x2003e0e0

08008f38 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 8008f38:	b580      	push	{r7, lr}
 8008f3a:	b082      	sub	sp, #8
 8008f3c:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8008f3e:	e019      	b.n	8008f74 <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 8008f40:	f000 fdd4 	bl	8009aec <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8008f44:	4b10      	ldr	r3, [pc, #64]	@ (8008f88 <prvCheckTasksWaitingTermination+0x50>)
 8008f46:	68db      	ldr	r3, [r3, #12]
 8008f48:	68db      	ldr	r3, [r3, #12]
 8008f4a:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8008f4c:	687b      	ldr	r3, [r7, #4]
 8008f4e:	3304      	adds	r3, #4
 8008f50:	4618      	mov	r0, r3
 8008f52:	f7fe fc9f 	bl	8007894 <uxListRemove>
				--uxCurrentNumberOfTasks;
 8008f56:	4b0d      	ldr	r3, [pc, #52]	@ (8008f8c <prvCheckTasksWaitingTermination+0x54>)
 8008f58:	681b      	ldr	r3, [r3, #0]
 8008f5a:	3b01      	subs	r3, #1
 8008f5c:	4a0b      	ldr	r2, [pc, #44]	@ (8008f8c <prvCheckTasksWaitingTermination+0x54>)
 8008f5e:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 8008f60:	4b0b      	ldr	r3, [pc, #44]	@ (8008f90 <prvCheckTasksWaitingTermination+0x58>)
 8008f62:	681b      	ldr	r3, [r3, #0]
 8008f64:	3b01      	subs	r3, #1
 8008f66:	4a0a      	ldr	r2, [pc, #40]	@ (8008f90 <prvCheckTasksWaitingTermination+0x58>)
 8008f68:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 8008f6a:	f000 fdf5 	bl	8009b58 <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 8008f6e:	6878      	ldr	r0, [r7, #4]
 8008f70:	f000 f810 	bl	8008f94 <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8008f74:	4b06      	ldr	r3, [pc, #24]	@ (8008f90 <prvCheckTasksWaitingTermination+0x58>)
 8008f76:	681b      	ldr	r3, [r3, #0]
 8008f78:	2b00      	cmp	r3, #0
 8008f7a:	d1e1      	bne.n	8008f40 <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 8008f7c:	bf00      	nop
 8008f7e:	bf00      	nop
 8008f80:	3708      	adds	r7, #8
 8008f82:	46bd      	mov	sp, r7
 8008f84:	bd80      	pop	{r7, pc}
 8008f86:	bf00      	nop
 8008f88:	2003e0f8 	.word	0x2003e0f8
 8008f8c:	2003e124 	.word	0x2003e124
 8008f90:	2003e10c 	.word	0x2003e10c

08008f94 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 8008f94:	b580      	push	{r7, lr}
 8008f96:	b084      	sub	sp, #16
 8008f98:	af00      	add	r7, sp, #0
 8008f9a:	6078      	str	r0, [r7, #4]
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 8008f9c:	687b      	ldr	r3, [r7, #4]
 8008f9e:	f893 3059 	ldrb.w	r3, [r3, #89]	@ 0x59
 8008fa2:	2b00      	cmp	r3, #0
 8008fa4:	d108      	bne.n	8008fb8 <prvDeleteTCB+0x24>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 8008fa6:	687b      	ldr	r3, [r7, #4]
 8008fa8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8008faa:	4618      	mov	r0, r3
 8008fac:	f000 ff9a 	bl	8009ee4 <vPortFree>
				vPortFree( pxTCB );
 8008fb0:	6878      	ldr	r0, [r7, #4]
 8008fb2:	f000 ff97 	bl	8009ee4 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 8008fb6:	e01b      	b.n	8008ff0 <prvDeleteTCB+0x5c>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 8008fb8:	687b      	ldr	r3, [r7, #4]
 8008fba:	f893 3059 	ldrb.w	r3, [r3, #89]	@ 0x59
 8008fbe:	2b01      	cmp	r3, #1
 8008fc0:	d103      	bne.n	8008fca <prvDeleteTCB+0x36>
				vPortFree( pxTCB );
 8008fc2:	6878      	ldr	r0, [r7, #4]
 8008fc4:	f000 ff8e 	bl	8009ee4 <vPortFree>
	}
 8008fc8:	e012      	b.n	8008ff0 <prvDeleteTCB+0x5c>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 8008fca:	687b      	ldr	r3, [r7, #4]
 8008fcc:	f893 3059 	ldrb.w	r3, [r3, #89]	@ 0x59
 8008fd0:	2b02      	cmp	r3, #2
 8008fd2:	d00d      	beq.n	8008ff0 <prvDeleteTCB+0x5c>
	__asm volatile
 8008fd4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008fd8:	b672      	cpsid	i
 8008fda:	f383 8811 	msr	BASEPRI, r3
 8008fde:	f3bf 8f6f 	isb	sy
 8008fe2:	f3bf 8f4f 	dsb	sy
 8008fe6:	b662      	cpsie	i
 8008fe8:	60fb      	str	r3, [r7, #12]
}
 8008fea:	bf00      	nop
 8008fec:	bf00      	nop
 8008fee:	e7fd      	b.n	8008fec <prvDeleteTCB+0x58>
	}
 8008ff0:	bf00      	nop
 8008ff2:	3710      	adds	r7, #16
 8008ff4:	46bd      	mov	sp, r7
 8008ff6:	bd80      	pop	{r7, pc}

08008ff8 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 8008ff8:	b480      	push	{r7}
 8008ffa:	b083      	sub	sp, #12
 8008ffc:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8008ffe:	4b0c      	ldr	r3, [pc, #48]	@ (8009030 <prvResetNextTaskUnblockTime+0x38>)
 8009000:	681b      	ldr	r3, [r3, #0]
 8009002:	681b      	ldr	r3, [r3, #0]
 8009004:	2b00      	cmp	r3, #0
 8009006:	d104      	bne.n	8009012 <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 8009008:	4b0a      	ldr	r3, [pc, #40]	@ (8009034 <prvResetNextTaskUnblockTime+0x3c>)
 800900a:	f04f 32ff 	mov.w	r2, #4294967295
 800900e:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 8009010:	e008      	b.n	8009024 <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8009012:	4b07      	ldr	r3, [pc, #28]	@ (8009030 <prvResetNextTaskUnblockTime+0x38>)
 8009014:	681b      	ldr	r3, [r3, #0]
 8009016:	68db      	ldr	r3, [r3, #12]
 8009018:	68db      	ldr	r3, [r3, #12]
 800901a:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 800901c:	687b      	ldr	r3, [r7, #4]
 800901e:	685b      	ldr	r3, [r3, #4]
 8009020:	4a04      	ldr	r2, [pc, #16]	@ (8009034 <prvResetNextTaskUnblockTime+0x3c>)
 8009022:	6013      	str	r3, [r2, #0]
}
 8009024:	bf00      	nop
 8009026:	370c      	adds	r7, #12
 8009028:	46bd      	mov	sp, r7
 800902a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800902e:	4770      	bx	lr
 8009030:	2003e0dc 	.word	0x2003e0dc
 8009034:	2003e144 	.word	0x2003e144

08009038 <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 8009038:	b480      	push	{r7}
 800903a:	b083      	sub	sp, #12
 800903c:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 800903e:	4b0b      	ldr	r3, [pc, #44]	@ (800906c <xTaskGetSchedulerState+0x34>)
 8009040:	681b      	ldr	r3, [r3, #0]
 8009042:	2b00      	cmp	r3, #0
 8009044:	d102      	bne.n	800904c <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 8009046:	2301      	movs	r3, #1
 8009048:	607b      	str	r3, [r7, #4]
 800904a:	e008      	b.n	800905e <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800904c:	4b08      	ldr	r3, [pc, #32]	@ (8009070 <xTaskGetSchedulerState+0x38>)
 800904e:	681b      	ldr	r3, [r3, #0]
 8009050:	2b00      	cmp	r3, #0
 8009052:	d102      	bne.n	800905a <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 8009054:	2302      	movs	r3, #2
 8009056:	607b      	str	r3, [r7, #4]
 8009058:	e001      	b.n	800905e <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 800905a:	2300      	movs	r3, #0
 800905c:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 800905e:	687b      	ldr	r3, [r7, #4]
	}
 8009060:	4618      	mov	r0, r3
 8009062:	370c      	adds	r7, #12
 8009064:	46bd      	mov	sp, r7
 8009066:	f85d 7b04 	ldr.w	r7, [sp], #4
 800906a:	4770      	bx	lr
 800906c:	2003e130 	.word	0x2003e130
 8009070:	2003e14c 	.word	0x2003e14c

08009074 <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 8009074:	b580      	push	{r7, lr}
 8009076:	b086      	sub	sp, #24
 8009078:	af00      	add	r7, sp, #0
 800907a:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = pxMutexHolder;
 800907c:	687b      	ldr	r3, [r7, #4]
 800907e:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 8009080:	2300      	movs	r3, #0
 8009082:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 8009084:	687b      	ldr	r3, [r7, #4]
 8009086:	2b00      	cmp	r3, #0
 8009088:	d05c      	beq.n	8009144 <xTaskPriorityDisinherit+0xd0>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 800908a:	4b31      	ldr	r3, [pc, #196]	@ (8009150 <xTaskPriorityDisinherit+0xdc>)
 800908c:	681b      	ldr	r3, [r3, #0]
 800908e:	693a      	ldr	r2, [r7, #16]
 8009090:	429a      	cmp	r2, r3
 8009092:	d00d      	beq.n	80090b0 <xTaskPriorityDisinherit+0x3c>
	__asm volatile
 8009094:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8009098:	b672      	cpsid	i
 800909a:	f383 8811 	msr	BASEPRI, r3
 800909e:	f3bf 8f6f 	isb	sy
 80090a2:	f3bf 8f4f 	dsb	sy
 80090a6:	b662      	cpsie	i
 80090a8:	60fb      	str	r3, [r7, #12]
}
 80090aa:	bf00      	nop
 80090ac:	bf00      	nop
 80090ae:	e7fd      	b.n	80090ac <xTaskPriorityDisinherit+0x38>
			configASSERT( pxTCB->uxMutexesHeld );
 80090b0:	693b      	ldr	r3, [r7, #16]
 80090b2:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80090b4:	2b00      	cmp	r3, #0
 80090b6:	d10d      	bne.n	80090d4 <xTaskPriorityDisinherit+0x60>
	__asm volatile
 80090b8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80090bc:	b672      	cpsid	i
 80090be:	f383 8811 	msr	BASEPRI, r3
 80090c2:	f3bf 8f6f 	isb	sy
 80090c6:	f3bf 8f4f 	dsb	sy
 80090ca:	b662      	cpsie	i
 80090cc:	60bb      	str	r3, [r7, #8]
}
 80090ce:	bf00      	nop
 80090d0:	bf00      	nop
 80090d2:	e7fd      	b.n	80090d0 <xTaskPriorityDisinherit+0x5c>
			( pxTCB->uxMutexesHeld )--;
 80090d4:	693b      	ldr	r3, [r7, #16]
 80090d6:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80090d8:	1e5a      	subs	r2, r3, #1
 80090da:	693b      	ldr	r3, [r7, #16]
 80090dc:	651a      	str	r2, [r3, #80]	@ 0x50

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 80090de:	693b      	ldr	r3, [r7, #16]
 80090e0:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80090e2:	693b      	ldr	r3, [r7, #16]
 80090e4:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80090e6:	429a      	cmp	r2, r3
 80090e8:	d02c      	beq.n	8009144 <xTaskPriorityDisinherit+0xd0>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 80090ea:	693b      	ldr	r3, [r7, #16]
 80090ec:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80090ee:	2b00      	cmp	r3, #0
 80090f0:	d128      	bne.n	8009144 <xTaskPriorityDisinherit+0xd0>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 80090f2:	693b      	ldr	r3, [r7, #16]
 80090f4:	3304      	adds	r3, #4
 80090f6:	4618      	mov	r0, r3
 80090f8:	f7fe fbcc 	bl	8007894 <uxListRemove>
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 80090fc:	693b      	ldr	r3, [r7, #16]
 80090fe:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 8009100:	693b      	ldr	r3, [r7, #16]
 8009102:	62da      	str	r2, [r3, #44]	@ 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8009104:	693b      	ldr	r3, [r7, #16]
 8009106:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8009108:	f1c3 0238 	rsb	r2, r3, #56	@ 0x38
 800910c:	693b      	ldr	r3, [r7, #16]
 800910e:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 8009110:	693b      	ldr	r3, [r7, #16]
 8009112:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8009114:	4b0f      	ldr	r3, [pc, #60]	@ (8009154 <xTaskPriorityDisinherit+0xe0>)
 8009116:	681b      	ldr	r3, [r3, #0]
 8009118:	429a      	cmp	r2, r3
 800911a:	d903      	bls.n	8009124 <xTaskPriorityDisinherit+0xb0>
 800911c:	693b      	ldr	r3, [r7, #16]
 800911e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8009120:	4a0c      	ldr	r2, [pc, #48]	@ (8009154 <xTaskPriorityDisinherit+0xe0>)
 8009122:	6013      	str	r3, [r2, #0]
 8009124:	693b      	ldr	r3, [r7, #16]
 8009126:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8009128:	4613      	mov	r3, r2
 800912a:	009b      	lsls	r3, r3, #2
 800912c:	4413      	add	r3, r2
 800912e:	009b      	lsls	r3, r3, #2
 8009130:	4a09      	ldr	r2, [pc, #36]	@ (8009158 <xTaskPriorityDisinherit+0xe4>)
 8009132:	441a      	add	r2, r3
 8009134:	693b      	ldr	r3, [r7, #16]
 8009136:	3304      	adds	r3, #4
 8009138:	4619      	mov	r1, r3
 800913a:	4610      	mov	r0, r2
 800913c:	f7fe fb4d 	bl	80077da <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 8009140:	2301      	movs	r3, #1
 8009142:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 8009144:	697b      	ldr	r3, [r7, #20]
	}
 8009146:	4618      	mov	r0, r3
 8009148:	3718      	adds	r7, #24
 800914a:	46bd      	mov	sp, r7
 800914c:	bd80      	pop	{r7, pc}
 800914e:	bf00      	nop
 8009150:	2003dc50 	.word	0x2003dc50
 8009154:	2003e12c 	.word	0x2003e12c
 8009158:	2003dc54 	.word	0x2003dc54

0800915c <prvAddCurrentTaskToDelayedList>:
	}
#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 800915c:	b580      	push	{r7, lr}
 800915e:	b084      	sub	sp, #16
 8009160:	af00      	add	r7, sp, #0
 8009162:	6078      	str	r0, [r7, #4]
 8009164:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 8009166:	4b21      	ldr	r3, [pc, #132]	@ (80091ec <prvAddCurrentTaskToDelayedList+0x90>)
 8009168:	681b      	ldr	r3, [r3, #0]
 800916a:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800916c:	4b20      	ldr	r3, [pc, #128]	@ (80091f0 <prvAddCurrentTaskToDelayedList+0x94>)
 800916e:	681b      	ldr	r3, [r3, #0]
 8009170:	3304      	adds	r3, #4
 8009172:	4618      	mov	r0, r3
 8009174:	f7fe fb8e 	bl	8007894 <uxListRemove>
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 8009178:	687b      	ldr	r3, [r7, #4]
 800917a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800917e:	d10a      	bne.n	8009196 <prvAddCurrentTaskToDelayedList+0x3a>
 8009180:	683b      	ldr	r3, [r7, #0]
 8009182:	2b00      	cmp	r3, #0
 8009184:	d007      	beq.n	8009196 <prvAddCurrentTaskToDelayedList+0x3a>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8009186:	4b1a      	ldr	r3, [pc, #104]	@ (80091f0 <prvAddCurrentTaskToDelayedList+0x94>)
 8009188:	681b      	ldr	r3, [r3, #0]
 800918a:	3304      	adds	r3, #4
 800918c:	4619      	mov	r1, r3
 800918e:	4819      	ldr	r0, [pc, #100]	@ (80091f4 <prvAddCurrentTaskToDelayedList+0x98>)
 8009190:	f7fe fb23 	bl	80077da <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 8009194:	e026      	b.n	80091e4 <prvAddCurrentTaskToDelayedList+0x88>
			xTimeToWake = xConstTickCount + xTicksToWait;
 8009196:	68fa      	ldr	r2, [r7, #12]
 8009198:	687b      	ldr	r3, [r7, #4]
 800919a:	4413      	add	r3, r2
 800919c:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 800919e:	4b14      	ldr	r3, [pc, #80]	@ (80091f0 <prvAddCurrentTaskToDelayedList+0x94>)
 80091a0:	681b      	ldr	r3, [r3, #0]
 80091a2:	68ba      	ldr	r2, [r7, #8]
 80091a4:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 80091a6:	68ba      	ldr	r2, [r7, #8]
 80091a8:	68fb      	ldr	r3, [r7, #12]
 80091aa:	429a      	cmp	r2, r3
 80091ac:	d209      	bcs.n	80091c2 <prvAddCurrentTaskToDelayedList+0x66>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 80091ae:	4b12      	ldr	r3, [pc, #72]	@ (80091f8 <prvAddCurrentTaskToDelayedList+0x9c>)
 80091b0:	681a      	ldr	r2, [r3, #0]
 80091b2:	4b0f      	ldr	r3, [pc, #60]	@ (80091f0 <prvAddCurrentTaskToDelayedList+0x94>)
 80091b4:	681b      	ldr	r3, [r3, #0]
 80091b6:	3304      	adds	r3, #4
 80091b8:	4619      	mov	r1, r3
 80091ba:	4610      	mov	r0, r2
 80091bc:	f7fe fb31 	bl	8007822 <vListInsert>
}
 80091c0:	e010      	b.n	80091e4 <prvAddCurrentTaskToDelayedList+0x88>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 80091c2:	4b0e      	ldr	r3, [pc, #56]	@ (80091fc <prvAddCurrentTaskToDelayedList+0xa0>)
 80091c4:	681a      	ldr	r2, [r3, #0]
 80091c6:	4b0a      	ldr	r3, [pc, #40]	@ (80091f0 <prvAddCurrentTaskToDelayedList+0x94>)
 80091c8:	681b      	ldr	r3, [r3, #0]
 80091ca:	3304      	adds	r3, #4
 80091cc:	4619      	mov	r1, r3
 80091ce:	4610      	mov	r0, r2
 80091d0:	f7fe fb27 	bl	8007822 <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 80091d4:	4b0a      	ldr	r3, [pc, #40]	@ (8009200 <prvAddCurrentTaskToDelayedList+0xa4>)
 80091d6:	681b      	ldr	r3, [r3, #0]
 80091d8:	68ba      	ldr	r2, [r7, #8]
 80091da:	429a      	cmp	r2, r3
 80091dc:	d202      	bcs.n	80091e4 <prvAddCurrentTaskToDelayedList+0x88>
					xNextTaskUnblockTime = xTimeToWake;
 80091de:	4a08      	ldr	r2, [pc, #32]	@ (8009200 <prvAddCurrentTaskToDelayedList+0xa4>)
 80091e0:	68bb      	ldr	r3, [r7, #8]
 80091e2:	6013      	str	r3, [r2, #0]
}
 80091e4:	bf00      	nop
 80091e6:	3710      	adds	r7, #16
 80091e8:	46bd      	mov	sp, r7
 80091ea:	bd80      	pop	{r7, pc}
 80091ec:	2003e128 	.word	0x2003e128
 80091f0:	2003dc50 	.word	0x2003dc50
 80091f4:	2003e110 	.word	0x2003e110
 80091f8:	2003e0e0 	.word	0x2003e0e0
 80091fc:	2003e0dc 	.word	0x2003e0dc
 8009200:	2003e144 	.word	0x2003e144

08009204 <xTimerCreateTimerTask>:
									TimerCallbackFunction_t pxCallbackFunction,
									Timer_t *pxNewTimer ) PRIVILEGED_FUNCTION;
/*-----------------------------------------------------------*/

BaseType_t xTimerCreateTimerTask( void )
{
 8009204:	b580      	push	{r7, lr}
 8009206:	b08a      	sub	sp, #40	@ 0x28
 8009208:	af04      	add	r7, sp, #16
BaseType_t xReturn = pdFAIL;
 800920a:	2300      	movs	r3, #0
 800920c:	617b      	str	r3, [r7, #20]

	/* This function is called when the scheduler is started if
	configUSE_TIMERS is set to 1.  Check that the infrastructure used by the
	timer service task has been created/initialised.  If timers have already
	been created then the initialisation will already have been performed. */
	prvCheckForValidListAndQueue();
 800920e:	f000 fb21 	bl	8009854 <prvCheckForValidListAndQueue>

	if( xTimerQueue != NULL )
 8009212:	4b1e      	ldr	r3, [pc, #120]	@ (800928c <xTimerCreateTimerTask+0x88>)
 8009214:	681b      	ldr	r3, [r3, #0]
 8009216:	2b00      	cmp	r3, #0
 8009218:	d021      	beq.n	800925e <xTimerCreateTimerTask+0x5a>
	{
		#if( configSUPPORT_STATIC_ALLOCATION == 1 )
		{
			StaticTask_t *pxTimerTaskTCBBuffer = NULL;
 800921a:	2300      	movs	r3, #0
 800921c:	60fb      	str	r3, [r7, #12]
			StackType_t *pxTimerTaskStackBuffer = NULL;
 800921e:	2300      	movs	r3, #0
 8009220:	60bb      	str	r3, [r7, #8]
			uint32_t ulTimerTaskStackSize;

			vApplicationGetTimerTaskMemory( &pxTimerTaskTCBBuffer, &pxTimerTaskStackBuffer, &ulTimerTaskStackSize );
 8009222:	1d3a      	adds	r2, r7, #4
 8009224:	f107 0108 	add.w	r1, r7, #8
 8009228:	f107 030c 	add.w	r3, r7, #12
 800922c:	4618      	mov	r0, r3
 800922e:	f7fe fa8d 	bl	800774c <vApplicationGetTimerTaskMemory>
			xTimerTaskHandle = xTaskCreateStatic(	prvTimerTask,
 8009232:	6879      	ldr	r1, [r7, #4]
 8009234:	68bb      	ldr	r3, [r7, #8]
 8009236:	68fa      	ldr	r2, [r7, #12]
 8009238:	9202      	str	r2, [sp, #8]
 800923a:	9301      	str	r3, [sp, #4]
 800923c:	2302      	movs	r3, #2
 800923e:	9300      	str	r3, [sp, #0]
 8009240:	2300      	movs	r3, #0
 8009242:	460a      	mov	r2, r1
 8009244:	4912      	ldr	r1, [pc, #72]	@ (8009290 <xTimerCreateTimerTask+0x8c>)
 8009246:	4813      	ldr	r0, [pc, #76]	@ (8009294 <xTimerCreateTimerTask+0x90>)
 8009248:	f7ff f8ac 	bl	80083a4 <xTaskCreateStatic>
 800924c:	4603      	mov	r3, r0
 800924e:	4a12      	ldr	r2, [pc, #72]	@ (8009298 <xTimerCreateTimerTask+0x94>)
 8009250:	6013      	str	r3, [r2, #0]
													NULL,
													( ( UBaseType_t ) configTIMER_TASK_PRIORITY ) | portPRIVILEGE_BIT,
													pxTimerTaskStackBuffer,
													pxTimerTaskTCBBuffer );

			if( xTimerTaskHandle != NULL )
 8009252:	4b11      	ldr	r3, [pc, #68]	@ (8009298 <xTimerCreateTimerTask+0x94>)
 8009254:	681b      	ldr	r3, [r3, #0]
 8009256:	2b00      	cmp	r3, #0
 8009258:	d001      	beq.n	800925e <xTimerCreateTimerTask+0x5a>
			{
				xReturn = pdPASS;
 800925a:	2301      	movs	r3, #1
 800925c:	617b      	str	r3, [r7, #20]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	configASSERT( xReturn );
 800925e:	697b      	ldr	r3, [r7, #20]
 8009260:	2b00      	cmp	r3, #0
 8009262:	d10d      	bne.n	8009280 <xTimerCreateTimerTask+0x7c>
	__asm volatile
 8009264:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8009268:	b672      	cpsid	i
 800926a:	f383 8811 	msr	BASEPRI, r3
 800926e:	f3bf 8f6f 	isb	sy
 8009272:	f3bf 8f4f 	dsb	sy
 8009276:	b662      	cpsie	i
 8009278:	613b      	str	r3, [r7, #16]
}
 800927a:	bf00      	nop
 800927c:	bf00      	nop
 800927e:	e7fd      	b.n	800927c <xTimerCreateTimerTask+0x78>
	return xReturn;
 8009280:	697b      	ldr	r3, [r7, #20]
}
 8009282:	4618      	mov	r0, r3
 8009284:	3718      	adds	r7, #24
 8009286:	46bd      	mov	sp, r7
 8009288:	bd80      	pop	{r7, pc}
 800928a:	bf00      	nop
 800928c:	2003e180 	.word	0x2003e180
 8009290:	08010fe8 	.word	0x08010fe8
 8009294:	080093dd 	.word	0x080093dd
 8009298:	2003e184 	.word	0x2003e184

0800929c <xTimerGenericCommand>:
	}
}
/*-----------------------------------------------------------*/

BaseType_t xTimerGenericCommand( TimerHandle_t xTimer, const BaseType_t xCommandID, const TickType_t xOptionalValue, BaseType_t * const pxHigherPriorityTaskWoken, const TickType_t xTicksToWait )
{
 800929c:	b580      	push	{r7, lr}
 800929e:	b08a      	sub	sp, #40	@ 0x28
 80092a0:	af00      	add	r7, sp, #0
 80092a2:	60f8      	str	r0, [r7, #12]
 80092a4:	60b9      	str	r1, [r7, #8]
 80092a6:	607a      	str	r2, [r7, #4]
 80092a8:	603b      	str	r3, [r7, #0]
BaseType_t xReturn = pdFAIL;
 80092aa:	2300      	movs	r3, #0
 80092ac:	627b      	str	r3, [r7, #36]	@ 0x24
DaemonTaskMessage_t xMessage;

	configASSERT( xTimer );
 80092ae:	68fb      	ldr	r3, [r7, #12]
 80092b0:	2b00      	cmp	r3, #0
 80092b2:	d10d      	bne.n	80092d0 <xTimerGenericCommand+0x34>
	__asm volatile
 80092b4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80092b8:	b672      	cpsid	i
 80092ba:	f383 8811 	msr	BASEPRI, r3
 80092be:	f3bf 8f6f 	isb	sy
 80092c2:	f3bf 8f4f 	dsb	sy
 80092c6:	b662      	cpsie	i
 80092c8:	623b      	str	r3, [r7, #32]
}
 80092ca:	bf00      	nop
 80092cc:	bf00      	nop
 80092ce:	e7fd      	b.n	80092cc <xTimerGenericCommand+0x30>

	/* Send a message to the timer service task to perform a particular action
	on a particular timer definition. */
	if( xTimerQueue != NULL )
 80092d0:	4b19      	ldr	r3, [pc, #100]	@ (8009338 <xTimerGenericCommand+0x9c>)
 80092d2:	681b      	ldr	r3, [r3, #0]
 80092d4:	2b00      	cmp	r3, #0
 80092d6:	d02a      	beq.n	800932e <xTimerGenericCommand+0x92>
	{
		/* Send a command to the timer service task to start the xTimer timer. */
		xMessage.xMessageID = xCommandID;
 80092d8:	68bb      	ldr	r3, [r7, #8]
 80092da:	613b      	str	r3, [r7, #16]
		xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
 80092dc:	687b      	ldr	r3, [r7, #4]
 80092de:	617b      	str	r3, [r7, #20]
		xMessage.u.xTimerParameters.pxTimer = xTimer;
 80092e0:	68fb      	ldr	r3, [r7, #12]
 80092e2:	61bb      	str	r3, [r7, #24]

		if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
 80092e4:	68bb      	ldr	r3, [r7, #8]
 80092e6:	2b05      	cmp	r3, #5
 80092e8:	dc18      	bgt.n	800931c <xTimerGenericCommand+0x80>
		{
			if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
 80092ea:	f7ff fea5 	bl	8009038 <xTaskGetSchedulerState>
 80092ee:	4603      	mov	r3, r0
 80092f0:	2b02      	cmp	r3, #2
 80092f2:	d109      	bne.n	8009308 <xTimerGenericCommand+0x6c>
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
 80092f4:	4b10      	ldr	r3, [pc, #64]	@ (8009338 <xTimerGenericCommand+0x9c>)
 80092f6:	6818      	ldr	r0, [r3, #0]
 80092f8:	f107 0110 	add.w	r1, r7, #16
 80092fc:	2300      	movs	r3, #0
 80092fe:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8009300:	f7fe fc4c 	bl	8007b9c <xQueueGenericSend>
 8009304:	6278      	str	r0, [r7, #36]	@ 0x24
 8009306:	e012      	b.n	800932e <xTimerGenericCommand+0x92>
			}
			else
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
 8009308:	4b0b      	ldr	r3, [pc, #44]	@ (8009338 <xTimerGenericCommand+0x9c>)
 800930a:	6818      	ldr	r0, [r3, #0]
 800930c:	f107 0110 	add.w	r1, r7, #16
 8009310:	2300      	movs	r3, #0
 8009312:	2200      	movs	r2, #0
 8009314:	f7fe fc42 	bl	8007b9c <xQueueGenericSend>
 8009318:	6278      	str	r0, [r7, #36]	@ 0x24
 800931a:	e008      	b.n	800932e <xTimerGenericCommand+0x92>
			}
		}
		else
		{
			xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
 800931c:	4b06      	ldr	r3, [pc, #24]	@ (8009338 <xTimerGenericCommand+0x9c>)
 800931e:	6818      	ldr	r0, [r3, #0]
 8009320:	f107 0110 	add.w	r1, r7, #16
 8009324:	2300      	movs	r3, #0
 8009326:	683a      	ldr	r2, [r7, #0]
 8009328:	f7fe fd42 	bl	8007db0 <xQueueGenericSendFromISR>
 800932c:	6278      	str	r0, [r7, #36]	@ 0x24
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	return xReturn;
 800932e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
}
 8009330:	4618      	mov	r0, r3
 8009332:	3728      	adds	r7, #40	@ 0x28
 8009334:	46bd      	mov	sp, r7
 8009336:	bd80      	pop	{r7, pc}
 8009338:	2003e180 	.word	0x2003e180

0800933c <prvProcessExpiredTimer>:
	return pxTimer->pcTimerName;
}
/*-----------------------------------------------------------*/

static void prvProcessExpiredTimer( const TickType_t xNextExpireTime, const TickType_t xTimeNow )
{
 800933c:	b580      	push	{r7, lr}
 800933e:	b088      	sub	sp, #32
 8009340:	af02      	add	r7, sp, #8
 8009342:	6078      	str	r0, [r7, #4]
 8009344:	6039      	str	r1, [r7, #0]
BaseType_t xResult;
Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8009346:	4b24      	ldr	r3, [pc, #144]	@ (80093d8 <prvProcessExpiredTimer+0x9c>)
 8009348:	681b      	ldr	r3, [r3, #0]
 800934a:	68db      	ldr	r3, [r3, #12]
 800934c:	68db      	ldr	r3, [r3, #12]
 800934e:	617b      	str	r3, [r7, #20]

	/* Remove the timer from the list of active timers.  A check has already
	been performed to ensure the list is not empty. */
	( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8009350:	697b      	ldr	r3, [r7, #20]
 8009352:	3304      	adds	r3, #4
 8009354:	4618      	mov	r0, r3
 8009356:	f7fe fa9d 	bl	8007894 <uxListRemove>
	traceTIMER_EXPIRED( pxTimer );

	/* If the timer is an auto reload timer then calculate the next
	expiry time and re-insert the timer in the list of active timers. */
	if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 800935a:	697b      	ldr	r3, [r7, #20]
 800935c:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8009360:	f003 0304 	and.w	r3, r3, #4
 8009364:	2b00      	cmp	r3, #0
 8009366:	d025      	beq.n	80093b4 <prvProcessExpiredTimer+0x78>
	{
		/* The timer is inserted into a list using a time relative to anything
		other than the current time.  It will therefore be inserted into the
		correct list relative to the time this task thinks it is now. */
		if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) != pdFALSE )
 8009368:	697b      	ldr	r3, [r7, #20]
 800936a:	699a      	ldr	r2, [r3, #24]
 800936c:	687b      	ldr	r3, [r7, #4]
 800936e:	18d1      	adds	r1, r2, r3
 8009370:	687b      	ldr	r3, [r7, #4]
 8009372:	683a      	ldr	r2, [r7, #0]
 8009374:	6978      	ldr	r0, [r7, #20]
 8009376:	f000 f8d7 	bl	8009528 <prvInsertTimerInActiveList>
 800937a:	4603      	mov	r3, r0
 800937c:	2b00      	cmp	r3, #0
 800937e:	d022      	beq.n	80093c6 <prvProcessExpiredTimer+0x8a>
		{
			/* The timer expired before it was added to the active timer
			list.  Reload it now.  */
			xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 8009380:	2300      	movs	r3, #0
 8009382:	9300      	str	r3, [sp, #0]
 8009384:	2300      	movs	r3, #0
 8009386:	687a      	ldr	r2, [r7, #4]
 8009388:	2100      	movs	r1, #0
 800938a:	6978      	ldr	r0, [r7, #20]
 800938c:	f7ff ff86 	bl	800929c <xTimerGenericCommand>
 8009390:	6138      	str	r0, [r7, #16]
			configASSERT( xResult );
 8009392:	693b      	ldr	r3, [r7, #16]
 8009394:	2b00      	cmp	r3, #0
 8009396:	d116      	bne.n	80093c6 <prvProcessExpiredTimer+0x8a>
	__asm volatile
 8009398:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800939c:	b672      	cpsid	i
 800939e:	f383 8811 	msr	BASEPRI, r3
 80093a2:	f3bf 8f6f 	isb	sy
 80093a6:	f3bf 8f4f 	dsb	sy
 80093aa:	b662      	cpsie	i
 80093ac:	60fb      	str	r3, [r7, #12]
}
 80093ae:	bf00      	nop
 80093b0:	bf00      	nop
 80093b2:	e7fd      	b.n	80093b0 <prvProcessExpiredTimer+0x74>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 80093b4:	697b      	ldr	r3, [r7, #20]
 80093b6:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 80093ba:	f023 0301 	bic.w	r3, r3, #1
 80093be:	b2da      	uxtb	r2, r3
 80093c0:	697b      	ldr	r3, [r7, #20]
 80093c2:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
		mtCOVERAGE_TEST_MARKER();
	}

	/* Call the timer callback. */
	pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 80093c6:	697b      	ldr	r3, [r7, #20]
 80093c8:	6a1b      	ldr	r3, [r3, #32]
 80093ca:	6978      	ldr	r0, [r7, #20]
 80093cc:	4798      	blx	r3
}
 80093ce:	bf00      	nop
 80093d0:	3718      	adds	r7, #24
 80093d2:	46bd      	mov	sp, r7
 80093d4:	bd80      	pop	{r7, pc}
 80093d6:	bf00      	nop
 80093d8:	2003e178 	.word	0x2003e178

080093dc <prvTimerTask>:
/*-----------------------------------------------------------*/

static portTASK_FUNCTION( prvTimerTask, pvParameters )
{
 80093dc:	b580      	push	{r7, lr}
 80093de:	b084      	sub	sp, #16
 80093e0:	af00      	add	r7, sp, #0
 80093e2:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* Query the timers list to see if it contains any timers, and if so,
		obtain the time at which the next timer will expire. */
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 80093e4:	f107 0308 	add.w	r3, r7, #8
 80093e8:	4618      	mov	r0, r3
 80093ea:	f000 f859 	bl	80094a0 <prvGetNextExpireTime>
 80093ee:	60f8      	str	r0, [r7, #12]

		/* If a timer has expired, process it.  Otherwise, block this task
		until either a timer does expire, or a command is received. */
		prvProcessTimerOrBlockTask( xNextExpireTime, xListWasEmpty );
 80093f0:	68bb      	ldr	r3, [r7, #8]
 80093f2:	4619      	mov	r1, r3
 80093f4:	68f8      	ldr	r0, [r7, #12]
 80093f6:	f000 f805 	bl	8009404 <prvProcessTimerOrBlockTask>

		/* Empty the command queue. */
		prvProcessReceivedCommands();
 80093fa:	f000 f8d7 	bl	80095ac <prvProcessReceivedCommands>
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 80093fe:	bf00      	nop
 8009400:	e7f0      	b.n	80093e4 <prvTimerTask+0x8>
	...

08009404 <prvProcessTimerOrBlockTask>:
	}
}
/*-----------------------------------------------------------*/

static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime, BaseType_t xListWasEmpty )
{
 8009404:	b580      	push	{r7, lr}
 8009406:	b084      	sub	sp, #16
 8009408:	af00      	add	r7, sp, #0
 800940a:	6078      	str	r0, [r7, #4]
 800940c:	6039      	str	r1, [r7, #0]
TickType_t xTimeNow;
BaseType_t xTimerListsWereSwitched;

	vTaskSuspendAll();
 800940e:	f7ff fa1b 	bl	8008848 <vTaskSuspendAll>
		/* Obtain the time now to make an assessment as to whether the timer
		has expired or not.  If obtaining the time causes the lists to switch
		then don't process this timer as any timers that remained in the list
		when the lists were switched will have been processed within the
		prvSampleTimeNow() function. */
		xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 8009412:	f107 0308 	add.w	r3, r7, #8
 8009416:	4618      	mov	r0, r3
 8009418:	f000 f866 	bl	80094e8 <prvSampleTimeNow>
 800941c:	60f8      	str	r0, [r7, #12]
		if( xTimerListsWereSwitched == pdFALSE )
 800941e:	68bb      	ldr	r3, [r7, #8]
 8009420:	2b00      	cmp	r3, #0
 8009422:	d130      	bne.n	8009486 <prvProcessTimerOrBlockTask+0x82>
		{
			/* The tick count has not overflowed, has the timer expired? */
			if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 8009424:	683b      	ldr	r3, [r7, #0]
 8009426:	2b00      	cmp	r3, #0
 8009428:	d10a      	bne.n	8009440 <prvProcessTimerOrBlockTask+0x3c>
 800942a:	687a      	ldr	r2, [r7, #4]
 800942c:	68fb      	ldr	r3, [r7, #12]
 800942e:	429a      	cmp	r2, r3
 8009430:	d806      	bhi.n	8009440 <prvProcessTimerOrBlockTask+0x3c>
			{
				( void ) xTaskResumeAll();
 8009432:	f7ff fa17 	bl	8008864 <xTaskResumeAll>
				prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
 8009436:	68f9      	ldr	r1, [r7, #12]
 8009438:	6878      	ldr	r0, [r7, #4]
 800943a:	f7ff ff7f 	bl	800933c <prvProcessExpiredTimer>
		else
		{
			( void ) xTaskResumeAll();
		}
	}
}
 800943e:	e024      	b.n	800948a <prvProcessTimerOrBlockTask+0x86>
				if( xListWasEmpty != pdFALSE )
 8009440:	683b      	ldr	r3, [r7, #0]
 8009442:	2b00      	cmp	r3, #0
 8009444:	d008      	beq.n	8009458 <prvProcessTimerOrBlockTask+0x54>
					xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 8009446:	4b13      	ldr	r3, [pc, #76]	@ (8009494 <prvProcessTimerOrBlockTask+0x90>)
 8009448:	681b      	ldr	r3, [r3, #0]
 800944a:	681b      	ldr	r3, [r3, #0]
 800944c:	2b00      	cmp	r3, #0
 800944e:	d101      	bne.n	8009454 <prvProcessTimerOrBlockTask+0x50>
 8009450:	2301      	movs	r3, #1
 8009452:	e000      	b.n	8009456 <prvProcessTimerOrBlockTask+0x52>
 8009454:	2300      	movs	r3, #0
 8009456:	603b      	str	r3, [r7, #0]
				vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 8009458:	4b0f      	ldr	r3, [pc, #60]	@ (8009498 <prvProcessTimerOrBlockTask+0x94>)
 800945a:	6818      	ldr	r0, [r3, #0]
 800945c:	687a      	ldr	r2, [r7, #4]
 800945e:	68fb      	ldr	r3, [r7, #12]
 8009460:	1ad3      	subs	r3, r2, r3
 8009462:	683a      	ldr	r2, [r7, #0]
 8009464:	4619      	mov	r1, r3
 8009466:	f7fe ff69 	bl	800833c <vQueueWaitForMessageRestricted>
				if( xTaskResumeAll() == pdFALSE )
 800946a:	f7ff f9fb 	bl	8008864 <xTaskResumeAll>
 800946e:	4603      	mov	r3, r0
 8009470:	2b00      	cmp	r3, #0
 8009472:	d10a      	bne.n	800948a <prvProcessTimerOrBlockTask+0x86>
					portYIELD_WITHIN_API();
 8009474:	4b09      	ldr	r3, [pc, #36]	@ (800949c <prvProcessTimerOrBlockTask+0x98>)
 8009476:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800947a:	601a      	str	r2, [r3, #0]
 800947c:	f3bf 8f4f 	dsb	sy
 8009480:	f3bf 8f6f 	isb	sy
}
 8009484:	e001      	b.n	800948a <prvProcessTimerOrBlockTask+0x86>
			( void ) xTaskResumeAll();
 8009486:	f7ff f9ed 	bl	8008864 <xTaskResumeAll>
}
 800948a:	bf00      	nop
 800948c:	3710      	adds	r7, #16
 800948e:	46bd      	mov	sp, r7
 8009490:	bd80      	pop	{r7, pc}
 8009492:	bf00      	nop
 8009494:	2003e17c 	.word	0x2003e17c
 8009498:	2003e180 	.word	0x2003e180
 800949c:	e000ed04 	.word	0xe000ed04

080094a0 <prvGetNextExpireTime>:
/*-----------------------------------------------------------*/

static TickType_t prvGetNextExpireTime( BaseType_t * const pxListWasEmpty )
{
 80094a0:	b480      	push	{r7}
 80094a2:	b085      	sub	sp, #20
 80094a4:	af00      	add	r7, sp, #0
 80094a6:	6078      	str	r0, [r7, #4]
	the timer with the nearest expiry time will expire.  If there are no
	active timers then just set the next expire time to 0.  That will cause
	this task to unblock when the tick count overflows, at which point the
	timer lists will be switched and the next expiry time can be
	re-assessed.  */
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 80094a8:	4b0e      	ldr	r3, [pc, #56]	@ (80094e4 <prvGetNextExpireTime+0x44>)
 80094aa:	681b      	ldr	r3, [r3, #0]
 80094ac:	681b      	ldr	r3, [r3, #0]
 80094ae:	2b00      	cmp	r3, #0
 80094b0:	d101      	bne.n	80094b6 <prvGetNextExpireTime+0x16>
 80094b2:	2201      	movs	r2, #1
 80094b4:	e000      	b.n	80094b8 <prvGetNextExpireTime+0x18>
 80094b6:	2200      	movs	r2, #0
 80094b8:	687b      	ldr	r3, [r7, #4]
 80094ba:	601a      	str	r2, [r3, #0]
	if( *pxListWasEmpty == pdFALSE )
 80094bc:	687b      	ldr	r3, [r7, #4]
 80094be:	681b      	ldr	r3, [r3, #0]
 80094c0:	2b00      	cmp	r3, #0
 80094c2:	d105      	bne.n	80094d0 <prvGetNextExpireTime+0x30>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 80094c4:	4b07      	ldr	r3, [pc, #28]	@ (80094e4 <prvGetNextExpireTime+0x44>)
 80094c6:	681b      	ldr	r3, [r3, #0]
 80094c8:	68db      	ldr	r3, [r3, #12]
 80094ca:	681b      	ldr	r3, [r3, #0]
 80094cc:	60fb      	str	r3, [r7, #12]
 80094ce:	e001      	b.n	80094d4 <prvGetNextExpireTime+0x34>
	}
	else
	{
		/* Ensure the task unblocks when the tick count rolls over. */
		xNextExpireTime = ( TickType_t ) 0U;
 80094d0:	2300      	movs	r3, #0
 80094d2:	60fb      	str	r3, [r7, #12]
	}

	return xNextExpireTime;
 80094d4:	68fb      	ldr	r3, [r7, #12]
}
 80094d6:	4618      	mov	r0, r3
 80094d8:	3714      	adds	r7, #20
 80094da:	46bd      	mov	sp, r7
 80094dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80094e0:	4770      	bx	lr
 80094e2:	bf00      	nop
 80094e4:	2003e178 	.word	0x2003e178

080094e8 <prvSampleTimeNow>:
/*-----------------------------------------------------------*/

static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
{
 80094e8:	b580      	push	{r7, lr}
 80094ea:	b084      	sub	sp, #16
 80094ec:	af00      	add	r7, sp, #0
 80094ee:	6078      	str	r0, [r7, #4]
TickType_t xTimeNow;
PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U; /*lint !e956 Variable is only accessible to one task. */

	xTimeNow = xTaskGetTickCount();
 80094f0:	f7ff fa58 	bl	80089a4 <xTaskGetTickCount>
 80094f4:	60f8      	str	r0, [r7, #12]

	if( xTimeNow < xLastTime )
 80094f6:	4b0b      	ldr	r3, [pc, #44]	@ (8009524 <prvSampleTimeNow+0x3c>)
 80094f8:	681b      	ldr	r3, [r3, #0]
 80094fa:	68fa      	ldr	r2, [r7, #12]
 80094fc:	429a      	cmp	r2, r3
 80094fe:	d205      	bcs.n	800950c <prvSampleTimeNow+0x24>
	{
		prvSwitchTimerLists();
 8009500:	f000 f940 	bl	8009784 <prvSwitchTimerLists>
		*pxTimerListsWereSwitched = pdTRUE;
 8009504:	687b      	ldr	r3, [r7, #4]
 8009506:	2201      	movs	r2, #1
 8009508:	601a      	str	r2, [r3, #0]
 800950a:	e002      	b.n	8009512 <prvSampleTimeNow+0x2a>
	}
	else
	{
		*pxTimerListsWereSwitched = pdFALSE;
 800950c:	687b      	ldr	r3, [r7, #4]
 800950e:	2200      	movs	r2, #0
 8009510:	601a      	str	r2, [r3, #0]
	}

	xLastTime = xTimeNow;
 8009512:	4a04      	ldr	r2, [pc, #16]	@ (8009524 <prvSampleTimeNow+0x3c>)
 8009514:	68fb      	ldr	r3, [r7, #12]
 8009516:	6013      	str	r3, [r2, #0]

	return xTimeNow;
 8009518:	68fb      	ldr	r3, [r7, #12]
}
 800951a:	4618      	mov	r0, r3
 800951c:	3710      	adds	r7, #16
 800951e:	46bd      	mov	sp, r7
 8009520:	bd80      	pop	{r7, pc}
 8009522:	bf00      	nop
 8009524:	2003e188 	.word	0x2003e188

08009528 <prvInsertTimerInActiveList>:
/*-----------------------------------------------------------*/

static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer, const TickType_t xNextExpiryTime, const TickType_t xTimeNow, const TickType_t xCommandTime )
{
 8009528:	b580      	push	{r7, lr}
 800952a:	b086      	sub	sp, #24
 800952c:	af00      	add	r7, sp, #0
 800952e:	60f8      	str	r0, [r7, #12]
 8009530:	60b9      	str	r1, [r7, #8]
 8009532:	607a      	str	r2, [r7, #4]
 8009534:	603b      	str	r3, [r7, #0]
BaseType_t xProcessTimerNow = pdFALSE;
 8009536:	2300      	movs	r3, #0
 8009538:	617b      	str	r3, [r7, #20]

	listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 800953a:	68fb      	ldr	r3, [r7, #12]
 800953c:	68ba      	ldr	r2, [r7, #8]
 800953e:	605a      	str	r2, [r3, #4]
	listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 8009540:	68fb      	ldr	r3, [r7, #12]
 8009542:	68fa      	ldr	r2, [r7, #12]
 8009544:	611a      	str	r2, [r3, #16]

	if( xNextExpiryTime <= xTimeNow )
 8009546:	68ba      	ldr	r2, [r7, #8]
 8009548:	687b      	ldr	r3, [r7, #4]
 800954a:	429a      	cmp	r2, r3
 800954c:	d812      	bhi.n	8009574 <prvInsertTimerInActiveList+0x4c>
	{
		/* Has the expiry time elapsed between the command to start/reset a
		timer was issued, and the time the command was processed? */
		if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800954e:	687a      	ldr	r2, [r7, #4]
 8009550:	683b      	ldr	r3, [r7, #0]
 8009552:	1ad2      	subs	r2, r2, r3
 8009554:	68fb      	ldr	r3, [r7, #12]
 8009556:	699b      	ldr	r3, [r3, #24]
 8009558:	429a      	cmp	r2, r3
 800955a:	d302      	bcc.n	8009562 <prvInsertTimerInActiveList+0x3a>
		{
			/* The time between a command being issued and the command being
			processed actually exceeds the timers period.  */
			xProcessTimerNow = pdTRUE;
 800955c:	2301      	movs	r3, #1
 800955e:	617b      	str	r3, [r7, #20]
 8009560:	e01b      	b.n	800959a <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 8009562:	4b10      	ldr	r3, [pc, #64]	@ (80095a4 <prvInsertTimerInActiveList+0x7c>)
 8009564:	681a      	ldr	r2, [r3, #0]
 8009566:	68fb      	ldr	r3, [r7, #12]
 8009568:	3304      	adds	r3, #4
 800956a:	4619      	mov	r1, r3
 800956c:	4610      	mov	r0, r2
 800956e:	f7fe f958 	bl	8007822 <vListInsert>
 8009572:	e012      	b.n	800959a <prvInsertTimerInActiveList+0x72>
		}
	}
	else
	{
		if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 8009574:	687a      	ldr	r2, [r7, #4]
 8009576:	683b      	ldr	r3, [r7, #0]
 8009578:	429a      	cmp	r2, r3
 800957a:	d206      	bcs.n	800958a <prvInsertTimerInActiveList+0x62>
 800957c:	68ba      	ldr	r2, [r7, #8]
 800957e:	683b      	ldr	r3, [r7, #0]
 8009580:	429a      	cmp	r2, r3
 8009582:	d302      	bcc.n	800958a <prvInsertTimerInActiveList+0x62>
		{
			/* If, since the command was issued, the tick count has overflowed
			but the expiry time has not, then the timer must have already passed
			its expiry time and should be processed immediately. */
			xProcessTimerNow = pdTRUE;
 8009584:	2301      	movs	r3, #1
 8009586:	617b      	str	r3, [r7, #20]
 8009588:	e007      	b.n	800959a <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 800958a:	4b07      	ldr	r3, [pc, #28]	@ (80095a8 <prvInsertTimerInActiveList+0x80>)
 800958c:	681a      	ldr	r2, [r3, #0]
 800958e:	68fb      	ldr	r3, [r7, #12]
 8009590:	3304      	adds	r3, #4
 8009592:	4619      	mov	r1, r3
 8009594:	4610      	mov	r0, r2
 8009596:	f7fe f944 	bl	8007822 <vListInsert>
		}
	}

	return xProcessTimerNow;
 800959a:	697b      	ldr	r3, [r7, #20]
}
 800959c:	4618      	mov	r0, r3
 800959e:	3718      	adds	r7, #24
 80095a0:	46bd      	mov	sp, r7
 80095a2:	bd80      	pop	{r7, pc}
 80095a4:	2003e17c 	.word	0x2003e17c
 80095a8:	2003e178 	.word	0x2003e178

080095ac <prvProcessReceivedCommands>:
/*-----------------------------------------------------------*/

static void	prvProcessReceivedCommands( void )
{
 80095ac:	b580      	push	{r7, lr}
 80095ae:	b08e      	sub	sp, #56	@ 0x38
 80095b0:	af02      	add	r7, sp, #8
DaemonTaskMessage_t xMessage;
Timer_t *pxTimer;
BaseType_t xTimerListsWereSwitched, xResult;
TickType_t xTimeNow;

	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 80095b2:	e0d4      	b.n	800975e <prvProcessReceivedCommands+0x1b2>
	{
		#if ( INCLUDE_xTimerPendFunctionCall == 1 )
		{
			/* Negative commands are pended function calls rather than timer
			commands. */
			if( xMessage.xMessageID < ( BaseType_t ) 0 )
 80095b4:	687b      	ldr	r3, [r7, #4]
 80095b6:	2b00      	cmp	r3, #0
 80095b8:	da1b      	bge.n	80095f2 <prvProcessReceivedCommands+0x46>
			{
				const CallbackParameters_t * const pxCallback = &( xMessage.u.xCallbackParameters );
 80095ba:	1d3b      	adds	r3, r7, #4
 80095bc:	3304      	adds	r3, #4
 80095be:	62fb      	str	r3, [r7, #44]	@ 0x2c

				/* The timer uses the xCallbackParameters member to request a
				callback be executed.  Check the callback is not NULL. */
				configASSERT( pxCallback );
 80095c0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80095c2:	2b00      	cmp	r3, #0
 80095c4:	d10d      	bne.n	80095e2 <prvProcessReceivedCommands+0x36>
	__asm volatile
 80095c6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80095ca:	b672      	cpsid	i
 80095cc:	f383 8811 	msr	BASEPRI, r3
 80095d0:	f3bf 8f6f 	isb	sy
 80095d4:	f3bf 8f4f 	dsb	sy
 80095d8:	b662      	cpsie	i
 80095da:	61fb      	str	r3, [r7, #28]
}
 80095dc:	bf00      	nop
 80095de:	bf00      	nop
 80095e0:	e7fd      	b.n	80095de <prvProcessReceivedCommands+0x32>

				/* Call the function. */
				pxCallback->pxCallbackFunction( pxCallback->pvParameter1, pxCallback->ulParameter2 );
 80095e2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80095e4:	681b      	ldr	r3, [r3, #0]
 80095e6:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 80095e8:	6850      	ldr	r0, [r2, #4]
 80095ea:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 80095ec:	6892      	ldr	r2, [r2, #8]
 80095ee:	4611      	mov	r1, r2
 80095f0:	4798      	blx	r3
		}
		#endif /* INCLUDE_xTimerPendFunctionCall */

		/* Commands that are positive are timer commands rather than pended
		function calls. */
		if( xMessage.xMessageID >= ( BaseType_t ) 0 )
 80095f2:	687b      	ldr	r3, [r7, #4]
 80095f4:	2b00      	cmp	r3, #0
 80095f6:	f2c0 80b2 	blt.w	800975e <prvProcessReceivedCommands+0x1b2>
		{
			/* The messages uses the xTimerParameters member to work on a
			software timer. */
			pxTimer = xMessage.u.xTimerParameters.pxTimer;
 80095fa:	68fb      	ldr	r3, [r7, #12]
 80095fc:	62bb      	str	r3, [r7, #40]	@ 0x28

			if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
 80095fe:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009600:	695b      	ldr	r3, [r3, #20]
 8009602:	2b00      	cmp	r3, #0
 8009604:	d004      	beq.n	8009610 <prvProcessReceivedCommands+0x64>
			{
				/* The timer is in a list, remove it. */
				( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8009606:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009608:	3304      	adds	r3, #4
 800960a:	4618      	mov	r0, r3
 800960c:	f7fe f942 	bl	8007894 <uxListRemove>
			it must be present in the function call.  prvSampleTimeNow() must be
			called after the message is received from xTimerQueue so there is no
			possibility of a higher priority task adding a message to the message
			queue with a time that is ahead of the timer daemon task (because it
			pre-empted the timer daemon task after the xTimeNow value was set). */
			xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 8009610:	463b      	mov	r3, r7
 8009612:	4618      	mov	r0, r3
 8009614:	f7ff ff68 	bl	80094e8 <prvSampleTimeNow>
 8009618:	6278      	str	r0, [r7, #36]	@ 0x24

			switch( xMessage.xMessageID )
 800961a:	687b      	ldr	r3, [r7, #4]
 800961c:	2b09      	cmp	r3, #9
 800961e:	f200 809b 	bhi.w	8009758 <prvProcessReceivedCommands+0x1ac>
 8009622:	a201      	add	r2, pc, #4	@ (adr r2, 8009628 <prvProcessReceivedCommands+0x7c>)
 8009624:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009628:	08009651 	.word	0x08009651
 800962c:	08009651 	.word	0x08009651
 8009630:	08009651 	.word	0x08009651
 8009634:	080096cb 	.word	0x080096cb
 8009638:	080096df 	.word	0x080096df
 800963c:	0800972f 	.word	0x0800972f
 8009640:	08009651 	.word	0x08009651
 8009644:	08009651 	.word	0x08009651
 8009648:	080096cb 	.word	0x080096cb
 800964c:	080096df 	.word	0x080096df
				case tmrCOMMAND_START_FROM_ISR :
				case tmrCOMMAND_RESET :
				case tmrCOMMAND_RESET_FROM_ISR :
				case tmrCOMMAND_START_DONT_TRACE :
					/* Start or restart a timer. */
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 8009650:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009652:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8009656:	f043 0301 	orr.w	r3, r3, #1
 800965a:	b2da      	uxtb	r2, r3
 800965c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800965e:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
					if( prvInsertTimerInActiveList( pxTimer,  xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 8009662:	68ba      	ldr	r2, [r7, #8]
 8009664:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009666:	699b      	ldr	r3, [r3, #24]
 8009668:	18d1      	adds	r1, r2, r3
 800966a:	68bb      	ldr	r3, [r7, #8]
 800966c:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800966e:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8009670:	f7ff ff5a 	bl	8009528 <prvInsertTimerInActiveList>
 8009674:	4603      	mov	r3, r0
 8009676:	2b00      	cmp	r3, #0
 8009678:	d070      	beq.n	800975c <prvProcessReceivedCommands+0x1b0>
					{
						/* The timer expired before it was added to the active
						timer list.  Process it now. */
						pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800967a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800967c:	6a1b      	ldr	r3, [r3, #32]
 800967e:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8009680:	4798      	blx	r3
						traceTIMER_EXPIRED( pxTimer );

						if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 8009682:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009684:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8009688:	f003 0304 	and.w	r3, r3, #4
 800968c:	2b00      	cmp	r3, #0
 800968e:	d065      	beq.n	800975c <prvProcessReceivedCommands+0x1b0>
						{
							xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
 8009690:	68ba      	ldr	r2, [r7, #8]
 8009692:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009694:	699b      	ldr	r3, [r3, #24]
 8009696:	441a      	add	r2, r3
 8009698:	2300      	movs	r3, #0
 800969a:	9300      	str	r3, [sp, #0]
 800969c:	2300      	movs	r3, #0
 800969e:	2100      	movs	r1, #0
 80096a0:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 80096a2:	f7ff fdfb 	bl	800929c <xTimerGenericCommand>
 80096a6:	6238      	str	r0, [r7, #32]
							configASSERT( xResult );
 80096a8:	6a3b      	ldr	r3, [r7, #32]
 80096aa:	2b00      	cmp	r3, #0
 80096ac:	d156      	bne.n	800975c <prvProcessReceivedCommands+0x1b0>
	__asm volatile
 80096ae:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80096b2:	b672      	cpsid	i
 80096b4:	f383 8811 	msr	BASEPRI, r3
 80096b8:	f3bf 8f6f 	isb	sy
 80096bc:	f3bf 8f4f 	dsb	sy
 80096c0:	b662      	cpsie	i
 80096c2:	61bb      	str	r3, [r7, #24]
}
 80096c4:	bf00      	nop
 80096c6:	bf00      	nop
 80096c8:	e7fd      	b.n	80096c6 <prvProcessReceivedCommands+0x11a>
					break;

				case tmrCOMMAND_STOP :
				case tmrCOMMAND_STOP_FROM_ISR :
					/* The timer has already been removed from the active list. */
					pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 80096ca:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80096cc:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 80096d0:	f023 0301 	bic.w	r3, r3, #1
 80096d4:	b2da      	uxtb	r2, r3
 80096d6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80096d8:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
					break;
 80096dc:	e03f      	b.n	800975e <prvProcessReceivedCommands+0x1b2>

				case tmrCOMMAND_CHANGE_PERIOD :
				case tmrCOMMAND_CHANGE_PERIOD_FROM_ISR :
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 80096de:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80096e0:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 80096e4:	f043 0301 	orr.w	r3, r3, #1
 80096e8:	b2da      	uxtb	r2, r3
 80096ea:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80096ec:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
					pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 80096f0:	68ba      	ldr	r2, [r7, #8]
 80096f2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80096f4:	619a      	str	r2, [r3, #24]
					configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 80096f6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80096f8:	699b      	ldr	r3, [r3, #24]
 80096fa:	2b00      	cmp	r3, #0
 80096fc:	d10d      	bne.n	800971a <prvProcessReceivedCommands+0x16e>
	__asm volatile
 80096fe:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8009702:	b672      	cpsid	i
 8009704:	f383 8811 	msr	BASEPRI, r3
 8009708:	f3bf 8f6f 	isb	sy
 800970c:	f3bf 8f4f 	dsb	sy
 8009710:	b662      	cpsie	i
 8009712:	617b      	str	r3, [r7, #20]
}
 8009714:	bf00      	nop
 8009716:	bf00      	nop
 8009718:	e7fd      	b.n	8009716 <prvProcessReceivedCommands+0x16a>
					be longer or shorter than the old one.  The command time is
					therefore set to the current time, and as the period cannot
					be zero the next expiry time can only be in the future,
					meaning (unlike for the xTimerStart() case above) there is
					no fail case that needs to be handled here. */
					( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
 800971a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800971c:	699a      	ldr	r2, [r3, #24]
 800971e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009720:	18d1      	adds	r1, r2, r3
 8009722:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009724:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8009726:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8009728:	f7ff fefe 	bl	8009528 <prvInsertTimerInActiveList>
					break;
 800972c:	e017      	b.n	800975e <prvProcessReceivedCommands+0x1b2>
					#if ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
					{
						/* The timer has already been removed from the active list,
						just free up the memory if the memory was dynamically
						allocated. */
						if( ( pxTimer->ucStatus & tmrSTATUS_IS_STATICALLY_ALLOCATED ) == ( uint8_t ) 0 )
 800972e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009730:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8009734:	f003 0302 	and.w	r3, r3, #2
 8009738:	2b00      	cmp	r3, #0
 800973a:	d103      	bne.n	8009744 <prvProcessReceivedCommands+0x198>
						{
							vPortFree( pxTimer );
 800973c:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800973e:	f000 fbd1 	bl	8009ee4 <vPortFree>
						no need to free the memory - just mark the timer as
						"not active". */
						pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
					}
					#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
					break;
 8009742:	e00c      	b.n	800975e <prvProcessReceivedCommands+0x1b2>
							pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8009744:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009746:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 800974a:	f023 0301 	bic.w	r3, r3, #1
 800974e:	b2da      	uxtb	r2, r3
 8009750:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009752:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
					break;
 8009756:	e002      	b.n	800975e <prvProcessReceivedCommands+0x1b2>

				default	:
					/* Don't expect to get here. */
					break;
 8009758:	bf00      	nop
 800975a:	e000      	b.n	800975e <prvProcessReceivedCommands+0x1b2>
					break;
 800975c:	bf00      	nop
	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 800975e:	4b08      	ldr	r3, [pc, #32]	@ (8009780 <prvProcessReceivedCommands+0x1d4>)
 8009760:	681b      	ldr	r3, [r3, #0]
 8009762:	1d39      	adds	r1, r7, #4
 8009764:	2200      	movs	r2, #0
 8009766:	4618      	mov	r0, r3
 8009768:	f7fe fbc6 	bl	8007ef8 <xQueueReceive>
 800976c:	4603      	mov	r3, r0
 800976e:	2b00      	cmp	r3, #0
 8009770:	f47f af20 	bne.w	80095b4 <prvProcessReceivedCommands+0x8>
			}
		}
	}
}
 8009774:	bf00      	nop
 8009776:	bf00      	nop
 8009778:	3730      	adds	r7, #48	@ 0x30
 800977a:	46bd      	mov	sp, r7
 800977c:	bd80      	pop	{r7, pc}
 800977e:	bf00      	nop
 8009780:	2003e180 	.word	0x2003e180

08009784 <prvSwitchTimerLists>:
/*-----------------------------------------------------------*/

static void prvSwitchTimerLists( void )
{
 8009784:	b580      	push	{r7, lr}
 8009786:	b088      	sub	sp, #32
 8009788:	af02      	add	r7, sp, #8

	/* The tick count has overflowed.  The timer lists must be switched.
	If there are any timers still referenced from the current timer list
	then they must have expired and should be processed before the lists
	are switched. */
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 800978a:	e04b      	b.n	8009824 <prvSwitchTimerLists+0xa0>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 800978c:	4b2f      	ldr	r3, [pc, #188]	@ (800984c <prvSwitchTimerLists+0xc8>)
 800978e:	681b      	ldr	r3, [r3, #0]
 8009790:	68db      	ldr	r3, [r3, #12]
 8009792:	681b      	ldr	r3, [r3, #0]
 8009794:	613b      	str	r3, [r7, #16]

		/* Remove the timer from the list. */
		pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8009796:	4b2d      	ldr	r3, [pc, #180]	@ (800984c <prvSwitchTimerLists+0xc8>)
 8009798:	681b      	ldr	r3, [r3, #0]
 800979a:	68db      	ldr	r3, [r3, #12]
 800979c:	68db      	ldr	r3, [r3, #12]
 800979e:	60fb      	str	r3, [r7, #12]
		( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 80097a0:	68fb      	ldr	r3, [r7, #12]
 80097a2:	3304      	adds	r3, #4
 80097a4:	4618      	mov	r0, r3
 80097a6:	f7fe f875 	bl	8007894 <uxListRemove>
		traceTIMER_EXPIRED( pxTimer );

		/* Execute its callback, then send a command to restart the timer if
		it is an auto-reload timer.  It cannot be restarted here as the lists
		have not yet been switched. */
		pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 80097aa:	68fb      	ldr	r3, [r7, #12]
 80097ac:	6a1b      	ldr	r3, [r3, #32]
 80097ae:	68f8      	ldr	r0, [r7, #12]
 80097b0:	4798      	blx	r3

		if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 80097b2:	68fb      	ldr	r3, [r7, #12]
 80097b4:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 80097b8:	f003 0304 	and.w	r3, r3, #4
 80097bc:	2b00      	cmp	r3, #0
 80097be:	d031      	beq.n	8009824 <prvSwitchTimerLists+0xa0>
			the timer going into the same timer list then it has already expired
			and the timer should be re-inserted into the current list so it is
			processed again within this loop.  Otherwise a command should be sent
			to restart the timer to ensure it is only inserted into a list after
			the lists have been swapped. */
			xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
 80097c0:	68fb      	ldr	r3, [r7, #12]
 80097c2:	699b      	ldr	r3, [r3, #24]
 80097c4:	693a      	ldr	r2, [r7, #16]
 80097c6:	4413      	add	r3, r2
 80097c8:	60bb      	str	r3, [r7, #8]
			if( xReloadTime > xNextExpireTime )
 80097ca:	68ba      	ldr	r2, [r7, #8]
 80097cc:	693b      	ldr	r3, [r7, #16]
 80097ce:	429a      	cmp	r2, r3
 80097d0:	d90e      	bls.n	80097f0 <prvSwitchTimerLists+0x6c>
			{
				listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
 80097d2:	68fb      	ldr	r3, [r7, #12]
 80097d4:	68ba      	ldr	r2, [r7, #8]
 80097d6:	605a      	str	r2, [r3, #4]
				listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 80097d8:	68fb      	ldr	r3, [r7, #12]
 80097da:	68fa      	ldr	r2, [r7, #12]
 80097dc:	611a      	str	r2, [r3, #16]
				vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 80097de:	4b1b      	ldr	r3, [pc, #108]	@ (800984c <prvSwitchTimerLists+0xc8>)
 80097e0:	681a      	ldr	r2, [r3, #0]
 80097e2:	68fb      	ldr	r3, [r7, #12]
 80097e4:	3304      	adds	r3, #4
 80097e6:	4619      	mov	r1, r3
 80097e8:	4610      	mov	r0, r2
 80097ea:	f7fe f81a 	bl	8007822 <vListInsert>
 80097ee:	e019      	b.n	8009824 <prvSwitchTimerLists+0xa0>
			}
			else
			{
				xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 80097f0:	2300      	movs	r3, #0
 80097f2:	9300      	str	r3, [sp, #0]
 80097f4:	2300      	movs	r3, #0
 80097f6:	693a      	ldr	r2, [r7, #16]
 80097f8:	2100      	movs	r1, #0
 80097fa:	68f8      	ldr	r0, [r7, #12]
 80097fc:	f7ff fd4e 	bl	800929c <xTimerGenericCommand>
 8009800:	6078      	str	r0, [r7, #4]
				configASSERT( xResult );
 8009802:	687b      	ldr	r3, [r7, #4]
 8009804:	2b00      	cmp	r3, #0
 8009806:	d10d      	bne.n	8009824 <prvSwitchTimerLists+0xa0>
	__asm volatile
 8009808:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800980c:	b672      	cpsid	i
 800980e:	f383 8811 	msr	BASEPRI, r3
 8009812:	f3bf 8f6f 	isb	sy
 8009816:	f3bf 8f4f 	dsb	sy
 800981a:	b662      	cpsie	i
 800981c:	603b      	str	r3, [r7, #0]
}
 800981e:	bf00      	nop
 8009820:	bf00      	nop
 8009822:	e7fd      	b.n	8009820 <prvSwitchTimerLists+0x9c>
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 8009824:	4b09      	ldr	r3, [pc, #36]	@ (800984c <prvSwitchTimerLists+0xc8>)
 8009826:	681b      	ldr	r3, [r3, #0]
 8009828:	681b      	ldr	r3, [r3, #0]
 800982a:	2b00      	cmp	r3, #0
 800982c:	d1ae      	bne.n	800978c <prvSwitchTimerLists+0x8>
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxTemp = pxCurrentTimerList;
 800982e:	4b07      	ldr	r3, [pc, #28]	@ (800984c <prvSwitchTimerLists+0xc8>)
 8009830:	681b      	ldr	r3, [r3, #0]
 8009832:	617b      	str	r3, [r7, #20]
	pxCurrentTimerList = pxOverflowTimerList;
 8009834:	4b06      	ldr	r3, [pc, #24]	@ (8009850 <prvSwitchTimerLists+0xcc>)
 8009836:	681b      	ldr	r3, [r3, #0]
 8009838:	4a04      	ldr	r2, [pc, #16]	@ (800984c <prvSwitchTimerLists+0xc8>)
 800983a:	6013      	str	r3, [r2, #0]
	pxOverflowTimerList = pxTemp;
 800983c:	4a04      	ldr	r2, [pc, #16]	@ (8009850 <prvSwitchTimerLists+0xcc>)
 800983e:	697b      	ldr	r3, [r7, #20]
 8009840:	6013      	str	r3, [r2, #0]
}
 8009842:	bf00      	nop
 8009844:	3718      	adds	r7, #24
 8009846:	46bd      	mov	sp, r7
 8009848:	bd80      	pop	{r7, pc}
 800984a:	bf00      	nop
 800984c:	2003e178 	.word	0x2003e178
 8009850:	2003e17c 	.word	0x2003e17c

08009854 <prvCheckForValidListAndQueue>:
/*-----------------------------------------------------------*/

static void prvCheckForValidListAndQueue( void )
{
 8009854:	b580      	push	{r7, lr}
 8009856:	b082      	sub	sp, #8
 8009858:	af02      	add	r7, sp, #8
	/* Check that the list from which active timers are referenced, and the
	queue used to communicate with the timer service, have been
	initialised. */
	taskENTER_CRITICAL();
 800985a:	f000 f947 	bl	8009aec <vPortEnterCritical>
	{
		if( xTimerQueue == NULL )
 800985e:	4b15      	ldr	r3, [pc, #84]	@ (80098b4 <prvCheckForValidListAndQueue+0x60>)
 8009860:	681b      	ldr	r3, [r3, #0]
 8009862:	2b00      	cmp	r3, #0
 8009864:	d120      	bne.n	80098a8 <prvCheckForValidListAndQueue+0x54>
		{
			vListInitialise( &xActiveTimerList1 );
 8009866:	4814      	ldr	r0, [pc, #80]	@ (80098b8 <prvCheckForValidListAndQueue+0x64>)
 8009868:	f7fd ff8a 	bl	8007780 <vListInitialise>
			vListInitialise( &xActiveTimerList2 );
 800986c:	4813      	ldr	r0, [pc, #76]	@ (80098bc <prvCheckForValidListAndQueue+0x68>)
 800986e:	f7fd ff87 	bl	8007780 <vListInitialise>
			pxCurrentTimerList = &xActiveTimerList1;
 8009872:	4b13      	ldr	r3, [pc, #76]	@ (80098c0 <prvCheckForValidListAndQueue+0x6c>)
 8009874:	4a10      	ldr	r2, [pc, #64]	@ (80098b8 <prvCheckForValidListAndQueue+0x64>)
 8009876:	601a      	str	r2, [r3, #0]
			pxOverflowTimerList = &xActiveTimerList2;
 8009878:	4b12      	ldr	r3, [pc, #72]	@ (80098c4 <prvCheckForValidListAndQueue+0x70>)
 800987a:	4a10      	ldr	r2, [pc, #64]	@ (80098bc <prvCheckForValidListAndQueue+0x68>)
 800987c:	601a      	str	r2, [r3, #0]
				/* The timer queue is allocated statically in case
				configSUPPORT_DYNAMIC_ALLOCATION is 0. */
				static StaticQueue_t xStaticTimerQueue; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */
				static uint8_t ucStaticTimerQueueStorage[ ( size_t ) configTIMER_QUEUE_LENGTH * sizeof( DaemonTaskMessage_t ) ]; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */

				xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
 800987e:	2300      	movs	r3, #0
 8009880:	9300      	str	r3, [sp, #0]
 8009882:	4b11      	ldr	r3, [pc, #68]	@ (80098c8 <prvCheckForValidListAndQueue+0x74>)
 8009884:	4a11      	ldr	r2, [pc, #68]	@ (80098cc <prvCheckForValidListAndQueue+0x78>)
 8009886:	2110      	movs	r1, #16
 8009888:	200a      	movs	r0, #10
 800988a:	f7fe f899 	bl	80079c0 <xQueueGenericCreateStatic>
 800988e:	4603      	mov	r3, r0
 8009890:	4a08      	ldr	r2, [pc, #32]	@ (80098b4 <prvCheckForValidListAndQueue+0x60>)
 8009892:	6013      	str	r3, [r2, #0]
			}
			#endif

			#if ( configQUEUE_REGISTRY_SIZE > 0 )
			{
				if( xTimerQueue != NULL )
 8009894:	4b07      	ldr	r3, [pc, #28]	@ (80098b4 <prvCheckForValidListAndQueue+0x60>)
 8009896:	681b      	ldr	r3, [r3, #0]
 8009898:	2b00      	cmp	r3, #0
 800989a:	d005      	beq.n	80098a8 <prvCheckForValidListAndQueue+0x54>
				{
					vQueueAddToRegistry( xTimerQueue, "TmrQ" );
 800989c:	4b05      	ldr	r3, [pc, #20]	@ (80098b4 <prvCheckForValidListAndQueue+0x60>)
 800989e:	681b      	ldr	r3, [r3, #0]
 80098a0:	490b      	ldr	r1, [pc, #44]	@ (80098d0 <prvCheckForValidListAndQueue+0x7c>)
 80098a2:	4618      	mov	r0, r3
 80098a4:	f7fe fd20 	bl	80082e8 <vQueueAddToRegistry>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 80098a8:	f000 f956 	bl	8009b58 <vPortExitCritical>
}
 80098ac:	bf00      	nop
 80098ae:	46bd      	mov	sp, r7
 80098b0:	bd80      	pop	{r7, pc}
 80098b2:	bf00      	nop
 80098b4:	2003e180 	.word	0x2003e180
 80098b8:	2003e150 	.word	0x2003e150
 80098bc:	2003e164 	.word	0x2003e164
 80098c0:	2003e178 	.word	0x2003e178
 80098c4:	2003e17c 	.word	0x2003e17c
 80098c8:	2003e22c 	.word	0x2003e22c
 80098cc:	2003e18c 	.word	0x2003e18c
 80098d0:	08010ff0 	.word	0x08010ff0

080098d4 <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 80098d4:	b480      	push	{r7}
 80098d6:	b085      	sub	sp, #20
 80098d8:	af00      	add	r7, sp, #0
 80098da:	60f8      	str	r0, [r7, #12]
 80098dc:	60b9      	str	r1, [r7, #8]
 80098de:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 80098e0:	68fb      	ldr	r3, [r7, #12]
 80098e2:	3b04      	subs	r3, #4
 80098e4:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 80098e6:	68fb      	ldr	r3, [r7, #12]
 80098e8:	f04f 7280 	mov.w	r2, #16777216	@ 0x1000000
 80098ec:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 80098ee:	68fb      	ldr	r3, [r7, #12]
 80098f0:	3b04      	subs	r3, #4
 80098f2:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 80098f4:	68bb      	ldr	r3, [r7, #8]
 80098f6:	f023 0201 	bic.w	r2, r3, #1
 80098fa:	68fb      	ldr	r3, [r7, #12]
 80098fc:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 80098fe:	68fb      	ldr	r3, [r7, #12]
 8009900:	3b04      	subs	r3, #4
 8009902:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 8009904:	4a0c      	ldr	r2, [pc, #48]	@ (8009938 <pxPortInitialiseStack+0x64>)
 8009906:	68fb      	ldr	r3, [r7, #12]
 8009908:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 800990a:	68fb      	ldr	r3, [r7, #12]
 800990c:	3b14      	subs	r3, #20
 800990e:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 8009910:	687a      	ldr	r2, [r7, #4]
 8009912:	68fb      	ldr	r3, [r7, #12]
 8009914:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 8009916:	68fb      	ldr	r3, [r7, #12]
 8009918:	3b04      	subs	r3, #4
 800991a:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 800991c:	68fb      	ldr	r3, [r7, #12]
 800991e:	f06f 0202 	mvn.w	r2, #2
 8009922:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 8009924:	68fb      	ldr	r3, [r7, #12]
 8009926:	3b20      	subs	r3, #32
 8009928:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 800992a:	68fb      	ldr	r3, [r7, #12]
}
 800992c:	4618      	mov	r0, r3
 800992e:	3714      	adds	r7, #20
 8009930:	46bd      	mov	sp, r7
 8009932:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009936:	4770      	bx	lr
 8009938:	0800993d 	.word	0x0800993d

0800993c <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 800993c:	b480      	push	{r7}
 800993e:	b085      	sub	sp, #20
 8009940:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 8009942:	2300      	movs	r3, #0
 8009944:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 8009946:	4b15      	ldr	r3, [pc, #84]	@ (800999c <prvTaskExitError+0x60>)
 8009948:	681b      	ldr	r3, [r3, #0]
 800994a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800994e:	d00d      	beq.n	800996c <prvTaskExitError+0x30>
	__asm volatile
 8009950:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8009954:	b672      	cpsid	i
 8009956:	f383 8811 	msr	BASEPRI, r3
 800995a:	f3bf 8f6f 	isb	sy
 800995e:	f3bf 8f4f 	dsb	sy
 8009962:	b662      	cpsie	i
 8009964:	60fb      	str	r3, [r7, #12]
}
 8009966:	bf00      	nop
 8009968:	bf00      	nop
 800996a:	e7fd      	b.n	8009968 <prvTaskExitError+0x2c>
	__asm volatile
 800996c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8009970:	b672      	cpsid	i
 8009972:	f383 8811 	msr	BASEPRI, r3
 8009976:	f3bf 8f6f 	isb	sy
 800997a:	f3bf 8f4f 	dsb	sy
 800997e:	b662      	cpsie	i
 8009980:	60bb      	str	r3, [r7, #8]
}
 8009982:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 8009984:	bf00      	nop
 8009986:	687b      	ldr	r3, [r7, #4]
 8009988:	2b00      	cmp	r3, #0
 800998a:	d0fc      	beq.n	8009986 <prvTaskExitError+0x4a>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 800998c:	bf00      	nop
 800998e:	bf00      	nop
 8009990:	3714      	adds	r7, #20
 8009992:	46bd      	mov	sp, r7
 8009994:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009998:	4770      	bx	lr
 800999a:	bf00      	nop
 800999c:	2003bb0c 	.word	0x2003bb0c

080099a0 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 80099a0:	4b07      	ldr	r3, [pc, #28]	@ (80099c0 <pxCurrentTCBConst2>)
 80099a2:	6819      	ldr	r1, [r3, #0]
 80099a4:	6808      	ldr	r0, [r1, #0]
 80099a6:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80099aa:	f380 8809 	msr	PSP, r0
 80099ae:	f3bf 8f6f 	isb	sy
 80099b2:	f04f 0000 	mov.w	r0, #0
 80099b6:	f380 8811 	msr	BASEPRI, r0
 80099ba:	4770      	bx	lr
 80099bc:	f3af 8000 	nop.w

080099c0 <pxCurrentTCBConst2>:
 80099c0:	2003dc50 	.word	0x2003dc50
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 80099c4:	bf00      	nop
 80099c6:	bf00      	nop

080099c8 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 80099c8:	4808      	ldr	r0, [pc, #32]	@ (80099ec <prvPortStartFirstTask+0x24>)
 80099ca:	6800      	ldr	r0, [r0, #0]
 80099cc:	6800      	ldr	r0, [r0, #0]
 80099ce:	f380 8808 	msr	MSP, r0
 80099d2:	f04f 0000 	mov.w	r0, #0
 80099d6:	f380 8814 	msr	CONTROL, r0
 80099da:	b662      	cpsie	i
 80099dc:	b661      	cpsie	f
 80099de:	f3bf 8f4f 	dsb	sy
 80099e2:	f3bf 8f6f 	isb	sy
 80099e6:	df00      	svc	0
 80099e8:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 80099ea:	bf00      	nop
 80099ec:	e000ed08 	.word	0xe000ed08

080099f0 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 80099f0:	b580      	push	{r7, lr}
 80099f2:	b084      	sub	sp, #16
 80099f4:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 80099f6:	4b37      	ldr	r3, [pc, #220]	@ (8009ad4 <xPortStartScheduler+0xe4>)
 80099f8:	60fb      	str	r3, [r7, #12]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 80099fa:	68fb      	ldr	r3, [r7, #12]
 80099fc:	781b      	ldrb	r3, [r3, #0]
 80099fe:	b2db      	uxtb	r3, r3
 8009a00:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 8009a02:	68fb      	ldr	r3, [r7, #12]
 8009a04:	22ff      	movs	r2, #255	@ 0xff
 8009a06:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 8009a08:	68fb      	ldr	r3, [r7, #12]
 8009a0a:	781b      	ldrb	r3, [r3, #0]
 8009a0c:	b2db      	uxtb	r3, r3
 8009a0e:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 8009a10:	78fb      	ldrb	r3, [r7, #3]
 8009a12:	b2db      	uxtb	r3, r3
 8009a14:	f003 0350 	and.w	r3, r3, #80	@ 0x50
 8009a18:	b2da      	uxtb	r2, r3
 8009a1a:	4b2f      	ldr	r3, [pc, #188]	@ (8009ad8 <xPortStartScheduler+0xe8>)
 8009a1c:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 8009a1e:	4b2f      	ldr	r3, [pc, #188]	@ (8009adc <xPortStartScheduler+0xec>)
 8009a20:	2207      	movs	r2, #7
 8009a22:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8009a24:	e009      	b.n	8009a3a <xPortStartScheduler+0x4a>
		{
			ulMaxPRIGROUPValue--;
 8009a26:	4b2d      	ldr	r3, [pc, #180]	@ (8009adc <xPortStartScheduler+0xec>)
 8009a28:	681b      	ldr	r3, [r3, #0]
 8009a2a:	3b01      	subs	r3, #1
 8009a2c:	4a2b      	ldr	r2, [pc, #172]	@ (8009adc <xPortStartScheduler+0xec>)
 8009a2e:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 8009a30:	78fb      	ldrb	r3, [r7, #3]
 8009a32:	b2db      	uxtb	r3, r3
 8009a34:	005b      	lsls	r3, r3, #1
 8009a36:	b2db      	uxtb	r3, r3
 8009a38:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8009a3a:	78fb      	ldrb	r3, [r7, #3]
 8009a3c:	b2db      	uxtb	r3, r3
 8009a3e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8009a42:	2b80      	cmp	r3, #128	@ 0x80
 8009a44:	d0ef      	beq.n	8009a26 <xPortStartScheduler+0x36>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 8009a46:	4b25      	ldr	r3, [pc, #148]	@ (8009adc <xPortStartScheduler+0xec>)
 8009a48:	681b      	ldr	r3, [r3, #0]
 8009a4a:	f1c3 0307 	rsb	r3, r3, #7
 8009a4e:	2b04      	cmp	r3, #4
 8009a50:	d00d      	beq.n	8009a6e <xPortStartScheduler+0x7e>
	__asm volatile
 8009a52:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8009a56:	b672      	cpsid	i
 8009a58:	f383 8811 	msr	BASEPRI, r3
 8009a5c:	f3bf 8f6f 	isb	sy
 8009a60:	f3bf 8f4f 	dsb	sy
 8009a64:	b662      	cpsie	i
 8009a66:	60bb      	str	r3, [r7, #8]
}
 8009a68:	bf00      	nop
 8009a6a:	bf00      	nop
 8009a6c:	e7fd      	b.n	8009a6a <xPortStartScheduler+0x7a>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 8009a6e:	4b1b      	ldr	r3, [pc, #108]	@ (8009adc <xPortStartScheduler+0xec>)
 8009a70:	681b      	ldr	r3, [r3, #0]
 8009a72:	021b      	lsls	r3, r3, #8
 8009a74:	4a19      	ldr	r2, [pc, #100]	@ (8009adc <xPortStartScheduler+0xec>)
 8009a76:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 8009a78:	4b18      	ldr	r3, [pc, #96]	@ (8009adc <xPortStartScheduler+0xec>)
 8009a7a:	681b      	ldr	r3, [r3, #0]
 8009a7c:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
 8009a80:	4a16      	ldr	r2, [pc, #88]	@ (8009adc <xPortStartScheduler+0xec>)
 8009a82:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 8009a84:	687b      	ldr	r3, [r7, #4]
 8009a86:	b2da      	uxtb	r2, r3
 8009a88:	68fb      	ldr	r3, [r7, #12]
 8009a8a:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 8009a8c:	4b14      	ldr	r3, [pc, #80]	@ (8009ae0 <xPortStartScheduler+0xf0>)
 8009a8e:	681b      	ldr	r3, [r3, #0]
 8009a90:	4a13      	ldr	r2, [pc, #76]	@ (8009ae0 <xPortStartScheduler+0xf0>)
 8009a92:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8009a96:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 8009a98:	4b11      	ldr	r3, [pc, #68]	@ (8009ae0 <xPortStartScheduler+0xf0>)
 8009a9a:	681b      	ldr	r3, [r3, #0]
 8009a9c:	4a10      	ldr	r2, [pc, #64]	@ (8009ae0 <xPortStartScheduler+0xf0>)
 8009a9e:	f043 4370 	orr.w	r3, r3, #4026531840	@ 0xf0000000
 8009aa2:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 8009aa4:	f000 f8dc 	bl	8009c60 <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 8009aa8:	4b0e      	ldr	r3, [pc, #56]	@ (8009ae4 <xPortStartScheduler+0xf4>)
 8009aaa:	2200      	movs	r2, #0
 8009aac:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 8009aae:	f000 f8fb 	bl	8009ca8 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 8009ab2:	4b0d      	ldr	r3, [pc, #52]	@ (8009ae8 <xPortStartScheduler+0xf8>)
 8009ab4:	681b      	ldr	r3, [r3, #0]
 8009ab6:	4a0c      	ldr	r2, [pc, #48]	@ (8009ae8 <xPortStartScheduler+0xf8>)
 8009ab8:	f043 4340 	orr.w	r3, r3, #3221225472	@ 0xc0000000
 8009abc:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 8009abe:	f7ff ff83 	bl	80099c8 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 8009ac2:	f7ff f83b 	bl	8008b3c <vTaskSwitchContext>
	prvTaskExitError();
 8009ac6:	f7ff ff39 	bl	800993c <prvTaskExitError>

	/* Should not get here! */
	return 0;
 8009aca:	2300      	movs	r3, #0
}
 8009acc:	4618      	mov	r0, r3
 8009ace:	3710      	adds	r7, #16
 8009ad0:	46bd      	mov	sp, r7
 8009ad2:	bd80      	pop	{r7, pc}
 8009ad4:	e000e400 	.word	0xe000e400
 8009ad8:	2003e27c 	.word	0x2003e27c
 8009adc:	2003e280 	.word	0x2003e280
 8009ae0:	e000ed20 	.word	0xe000ed20
 8009ae4:	2003bb0c 	.word	0x2003bb0c
 8009ae8:	e000ef34 	.word	0xe000ef34

08009aec <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 8009aec:	b480      	push	{r7}
 8009aee:	b083      	sub	sp, #12
 8009af0:	af00      	add	r7, sp, #0
	__asm volatile
 8009af2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8009af6:	b672      	cpsid	i
 8009af8:	f383 8811 	msr	BASEPRI, r3
 8009afc:	f3bf 8f6f 	isb	sy
 8009b00:	f3bf 8f4f 	dsb	sy
 8009b04:	b662      	cpsie	i
 8009b06:	607b      	str	r3, [r7, #4]
}
 8009b08:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 8009b0a:	4b11      	ldr	r3, [pc, #68]	@ (8009b50 <vPortEnterCritical+0x64>)
 8009b0c:	681b      	ldr	r3, [r3, #0]
 8009b0e:	3301      	adds	r3, #1
 8009b10:	4a0f      	ldr	r2, [pc, #60]	@ (8009b50 <vPortEnterCritical+0x64>)
 8009b12:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 8009b14:	4b0e      	ldr	r3, [pc, #56]	@ (8009b50 <vPortEnterCritical+0x64>)
 8009b16:	681b      	ldr	r3, [r3, #0]
 8009b18:	2b01      	cmp	r3, #1
 8009b1a:	d112      	bne.n	8009b42 <vPortEnterCritical+0x56>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 8009b1c:	4b0d      	ldr	r3, [pc, #52]	@ (8009b54 <vPortEnterCritical+0x68>)
 8009b1e:	681b      	ldr	r3, [r3, #0]
 8009b20:	b2db      	uxtb	r3, r3
 8009b22:	2b00      	cmp	r3, #0
 8009b24:	d00d      	beq.n	8009b42 <vPortEnterCritical+0x56>
	__asm volatile
 8009b26:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8009b2a:	b672      	cpsid	i
 8009b2c:	f383 8811 	msr	BASEPRI, r3
 8009b30:	f3bf 8f6f 	isb	sy
 8009b34:	f3bf 8f4f 	dsb	sy
 8009b38:	b662      	cpsie	i
 8009b3a:	603b      	str	r3, [r7, #0]
}
 8009b3c:	bf00      	nop
 8009b3e:	bf00      	nop
 8009b40:	e7fd      	b.n	8009b3e <vPortEnterCritical+0x52>
	}
}
 8009b42:	bf00      	nop
 8009b44:	370c      	adds	r7, #12
 8009b46:	46bd      	mov	sp, r7
 8009b48:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009b4c:	4770      	bx	lr
 8009b4e:	bf00      	nop
 8009b50:	2003bb0c 	.word	0x2003bb0c
 8009b54:	e000ed04 	.word	0xe000ed04

08009b58 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 8009b58:	b480      	push	{r7}
 8009b5a:	b083      	sub	sp, #12
 8009b5c:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 8009b5e:	4b13      	ldr	r3, [pc, #76]	@ (8009bac <vPortExitCritical+0x54>)
 8009b60:	681b      	ldr	r3, [r3, #0]
 8009b62:	2b00      	cmp	r3, #0
 8009b64:	d10d      	bne.n	8009b82 <vPortExitCritical+0x2a>
	__asm volatile
 8009b66:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8009b6a:	b672      	cpsid	i
 8009b6c:	f383 8811 	msr	BASEPRI, r3
 8009b70:	f3bf 8f6f 	isb	sy
 8009b74:	f3bf 8f4f 	dsb	sy
 8009b78:	b662      	cpsie	i
 8009b7a:	607b      	str	r3, [r7, #4]
}
 8009b7c:	bf00      	nop
 8009b7e:	bf00      	nop
 8009b80:	e7fd      	b.n	8009b7e <vPortExitCritical+0x26>
	uxCriticalNesting--;
 8009b82:	4b0a      	ldr	r3, [pc, #40]	@ (8009bac <vPortExitCritical+0x54>)
 8009b84:	681b      	ldr	r3, [r3, #0]
 8009b86:	3b01      	subs	r3, #1
 8009b88:	4a08      	ldr	r2, [pc, #32]	@ (8009bac <vPortExitCritical+0x54>)
 8009b8a:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 8009b8c:	4b07      	ldr	r3, [pc, #28]	@ (8009bac <vPortExitCritical+0x54>)
 8009b8e:	681b      	ldr	r3, [r3, #0]
 8009b90:	2b00      	cmp	r3, #0
 8009b92:	d105      	bne.n	8009ba0 <vPortExitCritical+0x48>
 8009b94:	2300      	movs	r3, #0
 8009b96:	603b      	str	r3, [r7, #0]
	__asm volatile
 8009b98:	683b      	ldr	r3, [r7, #0]
 8009b9a:	f383 8811 	msr	BASEPRI, r3
}
 8009b9e:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 8009ba0:	bf00      	nop
 8009ba2:	370c      	adds	r7, #12
 8009ba4:	46bd      	mov	sp, r7
 8009ba6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009baa:	4770      	bx	lr
 8009bac:	2003bb0c 	.word	0x2003bb0c

08009bb0 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 8009bb0:	f3ef 8009 	mrs	r0, PSP
 8009bb4:	f3bf 8f6f 	isb	sy
 8009bb8:	4b15      	ldr	r3, [pc, #84]	@ (8009c10 <pxCurrentTCBConst>)
 8009bba:	681a      	ldr	r2, [r3, #0]
 8009bbc:	f01e 0f10 	tst.w	lr, #16
 8009bc0:	bf08      	it	eq
 8009bc2:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 8009bc6:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009bca:	6010      	str	r0, [r2, #0]
 8009bcc:	e92d 0009 	stmdb	sp!, {r0, r3}
 8009bd0:	f04f 0050 	mov.w	r0, #80	@ 0x50
 8009bd4:	b672      	cpsid	i
 8009bd6:	f380 8811 	msr	BASEPRI, r0
 8009bda:	f3bf 8f4f 	dsb	sy
 8009bde:	f3bf 8f6f 	isb	sy
 8009be2:	b662      	cpsie	i
 8009be4:	f7fe ffaa 	bl	8008b3c <vTaskSwitchContext>
 8009be8:	f04f 0000 	mov.w	r0, #0
 8009bec:	f380 8811 	msr	BASEPRI, r0
 8009bf0:	bc09      	pop	{r0, r3}
 8009bf2:	6819      	ldr	r1, [r3, #0]
 8009bf4:	6808      	ldr	r0, [r1, #0]
 8009bf6:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009bfa:	f01e 0f10 	tst.w	lr, #16
 8009bfe:	bf08      	it	eq
 8009c00:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 8009c04:	f380 8809 	msr	PSP, r0
 8009c08:	f3bf 8f6f 	isb	sy
 8009c0c:	4770      	bx	lr
 8009c0e:	bf00      	nop

08009c10 <pxCurrentTCBConst>:
 8009c10:	2003dc50 	.word	0x2003dc50
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 8009c14:	bf00      	nop
 8009c16:	bf00      	nop

08009c18 <xPortSysTickHandler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 8009c18:	b580      	push	{r7, lr}
 8009c1a:	b082      	sub	sp, #8
 8009c1c:	af00      	add	r7, sp, #0
	__asm volatile
 8009c1e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8009c22:	b672      	cpsid	i
 8009c24:	f383 8811 	msr	BASEPRI, r3
 8009c28:	f3bf 8f6f 	isb	sy
 8009c2c:	f3bf 8f4f 	dsb	sy
 8009c30:	b662      	cpsie	i
 8009c32:	607b      	str	r3, [r7, #4]
}
 8009c34:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 8009c36:	f7fe fec5 	bl	80089c4 <xTaskIncrementTick>
 8009c3a:	4603      	mov	r3, r0
 8009c3c:	2b00      	cmp	r3, #0
 8009c3e:	d003      	beq.n	8009c48 <xPortSysTickHandler+0x30>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 8009c40:	4b06      	ldr	r3, [pc, #24]	@ (8009c5c <xPortSysTickHandler+0x44>)
 8009c42:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8009c46:	601a      	str	r2, [r3, #0]
 8009c48:	2300      	movs	r3, #0
 8009c4a:	603b      	str	r3, [r7, #0]
	__asm volatile
 8009c4c:	683b      	ldr	r3, [r7, #0]
 8009c4e:	f383 8811 	msr	BASEPRI, r3
}
 8009c52:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 8009c54:	bf00      	nop
 8009c56:	3708      	adds	r7, #8
 8009c58:	46bd      	mov	sp, r7
 8009c5a:	bd80      	pop	{r7, pc}
 8009c5c:	e000ed04 	.word	0xe000ed04

08009c60 <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 8009c60:	b480      	push	{r7}
 8009c62:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 8009c64:	4b0b      	ldr	r3, [pc, #44]	@ (8009c94 <vPortSetupTimerInterrupt+0x34>)
 8009c66:	2200      	movs	r2, #0
 8009c68:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 8009c6a:	4b0b      	ldr	r3, [pc, #44]	@ (8009c98 <vPortSetupTimerInterrupt+0x38>)
 8009c6c:	2200      	movs	r2, #0
 8009c6e:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 8009c70:	4b0a      	ldr	r3, [pc, #40]	@ (8009c9c <vPortSetupTimerInterrupt+0x3c>)
 8009c72:	681b      	ldr	r3, [r3, #0]
 8009c74:	4a0a      	ldr	r2, [pc, #40]	@ (8009ca0 <vPortSetupTimerInterrupt+0x40>)
 8009c76:	fba2 2303 	umull	r2, r3, r2, r3
 8009c7a:	099b      	lsrs	r3, r3, #6
 8009c7c:	4a09      	ldr	r2, [pc, #36]	@ (8009ca4 <vPortSetupTimerInterrupt+0x44>)
 8009c7e:	3b01      	subs	r3, #1
 8009c80:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 8009c82:	4b04      	ldr	r3, [pc, #16]	@ (8009c94 <vPortSetupTimerInterrupt+0x34>)
 8009c84:	2207      	movs	r2, #7
 8009c86:	601a      	str	r2, [r3, #0]
}
 8009c88:	bf00      	nop
 8009c8a:	46bd      	mov	sp, r7
 8009c8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009c90:	4770      	bx	lr
 8009c92:	bf00      	nop
 8009c94:	e000e010 	.word	0xe000e010
 8009c98:	e000e018 	.word	0xe000e018
 8009c9c:	2003bb00 	.word	0x2003bb00
 8009ca0:	10624dd3 	.word	0x10624dd3
 8009ca4:	e000e014 	.word	0xe000e014

08009ca8 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 8009ca8:	f8df 000c 	ldr.w	r0, [pc, #12]	@ 8009cb8 <vPortEnableVFP+0x10>
 8009cac:	6801      	ldr	r1, [r0, #0]
 8009cae:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 8009cb2:	6001      	str	r1, [r0, #0]
 8009cb4:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 8009cb6:	bf00      	nop
 8009cb8:	e000ed88 	.word	0xe000ed88

08009cbc <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 8009cbc:	b480      	push	{r7}
 8009cbe:	b085      	sub	sp, #20
 8009cc0:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 8009cc2:	f3ef 8305 	mrs	r3, IPSR
 8009cc6:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 8009cc8:	68fb      	ldr	r3, [r7, #12]
 8009cca:	2b0f      	cmp	r3, #15
 8009ccc:	d917      	bls.n	8009cfe <vPortValidateInterruptPriority+0x42>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 8009cce:	4a1a      	ldr	r2, [pc, #104]	@ (8009d38 <vPortValidateInterruptPriority+0x7c>)
 8009cd0:	68fb      	ldr	r3, [r7, #12]
 8009cd2:	4413      	add	r3, r2
 8009cd4:	781b      	ldrb	r3, [r3, #0]
 8009cd6:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 8009cd8:	4b18      	ldr	r3, [pc, #96]	@ (8009d3c <vPortValidateInterruptPriority+0x80>)
 8009cda:	781b      	ldrb	r3, [r3, #0]
 8009cdc:	7afa      	ldrb	r2, [r7, #11]
 8009cde:	429a      	cmp	r2, r3
 8009ce0:	d20d      	bcs.n	8009cfe <vPortValidateInterruptPriority+0x42>
	__asm volatile
 8009ce2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8009ce6:	b672      	cpsid	i
 8009ce8:	f383 8811 	msr	BASEPRI, r3
 8009cec:	f3bf 8f6f 	isb	sy
 8009cf0:	f3bf 8f4f 	dsb	sy
 8009cf4:	b662      	cpsie	i
 8009cf6:	607b      	str	r3, [r7, #4]
}
 8009cf8:	bf00      	nop
 8009cfa:	bf00      	nop
 8009cfc:	e7fd      	b.n	8009cfa <vPortValidateInterruptPriority+0x3e>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 8009cfe:	4b10      	ldr	r3, [pc, #64]	@ (8009d40 <vPortValidateInterruptPriority+0x84>)
 8009d00:	681b      	ldr	r3, [r3, #0]
 8009d02:	f403 62e0 	and.w	r2, r3, #1792	@ 0x700
 8009d06:	4b0f      	ldr	r3, [pc, #60]	@ (8009d44 <vPortValidateInterruptPriority+0x88>)
 8009d08:	681b      	ldr	r3, [r3, #0]
 8009d0a:	429a      	cmp	r2, r3
 8009d0c:	d90d      	bls.n	8009d2a <vPortValidateInterruptPriority+0x6e>
	__asm volatile
 8009d0e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8009d12:	b672      	cpsid	i
 8009d14:	f383 8811 	msr	BASEPRI, r3
 8009d18:	f3bf 8f6f 	isb	sy
 8009d1c:	f3bf 8f4f 	dsb	sy
 8009d20:	b662      	cpsie	i
 8009d22:	603b      	str	r3, [r7, #0]
}
 8009d24:	bf00      	nop
 8009d26:	bf00      	nop
 8009d28:	e7fd      	b.n	8009d26 <vPortValidateInterruptPriority+0x6a>
	}
 8009d2a:	bf00      	nop
 8009d2c:	3714      	adds	r7, #20
 8009d2e:	46bd      	mov	sp, r7
 8009d30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009d34:	4770      	bx	lr
 8009d36:	bf00      	nop
 8009d38:	e000e3f0 	.word	0xe000e3f0
 8009d3c:	2003e27c 	.word	0x2003e27c
 8009d40:	e000ed0c 	.word	0xe000ed0c
 8009d44:	2003e280 	.word	0x2003e280

08009d48 <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 8009d48:	b580      	push	{r7, lr}
 8009d4a:	b08a      	sub	sp, #40	@ 0x28
 8009d4c:	af00      	add	r7, sp, #0
 8009d4e:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 8009d50:	2300      	movs	r3, #0
 8009d52:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 8009d54:	f7fe fd78 	bl	8008848 <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 8009d58:	4b5d      	ldr	r3, [pc, #372]	@ (8009ed0 <pvPortMalloc+0x188>)
 8009d5a:	681b      	ldr	r3, [r3, #0]
 8009d5c:	2b00      	cmp	r3, #0
 8009d5e:	d101      	bne.n	8009d64 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 8009d60:	f000 f920 	bl	8009fa4 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 8009d64:	4b5b      	ldr	r3, [pc, #364]	@ (8009ed4 <pvPortMalloc+0x18c>)
 8009d66:	681a      	ldr	r2, [r3, #0]
 8009d68:	687b      	ldr	r3, [r7, #4]
 8009d6a:	4013      	ands	r3, r2
 8009d6c:	2b00      	cmp	r3, #0
 8009d6e:	f040 8094 	bne.w	8009e9a <pvPortMalloc+0x152>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 8009d72:	687b      	ldr	r3, [r7, #4]
 8009d74:	2b00      	cmp	r3, #0
 8009d76:	d020      	beq.n	8009dba <pvPortMalloc+0x72>
			{
				xWantedSize += xHeapStructSize;
 8009d78:	2208      	movs	r2, #8
 8009d7a:	687b      	ldr	r3, [r7, #4]
 8009d7c:	4413      	add	r3, r2
 8009d7e:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 8009d80:	687b      	ldr	r3, [r7, #4]
 8009d82:	f003 0307 	and.w	r3, r3, #7
 8009d86:	2b00      	cmp	r3, #0
 8009d88:	d017      	beq.n	8009dba <pvPortMalloc+0x72>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 8009d8a:	687b      	ldr	r3, [r7, #4]
 8009d8c:	f023 0307 	bic.w	r3, r3, #7
 8009d90:	3308      	adds	r3, #8
 8009d92:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 8009d94:	687b      	ldr	r3, [r7, #4]
 8009d96:	f003 0307 	and.w	r3, r3, #7
 8009d9a:	2b00      	cmp	r3, #0
 8009d9c:	d00d      	beq.n	8009dba <pvPortMalloc+0x72>
	__asm volatile
 8009d9e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8009da2:	b672      	cpsid	i
 8009da4:	f383 8811 	msr	BASEPRI, r3
 8009da8:	f3bf 8f6f 	isb	sy
 8009dac:	f3bf 8f4f 	dsb	sy
 8009db0:	b662      	cpsie	i
 8009db2:	617b      	str	r3, [r7, #20]
}
 8009db4:	bf00      	nop
 8009db6:	bf00      	nop
 8009db8:	e7fd      	b.n	8009db6 <pvPortMalloc+0x6e>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 8009dba:	687b      	ldr	r3, [r7, #4]
 8009dbc:	2b00      	cmp	r3, #0
 8009dbe:	d06c      	beq.n	8009e9a <pvPortMalloc+0x152>
 8009dc0:	4b45      	ldr	r3, [pc, #276]	@ (8009ed8 <pvPortMalloc+0x190>)
 8009dc2:	681b      	ldr	r3, [r3, #0]
 8009dc4:	687a      	ldr	r2, [r7, #4]
 8009dc6:	429a      	cmp	r2, r3
 8009dc8:	d867      	bhi.n	8009e9a <pvPortMalloc+0x152>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 8009dca:	4b44      	ldr	r3, [pc, #272]	@ (8009edc <pvPortMalloc+0x194>)
 8009dcc:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 8009dce:	4b43      	ldr	r3, [pc, #268]	@ (8009edc <pvPortMalloc+0x194>)
 8009dd0:	681b      	ldr	r3, [r3, #0]
 8009dd2:	627b      	str	r3, [r7, #36]	@ 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8009dd4:	e004      	b.n	8009de0 <pvPortMalloc+0x98>
				{
					pxPreviousBlock = pxBlock;
 8009dd6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009dd8:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 8009dda:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009ddc:	681b      	ldr	r3, [r3, #0]
 8009dde:	627b      	str	r3, [r7, #36]	@ 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8009de0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009de2:	685b      	ldr	r3, [r3, #4]
 8009de4:	687a      	ldr	r2, [r7, #4]
 8009de6:	429a      	cmp	r2, r3
 8009de8:	d903      	bls.n	8009df2 <pvPortMalloc+0xaa>
 8009dea:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009dec:	681b      	ldr	r3, [r3, #0]
 8009dee:	2b00      	cmp	r3, #0
 8009df0:	d1f1      	bne.n	8009dd6 <pvPortMalloc+0x8e>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 8009df2:	4b37      	ldr	r3, [pc, #220]	@ (8009ed0 <pvPortMalloc+0x188>)
 8009df4:	681b      	ldr	r3, [r3, #0]
 8009df6:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8009df8:	429a      	cmp	r2, r3
 8009dfa:	d04e      	beq.n	8009e9a <pvPortMalloc+0x152>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 8009dfc:	6a3b      	ldr	r3, [r7, #32]
 8009dfe:	681b      	ldr	r3, [r3, #0]
 8009e00:	2208      	movs	r2, #8
 8009e02:	4413      	add	r3, r2
 8009e04:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 8009e06:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009e08:	681a      	ldr	r2, [r3, #0]
 8009e0a:	6a3b      	ldr	r3, [r7, #32]
 8009e0c:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 8009e0e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009e10:	685a      	ldr	r2, [r3, #4]
 8009e12:	687b      	ldr	r3, [r7, #4]
 8009e14:	1ad2      	subs	r2, r2, r3
 8009e16:	2308      	movs	r3, #8
 8009e18:	005b      	lsls	r3, r3, #1
 8009e1a:	429a      	cmp	r2, r3
 8009e1c:	d922      	bls.n	8009e64 <pvPortMalloc+0x11c>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 8009e1e:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8009e20:	687b      	ldr	r3, [r7, #4]
 8009e22:	4413      	add	r3, r2
 8009e24:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 8009e26:	69bb      	ldr	r3, [r7, #24]
 8009e28:	f003 0307 	and.w	r3, r3, #7
 8009e2c:	2b00      	cmp	r3, #0
 8009e2e:	d00d      	beq.n	8009e4c <pvPortMalloc+0x104>
	__asm volatile
 8009e30:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8009e34:	b672      	cpsid	i
 8009e36:	f383 8811 	msr	BASEPRI, r3
 8009e3a:	f3bf 8f6f 	isb	sy
 8009e3e:	f3bf 8f4f 	dsb	sy
 8009e42:	b662      	cpsie	i
 8009e44:	613b      	str	r3, [r7, #16]
}
 8009e46:	bf00      	nop
 8009e48:	bf00      	nop
 8009e4a:	e7fd      	b.n	8009e48 <pvPortMalloc+0x100>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 8009e4c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009e4e:	685a      	ldr	r2, [r3, #4]
 8009e50:	687b      	ldr	r3, [r7, #4]
 8009e52:	1ad2      	subs	r2, r2, r3
 8009e54:	69bb      	ldr	r3, [r7, #24]
 8009e56:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 8009e58:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009e5a:	687a      	ldr	r2, [r7, #4]
 8009e5c:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 8009e5e:	69b8      	ldr	r0, [r7, #24]
 8009e60:	f000 f902 	bl	800a068 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 8009e64:	4b1c      	ldr	r3, [pc, #112]	@ (8009ed8 <pvPortMalloc+0x190>)
 8009e66:	681a      	ldr	r2, [r3, #0]
 8009e68:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009e6a:	685b      	ldr	r3, [r3, #4]
 8009e6c:	1ad3      	subs	r3, r2, r3
 8009e6e:	4a1a      	ldr	r2, [pc, #104]	@ (8009ed8 <pvPortMalloc+0x190>)
 8009e70:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 8009e72:	4b19      	ldr	r3, [pc, #100]	@ (8009ed8 <pvPortMalloc+0x190>)
 8009e74:	681a      	ldr	r2, [r3, #0]
 8009e76:	4b1a      	ldr	r3, [pc, #104]	@ (8009ee0 <pvPortMalloc+0x198>)
 8009e78:	681b      	ldr	r3, [r3, #0]
 8009e7a:	429a      	cmp	r2, r3
 8009e7c:	d203      	bcs.n	8009e86 <pvPortMalloc+0x13e>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 8009e7e:	4b16      	ldr	r3, [pc, #88]	@ (8009ed8 <pvPortMalloc+0x190>)
 8009e80:	681b      	ldr	r3, [r3, #0]
 8009e82:	4a17      	ldr	r2, [pc, #92]	@ (8009ee0 <pvPortMalloc+0x198>)
 8009e84:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 8009e86:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009e88:	685a      	ldr	r2, [r3, #4]
 8009e8a:	4b12      	ldr	r3, [pc, #72]	@ (8009ed4 <pvPortMalloc+0x18c>)
 8009e8c:	681b      	ldr	r3, [r3, #0]
 8009e8e:	431a      	orrs	r2, r3
 8009e90:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009e92:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 8009e94:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009e96:	2200      	movs	r2, #0
 8009e98:	601a      	str	r2, [r3, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 8009e9a:	f7fe fce3 	bl	8008864 <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 8009e9e:	69fb      	ldr	r3, [r7, #28]
 8009ea0:	f003 0307 	and.w	r3, r3, #7
 8009ea4:	2b00      	cmp	r3, #0
 8009ea6:	d00d      	beq.n	8009ec4 <pvPortMalloc+0x17c>
	__asm volatile
 8009ea8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8009eac:	b672      	cpsid	i
 8009eae:	f383 8811 	msr	BASEPRI, r3
 8009eb2:	f3bf 8f6f 	isb	sy
 8009eb6:	f3bf 8f4f 	dsb	sy
 8009eba:	b662      	cpsie	i
 8009ebc:	60fb      	str	r3, [r7, #12]
}
 8009ebe:	bf00      	nop
 8009ec0:	bf00      	nop
 8009ec2:	e7fd      	b.n	8009ec0 <pvPortMalloc+0x178>
	return pvReturn;
 8009ec4:	69fb      	ldr	r3, [r7, #28]
}
 8009ec6:	4618      	mov	r0, r3
 8009ec8:	3728      	adds	r7, #40	@ 0x28
 8009eca:	46bd      	mov	sp, r7
 8009ecc:	bd80      	pop	{r7, pc}
 8009ece:	bf00      	nop
 8009ed0:	20041e8c 	.word	0x20041e8c
 8009ed4:	20041e98 	.word	0x20041e98
 8009ed8:	20041e90 	.word	0x20041e90
 8009edc:	20041e84 	.word	0x20041e84
 8009ee0:	20041e94 	.word	0x20041e94

08009ee4 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 8009ee4:	b580      	push	{r7, lr}
 8009ee6:	b086      	sub	sp, #24
 8009ee8:	af00      	add	r7, sp, #0
 8009eea:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 8009eec:	687b      	ldr	r3, [r7, #4]
 8009eee:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 8009ef0:	687b      	ldr	r3, [r7, #4]
 8009ef2:	2b00      	cmp	r3, #0
 8009ef4:	d04e      	beq.n	8009f94 <vPortFree+0xb0>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 8009ef6:	2308      	movs	r3, #8
 8009ef8:	425b      	negs	r3, r3
 8009efa:	697a      	ldr	r2, [r7, #20]
 8009efc:	4413      	add	r3, r2
 8009efe:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 8009f00:	697b      	ldr	r3, [r7, #20]
 8009f02:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 8009f04:	693b      	ldr	r3, [r7, #16]
 8009f06:	685a      	ldr	r2, [r3, #4]
 8009f08:	4b24      	ldr	r3, [pc, #144]	@ (8009f9c <vPortFree+0xb8>)
 8009f0a:	681b      	ldr	r3, [r3, #0]
 8009f0c:	4013      	ands	r3, r2
 8009f0e:	2b00      	cmp	r3, #0
 8009f10:	d10d      	bne.n	8009f2e <vPortFree+0x4a>
	__asm volatile
 8009f12:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8009f16:	b672      	cpsid	i
 8009f18:	f383 8811 	msr	BASEPRI, r3
 8009f1c:	f3bf 8f6f 	isb	sy
 8009f20:	f3bf 8f4f 	dsb	sy
 8009f24:	b662      	cpsie	i
 8009f26:	60fb      	str	r3, [r7, #12]
}
 8009f28:	bf00      	nop
 8009f2a:	bf00      	nop
 8009f2c:	e7fd      	b.n	8009f2a <vPortFree+0x46>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 8009f2e:	693b      	ldr	r3, [r7, #16]
 8009f30:	681b      	ldr	r3, [r3, #0]
 8009f32:	2b00      	cmp	r3, #0
 8009f34:	d00d      	beq.n	8009f52 <vPortFree+0x6e>
	__asm volatile
 8009f36:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8009f3a:	b672      	cpsid	i
 8009f3c:	f383 8811 	msr	BASEPRI, r3
 8009f40:	f3bf 8f6f 	isb	sy
 8009f44:	f3bf 8f4f 	dsb	sy
 8009f48:	b662      	cpsie	i
 8009f4a:	60bb      	str	r3, [r7, #8]
}
 8009f4c:	bf00      	nop
 8009f4e:	bf00      	nop
 8009f50:	e7fd      	b.n	8009f4e <vPortFree+0x6a>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 8009f52:	693b      	ldr	r3, [r7, #16]
 8009f54:	685a      	ldr	r2, [r3, #4]
 8009f56:	4b11      	ldr	r3, [pc, #68]	@ (8009f9c <vPortFree+0xb8>)
 8009f58:	681b      	ldr	r3, [r3, #0]
 8009f5a:	4013      	ands	r3, r2
 8009f5c:	2b00      	cmp	r3, #0
 8009f5e:	d019      	beq.n	8009f94 <vPortFree+0xb0>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 8009f60:	693b      	ldr	r3, [r7, #16]
 8009f62:	681b      	ldr	r3, [r3, #0]
 8009f64:	2b00      	cmp	r3, #0
 8009f66:	d115      	bne.n	8009f94 <vPortFree+0xb0>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 8009f68:	693b      	ldr	r3, [r7, #16]
 8009f6a:	685a      	ldr	r2, [r3, #4]
 8009f6c:	4b0b      	ldr	r3, [pc, #44]	@ (8009f9c <vPortFree+0xb8>)
 8009f6e:	681b      	ldr	r3, [r3, #0]
 8009f70:	43db      	mvns	r3, r3
 8009f72:	401a      	ands	r2, r3
 8009f74:	693b      	ldr	r3, [r7, #16]
 8009f76:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 8009f78:	f7fe fc66 	bl	8008848 <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 8009f7c:	693b      	ldr	r3, [r7, #16]
 8009f7e:	685a      	ldr	r2, [r3, #4]
 8009f80:	4b07      	ldr	r3, [pc, #28]	@ (8009fa0 <vPortFree+0xbc>)
 8009f82:	681b      	ldr	r3, [r3, #0]
 8009f84:	4413      	add	r3, r2
 8009f86:	4a06      	ldr	r2, [pc, #24]	@ (8009fa0 <vPortFree+0xbc>)
 8009f88:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 8009f8a:	6938      	ldr	r0, [r7, #16]
 8009f8c:	f000 f86c 	bl	800a068 <prvInsertBlockIntoFreeList>
				}
				( void ) xTaskResumeAll();
 8009f90:	f7fe fc68 	bl	8008864 <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 8009f94:	bf00      	nop
 8009f96:	3718      	adds	r7, #24
 8009f98:	46bd      	mov	sp, r7
 8009f9a:	bd80      	pop	{r7, pc}
 8009f9c:	20041e98 	.word	0x20041e98
 8009fa0:	20041e90 	.word	0x20041e90

08009fa4 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 8009fa4:	b480      	push	{r7}
 8009fa6:	b085      	sub	sp, #20
 8009fa8:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 8009faa:	f44f 5370 	mov.w	r3, #15360	@ 0x3c00
 8009fae:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 8009fb0:	4b27      	ldr	r3, [pc, #156]	@ (800a050 <prvHeapInit+0xac>)
 8009fb2:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 8009fb4:	68fb      	ldr	r3, [r7, #12]
 8009fb6:	f003 0307 	and.w	r3, r3, #7
 8009fba:	2b00      	cmp	r3, #0
 8009fbc:	d00c      	beq.n	8009fd8 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 8009fbe:	68fb      	ldr	r3, [r7, #12]
 8009fc0:	3307      	adds	r3, #7
 8009fc2:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8009fc4:	68fb      	ldr	r3, [r7, #12]
 8009fc6:	f023 0307 	bic.w	r3, r3, #7
 8009fca:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 8009fcc:	68ba      	ldr	r2, [r7, #8]
 8009fce:	68fb      	ldr	r3, [r7, #12]
 8009fd0:	1ad3      	subs	r3, r2, r3
 8009fd2:	4a1f      	ldr	r2, [pc, #124]	@ (800a050 <prvHeapInit+0xac>)
 8009fd4:	4413      	add	r3, r2
 8009fd6:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 8009fd8:	68fb      	ldr	r3, [r7, #12]
 8009fda:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 8009fdc:	4a1d      	ldr	r2, [pc, #116]	@ (800a054 <prvHeapInit+0xb0>)
 8009fde:	687b      	ldr	r3, [r7, #4]
 8009fe0:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 8009fe2:	4b1c      	ldr	r3, [pc, #112]	@ (800a054 <prvHeapInit+0xb0>)
 8009fe4:	2200      	movs	r2, #0
 8009fe6:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 8009fe8:	687b      	ldr	r3, [r7, #4]
 8009fea:	68ba      	ldr	r2, [r7, #8]
 8009fec:	4413      	add	r3, r2
 8009fee:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 8009ff0:	2208      	movs	r2, #8
 8009ff2:	68fb      	ldr	r3, [r7, #12]
 8009ff4:	1a9b      	subs	r3, r3, r2
 8009ff6:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8009ff8:	68fb      	ldr	r3, [r7, #12]
 8009ffa:	f023 0307 	bic.w	r3, r3, #7
 8009ffe:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 800a000:	68fb      	ldr	r3, [r7, #12]
 800a002:	4a15      	ldr	r2, [pc, #84]	@ (800a058 <prvHeapInit+0xb4>)
 800a004:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 800a006:	4b14      	ldr	r3, [pc, #80]	@ (800a058 <prvHeapInit+0xb4>)
 800a008:	681b      	ldr	r3, [r3, #0]
 800a00a:	2200      	movs	r2, #0
 800a00c:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 800a00e:	4b12      	ldr	r3, [pc, #72]	@ (800a058 <prvHeapInit+0xb4>)
 800a010:	681b      	ldr	r3, [r3, #0]
 800a012:	2200      	movs	r2, #0
 800a014:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 800a016:	687b      	ldr	r3, [r7, #4]
 800a018:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 800a01a:	683b      	ldr	r3, [r7, #0]
 800a01c:	68fa      	ldr	r2, [r7, #12]
 800a01e:	1ad2      	subs	r2, r2, r3
 800a020:	683b      	ldr	r3, [r7, #0]
 800a022:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 800a024:	4b0c      	ldr	r3, [pc, #48]	@ (800a058 <prvHeapInit+0xb4>)
 800a026:	681a      	ldr	r2, [r3, #0]
 800a028:	683b      	ldr	r3, [r7, #0]
 800a02a:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 800a02c:	683b      	ldr	r3, [r7, #0]
 800a02e:	685b      	ldr	r3, [r3, #4]
 800a030:	4a0a      	ldr	r2, [pc, #40]	@ (800a05c <prvHeapInit+0xb8>)
 800a032:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 800a034:	683b      	ldr	r3, [r7, #0]
 800a036:	685b      	ldr	r3, [r3, #4]
 800a038:	4a09      	ldr	r2, [pc, #36]	@ (800a060 <prvHeapInit+0xbc>)
 800a03a:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 800a03c:	4b09      	ldr	r3, [pc, #36]	@ (800a064 <prvHeapInit+0xc0>)
 800a03e:	f04f 4200 	mov.w	r2, #2147483648	@ 0x80000000
 800a042:	601a      	str	r2, [r3, #0]
}
 800a044:	bf00      	nop
 800a046:	3714      	adds	r7, #20
 800a048:	46bd      	mov	sp, r7
 800a04a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a04e:	4770      	bx	lr
 800a050:	2003e284 	.word	0x2003e284
 800a054:	20041e84 	.word	0x20041e84
 800a058:	20041e8c 	.word	0x20041e8c
 800a05c:	20041e94 	.word	0x20041e94
 800a060:	20041e90 	.word	0x20041e90
 800a064:	20041e98 	.word	0x20041e98

0800a068 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 800a068:	b480      	push	{r7}
 800a06a:	b085      	sub	sp, #20
 800a06c:	af00      	add	r7, sp, #0
 800a06e:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 800a070:	4b28      	ldr	r3, [pc, #160]	@ (800a114 <prvInsertBlockIntoFreeList+0xac>)
 800a072:	60fb      	str	r3, [r7, #12]
 800a074:	e002      	b.n	800a07c <prvInsertBlockIntoFreeList+0x14>
 800a076:	68fb      	ldr	r3, [r7, #12]
 800a078:	681b      	ldr	r3, [r3, #0]
 800a07a:	60fb      	str	r3, [r7, #12]
 800a07c:	68fb      	ldr	r3, [r7, #12]
 800a07e:	681b      	ldr	r3, [r3, #0]
 800a080:	687a      	ldr	r2, [r7, #4]
 800a082:	429a      	cmp	r2, r3
 800a084:	d8f7      	bhi.n	800a076 <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 800a086:	68fb      	ldr	r3, [r7, #12]
 800a088:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 800a08a:	68fb      	ldr	r3, [r7, #12]
 800a08c:	685b      	ldr	r3, [r3, #4]
 800a08e:	68ba      	ldr	r2, [r7, #8]
 800a090:	4413      	add	r3, r2
 800a092:	687a      	ldr	r2, [r7, #4]
 800a094:	429a      	cmp	r2, r3
 800a096:	d108      	bne.n	800a0aa <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 800a098:	68fb      	ldr	r3, [r7, #12]
 800a09a:	685a      	ldr	r2, [r3, #4]
 800a09c:	687b      	ldr	r3, [r7, #4]
 800a09e:	685b      	ldr	r3, [r3, #4]
 800a0a0:	441a      	add	r2, r3
 800a0a2:	68fb      	ldr	r3, [r7, #12]
 800a0a4:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 800a0a6:	68fb      	ldr	r3, [r7, #12]
 800a0a8:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 800a0aa:	687b      	ldr	r3, [r7, #4]
 800a0ac:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 800a0ae:	687b      	ldr	r3, [r7, #4]
 800a0b0:	685b      	ldr	r3, [r3, #4]
 800a0b2:	68ba      	ldr	r2, [r7, #8]
 800a0b4:	441a      	add	r2, r3
 800a0b6:	68fb      	ldr	r3, [r7, #12]
 800a0b8:	681b      	ldr	r3, [r3, #0]
 800a0ba:	429a      	cmp	r2, r3
 800a0bc:	d118      	bne.n	800a0f0 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 800a0be:	68fb      	ldr	r3, [r7, #12]
 800a0c0:	681a      	ldr	r2, [r3, #0]
 800a0c2:	4b15      	ldr	r3, [pc, #84]	@ (800a118 <prvInsertBlockIntoFreeList+0xb0>)
 800a0c4:	681b      	ldr	r3, [r3, #0]
 800a0c6:	429a      	cmp	r2, r3
 800a0c8:	d00d      	beq.n	800a0e6 <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 800a0ca:	687b      	ldr	r3, [r7, #4]
 800a0cc:	685a      	ldr	r2, [r3, #4]
 800a0ce:	68fb      	ldr	r3, [r7, #12]
 800a0d0:	681b      	ldr	r3, [r3, #0]
 800a0d2:	685b      	ldr	r3, [r3, #4]
 800a0d4:	441a      	add	r2, r3
 800a0d6:	687b      	ldr	r3, [r7, #4]
 800a0d8:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 800a0da:	68fb      	ldr	r3, [r7, #12]
 800a0dc:	681b      	ldr	r3, [r3, #0]
 800a0de:	681a      	ldr	r2, [r3, #0]
 800a0e0:	687b      	ldr	r3, [r7, #4]
 800a0e2:	601a      	str	r2, [r3, #0]
 800a0e4:	e008      	b.n	800a0f8 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 800a0e6:	4b0c      	ldr	r3, [pc, #48]	@ (800a118 <prvInsertBlockIntoFreeList+0xb0>)
 800a0e8:	681a      	ldr	r2, [r3, #0]
 800a0ea:	687b      	ldr	r3, [r7, #4]
 800a0ec:	601a      	str	r2, [r3, #0]
 800a0ee:	e003      	b.n	800a0f8 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 800a0f0:	68fb      	ldr	r3, [r7, #12]
 800a0f2:	681a      	ldr	r2, [r3, #0]
 800a0f4:	687b      	ldr	r3, [r7, #4]
 800a0f6:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 800a0f8:	68fa      	ldr	r2, [r7, #12]
 800a0fa:	687b      	ldr	r3, [r7, #4]
 800a0fc:	429a      	cmp	r2, r3
 800a0fe:	d002      	beq.n	800a106 <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 800a100:	68fb      	ldr	r3, [r7, #12]
 800a102:	687a      	ldr	r2, [r7, #4]
 800a104:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800a106:	bf00      	nop
 800a108:	3714      	adds	r7, #20
 800a10a:	46bd      	mov	sp, r7
 800a10c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a110:	4770      	bx	lr
 800a112:	bf00      	nop
 800a114:	20041e84 	.word	0x20041e84
 800a118:	20041e8c 	.word	0x20041e8c

0800a11c <ai_log_err>:

static ai_buffer* ai_input;
static ai_buffer* ai_output;

static void ai_log_err(const ai_error err, const char *fct)
{
 800a11c:	b580      	push	{r7, lr}
 800a11e:	b082      	sub	sp, #8
 800a120:	af00      	add	r7, sp, #0
 800a122:	6078      	str	r0, [r7, #4]
 800a124:	6039      	str	r1, [r7, #0]
  /* USER CODE BEGIN log */
  if (fct)
 800a126:	683b      	ldr	r3, [r7, #0]
 800a128:	2b00      	cmp	r3, #0
 800a12a:	d009      	beq.n	800a140 <ai_log_err+0x24>
    printf("TEMPLATE - Error (%s) - type=0x%02x code=0x%02x\r\n", fct,
        err.type, err.code);
 800a12c:	793b      	ldrb	r3, [r7, #4]
    printf("TEMPLATE - Error (%s) - type=0x%02x code=0x%02x\r\n", fct,
 800a12e:	461a      	mov	r2, r3
        err.type, err.code);
 800a130:	687b      	ldr	r3, [r7, #4]
 800a132:	f3c3 2317 	ubfx	r3, r3, #8, #24
    printf("TEMPLATE - Error (%s) - type=0x%02x code=0x%02x\r\n", fct,
 800a136:	6839      	ldr	r1, [r7, #0]
 800a138:	4807      	ldr	r0, [pc, #28]	@ (800a158 <ai_log_err+0x3c>)
 800a13a:	f005 fec3 	bl	800fec4 <iprintf>
 800a13e:	e009      	b.n	800a154 <ai_log_err+0x38>
  else
    printf("TEMPLATE - Error - type=0x%02x code=0x%02x\r\n", err.type, err.code);
 800a140:	793b      	ldrb	r3, [r7, #4]
 800a142:	4619      	mov	r1, r3
 800a144:	687b      	ldr	r3, [r7, #4]
 800a146:	f3c3 2317 	ubfx	r3, r3, #8, #24
 800a14a:	461a      	mov	r2, r3
 800a14c:	4803      	ldr	r0, [pc, #12]	@ (800a15c <ai_log_err+0x40>)
 800a14e:	f005 feb9 	bl	800fec4 <iprintf>

  do {} while (1);
 800a152:	bf00      	nop
 800a154:	bf00      	nop
 800a156:	e7fd      	b.n	800a154 <ai_log_err+0x38>
 800a158:	08010ff8 	.word	0x08010ff8
 800a15c:	0801102c 	.word	0x0801102c

0800a160 <ai_boostrap>:
  /* USER CODE END log */
}

static int ai_boostrap(ai_handle *act_addr)
{
 800a160:	b580      	push	{r7, lr}
 800a162:	b086      	sub	sp, #24
 800a164:	af00      	add	r7, sp, #0
 800a166:	6078      	str	r0, [r7, #4]
  ai_error err;

  /* Create and initialize an instance of the model */
  err = ai_network_create_and_init(&network, act_addr, NULL);
 800a168:	2200      	movs	r2, #0
 800a16a:	6879      	ldr	r1, [r7, #4]
 800a16c:	4828      	ldr	r0, [pc, #160]	@ (800a210 <ai_boostrap+0xb0>)
 800a16e:	f000 fae7 	bl	800a740 <ai_network_create_and_init>
 800a172:	4603      	mov	r3, r0
 800a174:	60fb      	str	r3, [r7, #12]
  if (err.type != AI_ERROR_NONE) {
 800a176:	7b3b      	ldrb	r3, [r7, #12]
 800a178:	2b00      	cmp	r3, #0
 800a17a:	d006      	beq.n	800a18a <ai_boostrap+0x2a>
    ai_log_err(err, "ai_network_create_and_init");
 800a17c:	4925      	ldr	r1, [pc, #148]	@ (800a214 <ai_boostrap+0xb4>)
 800a17e:	68f8      	ldr	r0, [r7, #12]
 800a180:	f7ff ffcc 	bl	800a11c <ai_log_err>
    return -1;
 800a184:	f04f 33ff 	mov.w	r3, #4294967295
 800a188:	e03e      	b.n	800a208 <ai_boostrap+0xa8>
  }

  ai_input = ai_network_inputs_get(network, NULL);
 800a18a:	4b21      	ldr	r3, [pc, #132]	@ (800a210 <ai_boostrap+0xb0>)
 800a18c:	681b      	ldr	r3, [r3, #0]
 800a18e:	2100      	movs	r1, #0
 800a190:	4618      	mov	r0, r3
 800a192:	f000 fb53 	bl	800a83c <ai_network_inputs_get>
 800a196:	4603      	mov	r3, r0
 800a198:	4a1f      	ldr	r2, [pc, #124]	@ (800a218 <ai_boostrap+0xb8>)
 800a19a:	6013      	str	r3, [r2, #0]
  ai_output = ai_network_outputs_get(network, NULL);
 800a19c:	4b1c      	ldr	r3, [pc, #112]	@ (800a210 <ai_boostrap+0xb0>)
 800a19e:	681b      	ldr	r3, [r3, #0]
 800a1a0:	2100      	movs	r1, #0
 800a1a2:	4618      	mov	r0, r3
 800a1a4:	f000 fb64 	bl	800a870 <ai_network_outputs_get>
 800a1a8:	4603      	mov	r3, r0
 800a1aa:	4a1c      	ldr	r2, [pc, #112]	@ (800a21c <ai_boostrap+0xbc>)
 800a1ac:	6013      	str	r3, [r2, #0]

#if defined(AI_NETWORK_INPUTS_IN_ACTIVATIONS)
  /*  In the case where "--allocate-inputs" option is used, memory buffer can be
   *  used from the activations buffer. This is not mandatory.
   */
  for (int idx=0; idx < AI_NETWORK_IN_NUM; idx++) {
 800a1ae:	2300      	movs	r3, #0
 800a1b0:	617b      	str	r3, [r7, #20]
 800a1b2:	e00f      	b.n	800a1d4 <ai_boostrap+0x74>
	data_ins[idx] = ai_input[idx].data;
 800a1b4:	4b18      	ldr	r3, [pc, #96]	@ (800a218 <ai_boostrap+0xb8>)
 800a1b6:	6819      	ldr	r1, [r3, #0]
 800a1b8:	697a      	ldr	r2, [r7, #20]
 800a1ba:	4613      	mov	r3, r2
 800a1bc:	00db      	lsls	r3, r3, #3
 800a1be:	1a9b      	subs	r3, r3, r2
 800a1c0:	009b      	lsls	r3, r3, #2
 800a1c2:	440b      	add	r3, r1
 800a1c4:	685a      	ldr	r2, [r3, #4]
 800a1c6:	4916      	ldr	r1, [pc, #88]	@ (800a220 <ai_boostrap+0xc0>)
 800a1c8:	697b      	ldr	r3, [r7, #20]
 800a1ca:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  for (int idx=0; idx < AI_NETWORK_IN_NUM; idx++) {
 800a1ce:	697b      	ldr	r3, [r7, #20]
 800a1d0:	3301      	adds	r3, #1
 800a1d2:	617b      	str	r3, [r7, #20]
 800a1d4:	697b      	ldr	r3, [r7, #20]
 800a1d6:	2b00      	cmp	r3, #0
 800a1d8:	ddec      	ble.n	800a1b4 <ai_boostrap+0x54>

#if defined(AI_NETWORK_OUTPUTS_IN_ACTIVATIONS)
  /*  In the case where "--allocate-outputs" option is used, memory buffer can be
   *  used from the activations buffer. This is no mandatory.
   */
  for (int idx=0; idx < AI_NETWORK_OUT_NUM; idx++) {
 800a1da:	2300      	movs	r3, #0
 800a1dc:	613b      	str	r3, [r7, #16]
 800a1de:	e00f      	b.n	800a200 <ai_boostrap+0xa0>
	data_outs[idx] = ai_output[idx].data;
 800a1e0:	4b0e      	ldr	r3, [pc, #56]	@ (800a21c <ai_boostrap+0xbc>)
 800a1e2:	6819      	ldr	r1, [r3, #0]
 800a1e4:	693a      	ldr	r2, [r7, #16]
 800a1e6:	4613      	mov	r3, r2
 800a1e8:	00db      	lsls	r3, r3, #3
 800a1ea:	1a9b      	subs	r3, r3, r2
 800a1ec:	009b      	lsls	r3, r3, #2
 800a1ee:	440b      	add	r3, r1
 800a1f0:	685a      	ldr	r2, [r3, #4]
 800a1f2:	490c      	ldr	r1, [pc, #48]	@ (800a224 <ai_boostrap+0xc4>)
 800a1f4:	693b      	ldr	r3, [r7, #16]
 800a1f6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  for (int idx=0; idx < AI_NETWORK_OUT_NUM; idx++) {
 800a1fa:	693b      	ldr	r3, [r7, #16]
 800a1fc:	3301      	adds	r3, #1
 800a1fe:	613b      	str	r3, [r7, #16]
 800a200:	693b      	ldr	r3, [r7, #16]
 800a202:	2b00      	cmp	r3, #0
 800a204:	ddec      	ble.n	800a1e0 <ai_boostrap+0x80>
  for (int idx=0; idx < AI_NETWORK_OUT_NUM; idx++) {
	ai_output[idx].data = data_outs[idx];
  }
#endif

  return 0;
 800a206:	2300      	movs	r3, #0
}
 800a208:	4618      	mov	r0, r3
 800a20a:	3718      	adds	r7, #24
 800a20c:	46bd      	mov	sp, r7
 800a20e:	bd80      	pop	{r7, pc}
 800a210:	20043c80 	.word	0x20043c80
 800a214:	0801105c 	.word	0x0801105c
 800a218:	20043c84 	.word	0x20043c84
 800a21c:	20043c88 	.word	0x20043c88
 800a220:	20041e9c 	.word	0x20041e9c
 800a224:	20041ea0 	.word	0x20041ea0

0800a228 <ai_run>:

static int ai_run(void)
{
 800a228:	b580      	push	{r7, lr}
 800a22a:	b082      	sub	sp, #8
 800a22c:	af00      	add	r7, sp, #0
  ai_i32 batch;

  batch = ai_network_run(network, ai_input, ai_output);
 800a22e:	4b0f      	ldr	r3, [pc, #60]	@ (800a26c <ai_run+0x44>)
 800a230:	681b      	ldr	r3, [r3, #0]
 800a232:	4a0f      	ldr	r2, [pc, #60]	@ (800a270 <ai_run+0x48>)
 800a234:	6811      	ldr	r1, [r2, #0]
 800a236:	4a0f      	ldr	r2, [pc, #60]	@ (800a274 <ai_run+0x4c>)
 800a238:	6812      	ldr	r2, [r2, #0]
 800a23a:	4618      	mov	r0, r3
 800a23c:	f000 fb6e 	bl	800a91c <ai_network_run>
 800a240:	6078      	str	r0, [r7, #4]
  if (batch != 1) {
 800a242:	687b      	ldr	r3, [r7, #4]
 800a244:	2b01      	cmp	r3, #1
 800a246:	d00c      	beq.n	800a262 <ai_run+0x3a>
    ai_log_err(ai_network_get_error(network),
 800a248:	4b08      	ldr	r3, [pc, #32]	@ (800a26c <ai_run+0x44>)
 800a24a:	681b      	ldr	r3, [r3, #0]
 800a24c:	4618      	mov	r0, r3
 800a24e:	f000 fa55 	bl	800a6fc <ai_network_get_error>
 800a252:	4603      	mov	r3, r0
 800a254:	4908      	ldr	r1, [pc, #32]	@ (800a278 <ai_run+0x50>)
 800a256:	4618      	mov	r0, r3
 800a258:	f7ff ff60 	bl	800a11c <ai_log_err>
        "ai_network_run");
    return -1;
 800a25c:	f04f 33ff 	mov.w	r3, #4294967295
 800a260:	e000      	b.n	800a264 <ai_run+0x3c>
  }

  return 0;
 800a262:	2300      	movs	r3, #0
}
 800a264:	4618      	mov	r0, r3
 800a266:	3708      	adds	r7, #8
 800a268:	46bd      	mov	sp, r7
 800a26a:	bd80      	pop	{r7, pc}
 800a26c:	20043c80 	.word	0x20043c80
 800a270:	20043c84 	.word	0x20043c84
 800a274:	20043c88 	.word	0x20043c88
 800a278:	08011078 	.word	0x08011078

0800a27c <acquire_and_process_data>:
extern int8_t image_buffer[28 * 28];
extern uint8_t player_guess;
extern  UART_HandleTypeDef huart3;

int acquire_and_process_data(ai_i8* data[])
{
 800a27c:	b580      	push	{r7, lr}
 800a27e:	b084      	sub	sp, #16
 800a280:	af00      	add	r7, sp, #0
 800a282:	6078      	str	r0, [r7, #4]

	  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_0, 1);
 800a284:	2201      	movs	r2, #1
 800a286:	2101      	movs	r1, #1
 800a288:	4810      	ldr	r0, [pc, #64]	@ (800a2cc <acquire_and_process_data+0x50>)
 800a28a:	f7f8 fe5b 	bl	8002f44 <HAL_GPIO_WritePin>


	  for (int i = 0; i < 28 * 28; i++) {
 800a28e:	2300      	movs	r3, #0
 800a290:	60fb      	str	r3, [r7, #12]
 800a292:	e00c      	b.n	800a2ae <acquire_and_process_data+0x32>

	     ((int8_t**)data)[0][i] = (int8_t)image_buffer[i];
 800a294:	687b      	ldr	r3, [r7, #4]
 800a296:	681a      	ldr	r2, [r3, #0]
 800a298:	68fb      	ldr	r3, [r7, #12]
 800a29a:	4413      	add	r3, r2
 800a29c:	490c      	ldr	r1, [pc, #48]	@ (800a2d0 <acquire_and_process_data+0x54>)
 800a29e:	68fa      	ldr	r2, [r7, #12]
 800a2a0:	440a      	add	r2, r1
 800a2a2:	f992 2000 	ldrsb.w	r2, [r2]
 800a2a6:	701a      	strb	r2, [r3, #0]
	  for (int i = 0; i < 28 * 28; i++) {
 800a2a8:	68fb      	ldr	r3, [r7, #12]
 800a2aa:	3301      	adds	r3, #1
 800a2ac:	60fb      	str	r3, [r7, #12]
 800a2ae:	68fb      	ldr	r3, [r7, #12]
 800a2b0:	f5b3 7f44 	cmp.w	r3, #784	@ 0x310
 800a2b4:	dbee      	blt.n	800a294 <acquire_and_process_data+0x18>

	  }

	  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_0, 0);
 800a2b6:	2200      	movs	r2, #0
 800a2b8:	2101      	movs	r1, #1
 800a2ba:	4804      	ldr	r0, [pc, #16]	@ (800a2cc <acquire_and_process_data+0x50>)
 800a2bc:	f7f8 fe42 	bl	8002f44 <HAL_GPIO_WritePin>

  return 0;
 800a2c0:	2300      	movs	r3, #0
}
 800a2c2:	4618      	mov	r0, r3
 800a2c4:	3710      	adds	r7, #16
 800a2c6:	46bd      	mov	sp, r7
 800a2c8:	bd80      	pop	{r7, pc}
 800a2ca:	bf00      	nop
 800a2cc:	40020400 	.word	0x40020400
 800a2d0:	2003c708 	.word	0x2003c708

0800a2d4 <post_process>:

int post_process(ai_i8* data[])
{
 800a2d4:	b580      	push	{r7, lr}
 800a2d6:	b08a      	sub	sp, #40	@ 0x28
 800a2d8:	af00      	add	r7, sp, #0
 800a2da:	6078      	str	r0, [r7, #4]

	HAL_GPIO_WritePin(GPIOB, GPIO_PIN_7, 1);
 800a2dc:	2201      	movs	r2, #1
 800a2de:	2180      	movs	r1, #128	@ 0x80
 800a2e0:	4825      	ldr	r0, [pc, #148]	@ (800a378 <post_process+0xa4>)
 800a2e2:	f7f8 fe2f 	bl	8002f44 <HAL_GPIO_WritePin>

		    int8_t *output = data[0];
 800a2e6:	687b      	ldr	r3, [r7, #4]
 800a2e8:	681b      	ldr	r3, [r3, #0]
 800a2ea:	61bb      	str	r3, [r7, #24]
		    float output_zero_point = -128.0f;
 800a2ec:	f04f 4343 	mov.w	r3, #3271557120	@ 0xc3000000
 800a2f0:	617b      	str	r3, [r7, #20]
		    float output_scale = 0.00390625f;
 800a2f2:	f04f 536e 	mov.w	r3, #998244352	@ 0x3b800000
 800a2f6:	613b      	str	r3, [r7, #16]

		    float max_prob = -128.0f;
 800a2f8:	f04f 4343 	mov.w	r3, #3271557120	@ 0xc3000000
 800a2fc:	627b      	str	r3, [r7, #36]	@ 0x24
		    int predicted_class = -1;
 800a2fe:	f04f 33ff 	mov.w	r3, #4294967295
 800a302:	623b      	str	r3, [r7, #32]

		    for (int i = 0; i < 10; i++) {
 800a304:	2300      	movs	r3, #0
 800a306:	61fb      	str	r3, [r7, #28]
 800a308:	e022      	b.n	800a350 <post_process+0x7c>
		        float output_float = ((float)output[i] - output_zero_point) * output_scale;
 800a30a:	69fb      	ldr	r3, [r7, #28]
 800a30c:	69ba      	ldr	r2, [r7, #24]
 800a30e:	4413      	add	r3, r2
 800a310:	f993 3000 	ldrsb.w	r3, [r3]
 800a314:	ee07 3a90 	vmov	s15, r3
 800a318:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 800a31c:	edd7 7a05 	vldr	s15, [r7, #20]
 800a320:	ee77 7a67 	vsub.f32	s15, s14, s15
 800a324:	ed97 7a04 	vldr	s14, [r7, #16]
 800a328:	ee67 7a27 	vmul.f32	s15, s14, s15
 800a32c:	edc7 7a02 	vstr	s15, [r7, #8]

		        	if (output_float > max_prob) {
 800a330:	ed97 7a02 	vldr	s14, [r7, #8]
 800a334:	edd7 7a09 	vldr	s15, [r7, #36]	@ 0x24
 800a338:	eeb4 7ae7 	vcmpe.f32	s14, s15
 800a33c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800a340:	dd03      	ble.n	800a34a <post_process+0x76>
		        	max_prob = output_float;
 800a342:	68bb      	ldr	r3, [r7, #8]
 800a344:	627b      	str	r3, [r7, #36]	@ 0x24
		            predicted_class = i;
 800a346:	69fb      	ldr	r3, [r7, #28]
 800a348:	623b      	str	r3, [r7, #32]
		    for (int i = 0; i < 10; i++) {
 800a34a:	69fb      	ldr	r3, [r7, #28]
 800a34c:	3301      	adds	r3, #1
 800a34e:	61fb      	str	r3, [r7, #28]
 800a350:	69fb      	ldr	r3, [r7, #28]
 800a352:	2b09      	cmp	r3, #9
 800a354:	ddd9      	ble.n	800a30a <post_process+0x36>
		        	}

		    }

		    uint8_t send_data = (uint8_t)predicted_class;
 800a356:	6a3b      	ldr	r3, [r7, #32]
 800a358:	73fb      	strb	r3, [r7, #15]
		    player_guess = (uint8_t)predicted_class;
 800a35a:	6a3b      	ldr	r3, [r7, #32]
 800a35c:	b2da      	uxtb	r2, r3
 800a35e:	4b07      	ldr	r3, [pc, #28]	@ (800a37c <post_process+0xa8>)
 800a360:	701a      	strb	r2, [r3, #0]

	//	    xQueueSend(xQueue_DigitResult, &predicted_class, portMAX_DELAY);
	//	    player_guess = predicted_class;


		    HAL_GPIO_WritePin(GPIOB, GPIO_PIN_7, 0);
 800a362:	2200      	movs	r2, #0
 800a364:	2180      	movs	r1, #128	@ 0x80
 800a366:	4804      	ldr	r0, [pc, #16]	@ (800a378 <post_process+0xa4>)
 800a368:	f7f8 fdec 	bl	8002f44 <HAL_GPIO_WritePin>
 return 0;
 800a36c:	2300      	movs	r3, #0
}
 800a36e:	4618      	mov	r0, r3
 800a370:	3728      	adds	r7, #40	@ 0x28
 800a372:	46bd      	mov	sp, r7
 800a374:	bd80      	pop	{r7, pc}
 800a376:	bf00      	nop
 800a378:	40020400 	.word	0x40020400
 800a37c:	20000000 	.word	0x20000000

0800a380 <MX_X_CUBE_AI_Init>:
/* USER CODE END 2 */

/* Entry points --------------------------------------------------------------*/

void MX_X_CUBE_AI_Init(void)
{
 800a380:	b580      	push	{r7, lr}
 800a382:	af00      	add	r7, sp, #0
    /* USER CODE BEGIN 5 */
  //printf("\r\nTEMPLATE - initialization\r\n");

  ai_boostrap(data_activations0);
 800a384:	4802      	ldr	r0, [pc, #8]	@ (800a390 <MX_X_CUBE_AI_Init+0x10>)
 800a386:	f7ff feeb 	bl	800a160 <ai_boostrap>
    /* USER CODE END 5 */
}
 800a38a:	bf00      	nop
 800a38c:	bd80      	pop	{r7, pc}
 800a38e:	bf00      	nop
 800a390:	2003bb10 	.word	0x2003bb10

0800a394 <MX_X_CUBE_AI_Process>:

void MX_X_CUBE_AI_Process(void)
{
 800a394:	b580      	push	{r7, lr}
 800a396:	b082      	sub	sp, #8
 800a398:	af00      	add	r7, sp, #0
    /* USER CODE BEGIN 6 */
  int res = -1;
 800a39a:	f04f 33ff 	mov.w	r3, #4294967295
 800a39e:	607b      	str	r3, [r7, #4]

  //printf("TEMPLATE - run - main loop\r\n");

  if (network) {
 800a3a0:	4b13      	ldr	r3, [pc, #76]	@ (800a3f0 <MX_X_CUBE_AI_Process+0x5c>)
 800a3a2:	681b      	ldr	r3, [r3, #0]
 800a3a4:	2b00      	cmp	r3, #0
 800a3a6:	d010      	beq.n	800a3ca <MX_X_CUBE_AI_Process+0x36>

//    do {
      /* 1 - acquire and pre-process input data */
      res = acquire_and_process_data(data_ins);
 800a3a8:	4812      	ldr	r0, [pc, #72]	@ (800a3f4 <MX_X_CUBE_AI_Process+0x60>)
 800a3aa:	f7ff ff67 	bl	800a27c <acquire_and_process_data>
 800a3ae:	6078      	str	r0, [r7, #4]
      /* 2 - process the data - call inference engine */
      if (res == 0)
 800a3b0:	687b      	ldr	r3, [r7, #4]
 800a3b2:	2b00      	cmp	r3, #0
 800a3b4:	d102      	bne.n	800a3bc <MX_X_CUBE_AI_Process+0x28>
        res = ai_run();
 800a3b6:	f7ff ff37 	bl	800a228 <ai_run>
 800a3ba:	6078      	str	r0, [r7, #4]
      /* 3- post-process the predictions */
      if (res == 0)
 800a3bc:	687b      	ldr	r3, [r7, #4]
 800a3be:	2b00      	cmp	r3, #0
 800a3c0:	d103      	bne.n	800a3ca <MX_X_CUBE_AI_Process+0x36>
        res = post_process(data_outs);
 800a3c2:	480d      	ldr	r0, [pc, #52]	@ (800a3f8 <MX_X_CUBE_AI_Process+0x64>)
 800a3c4:	f7ff ff86 	bl	800a2d4 <post_process>
 800a3c8:	6078      	str	r0, [r7, #4]
//    } while (res==0);
  }

  if (res) {
 800a3ca:	687b      	ldr	r3, [r7, #4]
 800a3cc:	2b00      	cmp	r3, #0
 800a3ce:	d00a      	beq.n	800a3e6 <MX_X_CUBE_AI_Process+0x52>
    ai_error err = {AI_ERROR_INVALID_STATE, AI_ERROR_CODE_NETWORK};
 800a3d0:	2311      	movs	r3, #17
 800a3d2:	703b      	strb	r3, [r7, #0]
 800a3d4:	683b      	ldr	r3, [r7, #0]
 800a3d6:	2210      	movs	r2, #16
 800a3d8:	f362 231f 	bfi	r3, r2, #8, #24
 800a3dc:	603b      	str	r3, [r7, #0]
    ai_log_err(err, "Process has FAILED");
 800a3de:	4907      	ldr	r1, [pc, #28]	@ (800a3fc <MX_X_CUBE_AI_Process+0x68>)
 800a3e0:	6838      	ldr	r0, [r7, #0]
 800a3e2:	f7ff fe9b 	bl	800a11c <ai_log_err>
  }
    /* USER CODE END 6 */
}
 800a3e6:	bf00      	nop
 800a3e8:	3708      	adds	r7, #8
 800a3ea:	46bd      	mov	sp, r7
 800a3ec:	bd80      	pop	{r7, pc}
 800a3ee:	bf00      	nop
 800a3f0:	20043c80 	.word	0x20043c80
 800a3f4:	20041e9c 	.word	0x20041e9c
 800a3f8:	20041ea0 	.word	0x20041ea0
 800a3fc:	08011088 	.word	0x08011088

0800a400 <network_configure_activations>:

/******************************************************************************/
AI_DECLARE_STATIC
ai_bool network_configure_activations(
  ai_network* net_ctx, const ai_network_params* params)
{
 800a400:	b580      	push	{r7, lr}
 800a402:	b082      	sub	sp, #8
 800a404:	af00      	add	r7, sp, #0
 800a406:	6078      	str	r0, [r7, #4]
 800a408:	6039      	str	r1, [r7, #0]
  AI_ASSERT(net_ctx)

  if (ai_platform_get_activations_map(g_network_activations_map, 1, params)) {
 800a40a:	683a      	ldr	r2, [r7, #0]
 800a40c:	2101      	movs	r1, #1
 800a40e:	4850      	ldr	r0, [pc, #320]	@ (800a550 <network_configure_activations+0x150>)
 800a410:	f000 fb62 	bl	800aad8 <ai_platform_get_activations_map>
 800a414:	4603      	mov	r3, r0
 800a416:	2b00      	cmp	r3, #0
 800a418:	f000 8090 	beq.w	800a53c <network_configure_activations+0x13c>
    /* Updating activations (byte) offsets */
    
    serving_default_input_layer0_output_array.data = AI_PTR(g_network_activations_map[0] + 640);
 800a41c:	4b4c      	ldr	r3, [pc, #304]	@ (800a550 <network_configure_activations+0x150>)
 800a41e:	681b      	ldr	r3, [r3, #0]
 800a420:	f503 7320 	add.w	r3, r3, #640	@ 0x280
 800a424:	4a4b      	ldr	r2, [pc, #300]	@ (800a554 <network_configure_activations+0x154>)
 800a426:	6093      	str	r3, [r2, #8]
    serving_default_input_layer0_output_array.data_start = AI_PTR(g_network_activations_map[0] + 640);
 800a428:	4b49      	ldr	r3, [pc, #292]	@ (800a550 <network_configure_activations+0x150>)
 800a42a:	681b      	ldr	r3, [r3, #0]
 800a42c:	f503 7320 	add.w	r3, r3, #640	@ 0x280
 800a430:	4a48      	ldr	r2, [pc, #288]	@ (800a554 <network_configure_activations+0x154>)
 800a432:	60d3      	str	r3, [r2, #12]
    conv2d_0_scratch0_array.data = AI_PTR(g_network_activations_map[0] + 1424);
 800a434:	4b46      	ldr	r3, [pc, #280]	@ (800a550 <network_configure_activations+0x150>)
 800a436:	681b      	ldr	r3, [r3, #0]
 800a438:	f503 63b2 	add.w	r3, r3, #1424	@ 0x590
 800a43c:	4a46      	ldr	r2, [pc, #280]	@ (800a558 <network_configure_activations+0x158>)
 800a43e:	6093      	str	r3, [r2, #8]
    conv2d_0_scratch0_array.data_start = AI_PTR(g_network_activations_map[0] + 1424);
 800a440:	4b43      	ldr	r3, [pc, #268]	@ (800a550 <network_configure_activations+0x150>)
 800a442:	681b      	ldr	r3, [r3, #0]
 800a444:	f503 63b2 	add.w	r3, r3, #1424	@ 0x590
 800a448:	4a43      	ldr	r2, [pc, #268]	@ (800a558 <network_configure_activations+0x158>)
 800a44a:	60d3      	str	r3, [r2, #12]
    conv2d_0_scratch1_array.data = AI_PTR(g_network_activations_map[0] + 2036);
 800a44c:	4b40      	ldr	r3, [pc, #256]	@ (800a550 <network_configure_activations+0x150>)
 800a44e:	681b      	ldr	r3, [r3, #0]
 800a450:	f203 73f4 	addw	r3, r3, #2036	@ 0x7f4
 800a454:	4a41      	ldr	r2, [pc, #260]	@ (800a55c <network_configure_activations+0x15c>)
 800a456:	6093      	str	r3, [r2, #8]
    conv2d_0_scratch1_array.data_start = AI_PTR(g_network_activations_map[0] + 2036);
 800a458:	4b3d      	ldr	r3, [pc, #244]	@ (800a550 <network_configure_activations+0x150>)
 800a45a:	681b      	ldr	r3, [r3, #0]
 800a45c:	f203 73f4 	addw	r3, r3, #2036	@ 0x7f4
 800a460:	4a3e      	ldr	r2, [pc, #248]	@ (800a55c <network_configure_activations+0x15c>)
 800a462:	60d3      	str	r3, [r2, #12]
    conv2d_0_output_array.data = AI_PTR(g_network_activations_map[0] + 64);
 800a464:	4b3a      	ldr	r3, [pc, #232]	@ (800a550 <network_configure_activations+0x150>)
 800a466:	681b      	ldr	r3, [r3, #0]
 800a468:	3340      	adds	r3, #64	@ 0x40
 800a46a:	4a3d      	ldr	r2, [pc, #244]	@ (800a560 <network_configure_activations+0x160>)
 800a46c:	6093      	str	r3, [r2, #8]
    conv2d_0_output_array.data_start = AI_PTR(g_network_activations_map[0] + 64);
 800a46e:	4b38      	ldr	r3, [pc, #224]	@ (800a550 <network_configure_activations+0x150>)
 800a470:	681b      	ldr	r3, [r3, #0]
 800a472:	3340      	adds	r3, #64	@ 0x40
 800a474:	4a3a      	ldr	r2, [pc, #232]	@ (800a560 <network_configure_activations+0x160>)
 800a476:	60d3      	str	r3, [r2, #12]
    conv2d_2_scratch0_array.data = AI_PTR(g_network_activations_map[0] + 1216);
 800a478:	4b35      	ldr	r3, [pc, #212]	@ (800a550 <network_configure_activations+0x150>)
 800a47a:	681b      	ldr	r3, [r3, #0]
 800a47c:	f503 6398 	add.w	r3, r3, #1216	@ 0x4c0
 800a480:	4a38      	ldr	r2, [pc, #224]	@ (800a564 <network_configure_activations+0x164>)
 800a482:	6093      	str	r3, [r2, #8]
    conv2d_2_scratch0_array.data_start = AI_PTR(g_network_activations_map[0] + 1216);
 800a484:	4b32      	ldr	r3, [pc, #200]	@ (800a550 <network_configure_activations+0x150>)
 800a486:	681b      	ldr	r3, [r3, #0]
 800a488:	f503 6398 	add.w	r3, r3, #1216	@ 0x4c0
 800a48c:	4a35      	ldr	r2, [pc, #212]	@ (800a564 <network_configure_activations+0x164>)
 800a48e:	60d3      	str	r3, [r2, #12]
    conv2d_2_scratch1_array.data = AI_PTR(g_network_activations_map[0] + 7360);
 800a490:	4b2f      	ldr	r3, [pc, #188]	@ (800a550 <network_configure_activations+0x150>)
 800a492:	681b      	ldr	r3, [r3, #0]
 800a494:	f503 53e6 	add.w	r3, r3, #7360	@ 0x1cc0
 800a498:	4a33      	ldr	r2, [pc, #204]	@ (800a568 <network_configure_activations+0x168>)
 800a49a:	6093      	str	r3, [r2, #8]
    conv2d_2_scratch1_array.data_start = AI_PTR(g_network_activations_map[0] + 7360);
 800a49c:	4b2c      	ldr	r3, [pc, #176]	@ (800a550 <network_configure_activations+0x150>)
 800a49e:	681b      	ldr	r3, [r3, #0]
 800a4a0:	f503 53e6 	add.w	r3, r3, #7360	@ 0x1cc0
 800a4a4:	4a30      	ldr	r2, [pc, #192]	@ (800a568 <network_configure_activations+0x168>)
 800a4a6:	60d3      	str	r3, [r2, #12]
    conv2d_2_output_array.data = AI_PTR(g_network_activations_map[0] + 0);
 800a4a8:	4b29      	ldr	r3, [pc, #164]	@ (800a550 <network_configure_activations+0x150>)
 800a4aa:	681b      	ldr	r3, [r3, #0]
 800a4ac:	4a2f      	ldr	r2, [pc, #188]	@ (800a56c <network_configure_activations+0x16c>)
 800a4ae:	6093      	str	r3, [r2, #8]
    conv2d_2_output_array.data_start = AI_PTR(g_network_activations_map[0] + 0);
 800a4b0:	4b27      	ldr	r3, [pc, #156]	@ (800a550 <network_configure_activations+0x150>)
 800a4b2:	681b      	ldr	r3, [r3, #0]
 800a4b4:	4a2d      	ldr	r2, [pc, #180]	@ (800a56c <network_configure_activations+0x16c>)
 800a4b6:	60d3      	str	r3, [r2, #12]
    gemm_5_scratch0_array.data = AI_PTR(g_network_activations_map[0] + 256);
 800a4b8:	4b25      	ldr	r3, [pc, #148]	@ (800a550 <network_configure_activations+0x150>)
 800a4ba:	681b      	ldr	r3, [r3, #0]
 800a4bc:	f503 7380 	add.w	r3, r3, #256	@ 0x100
 800a4c0:	4a2b      	ldr	r2, [pc, #172]	@ (800a570 <network_configure_activations+0x170>)
 800a4c2:	6093      	str	r3, [r2, #8]
    gemm_5_scratch0_array.data_start = AI_PTR(g_network_activations_map[0] + 256);
 800a4c4:	4b22      	ldr	r3, [pc, #136]	@ (800a550 <network_configure_activations+0x150>)
 800a4c6:	681b      	ldr	r3, [r3, #0]
 800a4c8:	f503 7380 	add.w	r3, r3, #256	@ 0x100
 800a4cc:	4a28      	ldr	r2, [pc, #160]	@ (800a570 <network_configure_activations+0x170>)
 800a4ce:	60d3      	str	r3, [r2, #12]
    gemm_5_output_array.data = AI_PTR(g_network_activations_map[0] + 2048);
 800a4d0:	4b1f      	ldr	r3, [pc, #124]	@ (800a550 <network_configure_activations+0x150>)
 800a4d2:	681b      	ldr	r3, [r3, #0]
 800a4d4:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800a4d8:	4a26      	ldr	r2, [pc, #152]	@ (800a574 <network_configure_activations+0x174>)
 800a4da:	6093      	str	r3, [r2, #8]
    gemm_5_output_array.data_start = AI_PTR(g_network_activations_map[0] + 2048);
 800a4dc:	4b1c      	ldr	r3, [pc, #112]	@ (800a550 <network_configure_activations+0x150>)
 800a4de:	681b      	ldr	r3, [r3, #0]
 800a4e0:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800a4e4:	4a23      	ldr	r2, [pc, #140]	@ (800a574 <network_configure_activations+0x174>)
 800a4e6:	60d3      	str	r3, [r2, #12]
    gemm_6_scratch0_array.data = AI_PTR(g_network_activations_map[0] + 0);
 800a4e8:	4b19      	ldr	r3, [pc, #100]	@ (800a550 <network_configure_activations+0x150>)
 800a4ea:	681b      	ldr	r3, [r3, #0]
 800a4ec:	4a22      	ldr	r2, [pc, #136]	@ (800a578 <network_configure_activations+0x178>)
 800a4ee:	6093      	str	r3, [r2, #8]
    gemm_6_scratch0_array.data_start = AI_PTR(g_network_activations_map[0] + 0);
 800a4f0:	4b17      	ldr	r3, [pc, #92]	@ (800a550 <network_configure_activations+0x150>)
 800a4f2:	681b      	ldr	r3, [r3, #0]
 800a4f4:	4a20      	ldr	r2, [pc, #128]	@ (800a578 <network_configure_activations+0x178>)
 800a4f6:	60d3      	str	r3, [r2, #12]
    gemm_6_output_array.data = AI_PTR(g_network_activations_map[0] + 356);
 800a4f8:	4b15      	ldr	r3, [pc, #84]	@ (800a550 <network_configure_activations+0x150>)
 800a4fa:	681b      	ldr	r3, [r3, #0]
 800a4fc:	f503 73b2 	add.w	r3, r3, #356	@ 0x164
 800a500:	4a1e      	ldr	r2, [pc, #120]	@ (800a57c <network_configure_activations+0x17c>)
 800a502:	6093      	str	r3, [r2, #8]
    gemm_6_output_array.data_start = AI_PTR(g_network_activations_map[0] + 356);
 800a504:	4b12      	ldr	r3, [pc, #72]	@ (800a550 <network_configure_activations+0x150>)
 800a506:	681b      	ldr	r3, [r3, #0]
 800a508:	f503 73b2 	add.w	r3, r3, #356	@ 0x164
 800a50c:	4a1b      	ldr	r2, [pc, #108]	@ (800a57c <network_configure_activations+0x17c>)
 800a50e:	60d3      	str	r3, [r2, #12]
    nl_7_scratch0_array.data = AI_PTR(g_network_activations_map[0] + 368);
 800a510:	4b0f      	ldr	r3, [pc, #60]	@ (800a550 <network_configure_activations+0x150>)
 800a512:	681b      	ldr	r3, [r3, #0]
 800a514:	f503 73b8 	add.w	r3, r3, #368	@ 0x170
 800a518:	4a19      	ldr	r2, [pc, #100]	@ (800a580 <network_configure_activations+0x180>)
 800a51a:	6093      	str	r3, [r2, #8]
    nl_7_scratch0_array.data_start = AI_PTR(g_network_activations_map[0] + 368);
 800a51c:	4b0c      	ldr	r3, [pc, #48]	@ (800a550 <network_configure_activations+0x150>)
 800a51e:	681b      	ldr	r3, [r3, #0]
 800a520:	f503 73b8 	add.w	r3, r3, #368	@ 0x170
 800a524:	4a16      	ldr	r2, [pc, #88]	@ (800a580 <network_configure_activations+0x180>)
 800a526:	60d3      	str	r3, [r2, #12]
    nl_7_output_array.data = AI_PTR(g_network_activations_map[0] + 0);
 800a528:	4b09      	ldr	r3, [pc, #36]	@ (800a550 <network_configure_activations+0x150>)
 800a52a:	681b      	ldr	r3, [r3, #0]
 800a52c:	4a15      	ldr	r2, [pc, #84]	@ (800a584 <network_configure_activations+0x184>)
 800a52e:	6093      	str	r3, [r2, #8]
    nl_7_output_array.data_start = AI_PTR(g_network_activations_map[0] + 0);
 800a530:	4b07      	ldr	r3, [pc, #28]	@ (800a550 <network_configure_activations+0x150>)
 800a532:	681b      	ldr	r3, [r3, #0]
 800a534:	4a13      	ldr	r2, [pc, #76]	@ (800a584 <network_configure_activations+0x184>)
 800a536:	60d3      	str	r3, [r2, #12]
    return true;
 800a538:	2301      	movs	r3, #1
 800a53a:	e005      	b.n	800a548 <network_configure_activations+0x148>
  }
  AI_ERROR_TRAP(net_ctx, INIT_FAILED, NETWORK_ACTIVATIONS);
 800a53c:	2213      	movs	r2, #19
 800a53e:	2130      	movs	r1, #48	@ 0x30
 800a540:	6878      	ldr	r0, [r7, #4]
 800a542:	f000 fb47 	bl	800abd4 <ai_platform_network_set_error>
  return false;
 800a546:	2300      	movs	r3, #0
}
 800a548:	4618      	mov	r0, r3
 800a54a:	3708      	adds	r7, #8
 800a54c:	46bd      	mov	sp, r7
 800a54e:	bd80      	pop	{r7, pc}
 800a550:	20043c8c 	.word	0x20043c8c
 800a554:	2003bb14 	.word	0x2003bb14
 800a558:	2003bbf4 	.word	0x2003bbf4
 800a55c:	2003bc04 	.word	0x2003bc04
 800a560:	2003bb24 	.word	0x2003bb24
 800a564:	2003bc14 	.word	0x2003bc14
 800a568:	2003bc24 	.word	0x2003bc24
 800a56c:	2003bb34 	.word	0x2003bb34
 800a570:	2003bc34 	.word	0x2003bc34
 800a574:	2003bb44 	.word	0x2003bb44
 800a578:	2003bc44 	.word	0x2003bc44
 800a57c:	2003bb54 	.word	0x2003bb54
 800a580:	2003bc54 	.word	0x2003bc54
 800a584:	2003bb64 	.word	0x2003bb64

0800a588 <network_configure_weights>:

/******************************************************************************/
AI_DECLARE_STATIC
ai_bool network_configure_weights(
  ai_network* net_ctx, const ai_network_params* params)
{
 800a588:	b580      	push	{r7, lr}
 800a58a:	b082      	sub	sp, #8
 800a58c:	af00      	add	r7, sp, #0
 800a58e:	6078      	str	r0, [r7, #4]
 800a590:	6039      	str	r1, [r7, #0]
  AI_ASSERT(net_ctx)

  if (ai_platform_get_weights_map(g_network_weights_map, 1, params)) {
 800a592:	683a      	ldr	r2, [r7, #0]
 800a594:	2101      	movs	r1, #1
 800a596:	4850      	ldr	r0, [pc, #320]	@ (800a6d8 <network_configure_weights+0x150>)
 800a598:	f000 fa46 	bl	800aa28 <ai_platform_get_weights_map>
 800a59c:	4603      	mov	r3, r0
 800a59e:	2b00      	cmp	r3, #0
 800a5a0:	f000 8090 	beq.w	800a6c4 <network_configure_weights+0x13c>
    /* Updating weights (byte) offsets */
    
    conv2d_0_weights_array.format |= AI_FMT_FLAG_CONST;
 800a5a4:	4b4d      	ldr	r3, [pc, #308]	@ (800a6dc <network_configure_weights+0x154>)
 800a5a6:	681b      	ldr	r3, [r3, #0]
 800a5a8:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 800a5ac:	4a4b      	ldr	r2, [pc, #300]	@ (800a6dc <network_configure_weights+0x154>)
 800a5ae:	6013      	str	r3, [r2, #0]
    conv2d_0_weights_array.data = AI_PTR(g_network_weights_map[0] + 0);
 800a5b0:	4b49      	ldr	r3, [pc, #292]	@ (800a6d8 <network_configure_weights+0x150>)
 800a5b2:	681b      	ldr	r3, [r3, #0]
 800a5b4:	4a49      	ldr	r2, [pc, #292]	@ (800a6dc <network_configure_weights+0x154>)
 800a5b6:	6093      	str	r3, [r2, #8]
    conv2d_0_weights_array.data_start = AI_PTR(g_network_weights_map[0] + 0);
 800a5b8:	4b47      	ldr	r3, [pc, #284]	@ (800a6d8 <network_configure_weights+0x150>)
 800a5ba:	681b      	ldr	r3, [r3, #0]
 800a5bc:	4a47      	ldr	r2, [pc, #284]	@ (800a6dc <network_configure_weights+0x154>)
 800a5be:	60d3      	str	r3, [r2, #12]
    conv2d_0_bias_array.format |= AI_FMT_FLAG_CONST;
 800a5c0:	4b47      	ldr	r3, [pc, #284]	@ (800a6e0 <network_configure_weights+0x158>)
 800a5c2:	681b      	ldr	r3, [r3, #0]
 800a5c4:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 800a5c8:	4a45      	ldr	r2, [pc, #276]	@ (800a6e0 <network_configure_weights+0x158>)
 800a5ca:	6013      	str	r3, [r2, #0]
    conv2d_0_bias_array.data = AI_PTR(g_network_weights_map[0] + 200);
 800a5cc:	4b42      	ldr	r3, [pc, #264]	@ (800a6d8 <network_configure_weights+0x150>)
 800a5ce:	681b      	ldr	r3, [r3, #0]
 800a5d0:	33c8      	adds	r3, #200	@ 0xc8
 800a5d2:	4a43      	ldr	r2, [pc, #268]	@ (800a6e0 <network_configure_weights+0x158>)
 800a5d4:	6093      	str	r3, [r2, #8]
    conv2d_0_bias_array.data_start = AI_PTR(g_network_weights_map[0] + 200);
 800a5d6:	4b40      	ldr	r3, [pc, #256]	@ (800a6d8 <network_configure_weights+0x150>)
 800a5d8:	681b      	ldr	r3, [r3, #0]
 800a5da:	33c8      	adds	r3, #200	@ 0xc8
 800a5dc:	4a40      	ldr	r2, [pc, #256]	@ (800a6e0 <network_configure_weights+0x158>)
 800a5de:	60d3      	str	r3, [r2, #12]
    conv2d_2_weights_array.format |= AI_FMT_FLAG_CONST;
 800a5e0:	4b40      	ldr	r3, [pc, #256]	@ (800a6e4 <network_configure_weights+0x15c>)
 800a5e2:	681b      	ldr	r3, [r3, #0]
 800a5e4:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 800a5e8:	4a3e      	ldr	r2, [pc, #248]	@ (800a6e4 <network_configure_weights+0x15c>)
 800a5ea:	6013      	str	r3, [r2, #0]
    conv2d_2_weights_array.data = AI_PTR(g_network_weights_map[0] + 232);
 800a5ec:	4b3a      	ldr	r3, [pc, #232]	@ (800a6d8 <network_configure_weights+0x150>)
 800a5ee:	681b      	ldr	r3, [r3, #0]
 800a5f0:	33e8      	adds	r3, #232	@ 0xe8
 800a5f2:	4a3c      	ldr	r2, [pc, #240]	@ (800a6e4 <network_configure_weights+0x15c>)
 800a5f4:	6093      	str	r3, [r2, #8]
    conv2d_2_weights_array.data_start = AI_PTR(g_network_weights_map[0] + 232);
 800a5f6:	4b38      	ldr	r3, [pc, #224]	@ (800a6d8 <network_configure_weights+0x150>)
 800a5f8:	681b      	ldr	r3, [r3, #0]
 800a5fa:	33e8      	adds	r3, #232	@ 0xe8
 800a5fc:	4a39      	ldr	r2, [pc, #228]	@ (800a6e4 <network_configure_weights+0x15c>)
 800a5fe:	60d3      	str	r3, [r2, #12]
    conv2d_2_bias_array.format |= AI_FMT_FLAG_CONST;
 800a600:	4b39      	ldr	r3, [pc, #228]	@ (800a6e8 <network_configure_weights+0x160>)
 800a602:	681b      	ldr	r3, [r3, #0]
 800a604:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 800a608:	4a37      	ldr	r2, [pc, #220]	@ (800a6e8 <network_configure_weights+0x160>)
 800a60a:	6013      	str	r3, [r2, #0]
    conv2d_2_bias_array.data = AI_PTR(g_network_weights_map[0] + 3432);
 800a60c:	4b32      	ldr	r3, [pc, #200]	@ (800a6d8 <network_configure_weights+0x150>)
 800a60e:	681b      	ldr	r3, [r3, #0]
 800a610:	f603 5368 	addw	r3, r3, #3432	@ 0xd68
 800a614:	4a34      	ldr	r2, [pc, #208]	@ (800a6e8 <network_configure_weights+0x160>)
 800a616:	6093      	str	r3, [r2, #8]
    conv2d_2_bias_array.data_start = AI_PTR(g_network_weights_map[0] + 3432);
 800a618:	4b2f      	ldr	r3, [pc, #188]	@ (800a6d8 <network_configure_weights+0x150>)
 800a61a:	681b      	ldr	r3, [r3, #0]
 800a61c:	f603 5368 	addw	r3, r3, #3432	@ 0xd68
 800a620:	4a31      	ldr	r2, [pc, #196]	@ (800a6e8 <network_configure_weights+0x160>)
 800a622:	60d3      	str	r3, [r2, #12]
    gemm_5_weights_array.format |= AI_FMT_FLAG_CONST;
 800a624:	4b31      	ldr	r3, [pc, #196]	@ (800a6ec <network_configure_weights+0x164>)
 800a626:	681b      	ldr	r3, [r3, #0]
 800a628:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 800a62c:	4a2f      	ldr	r2, [pc, #188]	@ (800a6ec <network_configure_weights+0x164>)
 800a62e:	6013      	str	r3, [r2, #0]
    gemm_5_weights_array.data = AI_PTR(g_network_weights_map[0] + 3496);
 800a630:	4b29      	ldr	r3, [pc, #164]	@ (800a6d8 <network_configure_weights+0x150>)
 800a632:	681b      	ldr	r3, [r3, #0]
 800a634:	f603 53a8 	addw	r3, r3, #3496	@ 0xda8
 800a638:	4a2c      	ldr	r2, [pc, #176]	@ (800a6ec <network_configure_weights+0x164>)
 800a63a:	6093      	str	r3, [r2, #8]
    gemm_5_weights_array.data_start = AI_PTR(g_network_weights_map[0] + 3496);
 800a63c:	4b26      	ldr	r3, [pc, #152]	@ (800a6d8 <network_configure_weights+0x150>)
 800a63e:	681b      	ldr	r3, [r3, #0]
 800a640:	f603 53a8 	addw	r3, r3, #3496	@ 0xda8
 800a644:	4a29      	ldr	r2, [pc, #164]	@ (800a6ec <network_configure_weights+0x164>)
 800a646:	60d3      	str	r3, [r2, #12]
    gemm_5_bias_array.format |= AI_FMT_FLAG_CONST;
 800a648:	4b29      	ldr	r3, [pc, #164]	@ (800a6f0 <network_configure_weights+0x168>)
 800a64a:	681b      	ldr	r3, [r3, #0]
 800a64c:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 800a650:	4a27      	ldr	r2, [pc, #156]	@ (800a6f0 <network_configure_weights+0x168>)
 800a652:	6013      	str	r3, [r2, #0]
    gemm_5_bias_array.data = AI_PTR(g_network_weights_map[0] + 36264);
 800a654:	4b20      	ldr	r3, [pc, #128]	@ (800a6d8 <network_configure_weights+0x150>)
 800a656:	681a      	ldr	r2, [r3, #0]
 800a658:	f648 53a8 	movw	r3, #36264	@ 0x8da8
 800a65c:	4413      	add	r3, r2
 800a65e:	4a24      	ldr	r2, [pc, #144]	@ (800a6f0 <network_configure_weights+0x168>)
 800a660:	6093      	str	r3, [r2, #8]
    gemm_5_bias_array.data_start = AI_PTR(g_network_weights_map[0] + 36264);
 800a662:	4b1d      	ldr	r3, [pc, #116]	@ (800a6d8 <network_configure_weights+0x150>)
 800a664:	681a      	ldr	r2, [r3, #0]
 800a666:	f648 53a8 	movw	r3, #36264	@ 0x8da8
 800a66a:	4413      	add	r3, r2
 800a66c:	4a20      	ldr	r2, [pc, #128]	@ (800a6f0 <network_configure_weights+0x168>)
 800a66e:	60d3      	str	r3, [r2, #12]
    gemm_6_weights_array.format |= AI_FMT_FLAG_CONST;
 800a670:	4b20      	ldr	r3, [pc, #128]	@ (800a6f4 <network_configure_weights+0x16c>)
 800a672:	681b      	ldr	r3, [r3, #0]
 800a674:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 800a678:	4a1e      	ldr	r2, [pc, #120]	@ (800a6f4 <network_configure_weights+0x16c>)
 800a67a:	6013      	str	r3, [r2, #0]
    gemm_6_weights_array.data = AI_PTR(g_network_weights_map[0] + 36776);
 800a67c:	4b16      	ldr	r3, [pc, #88]	@ (800a6d8 <network_configure_weights+0x150>)
 800a67e:	681a      	ldr	r2, [r3, #0]
 800a680:	f648 73a8 	movw	r3, #36776	@ 0x8fa8
 800a684:	4413      	add	r3, r2
 800a686:	4a1b      	ldr	r2, [pc, #108]	@ (800a6f4 <network_configure_weights+0x16c>)
 800a688:	6093      	str	r3, [r2, #8]
    gemm_6_weights_array.data_start = AI_PTR(g_network_weights_map[0] + 36776);
 800a68a:	4b13      	ldr	r3, [pc, #76]	@ (800a6d8 <network_configure_weights+0x150>)
 800a68c:	681a      	ldr	r2, [r3, #0]
 800a68e:	f648 73a8 	movw	r3, #36776	@ 0x8fa8
 800a692:	4413      	add	r3, r2
 800a694:	4a17      	ldr	r2, [pc, #92]	@ (800a6f4 <network_configure_weights+0x16c>)
 800a696:	60d3      	str	r3, [r2, #12]
    gemm_6_bias_array.format |= AI_FMT_FLAG_CONST;
 800a698:	4b17      	ldr	r3, [pc, #92]	@ (800a6f8 <network_configure_weights+0x170>)
 800a69a:	681b      	ldr	r3, [r3, #0]
 800a69c:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 800a6a0:	4a15      	ldr	r2, [pc, #84]	@ (800a6f8 <network_configure_weights+0x170>)
 800a6a2:	6013      	str	r3, [r2, #0]
    gemm_6_bias_array.data = AI_PTR(g_network_weights_map[0] + 38056);
 800a6a4:	4b0c      	ldr	r3, [pc, #48]	@ (800a6d8 <network_configure_weights+0x150>)
 800a6a6:	681a      	ldr	r2, [r3, #0]
 800a6a8:	f249 43a8 	movw	r3, #38056	@ 0x94a8
 800a6ac:	4413      	add	r3, r2
 800a6ae:	4a12      	ldr	r2, [pc, #72]	@ (800a6f8 <network_configure_weights+0x170>)
 800a6b0:	6093      	str	r3, [r2, #8]
    gemm_6_bias_array.data_start = AI_PTR(g_network_weights_map[0] + 38056);
 800a6b2:	4b09      	ldr	r3, [pc, #36]	@ (800a6d8 <network_configure_weights+0x150>)
 800a6b4:	681a      	ldr	r2, [r3, #0]
 800a6b6:	f249 43a8 	movw	r3, #38056	@ 0x94a8
 800a6ba:	4413      	add	r3, r2
 800a6bc:	4a0e      	ldr	r2, [pc, #56]	@ (800a6f8 <network_configure_weights+0x170>)
 800a6be:	60d3      	str	r3, [r2, #12]
    return true;
 800a6c0:	2301      	movs	r3, #1
 800a6c2:	e005      	b.n	800a6d0 <network_configure_weights+0x148>
  }
  AI_ERROR_TRAP(net_ctx, INIT_FAILED, NETWORK_WEIGHTS);
 800a6c4:	2212      	movs	r2, #18
 800a6c6:	2130      	movs	r1, #48	@ 0x30
 800a6c8:	6878      	ldr	r0, [r7, #4]
 800a6ca:	f000 fa83 	bl	800abd4 <ai_platform_network_set_error>
  return false;
 800a6ce:	2300      	movs	r3, #0
}
 800a6d0:	4618      	mov	r0, r3
 800a6d2:	3708      	adds	r7, #8
 800a6d4:	46bd      	mov	sp, r7
 800a6d6:	bd80      	pop	{r7, pc}
 800a6d8:	20043c90 	.word	0x20043c90
 800a6dc:	2003bb74 	.word	0x2003bb74
 800a6e0:	2003bb84 	.word	0x2003bb84
 800a6e4:	2003bb94 	.word	0x2003bb94
 800a6e8:	2003bba4 	.word	0x2003bba4
 800a6ec:	2003bbb4 	.word	0x2003bbb4
 800a6f0:	2003bbc4 	.word	0x2003bbc4
 800a6f4:	2003bbd4 	.word	0x2003bbd4
 800a6f8:	2003bbe4 	.word	0x2003bbe4

0800a6fc <ai_network_get_error>:
}


AI_API_ENTRY
ai_error ai_network_get_error(ai_handle network)
{
 800a6fc:	b580      	push	{r7, lr}
 800a6fe:	b082      	sub	sp, #8
 800a700:	af00      	add	r7, sp, #0
 800a702:	6078      	str	r0, [r7, #4]
  return ai_platform_network_get_error(network);
 800a704:	6878      	ldr	r0, [r7, #4]
 800a706:	f000 fa59 	bl	800abbc <ai_platform_network_get_error>
 800a70a:	4603      	mov	r3, r0
}
 800a70c:	4618      	mov	r0, r3
 800a70e:	3708      	adds	r7, #8
 800a710:	46bd      	mov	sp, r7
 800a712:	bd80      	pop	{r7, pc}

0800a714 <ai_network_create>:


AI_API_ENTRY
ai_error ai_network_create(
  ai_handle* network, const ai_buffer* network_config)
{
 800a714:	b580      	push	{r7, lr}
 800a716:	b084      	sub	sp, #16
 800a718:	af02      	add	r7, sp, #8
 800a71a:	6078      	str	r0, [r7, #4]
 800a71c:	6039      	str	r1, [r7, #0]
  return ai_platform_network_create(
 800a71e:	2300      	movs	r3, #0
 800a720:	9301      	str	r3, [sp, #4]
 800a722:	2305      	movs	r3, #5
 800a724:	9300      	str	r3, [sp, #0]
 800a726:	2301      	movs	r3, #1
 800a728:	4a04      	ldr	r2, [pc, #16]	@ (800a73c <ai_network_create+0x28>)
 800a72a:	6839      	ldr	r1, [r7, #0]
 800a72c:	6878      	ldr	r0, [r7, #4]
 800a72e:	f000 fb45 	bl	800adbc <ai_platform_network_create>
 800a732:	4603      	mov	r3, r0
    network, network_config, 
    AI_CONTEXT_OBJ(&AI_NET_OBJ_INSTANCE),
    AI_TOOLS_API_VERSION_MAJOR, AI_TOOLS_API_VERSION_MINOR, AI_TOOLS_API_VERSION_MICRO);
}
 800a734:	4618      	mov	r0, r3
 800a736:	3708      	adds	r7, #8
 800a738:	46bd      	mov	sp, r7
 800a73a:	bd80      	pop	{r7, pc}
 800a73c:	2003c494 	.word	0x2003c494

0800a740 <ai_network_create_and_init>:


AI_API_ENTRY
ai_error ai_network_create_and_init(
  ai_handle* network, const ai_handle activations[], const ai_handle weights[])
{
 800a740:	b580      	push	{r7, lr}
 800a742:	b094      	sub	sp, #80	@ 0x50
 800a744:	af00      	add	r7, sp, #0
 800a746:	60f8      	str	r0, [r7, #12]
 800a748:	60b9      	str	r1, [r7, #8]
 800a74a:	607a      	str	r2, [r7, #4]
  ai_error err;
  ai_network_params params;

  err = ai_network_create(network, AI_NETWORK_DATA_CONFIG);
 800a74c:	2100      	movs	r1, #0
 800a74e:	68f8      	ldr	r0, [r7, #12]
 800a750:	f7ff ffe0 	bl	800a714 <ai_network_create>
 800a754:	4603      	mov	r3, r0
 800a756:	64bb      	str	r3, [r7, #72]	@ 0x48
  if (err.type != AI_ERROR_NONE) {
 800a758:	f897 3048 	ldrb.w	r3, [r7, #72]	@ 0x48
 800a75c:	2b00      	cmp	r3, #0
 800a75e:	d001      	beq.n	800a764 <ai_network_create_and_init+0x24>
    return err;
 800a760:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800a762:	e067      	b.n	800a834 <ai_network_create_and_init+0xf4>
  }
  
  if (ai_network_data_params_get(&params) != true) {
 800a764:	f107 0310 	add.w	r3, r7, #16
 800a768:	4618      	mov	r0, r3
 800a76a:	f000 f8e7 	bl	800a93c <ai_network_data_params_get>
 800a76e:	4603      	mov	r3, r0
 800a770:	f083 0301 	eor.w	r3, r3, #1
 800a774:	b2db      	uxtb	r3, r3
 800a776:	2b00      	cmp	r3, #0
 800a778:	d008      	beq.n	800a78c <ai_network_create_and_init+0x4c>
    err = ai_network_get_error(*network);
 800a77a:	68fb      	ldr	r3, [r7, #12]
 800a77c:	681b      	ldr	r3, [r3, #0]
 800a77e:	4618      	mov	r0, r3
 800a780:	f7ff ffbc 	bl	800a6fc <ai_network_get_error>
 800a784:	4603      	mov	r3, r0
 800a786:	64bb      	str	r3, [r7, #72]	@ 0x48
    return err;
 800a788:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800a78a:	e053      	b.n	800a834 <ai_network_create_and_init+0xf4>
  }
#if defined(AI_NETWORK_DATA_ACTIVATIONS_COUNT)
  /* set the addresses of the activations buffers */
  for (ai_u16 idx=0; activations && idx<params.map_activations.size; idx++) {
 800a78c:	2300      	movs	r3, #0
 800a78e:	f8a7 304e 	strh.w	r3, [r7, #78]	@ 0x4e
 800a792:	e012      	b.n	800a7ba <ai_network_create_and_init+0x7a>
    AI_BUFFER_ARRAY_ITEM_SET_ADDRESS(&params.map_activations, idx, activations[idx]);
 800a794:	f8b7 104e 	ldrh.w	r1, [r7, #78]	@ 0x4e
 800a798:	f8b7 304e 	ldrh.w	r3, [r7, #78]	@ 0x4e
 800a79c:	009b      	lsls	r3, r3, #2
 800a79e:	68ba      	ldr	r2, [r7, #8]
 800a7a0:	4413      	add	r3, r2
 800a7a2:	681a      	ldr	r2, [r3, #0]
 800a7a4:	f107 0310 	add.w	r3, r7, #16
 800a7a8:	330c      	adds	r3, #12
 800a7aa:	4618      	mov	r0, r3
 800a7ac:	f000 f92c 	bl	800aa08 <ai_buffer_array_item_set_address>
  for (ai_u16 idx=0; activations && idx<params.map_activations.size; idx++) {
 800a7b0:	f8b7 304e 	ldrh.w	r3, [r7, #78]	@ 0x4e
 800a7b4:	3301      	adds	r3, #1
 800a7b6:	f8a7 304e 	strh.w	r3, [r7, #78]	@ 0x4e
 800a7ba:	68bb      	ldr	r3, [r7, #8]
 800a7bc:	2b00      	cmp	r3, #0
 800a7be:	d004      	beq.n	800a7ca <ai_network_create_and_init+0x8a>
 800a7c0:	8bfb      	ldrh	r3, [r7, #30]
 800a7c2:	f8b7 204e 	ldrh.w	r2, [r7, #78]	@ 0x4e
 800a7c6:	429a      	cmp	r2, r3
 800a7c8:	d3e4      	bcc.n	800a794 <ai_network_create_and_init+0x54>
  }
#endif
#if defined(AI_NETWORK_DATA_WEIGHTS_COUNT)
  /* set the addresses of the weight buffers */
  for (ai_u16 idx=0; weights && idx<params.map_weights.size; idx++) {
 800a7ca:	2300      	movs	r3, #0
 800a7cc:	f8a7 304c 	strh.w	r3, [r7, #76]	@ 0x4c
 800a7d0:	e012      	b.n	800a7f8 <ai_network_create_and_init+0xb8>
    AI_BUFFER_ARRAY_ITEM_SET_ADDRESS(&params.map_weights, idx, weights[idx]);
 800a7d2:	f8b7 104c 	ldrh.w	r1, [r7, #76]	@ 0x4c
 800a7d6:	f8b7 304c 	ldrh.w	r3, [r7, #76]	@ 0x4c
 800a7da:	009b      	lsls	r3, r3, #2
 800a7dc:	687a      	ldr	r2, [r7, #4]
 800a7de:	4413      	add	r3, r2
 800a7e0:	681a      	ldr	r2, [r3, #0]
 800a7e2:	f107 0310 	add.w	r3, r7, #16
 800a7e6:	3304      	adds	r3, #4
 800a7e8:	4618      	mov	r0, r3
 800a7ea:	f000 f90d 	bl	800aa08 <ai_buffer_array_item_set_address>
  for (ai_u16 idx=0; weights && idx<params.map_weights.size; idx++) {
 800a7ee:	f8b7 304c 	ldrh.w	r3, [r7, #76]	@ 0x4c
 800a7f2:	3301      	adds	r3, #1
 800a7f4:	f8a7 304c 	strh.w	r3, [r7, #76]	@ 0x4c
 800a7f8:	687b      	ldr	r3, [r7, #4]
 800a7fa:	2b00      	cmp	r3, #0
 800a7fc:	d004      	beq.n	800a808 <ai_network_create_and_init+0xc8>
 800a7fe:	8afb      	ldrh	r3, [r7, #22]
 800a800:	f8b7 204c 	ldrh.w	r2, [r7, #76]	@ 0x4c
 800a804:	429a      	cmp	r2, r3
 800a806:	d3e4      	bcc.n	800a7d2 <ai_network_create_and_init+0x92>
  }
#endif
  if (ai_network_init(*network, &params) != true) {
 800a808:	68fb      	ldr	r3, [r7, #12]
 800a80a:	681b      	ldr	r3, [r3, #0]
 800a80c:	f107 0210 	add.w	r2, r7, #16
 800a810:	4611      	mov	r1, r2
 800a812:	4618      	mov	r0, r3
 800a814:	f000 f846 	bl	800a8a4 <ai_network_init>
 800a818:	4603      	mov	r3, r0
 800a81a:	f083 0301 	eor.w	r3, r3, #1
 800a81e:	b2db      	uxtb	r3, r3
 800a820:	2b00      	cmp	r3, #0
 800a822:	d006      	beq.n	800a832 <ai_network_create_and_init+0xf2>
    err = ai_network_get_error(*network);
 800a824:	68fb      	ldr	r3, [r7, #12]
 800a826:	681b      	ldr	r3, [r3, #0]
 800a828:	4618      	mov	r0, r3
 800a82a:	f7ff ff67 	bl	800a6fc <ai_network_get_error>
 800a82e:	4603      	mov	r3, r0
 800a830:	64bb      	str	r3, [r7, #72]	@ 0x48
  }
  return err;
 800a832:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
}
 800a834:	4618      	mov	r0, r3
 800a836:	3750      	adds	r7, #80	@ 0x50
 800a838:	46bd      	mov	sp, r7
 800a83a:	bd80      	pop	{r7, pc}

0800a83c <ai_network_inputs_get>:


AI_API_ENTRY
ai_buffer* ai_network_inputs_get(ai_handle network, ai_u16 *n_buffer)
{
 800a83c:	b580      	push	{r7, lr}
 800a83e:	b082      	sub	sp, #8
 800a840:	af00      	add	r7, sp, #0
 800a842:	6078      	str	r0, [r7, #4]
 800a844:	6039      	str	r1, [r7, #0]
  if (network == AI_HANDLE_NULL) {
 800a846:	687b      	ldr	r3, [r7, #4]
 800a848:	2b00      	cmp	r3, #0
 800a84a:	d104      	bne.n	800a856 <ai_network_inputs_get+0x1a>
    network = (ai_handle)&AI_NET_OBJ_INSTANCE;
 800a84c:	4b06      	ldr	r3, [pc, #24]	@ (800a868 <ai_network_inputs_get+0x2c>)
 800a84e:	607b      	str	r3, [r7, #4]
    AI_NETWORK_OBJ(network)->magic = AI_MAGIC_CONTEXT_TOKEN;
 800a850:	687b      	ldr	r3, [r7, #4]
 800a852:	4a06      	ldr	r2, [pc, #24]	@ (800a86c <ai_network_inputs_get+0x30>)
 800a854:	601a      	str	r2, [r3, #0]
  }
  return ai_platform_inputs_get(network, n_buffer);
 800a856:	6839      	ldr	r1, [r7, #0]
 800a858:	6878      	ldr	r0, [r7, #4]
 800a85a:	f000 f9c1 	bl	800abe0 <ai_platform_inputs_get>
 800a85e:	4603      	mov	r3, r0
}
 800a860:	4618      	mov	r0, r3
 800a862:	3708      	adds	r7, #8
 800a864:	46bd      	mov	sp, r7
 800a866:	bd80      	pop	{r7, pc}
 800a868:	2003c494 	.word	0x2003c494
 800a86c:	a1c00100 	.word	0xa1c00100

0800a870 <ai_network_outputs_get>:


AI_API_ENTRY
ai_buffer* ai_network_outputs_get(ai_handle network, ai_u16 *n_buffer)
{
 800a870:	b580      	push	{r7, lr}
 800a872:	b082      	sub	sp, #8
 800a874:	af00      	add	r7, sp, #0
 800a876:	6078      	str	r0, [r7, #4]
 800a878:	6039      	str	r1, [r7, #0]
  if (network == AI_HANDLE_NULL) {
 800a87a:	687b      	ldr	r3, [r7, #4]
 800a87c:	2b00      	cmp	r3, #0
 800a87e:	d104      	bne.n	800a88a <ai_network_outputs_get+0x1a>
    network = (ai_handle)&AI_NET_OBJ_INSTANCE;
 800a880:	4b06      	ldr	r3, [pc, #24]	@ (800a89c <ai_network_outputs_get+0x2c>)
 800a882:	607b      	str	r3, [r7, #4]
    AI_NETWORK_OBJ(network)->magic = AI_MAGIC_CONTEXT_TOKEN;
 800a884:	687b      	ldr	r3, [r7, #4]
 800a886:	4a06      	ldr	r2, [pc, #24]	@ (800a8a0 <ai_network_outputs_get+0x30>)
 800a888:	601a      	str	r2, [r3, #0]
  }
  return ai_platform_outputs_get(network, n_buffer);
 800a88a:	6839      	ldr	r1, [r7, #0]
 800a88c:	6878      	ldr	r0, [r7, #4]
 800a88e:	f000 fa1f 	bl	800acd0 <ai_platform_outputs_get>
 800a892:	4603      	mov	r3, r0
}
 800a894:	4618      	mov	r0, r3
 800a896:	3708      	adds	r7, #8
 800a898:	46bd      	mov	sp, r7
 800a89a:	bd80      	pop	{r7, pc}
 800a89c:	2003c494 	.word	0x2003c494
 800a8a0:	a1c00100 	.word	0xa1c00100

0800a8a4 <ai_network_init>:


AI_API_ENTRY
ai_bool ai_network_init(
  ai_handle network, const ai_network_params* params)
{
 800a8a4:	b580      	push	{r7, lr}
 800a8a6:	b084      	sub	sp, #16
 800a8a8:	af00      	add	r7, sp, #0
 800a8aa:	6078      	str	r0, [r7, #4]
 800a8ac:	6039      	str	r1, [r7, #0]
  ai_network* net_ctx = AI_NETWORK_OBJ(ai_platform_network_init(network, params));
 800a8ae:	6839      	ldr	r1, [r7, #0]
 800a8b0:	6878      	ldr	r0, [r7, #4]
 800a8b2:	f000 fac5 	bl	800ae40 <ai_platform_network_init>
 800a8b6:	60f8      	str	r0, [r7, #12]
  ai_bool ok = true;
 800a8b8:	2301      	movs	r3, #1
 800a8ba:	72fb      	strb	r3, [r7, #11]

  if (!net_ctx) return false;
 800a8bc:	68fb      	ldr	r3, [r7, #12]
 800a8be:	2b00      	cmp	r3, #0
 800a8c0:	d101      	bne.n	800a8c6 <ai_network_init+0x22>
 800a8c2:	2300      	movs	r3, #0
 800a8c4:	e026      	b.n	800a914 <ai_network_init+0x70>
  ok &= network_configure_weights(net_ctx, params);
 800a8c6:	6839      	ldr	r1, [r7, #0]
 800a8c8:	68f8      	ldr	r0, [r7, #12]
 800a8ca:	f7ff fe5d 	bl	800a588 <network_configure_weights>
 800a8ce:	4603      	mov	r3, r0
 800a8d0:	461a      	mov	r2, r3
 800a8d2:	7afb      	ldrb	r3, [r7, #11]
 800a8d4:	4013      	ands	r3, r2
 800a8d6:	2b00      	cmp	r3, #0
 800a8d8:	bf14      	ite	ne
 800a8da:	2301      	movne	r3, #1
 800a8dc:	2300      	moveq	r3, #0
 800a8de:	72fb      	strb	r3, [r7, #11]
  ok &= network_configure_activations(net_ctx, params);
 800a8e0:	6839      	ldr	r1, [r7, #0]
 800a8e2:	68f8      	ldr	r0, [r7, #12]
 800a8e4:	f7ff fd8c 	bl	800a400 <network_configure_activations>
 800a8e8:	4603      	mov	r3, r0
 800a8ea:	461a      	mov	r2, r3
 800a8ec:	7afb      	ldrb	r3, [r7, #11]
 800a8ee:	4013      	ands	r3, r2
 800a8f0:	2b00      	cmp	r3, #0
 800a8f2:	bf14      	ite	ne
 800a8f4:	2301      	movne	r3, #1
 800a8f6:	2300      	moveq	r3, #0
 800a8f8:	72fb      	strb	r3, [r7, #11]

  ok &= ai_platform_network_post_init(network);
 800a8fa:	6878      	ldr	r0, [r7, #4]
 800a8fc:	f000 fb60 	bl	800afc0 <ai_platform_network_post_init>
 800a900:	4603      	mov	r3, r0
 800a902:	461a      	mov	r2, r3
 800a904:	7afb      	ldrb	r3, [r7, #11]
 800a906:	4013      	ands	r3, r2
 800a908:	2b00      	cmp	r3, #0
 800a90a:	bf14      	ite	ne
 800a90c:	2301      	movne	r3, #1
 800a90e:	2300      	moveq	r3, #0
 800a910:	72fb      	strb	r3, [r7, #11]

  return ok;
 800a912:	7afb      	ldrb	r3, [r7, #11]
}
 800a914:	4618      	mov	r0, r3
 800a916:	3710      	adds	r7, #16
 800a918:	46bd      	mov	sp, r7
 800a91a:	bd80      	pop	{r7, pc}

0800a91c <ai_network_run>:


AI_API_ENTRY
ai_i32 ai_network_run(
  ai_handle network, const ai_buffer* input, ai_buffer* output)
{
 800a91c:	b580      	push	{r7, lr}
 800a91e:	b084      	sub	sp, #16
 800a920:	af00      	add	r7, sp, #0
 800a922:	60f8      	str	r0, [r7, #12]
 800a924:	60b9      	str	r1, [r7, #8]
 800a926:	607a      	str	r2, [r7, #4]
  return ai_platform_network_process(network, input, output);
 800a928:	687a      	ldr	r2, [r7, #4]
 800a92a:	68b9      	ldr	r1, [r7, #8]
 800a92c:	68f8      	ldr	r0, [r7, #12]
 800a92e:	f000 fb77 	bl	800b020 <ai_platform_network_process>
 800a932:	4603      	mov	r3, r0
}
 800a934:	4618      	mov	r0, r3
 800a936:	3710      	adds	r7, #16
 800a938:	46bd      	mov	sp, r7
 800a93a:	bd80      	pop	{r7, pc}

0800a93c <ai_network_data_params_get>:
 * @ingroup network_data
 * @return true if a valid configuration is present, false otherwise
 */
AI_API_ENTRY
ai_bool ai_network_data_params_get(ai_network_params* params)
{
 800a93c:	b580      	push	{r7, lr}
 800a93e:	b086      	sub	sp, #24
 800a940:	af00      	add	r7, sp, #0
 800a942:	6078      	str	r0, [r7, #4]
  if (!params) return false;
 800a944:	687b      	ldr	r3, [r7, #4]
 800a946:	2b00      	cmp	r3, #0
 800a948:	d101      	bne.n	800a94e <ai_network_data_params_get+0x12>
 800a94a:	2300      	movs	r3, #0
 800a94c:	e016      	b.n	800a97c <ai_network_data_params_get+0x40>
  
  const ai_buffer_array map_activations = 
 800a94e:	4a0d      	ldr	r2, [pc, #52]	@ (800a984 <ai_network_data_params_get+0x48>)
 800a950:	f107 0310 	add.w	r3, r7, #16
 800a954:	e892 0003 	ldmia.w	r2, {r0, r1}
 800a958:	e883 0003 	stmia.w	r3, {r0, r1}
    AI_BUFFER_ARRAY_OBJ_INIT(AI_FLAG_NONE, AI_NETWORK_DATA_ACTIVATIONS_COUNT, g_network_data_map_activations);
  
  const ai_buffer_array map_weights = 
 800a95c:	4a0a      	ldr	r2, [pc, #40]	@ (800a988 <ai_network_data_params_get+0x4c>)
 800a95e:	f107 0308 	add.w	r3, r7, #8
 800a962:	e892 0003 	ldmia.w	r2, {r0, r1}
 800a966:	e883 0003 	stmia.w	r3, {r0, r1}
    AI_BUFFER_ARRAY_OBJ_INIT(AI_FLAG_NONE, AI_NETWORK_DATA_WEIGHTS_COUNT, g_network_data_map_weights);

  return ai_platform_bind_network_params(params, &map_weights, &map_activations);
 800a96a:	f107 0210 	add.w	r2, r7, #16
 800a96e:	f107 0308 	add.w	r3, r7, #8
 800a972:	4619      	mov	r1, r3
 800a974:	6878      	ldr	r0, [r7, #4]
 800a976:	f000 f907 	bl	800ab88 <ai_platform_bind_network_params>
 800a97a:	4603      	mov	r3, r0
}
 800a97c:	4618      	mov	r0, r3
 800a97e:	3718      	adds	r7, #24
 800a980:	46bd      	mov	sp, r7
 800a982:	bd80      	pop	{r7, pc}
 800a984:	080110bc 	.word	0x080110bc
 800a988:	080110c4 	.word	0x080110c4

0800a98c <ai_buffer_get_size>:
 800a98c:	b368      	cbz	r0, 800a9ea <ai_buffer_get_size+0x5e>
 800a98e:	4b17      	ldr	r3, [pc, #92]	@ (800a9ec <ai_buffer_get_size+0x60>)
 800a990:	4a17      	ldr	r2, [pc, #92]	@ (800a9f0 <ai_buffer_get_size+0x64>)
 800a992:	b410      	push	{r4}
 800a994:	6804      	ldr	r4, [r0, #0]
 800a996:	4023      	ands	r3, r4
 800a998:	4293      	cmp	r3, r2
 800a99a:	d123      	bne.n	800a9e4 <ai_buffer_get_size+0x58>
 800a99c:	b311      	cbz	r1, 800a9e4 <ai_buffer_get_size+0x58>
 800a99e:	6984      	ldr	r4, [r0, #24]
 800a9a0:	6862      	ldr	r2, [r4, #4]
 800a9a2:	321f      	adds	r2, #31
 800a9a4:	f022 021f 	bic.w	r2, r2, #31
 800a9a8:	7d03      	ldrb	r3, [r0, #20]
 800a9aa:	6941      	ldr	r1, [r0, #20]
 800a9ac:	f1a3 0301 	sub.w	r3, r3, #1
 800a9b0:	f3c1 2017 	ubfx	r0, r1, #8, #24
 800a9b4:	fab3 f383 	clz	r3, r3
 800a9b8:	095b      	lsrs	r3, r3, #5
 800a9ba:	ebb3 2f11 	cmp.w	r3, r1, lsr #8
 800a9be:	da0c      	bge.n	800a9da <ai_buffer_get_size+0x4e>
 800a9c0:	2b01      	cmp	r3, #1
 800a9c2:	d103      	bne.n	800a9cc <ai_buffer_get_size+0x40>
 800a9c4:	2802      	cmp	r0, #2
 800a9c6:	f04f 0302 	mov.w	r3, #2
 800a9ca:	d006      	beq.n	800a9da <ai_buffer_get_size+0x4e>
 800a9cc:	f854 1023 	ldr.w	r1, [r4, r3, lsl #2]
 800a9d0:	3301      	adds	r3, #1
 800a9d2:	4298      	cmp	r0, r3
 800a9d4:	fb01 f202 	mul.w	r2, r1, r2
 800a9d8:	d1f2      	bne.n	800a9c0 <ai_buffer_get_size+0x34>
 800a9da:	ea22 70e2 	bic.w	r0, r2, r2, asr #31
 800a9de:	f85d 4b04 	ldr.w	r4, [sp], #4
 800a9e2:	4770      	bx	lr
 800a9e4:	6984      	ldr	r4, [r0, #24]
 800a9e6:	6862      	ldr	r2, [r4, #4]
 800a9e8:	e7de      	b.n	800a9a8 <ai_buffer_get_size+0x1c>
 800a9ea:	4770      	bx	lr
 800a9ec:	017fffff 	.word	0x017fffff
 800a9f0:	000400c0 	.word	0x000400c0

0800a9f4 <ai_buffer_array_sane>:
 800a9f4:	b138      	cbz	r0, 800aa06 <ai_buffer_array_sane+0x12>
 800a9f6:	6843      	ldr	r3, [r0, #4]
 800a9f8:	b123      	cbz	r3, 800aa04 <ai_buffer_array_sane+0x10>
 800a9fa:	8840      	ldrh	r0, [r0, #2]
 800a9fc:	3800      	subs	r0, #0
 800a9fe:	bf18      	it	ne
 800aa00:	2001      	movne	r0, #1
 800aa02:	4770      	bx	lr
 800aa04:	4618      	mov	r0, r3
 800aa06:	4770      	bx	lr

0800aa08 <ai_buffer_array_item_set_address>:
 800aa08:	b150      	cbz	r0, 800aa20 <ai_buffer_array_item_set_address+0x18>
 800aa0a:	6843      	ldr	r3, [r0, #4]
 800aa0c:	b14b      	cbz	r3, 800aa22 <ai_buffer_array_item_set_address+0x1a>
 800aa0e:	8840      	ldrh	r0, [r0, #2]
 800aa10:	b900      	cbnz	r0, 800aa14 <ai_buffer_array_item_set_address+0xc>
 800aa12:	4770      	bx	lr
 800aa14:	ebc1 01c1 	rsb	r1, r1, r1, lsl #3
 800aa18:	2001      	movs	r0, #1
 800aa1a:	eb03 0381 	add.w	r3, r3, r1, lsl #2
 800aa1e:	605a      	str	r2, [r3, #4]
 800aa20:	4770      	bx	lr
 800aa22:	4618      	mov	r0, r3
 800aa24:	4770      	bx	lr
 800aa26:	bf00      	nop

0800aa28 <ai_platform_get_weights_map>:
 800aa28:	2900      	cmp	r1, #0
 800aa2a:	bf18      	it	ne
 800aa2c:	2800      	cmpne	r0, #0
 800aa2e:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800aa30:	bf0c      	ite	eq
 800aa32:	2401      	moveq	r4, #1
 800aa34:	2400      	movne	r4, #0
 800aa36:	2a00      	cmp	r2, #0
 800aa38:	bf08      	it	eq
 800aa3a:	f044 0401 	orreq.w	r4, r4, #1
 800aa3e:	b114      	cbz	r4, 800aa46 <ai_platform_get_weights_map+0x1e>
 800aa40:	2400      	movs	r4, #0
 800aa42:	4620      	mov	r0, r4
 800aa44:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800aa46:	4616      	mov	r6, r2
 800aa48:	4b22      	ldr	r3, [pc, #136]	@ (800aad4 <ai_platform_get_weights_map+0xac>)
 800aa4a:	6812      	ldr	r2, [r2, #0]
 800aa4c:	4605      	mov	r5, r0
 800aa4e:	460f      	mov	r7, r1
 800aa50:	429a      	cmp	r2, r3
 800aa52:	d022      	beq.n	800aa9a <ai_platform_get_weights_map+0x72>
 800aa54:	6870      	ldr	r0, [r6, #4]
 800aa56:	2800      	cmp	r0, #0
 800aa58:	d0f2      	beq.n	800aa40 <ai_platform_get_weights_map+0x18>
 800aa5a:	6806      	ldr	r6, [r0, #0]
 800aa5c:	429e      	cmp	r6, r3
 800aa5e:	d006      	beq.n	800aa6e <ai_platform_get_weights_map+0x46>
 800aa60:	f1a1 0401 	sub.w	r4, r1, #1
 800aa64:	6028      	str	r0, [r5, #0]
 800aa66:	fab4 f484 	clz	r4, r4
 800aa6a:	0964      	lsrs	r4, r4, #5
 800aa6c:	e7e9      	b.n	800aa42 <ai_platform_get_weights_map+0x1a>
 800aa6e:	3d04      	subs	r5, #4
 800aa70:	4602      	mov	r2, r0
 800aa72:	4621      	mov	r1, r4
 800aa74:	e000      	b.n	800aa78 <ai_platform_get_weights_map+0x50>
 800aa76:	4619      	mov	r1, r3
 800aa78:	f852 3f04 	ldr.w	r3, [r2, #4]!
 800aa7c:	42b3      	cmp	r3, r6
 800aa7e:	d025      	beq.n	800aacc <ai_platform_get_weights_map+0xa4>
 800aa80:	f845 3f04 	str.w	r3, [r5, #4]!
 800aa84:	1c4b      	adds	r3, r1, #1
 800aa86:	429f      	cmp	r7, r3
 800aa88:	d8f5      	bhi.n	800aa76 <ai_platform_get_weights_map+0x4e>
 800aa8a:	d1da      	bne.n	800aa42 <ai_platform_get_weights_map+0x1a>
 800aa8c:	3102      	adds	r1, #2
 800aa8e:	f850 3021 	ldr.w	r3, [r0, r1, lsl #2]
 800aa92:	42b3      	cmp	r3, r6
 800aa94:	d1d5      	bne.n	800aa42 <ai_platform_get_weights_map+0x1a>
 800aa96:	2401      	movs	r4, #1
 800aa98:	e7d3      	b.n	800aa42 <ai_platform_get_weights_map+0x1a>
 800aa9a:	1d30      	adds	r0, r6, #4
 800aa9c:	f7ff ffaa 	bl	800a9f4 <ai_buffer_array_sane>
 800aaa0:	2800      	cmp	r0, #0
 800aaa2:	d0cd      	beq.n	800aa40 <ai_platform_get_weights_map+0x18>
 800aaa4:	88f3      	ldrh	r3, [r6, #6]
 800aaa6:	429f      	cmp	r7, r3
 800aaa8:	d1ca      	bne.n	800aa40 <ai_platform_get_weights_map+0x18>
 800aaaa:	3d04      	subs	r5, #4
 800aaac:	4622      	mov	r2, r4
 800aaae:	68b3      	ldr	r3, [r6, #8]
 800aab0:	4423      	add	r3, r4
 800aab2:	341c      	adds	r4, #28
 800aab4:	685b      	ldr	r3, [r3, #4]
 800aab6:	b123      	cbz	r3, 800aac2 <ai_platform_get_weights_map+0x9a>
 800aab8:	3201      	adds	r2, #1
 800aaba:	f845 3f04 	str.w	r3, [r5, #4]!
 800aabe:	4297      	cmp	r7, r2
 800aac0:	d8f5      	bhi.n	800aaae <ai_platform_get_weights_map+0x86>
 800aac2:	1abc      	subs	r4, r7, r2
 800aac4:	fab4 f484 	clz	r4, r4
 800aac8:	0964      	lsrs	r4, r4, #5
 800aaca:	e7ba      	b.n	800aa42 <ai_platform_get_weights_map+0x1a>
 800aacc:	428f      	cmp	r7, r1
 800aace:	d1b8      	bne.n	800aa42 <ai_platform_get_weights_map+0x1a>
 800aad0:	e7e1      	b.n	800aa96 <ai_platform_get_weights_map+0x6e>
 800aad2:	bf00      	nop
 800aad4:	a1facade 	.word	0xa1facade

0800aad8 <ai_platform_get_activations_map>:
 800aad8:	2900      	cmp	r1, #0
 800aada:	bf18      	it	ne
 800aadc:	2800      	cmpne	r0, #0
 800aade:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800aae0:	bf0c      	ite	eq
 800aae2:	2401      	moveq	r4, #1
 800aae4:	2400      	movne	r4, #0
 800aae6:	2a00      	cmp	r2, #0
 800aae8:	bf08      	it	eq
 800aaea:	f044 0401 	orreq.w	r4, r4, #1
 800aaee:	b114      	cbz	r4, 800aaf6 <ai_platform_get_activations_map+0x1e>
 800aaf0:	2400      	movs	r4, #0
 800aaf2:	4620      	mov	r0, r4
 800aaf4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800aaf6:	4616      	mov	r6, r2
 800aaf8:	4b22      	ldr	r3, [pc, #136]	@ (800ab84 <ai_platform_get_activations_map+0xac>)
 800aafa:	6812      	ldr	r2, [r2, #0]
 800aafc:	4605      	mov	r5, r0
 800aafe:	460f      	mov	r7, r1
 800ab00:	429a      	cmp	r2, r3
 800ab02:	d022      	beq.n	800ab4a <ai_platform_get_activations_map+0x72>
 800ab04:	6a30      	ldr	r0, [r6, #32]
 800ab06:	2800      	cmp	r0, #0
 800ab08:	d0f2      	beq.n	800aaf0 <ai_platform_get_activations_map+0x18>
 800ab0a:	6806      	ldr	r6, [r0, #0]
 800ab0c:	429e      	cmp	r6, r3
 800ab0e:	d006      	beq.n	800ab1e <ai_platform_get_activations_map+0x46>
 800ab10:	f1a1 0401 	sub.w	r4, r1, #1
 800ab14:	6028      	str	r0, [r5, #0]
 800ab16:	fab4 f484 	clz	r4, r4
 800ab1a:	0964      	lsrs	r4, r4, #5
 800ab1c:	e7e9      	b.n	800aaf2 <ai_platform_get_activations_map+0x1a>
 800ab1e:	3d04      	subs	r5, #4
 800ab20:	4602      	mov	r2, r0
 800ab22:	4621      	mov	r1, r4
 800ab24:	e000      	b.n	800ab28 <ai_platform_get_activations_map+0x50>
 800ab26:	4619      	mov	r1, r3
 800ab28:	f852 3f04 	ldr.w	r3, [r2, #4]!
 800ab2c:	42b3      	cmp	r3, r6
 800ab2e:	d026      	beq.n	800ab7e <ai_platform_get_activations_map+0xa6>
 800ab30:	f845 3f04 	str.w	r3, [r5, #4]!
 800ab34:	1c4b      	adds	r3, r1, #1
 800ab36:	429f      	cmp	r7, r3
 800ab38:	d8f5      	bhi.n	800ab26 <ai_platform_get_activations_map+0x4e>
 800ab3a:	d1da      	bne.n	800aaf2 <ai_platform_get_activations_map+0x1a>
 800ab3c:	3102      	adds	r1, #2
 800ab3e:	f850 3021 	ldr.w	r3, [r0, r1, lsl #2]
 800ab42:	42b3      	cmp	r3, r6
 800ab44:	d1d5      	bne.n	800aaf2 <ai_platform_get_activations_map+0x1a>
 800ab46:	2401      	movs	r4, #1
 800ab48:	e7d3      	b.n	800aaf2 <ai_platform_get_activations_map+0x1a>
 800ab4a:	f106 000c 	add.w	r0, r6, #12
 800ab4e:	f7ff ff51 	bl	800a9f4 <ai_buffer_array_sane>
 800ab52:	2800      	cmp	r0, #0
 800ab54:	d0cc      	beq.n	800aaf0 <ai_platform_get_activations_map+0x18>
 800ab56:	89f3      	ldrh	r3, [r6, #14]
 800ab58:	429f      	cmp	r7, r3
 800ab5a:	d1c9      	bne.n	800aaf0 <ai_platform_get_activations_map+0x18>
 800ab5c:	3d04      	subs	r5, #4
 800ab5e:	4622      	mov	r2, r4
 800ab60:	6933      	ldr	r3, [r6, #16]
 800ab62:	4423      	add	r3, r4
 800ab64:	341c      	adds	r4, #28
 800ab66:	685b      	ldr	r3, [r3, #4]
 800ab68:	b123      	cbz	r3, 800ab74 <ai_platform_get_activations_map+0x9c>
 800ab6a:	3201      	adds	r2, #1
 800ab6c:	f845 3f04 	str.w	r3, [r5, #4]!
 800ab70:	4297      	cmp	r7, r2
 800ab72:	d8f5      	bhi.n	800ab60 <ai_platform_get_activations_map+0x88>
 800ab74:	1abc      	subs	r4, r7, r2
 800ab76:	fab4 f484 	clz	r4, r4
 800ab7a:	0964      	lsrs	r4, r4, #5
 800ab7c:	e7b9      	b.n	800aaf2 <ai_platform_get_activations_map+0x1a>
 800ab7e:	428f      	cmp	r7, r1
 800ab80:	d1b7      	bne.n	800aaf2 <ai_platform_get_activations_map+0x1a>
 800ab82:	e7e0      	b.n	800ab46 <ai_platform_get_activations_map+0x6e>
 800ab84:	a1facade 	.word	0xa1facade

0800ab88 <ai_platform_bind_network_params>:
 800ab88:	2a00      	cmp	r2, #0
 800ab8a:	bf18      	it	ne
 800ab8c:	2900      	cmpne	r1, #0
 800ab8e:	d010      	beq.n	800abb2 <ai_platform_bind_network_params+0x2a>
 800ab90:	b178      	cbz	r0, 800abb2 <ai_platform_bind_network_params+0x2a>
 800ab92:	4603      	mov	r3, r0
 800ab94:	4808      	ldr	r0, [pc, #32]	@ (800abb8 <ai_platform_bind_network_params+0x30>)
 800ab96:	f103 0c0c 	add.w	ip, r3, #12
 800ab9a:	f843 0b04 	str.w	r0, [r3], #4
 800ab9e:	c903      	ldmia	r1, {r0, r1}
 800aba0:	e883 0003 	stmia.w	r3, {r0, r1}
 800aba4:	2301      	movs	r3, #1
 800aba6:	e892 0003 	ldmia.w	r2, {r0, r1}
 800abaa:	e88c 0003 	stmia.w	ip, {r0, r1}
 800abae:	4618      	mov	r0, r3
 800abb0:	4770      	bx	lr
 800abb2:	2300      	movs	r3, #0
 800abb4:	4618      	mov	r0, r3
 800abb6:	4770      	bx	lr
 800abb8:	a1facade 	.word	0xa1facade

0800abbc <ai_platform_network_get_error>:
 800abbc:	4b04      	ldr	r3, [pc, #16]	@ (800abd0 <ai_platform_network_get_error+0x14>)
 800abbe:	6802      	ldr	r2, [r0, #0]
 800abc0:	4393      	bics	r3, r2
 800abc2:	d102      	bne.n	800abca <ai_platform_network_get_error+0xe>
 800abc4:	300c      	adds	r0, #12
 800abc6:	f000 bc73 	b.w	800b4b0 <core_get_error>
 800abca:	f241 0010 	movw	r0, #4112	@ 0x1010
 800abce:	4770      	bx	lr
 800abd0:	a1c00100 	.word	0xa1c00100

0800abd4 <ai_platform_network_set_error>:
 800abd4:	b110      	cbz	r0, 800abdc <ai_platform_network_set_error+0x8>
 800abd6:	300c      	adds	r0, #12
 800abd8:	f000 bc70 	b.w	800b4bc <core_set_error>
 800abdc:	4770      	bx	lr
 800abde:	bf00      	nop

0800abe0 <ai_platform_inputs_get>:
 800abe0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800abe4:	4b39      	ldr	r3, [pc, #228]	@ (800accc <ai_platform_inputs_get+0xec>)
 800abe6:	b085      	sub	sp, #20
 800abe8:	6802      	ldr	r2, [r0, #0]
 800abea:	4393      	bics	r3, r2
 800abec:	e9cd 1002 	strd	r1, r0, [sp, #8]
 800abf0:	d162      	bne.n	800acb8 <ai_platform_inputs_get+0xd8>
 800abf2:	8e03      	ldrh	r3, [r0, #48]	@ 0x30
 800abf4:	2b00      	cmp	r3, #0
 800abf6:	d051      	beq.n	800ac9c <ai_platform_inputs_get+0xbc>
 800abf8:	f8d0 a034 	ldr.w	sl, [r0, #52]	@ 0x34
 800abfc:	f1ba 0f00 	cmp.w	sl, #0
 800ac00:	d04c      	beq.n	800ac9c <ai_platform_inputs_get+0xbc>
 800ac02:	f04f 0900 	mov.w	r9, #0
 800ac06:	464d      	mov	r5, r9
 800ac08:	e016      	b.n	800ac38 <ai_platform_inputs_get+0x58>
 800ac0a:	9901      	ldr	r1, [sp, #4]
 800ac0c:	2301      	movs	r3, #1
 800ac0e:	f848 3001 	str.w	r3, [r8, r1]
 800ac12:	69b1      	ldr	r1, [r6, #24]
 800ac14:	f04f 0301 	mov.w	r3, #1
 800ac18:	684e      	ldr	r6, [r1, #4]
 800ac1a:	3501      	adds	r5, #1
 800ac1c:	f109 091c 	add.w	r9, r9, #28
 800ac20:	7523      	strb	r3, [r4, #20]
 800ac22:	2300      	movs	r3, #0
 800ac24:	6961      	ldr	r1, [r4, #20]
 800ac26:	6020      	str	r0, [r4, #0]
 800ac28:	f36b 211f 	bfi	r1, fp, #8, #24
 800ac2c:	e9c4 c701 	strd	ip, r7, [r4, #4]
 800ac30:	e9c4 3603 	strd	r3, r6, [r4, #12]
 800ac34:	e9c4 1205 	strd	r1, r2, [r4, #20]
 800ac38:	f8ba 3000 	ldrh.w	r3, [sl]
 800ac3c:	b2ac      	uxth	r4, r5
 800ac3e:	42ab      	cmp	r3, r5
 800ac40:	ea4f 03c5 	mov.w	r3, r5, lsl #3
 800ac44:	9301      	str	r3, [sp, #4]
 800ac46:	d93b      	bls.n	800acc0 <ai_platform_inputs_get+0xe0>
 800ac48:	f8da 3004 	ldr.w	r3, [sl, #4]
 800ac4c:	2b00      	cmp	r3, #0
 800ac4e:	d037      	beq.n	800acc0 <ai_platform_inputs_get+0xe0>
 800ac50:	f853 6025 	ldr.w	r6, [r3, r5, lsl #2]
 800ac54:	2e00      	cmp	r6, #0
 800ac56:	d033      	beq.n	800acc0 <ai_platform_inputs_get+0xe0>
 800ac58:	f8da 3008 	ldr.w	r3, [sl, #8]
 800ac5c:	69b2      	ldr	r2, [r6, #24]
 800ac5e:	e9d3 4801 	ldrd	r4, r8, [r3, #4]
 800ac62:	6810      	ldr	r0, [r2, #0]
 800ac64:	68b3      	ldr	r3, [r6, #8]
 800ac66:	eb08 07c5 	add.w	r7, r8, r5, lsl #3
 800ac6a:	68f2      	ldr	r2, [r6, #12]
 800ac6c:	444c      	add	r4, r9
 800ac6e:	f3c3 2b17 	ubfx	fp, r3, #8, #24
 800ac72:	9200      	str	r2, [sp, #0]
 800ac74:	f003 fba0 	bl	800e3b8 <ai_array_to_buffer_fmt>
 800ac78:	69b1      	ldr	r1, [r6, #24]
 800ac7a:	9a00      	ldr	r2, [sp, #0]
 800ac7c:	f8d1 c008 	ldr.w	ip, [r1, #8]
 800ac80:	2f00      	cmp	r7, #0
 800ac82:	d0c7      	beq.n	800ac14 <ai_platform_inputs_get+0x34>
 800ac84:	2100      	movs	r1, #0
 800ac86:	f848 1035 	str.w	r1, [r8, r5, lsl #3]
 800ac8a:	6831      	ldr	r1, [r6, #0]
 800ac8c:	6079      	str	r1, [r7, #4]
 800ac8e:	b111      	cbz	r1, 800ac96 <ai_platform_inputs_get+0xb6>
 800ac90:	8849      	ldrh	r1, [r1, #2]
 800ac92:	2900      	cmp	r1, #0
 800ac94:	d1b9      	bne.n	800ac0a <ai_platform_inputs_get+0x2a>
 800ac96:	69b1      	ldr	r1, [r6, #24]
 800ac98:	2700      	movs	r7, #0
 800ac9a:	e7bb      	b.n	800ac14 <ai_platform_inputs_get+0x34>
 800ac9c:	9803      	ldr	r0, [sp, #12]
 800ac9e:	2400      	movs	r4, #0
 800aca0:	2218      	movs	r2, #24
 800aca2:	2111      	movs	r1, #17
 800aca4:	300c      	adds	r0, #12
 800aca6:	f000 fc09 	bl	800b4bc <core_set_error>
 800acaa:	4620      	mov	r0, r4
 800acac:	9b02      	ldr	r3, [sp, #8]
 800acae:	b103      	cbz	r3, 800acb2 <ai_platform_inputs_get+0xd2>
 800acb0:	801c      	strh	r4, [r3, #0]
 800acb2:	b005      	add	sp, #20
 800acb4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800acb8:	2000      	movs	r0, #0
 800acba:	b005      	add	sp, #20
 800acbc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800acc0:	2c00      	cmp	r4, #0
 800acc2:	d0eb      	beq.n	800ac9c <ai_platform_inputs_get+0xbc>
 800acc4:	f8da 3008 	ldr.w	r3, [sl, #8]
 800acc8:	6858      	ldr	r0, [r3, #4]
 800acca:	e7ef      	b.n	800acac <ai_platform_inputs_get+0xcc>
 800accc:	a1c00100 	.word	0xa1c00100

0800acd0 <ai_platform_outputs_get>:
 800acd0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800acd4:	4b38      	ldr	r3, [pc, #224]	@ (800adb8 <ai_platform_outputs_get+0xe8>)
 800acd6:	b085      	sub	sp, #20
 800acd8:	6802      	ldr	r2, [r0, #0]
 800acda:	4393      	bics	r3, r2
 800acdc:	e9cd 1002 	strd	r1, r0, [sp, #8]
 800ace0:	d15f      	bne.n	800ada2 <ai_platform_outputs_get+0xd2>
 800ace2:	8e03      	ldrh	r3, [r0, #48]	@ 0x30
 800ace4:	2b01      	cmp	r3, #1
 800ace6:	d94e      	bls.n	800ad86 <ai_platform_outputs_get+0xb6>
 800ace8:	f04f 0900 	mov.w	r9, #0
 800acec:	f8d0 a034 	ldr.w	sl, [r0, #52]	@ 0x34
 800acf0:	464d      	mov	r5, r9
 800acf2:	e016      	b.n	800ad22 <ai_platform_outputs_get+0x52>
 800acf4:	9901      	ldr	r1, [sp, #4]
 800acf6:	2301      	movs	r3, #1
 800acf8:	f848 3001 	str.w	r3, [r8, r1]
 800acfc:	69b1      	ldr	r1, [r6, #24]
 800acfe:	f04f 0301 	mov.w	r3, #1
 800ad02:	684e      	ldr	r6, [r1, #4]
 800ad04:	3501      	adds	r5, #1
 800ad06:	f109 091c 	add.w	r9, r9, #28
 800ad0a:	7523      	strb	r3, [r4, #20]
 800ad0c:	2300      	movs	r3, #0
 800ad0e:	6961      	ldr	r1, [r4, #20]
 800ad10:	6020      	str	r0, [r4, #0]
 800ad12:	f36b 211f 	bfi	r1, fp, #8, #24
 800ad16:	e9c4 c701 	strd	ip, r7, [r4, #4]
 800ad1a:	e9c4 3603 	strd	r3, r6, [r4, #12]
 800ad1e:	e9c4 1205 	strd	r1, r2, [r4, #20]
 800ad22:	f8ba 300c 	ldrh.w	r3, [sl, #12]
 800ad26:	b2ac      	uxth	r4, r5
 800ad28:	42ab      	cmp	r3, r5
 800ad2a:	ea4f 03c5 	mov.w	r3, r5, lsl #3
 800ad2e:	9301      	str	r3, [sp, #4]
 800ad30:	d93b      	bls.n	800adaa <ai_platform_outputs_get+0xda>
 800ad32:	f8da 3010 	ldr.w	r3, [sl, #16]
 800ad36:	2b00      	cmp	r3, #0
 800ad38:	d037      	beq.n	800adaa <ai_platform_outputs_get+0xda>
 800ad3a:	f853 6025 	ldr.w	r6, [r3, r5, lsl #2]
 800ad3e:	2e00      	cmp	r6, #0
 800ad40:	d033      	beq.n	800adaa <ai_platform_outputs_get+0xda>
 800ad42:	f8da 3014 	ldr.w	r3, [sl, #20]
 800ad46:	69b2      	ldr	r2, [r6, #24]
 800ad48:	e9d3 4801 	ldrd	r4, r8, [r3, #4]
 800ad4c:	6810      	ldr	r0, [r2, #0]
 800ad4e:	68b3      	ldr	r3, [r6, #8]
 800ad50:	eb08 07c5 	add.w	r7, r8, r5, lsl #3
 800ad54:	68f2      	ldr	r2, [r6, #12]
 800ad56:	444c      	add	r4, r9
 800ad58:	f3c3 2b17 	ubfx	fp, r3, #8, #24
 800ad5c:	9200      	str	r2, [sp, #0]
 800ad5e:	f003 fb2b 	bl	800e3b8 <ai_array_to_buffer_fmt>
 800ad62:	69b1      	ldr	r1, [r6, #24]
 800ad64:	9a00      	ldr	r2, [sp, #0]
 800ad66:	f8d1 c008 	ldr.w	ip, [r1, #8]
 800ad6a:	2f00      	cmp	r7, #0
 800ad6c:	d0c7      	beq.n	800acfe <ai_platform_outputs_get+0x2e>
 800ad6e:	2100      	movs	r1, #0
 800ad70:	f848 1035 	str.w	r1, [r8, r5, lsl #3]
 800ad74:	6831      	ldr	r1, [r6, #0]
 800ad76:	6079      	str	r1, [r7, #4]
 800ad78:	b111      	cbz	r1, 800ad80 <ai_platform_outputs_get+0xb0>
 800ad7a:	8849      	ldrh	r1, [r1, #2]
 800ad7c:	2900      	cmp	r1, #0
 800ad7e:	d1b9      	bne.n	800acf4 <ai_platform_outputs_get+0x24>
 800ad80:	69b1      	ldr	r1, [r6, #24]
 800ad82:	2700      	movs	r7, #0
 800ad84:	e7bb      	b.n	800acfe <ai_platform_outputs_get+0x2e>
 800ad86:	9803      	ldr	r0, [sp, #12]
 800ad88:	2400      	movs	r4, #0
 800ad8a:	2218      	movs	r2, #24
 800ad8c:	2111      	movs	r1, #17
 800ad8e:	300c      	adds	r0, #12
 800ad90:	f000 fb94 	bl	800b4bc <core_set_error>
 800ad94:	4620      	mov	r0, r4
 800ad96:	9b02      	ldr	r3, [sp, #8]
 800ad98:	b103      	cbz	r3, 800ad9c <ai_platform_outputs_get+0xcc>
 800ad9a:	801c      	strh	r4, [r3, #0]
 800ad9c:	b005      	add	sp, #20
 800ad9e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800ada2:	2000      	movs	r0, #0
 800ada4:	b005      	add	sp, #20
 800ada6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800adaa:	2c00      	cmp	r4, #0
 800adac:	d0eb      	beq.n	800ad86 <ai_platform_outputs_get+0xb6>
 800adae:	f8da 3014 	ldr.w	r3, [sl, #20]
 800adb2:	6858      	ldr	r0, [r3, #4]
 800adb4:	e7ef      	b.n	800ad96 <ai_platform_outputs_get+0xc6>
 800adb6:	bf00      	nop
 800adb8:	a1c00100 	.word	0xa1c00100

0800adbc <ai_platform_network_create>:
 800adbc:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800adc0:	b083      	sub	sp, #12
 800adc2:	f89d 8028 	ldrb.w	r8, [sp, #40]	@ 0x28
 800adc6:	f89d 902c 	ldrb.w	r9, [sp, #44]	@ 0x2c
 800adca:	b320      	cbz	r0, 800ae16 <ai_platform_network_create+0x5a>
 800adcc:	6002      	str	r2, [r0, #0]
 800adce:	4616      	mov	r6, r2
 800add0:	461f      	mov	r7, r3
 800add2:	4604      	mov	r4, r0
 800add4:	f000 fb6a 	bl	800b4ac <core_init>
 800add8:	b970      	cbnz	r0, 800adf8 <ai_platform_network_create+0x3c>
 800adda:	2530      	movs	r5, #48	@ 0x30
 800addc:	2300      	movs	r3, #0
 800adde:	6023      	str	r3, [r4, #0]
 800ade0:	2410      	movs	r4, #16
 800ade2:	464a      	mov	r2, r9
 800ade4:	4641      	mov	r1, r8
 800ade6:	4638      	mov	r0, r7
 800ade8:	f003 fb90 	bl	800e50c <ai_version_get>
 800adec:	60b0      	str	r0, [r6, #8]
 800adee:	ea45 2004 	orr.w	r0, r5, r4, lsl #8
 800adf2:	b003      	add	sp, #12
 800adf4:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800adf8:	2200      	movs	r2, #0
 800adfa:	4641      	mov	r1, r8
 800adfc:	4638      	mov	r0, r7
 800adfe:	f003 fb85 	bl	800e50c <ai_version_get>
 800ae02:	4605      	mov	r5, r0
 800ae04:	2200      	movs	r2, #0
 800ae06:	2105      	movs	r1, #5
 800ae08:	2001      	movs	r0, #1
 800ae0a:	f003 fb7f 	bl	800e50c <ai_version_get>
 800ae0e:	4285      	cmp	r5, r0
 800ae10:	d008      	beq.n	800ae24 <ai_platform_network_create+0x68>
 800ae12:	2501      	movs	r5, #1
 800ae14:	e7e2      	b.n	800addc <ai_platform_network_create+0x20>
 800ae16:	2510      	movs	r5, #16
 800ae18:	462c      	mov	r4, r5
 800ae1a:	ea45 2004 	orr.w	r0, r5, r4, lsl #8
 800ae1e:	b003      	add	sp, #12
 800ae20:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800ae24:	4b05      	ldr	r3, [pc, #20]	@ (800ae3c <ai_platform_network_create+0x80>)
 800ae26:	a801      	add	r0, sp, #4
 800ae28:	9301      	str	r3, [sp, #4]
 800ae2a:	f000 fb53 	bl	800b4d4 <ai_check_custom_types>
 800ae2e:	b110      	cbz	r0, 800ae36 <ai_platform_network_create+0x7a>
 800ae30:	2400      	movs	r4, #0
 800ae32:	4625      	mov	r5, r4
 800ae34:	e7d5      	b.n	800ade2 <ai_platform_network_create+0x26>
 800ae36:	2502      	movs	r5, #2
 800ae38:	e7d0      	b.n	800addc <ai_platform_network_create+0x20>
 800ae3a:	bf00      	nop
 800ae3c:	84048403 	.word	0x84048403

0800ae40 <ai_platform_network_init>:
 800ae40:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800ae44:	4a5c      	ldr	r2, [pc, #368]	@ (800afb8 <ai_platform_network_init+0x178>)
 800ae46:	460c      	mov	r4, r1
 800ae48:	6801      	ldr	r1, [r0, #0]
 800ae4a:	438a      	bics	r2, r1
 800ae4c:	d133      	bne.n	800aeb6 <ai_platform_network_init+0x76>
 800ae4e:	4605      	mov	r5, r0
 800ae50:	2c00      	cmp	r4, #0
 800ae52:	f000 8093 	beq.w	800af7c <ai_platform_network_init+0x13c>
 800ae56:	f8d4 b000 	ldr.w	fp, [r4]
 800ae5a:	4a58      	ldr	r2, [pc, #352]	@ (800afbc <ai_platform_network_init+0x17c>)
 800ae5c:	4593      	cmp	fp, r2
 800ae5e:	d10f      	bne.n	800ae80 <ai_platform_network_init+0x40>
 800ae60:	e9d4 e803 	ldrd	lr, r8, [r4, #12]
 800ae64:	e9d4 6701 	ldrd	r6, r7, [r4, #4]
 800ae68:	4b53      	ldr	r3, [pc, #332]	@ (800afb8 <ai_platform_network_init+0x178>)
 800ae6a:	ea4f 4a1e 	mov.w	sl, lr, lsr #16
 800ae6e:	0c32      	lsrs	r2, r6, #16
 800ae70:	4299      	cmp	r1, r3
 800ae72:	d02c      	beq.n	800aece <ai_platform_network_init+0x8e>
 800ae74:	2303      	movs	r3, #3
 800ae76:	462c      	mov	r4, r5
 800ae78:	612b      	str	r3, [r5, #16]
 800ae7a:	4620      	mov	r0, r4
 800ae7c:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800ae80:	4627      	mov	r7, r4
 800ae82:	2101      	movs	r1, #1
 800ae84:	6864      	ldr	r4, [r4, #4]
 800ae86:	4638      	mov	r0, r7
 800ae88:	f107 081c 	add.w	r8, r7, #28
 800ae8c:	f7ff fd7e 	bl	800a98c <ai_buffer_get_size>
 800ae90:	4606      	mov	r6, r0
 800ae92:	2101      	movs	r1, #1
 800ae94:	4640      	mov	r0, r8
 800ae96:	f8d7 9020 	ldr.w	r9, [r7, #32]
 800ae9a:	f7ff fd77 	bl	800a98c <ai_buffer_get_size>
 800ae9e:	b976      	cbnz	r6, 800aebe <ai_platform_network_init+0x7e>
 800aea0:	2800      	cmp	r0, #0
 800aea2:	d150      	bne.n	800af46 <ai_platform_network_init+0x106>
 800aea4:	4680      	mov	r8, r0
 800aea6:	4686      	mov	lr, r0
 800aea8:	4606      	mov	r6, r0
 800aeaa:	4607      	mov	r7, r0
 800aeac:	ea4f 4e0e 	mov.w	lr, lr, lsl #16
 800aeb0:	6829      	ldr	r1, [r5, #0]
 800aeb2:	0436      	lsls	r6, r6, #16
 800aeb4:	e7d8      	b.n	800ae68 <ai_platform_network_init+0x28>
 800aeb6:	2400      	movs	r4, #0
 800aeb8:	4620      	mov	r0, r4
 800aeba:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800aebe:	2800      	cmp	r0, #0
 800aec0:	d13b      	bne.n	800af3a <ai_platform_network_init+0xfa>
 800aec2:	4680      	mov	r8, r0
 800aec4:	4686      	mov	lr, r0
 800aec6:	2c00      	cmp	r4, #0
 800aec8:	d05e      	beq.n	800af88 <ai_platform_network_init+0x148>
 800aeca:	2601      	movs	r6, #1
 800aecc:	e7ee      	b.n	800aeac <ai_platform_network_init+0x6c>
 800aece:	8c6b      	ldrh	r3, [r5, #34]	@ 0x22
 800aed0:	4293      	cmp	r3, r2
 800aed2:	4b3a      	ldr	r3, [pc, #232]	@ (800afbc <ai_platform_network_init+0x17c>)
 800aed4:	d33e      	bcc.n	800af54 <ai_platform_network_init+0x114>
 800aed6:	459b      	cmp	fp, r3
 800aed8:	d03e      	beq.n	800af58 <ai_platform_network_init+0x118>
 800aeda:	b1a2      	cbz	r2, 800af06 <ai_platform_network_init+0xc6>
 800aedc:	ebc2 02c2 	rsb	r2, r2, r2, lsl #3
 800aee0:	f04f 0c00 	mov.w	ip, #0
 800aee4:	ea4f 0982 	mov.w	r9, r2, lsl #2
 800aee8:	6a6c      	ldr	r4, [r5, #36]	@ 0x24
 800aeea:	eb07 0b0c 	add.w	fp, r7, ip
 800aeee:	4464      	add	r4, ip
 800aef0:	f10c 0c1c 	add.w	ip, ip, #28
 800aef4:	e8bb 000f 	ldmia.w	fp!, {r0, r1, r2, r3}
 800aef8:	45cc      	cmp	ip, r9
 800aefa:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800aefc:	e89b 0007 	ldmia.w	fp, {r0, r1, r2}
 800af00:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 800af04:	d1f0      	bne.n	800aee8 <ai_platform_network_init+0xa8>
 800af06:	8d6b      	ldrh	r3, [r5, #42]	@ 0x2a
 800af08:	622e      	str	r6, [r5, #32]
 800af0a:	4553      	cmp	r3, sl
 800af0c:	d34b      	bcc.n	800afa6 <ai_platform_network_init+0x166>
 800af0e:	f1ba 0f00 	cmp.w	sl, #0
 800af12:	d025      	beq.n	800af60 <ai_platform_network_init+0x120>
 800af14:	ebca 0aca 	rsb	sl, sl, sl, lsl #3
 800af18:	2700      	movs	r7, #0
 800af1a:	ea4f 0a8a 	mov.w	sl, sl, lsl #2
 800af1e:	6aec      	ldr	r4, [r5, #44]	@ 0x2c
 800af20:	eb08 0607 	add.w	r6, r8, r7
 800af24:	443c      	add	r4, r7
 800af26:	371c      	adds	r7, #28
 800af28:	ce0f      	ldmia	r6!, {r0, r1, r2, r3}
 800af2a:	4557      	cmp	r7, sl
 800af2c:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800af2e:	e896 0007 	ldmia.w	r6, {r0, r1, r2}
 800af32:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 800af36:	d1f2      	bne.n	800af1e <ai_platform_network_init+0xde>
 800af38:	e012      	b.n	800af60 <ai_platform_network_init+0x120>
 800af3a:	f1b9 0f00 	cmp.w	r9, #0
 800af3e:	d015      	beq.n	800af6c <ai_platform_network_init+0x12c>
 800af40:	f04f 0e01 	mov.w	lr, #1
 800af44:	e7bf      	b.n	800aec6 <ai_platform_network_init+0x86>
 800af46:	f1b9 0f00 	cmp.w	r9, #0
 800af4a:	d00f      	beq.n	800af6c <ai_platform_network_init+0x12c>
 800af4c:	f04f 0e01 	mov.w	lr, #1
 800af50:	4637      	mov	r7, r6
 800af52:	e7ab      	b.n	800aeac <ai_platform_network_init+0x6c>
 800af54:	459b      	cmp	fp, r3
 800af56:	d11e      	bne.n	800af96 <ai_platform_network_init+0x156>
 800af58:	f8c5 802c 	str.w	r8, [r5, #44]	@ 0x2c
 800af5c:	e9c5 6708 	strd	r6, r7, [r5, #32]
 800af60:	4628      	mov	r0, r5
 800af62:	f8c5 e028 	str.w	lr, [r5, #40]	@ 0x28
 800af66:	f000 fadd 	bl	800b524 <ai_layers_init_all>
 800af6a:	e783      	b.n	800ae74 <ai_platform_network_init+0x34>
 800af6c:	2213      	movs	r2, #19
 800af6e:	2110      	movs	r1, #16
 800af70:	f105 000c 	add.w	r0, r5, #12
 800af74:	2400      	movs	r4, #0
 800af76:	f000 faa1 	bl	800b4bc <core_set_error>
 800af7a:	e77e      	b.n	800ae7a <ai_platform_network_init+0x3a>
 800af7c:	2211      	movs	r2, #17
 800af7e:	2110      	movs	r1, #16
 800af80:	300c      	adds	r0, #12
 800af82:	f000 fa9b 	bl	800b4bc <core_set_error>
 800af86:	e778      	b.n	800ae7a <ai_platform_network_init+0x3a>
 800af88:	2212      	movs	r2, #18
 800af8a:	2110      	movs	r1, #16
 800af8c:	f105 000c 	add.w	r0, r5, #12
 800af90:	f000 fa94 	bl	800b4bc <core_set_error>
 800af94:	e771      	b.n	800ae7a <ai_platform_network_init+0x3a>
 800af96:	2212      	movs	r2, #18
 800af98:	2116      	movs	r1, #22
 800af9a:	f105 000c 	add.w	r0, r5, #12
 800af9e:	2400      	movs	r4, #0
 800afa0:	f000 fa8c 	bl	800b4bc <core_set_error>
 800afa4:	e769      	b.n	800ae7a <ai_platform_network_init+0x3a>
 800afa6:	2213      	movs	r2, #19
 800afa8:	2116      	movs	r1, #22
 800afaa:	f105 000c 	add.w	r0, r5, #12
 800afae:	2400      	movs	r4, #0
 800afb0:	f000 fa84 	bl	800b4bc <core_set_error>
 800afb4:	e761      	b.n	800ae7a <ai_platform_network_init+0x3a>
 800afb6:	bf00      	nop
 800afb8:	a1c00100 	.word	0xa1c00100
 800afbc:	a1facade 	.word	0xa1facade

0800afc0 <ai_platform_network_post_init>:
 800afc0:	b538      	push	{r3, r4, r5, lr}
 800afc2:	4b16      	ldr	r3, [pc, #88]	@ (800b01c <ai_platform_network_post_init+0x5c>)
 800afc4:	6802      	ldr	r2, [r0, #0]
 800afc6:	ea02 0103 	and.w	r1, r2, r3
 800afca:	4393      	bics	r3, r2
 800afcc:	d108      	bne.n	800afe0 <ai_platform_network_post_init+0x20>
 800afce:	6903      	ldr	r3, [r0, #16]
 800afd0:	4604      	mov	r4, r0
 800afd2:	f013 0502 	ands.w	r5, r3, #2
 800afd6:	d005      	beq.n	800afe4 <ai_platform_network_post_init+0x24>
 800afd8:	428a      	cmp	r2, r1
 800afda:	d00a      	beq.n	800aff2 <ai_platform_network_post_init+0x32>
 800afdc:	2001      	movs	r0, #1
 800afde:	bd38      	pop	{r3, r4, r5, pc}
 800afe0:	2000      	movs	r0, #0
 800afe2:	bd38      	pop	{r3, r4, r5, pc}
 800afe4:	2210      	movs	r2, #16
 800afe6:	2111      	movs	r1, #17
 800afe8:	300c      	adds	r0, #12
 800afea:	f000 fa67 	bl	800b4bc <core_set_error>
 800afee:	4628      	mov	r0, r5
 800aff0:	bd38      	pop	{r3, r4, r5, pc}
 800aff2:	f000 faa5 	bl	800b540 <ai_layers_post_init_all>
 800aff6:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 800aff8:	2b00      	cmp	r3, #0
 800affa:	d0ef      	beq.n	800afdc <ai_platform_network_post_init+0x1c>
 800affc:	6ba5      	ldr	r5, [r4, #56]	@ 0x38
 800affe:	e008      	b.n	800b012 <ai_platform_network_post_init+0x52>
 800b000:	e9d4 3210 	ldrd	r3, r2, [r4, #64]	@ 0x40
 800b004:	4798      	blx	r3
 800b006:	692b      	ldr	r3, [r5, #16]
 800b008:	42ab      	cmp	r3, r5
 800b00a:	461d      	mov	r5, r3
 800b00c:	d0e6      	beq.n	800afdc <ai_platform_network_post_init+0x1c>
 800b00e:	2b00      	cmp	r3, #0
 800b010:	d0e4      	beq.n	800afdc <ai_platform_network_post_init+0x1c>
 800b012:	4629      	mov	r1, r5
 800b014:	2000      	movs	r0, #0
 800b016:	2d00      	cmp	r5, #0
 800b018:	d1f2      	bne.n	800b000 <ai_platform_network_post_init+0x40>
 800b01a:	e7df      	b.n	800afdc <ai_platform_network_post_init+0x1c>
 800b01c:	a1c00100 	.word	0xa1c00100

0800b020 <ai_platform_network_process>:
 800b020:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b024:	b085      	sub	sp, #20
 800b026:	4bb7      	ldr	r3, [pc, #732]	@ (800b304 <ai_platform_network_process+0x2e4>)
 800b028:	9202      	str	r2, [sp, #8]
 800b02a:	6802      	ldr	r2, [r0, #0]
 800b02c:	4393      	bics	r3, r2
 800b02e:	f040 8142 	bne.w	800b2b6 <ai_platform_network_process+0x296>
 800b032:	8e03      	ldrh	r3, [r0, #48]	@ 0x30
 800b034:	4605      	mov	r5, r0
 800b036:	2b00      	cmp	r3, #0
 800b038:	f000 8126 	beq.w	800b288 <ai_platform_network_process+0x268>
 800b03c:	6903      	ldr	r3, [r0, #16]
 800b03e:	2200      	movs	r2, #0
 800b040:	f8d0 8034 	ldr.w	r8, [r0, #52]	@ 0x34
 800b044:	f003 0303 	and.w	r3, r3, #3
 800b048:	6182      	str	r2, [r0, #24]
 800b04a:	2b03      	cmp	r3, #3
 800b04c:	f040 8122 	bne.w	800b294 <ai_platform_network_process+0x274>
 800b050:	2900      	cmp	r1, #0
 800b052:	f000 8136 	beq.w	800b2c2 <ai_platform_network_process+0x2a2>
 800b056:	fab8 f788 	clz	r7, r8
 800b05a:	097f      	lsrs	r7, r7, #5
 800b05c:	f1b8 0f00 	cmp.w	r8, #0
 800b060:	f000 812f 	beq.w	800b2c2 <ai_platform_network_process+0x2a2>
 800b064:	f8b8 3000 	ldrh.w	r3, [r8]
 800b068:	2b00      	cmp	r3, #0
 800b06a:	f000 812a 	beq.w	800b2c2 <ai_platform_network_process+0x2a2>
 800b06e:	698b      	ldr	r3, [r1, #24]
 800b070:	460e      	mov	r6, r1
 800b072:	9003      	str	r0, [sp, #12]
 800b074:	681b      	ldr	r3, [r3, #0]
 800b076:	9301      	str	r3, [sp, #4]
 800b078:	f8d8 3004 	ldr.w	r3, [r8, #4]
 800b07c:	2b00      	cmp	r3, #0
 800b07e:	d072      	beq.n	800b166 <ai_platform_network_process+0x146>
 800b080:	f853 4027 	ldr.w	r4, [r3, r7, lsl #2]
 800b084:	2c00      	cmp	r4, #0
 800b086:	d06e      	beq.n	800b166 <ai_platform_network_process+0x146>
 800b088:	f8d8 3008 	ldr.w	r3, [r8, #8]
 800b08c:	ea4f 1b07 	mov.w	fp, r7, lsl #4
 800b090:	f8d3 a000 	ldr.w	sl, [r3]
 800b094:	eb1a 1907 	adds.w	r9, sl, r7, lsl #4
 800b098:	f000 8112 	beq.w	800b2c0 <ai_platform_network_process+0x2a0>
 800b09c:	69a3      	ldr	r3, [r4, #24]
 800b09e:	2101      	movs	r1, #1
 800b0a0:	4630      	mov	r0, r6
 800b0a2:	685d      	ldr	r5, [r3, #4]
 800b0a4:	f7ff fc72 	bl	800a98c <ai_buffer_get_size>
 800b0a8:	4285      	cmp	r5, r0
 800b0aa:	f0c0 8115 	bcc.w	800b2d8 <ai_platform_network_process+0x2b8>
 800b0ae:	68e0      	ldr	r0, [r4, #12]
 800b0b0:	69b1      	ldr	r1, [r6, #24]
 800b0b2:	68c2      	ldr	r2, [r0, #12]
 800b0b4:	68cb      	ldr	r3, [r1, #12]
 800b0b6:	429a      	cmp	r2, r3
 800b0b8:	f040 810e 	bne.w	800b2d8 <ai_platform_network_process+0x2b8>
 800b0bc:	6882      	ldr	r2, [r0, #8]
 800b0be:	688b      	ldr	r3, [r1, #8]
 800b0c0:	429a      	cmp	r2, r3
 800b0c2:	f040 8109 	bne.w	800b2d8 <ai_platform_network_process+0x2b8>
 800b0c6:	6842      	ldr	r2, [r0, #4]
 800b0c8:	684b      	ldr	r3, [r1, #4]
 800b0ca:	429a      	cmp	r2, r3
 800b0cc:	f040 8104 	bne.w	800b2d8 <ai_platform_network_process+0x2b8>
 800b0d0:	69a3      	ldr	r3, [r4, #24]
 800b0d2:	e9d3 0100 	ldrd	r0, r1, [r3]
 800b0d6:	f003 fa07 	bl	800e4e8 <ai_array_get_data_byte_size>
 800b0da:	4605      	mov	r5, r0
 800b0dc:	4620      	mov	r0, r4
 800b0de:	f003 fa1b 	bl	800e518 <get_tensor_byte_size>
 800b0e2:	4285      	cmp	r5, r0
 800b0e4:	f0c0 80f8 	bcc.w	800b2d8 <ai_platform_network_process+0x2b8>
 800b0e8:	69a3      	ldr	r3, [r4, #24]
 800b0ea:	6818      	ldr	r0, [r3, #0]
 800b0ec:	f003 f964 	bl	800e3b8 <ai_array_to_buffer_fmt>
 800b0f0:	6833      	ldr	r3, [r6, #0]
 800b0f2:	4058      	eors	r0, r3
 800b0f4:	f030 407e 	bics.w	r0, r0, #4261412864	@ 0xfe000000
 800b0f8:	f040 81a4 	bne.w	800b444 <ai_platform_network_process+0x424>
 800b0fc:	6873      	ldr	r3, [r6, #4]
 800b0fe:	2b00      	cmp	r3, #0
 800b100:	f000 80de 	beq.w	800b2c0 <ai_platform_network_process+0x2a0>
 800b104:	69b3      	ldr	r3, [r6, #24]
 800b106:	681b      	ldr	r3, [r3, #0]
 800b108:	2b00      	cmp	r3, #0
 800b10a:	f000 81a4 	beq.w	800b456 <ai_platform_network_process+0x436>
 800b10e:	9a01      	ldr	r2, [sp, #4]
 800b110:	4620      	mov	r0, r4
 800b112:	3701      	adds	r7, #1
 800b114:	361c      	adds	r6, #28
 800b116:	429a      	cmp	r2, r3
 800b118:	bf38      	it	cc
 800b11a:	461a      	movcc	r2, r3
 800b11c:	9201      	str	r2, [sp, #4]
 800b11e:	f003 f9fb 	bl	800e518 <get_tensor_byte_size>
 800b122:	f8c9 0008 	str.w	r0, [r9, #8]
 800b126:	f856 3c04 	ldr.w	r3, [r6, #-4]
 800b12a:	681b      	ldr	r3, [r3, #0]
 800b12c:	fb00 f303 	mul.w	r3, r0, r3
 800b130:	f8c9 300c 	str.w	r3, [r9, #12]
 800b134:	f856 1c18 	ldr.w	r1, [r6, #-24]
 800b138:	440b      	add	r3, r1
 800b13a:	f8c9 1004 	str.w	r1, [r9, #4]
 800b13e:	f84a 300b 	str.w	r3, [sl, fp]
 800b142:	69a0      	ldr	r0, [r4, #24]
 800b144:	6803      	ldr	r3, [r0, #0]
 800b146:	009a      	lsls	r2, r3, #2
 800b148:	f100 80af 	bmi.w	800b2aa <ai_platform_network_process+0x28a>
 800b14c:	e9d0 3202 	ldrd	r3, r2, [r0, #8]
 800b150:	1a9b      	subs	r3, r3, r2
 800b152:	4419      	add	r1, r3
 800b154:	6081      	str	r1, [r0, #8]
 800b156:	69a3      	ldr	r3, [r4, #24]
 800b158:	f8d9 2004 	ldr.w	r2, [r9, #4]
 800b15c:	60da      	str	r2, [r3, #12]
 800b15e:	f8b8 3000 	ldrh.w	r3, [r8]
 800b162:	42bb      	cmp	r3, r7
 800b164:	d888      	bhi.n	800b078 <ai_platform_network_process+0x58>
 800b166:	9d03      	ldr	r5, [sp, #12]
 800b168:	9b02      	ldr	r3, [sp, #8]
 800b16a:	8e2a      	ldrh	r2, [r5, #48]	@ 0x30
 800b16c:	2b00      	cmp	r3, #0
 800b16e:	f000 817b 	beq.w	800b468 <ai_platform_network_process+0x448>
 800b172:	2a01      	cmp	r2, #1
 800b174:	f240 80bd 	bls.w	800b2f2 <ai_platform_network_process+0x2d2>
 800b178:	f8d5 9034 	ldr.w	r9, [r5, #52]	@ 0x34
 800b17c:	f8b9 300c 	ldrh.w	r3, [r9, #12]
 800b180:	2b00      	cmp	r3, #0
 800b182:	f000 80b6 	beq.w	800b2f2 <ai_platform_network_process+0x2d2>
 800b186:	2700      	movs	r7, #0
 800b188:	f8dd b008 	ldr.w	fp, [sp, #8]
 800b18c:	9502      	str	r5, [sp, #8]
 800b18e:	f8d9 3010 	ldr.w	r3, [r9, #16]
 800b192:	2b00      	cmp	r3, #0
 800b194:	f000 80bd 	beq.w	800b312 <ai_platform_network_process+0x2f2>
 800b198:	f853 6027 	ldr.w	r6, [r3, r7, lsl #2]
 800b19c:	2e00      	cmp	r6, #0
 800b19e:	f000 80b8 	beq.w	800b312 <ai_platform_network_process+0x2f2>
 800b1a2:	f8d9 3014 	ldr.w	r3, [r9, #20]
 800b1a6:	ea4f 1a07 	mov.w	sl, r7, lsl #4
 800b1aa:	681c      	ldr	r4, [r3, #0]
 800b1ac:	eb14 1807 	adds.w	r8, r4, r7, lsl #4
 800b1b0:	f000 8170 	beq.w	800b494 <ai_platform_network_process+0x474>
 800b1b4:	69b3      	ldr	r3, [r6, #24]
 800b1b6:	2101      	movs	r1, #1
 800b1b8:	4658      	mov	r0, fp
 800b1ba:	685d      	ldr	r5, [r3, #4]
 800b1bc:	f7ff fbe6 	bl	800a98c <ai_buffer_get_size>
 800b1c0:	4285      	cmp	r5, r0
 800b1c2:	f0c0 8095 	bcc.w	800b2f0 <ai_platform_network_process+0x2d0>
 800b1c6:	68f0      	ldr	r0, [r6, #12]
 800b1c8:	f8db 1018 	ldr.w	r1, [fp, #24]
 800b1cc:	68c2      	ldr	r2, [r0, #12]
 800b1ce:	68cb      	ldr	r3, [r1, #12]
 800b1d0:	429a      	cmp	r2, r3
 800b1d2:	f040 808d 	bne.w	800b2f0 <ai_platform_network_process+0x2d0>
 800b1d6:	6882      	ldr	r2, [r0, #8]
 800b1d8:	688b      	ldr	r3, [r1, #8]
 800b1da:	429a      	cmp	r2, r3
 800b1dc:	f040 8088 	bne.w	800b2f0 <ai_platform_network_process+0x2d0>
 800b1e0:	6842      	ldr	r2, [r0, #4]
 800b1e2:	684b      	ldr	r3, [r1, #4]
 800b1e4:	429a      	cmp	r2, r3
 800b1e6:	f040 8083 	bne.w	800b2f0 <ai_platform_network_process+0x2d0>
 800b1ea:	69b3      	ldr	r3, [r6, #24]
 800b1ec:	e9d3 0100 	ldrd	r0, r1, [r3]
 800b1f0:	f003 f97a 	bl	800e4e8 <ai_array_get_data_byte_size>
 800b1f4:	9003      	str	r0, [sp, #12]
 800b1f6:	4630      	mov	r0, r6
 800b1f8:	f003 f98e 	bl	800e518 <get_tensor_byte_size>
 800b1fc:	9b03      	ldr	r3, [sp, #12]
 800b1fe:	4283      	cmp	r3, r0
 800b200:	d376      	bcc.n	800b2f0 <ai_platform_network_process+0x2d0>
 800b202:	69b3      	ldr	r3, [r6, #24]
 800b204:	6818      	ldr	r0, [r3, #0]
 800b206:	f003 f8d7 	bl	800e3b8 <ai_array_to_buffer_fmt>
 800b20a:	f8db 3000 	ldr.w	r3, [fp]
 800b20e:	4058      	eors	r0, r3
 800b210:	f030 407e 	bics.w	r0, r0, #4261412864	@ 0xfe000000
 800b214:	f040 812c 	bne.w	800b470 <ai_platform_network_process+0x450>
 800b218:	f8db 3004 	ldr.w	r3, [fp, #4]
 800b21c:	2b00      	cmp	r3, #0
 800b21e:	f000 8139 	beq.w	800b494 <ai_platform_network_process+0x474>
 800b222:	f8db 3018 	ldr.w	r3, [fp, #24]
 800b226:	681b      	ldr	r3, [r3, #0]
 800b228:	2b00      	cmp	r3, #0
 800b22a:	f000 812a 	beq.w	800b482 <ai_platform_network_process+0x462>
 800b22e:	9a01      	ldr	r2, [sp, #4]
 800b230:	4630      	mov	r0, r6
 800b232:	3701      	adds	r7, #1
 800b234:	f10b 0b1c 	add.w	fp, fp, #28
 800b238:	429a      	cmp	r2, r3
 800b23a:	bf38      	it	cc
 800b23c:	461a      	movcc	r2, r3
 800b23e:	9201      	str	r2, [sp, #4]
 800b240:	f003 f96a 	bl	800e518 <get_tensor_byte_size>
 800b244:	f8c8 0008 	str.w	r0, [r8, #8]
 800b248:	f85b 3c04 	ldr.w	r3, [fp, #-4]
 800b24c:	681b      	ldr	r3, [r3, #0]
 800b24e:	fb00 f303 	mul.w	r3, r0, r3
 800b252:	f8c8 300c 	str.w	r3, [r8, #12]
 800b256:	f85b 1c18 	ldr.w	r1, [fp, #-24]
 800b25a:	440b      	add	r3, r1
 800b25c:	f8c8 1004 	str.w	r1, [r8, #4]
 800b260:	f844 300a 	str.w	r3, [r4, sl]
 800b264:	69b0      	ldr	r0, [r6, #24]
 800b266:	6803      	ldr	r3, [r0, #0]
 800b268:	009b      	lsls	r3, r3, #2
 800b26a:	d44d      	bmi.n	800b308 <ai_platform_network_process+0x2e8>
 800b26c:	e9d0 3202 	ldrd	r3, r2, [r0, #8]
 800b270:	1a9b      	subs	r3, r3, r2
 800b272:	4419      	add	r1, r3
 800b274:	6081      	str	r1, [r0, #8]
 800b276:	69b3      	ldr	r3, [r6, #24]
 800b278:	f8d8 2004 	ldr.w	r2, [r8, #4]
 800b27c:	60da      	str	r2, [r3, #12]
 800b27e:	f8b9 300c 	ldrh.w	r3, [r9, #12]
 800b282:	42bb      	cmp	r3, r7
 800b284:	d883      	bhi.n	800b18e <ai_platform_network_process+0x16e>
 800b286:	e044      	b.n	800b312 <ai_platform_network_process+0x2f2>
 800b288:	6902      	ldr	r2, [r0, #16]
 800b28a:	6183      	str	r3, [r0, #24]
 800b28c:	f002 0203 	and.w	r2, r2, #3
 800b290:	2a03      	cmp	r2, #3
 800b292:	d016      	beq.n	800b2c2 <ai_platform_network_process+0x2a2>
 800b294:	2230      	movs	r2, #48	@ 0x30
 800b296:	2111      	movs	r1, #17
 800b298:	f105 000c 	add.w	r0, r5, #12
 800b29c:	2400      	movs	r4, #0
 800b29e:	f000 f90d 	bl	800b4bc <core_set_error>
 800b2a2:	4620      	mov	r0, r4
 800b2a4:	b005      	add	sp, #20
 800b2a6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800b2aa:	f8b8 3000 	ldrh.w	r3, [r8]
 800b2ae:	429f      	cmp	r7, r3
 800b2b0:	f4ff aee2 	bcc.w	800b078 <ai_platform_network_process+0x58>
 800b2b4:	e757      	b.n	800b166 <ai_platform_network_process+0x146>
 800b2b6:	2400      	movs	r4, #0
 800b2b8:	4620      	mov	r0, r4
 800b2ba:	b005      	add	sp, #20
 800b2bc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800b2c0:	9d03      	ldr	r5, [sp, #12]
 800b2c2:	2400      	movs	r4, #0
 800b2c4:	2217      	movs	r2, #23
 800b2c6:	2112      	movs	r1, #18
 800b2c8:	f105 000c 	add.w	r0, r5, #12
 800b2cc:	f000 f8f6 	bl	800b4bc <core_set_error>
 800b2d0:	4620      	mov	r0, r4
 800b2d2:	b005      	add	sp, #20
 800b2d4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800b2d8:	9d03      	ldr	r5, [sp, #12]
 800b2da:	2400      	movs	r4, #0
 800b2dc:	2218      	movs	r2, #24
 800b2de:	2112      	movs	r1, #18
 800b2e0:	f105 000c 	add.w	r0, r5, #12
 800b2e4:	f000 f8ea 	bl	800b4bc <core_set_error>
 800b2e8:	4620      	mov	r0, r4
 800b2ea:	b005      	add	sp, #20
 800b2ec:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800b2f0:	9d02      	ldr	r5, [sp, #8]
 800b2f2:	2218      	movs	r2, #24
 800b2f4:	2113      	movs	r1, #19
 800b2f6:	f105 000c 	add.w	r0, r5, #12
 800b2fa:	2400      	movs	r4, #0
 800b2fc:	f000 f8de 	bl	800b4bc <core_set_error>
 800b300:	e7cf      	b.n	800b2a2 <ai_platform_network_process+0x282>
 800b302:	bf00      	nop
 800b304:	a1c00100 	.word	0xa1c00100
 800b308:	f8b9 300c 	ldrh.w	r3, [r9, #12]
 800b30c:	429f      	cmp	r7, r3
 800b30e:	f4ff af3e 	bcc.w	800b18e <ai_platform_network_process+0x16e>
 800b312:	9d02      	ldr	r5, [sp, #8]
 800b314:	f8bd 3004 	ldrh.w	r3, [sp, #4]
 800b318:	8e2a      	ldrh	r2, [r5, #48]	@ 0x30
 800b31a:	832b      	strh	r3, [r5, #24]
 800b31c:	2a00      	cmp	r2, #0
 800b31e:	f040 808b 	bne.w	800b438 <ai_platform_network_process+0x418>
 800b322:	4616      	mov	r6, r2
 800b324:	4617      	mov	r7, r2
 800b326:	8b6c      	ldrh	r4, [r5, #26]
 800b328:	429c      	cmp	r4, r3
 800b32a:	d2ba      	bcs.n	800b2a2 <ai_platform_network_process+0x282>
 800b32c:	46ab      	mov	fp, r5
 800b32e:	2e00      	cmp	r6, #0
 800b330:	d030      	beq.n	800b394 <ai_platform_network_process+0x374>
 800b332:	f04f 0800 	mov.w	r8, #0
 800b336:	e014      	b.n	800b362 <ai_platform_network_process+0x342>
 800b338:	6882      	ldr	r2, [r0, #8]
 800b33a:	68c5      	ldr	r5, [r0, #12]
 800b33c:	6863      	ldr	r3, [r4, #4]
 800b33e:	1b52      	subs	r2, r2, r5
 800b340:	4413      	add	r3, r2
 800b342:	6083      	str	r3, [r0, #8]
 800b344:	698b      	ldr	r3, [r1, #24]
 800b346:	6862      	ldr	r2, [r4, #4]
 800b348:	60da      	str	r2, [r3, #12]
 800b34a:	f859 200a 	ldr.w	r2, [r9, sl]
 800b34e:	f108 0801 	add.w	r8, r8, #1
 800b352:	e9d4 3101 	ldrd	r3, r1, [r4, #4]
 800b356:	440b      	add	r3, r1
 800b358:	4293      	cmp	r3, r2
 800b35a:	d301      	bcc.n	800b360 <ai_platform_network_process+0x340>
 800b35c:	68e3      	ldr	r3, [r4, #12]
 800b35e:	1ad3      	subs	r3, r2, r3
 800b360:	6063      	str	r3, [r4, #4]
 800b362:	8833      	ldrh	r3, [r6, #0]
 800b364:	ea4f 1a08 	mov.w	sl, r8, lsl #4
 800b368:	4543      	cmp	r3, r8
 800b36a:	d913      	bls.n	800b394 <ai_platform_network_process+0x374>
 800b36c:	6873      	ldr	r3, [r6, #4]
 800b36e:	b18b      	cbz	r3, 800b394 <ai_platform_network_process+0x374>
 800b370:	f853 1028 	ldr.w	r1, [r3, r8, lsl #2]
 800b374:	b171      	cbz	r1, 800b394 <ai_platform_network_process+0x374>
 800b376:	6988      	ldr	r0, [r1, #24]
 800b378:	68b2      	ldr	r2, [r6, #8]
 800b37a:	6803      	ldr	r3, [r0, #0]
 800b37c:	f8d2 9000 	ldr.w	r9, [r2]
 800b380:	009d      	lsls	r5, r3, #2
 800b382:	eb09 1408 	add.w	r4, r9, r8, lsl #4
 800b386:	d5d7      	bpl.n	800b338 <ai_platform_network_process+0x318>
 800b388:	6881      	ldr	r1, [r0, #8]
 800b38a:	68a2      	ldr	r2, [r4, #8]
 800b38c:	6860      	ldr	r0, [r4, #4]
 800b38e:	f002 fbd3 	bl	800db38 <st_int8_copy>
 800b392:	e7da      	b.n	800b34a <ai_platform_network_process+0x32a>
 800b394:	4658      	mov	r0, fp
 800b396:	f000 f8e7 	bl	800b568 <ai_layers_forward_all>
 800b39a:	2f00      	cmp	r7, #0
 800b39c:	d03d      	beq.n	800b41a <ai_platform_network_process+0x3fa>
 800b39e:	2400      	movs	r4, #0
 800b3a0:	e016      	b.n	800b3d0 <ai_platform_network_process+0x3b0>
 800b3a2:	e9d8 3201 	ldrd	r3, r2, [r8, #4]
 800b3a6:	f859 100a 	ldr.w	r1, [r9, sl]
 800b3aa:	4413      	add	r3, r2
 800b3ac:	428b      	cmp	r3, r1
 800b3ae:	d302      	bcc.n	800b3b6 <ai_platform_network_process+0x396>
 800b3b0:	f8d8 300c 	ldr.w	r3, [r8, #12]
 800b3b4:	1acb      	subs	r3, r1, r3
 800b3b6:	f8c8 3004 	str.w	r3, [r8, #4]
 800b3ba:	6981      	ldr	r1, [r0, #24]
 800b3bc:	e9d1 2502 	ldrd	r2, r5, [r1, #8]
 800b3c0:	1b52      	subs	r2, r2, r5
 800b3c2:	4413      	add	r3, r2
 800b3c4:	608b      	str	r3, [r1, #8]
 800b3c6:	6983      	ldr	r3, [r0, #24]
 800b3c8:	f8d8 2004 	ldr.w	r2, [r8, #4]
 800b3cc:	60da      	str	r2, [r3, #12]
 800b3ce:	3401      	adds	r4, #1
 800b3d0:	883b      	ldrh	r3, [r7, #0]
 800b3d2:	42a3      	cmp	r3, r4
 800b3d4:	d921      	bls.n	800b41a <ai_platform_network_process+0x3fa>
 800b3d6:	687b      	ldr	r3, [r7, #4]
 800b3d8:	b1fb      	cbz	r3, 800b41a <ai_platform_network_process+0x3fa>
 800b3da:	f853 0024 	ldr.w	r0, [r3, r4, lsl #2]
 800b3de:	b1e0      	cbz	r0, 800b41a <ai_platform_network_process+0x3fa>
 800b3e0:	68ba      	ldr	r2, [r7, #8]
 800b3e2:	ea4f 1a04 	mov.w	sl, r4, lsl #4
 800b3e6:	6983      	ldr	r3, [r0, #24]
 800b3e8:	f8d2 9000 	ldr.w	r9, [r2]
 800b3ec:	681a      	ldr	r2, [r3, #0]
 800b3ee:	eb09 1804 	add.w	r8, r9, r4, lsl #4
 800b3f2:	0092      	lsls	r2, r2, #2
 800b3f4:	d5d5      	bpl.n	800b3a2 <ai_platform_network_process+0x382>
 800b3f6:	6898      	ldr	r0, [r3, #8]
 800b3f8:	e9d8 1201 	ldrd	r1, r2, [r8, #4]
 800b3fc:	f002 fb9c 	bl	800db38 <st_int8_copy>
 800b400:	f859 200a 	ldr.w	r2, [r9, sl]
 800b404:	e9d8 3101 	ldrd	r3, r1, [r8, #4]
 800b408:	440b      	add	r3, r1
 800b40a:	4293      	cmp	r3, r2
 800b40c:	d302      	bcc.n	800b414 <ai_platform_network_process+0x3f4>
 800b40e:	f8d8 300c 	ldr.w	r3, [r8, #12]
 800b412:	1ad3      	subs	r3, r2, r3
 800b414:	f8c8 3004 	str.w	r3, [r8, #4]
 800b418:	e7d9      	b.n	800b3ce <ai_platform_network_process+0x3ae>
 800b41a:	f8bb 401a 	ldrh.w	r4, [fp, #26]
 800b41e:	f8bb 3018 	ldrh.w	r3, [fp, #24]
 800b422:	3401      	adds	r4, #1
 800b424:	b2a4      	uxth	r4, r4
 800b426:	42a3      	cmp	r3, r4
 800b428:	f8ab 401a 	strh.w	r4, [fp, #26]
 800b42c:	f63f af7f 	bhi.w	800b32e <ai_platform_network_process+0x30e>
 800b430:	4620      	mov	r0, r4
 800b432:	b005      	add	sp, #20
 800b434:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800b438:	2a01      	cmp	r2, #1
 800b43a:	6b6e      	ldr	r6, [r5, #52]	@ 0x34
 800b43c:	d033      	beq.n	800b4a6 <ai_platform_network_process+0x486>
 800b43e:	f106 070c 	add.w	r7, r6, #12
 800b442:	e770      	b.n	800b326 <ai_platform_network_process+0x306>
 800b444:	9d03      	ldr	r5, [sp, #12]
 800b446:	2219      	movs	r2, #25
 800b448:	2112      	movs	r1, #18
 800b44a:	2400      	movs	r4, #0
 800b44c:	f105 000c 	add.w	r0, r5, #12
 800b450:	f000 f834 	bl	800b4bc <core_set_error>
 800b454:	e725      	b.n	800b2a2 <ai_platform_network_process+0x282>
 800b456:	9d03      	ldr	r5, [sp, #12]
 800b458:	4604      	mov	r4, r0
 800b45a:	2221      	movs	r2, #33	@ 0x21
 800b45c:	2112      	movs	r1, #18
 800b45e:	f105 000c 	add.w	r0, r5, #12
 800b462:	f000 f82b 	bl	800b4bc <core_set_error>
 800b466:	e71c      	b.n	800b2a2 <ai_platform_network_process+0x282>
 800b468:	f8bd 3004 	ldrh.w	r3, [sp, #4]
 800b46c:	832b      	strh	r3, [r5, #24]
 800b46e:	e755      	b.n	800b31c <ai_platform_network_process+0x2fc>
 800b470:	9d02      	ldr	r5, [sp, #8]
 800b472:	2219      	movs	r2, #25
 800b474:	2113      	movs	r1, #19
 800b476:	2400      	movs	r4, #0
 800b478:	f105 000c 	add.w	r0, r5, #12
 800b47c:	f000 f81e 	bl	800b4bc <core_set_error>
 800b480:	e70f      	b.n	800b2a2 <ai_platform_network_process+0x282>
 800b482:	9d02      	ldr	r5, [sp, #8]
 800b484:	4604      	mov	r4, r0
 800b486:	2221      	movs	r2, #33	@ 0x21
 800b488:	2113      	movs	r1, #19
 800b48a:	f105 000c 	add.w	r0, r5, #12
 800b48e:	f000 f815 	bl	800b4bc <core_set_error>
 800b492:	e706      	b.n	800b2a2 <ai_platform_network_process+0x282>
 800b494:	9d02      	ldr	r5, [sp, #8]
 800b496:	2217      	movs	r2, #23
 800b498:	2113      	movs	r1, #19
 800b49a:	2400      	movs	r4, #0
 800b49c:	f105 000c 	add.w	r0, r5, #12
 800b4a0:	f000 f80c 	bl	800b4bc <core_set_error>
 800b4a4:	e6fd      	b.n	800b2a2 <ai_platform_network_process+0x282>
 800b4a6:	2700      	movs	r7, #0
 800b4a8:	e73d      	b.n	800b326 <ai_platform_network_process+0x306>
 800b4aa:	bf00      	nop

0800b4ac <core_init>:
 800b4ac:	2001      	movs	r0, #1
 800b4ae:	4770      	bx	lr

0800b4b0 <core_get_error>:
 800b4b0:	4603      	mov	r3, r0
 800b4b2:	2200      	movs	r2, #0
 800b4b4:	6800      	ldr	r0, [r0, #0]
 800b4b6:	601a      	str	r2, [r3, #0]
 800b4b8:	4770      	bx	lr
 800b4ba:	bf00      	nop

0800b4bc <core_set_error>:
 800b4bc:	4603      	mov	r3, r0
 800b4be:	7800      	ldrb	r0, [r0, #0]
 800b4c0:	b108      	cbz	r0, 800b4c6 <core_set_error+0xa>
 800b4c2:	2000      	movs	r0, #0
 800b4c4:	4770      	bx	lr
 800b4c6:	7019      	strb	r1, [r3, #0]
 800b4c8:	2001      	movs	r0, #1
 800b4ca:	6819      	ldr	r1, [r3, #0]
 800b4cc:	f362 211f 	bfi	r1, r2, #8, #24
 800b4d0:	6019      	str	r1, [r3, #0]
 800b4d2:	4770      	bx	lr

0800b4d4 <ai_check_custom_types>:
 800b4d4:	b082      	sub	sp, #8
 800b4d6:	4b12      	ldr	r3, [pc, #72]	@ (800b520 <ai_check_custom_types+0x4c>)
 800b4d8:	9301      	str	r3, [sp, #4]
 800b4da:	b118      	cbz	r0, 800b4e4 <ai_check_custom_types+0x10>
 800b4dc:	7803      	ldrb	r3, [r0, #0]
 800b4de:	2b03      	cmp	r3, #3
 800b4e0:	d002      	beq.n	800b4e8 <ai_check_custom_types+0x14>
 800b4e2:	2000      	movs	r0, #0
 800b4e4:	b002      	add	sp, #8
 800b4e6:	4770      	bx	lr
 800b4e8:	f89d 2004 	ldrb.w	r2, [sp, #4]
 800b4ec:	4293      	cmp	r3, r2
 800b4ee:	d004      	beq.n	800b4fa <ai_check_custom_types+0x26>
 800b4f0:	2001      	movs	r0, #1
 800b4f2:	f080 0001 	eor.w	r0, r0, #1
 800b4f6:	b002      	add	sp, #8
 800b4f8:	4770      	bx	lr
 800b4fa:	7842      	ldrb	r2, [r0, #1]
 800b4fc:	3001      	adds	r0, #1
 800b4fe:	f89d 3005 	ldrb.w	r3, [sp, #5]
 800b502:	429a      	cmp	r2, r3
 800b504:	d1f4      	bne.n	800b4f0 <ai_check_custom_types+0x1c>
 800b506:	f810 2f01 	ldrb.w	r2, [r0, #1]!
 800b50a:	f89d 3006 	ldrb.w	r3, [sp, #6]
 800b50e:	429a      	cmp	r2, r3
 800b510:	d1ee      	bne.n	800b4f0 <ai_check_custom_types+0x1c>
 800b512:	7842      	ldrb	r2, [r0, #1]
 800b514:	f89d 3007 	ldrb.w	r3, [sp, #7]
 800b518:	429a      	cmp	r2, r3
 800b51a:	d1e9      	bne.n	800b4f0 <ai_check_custom_types+0x1c>
 800b51c:	2000      	movs	r0, #0
 800b51e:	e7e8      	b.n	800b4f2 <ai_check_custom_types+0x1e>
 800b520:	84048403 	.word	0x84048403

0800b524 <ai_layers_init_all>:
 800b524:	2100      	movs	r1, #0
 800b526:	6b83      	ldr	r3, [r0, #56]	@ 0x38
 800b528:	b13b      	cbz	r3, 800b53a <ai_layers_init_all+0x16>
 800b52a:	691a      	ldr	r2, [r3, #16]
 800b52c:	3101      	adds	r1, #1
 800b52e:	60d8      	str	r0, [r3, #12]
 800b530:	429a      	cmp	r2, r3
 800b532:	4613      	mov	r3, r2
 800b534:	d001      	beq.n	800b53a <ai_layers_init_all+0x16>
 800b536:	2a00      	cmp	r2, #0
 800b538:	d1f6      	bne.n	800b528 <ai_layers_init_all+0x4>
 800b53a:	4608      	mov	r0, r1
 800b53c:	4770      	bx	lr
 800b53e:	bf00      	nop

0800b540 <ai_layers_post_init_all>:
 800b540:	b538      	push	{r3, r4, r5, lr}
 800b542:	2500      	movs	r5, #0
 800b544:	6b84      	ldr	r4, [r0, #56]	@ 0x38
 800b546:	b16c      	cbz	r4, 800b564 <ai_layers_post_init_all+0x24>
 800b548:	6863      	ldr	r3, [r4, #4]
 800b54a:	07db      	lsls	r3, r3, #31
 800b54c:	d504      	bpl.n	800b558 <ai_layers_post_init_all+0x18>
 800b54e:	6a23      	ldr	r3, [r4, #32]
 800b550:	4620      	mov	r0, r4
 800b552:	b10b      	cbz	r3, 800b558 <ai_layers_post_init_all+0x18>
 800b554:	3501      	adds	r5, #1
 800b556:	4798      	blx	r3
 800b558:	6923      	ldr	r3, [r4, #16]
 800b55a:	42a3      	cmp	r3, r4
 800b55c:	461c      	mov	r4, r3
 800b55e:	d001      	beq.n	800b564 <ai_layers_post_init_all+0x24>
 800b560:	2b00      	cmp	r3, #0
 800b562:	d1f0      	bne.n	800b546 <ai_layers_post_init_all+0x6>
 800b564:	4628      	mov	r0, r5
 800b566:	bd38      	pop	{r3, r4, r5, pc}

0800b568 <ai_layers_forward_all>:
 800b568:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800b56c:	f8d0 8040 	ldr.w	r8, [r0, #64]	@ 0x40
 800b570:	4604      	mov	r4, r0
 800b572:	f1b8 0f00 	cmp.w	r8, #0
 800b576:	d02a      	beq.n	800b5ce <ai_layers_forward_all+0x66>
 800b578:	6b81      	ldr	r1, [r0, #56]	@ 0x38
 800b57a:	63c1      	str	r1, [r0, #60]	@ 0x3c
 800b57c:	b319      	cbz	r1, 800b5c6 <ai_layers_forward_all+0x5e>
 800b57e:	6c42      	ldr	r2, [r0, #68]	@ 0x44
 800b580:	2001      	movs	r0, #1
 800b582:	47c0      	blx	r8
 800b584:	6be6      	ldr	r6, [r4, #60]	@ 0x3c
 800b586:	b1f6      	cbz	r6, 800b5c6 <ai_layers_forward_all+0x5e>
 800b588:	2700      	movs	r7, #0
 800b58a:	4631      	mov	r1, r6
 800b58c:	6c62      	ldr	r2, [r4, #68]	@ 0x44
 800b58e:	2002      	movs	r0, #2
 800b590:	47c0      	blx	r8
 800b592:	6be5      	ldr	r5, [r4, #60]	@ 0x3c
 800b594:	4628      	mov	r0, r5
 800b596:	696b      	ldr	r3, [r5, #20]
 800b598:	4798      	blx	r3
 800b59a:	692e      	ldr	r6, [r5, #16]
 800b59c:	2003      	movs	r0, #3
 800b59e:	6c62      	ldr	r2, [r4, #68]	@ 0x44
 800b5a0:	42b5      	cmp	r5, r6
 800b5a2:	6be1      	ldr	r1, [r4, #60]	@ 0x3c
 800b5a4:	d007      	beq.n	800b5b6 <ai_layers_forward_all+0x4e>
 800b5a6:	47c0      	blx	r8
 800b5a8:	3701      	adds	r7, #1
 800b5aa:	63e6      	str	r6, [r4, #60]	@ 0x3c
 800b5ac:	2e00      	cmp	r6, #0
 800b5ae:	d1ec      	bne.n	800b58a <ai_layers_forward_all+0x22>
 800b5b0:	4638      	mov	r0, r7
 800b5b2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800b5b6:	2003      	movs	r0, #3
 800b5b8:	3701      	adds	r7, #1
 800b5ba:	47c0      	blx	r8
 800b5bc:	2300      	movs	r3, #0
 800b5be:	4638      	mov	r0, r7
 800b5c0:	63e3      	str	r3, [r4, #60]	@ 0x3c
 800b5c2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800b5c6:	2700      	movs	r7, #0
 800b5c8:	4638      	mov	r0, r7
 800b5ca:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800b5ce:	6b85      	ldr	r5, [r0, #56]	@ 0x38
 800b5d0:	63c5      	str	r5, [r0, #60]	@ 0x3c
 800b5d2:	2d00      	cmp	r5, #0
 800b5d4:	d0f7      	beq.n	800b5c6 <ai_layers_forward_all+0x5e>
 800b5d6:	4647      	mov	r7, r8
 800b5d8:	696b      	ldr	r3, [r5, #20]
 800b5da:	4628      	mov	r0, r5
 800b5dc:	4798      	blx	r3
 800b5de:	462b      	mov	r3, r5
 800b5e0:	692d      	ldr	r5, [r5, #16]
 800b5e2:	429d      	cmp	r5, r3
 800b5e4:	d004      	beq.n	800b5f0 <ai_layers_forward_all+0x88>
 800b5e6:	3701      	adds	r7, #1
 800b5e8:	63e5      	str	r5, [r4, #60]	@ 0x3c
 800b5ea:	2d00      	cmp	r5, #0
 800b5ec:	d1f4      	bne.n	800b5d8 <ai_layers_forward_all+0x70>
 800b5ee:	e7df      	b.n	800b5b0 <ai_layers_forward_all+0x48>
 800b5f0:	2300      	movs	r3, #0
 800b5f2:	3701      	adds	r7, #1
 800b5f4:	63e3      	str	r3, [r4, #60]	@ 0x3c
 800b5f6:	e7db      	b.n	800b5b0 <ai_layers_forward_all+0x48>

0800b5f8 <func_dummy>:
 800b5f8:	4770      	bx	lr
 800b5fa:	bf00      	nop

0800b5fc <forward_conv2d_sssa8_ch_nl_pool>:
 800b5fc:	6982      	ldr	r2, [r0, #24]
 800b5fe:	8813      	ldrh	r3, [r2, #0]
 800b600:	2b00      	cmp	r3, #0
 800b602:	f000 8230 	beq.w	800ba66 <forward_conv2d_sssa8_ch_nl_pool+0x46a>
 800b606:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b60a:	ed2d 8b06 	vpush	{d8-d10}
 800b60e:	6852      	ldr	r2, [r2, #4]
 800b610:	b0d1      	sub	sp, #324	@ 0x144
 800b612:	4681      	mov	r9, r0
 800b614:	f8d2 a004 	ldr.w	sl, [r2, #4]
 800b618:	f1ba 0f00 	cmp.w	sl, #0
 800b61c:	d001      	beq.n	800b622 <forward_conv2d_sssa8_ch_nl_pool+0x26>
 800b61e:	f8da a000 	ldr.w	sl, [sl]
 800b622:	2b01      	cmp	r3, #1
 800b624:	f000 8276 	beq.w	800bb14 <forward_conv2d_sssa8_ch_nl_pool+0x518>
 800b628:	6911      	ldr	r1, [r2, #16]
 800b62a:	911c      	str	r1, [sp, #112]	@ 0x70
 800b62c:	b109      	cbz	r1, 800b632 <forward_conv2d_sssa8_ch_nl_pool+0x36>
 800b62e:	6809      	ldr	r1, [r1, #0]
 800b630:	911c      	str	r1, [sp, #112]	@ 0x70
 800b632:	2b02      	cmp	r3, #2
 800b634:	f000 8214 	beq.w	800ba60 <forward_conv2d_sssa8_ch_nl_pool+0x464>
 800b638:	69d1      	ldr	r1, [r2, #28]
 800b63a:	2900      	cmp	r1, #0
 800b63c:	f000 8265 	beq.w	800bb0a <forward_conv2d_sssa8_ch_nl_pool+0x50e>
 800b640:	8b10      	ldrh	r0, [r2, #24]
 800b642:	680c      	ldr	r4, [r1, #0]
 800b644:	2801      	cmp	r0, #1
 800b646:	9415      	str	r4, [sp, #84]	@ 0x54
 800b648:	f200 820f 	bhi.w	800ba6a <forward_conv2d_sssa8_ch_nl_pool+0x46e>
 800b64c:	2000      	movs	r0, #0
 800b64e:	9018      	str	r0, [sp, #96]	@ 0x60
 800b650:	2b03      	cmp	r3, #3
 800b652:	f000 8262 	beq.w	800bb1a <forward_conv2d_sssa8_ch_nl_pool+0x51e>
 800b656:	6a93      	ldr	r3, [r2, #40]	@ 0x28
 800b658:	2b00      	cmp	r3, #0
 800b65a:	f000 8259 	beq.w	800bb10 <forward_conv2d_sssa8_ch_nl_pool+0x514>
 800b65e:	6818      	ldr	r0, [r3, #0]
 800b660:	f8d9 2024 	ldr.w	r2, [r9, #36]	@ 0x24
 800b664:	f8d3 8004 	ldr.w	r8, [r3, #4]
 800b668:	9027      	str	r0, [sp, #156]	@ 0x9c
 800b66a:	2a00      	cmp	r2, #0
 800b66c:	f000 8247 	beq.w	800bafe <forward_conv2d_sssa8_ch_nl_pool+0x502>
 800b670:	f8d3 b008 	ldr.w	fp, [r3, #8]
 800b674:	9230      	str	r2, [sp, #192]	@ 0xc0
 800b676:	f8d8 200c 	ldr.w	r2, [r8, #12]
 800b67a:	f8da 500c 	ldr.w	r5, [sl, #12]
 800b67e:	6852      	ldr	r2, [r2, #4]
 800b680:	9c15      	ldr	r4, [sp, #84]	@ 0x54
 800b682:	4616      	mov	r6, r2
 800b684:	981c      	ldr	r0, [sp, #112]	@ 0x70
 800b686:	f8d4 c00c 	ldr.w	ip, [r4, #12]
 800b68a:	b2b6      	uxth	r6, r6
 800b68c:	686c      	ldr	r4, [r5, #4]
 800b68e:	68c0      	ldr	r0, [r0, #12]
 800b690:	9416      	str	r4, [sp, #88]	@ 0x58
 800b692:	9622      	str	r6, [sp, #136]	@ 0x88
 800b694:	f8bd 6058 	ldrh.w	r6, [sp, #88]	@ 0x58
 800b698:	f8d9 303c 	ldr.w	r3, [r9, #60]	@ 0x3c
 800b69c:	ee0a 6a90 	vmov	s21, r6
 800b6a0:	68c6      	ldr	r6, [r0, #12]
 800b6a2:	6880      	ldr	r0, [r0, #8]
 800b6a4:	f8d9 402c 	ldr.w	r4, [r9, #44]	@ 0x2c
 800b6a8:	9036      	str	r0, [sp, #216]	@ 0xd8
 800b6aa:	921b      	str	r2, [sp, #108]	@ 0x6c
 800b6ac:	681a      	ldr	r2, [r3, #0]
 800b6ae:	f8d9 7058 	ldr.w	r7, [r9, #88]	@ 0x58
 800b6b2:	9621      	str	r6, [sp, #132]	@ 0x84
 800b6b4:	e9d5 5002 	ldrd	r5, r0, [r5, #8]
 800b6b8:	951d      	str	r5, [sp, #116]	@ 0x74
 800b6ba:	f8b9 5028 	ldrh.w	r5, [r9, #40]	@ 0x28
 800b6be:	9531      	str	r5, [sp, #196]	@ 0xc4
 800b6c0:	b2a5      	uxth	r5, r4
 800b6c2:	9532      	str	r5, [sp, #200]	@ 0xc8
 800b6c4:	b295      	uxth	r5, r2
 800b6c6:	9517      	str	r5, [sp, #92]	@ 0x5c
 800b6c8:	889d      	ldrh	r5, [r3, #4]
 800b6ca:	689b      	ldr	r3, [r3, #8]
 800b6cc:	9533      	str	r5, [sp, #204]	@ 0xcc
 800b6ce:	f8dc 5008 	ldr.w	r5, [ip, #8]
 800b6d2:	9526      	str	r5, [sp, #152]	@ 0x98
 800b6d4:	f8dc 5004 	ldr.w	r5, [ip, #4]
 800b6d8:	9534      	str	r5, [sp, #208]	@ 0xd0
 800b6da:	f8d9 5044 	ldr.w	r5, [r9, #68]	@ 0x44
 800b6de:	9537      	str	r5, [sp, #220]	@ 0xdc
 800b6e0:	f8d9 504c 	ldr.w	r5, [r9, #76]	@ 0x4c
 800b6e4:	9538      	str	r5, [sp, #224]	@ 0xe0
 800b6e6:	f8d9 5050 	ldr.w	r5, [r9, #80]	@ 0x50
 800b6ea:	951a      	str	r5, [sp, #104]	@ 0x68
 800b6ec:	683d      	ldr	r5, [r7, #0]
 800b6ee:	9528      	str	r5, [sp, #160]	@ 0xa0
 800b6f0:	687d      	ldr	r5, [r7, #4]
 800b6f2:	9539      	str	r5, [sp, #228]	@ 0xe4
 800b6f4:	2900      	cmp	r1, #0
 800b6f6:	f000 81f5 	beq.w	800bae4 <forward_conv2d_sssa8_ch_nl_pool+0x4e8>
 800b6fa:	6889      	ldr	r1, [r1, #8]
 800b6fc:	2900      	cmp	r1, #0
 800b6fe:	f000 81f1 	beq.w	800bae4 <forward_conv2d_sssa8_ch_nl_pool+0x4e8>
 800b702:	698d      	ldr	r5, [r1, #24]
 800b704:	2d00      	cmp	r5, #0
 800b706:	bf08      	it	eq
 800b708:	4629      	moveq	r1, r5
 800b70a:	ee09 1a90 	vmov	s19, r1
 800b70e:	b292      	uxth	r2, r2
 800b710:	f8db 6018 	ldr.w	r6, [fp, #24]
 800b714:	b2a1      	uxth	r1, r4
 800b716:	f8d8 5018 	ldr.w	r5, [r8, #24]
 800b71a:	fa12 f783 	uxtah	r7, r2, r3
 800b71e:	1813      	adds	r3, r2, r0
 800b720:	aa41      	add	r2, sp, #260	@ 0x104
 800b722:	9124      	str	r1, [sp, #144]	@ 0x90
 800b724:	4407      	add	r7, r0
 800b726:	931e      	str	r3, [sp, #120]	@ 0x78
 800b728:	9b26      	ldr	r3, [sp, #152]	@ 0x98
 800b72a:	f10d 0cf4 	add.w	ip, sp, #244	@ 0xf4
 800b72e:	924e      	str	r2, [sp, #312]	@ 0x138
 800b730:	f04f 7280 	mov.w	r2, #16777216	@ 0x1000000
 800b734:	1aff      	subs	r7, r7, r3
 800b736:	ac45      	add	r4, sp, #276	@ 0x114
 800b738:	a849      	add	r0, sp, #292	@ 0x124
 800b73a:	f8cd c130 	str.w	ip, [sp, #304]	@ 0x130
 800b73e:	fbb7 f3f1 	udiv	r3, r7, r1
 800b742:	9f1c      	ldr	r7, [sp, #112]	@ 0x70
 800b744:	f240 4101 	movw	r1, #1025	@ 0x401
 800b748:	9314      	str	r3, [sp, #80]	@ 0x50
 800b74a:	2300      	movs	r3, #0
 800b74c:	69bf      	ldr	r7, [r7, #24]
 800b74e:	9349      	str	r3, [sp, #292]	@ 0x124
 800b750:	933d      	str	r3, [sp, #244]	@ 0xf4
 800b752:	9341      	str	r3, [sp, #260]	@ 0x104
 800b754:	9340      	str	r3, [sp, #256]	@ 0x100
 800b756:	9344      	str	r3, [sp, #272]	@ 0x110
 800b758:	934f      	str	r3, [sp, #316]	@ 0x13c
 800b75a:	9729      	str	r7, [sp, #164]	@ 0xa4
 800b75c:	e9cd 333e 	strd	r3, r3, [sp, #248]	@ 0xf8
 800b760:	e9cd 3342 	strd	r3, r3, [sp, #264]	@ 0x108
 800b764:	f8d9 3048 	ldr.w	r3, [r9, #72]	@ 0x48
 800b768:	e9cd 214a 	strd	r2, r1, [sp, #296]	@ 0x128
 800b76c:	f240 4102 	movw	r1, #1026	@ 0x402
 800b770:	9323      	str	r3, [sp, #140]	@ 0x8c
 800b772:	f8d9 305c 	ldr.w	r3, [r9, #92]	@ 0x5c
 800b776:	914d      	str	r1, [sp, #308]	@ 0x134
 800b778:	4659      	mov	r1, fp
 800b77a:	9335      	str	r3, [sp, #212]	@ 0xd4
 800b77c:	f002 fee2 	bl	800e544 <core_tensor_clone>
 800b780:	4631      	mov	r1, r6
 800b782:	4620      	mov	r0, r4
 800b784:	f002 ff10 	bl	800e5a8 <core_array_clone>
 800b788:	944f      	str	r4, [sp, #316]	@ 0x13c
 800b78a:	f8d8 300c 	ldr.w	r3, [r8, #12]
 800b78e:	9915      	ldr	r1, [sp, #84]	@ 0x54
 800b790:	f8d3 c008 	ldr.w	ip, [r3, #8]
 800b794:	9b27      	ldr	r3, [sp, #156]	@ 0x9c
 800b796:	6809      	ldr	r1, [r1, #0]
 800b798:	699b      	ldr	r3, [r3, #24]
 800b79a:	f8da 2000 	ldr.w	r2, [sl]
 800b79e:	689b      	ldr	r3, [r3, #8]
 800b7a0:	f9bd 40a0 	ldrsh.w	r4, [sp, #160]	@ 0xa0
 800b7a4:	932c      	str	r3, [sp, #176]	@ 0xb0
 800b7a6:	9125      	str	r1, [sp, #148]	@ 0x94
 800b7a8:	f8d8 3000 	ldr.w	r3, [r8]
 800b7ac:	2a00      	cmp	r2, #0
 800b7ae:	f000 8181 	beq.w	800bab4 <forward_conv2d_sssa8_ch_nl_pool+0x4b8>
 800b7b2:	6851      	ldr	r1, [r2, #4]
 800b7b4:	2900      	cmp	r1, #0
 800b7b6:	f000 817d 	beq.w	800bab4 <forward_conv2d_sssa8_ch_nl_pool+0x4b8>
 800b7ba:	8850      	ldrh	r0, [r2, #2]
 800b7bc:	2800      	cmp	r0, #0
 800b7be:	f000 8179 	beq.w	800bab4 <forward_conv2d_sssa8_ch_nl_pool+0x4b8>
 800b7c2:	6809      	ldr	r1, [r1, #0]
 800b7c4:	ed91 8a00 	vldr	s16, [r1]
 800b7c8:	2b00      	cmp	r3, #0
 800b7ca:	f000 8170 	beq.w	800baae <forward_conv2d_sssa8_ch_nl_pool+0x4b2>
 800b7ce:	6859      	ldr	r1, [r3, #4]
 800b7d0:	2900      	cmp	r1, #0
 800b7d2:	f000 816c 	beq.w	800baae <forward_conv2d_sssa8_ch_nl_pool+0x4b2>
 800b7d6:	8858      	ldrh	r0, [r3, #2]
 800b7d8:	2800      	cmp	r0, #0
 800b7da:	f000 8168 	beq.w	800baae <forward_conv2d_sssa8_ch_nl_pool+0x4b2>
 800b7de:	6809      	ldr	r1, [r1, #0]
 800b7e0:	edd1 8a00 	vldr	s17, [r1]
 800b7e4:	9915      	ldr	r1, [sp, #84]	@ 0x54
 800b7e6:	f8da 0018 	ldr.w	r0, [sl, #24]
 800b7ea:	f8d1 e018 	ldr.w	lr, [r1, #24]
 800b7ee:	9918      	ldr	r1, [sp, #96]	@ 0x60
 800b7f0:	6880      	ldr	r0, [r0, #8]
 800b7f2:	6989      	ldr	r1, [r1, #24]
 800b7f4:	9019      	str	r0, [sp, #100]	@ 0x64
 800b7f6:	6889      	ldr	r1, [r1, #8]
 800b7f8:	f8de 0008 	ldr.w	r0, [lr, #8]
 800b7fc:	912f      	str	r1, [sp, #188]	@ 0xbc
 800b7fe:	f899 1041 	ldrb.w	r1, [r9, #65]	@ 0x41
 800b802:	902e      	str	r0, [sp, #184]	@ 0xb8
 800b804:	912d      	str	r1, [sp, #180]	@ 0xb4
 800b806:	9925      	ldr	r1, [sp, #148]	@ 0x94
 800b808:	b121      	cbz	r1, 800b814 <forward_conv2d_sssa8_ch_nl_pool+0x218>
 800b80a:	6849      	ldr	r1, [r1, #4]
 800b80c:	9125      	str	r1, [sp, #148]	@ 0x94
 800b80e:	b109      	cbz	r1, 800b814 <forward_conv2d_sssa8_ch_nl_pool+0x218>
 800b810:	6809      	ldr	r1, [r1, #0]
 800b812:	9125      	str	r1, [sp, #148]	@ 0x94
 800b814:	2a00      	cmp	r2, #0
 800b816:	f000 8163 	beq.w	800bae0 <forward_conv2d_sssa8_ch_nl_pool+0x4e4>
 800b81a:	6851      	ldr	r1, [r2, #4]
 800b81c:	2900      	cmp	r1, #0
 800b81e:	f000 816c 	beq.w	800bafa <forward_conv2d_sssa8_ch_nl_pool+0x4fe>
 800b822:	8852      	ldrh	r2, [r2, #2]
 800b824:	2a00      	cmp	r2, #0
 800b826:	f000 815b 	beq.w	800bae0 <forward_conv2d_sssa8_ch_nl_pool+0x4e4>
 800b82a:	684a      	ldr	r2, [r1, #4]
 800b82c:	f992 2000 	ldrsb.w	r2, [r2]
 800b830:	922a      	str	r2, [sp, #168]	@ 0xa8
 800b832:	2b00      	cmp	r3, #0
 800b834:	f000 8152 	beq.w	800badc <forward_conv2d_sssa8_ch_nl_pool+0x4e0>
 800b838:	685a      	ldr	r2, [r3, #4]
 800b83a:	2a00      	cmp	r2, #0
 800b83c:	f000 8163 	beq.w	800bb06 <forward_conv2d_sssa8_ch_nl_pool+0x50a>
 800b840:	885b      	ldrh	r3, [r3, #2]
 800b842:	2b00      	cmp	r3, #0
 800b844:	f000 814a 	beq.w	800badc <forward_conv2d_sssa8_ch_nl_pool+0x4e0>
 800b848:	6853      	ldr	r3, [r2, #4]
 800b84a:	f993 3000 	ldrsb.w	r3, [r3]
 800b84e:	932b      	str	r3, [sp, #172]	@ 0xac
 800b850:	9b21      	ldr	r3, [sp, #132]	@ 0x84
 800b852:	2b00      	cmp	r3, #0
 800b854:	f000 811f 	beq.w	800ba96 <forward_conv2d_sssa8_ch_nl_pool+0x49a>
 800b858:	f8bd 206c 	ldrh.w	r2, [sp, #108]	@ 0x6c
 800b85c:	f04f 0a00 	mov.w	sl, #0
 800b860:	991d      	ldr	r1, [sp, #116]	@ 0x74
 800b862:	fb0c f202 	mul.w	r2, ip, r2
 800b866:	f8bd 3058 	ldrh.w	r3, [sp, #88]	@ 0x58
 800b86a:	9418      	str	r4, [sp, #96]	@ 0x60
 800b86c:	ee09 2a10 	vmov	s18, r2
 800b870:	fa1f f28c 	uxth.w	r2, ip
 800b874:	f8cd a06c 	str.w	sl, [sp, #108]	@ 0x6c
 800b878:	9220      	str	r2, [sp, #128]	@ 0x80
 800b87a:	9a24      	ldr	r2, [sp, #144]	@ 0x90
 800b87c:	fb01 f202 	mul.w	r2, r1, r2
 800b880:	fb03 f202 	mul.w	r2, r3, r2
 800b884:	fb01 f303 	mul.w	r3, r1, r3
 800b888:	923a      	str	r2, [sp, #232]	@ 0xe8
 800b88a:	933b      	str	r3, [sp, #236]	@ 0xec
 800b88c:	b28b      	uxth	r3, r1
 800b88e:	ee0a 3a10 	vmov	s20, r3
 800b892:	f9bd 308c 	ldrsh.w	r3, [sp, #140]	@ 0x8c
 800b896:	931d      	str	r3, [sp, #116]	@ 0x74
 800b898:	9b26      	ldr	r3, [sp, #152]	@ 0x98
 800b89a:	931f      	str	r3, [sp, #124]	@ 0x7c
 800b89c:	e0be      	b.n	800ba1c <forward_conv2d_sssa8_ch_nl_pool+0x420>
 800b89e:	9b27      	ldr	r3, [sp, #156]	@ 0x9c
 800b8a0:	68aa      	ldr	r2, [r5, #8]
 800b8a2:	699b      	ldr	r3, [r3, #24]
 800b8a4:	9215      	str	r2, [sp, #84]	@ 0x54
 800b8a6:	e9d3 0100 	ldrd	r0, r1, [r3]
 800b8aa:	f002 fdf5 	bl	800e498 <ai_array_get_byte_size>
 800b8ae:	9b2d      	ldr	r3, [sp, #180]	@ 0xb4
 800b8b0:	9a15      	ldr	r2, [sp, #84]	@ 0x54
 800b8b2:	eef0 0a68 	vmov.f32	s1, s17
 800b8b6:	930c      	str	r3, [sp, #48]	@ 0x30
 800b8b8:	eeb0 0a48 	vmov.f32	s0, s16
 800b8bc:	9b25      	ldr	r3, [sp, #148]	@ 0x94
 800b8be:	ee1a 1a10 	vmov	r1, s20
 800b8c2:	920d      	str	r2, [sp, #52]	@ 0x34
 800b8c4:	930b      	str	r3, [sp, #44]	@ 0x2c
 800b8c6:	9b2b      	ldr	r3, [sp, #172]	@ 0xac
 800b8c8:	9011      	str	r0, [sp, #68]	@ 0x44
 800b8ca:	930a      	str	r3, [sp, #40]	@ 0x28
 800b8cc:	9b2a      	ldr	r3, [sp, #168]	@ 0xa8
 800b8ce:	9309      	str	r3, [sp, #36]	@ 0x24
 800b8d0:	9b2f      	ldr	r3, [sp, #188]	@ 0xbc
 800b8d2:	9308      	str	r3, [sp, #32]
 800b8d4:	9b17      	ldr	r3, [sp, #92]	@ 0x5c
 800b8d6:	9307      	str	r3, [sp, #28]
 800b8d8:	9b33      	ldr	r3, [sp, #204]	@ 0xcc
 800b8da:	9306      	str	r3, [sp, #24]
 800b8dc:	9b32      	ldr	r3, [sp, #200]	@ 0xc8
 800b8de:	9305      	str	r3, [sp, #20]
 800b8e0:	9b31      	ldr	r3, [sp, #196]	@ 0xc4
 800b8e2:	9304      	str	r3, [sp, #16]
 800b8e4:	9b22      	ldr	r3, [sp, #136]	@ 0x88
 800b8e6:	9301      	str	r3, [sp, #4]
 800b8e8:	9b2e      	ldr	r3, [sp, #184]	@ 0xb8
 800b8ea:	9300      	str	r3, [sp, #0]
 800b8ec:	9b2c      	ldr	r3, [sp, #176]	@ 0xb0
 800b8ee:	9312      	str	r3, [sp, #72]	@ 0x48
 800b8f0:	2301      	movs	r3, #1
 800b8f2:	930f      	str	r3, [sp, #60]	@ 0x3c
 800b8f4:	9b20      	ldr	r3, [sp, #128]	@ 0x80
 800b8f6:	930e      	str	r3, [sp, #56]	@ 0x38
 800b8f8:	f8bd 3098 	ldrh.w	r3, [sp, #152]	@ 0x98
 800b8fc:	9303      	str	r3, [sp, #12]
 800b8fe:	f8bd 30d0 	ldrh.w	r3, [sp, #208]	@ 0xd0
 800b902:	9f1f      	ldr	r7, [sp, #124]	@ 0x7c
 800b904:	9302      	str	r3, [sp, #8]
 800b906:	9b28      	ldr	r3, [sp, #160]	@ 0xa0
 800b908:	b2ba      	uxth	r2, r7
 800b90a:	9819      	ldr	r0, [sp, #100]	@ 0x64
 800b90c:	429c      	cmp	r4, r3
 800b90e:	bf08      	it	eq
 800b910:	f1ba 0f00 	cmpeq.w	sl, #0
 800b914:	bf0c      	ite	eq
 800b916:	2301      	moveq	r3, #1
 800b918:	2300      	movne	r3, #0
 800b91a:	9310      	str	r3, [sp, #64]	@ 0x40
 800b91c:	ee1a 3a90 	vmov	r3, s21
 800b920:	f000 fc80 	bl	800c224 <forward_lite_conv2d_sssa8_ch>
 800b924:	9b24      	ldr	r3, [sp, #144]	@ 0x90
 800b926:	9a1e      	ldr	r2, [sp, #120]	@ 0x78
 800b928:	4293      	cmp	r3, r2
 800b92a:	f000 80b0 	beq.w	800ba8e <forward_conv2d_sssa8_ch_nl_pool+0x492>
 800b92e:	1ad3      	subs	r3, r2, r3
 800b930:	463a      	mov	r2, r7
 800b932:	429f      	cmp	r7, r3
 800b934:	931e      	str	r3, [sp, #120]	@ 0x78
 800b936:	bf28      	it	cs
 800b938:	461a      	movcs	r2, r3
 800b93a:	921f      	str	r2, [sp, #124]	@ 0x7c
 800b93c:	9b17      	ldr	r3, [sp, #92]	@ 0x5c
 800b93e:	2b00      	cmp	r3, #0
 800b940:	f040 8096 	bne.w	800ba70 <forward_conv2d_sssa8_ch_nl_pool+0x474>
 800b944:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 800b946:	9a3a      	ldr	r2, [sp, #232]	@ 0xe8
 800b948:	4413      	add	r3, r2
 800b94a:	9319      	str	r3, [sp, #100]	@ 0x64
 800b94c:	3401      	adds	r4, #1
 800b94e:	ee19 3a90 	vmov	r3, s19
 800b952:	ee19 2a10 	vmov	r2, s18
 800b956:	4641      	mov	r1, r8
 800b958:	b224      	sxth	r4, r4
 800b95a:	4658      	mov	r0, fp
 800b95c:	9f30      	ldr	r7, [sp, #192]	@ 0xc0
 800b95e:	47b8      	blx	r7
 800b960:	9b1d      	ldr	r3, [sp, #116]	@ 0x74
 800b962:	429c      	cmp	r4, r3
 800b964:	db32      	blt.n	800b9cc <forward_conv2d_sssa8_ch_nl_pool+0x3d0>
 800b966:	9b1c      	ldr	r3, [sp, #112]	@ 0x70
 800b968:	2201      	movs	r2, #1
 800b96a:	991b      	ldr	r1, [sp, #108]	@ 0x6c
 800b96c:	a849      	add	r0, sp, #292	@ 0x124
 800b96e:	9308      	str	r3, [sp, #32]
 800b970:	4492      	add	sl, r2
 800b972:	f8bd 3068 	ldrh.w	r3, [sp, #104]	@ 0x68
 800b976:	9207      	str	r2, [sp, #28]
 800b978:	1ae4      	subs	r4, r4, r3
 800b97a:	9305      	str	r3, [sp, #20]
 800b97c:	f8bd 3060 	ldrh.w	r3, [sp, #96]	@ 0x60
 800b980:	f8bd 208c 	ldrh.w	r2, [sp, #140]	@ 0x8c
 800b984:	b224      	sxth	r4, r4
 800b986:	9303      	str	r3, [sp, #12]
 800b988:	f8bd 30d8 	ldrh.w	r3, [sp, #216]	@ 0xd8
 800b98c:	9201      	str	r2, [sp, #4]
 800b98e:	1a52      	subs	r2, r2, r1
 800b990:	9306      	str	r3, [sp, #24]
 800b992:	f8bd 30e0 	ldrh.w	r3, [sp, #224]	@ 0xe0
 800b996:	b292      	uxth	r2, r2
 800b998:	9920      	ldr	r1, [sp, #128]	@ 0x80
 800b99a:	9304      	str	r3, [sp, #16]
 800b99c:	f8bd 30e4 	ldrh.w	r3, [sp, #228]	@ 0xe4
 800b9a0:	9f35      	ldr	r7, [sp, #212]	@ 0xd4
 800b9a2:	9302      	str	r3, [sp, #8]
 800b9a4:	f8bd 30dc 	ldrh.w	r3, [sp, #220]	@ 0xdc
 800b9a8:	9300      	str	r3, [sp, #0]
 800b9aa:	9b22      	ldr	r3, [sp, #136]	@ 0x88
 800b9ac:	47b8      	blx	r7
 800b9ae:	9a18      	ldr	r2, [sp, #96]	@ 0x60
 800b9b0:	f9bd 3068 	ldrsh.w	r3, [sp, #104]	@ 0x68
 800b9b4:	9929      	ldr	r1, [sp, #164]	@ 0xa4
 800b9b6:	1ad3      	subs	r3, r2, r3
 800b9b8:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 800b9bc:	b21a      	sxth	r2, r3
 800b9be:	9b1c      	ldr	r3, [sp, #112]	@ 0x70
 800b9c0:	695b      	ldr	r3, [r3, #20]
 800b9c2:	9218      	str	r2, [sp, #96]	@ 0x60
 800b9c4:	68da      	ldr	r2, [r3, #12]
 800b9c6:	688b      	ldr	r3, [r1, #8]
 800b9c8:	4413      	add	r3, r2
 800b9ca:	608b      	str	r3, [r1, #8]
 800b9cc:	f8d8 3014 	ldr.w	r3, [r8, #20]
 800b9d0:	68da      	ldr	r2, [r3, #12]
 800b9d2:	68ab      	ldr	r3, [r5, #8]
 800b9d4:	4413      	add	r3, r2
 800b9d6:	60ab      	str	r3, [r5, #8]
 800b9d8:	f8d9 2024 	ldr.w	r2, [r9, #36]	@ 0x24
 800b9dc:	b132      	cbz	r2, 800b9ec <forward_conv2d_sssa8_ch_nl_pool+0x3f0>
 800b9de:	f8db 3014 	ldr.w	r3, [fp, #20]
 800b9e2:	68da      	ldr	r2, [r3, #12]
 800b9e4:	68b3      	ldr	r3, [r6, #8]
 800b9e6:	4413      	add	r3, r2
 800b9e8:	60b3      	str	r3, [r6, #8]
 800b9ea:	68ab      	ldr	r3, [r5, #8]
 800b9ec:	68ea      	ldr	r2, [r5, #12]
 800b9ee:	4640      	mov	r0, r8
 800b9f0:	9316      	str	r3, [sp, #88]	@ 0x58
 800b9f2:	9215      	str	r2, [sp, #84]	@ 0x54
 800b9f4:	f002 fd90 	bl	800e518 <get_tensor_byte_size>
 800b9f8:	9a15      	ldr	r2, [sp, #84]	@ 0x54
 800b9fa:	9b16      	ldr	r3, [sp, #88]	@ 0x58
 800b9fc:	4410      	add	r0, r2
 800b9fe:	4283      	cmp	r3, r0
 800ba00:	d306      	bcc.n	800ba10 <forward_conv2d_sssa8_ch_nl_pool+0x414>
 800ba02:	68eb      	ldr	r3, [r5, #12]
 800ba04:	60ab      	str	r3, [r5, #8]
 800ba06:	f8d9 3024 	ldr.w	r3, [r9, #36]	@ 0x24
 800ba0a:	b10b      	cbz	r3, 800ba10 <forward_conv2d_sssa8_ch_nl_pool+0x414>
 800ba0c:	68f3      	ldr	r3, [r6, #12]
 800ba0e:	60b3      	str	r3, [r6, #8]
 800ba10:	9b14      	ldr	r3, [sp, #80]	@ 0x50
 800ba12:	3b01      	subs	r3, #1
 800ba14:	9314      	str	r3, [sp, #80]	@ 0x50
 800ba16:	9b21      	ldr	r3, [sp, #132]	@ 0x84
 800ba18:	459a      	cmp	sl, r3
 800ba1a:	d23c      	bcs.n	800ba96 <forward_conv2d_sssa8_ch_nl_pool+0x49a>
 800ba1c:	9b14      	ldr	r3, [sp, #80]	@ 0x50
 800ba1e:	3301      	adds	r3, #1
 800ba20:	2b00      	cmp	r3, #0
 800ba22:	f73f af3c 	bgt.w	800b89e <forward_conv2d_sssa8_ch_nl_pool+0x2a2>
 800ba26:	9b14      	ldr	r3, [sp, #80]	@ 0x50
 800ba28:	2b00      	cmp	r3, #0
 800ba2a:	da99      	bge.n	800b960 <forward_conv2d_sssa8_ch_nl_pool+0x364>
 800ba2c:	ee19 3a10 	vmov	r3, s18
 800ba30:	e9d6 1202 	ldrd	r1, r2, [r6, #8]
 800ba34:	fb03 1314 	mls	r3, r3, r4, r1
 800ba38:	429a      	cmp	r2, r3
 800ba3a:	d901      	bls.n	800ba40 <forward_conv2d_sssa8_ch_nl_pool+0x444>
 800ba3c:	6870      	ldr	r0, [r6, #4]
 800ba3e:	4403      	add	r3, r0
 800ba40:	429a      	cmp	r2, r3
 800ba42:	d202      	bcs.n	800ba4a <forward_conv2d_sssa8_ch_nl_pool+0x44e>
 800ba44:	981d      	ldr	r0, [sp, #116]	@ 0x74
 800ba46:	42a0      	cmp	r0, r4
 800ba48:	d137      	bne.n	800baba <forward_conv2d_sssa8_ch_nl_pool+0x4be>
 800ba4a:	9b1b      	ldr	r3, [sp, #108]	@ 0x6c
 800ba4c:	b2a4      	uxth	r4, r4
 800ba4e:	9a23      	ldr	r2, [sp, #140]	@ 0x8c
 800ba50:	4413      	add	r3, r2
 800ba52:	9a1a      	ldr	r2, [sp, #104]	@ 0x68
 800ba54:	1b1b      	subs	r3, r3, r4
 800ba56:	4414      	add	r4, r2
 800ba58:	b21b      	sxth	r3, r3
 800ba5a:	b224      	sxth	r4, r4
 800ba5c:	931b      	str	r3, [sp, #108]	@ 0x6c
 800ba5e:	e77f      	b.n	800b960 <forward_conv2d_sssa8_ch_nl_pool+0x364>
 800ba60:	2300      	movs	r3, #0
 800ba62:	685b      	ldr	r3, [r3, #4]
 800ba64:	deff      	udf	#255	@ 0xff
 800ba66:	685b      	ldr	r3, [r3, #4]
 800ba68:	deff      	udf	#255	@ 0xff
 800ba6a:	6848      	ldr	r0, [r1, #4]
 800ba6c:	9018      	str	r0, [sp, #96]	@ 0x60
 800ba6e:	e5ef      	b.n	800b650 <forward_conv2d_sssa8_ch_nl_pool+0x54>
 800ba70:	9924      	ldr	r1, [sp, #144]	@ 0x90
 800ba72:	461a      	mov	r2, r3
 800ba74:	1a5b      	subs	r3, r3, r1
 800ba76:	d505      	bpl.n	800ba84 <forward_conv2d_sssa8_ch_nl_pool+0x488>
 800ba78:	1a8a      	subs	r2, r1, r2
 800ba7a:	983b      	ldr	r0, [sp, #236]	@ 0xec
 800ba7c:	9919      	ldr	r1, [sp, #100]	@ 0x64
 800ba7e:	fb00 1202 	mla	r2, r0, r2, r1
 800ba82:	9219      	str	r2, [sp, #100]	@ 0x64
 800ba84:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 800ba88:	b29b      	uxth	r3, r3
 800ba8a:	9317      	str	r3, [sp, #92]	@ 0x5c
 800ba8c:	e75e      	b.n	800b94c <forward_conv2d_sssa8_ch_nl_pool+0x350>
 800ba8e:	2300      	movs	r3, #0
 800ba90:	e9cd 331e 	strd	r3, r3, [sp, #120]	@ 0x78
 800ba94:	e752      	b.n	800b93c <forward_conv2d_sssa8_ch_nl_pool+0x340>
 800ba96:	68eb      	ldr	r3, [r5, #12]
 800ba98:	9a29      	ldr	r2, [sp, #164]	@ 0xa4
 800ba9a:	60ab      	str	r3, [r5, #8]
 800ba9c:	68f3      	ldr	r3, [r6, #12]
 800ba9e:	60b3      	str	r3, [r6, #8]
 800baa0:	68d3      	ldr	r3, [r2, #12]
 800baa2:	6093      	str	r3, [r2, #8]
 800baa4:	b051      	add	sp, #324	@ 0x144
 800baa6:	ecbd 8b06 	vpop	{d8-d10}
 800baaa:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800baae:	eef7 8a00 	vmov.f32	s17, #112	@ 0x3f800000  1.0
 800bab2:	e697      	b.n	800b7e4 <forward_conv2d_sssa8_ch_nl_pool+0x1e8>
 800bab4:	eeb7 8a00 	vmov.f32	s16, #112	@ 0x3f800000  1.0
 800bab8:	e686      	b.n	800b7c8 <forward_conv2d_sssa8_ch_nl_pool+0x1cc>
 800baba:	6870      	ldr	r0, [r6, #4]
 800babc:	4402      	add	r2, r0
 800babe:	4293      	cmp	r3, r2
 800bac0:	d2c3      	bcs.n	800ba4a <forward_conv2d_sssa8_ch_nl_pool+0x44e>
 800bac2:	3901      	subs	r1, #1
 800bac4:	9f14      	ldr	r7, [sp, #80]	@ 0x50
 800bac6:	f813 2b01 	ldrb.w	r2, [r3], #1
 800baca:	f801 2f01 	strb.w	r2, [r1, #1]!
 800bace:	68f2      	ldr	r2, [r6, #12]
 800bad0:	6870      	ldr	r0, [r6, #4]
 800bad2:	4402      	add	r2, r0
 800bad4:	4293      	cmp	r3, r2
 800bad6:	d3f6      	bcc.n	800bac6 <forward_conv2d_sssa8_ch_nl_pool+0x4ca>
 800bad8:	9714      	str	r7, [sp, #80]	@ 0x50
 800bada:	e7b6      	b.n	800ba4a <forward_conv2d_sssa8_ch_nl_pool+0x44e>
 800badc:	932b      	str	r3, [sp, #172]	@ 0xac
 800bade:	e6b7      	b.n	800b850 <forward_conv2d_sssa8_ch_nl_pool+0x254>
 800bae0:	922a      	str	r2, [sp, #168]	@ 0xa8
 800bae2:	e6a6      	b.n	800b832 <forward_conv2d_sssa8_ch_nl_pool+0x236>
 800bae4:	f8d9 1020 	ldr.w	r1, [r9, #32]
 800bae8:	ee09 1a90 	vmov	s19, r1
 800baec:	2900      	cmp	r1, #0
 800baee:	f43f ae0e 	beq.w	800b70e <forward_conv2d_sssa8_ch_nl_pool+0x112>
 800baf2:	6889      	ldr	r1, [r1, #8]
 800baf4:	ee09 1a90 	vmov	s19, r1
 800baf8:	e609      	b.n	800b70e <forward_conv2d_sssa8_ch_nl_pool+0x112>
 800bafa:	912a      	str	r1, [sp, #168]	@ 0xa8
 800bafc:	e699      	b.n	800b832 <forward_conv2d_sssa8_ch_nl_pool+0x236>
 800bafe:	4b08      	ldr	r3, [pc, #32]	@ (800bb20 <forward_conv2d_sssa8_ch_nl_pool+0x524>)
 800bb00:	46c3      	mov	fp, r8
 800bb02:	9330      	str	r3, [sp, #192]	@ 0xc0
 800bb04:	e5b7      	b.n	800b676 <forward_conv2d_sssa8_ch_nl_pool+0x7a>
 800bb06:	922b      	str	r2, [sp, #172]	@ 0xac
 800bb08:	e6a2      	b.n	800b850 <forward_conv2d_sssa8_ch_nl_pool+0x254>
 800bb0a:	9115      	str	r1, [sp, #84]	@ 0x54
 800bb0c:	9118      	str	r1, [sp, #96]	@ 0x60
 800bb0e:	e59f      	b.n	800b650 <forward_conv2d_sssa8_ch_nl_pool+0x54>
 800bb10:	68db      	ldr	r3, [r3, #12]
 800bb12:	deff      	udf	#255	@ 0xff
 800bb14:	2300      	movs	r3, #0
 800bb16:	685b      	ldr	r3, [r3, #4]
 800bb18:	deff      	udf	#255	@ 0xff
 800bb1a:	2300      	movs	r3, #0
 800bb1c:	685b      	ldr	r3, [r3, #4]
 800bb1e:	deff      	udf	#255	@ 0xff
 800bb20:	0800b5f9 	.word	0x0800b5f9

0800bb24 <forward_dense_integer_SSSA_ch>:
 800bb24:	6983      	ldr	r3, [r0, #24]
 800bb26:	8818      	ldrh	r0, [r3, #0]
 800bb28:	2800      	cmp	r0, #0
 800bb2a:	f000 80af 	beq.w	800bc8c <forward_dense_integer_SSSA_ch+0x168>
 800bb2e:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800bb32:	685c      	ldr	r4, [r3, #4]
 800bb34:	b08f      	sub	sp, #60	@ 0x3c
 800bb36:	6863      	ldr	r3, [r4, #4]
 800bb38:	b103      	cbz	r3, 800bb3c <forward_dense_integer_SSSA_ch+0x18>
 800bb3a:	681b      	ldr	r3, [r3, #0]
 800bb3c:	2801      	cmp	r0, #1
 800bb3e:	f000 813b 	beq.w	800bdb8 <forward_dense_integer_SSSA_ch+0x294>
 800bb42:	6922      	ldr	r2, [r4, #16]
 800bb44:	b102      	cbz	r2, 800bb48 <forward_dense_integer_SSSA_ch+0x24>
 800bb46:	6812      	ldr	r2, [r2, #0]
 800bb48:	2802      	cmp	r0, #2
 800bb4a:	f000 8138 	beq.w	800bdbe <forward_dense_integer_SSSA_ch+0x29a>
 800bb4e:	69e5      	ldr	r5, [r4, #28]
 800bb50:	2d00      	cmp	r5, #0
 800bb52:	f000 80f2 	beq.w	800bd3a <forward_dense_integer_SSSA_ch+0x216>
 800bb56:	8b26      	ldrh	r6, [r4, #24]
 800bb58:	6829      	ldr	r1, [r5, #0]
 800bb5a:	2e01      	cmp	r6, #1
 800bb5c:	f240 8117 	bls.w	800bd8e <forward_dense_integer_SSSA_ch+0x26a>
 800bb60:	686d      	ldr	r5, [r5, #4]
 800bb62:	2803      	cmp	r0, #3
 800bb64:	f000 812e 	beq.w	800bdc4 <forward_dense_integer_SSSA_ch+0x2a0>
 800bb68:	f8d4 8028 	ldr.w	r8, [r4, #40]	@ 0x28
 800bb6c:	69a8      	ldr	r0, [r5, #24]
 800bb6e:	f1b8 0f00 	cmp.w	r8, #0
 800bb72:	f000 80f9 	beq.w	800bd68 <forward_dense_integer_SSSA_ch+0x244>
 800bb76:	6880      	ldr	r0, [r0, #8]
 800bb78:	68dc      	ldr	r4, [r3, #12]
 800bb7a:	900d      	str	r0, [sp, #52]	@ 0x34
 800bb7c:	68d0      	ldr	r0, [r2, #12]
 800bb7e:	6866      	ldr	r6, [r4, #4]
 800bb80:	f8d8 8000 	ldr.w	r8, [r8]
 800bb84:	6995      	ldr	r5, [r2, #24]
 800bb86:	fa1f fa86 	uxth.w	sl, r6
 800bb8a:	9609      	str	r6, [sp, #36]	@ 0x24
 800bb8c:	e9d0 9401 	ldrd	r9, r4, [r0, #4]
 800bb90:	68c0      	ldr	r0, [r0, #12]
 800bb92:	fa1f fb89 	uxth.w	fp, r9
 800bb96:	fb00 f004 	mul.w	r0, r0, r4
 800bb9a:	699c      	ldr	r4, [r3, #24]
 800bb9c:	9008      	str	r0, [sp, #32]
 800bb9e:	f1b8 0f00 	cmp.w	r8, #0
 800bba2:	d003      	beq.n	800bbac <forward_dense_integer_SSSA_ch+0x88>
 800bba4:	f8d8 0018 	ldr.w	r0, [r8, #24]
 800bba8:	f8d0 8008 	ldr.w	r8, [r0, #8]
 800bbac:	681b      	ldr	r3, [r3, #0]
 800bbae:	f8d2 c000 	ldr.w	ip, [r2]
 800bbb2:	6808      	ldr	r0, [r1, #0]
 800bbb4:	698a      	ldr	r2, [r1, #24]
 800bbb6:	2b00      	cmp	r3, #0
 800bbb8:	d076      	beq.n	800bca8 <forward_dense_integer_SSSA_ch+0x184>
 800bbba:	6859      	ldr	r1, [r3, #4]
 800bbbc:	2900      	cmp	r1, #0
 800bbbe:	f000 809f 	beq.w	800bd00 <forward_dense_integer_SSSA_ch+0x1dc>
 800bbc2:	885e      	ldrh	r6, [r3, #2]
 800bbc4:	2e00      	cmp	r6, #0
 800bbc6:	f000 808b 	beq.w	800bce0 <forward_dense_integer_SSSA_ch+0x1bc>
 800bbca:	680f      	ldr	r7, [r1, #0]
 800bbcc:	ed97 0a00 	vldr	s0, [r7]
 800bbd0:	f1bc 0f00 	cmp.w	ip, #0
 800bbd4:	f000 808a 	beq.w	800bcec <forward_dense_integer_SSSA_ch+0x1c8>
 800bbd8:	f8dc e004 	ldr.w	lr, [ip, #4]
 800bbdc:	f1be 0f00 	cmp.w	lr, #0
 800bbe0:	f000 8099 	beq.w	800bd16 <forward_dense_integer_SSSA_ch+0x1f2>
 800bbe4:	f8bc 6002 	ldrh.w	r6, [ip, #2]
 800bbe8:	2e00      	cmp	r6, #0
 800bbea:	d051      	beq.n	800bc90 <forward_dense_integer_SSSA_ch+0x16c>
 800bbec:	6897      	ldr	r7, [r2, #8]
 800bbee:	f8de 2000 	ldr.w	r2, [lr]
 800bbf2:	68ad      	ldr	r5, [r5, #8]
 800bbf4:	68a4      	ldr	r4, [r4, #8]
 800bbf6:	edd2 0a00 	vldr	s1, [r2]
 800bbfa:	2900      	cmp	r1, #0
 800bbfc:	d052      	beq.n	800bca4 <forward_dense_integer_SSSA_ch+0x180>
 800bbfe:	885b      	ldrh	r3, [r3, #2]
 800bc00:	2b00      	cmp	r3, #0
 800bc02:	f000 8091 	beq.w	800bd28 <forward_dense_integer_SSSA_ch+0x204>
 800bc06:	684b      	ldr	r3, [r1, #4]
 800bc08:	f993 3000 	ldrsb.w	r3, [r3]
 800bc0c:	930c      	str	r3, [sp, #48]	@ 0x30
 800bc0e:	f1bc 0f00 	cmp.w	ip, #0
 800bc12:	f000 80ce 	beq.w	800bdb2 <forward_dense_integer_SSSA_ch+0x28e>
 800bc16:	f1be 0f00 	cmp.w	lr, #0
 800bc1a:	f000 808b 	beq.w	800bd34 <forward_dense_integer_SSSA_ch+0x210>
 800bc1e:	f8bc 6002 	ldrh.w	r6, [ip, #2]
 800bc22:	2e00      	cmp	r6, #0
 800bc24:	d156      	bne.n	800bcd4 <forward_dense_integer_SSSA_ch+0x1b0>
 800bc26:	960b      	str	r6, [sp, #44]	@ 0x2c
 800bc28:	b110      	cbz	r0, 800bc30 <forward_dense_integer_SSSA_ch+0x10c>
 800bc2a:	6840      	ldr	r0, [r0, #4]
 800bc2c:	b100      	cbz	r0, 800bc30 <forward_dense_integer_SSSA_ch+0x10c>
 800bc2e:	6800      	ldr	r0, [r0, #0]
 800bc30:	fa1f f989 	uxth.w	r9, r9
 800bc34:	4642      	mov	r2, r8
 800bc36:	4659      	mov	r1, fp
 800bc38:	eb08 03c9 	add.w	r3, r8, r9, lsl #3
 800bc3c:	930a      	str	r3, [sp, #40]	@ 0x28
 800bc3e:	f001 f93d 	bl	800cebc <align_factor_ch>
 800bc42:	9b08      	ldr	r3, [sp, #32]
 800bc44:	b1fb      	cbz	r3, 800bc86 <forward_dense_integer_SSSA_ch+0x162>
 800bc46:	f8bd 1024 	ldrh.w	r1, [sp, #36]	@ 0x24
 800bc4a:	4652      	mov	r2, sl
 800bc4c:	2600      	movs	r6, #0
 800bc4e:	468a      	mov	sl, r1
 800bc50:	4639      	mov	r1, r7
 800bc52:	4647      	mov	r7, r8
 800bc54:	4698      	mov	r8, r3
 800bc56:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 800bc58:	3601      	adds	r6, #1
 800bc5a:	4620      	mov	r0, r4
 800bc5c:	4454      	add	r4, sl
 800bc5e:	9304      	str	r3, [sp, #16]
 800bc60:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800bc62:	9303      	str	r3, [sp, #12]
 800bc64:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 800bc66:	9302      	str	r3, [sp, #8]
 800bc68:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800bc6a:	e9cd 5705 	strd	r5, r7, [sp, #20]
 800bc6e:	e9cd 7300 	strd	r7, r3, [sp]
 800bc72:	465b      	mov	r3, fp
 800bc74:	444d      	add	r5, r9
 800bc76:	e9cd 1208 	strd	r1, r2, [sp, #32]
 800bc7a:	f001 fcc5 	bl	800d608 <st_sssa8_ch_fully_connected>
 800bc7e:	4546      	cmp	r6, r8
 800bc80:	e9dd 1208 	ldrd	r1, r2, [sp, #32]
 800bc84:	d1e7      	bne.n	800bc56 <forward_dense_integer_SSSA_ch+0x132>
 800bc86:	b00f      	add	sp, #60	@ 0x3c
 800bc88:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800bc8c:	6843      	ldr	r3, [r0, #4]
 800bc8e:	deff      	udf	#255	@ 0xff
 800bc90:	68ad      	ldr	r5, [r5, #8]
 800bc92:	68a4      	ldr	r4, [r4, #8]
 800bc94:	6897      	ldr	r7, [r2, #8]
 800bc96:	2b00      	cmp	r3, #0
 800bc98:	d052      	beq.n	800bd40 <forward_dense_integer_SSSA_ch+0x21c>
 800bc9a:	6859      	ldr	r1, [r3, #4]
 800bc9c:	eef7 0a00 	vmov.f32	s1, #112	@ 0x3f800000  1.0
 800bca0:	2900      	cmp	r1, #0
 800bca2:	d1ac      	bne.n	800bbfe <forward_dense_integer_SSSA_ch+0xda>
 800bca4:	910c      	str	r1, [sp, #48]	@ 0x30
 800bca6:	e7bc      	b.n	800bc22 <forward_dense_integer_SSSA_ch+0xfe>
 800bca8:	f1bc 0f00 	cmp.w	ip, #0
 800bcac:	d04d      	beq.n	800bd4a <forward_dense_integer_SSSA_ch+0x226>
 800bcae:	f8dc e004 	ldr.w	lr, [ip, #4]
 800bcb2:	f1be 0f00 	cmp.w	lr, #0
 800bcb6:	d053      	beq.n	800bd60 <forward_dense_integer_SSSA_ch+0x23c>
 800bcb8:	f8bc 6002 	ldrh.w	r6, [ip, #2]
 800bcbc:	eeb7 0a00 	vmov.f32	s0, #112	@ 0x3f800000  1.0
 800bcc0:	2e00      	cmp	r6, #0
 800bcc2:	d0e5      	beq.n	800bc90 <forward_dense_integer_SSSA_ch+0x16c>
 800bcc4:	930c      	str	r3, [sp, #48]	@ 0x30
 800bcc6:	f8de 3000 	ldr.w	r3, [lr]
 800bcca:	68ad      	ldr	r5, [r5, #8]
 800bccc:	68a4      	ldr	r4, [r4, #8]
 800bcce:	6897      	ldr	r7, [r2, #8]
 800bcd0:	edd3 0a00 	vldr	s1, [r3]
 800bcd4:	f8de 3004 	ldr.w	r3, [lr, #4]
 800bcd8:	f993 3000 	ldrsb.w	r3, [r3]
 800bcdc:	930b      	str	r3, [sp, #44]	@ 0x2c
 800bcde:	e7a3      	b.n	800bc28 <forward_dense_integer_SSSA_ch+0x104>
 800bce0:	eeb7 0a00 	vmov.f32	s0, #112	@ 0x3f800000  1.0
 800bce4:	f1bc 0f00 	cmp.w	ip, #0
 800bce8:	f47f af76 	bne.w	800bbd8 <forward_dense_integer_SSSA_ch+0xb4>
 800bcec:	68ad      	ldr	r5, [r5, #8]
 800bcee:	68a4      	ldr	r4, [r4, #8]
 800bcf0:	6897      	ldr	r7, [r2, #8]
 800bcf2:	2e00      	cmp	r6, #0
 800bcf4:	d14d      	bne.n	800bd92 <forward_dense_integer_SSSA_ch+0x26e>
 800bcf6:	eef7 0a00 	vmov.f32	s1, #112	@ 0x3f800000  1.0
 800bcfa:	960c      	str	r6, [sp, #48]	@ 0x30
 800bcfc:	960b      	str	r6, [sp, #44]	@ 0x2c
 800bcfe:	e793      	b.n	800bc28 <forward_dense_integer_SSSA_ch+0x104>
 800bd00:	f1bc 0f00 	cmp.w	ip, #0
 800bd04:	d021      	beq.n	800bd4a <forward_dense_integer_SSSA_ch+0x226>
 800bd06:	f8dc e004 	ldr.w	lr, [ip, #4]
 800bd0a:	eeb7 0a00 	vmov.f32	s0, #112	@ 0x3f800000  1.0
 800bd0e:	f1be 0f00 	cmp.w	lr, #0
 800bd12:	f47f af67 	bne.w	800bbe4 <forward_dense_integer_SSSA_ch+0xc0>
 800bd16:	68ad      	ldr	r5, [r5, #8]
 800bd18:	68a4      	ldr	r4, [r4, #8]
 800bd1a:	6897      	ldr	r7, [r2, #8]
 800bd1c:	b179      	cbz	r1, 800bd3e <forward_dense_integer_SSSA_ch+0x21a>
 800bd1e:	885b      	ldrh	r3, [r3, #2]
 800bd20:	2b00      	cmp	r3, #0
 800bd22:	d13f      	bne.n	800bda4 <forward_dense_integer_SSSA_ch+0x280>
 800bd24:	eef7 0a00 	vmov.f32	s1, #112	@ 0x3f800000  1.0
 800bd28:	2300      	movs	r3, #0
 800bd2a:	930c      	str	r3, [sp, #48]	@ 0x30
 800bd2c:	f1be 0f00 	cmp.w	lr, #0
 800bd30:	f47f af75 	bne.w	800bc1e <forward_dense_integer_SSSA_ch+0xfa>
 800bd34:	2300      	movs	r3, #0
 800bd36:	930b      	str	r3, [sp, #44]	@ 0x2c
 800bd38:	e776      	b.n	800bc28 <forward_dense_integer_SSSA_ch+0x104>
 800bd3a:	4629      	mov	r1, r5
 800bd3c:	e711      	b.n	800bb62 <forward_dense_integer_SSSA_ch+0x3e>
 800bd3e:	460b      	mov	r3, r1
 800bd40:	eef7 0a00 	vmov.f32	s1, #112	@ 0x3f800000  1.0
 800bd44:	930c      	str	r3, [sp, #48]	@ 0x30
 800bd46:	930b      	str	r3, [sp, #44]	@ 0x2c
 800bd48:	e76e      	b.n	800bc28 <forward_dense_integer_SSSA_ch+0x104>
 800bd4a:	eeb7 0a00 	vmov.f32	s0, #112	@ 0x3f800000  1.0
 800bd4e:	4663      	mov	r3, ip
 800bd50:	eef0 0a40 	vmov.f32	s1, s0
 800bd54:	68ad      	ldr	r5, [r5, #8]
 800bd56:	68a4      	ldr	r4, [r4, #8]
 800bd58:	6897      	ldr	r7, [r2, #8]
 800bd5a:	930c      	str	r3, [sp, #48]	@ 0x30
 800bd5c:	930b      	str	r3, [sp, #44]	@ 0x2c
 800bd5e:	e763      	b.n	800bc28 <forward_dense_integer_SSSA_ch+0x104>
 800bd60:	eeb7 0a00 	vmov.f32	s0, #112	@ 0x3f800000  1.0
 800bd64:	4673      	mov	r3, lr
 800bd66:	e7f3      	b.n	800bd50 <forward_dense_integer_SSSA_ch+0x22c>
 800bd68:	6880      	ldr	r0, [r0, #8]
 800bd6a:	68dc      	ldr	r4, [r3, #12]
 800bd6c:	900d      	str	r0, [sp, #52]	@ 0x34
 800bd6e:	68d0      	ldr	r0, [r2, #12]
 800bd70:	6866      	ldr	r6, [r4, #4]
 800bd72:	6995      	ldr	r5, [r2, #24]
 800bd74:	fa1f fa86 	uxth.w	sl, r6
 800bd78:	9609      	str	r6, [sp, #36]	@ 0x24
 800bd7a:	e9d0 9401 	ldrd	r9, r4, [r0, #4]
 800bd7e:	68c0      	ldr	r0, [r0, #12]
 800bd80:	fa1f fb89 	uxth.w	fp, r9
 800bd84:	fb00 f004 	mul.w	r0, r0, r4
 800bd88:	699c      	ldr	r4, [r3, #24]
 800bd8a:	9008      	str	r0, [sp, #32]
 800bd8c:	e70e      	b.n	800bbac <forward_dense_integer_SSSA_ch+0x88>
 800bd8e:	2500      	movs	r5, #0
 800bd90:	e6e7      	b.n	800bb62 <forward_dense_integer_SSSA_ch+0x3e>
 800bd92:	684b      	ldr	r3, [r1, #4]
 800bd94:	eef7 0a00 	vmov.f32	s1, #112	@ 0x3f800000  1.0
 800bd98:	f8cd c02c 	str.w	ip, [sp, #44]	@ 0x2c
 800bd9c:	f993 3000 	ldrsb.w	r3, [r3]
 800bda0:	930c      	str	r3, [sp, #48]	@ 0x30
 800bda2:	e741      	b.n	800bc28 <forward_dense_integer_SSSA_ch+0x104>
 800bda4:	684b      	ldr	r3, [r1, #4]
 800bda6:	eef7 0a00 	vmov.f32	s1, #112	@ 0x3f800000  1.0
 800bdaa:	f993 3000 	ldrsb.w	r3, [r3]
 800bdae:	930c      	str	r3, [sp, #48]	@ 0x30
 800bdb0:	e7c0      	b.n	800bd34 <forward_dense_integer_SSSA_ch+0x210>
 800bdb2:	f8cd c02c 	str.w	ip, [sp, #44]	@ 0x2c
 800bdb6:	e737      	b.n	800bc28 <forward_dense_integer_SSSA_ch+0x104>
 800bdb8:	2300      	movs	r3, #0
 800bdba:	685b      	ldr	r3, [r3, #4]
 800bdbc:	deff      	udf	#255	@ 0xff
 800bdbe:	2300      	movs	r3, #0
 800bdc0:	685b      	ldr	r3, [r3, #4]
 800bdc2:	deff      	udf	#255	@ 0xff
 800bdc4:	2300      	movs	r3, #0
 800bdc6:	685b      	ldr	r3, [r3, #4]
 800bdc8:	deff      	udf	#255	@ 0xff
 800bdca:	bf00      	nop

0800bdcc <forward_sm_integer>:
 800bdcc:	b5f0      	push	{r4, r5, r6, r7, lr}
 800bdce:	6983      	ldr	r3, [r0, #24]
 800bdd0:	b087      	sub	sp, #28
 800bdd2:	881e      	ldrh	r6, [r3, #0]
 800bdd4:	2e00      	cmp	r6, #0
 800bdd6:	d047      	beq.n	800be68 <forward_sm_integer+0x9c>
 800bdd8:	f8d3 c004 	ldr.w	ip, [r3, #4]
 800bddc:	f8dc 5004 	ldr.w	r5, [ip, #4]
 800bde0:	b105      	cbz	r5, 800bde4 <forward_sm_integer+0x18>
 800bde2:	682d      	ldr	r5, [r5, #0]
 800bde4:	2e01      	cmp	r6, #1
 800bde6:	d04b      	beq.n	800be80 <forward_sm_integer+0xb4>
 800bde8:	f8dc 7010 	ldr.w	r7, [ip, #16]
 800bdec:	b107      	cbz	r7, 800bdf0 <forward_sm_integer+0x24>
 800bdee:	683f      	ldr	r7, [r7, #0]
 800bdf0:	68ab      	ldr	r3, [r5, #8]
 800bdf2:	0a1b      	lsrs	r3, r3, #8
 800bdf4:	d040      	beq.n	800be78 <forward_sm_integer+0xac>
 800bdf6:	68ec      	ldr	r4, [r5, #12]
 800bdf8:	2201      	movs	r2, #1
 800bdfa:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 800bdfe:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 800be02:	429c      	cmp	r4, r3
 800be04:	fb01 f202 	mul.w	r2, r1, r2
 800be08:	d1f9      	bne.n	800bdfe <forward_sm_integer+0x32>
 800be0a:	69c3      	ldr	r3, [r0, #28]
 800be0c:	2e03      	cmp	r6, #3
 800be0e:	689c      	ldr	r4, [r3, #8]
 800be10:	d936      	bls.n	800be80 <forward_sm_integer+0xb4>
 800be12:	f8dc 3028 	ldr.w	r3, [ip, #40]	@ 0x28
 800be16:	2b00      	cmp	r3, #0
 800be18:	d030      	beq.n	800be7c <forward_sm_integer+0xb0>
 800be1a:	6819      	ldr	r1, [r3, #0]
 800be1c:	f9b0 3020 	ldrsh.w	r3, [r0, #32]
 800be20:	6989      	ldr	r1, [r1, #24]
 800be22:	f8d1 c008 	ldr.w	ip, [r1, #8]
 800be26:	68e9      	ldr	r1, [r5, #12]
 800be28:	f851 6023 	ldr.w	r6, [r1, r3, lsl #2]
 800be2c:	6929      	ldr	r1, [r5, #16]
 800be2e:	ebb3 2f11 	cmp.w	r3, r1, lsr #8
 800be32:	d21b      	bcs.n	800be6c <forward_sm_integer+0xa0>
 800be34:	6969      	ldr	r1, [r5, #20]
 800be36:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 800be3a:	69a8      	ldr	r0, [r5, #24]
 800be3c:	4d12      	ldr	r5, [pc, #72]	@ (800be88 <forward_sm_integer+0xbc>)
 800be3e:	6801      	ldr	r1, [r0, #0]
 800be40:	f021 417e 	bic.w	r1, r1, #4261412864	@ 0xfe000000
 800be44:	42a9      	cmp	r1, r5
 800be46:	69bd      	ldr	r5, [r7, #24]
 800be48:	6881      	ldr	r1, [r0, #8]
 800be4a:	68a8      	ldr	r0, [r5, #8]
 800be4c:	f8cd c010 	str.w	ip, [sp, #16]
 800be50:	68a5      	ldr	r5, [r4, #8]
 800be52:	9503      	str	r5, [sp, #12]
 800be54:	6865      	ldr	r5, [r4, #4]
 800be56:	9502      	str	r5, [sp, #8]
 800be58:	6824      	ldr	r4, [r4, #0]
 800be5a:	e9cd 6400 	strd	r6, r4, [sp]
 800be5e:	d007      	beq.n	800be70 <forward_sm_integer+0xa4>
 800be60:	f001 f822 	bl	800cea8 <forward_lite_nl_softmax_iu8ou8>
 800be64:	b007      	add	sp, #28
 800be66:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800be68:	6873      	ldr	r3, [r6, #4]
 800be6a:	deff      	udf	#255	@ 0xff
 800be6c:	2300      	movs	r3, #0
 800be6e:	e7e4      	b.n	800be3a <forward_sm_integer+0x6e>
 800be70:	f001 f810 	bl	800ce94 <forward_lite_nl_softmax_is8os8>
 800be74:	b007      	add	sp, #28
 800be76:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800be78:	2201      	movs	r2, #1
 800be7a:	e7c6      	b.n	800be0a <forward_sm_integer+0x3e>
 800be7c:	699b      	ldr	r3, [r3, #24]
 800be7e:	deff      	udf	#255	@ 0xff
 800be80:	2300      	movs	r3, #0
 800be82:	685b      	ldr	r3, [r3, #4]
 800be84:	deff      	udf	#255	@ 0xff
 800be86:	bf00      	nop
 800be88:	00840440 	.word	0x00840440

0800be8c <pool_func_mp_array_integer_INT8>:
 800be8c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800be90:	b093      	sub	sp, #76	@ 0x4c
 800be92:	468c      	mov	ip, r1
 800be94:	6804      	ldr	r4, [r0, #0]
 800be96:	f8bd 1074 	ldrh.w	r1, [sp, #116]	@ 0x74
 800be9a:	930d      	str	r3, [sp, #52]	@ 0x34
 800be9c:	f8bd 3070 	ldrh.w	r3, [sp, #112]	@ 0x70
 800bea0:	910f      	str	r1, [sp, #60]	@ 0x3c
 800bea2:	930e      	str	r3, [sp, #56]	@ 0x38
 800bea4:	f8bd 1078 	ldrh.w	r1, [sp, #120]	@ 0x78
 800bea8:	9b24      	ldr	r3, [sp, #144]	@ 0x90
 800beaa:	9110      	str	r1, [sp, #64]	@ 0x40
 800beac:	6980      	ldr	r0, [r0, #24]
 800beae:	f8bd b07c 	ldrh.w	fp, [sp, #124]	@ 0x7c
 800beb2:	f8bd a080 	ldrh.w	sl, [sp, #128]	@ 0x80
 800beb6:	f8bd 7084 	ldrh.w	r7, [sp, #132]	@ 0x84
 800beba:	f8bd e088 	ldrh.w	lr, [sp, #136]	@ 0x88
 800bebe:	f8bd 808c 	ldrh.w	r8, [sp, #140]	@ 0x8c
 800bec2:	6999      	ldr	r1, [r3, #24]
 800bec4:	681d      	ldr	r5, [r3, #0]
 800bec6:	2c00      	cmp	r4, #0
 800bec8:	d064      	beq.n	800bf94 <pool_func_mp_array_integer_INT8+0x108>
 800beca:	f8d4 9004 	ldr.w	r9, [r4, #4]
 800bece:	f1b9 0f00 	cmp.w	r9, #0
 800bed2:	d049      	beq.n	800bf68 <pool_func_mp_array_integer_INT8+0xdc>
 800bed4:	8866      	ldrh	r6, [r4, #2]
 800bed6:	2e00      	cmp	r6, #0
 800bed8:	d072      	beq.n	800bfc0 <pool_func_mp_array_integer_INT8+0x134>
 800beda:	f8d9 3000 	ldr.w	r3, [r9]
 800bede:	ed93 0a00 	vldr	s0, [r3]
 800bee2:	2d00      	cmp	r5, #0
 800bee4:	d070      	beq.n	800bfc8 <pool_func_mp_array_integer_INT8+0x13c>
 800bee6:	686e      	ldr	r6, [r5, #4]
 800bee8:	2e00      	cmp	r6, #0
 800beea:	d044      	beq.n	800bf76 <pool_func_mp_array_integer_INT8+0xea>
 800beec:	886b      	ldrh	r3, [r5, #2]
 800beee:	9311      	str	r3, [sp, #68]	@ 0x44
 800bef0:	2b00      	cmp	r3, #0
 800bef2:	d059      	beq.n	800bfa8 <pool_func_mp_array_integer_INT8+0x11c>
 800bef4:	6833      	ldr	r3, [r6, #0]
 800bef6:	eef0 7a40 	vmov.f32	s15, s0
 800befa:	6880      	ldr	r0, [r0, #8]
 800befc:	ed93 7a00 	vldr	s14, [r3]
 800bf00:	6889      	ldr	r1, [r1, #8]
 800bf02:	ee80 0a07 	vdiv.f32	s0, s0, s14
 800bf06:	f1b9 0f00 	cmp.w	r9, #0
 800bf0a:	d057      	beq.n	800bfbc <pool_func_mp_array_integer_INT8+0x130>
 800bf0c:	8863      	ldrh	r3, [r4, #2]
 800bf0e:	2b00      	cmp	r3, #0
 800bf10:	d03b      	beq.n	800bf8a <pool_func_mp_array_integer_INT8+0xfe>
 800bf12:	f8d9 3004 	ldr.w	r3, [r9, #4]
 800bf16:	f993 4000 	ldrsb.w	r4, [r3]
 800bf1a:	2d00      	cmp	r5, #0
 800bf1c:	d038      	beq.n	800bf90 <pool_func_mp_array_integer_INT8+0x104>
 800bf1e:	2e00      	cmp	r6, #0
 800bf20:	d036      	beq.n	800bf90 <pool_func_mp_array_integer_INT8+0x104>
 800bf22:	886b      	ldrh	r3, [r5, #2]
 800bf24:	9311      	str	r3, [sp, #68]	@ 0x44
 800bf26:	9b11      	ldr	r3, [sp, #68]	@ 0x44
 800bf28:	b113      	cbz	r3, 800bf30 <pool_func_mp_array_integer_INT8+0xa4>
 800bf2a:	6873      	ldr	r3, [r6, #4]
 800bf2c:	f993 3000 	ldrsb.w	r3, [r3]
 800bf30:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 800bf34:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800bf38:	da59      	bge.n	800bfee <pool_func_mp_array_integer_INT8+0x162>
 800bf3a:	f8cd b010 	str.w	fp, [sp, #16]
 800bf3e:	e9cd 4309 	strd	r4, r3, [sp, #36]	@ 0x24
 800bf42:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 800bf44:	9c0d      	ldr	r4, [sp, #52]	@ 0x34
 800bf46:	9303      	str	r3, [sp, #12]
 800bf48:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800bf4a:	9400      	str	r4, [sp, #0]
 800bf4c:	9302      	str	r3, [sp, #8]
 800bf4e:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800bf50:	9301      	str	r3, [sp, #4]
 800bf52:	4613      	mov	r3, r2
 800bf54:	4662      	mov	r2, ip
 800bf56:	e9cd e807 	strd	lr, r8, [sp, #28]
 800bf5a:	e9cd a705 	strd	sl, r7, [sp, #20]
 800bf5e:	f000 feb9 	bl	800ccd4 <forward_lite_maxpool_is8os8_scaleneg>
 800bf62:	b013      	add	sp, #76	@ 0x4c
 800bf64:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800bf68:	2d00      	cmp	r5, #0
 800bf6a:	d03a      	beq.n	800bfe2 <pool_func_mp_array_integer_INT8+0x156>
 800bf6c:	686e      	ldr	r6, [r5, #4]
 800bf6e:	eeb7 0a00 	vmov.f32	s0, #112	@ 0x3f800000  1.0
 800bf72:	2e00      	cmp	r6, #0
 800bf74:	d1ba      	bne.n	800beec <pool_func_mp_array_integer_INT8+0x60>
 800bf76:	6880      	ldr	r0, [r0, #8]
 800bf78:	6889      	ldr	r1, [r1, #8]
 800bf7a:	f1b9 0f00 	cmp.w	r9, #0
 800bf7e:	d02b      	beq.n	800bfd8 <pool_func_mp_array_integer_INT8+0x14c>
 800bf80:	8863      	ldrh	r3, [r4, #2]
 800bf82:	2b00      	cmp	r3, #0
 800bf84:	d165      	bne.n	800c052 <pool_func_mp_array_integer_INT8+0x1c6>
 800bf86:	eef0 7a40 	vmov.f32	s15, s0
 800bf8a:	2400      	movs	r4, #0
 800bf8c:	2e00      	cmp	r6, #0
 800bf8e:	d1c8      	bne.n	800bf22 <pool_func_mp_array_integer_INT8+0x96>
 800bf90:	2300      	movs	r3, #0
 800bf92:	e7cd      	b.n	800bf30 <pool_func_mp_array_integer_INT8+0xa4>
 800bf94:	2d00      	cmp	r5, #0
 800bf96:	d041      	beq.n	800c01c <pool_func_mp_array_integer_INT8+0x190>
 800bf98:	686e      	ldr	r6, [r5, #4]
 800bf9a:	b316      	cbz	r6, 800bfe2 <pool_func_mp_array_integer_INT8+0x156>
 800bf9c:	886b      	ldrh	r3, [r5, #2]
 800bf9e:	9311      	str	r3, [sp, #68]	@ 0x44
 800bfa0:	2b00      	cmp	r3, #0
 800bfa2:	d14a      	bne.n	800c03a <pool_func_mp_array_integer_INT8+0x1ae>
 800bfa4:	eeb7 0a00 	vmov.f32	s0, #112	@ 0x3f800000  1.0
 800bfa8:	6880      	ldr	r0, [r0, #8]
 800bfaa:	6889      	ldr	r1, [r1, #8]
 800bfac:	b1ac      	cbz	r4, 800bfda <pool_func_mp_array_integer_INT8+0x14e>
 800bfae:	f8d4 9004 	ldr.w	r9, [r4, #4]
 800bfb2:	eef0 7a40 	vmov.f32	s15, s0
 800bfb6:	f1b9 0f00 	cmp.w	r9, #0
 800bfba:	d1a7      	bne.n	800bf0c <pool_func_mp_array_integer_INT8+0x80>
 800bfbc:	464c      	mov	r4, r9
 800bfbe:	e7b2      	b.n	800bf26 <pool_func_mp_array_integer_INT8+0x9a>
 800bfc0:	eeb7 0a00 	vmov.f32	s0, #112	@ 0x3f800000  1.0
 800bfc4:	2d00      	cmp	r5, #0
 800bfc6:	d18e      	bne.n	800bee6 <pool_func_mp_array_integer_INT8+0x5a>
 800bfc8:	6880      	ldr	r0, [r0, #8]
 800bfca:	6889      	ldr	r1, [r1, #8]
 800bfcc:	bb6e      	cbnz	r6, 800c02a <pool_func_mp_array_integer_INT8+0x19e>
 800bfce:	eef0 7a40 	vmov.f32	s15, s0
 800bfd2:	4634      	mov	r4, r6
 800bfd4:	4633      	mov	r3, r6
 800bfd6:	e7ab      	b.n	800bf30 <pool_func_mp_array_integer_INT8+0xa4>
 800bfd8:	464c      	mov	r4, r9
 800bfda:	eef0 7a40 	vmov.f32	s15, s0
 800bfde:	4623      	mov	r3, r4
 800bfe0:	e7a6      	b.n	800bf30 <pool_func_mp_array_integer_INT8+0xa4>
 800bfe2:	2400      	movs	r4, #0
 800bfe4:	eeb7 0a00 	vmov.f32	s0, #112	@ 0x3f800000  1.0
 800bfe8:	6880      	ldr	r0, [r0, #8]
 800bfea:	6889      	ldr	r1, [r1, #8]
 800bfec:	4623      	mov	r3, r4
 800bfee:	f8cd b010 	str.w	fp, [sp, #16]
 800bff2:	e9cd 4309 	strd	r4, r3, [sp, #36]	@ 0x24
 800bff6:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 800bff8:	9c0d      	ldr	r4, [sp, #52]	@ 0x34
 800bffa:	9303      	str	r3, [sp, #12]
 800bffc:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800bffe:	9400      	str	r4, [sp, #0]
 800c000:	9302      	str	r3, [sp, #8]
 800c002:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800c004:	9301      	str	r3, [sp, #4]
 800c006:	4613      	mov	r3, r2
 800c008:	4662      	mov	r2, ip
 800c00a:	e9cd e807 	strd	lr, r8, [sp, #28]
 800c00e:	e9cd a705 	strd	sl, r7, [sp, #20]
 800c012:	f000 f825 	bl	800c060 <forward_lite_maxpool_is8os8_scalepos>
 800c016:	b013      	add	sp, #76	@ 0x4c
 800c018:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800c01c:	eeb7 0a00 	vmov.f32	s0, #112	@ 0x3f800000  1.0
 800c020:	462c      	mov	r4, r5
 800c022:	6880      	ldr	r0, [r0, #8]
 800c024:	462b      	mov	r3, r5
 800c026:	6889      	ldr	r1, [r1, #8]
 800c028:	e7e1      	b.n	800bfee <pool_func_mp_array_integer_INT8+0x162>
 800c02a:	f8d9 4004 	ldr.w	r4, [r9, #4]
 800c02e:	eef0 7a40 	vmov.f32	s15, s0
 800c032:	462b      	mov	r3, r5
 800c034:	f994 4000 	ldrsb.w	r4, [r4]
 800c038:	e77a      	b.n	800bf30 <pool_func_mp_array_integer_INT8+0xa4>
 800c03a:	6833      	ldr	r3, [r6, #0]
 800c03c:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 800c040:	6880      	ldr	r0, [r0, #8]
 800c042:	edd3 6a00 	vldr	s13, [r3]
 800c046:	eef0 7a47 	vmov.f32	s15, s14
 800c04a:	6889      	ldr	r1, [r1, #8]
 800c04c:	ee87 0a26 	vdiv.f32	s0, s14, s13
 800c050:	e76b      	b.n	800bf2a <pool_func_mp_array_integer_INT8+0x9e>
 800c052:	f8d9 3004 	ldr.w	r3, [r9, #4]
 800c056:	eef0 7a40 	vmov.f32	s15, s0
 800c05a:	f993 4000 	ldrsb.w	r4, [r3]
 800c05e:	e797      	b.n	800bf90 <pool_func_mp_array_integer_INT8+0x104>

0800c060 <forward_lite_maxpool_is8os8_scalepos>:
 800c060:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800c064:	b095      	sub	sp, #84	@ 0x54
 800c066:	4614      	mov	r4, r2
 800c068:	e9cd 010a 	strd	r0, r1, [sp, #40]	@ 0x28
 800c06c:	f8bd 107c 	ldrh.w	r1, [sp, #124]	@ 0x7c
 800c070:	f99d 009c 	ldrsb.w	r0, [sp, #156]	@ 0x9c
 800c074:	910d      	str	r1, [sp, #52]	@ 0x34
 800c076:	f8bd 1080 	ldrh.w	r1, [sp, #128]	@ 0x80
 800c07a:	930c      	str	r3, [sp, #48]	@ 0x30
 800c07c:	910e      	str	r1, [sp, #56]	@ 0x38
 800c07e:	f8bd 1084 	ldrh.w	r1, [sp, #132]	@ 0x84
 800c082:	f8bd 3098 	ldrh.w	r3, [sp, #152]	@ 0x98
 800c086:	910f      	str	r1, [sp, #60]	@ 0x3c
 800c088:	f8bd 1088 	ldrh.w	r1, [sp, #136]	@ 0x88
 800c08c:	9206      	str	r2, [sp, #24]
 800c08e:	9110      	str	r1, [sp, #64]	@ 0x40
 800c090:	f8bd 108c 	ldrh.w	r1, [sp, #140]	@ 0x8c
 800c094:	f8bd a078 	ldrh.w	sl, [sp, #120]	@ 0x78
 800c098:	9111      	str	r1, [sp, #68]	@ 0x44
 800c09a:	f8bd 1090 	ldrh.w	r1, [sp, #144]	@ 0x90
 800c09e:	f99d 20a0 	ldrsb.w	r2, [sp, #160]	@ 0xa0
 800c0a2:	9112      	str	r1, [sp, #72]	@ 0x48
 800c0a4:	f8bd 1094 	ldrh.w	r1, [sp, #148]	@ 0x94
 800c0a8:	9313      	str	r3, [sp, #76]	@ 0x4c
 800c0aa:	9107      	str	r1, [sp, #28]
 800c0ac:	9003      	str	r0, [sp, #12]
 800c0ae:	2b00      	cmp	r3, #0
 800c0b0:	f000 8094 	beq.w	800c1dc <forward_lite_maxpool_is8os8_scalepos+0x17c>
 800c0b4:	eef7 7a00 	vmov.f32	s15, #112	@ 0x3f800000  1.0
 800c0b8:	eeb4 0a67 	vcmp.f32	s0, s15
 800c0bc:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800c0c0:	bf0c      	ite	eq
 800c0c2:	2301      	moveq	r3, #1
 800c0c4:	2300      	movne	r3, #0
 800c0c6:	4290      	cmp	r0, r2
 800c0c8:	bf14      	ite	ne
 800c0ca:	2300      	movne	r3, #0
 800c0cc:	f003 0301 	andeq.w	r3, r3, #1
 800c0d0:	9301      	str	r3, [sp, #4]
 800c0d2:	2900      	cmp	r1, #0
 800c0d4:	f000 8082 	beq.w	800c1dc <forward_lite_maxpool_is8os8_scalepos+0x17c>
 800c0d8:	f1ba 0f00 	cmp.w	sl, #0
 800c0dc:	d07e      	beq.n	800c1dc <forward_lite_maxpool_is8os8_scalepos+0x17c>
 800c0de:	ee07 2a90 	vmov	s15, r2
 800c0e2:	2300      	movs	r3, #0
 800c0e4:	ed9f 6a4e 	vldr	s12, [pc, #312]	@ 800c220 <forward_lite_maxpool_is8os8_scalepos+0x1c0>
 800c0e8:	fb04 fb0a 	mul.w	fp, r4, sl
 800c0ec:	eef8 6ae7 	vcvt.f32.s32	s13, s15
 800c0f0:	9304      	str	r3, [sp, #16]
 800c0f2:	9b04      	ldr	r3, [sp, #16]
 800c0f4:	eef6 5a00 	vmov.f32	s11, #96	@ 0x3f000000  0.5
 800c0f8:	9907      	ldr	r1, [sp, #28]
 800c0fa:	9a12      	ldr	r2, [sp, #72]	@ 0x48
 800c0fc:	fb03 f202 	mul.w	r2, r3, r2
 800c100:	fb03 f301 	mul.w	r3, r3, r1
 800c104:	9910      	ldr	r1, [sp, #64]	@ 0x40
 800c106:	9308      	str	r3, [sp, #32]
 800c108:	2300      	movs	r3, #0
 800c10a:	9305      	str	r3, [sp, #20]
 800c10c:	1a53      	subs	r3, r2, r1
 800c10e:	1a8a      	subs	r2, r1, r2
 800c110:	990c      	ldr	r1, [sp, #48]	@ 0x30
 800c112:	2b00      	cmp	r3, #0
 800c114:	eb02 0c01 	add.w	ip, r2, r1
 800c118:	bfd8      	it	le
 800c11a:	4691      	movle	r9, r2
 800c11c:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 800c11e:	bfc8      	it	gt
 800c120:	f04f 0900 	movgt.w	r9, #0
 800c124:	4594      	cmp	ip, r2
 800c126:	444b      	add	r3, r9
 800c128:	bfa8      	it	ge
 800c12a:	4694      	movge	ip, r2
 800c12c:	9a06      	ldr	r2, [sp, #24]
 800c12e:	fb02 f303 	mul.w	r3, r2, r3
 800c132:	9309      	str	r3, [sp, #36]	@ 0x24
 800c134:	9a05      	ldr	r2, [sp, #20]
 800c136:	f04f 0e00 	mov.w	lr, #0
 800c13a:	9908      	ldr	r1, [sp, #32]
 800c13c:	9b11      	ldr	r3, [sp, #68]	@ 0x44
 800c13e:	eb02 0801 	add.w	r8, r2, r1
 800c142:	990f      	ldr	r1, [sp, #60]	@ 0x3c
 800c144:	fb03 f302 	mul.w	r3, r3, r2
 800c148:	9a0b      	ldr	r2, [sp, #44]	@ 0x2c
 800c14a:	9c0d      	ldr	r4, [sp, #52]	@ 0x34
 800c14c:	fb0a 2808 	mla	r8, sl, r8, r2
 800c150:	1a5a      	subs	r2, r3, r1
 800c152:	1acb      	subs	r3, r1, r3
 800c154:	9906      	ldr	r1, [sp, #24]
 800c156:	2a00      	cmp	r2, #0
 800c158:	bfd8      	it	le
 800c15a:	461f      	movle	r7, r3
 800c15c:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800c15e:	bfc8      	it	gt
 800c160:	2700      	movgt	r7, #0
 800c162:	18d3      	adds	r3, r2, r3
 800c164:	1a8a      	subs	r2, r1, r2
 800c166:	4294      	cmp	r4, r2
 800c168:	443b      	add	r3, r7
 800c16a:	bfa8      	it	ge
 800c16c:	4614      	movge	r4, r2
 800c16e:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 800c170:	fb0a 2303 	mla	r3, sl, r3, r2
 800c174:	9302      	str	r3, [sp, #8]
 800c176:	45e1      	cmp	r9, ip
 800c178:	da4e      	bge.n	800c218 <forward_lite_maxpool_is8os8_scalepos+0x1b8>
 800c17a:	9b02      	ldr	r3, [sp, #8]
 800c17c:	464d      	mov	r5, r9
 800c17e:	f06f 017f 	mvn.w	r1, #127	@ 0x7f
 800c182:	eb03 060e 	add.w	r6, r3, lr
 800c186:	42a7      	cmp	r7, r4
 800c188:	da0a      	bge.n	800c1a0 <forward_lite_maxpool_is8os8_scalepos+0x140>
 800c18a:	4632      	mov	r2, r6
 800c18c:	463b      	mov	r3, r7
 800c18e:	f992 0000 	ldrsb.w	r0, [r2]
 800c192:	3301      	adds	r3, #1
 800c194:	4452      	add	r2, sl
 800c196:	4281      	cmp	r1, r0
 800c198:	bfb8      	it	lt
 800c19a:	4601      	movlt	r1, r0
 800c19c:	429c      	cmp	r4, r3
 800c19e:	d1f6      	bne.n	800c18e <forward_lite_maxpool_is8os8_scalepos+0x12e>
 800c1a0:	3501      	adds	r5, #1
 800c1a2:	445e      	add	r6, fp
 800c1a4:	45ac      	cmp	ip, r5
 800c1a6:	d1ee      	bne.n	800c186 <forward_lite_maxpool_is8os8_scalepos+0x126>
 800c1a8:	9b01      	ldr	r3, [sp, #4]
 800c1aa:	b1d3      	cbz	r3, 800c1e2 <forward_lite_maxpool_is8os8_scalepos+0x182>
 800c1ac:	f888 1000 	strb.w	r1, [r8]
 800c1b0:	f10e 0e01 	add.w	lr, lr, #1
 800c1b4:	f108 0801 	add.w	r8, r8, #1
 800c1b8:	fa1f f38e 	uxth.w	r3, lr
 800c1bc:	459a      	cmp	sl, r3
 800c1be:	d8da      	bhi.n	800c176 <forward_lite_maxpool_is8os8_scalepos+0x116>
 800c1c0:	9b05      	ldr	r3, [sp, #20]
 800c1c2:	9a07      	ldr	r2, [sp, #28]
 800c1c4:	3301      	adds	r3, #1
 800c1c6:	b29b      	uxth	r3, r3
 800c1c8:	429a      	cmp	r2, r3
 800c1ca:	9305      	str	r3, [sp, #20]
 800c1cc:	d8b2      	bhi.n	800c134 <forward_lite_maxpool_is8os8_scalepos+0xd4>
 800c1ce:	9b04      	ldr	r3, [sp, #16]
 800c1d0:	9a13      	ldr	r2, [sp, #76]	@ 0x4c
 800c1d2:	3301      	adds	r3, #1
 800c1d4:	b29b      	uxth	r3, r3
 800c1d6:	429a      	cmp	r2, r3
 800c1d8:	9304      	str	r3, [sp, #16]
 800c1da:	d88a      	bhi.n	800c0f2 <forward_lite_maxpool_is8os8_scalepos+0x92>
 800c1dc:	b015      	add	sp, #84	@ 0x54
 800c1de:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800c1e2:	9b03      	ldr	r3, [sp, #12]
 800c1e4:	eeb0 7a66 	vmov.f32	s14, s13
 800c1e8:	1ac9      	subs	r1, r1, r3
 800c1ea:	ee07 1a90 	vmov	s15, r1
 800c1ee:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800c1f2:	eea7 7a80 	vfma.f32	s14, s15, s0
 800c1f6:	eeb5 7ac0 	vcmpe.f32	s14, #0.0
 800c1fa:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800c1fe:	fe65 7a86 	vselge.f32	s15, s11, s12
 800c202:	ee77 7a87 	vadd.f32	s15, s15, s14
 800c206:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800c20a:	ee17 3a90 	vmov	r3, s15
 800c20e:	f303 0307 	ssat	r3, #8, r3
 800c212:	f888 3000 	strb.w	r3, [r8]
 800c216:	e7cb      	b.n	800c1b0 <forward_lite_maxpool_is8os8_scalepos+0x150>
 800c218:	f06f 017f 	mvn.w	r1, #127	@ 0x7f
 800c21c:	e7c4      	b.n	800c1a8 <forward_lite_maxpool_is8os8_scalepos+0x148>
 800c21e:	bf00      	nop
 800c220:	befffffc 	.word	0xbefffffc

0800c224 <forward_lite_conv2d_sssa8_ch>:
 800c224:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800c228:	ed2d 8b06 	vpush	{d8-d10}
 800c22c:	b0e3      	sub	sp, #396	@ 0x18c
 800c22e:	469a      	mov	sl, r3
 800c230:	4605      	mov	r5, r0
 800c232:	f8bd 3200 	ldrh.w	r3, [sp, #512]	@ 0x200
 800c236:	9215      	str	r2, [sp, #84]	@ 0x54
 800c238:	f8bd 2204 	ldrh.w	r2, [sp, #516]	@ 0x204
 800c23c:	9126      	str	r1, [sp, #152]	@ 0x98
 800c23e:	9314      	str	r3, [sp, #80]	@ 0x50
 800c240:	f8bd 11cc 	ldrh.w	r1, [sp, #460]	@ 0x1cc
 800c244:	fb03 f302 	mul.w	r3, r3, r2
 800c248:	922f      	str	r2, [sp, #188]	@ 0xbc
 800c24a:	9a7f      	ldr	r2, [sp, #508]	@ 0x1fc
 800c24c:	ee08 1a90 	vmov	s17, r1
 800c250:	9320      	str	r3, [sp, #128]	@ 0x80
 800c252:	fb01 2303 	mla	r3, r1, r3, r2
 800c256:	f8bd 21d0 	ldrh.w	r2, [sp, #464]	@ 0x1d0
 800c25a:	f99d 91ec 	ldrsb.w	r9, [sp, #492]	@ 0x1ec
 800c25e:	922c      	str	r2, [sp, #176]	@ 0xb0
 800c260:	4298      	cmp	r0, r3
 800c262:	f8bd 21d4 	ldrh.w	r2, [sp, #468]	@ 0x1d4
 800c266:	f99d 61f0 	ldrsb.w	r6, [sp, #496]	@ 0x1f0
 800c26a:	922b      	str	r2, [sp, #172]	@ 0xac
 800c26c:	f8bd 21d8 	ldrh.w	r2, [sp, #472]	@ 0x1d8
 800c270:	f8bd 8208 	ldrh.w	r8, [sp, #520]	@ 0x208
 800c274:	9216      	str	r2, [sp, #88]	@ 0x58
 800c276:	f8bd 21dc 	ldrh.w	r2, [sp, #476]	@ 0x1dc
 800c27a:	f8dd b20c 	ldr.w	fp, [sp, #524]	@ 0x20c
 800c27e:	9230      	str	r2, [sp, #192]	@ 0xc0
 800c280:	f8bd 21e0 	ldrh.w	r2, [sp, #480]	@ 0x1e0
 800c284:	922d      	str	r2, [sp, #180]	@ 0xb4
 800c286:	f8bd 21e4 	ldrh.w	r2, [sp, #484]	@ 0x1e4
 800c28a:	9234      	str	r2, [sp, #208]	@ 0xd0
 800c28c:	f89d 21f8 	ldrb.w	r2, [sp, #504]	@ 0x1f8
 800c290:	9227      	str	r2, [sp, #156]	@ 0x9c
 800c292:	f0c0 82ef 	bcc.w	800c874 <forward_lite_conv2d_sssa8_ch+0x650>
 800c296:	2300      	movs	r3, #0
 800c298:	932e      	str	r3, [sp, #184]	@ 0xb8
 800c29a:	ee18 1a90 	vmov	r1, s17
 800c29e:	9a84      	ldr	r2, [sp, #528]	@ 0x210
 800c2a0:	987d      	ldr	r0, [sp, #500]	@ 0x1f4
 800c2a2:	ebab 0341 	sub.w	r3, fp, r1, lsl #1
 800c2a6:	004f      	lsls	r7, r1, #1
 800c2a8:	18d4      	adds	r4, r2, r3
 800c2aa:	9b27      	ldr	r3, [sp, #156]	@ 0x9c
 800c2ac:	9a2e      	ldr	r2, [sp, #184]	@ 0xb8
 800c2ae:	3b02      	subs	r3, #2
 800c2b0:	2b01      	cmp	r3, #1
 800c2b2:	4623      	mov	r3, r4
 800c2b4:	bf98      	it	ls
 800c2b6:	2200      	movls	r2, #0
 800c2b8:	922e      	str	r2, [sp, #184]	@ 0xb8
 800c2ba:	9a84      	ldr	r2, [sp, #528]	@ 0x210
 800c2bc:	f000 fdfe 	bl	800cebc <align_factor_ch>
 800c2c0:	9b27      	ldr	r3, [sp, #156]	@ 0x9c
 800c2c2:	07db      	lsls	r3, r3, #31
 800c2c4:	d506      	bpl.n	800c2d4 <forward_lite_conv2d_sssa8_ch+0xb0>
 800c2c6:	9b14      	ldr	r3, [sp, #80]	@ 0x50
 800c2c8:	9a2f      	ldr	r2, [sp, #188]	@ 0xbc
 800c2ca:	3302      	adds	r3, #2
 800c2cc:	3202      	adds	r2, #2
 800c2ce:	fb02 f303 	mul.w	r3, r2, r3
 800c2d2:	9320      	str	r3, [sp, #128]	@ 0x80
 800c2d4:	9b7a      	ldr	r3, [sp, #488]	@ 0x1e8
 800c2d6:	ee18 2a90 	vmov	r2, s17
 800c2da:	9972      	ldr	r1, [sp, #456]	@ 0x1c8
 800c2dc:	4650      	mov	r0, sl
 800c2de:	9301      	str	r3, [sp, #4]
 800c2e0:	9b84      	ldr	r3, [sp, #528]	@ 0x210
 800c2e2:	e9cd 9302 	strd	r9, r3, [sp, #8]
 800c2e6:	9b2b      	ldr	r3, [sp, #172]	@ 0xac
 800c2e8:	9300      	str	r3, [sp, #0]
 800c2ea:	9b2c      	ldr	r3, [sp, #176]	@ 0xb0
 800c2ec:	f001 f902 	bl	800d4f4 <st_sssa8_ch_convolve_rank1upd>
 800c2f0:	ee18 2a90 	vmov	r2, s17
 800c2f4:	9984      	ldr	r1, [sp, #528]	@ 0x210
 800c2f6:	18bb      	adds	r3, r7, r2
 800c2f8:	eb01 0183 	add.w	r1, r1, r3, lsl #2
 800c2fc:	e9dd 302b 	ldrd	r3, r0, [sp, #172]	@ 0xac
 800c300:	911b      	str	r1, [sp, #108]	@ 0x6c
 800c302:	fb10 f303 	smulbb	r3, r0, r3
 800c306:	fb13 f30a 	smulbb	r3, r3, sl
 800c30a:	b29b      	uxth	r3, r3
 800c30c:	931f      	str	r3, [sp, #124]	@ 0x7c
 800c30e:	ebc2 7342 	rsb	r3, r2, r2, lsl #29
 800c312:	eb01 03c3 	add.w	r3, r1, r3, lsl #3
 800c316:	ee09 3a90 	vmov	s19, r3
 800c31a:	eb03 0382 	add.w	r3, r3, r2, lsl #2
 800c31e:	9325      	str	r3, [sp, #148]	@ 0x94
 800c320:	b1da      	cbz	r2, 800c35a <forward_lite_conv2d_sssa8_ch+0x136>
 800c322:	4622      	mov	r2, r4
 800c324:	1d18      	adds	r0, r3, #4
 800c326:	f04f 0c01 	mov.w	ip, #1
 800c32a:	eb04 0e07 	add.w	lr, r4, r7
 800c32e:	f932 3b02 	ldrsh.w	r3, [r2], #2
 800c332:	1e59      	subs	r1, r3, #1
 800c334:	fa0c f403 	lsl.w	r4, ip, r3
 800c338:	fa06 f303 	lsl.w	r3, r6, r3
 800c33c:	b289      	uxth	r1, r1
 800c33e:	eb03 0354 	add.w	r3, r3, r4, lsr #1
 800c342:	2914      	cmp	r1, #20
 800c344:	f200 8262 	bhi.w	800c80c <forward_lite_conv2d_sssa8_ch+0x5e8>
 800c348:	4572      	cmp	r2, lr
 800c34a:	f840 3c04 	str.w	r3, [r0, #-4]
 800c34e:	f100 0004 	add.w	r0, r0, #4
 800c352:	d1ec      	bne.n	800c32e <forward_lite_conv2d_sssa8_ch+0x10a>
 800c354:	9b84      	ldr	r3, [sp, #528]	@ 0x210
 800c356:	eb03 040b 	add.w	r4, r3, fp
 800c35a:	1be3      	subs	r3, r4, r7
 800c35c:	992b      	ldr	r1, [sp, #172]	@ 0xac
 800c35e:	9c2c      	ldr	r4, [sp, #176]	@ 0xb0
 800c360:	aa42      	add	r2, sp, #264	@ 0x108
 800c362:	9324      	str	r3, [sp, #144]	@ 0x90
 800c364:	a84e      	add	r0, sp, #312	@ 0x138
 800c366:	9b26      	ldr	r3, [sp, #152]	@ 0x98
 800c368:	fb01 f604 	mul.w	r6, r1, r4
 800c36c:	914b      	str	r1, [sp, #300]	@ 0x12c
 800c36e:	a958      	add	r1, sp, #352	@ 0x160
 800c370:	9344      	str	r3, [sp, #272]	@ 0x110
 800c372:	9b15      	ldr	r3, [sp, #84]	@ 0x54
 800c374:	fb0a f704 	mul.w	r7, sl, r4
 800c378:	944c      	str	r4, [sp, #304]	@ 0x130
 800c37a:	9343      	str	r3, [sp, #268]	@ 0x10c
 800c37c:	9b14      	ldr	r3, [sp, #80]	@ 0x50
 800c37e:	9348      	str	r3, [sp, #288]	@ 0x120
 800c380:	9b2f      	ldr	r3, [sp, #188]	@ 0xbc
 800c382:	9347      	str	r3, [sp, #284]	@ 0x11c
 800c384:	9b16      	ldr	r3, [sp, #88]	@ 0x58
 800c386:	935a      	str	r3, [sp, #360]	@ 0x168
 800c388:	9b30      	ldr	r3, [sp, #192]	@ 0xc0
 800c38a:	935b      	str	r3, [sp, #364]	@ 0x16c
 800c38c:	9b2d      	ldr	r3, [sp, #180]	@ 0xb4
 800c38e:	935c      	str	r3, [sp, #368]	@ 0x170
 800c390:	9b34      	ldr	r3, [sp, #208]	@ 0xd0
 800c392:	935d      	str	r3, [sp, #372]	@ 0x174
 800c394:	ab4a      	add	r3, sp, #296	@ 0x128
 800c396:	9300      	str	r3, [sp, #0]
 800c398:	ab46      	add	r3, sp, #280	@ 0x118
 800c39a:	f001 f809 	bl	800d3b0 <ai_padding_opt_init>
 800c39e:	fb0a f306 	mul.w	r3, sl, r6
 800c3a2:	ee18 2a90 	vmov	r2, s17
 800c3a6:	992b      	ldr	r1, [sp, #172]	@ 0xac
 800c3a8:	fb02 f403 	mul.w	r4, r2, r3
 800c3ac:	9a1b      	ldr	r2, [sp, #108]	@ 0x6c
 800c3ae:	fb07 f301 	mul.w	r3, r7, r1
 800c3b2:	f5b4 6f20 	cmp.w	r4, #2560	@ 0xa00
 800c3b6:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 800c3ba:	bfa8      	it	ge
 800c3bc:	f44f 6420 	movge.w	r4, #2560	@ 0xa00
 800c3c0:	f1b8 0f01 	cmp.w	r8, #1
 800c3c4:	ee09 3a10 	vmov	s18, r3
 800c3c8:	9b27      	ldr	r3, [sp, #156]	@ 0x9c
 800c3ca:	f003 0202 	and.w	r2, r3, #2
 800c3ce:	f3c3 0340 	ubfx	r3, r3, #1, #1
 800c3d2:	9238      	str	r2, [sp, #224]	@ 0xe0
 800c3d4:	9322      	str	r3, [sp, #136]	@ 0x88
 800c3d6:	f000 8237 	beq.w	800c848 <forward_lite_conv2d_sssa8_ch+0x624>
 800c3da:	2300      	movs	r3, #0
 800c3dc:	9337      	str	r3, [sp, #220]	@ 0xdc
 800c3de:	9b1f      	ldr	r3, [sp, #124]	@ 0x7c
 800c3e0:	fbb4 f3f3 	udiv	r3, r4, r3
 800c3e4:	b29b      	uxth	r3, r3
 800c3e6:	4619      	mov	r1, r3
 800c3e8:	ee18 3a90 	vmov	r3, s17
 800c3ec:	4299      	cmp	r1, r3
 800c3ee:	bf28      	it	cs
 800c3f0:	4619      	movcs	r1, r3
 800c3f2:	fbb3 f2f1 	udiv	r2, r3, r1
 800c3f6:	fb01 3312 	mls	r3, r1, r2, r3
 800c3fa:	b292      	uxth	r2, r2
 800c3fc:	9121      	str	r1, [sp, #132]	@ 0x84
 800c3fe:	b29b      	uxth	r3, r3
 800c400:	9239      	str	r2, [sp, #228]	@ 0xe4
 800c402:	b11b      	cbz	r3, 800c40c <forward_lite_conv2d_sssa8_ch+0x1e8>
 800c404:	4613      	mov	r3, r2
 800c406:	3301      	adds	r3, #1
 800c408:	b29b      	uxth	r3, r3
 800c40a:	9339      	str	r3, [sp, #228]	@ 0xe4
 800c40c:	9b2e      	ldr	r3, [sp, #184]	@ 0xb8
 800c40e:	2b01      	cmp	r3, #1
 800c410:	f000 823d 	beq.w	800c88e <forward_lite_conv2d_sssa8_ch+0x66a>
 800c414:	9a39      	ldr	r2, [sp, #228]	@ 0xe4
 800c416:	1e53      	subs	r3, r2, #1
 800c418:	b29b      	uxth	r3, r3
 800c41a:	9335      	str	r3, [sp, #212]	@ 0xd4
 800c41c:	2a00      	cmp	r2, #0
 800c41e:	f000 8137 	beq.w	800c690 <forward_lite_conv2d_sssa8_ch+0x46c>
 800c422:	fb0a f306 	mul.w	r3, sl, r6
 800c426:	9a1b      	ldr	r2, [sp, #108]	@ 0x6c
 800c428:	992d      	ldr	r1, [sp, #180]	@ 0xb4
 800c42a:	fa0f f689 	sxth.w	r6, r9
 800c42e:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 800c432:	9a26      	ldr	r2, [sp, #152]	@ 0x98
 800c434:	ee0a aa10 	vmov	s20, sl
 800c438:	46b1      	mov	r9, r6
 800c43a:	9319      	str	r3, [sp, #100]	@ 0x64
 800c43c:	9b34      	ldr	r3, [sp, #208]	@ 0xd0
 800c43e:	edcd 8a36 	vstr	s17, [sp, #216]	@ 0xd8
 800c442:	fb03 f302 	mul.w	r3, r3, r2
 800c446:	425b      	negs	r3, r3
 800c448:	1a5b      	subs	r3, r3, r1
 800c44a:	fb0a 5303 	mla	r3, sl, r3, r5
 800c44e:	9339      	str	r3, [sp, #228]	@ 0xe4
 800c450:	fb0a f302 	mul.w	r3, sl, r2
 800c454:	9a27      	ldr	r2, [sp, #156]	@ 0x9c
 800c456:	f1a2 0203 	sub.w	r2, r2, #3
 800c45a:	9312      	str	r3, [sp, #72]	@ 0x48
 800c45c:	fab2 f282 	clz	r2, r2
 800c460:	0952      	lsrs	r2, r2, #5
 800c462:	922a      	str	r2, [sp, #168]	@ 0xa8
 800c464:	f00a 0203 	and.w	r2, sl, #3
 800c468:	9213      	str	r2, [sp, #76]	@ 0x4c
 800c46a:	007a      	lsls	r2, r7, #1
 800c46c:	921c      	str	r2, [sp, #112]	@ 0x70
 800c46e:	ea4f 024a 	mov.w	r2, sl, lsl #1
 800c472:	9231      	str	r2, [sp, #196]	@ 0xc4
 800c474:	9a30      	ldr	r2, [sp, #192]	@ 0xc0
 800c476:	fb02 f303 	mul.w	r3, r2, r3
 800c47a:	9332      	str	r3, [sp, #200]	@ 0xc8
 800c47c:	424b      	negs	r3, r1
 800c47e:	9333      	str	r3, [sp, #204]	@ 0xcc
 800c480:	9b16      	ldr	r3, [sp, #88]	@ 0x58
 800c482:	fb0a f303 	mul.w	r3, sl, r3
 800c486:	46ba      	mov	sl, r7
 800c488:	931a      	str	r3, [sp, #104]	@ 0x68
 800c48a:	9b37      	ldr	r3, [sp, #220]	@ 0xdc
 800c48c:	b953      	cbnz	r3, 800c4a4 <forward_lite_conv2d_sssa8_ch+0x280>
 800c48e:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
 800c490:	2b00      	cmp	r3, #0
 800c492:	f040 81d1 	bne.w	800c838 <forward_lite_conv2d_sssa8_ch+0x614>
 800c496:	9b21      	ldr	r3, [sp, #132]	@ 0x84
 800c498:	ee19 1a10 	vmov	r1, s18
 800c49c:	9a1f      	ldr	r2, [sp, #124]	@ 0x7c
 800c49e:	9872      	ldr	r0, [sp, #456]	@ 0x1c8
 800c4a0:	f000 fecc 	bl	800d23c <st_int8_to16_dual_interleaved>
 800c4a4:	9b27      	ldr	r3, [sp, #156]	@ 0x9c
 800c4a6:	2b03      	cmp	r3, #3
 800c4a8:	f000 81ba 	beq.w	800c820 <forward_lite_conv2d_sssa8_ch+0x5fc>
 800c4ac:	9b7f      	ldr	r3, [sp, #508]	@ 0x1fc
 800c4ae:	931e      	str	r3, [sp, #120]	@ 0x78
 800c4b0:	9b2f      	ldr	r3, [sp, #188]	@ 0xbc
 800c4b2:	2b00      	cmp	r3, #0
 800c4b4:	f000 80b5 	beq.w	800c622 <forward_lite_conv2d_sssa8_ch+0x3fe>
 800c4b8:	9b34      	ldr	r3, [sp, #208]	@ 0xd0
 800c4ba:	9a2b      	ldr	r2, [sp, #172]	@ 0xac
 800c4bc:	1ad2      	subs	r2, r2, r3
 800c4be:	425b      	negs	r3, r3
 800c4c0:	9317      	str	r3, [sp, #92]	@ 0x5c
 800c4c2:	9b39      	ldr	r3, [sp, #228]	@ 0xe4
 800c4c4:	9211      	str	r2, [sp, #68]	@ 0x44
 800c4c6:	9323      	str	r3, [sp, #140]	@ 0x8c
 800c4c8:	9b1b      	ldr	r3, [sp, #108]	@ 0x6c
 800c4ca:	930a      	str	r3, [sp, #40]	@ 0x28
 800c4cc:	9b2e      	ldr	r3, [sp, #184]	@ 0xb8
 800c4ce:	9329      	str	r3, [sp, #164]	@ 0xa4
 800c4d0:	a84e      	add	r0, sp, #312	@ 0x138
 800c4d2:	f000 ffc7 	bl	800d464 <ai_padding_opt_phase1>
 800c4d6:	9b14      	ldr	r3, [sp, #80]	@ 0x50
 800c4d8:	2b00      	cmp	r3, #0
 800c4da:	d074      	beq.n	800c5c6 <forward_lite_conv2d_sssa8_ch+0x3a2>
 800c4dc:	9a17      	ldr	r2, [sp, #92]	@ 0x5c
 800c4de:	9b11      	ldr	r3, [sp, #68]	@ 0x44
 800c4e0:	991c      	ldr	r1, [sp, #112]	@ 0x70
 800c4e2:	1a9b      	subs	r3, r3, r2
 800c4e4:	fb01 f303 	mul.w	r3, r1, r3
 800c4e8:	931d      	str	r3, [sp, #116]	@ 0x74
 800c4ea:	e9dd 312c 	ldrd	r3, r1, [sp, #176]	@ 0xb0
 800c4ee:	1a5f      	subs	r7, r3, r1
 800c4f0:	9b2b      	ldr	r3, [sp, #172]	@ 0xac
 800c4f2:	4413      	add	r3, r2
 800c4f4:	9328      	str	r3, [sp, #160]	@ 0xa0
 800c4f6:	9b33      	ldr	r3, [sp, #204]	@ 0xcc
 800c4f8:	930c      	str	r3, [sp, #48]	@ 0x30
 800c4fa:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 800c4fc:	930f      	str	r3, [sp, #60]	@ 0x3c
 800c4fe:	9b2e      	ldr	r3, [sp, #184]	@ 0xb8
 800c500:	9310      	str	r3, [sp, #64]	@ 0x40
 800c502:	9b4e      	ldr	r3, [sp, #312]	@ 0x138
 800c504:	2b00      	cmp	r3, #0
 800c506:	f000 80d9 	beq.w	800c6bc <forward_lite_conv2d_sssa8_ch+0x498>
 800c50a:	3b01      	subs	r3, #1
 800c50c:	934e      	str	r3, [sp, #312]	@ 0x138
 800c50e:	2301      	movs	r3, #1
 800c510:	f8ad 315e 	strh.w	r3, [sp, #350]	@ 0x15e
 800c514:	9b17      	ldr	r3, [sp, #92]	@ 0x5c
 800c516:	9a28      	ldr	r2, [sp, #160]	@ 0xa0
 800c518:	4293      	cmp	r3, r2
 800c51a:	da40      	bge.n	800c59e <forward_lite_conv2d_sssa8_ch+0x37a>
 800c51c:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 800c51e:	ee08 aa10 	vmov	s16, sl
 800c522:	9d31      	ldr	r5, [sp, #196]	@ 0xc4
 800c524:	ee1a 8a10 	vmov	r8, s20
 800c528:	1afb      	subs	r3, r7, r3
 800c52a:	9e26      	ldr	r6, [sp, #152]	@ 0x98
 800c52c:	fb05 f303 	mul.w	r3, r5, r3
 800c530:	9318      	str	r3, [sp, #96]	@ 0x60
 800c532:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800c534:	930d      	str	r3, [sp, #52]	@ 0x34
 800c536:	9b17      	ldr	r3, [sp, #92]	@ 0x5c
 800c538:	930e      	str	r3, [sp, #56]	@ 0x38
 800c53a:	9c0c      	ldr	r4, [sp, #48]	@ 0x30
 800c53c:	42bc      	cmp	r4, r7
 800c53e:	da22      	bge.n	800c586 <forward_lite_conv2d_sssa8_ch+0x362>
 800c540:	9b15      	ldr	r3, [sp, #84]	@ 0x54
 800c542:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 800c544:	f8dd b034 	ldr.w	fp, [sp, #52]	@ 0x34
 800c548:	4293      	cmp	r3, r2
 800c54a:	f8dd a028 	ldr.w	sl, [sp, #40]	@ 0x28
 800c54e:	bf8c      	ite	hi
 800c550:	2300      	movhi	r3, #0
 800c552:	2301      	movls	r3, #1
 800c554:	930b      	str	r3, [sp, #44]	@ 0x2c
 800c556:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
 800c558:	2b00      	cmp	r3, #0
 800c55a:	f000 809e 	beq.w	800c69a <forward_lite_conv2d_sssa8_ch+0x476>
 800c55e:	42a6      	cmp	r6, r4
 800c560:	4651      	mov	r1, sl
 800c562:	4642      	mov	r2, r8
 800c564:	4648      	mov	r0, r9
 800c566:	d903      	bls.n	800c570 <forward_lite_conv2d_sssa8_ch+0x34c>
 800c568:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800c56a:	2b00      	cmp	r3, #0
 800c56c:	f000 8124 	beq.w	800c7b8 <forward_lite_conv2d_sssa8_ch+0x594>
 800c570:	f000 ff92 	bl	800d498 <st_int16_fill>
 800c574:	3401      	adds	r4, #1
 800c576:	44aa      	add	sl, r5
 800c578:	44c3      	add	fp, r8
 800c57a:	42bc      	cmp	r4, r7
 800c57c:	d1ef      	bne.n	800c55e <forward_lite_conv2d_sssa8_ch+0x33a>
 800c57e:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800c580:	9a18      	ldr	r2, [sp, #96]	@ 0x60
 800c582:	4413      	add	r3, r2
 800c584:	930a      	str	r3, [sp, #40]	@ 0x28
 800c586:	9a0d      	ldr	r2, [sp, #52]	@ 0x34
 800c588:	9912      	ldr	r1, [sp, #72]	@ 0x48
 800c58a:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800c58c:	440a      	add	r2, r1
 800c58e:	3301      	adds	r3, #1
 800c590:	920d      	str	r2, [sp, #52]	@ 0x34
 800c592:	9a11      	ldr	r2, [sp, #68]	@ 0x44
 800c594:	930e      	str	r3, [sp, #56]	@ 0x38
 800c596:	4293      	cmp	r3, r2
 800c598:	d1cf      	bne.n	800c53a <forward_lite_conv2d_sssa8_ch+0x316>
 800c59a:	ee18 aa10 	vmov	sl, s16
 800c59e:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 800c5a0:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 800c5a2:	4293      	cmp	r3, r2
 800c5a4:	f000 80bf 	beq.w	800c726 <forward_lite_conv2d_sssa8_ch+0x502>
 800c5a8:	9a0f      	ldr	r2, [sp, #60]	@ 0x3c
 800c5aa:	991a      	ldr	r1, [sp, #104]	@ 0x68
 800c5ac:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 800c5ae:	440a      	add	r2, r1
 800c5b0:	9916      	ldr	r1, [sp, #88]	@ 0x58
 800c5b2:	3301      	adds	r3, #1
 800c5b4:	920f      	str	r2, [sp, #60]	@ 0x3c
 800c5b6:	440f      	add	r7, r1
 800c5b8:	9a0c      	ldr	r2, [sp, #48]	@ 0x30
 800c5ba:	9310      	str	r3, [sp, #64]	@ 0x40
 800c5bc:	440a      	add	r2, r1
 800c5be:	920c      	str	r2, [sp, #48]	@ 0x30
 800c5c0:	9a14      	ldr	r2, [sp, #80]	@ 0x50
 800c5c2:	429a      	cmp	r2, r3
 800c5c4:	d19d      	bne.n	800c502 <forward_lite_conv2d_sssa8_ch+0x2de>
 800c5c6:	9930      	ldr	r1, [sp, #192]	@ 0xc0
 800c5c8:	9a11      	ldr	r2, [sp, #68]	@ 0x44
 800c5ca:	9b29      	ldr	r3, [sp, #164]	@ 0xa4
 800c5cc:	440a      	add	r2, r1
 800c5ce:	3301      	adds	r3, #1
 800c5d0:	9211      	str	r2, [sp, #68]	@ 0x44
 800c5d2:	9a17      	ldr	r2, [sp, #92]	@ 0x5c
 800c5d4:	9329      	str	r3, [sp, #164]	@ 0xa4
 800c5d6:	440a      	add	r2, r1
 800c5d8:	9932      	ldr	r1, [sp, #200]	@ 0xc8
 800c5da:	9217      	str	r2, [sp, #92]	@ 0x5c
 800c5dc:	9a23      	ldr	r2, [sp, #140]	@ 0x8c
 800c5de:	440a      	add	r2, r1
 800c5e0:	9223      	str	r2, [sp, #140]	@ 0x8c
 800c5e2:	9a2f      	ldr	r2, [sp, #188]	@ 0xbc
 800c5e4:	429a      	cmp	r2, r3
 800c5e6:	f47f af73 	bne.w	800c4d0 <forward_lite_conv2d_sssa8_ch+0x2ac>
 800c5ea:	991b      	ldr	r1, [sp, #108]	@ 0x6c
 800c5ec:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800c5ee:	4299      	cmp	r1, r3
 800c5f0:	d017      	beq.n	800c622 <forward_lite_conv2d_sssa8_ch+0x3fe>
 800c5f2:	9b1e      	ldr	r3, [sp, #120]	@ 0x78
 800c5f4:	ee19 2a90 	vmov	r2, s19
 800c5f8:	ee19 0a10 	vmov	r0, s18
 800c5fc:	9307      	str	r3, [sp, #28]
 800c5fe:	9b22      	ldr	r3, [sp, #136]	@ 0x88
 800c600:	9306      	str	r3, [sp, #24]
 800c602:	9b25      	ldr	r3, [sp, #148]	@ 0x94
 800c604:	9305      	str	r3, [sp, #20]
 800c606:	9b84      	ldr	r3, [sp, #528]	@ 0x210
 800c608:	9304      	str	r3, [sp, #16]
 800c60a:	9b24      	ldr	r3, [sp, #144]	@ 0x90
 800c60c:	9303      	str	r3, [sp, #12]
 800c60e:	9b1f      	ldr	r3, [sp, #124]	@ 0x7c
 800c610:	9302      	str	r3, [sp, #8]
 800c612:	9b21      	ldr	r3, [sp, #132]	@ 0x84
 800c614:	9301      	str	r3, [sp, #4]
 800c616:	9b20      	ldr	r3, [sp, #128]	@ 0x80
 800c618:	9300      	str	r3, [sp, #0]
 800c61a:	ee18 3a90 	vmov	r3, s17
 800c61e:	f001 fb63 	bl	800dce8 <st_sssa8_ch_nn_mat_mult_kernel_single_opt>
 800c622:	9a21      	ldr	r2, [sp, #132]	@ 0x84
 800c624:	9b36      	ldr	r3, [sp, #216]	@ 0xd8
 800c626:	1a9b      	subs	r3, r3, r2
 800c628:	b299      	uxth	r1, r3
 800c62a:	4613      	mov	r3, r2
 800c62c:	428a      	cmp	r2, r1
 800c62e:	9136      	str	r1, [sp, #216]	@ 0xd8
 800c630:	bf28      	it	cs
 800c632:	460b      	movcs	r3, r1
 800c634:	2b00      	cmp	r3, #0
 800c636:	f000 80f1 	beq.w	800c81c <forward_lite_conv2d_sssa8_ch+0x5f8>
 800c63a:	9972      	ldr	r1, [sp, #456]	@ 0x1c8
 800c63c:	981f      	ldr	r0, [sp, #124]	@ 0x7c
 800c63e:	fb00 1102 	mla	r1, r0, r2, r1
 800c642:	9172      	str	r1, [sp, #456]	@ 0x1c8
 800c644:	ee19 1a90 	vmov	r1, s19
 800c648:	eb01 0182 	add.w	r1, r1, r2, lsl #2
 800c64c:	ee09 1a90 	vmov	s19, r1
 800c650:	9924      	ldr	r1, [sp, #144]	@ 0x90
 800c652:	eb01 0142 	add.w	r1, r1, r2, lsl #1
 800c656:	9124      	str	r1, [sp, #144]	@ 0x90
 800c658:	9984      	ldr	r1, [sp, #528]	@ 0x210
 800c65a:	eb01 0182 	add.w	r1, r1, r2, lsl #2
 800c65e:	9184      	str	r1, [sp, #528]	@ 0x210
 800c660:	9925      	ldr	r1, [sp, #148]	@ 0x94
 800c662:	eb01 0182 	add.w	r1, r1, r2, lsl #2
 800c666:	9125      	str	r1, [sp, #148]	@ 0x94
 800c668:	9938      	ldr	r1, [sp, #224]	@ 0xe0
 800c66a:	2900      	cmp	r1, #0
 800c66c:	f000 80de 	beq.w	800c82c <forward_lite_conv2d_sssa8_ch+0x608>
 800c670:	997f      	ldr	r1, [sp, #508]	@ 0x1fc
 800c672:	9820      	ldr	r0, [sp, #128]	@ 0x80
 800c674:	9321      	str	r3, [sp, #132]	@ 0x84
 800c676:	fb00 1202 	mla	r2, r0, r2, r1
 800c67a:	927f      	str	r2, [sp, #508]	@ 0x1fc
 800c67c:	9b35      	ldr	r3, [sp, #212]	@ 0xd4
 800c67e:	3b01      	subs	r3, #1
 800c680:	b29b      	uxth	r3, r3
 800c682:	461a      	mov	r2, r3
 800c684:	9335      	str	r3, [sp, #212]	@ 0xd4
 800c686:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 800c68a:	429a      	cmp	r2, r3
 800c68c:	f47f aefd 	bne.w	800c48a <forward_lite_conv2d_sssa8_ch+0x266>
 800c690:	b063      	add	sp, #396	@ 0x18c
 800c692:	ecbd 8b06 	vpop	{d8-d10}
 800c696:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800c69a:	42a6      	cmp	r6, r4
 800c69c:	4642      	mov	r2, r8
 800c69e:	4651      	mov	r1, sl
 800c6a0:	4648      	mov	r0, r9
 800c6a2:	d903      	bls.n	800c6ac <forward_lite_conv2d_sssa8_ch+0x488>
 800c6a4:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800c6a6:	2b00      	cmp	r3, #0
 800c6a8:	f000 8082 	beq.w	800c7b0 <forward_lite_conv2d_sssa8_ch+0x58c>
 800c6ac:	f000 fef4 	bl	800d498 <st_int16_fill>
 800c6b0:	3401      	adds	r4, #1
 800c6b2:	44aa      	add	sl, r5
 800c6b4:	44c3      	add	fp, r8
 800c6b6:	42bc      	cmp	r4, r7
 800c6b8:	d1ef      	bne.n	800c69a <forward_lite_conv2d_sssa8_ch+0x476>
 800c6ba:	e760      	b.n	800c57e <forward_lite_conv2d_sssa8_ch+0x35a>
 800c6bc:	9b4f      	ldr	r3, [sp, #316]	@ 0x13c
 800c6be:	b933      	cbnz	r3, 800c6ce <forward_lite_conv2d_sssa8_ch+0x4aa>
 800c6c0:	9b50      	ldr	r3, [sp, #320]	@ 0x140
 800c6c2:	3b01      	subs	r3, #1
 800c6c4:	9350      	str	r3, [sp, #320]	@ 0x140
 800c6c6:	2301      	movs	r3, #1
 800c6c8:	f8ad 315e 	strh.w	r3, [sp, #350]	@ 0x15e
 800c6cc:	e722      	b.n	800c514 <forward_lite_conv2d_sssa8_ch+0x2f0>
 800c6ce:	3b01      	subs	r3, #1
 800c6d0:	934f      	str	r3, [sp, #316]	@ 0x13c
 800c6d2:	f8bd 315c 	ldrh.w	r3, [sp, #348]	@ 0x15c
 800c6d6:	2b01      	cmp	r3, #1
 800c6d8:	f8ad 315e 	strh.w	r3, [sp, #350]	@ 0x15e
 800c6dc:	f43f af1a 	beq.w	800c514 <forward_lite_conv2d_sssa8_ch+0x2f0>
 800c6e0:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
 800c6e2:	9c17      	ldr	r4, [sp, #92]	@ 0x5c
 800c6e4:	2b00      	cmp	r3, #0
 800c6e6:	d148      	bne.n	800c77a <forward_lite_conv2d_sssa8_ch+0x556>
 800c6e8:	9b11      	ldr	r3, [sp, #68]	@ 0x44
 800c6ea:	429c      	cmp	r4, r3
 800c6ec:	f6bf af57 	bge.w	800c59e <forward_lite_conv2d_sssa8_ch+0x37a>
 800c6f0:	970b      	str	r7, [sp, #44]	@ 0x2c
 800c6f2:	4698      	mov	r8, r3
 800c6f4:	9e0f      	ldr	r6, [sp, #60]	@ 0x3c
 800c6f6:	9d0a      	ldr	r5, [sp, #40]	@ 0x28
 800c6f8:	f8dd b070 	ldr.w	fp, [sp, #112]	@ 0x70
 800c6fc:	9f12      	ldr	r7, [sp, #72]	@ 0x48
 800c6fe:	3401      	adds	r4, #1
 800c700:	4629      	mov	r1, r5
 800c702:	4630      	mov	r0, r6
 800c704:	4652      	mov	r2, sl
 800c706:	f000 fc6b 	bl	800cfe0 <st_int8_to16_no_shift_interleaved>
 800c70a:	4544      	cmp	r4, r8
 800c70c:	445d      	add	r5, fp
 800c70e:	443e      	add	r6, r7
 800c710:	d1f5      	bne.n	800c6fe <forward_lite_conv2d_sssa8_ch+0x4da>
 800c712:	9a1d      	ldr	r2, [sp, #116]	@ 0x74
 800c714:	e9dd 370a 	ldrd	r3, r7, [sp, #40]	@ 0x28
 800c718:	4413      	add	r3, r2
 800c71a:	930a      	str	r3, [sp, #40]	@ 0x28
 800c71c:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 800c71e:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 800c720:	4293      	cmp	r3, r2
 800c722:	f47f af41 	bne.w	800c5a8 <forward_lite_conv2d_sssa8_ch+0x384>
 800c726:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 800c728:	2b00      	cmp	r3, #0
 800c72a:	d149      	bne.n	800c7c0 <forward_lite_conv2d_sssa8_ch+0x59c>
 800c72c:	9b2a      	ldr	r3, [sp, #168]	@ 0xa8
 800c72e:	2b00      	cmp	r3, #0
 800c730:	d046      	beq.n	800c7c0 <forward_lite_conv2d_sssa8_ch+0x59c>
 800c732:	9b1e      	ldr	r3, [sp, #120]	@ 0x78
 800c734:	ee19 2a90 	vmov	r2, s19
 800c738:	991b      	ldr	r1, [sp, #108]	@ 0x6c
 800c73a:	ee19 0a10 	vmov	r0, s18
 800c73e:	9308      	str	r3, [sp, #32]
 800c740:	9b22      	ldr	r3, [sp, #136]	@ 0x88
 800c742:	9307      	str	r3, [sp, #28]
 800c744:	9b25      	ldr	r3, [sp, #148]	@ 0x94
 800c746:	9306      	str	r3, [sp, #24]
 800c748:	9b84      	ldr	r3, [sp, #528]	@ 0x210
 800c74a:	9305      	str	r3, [sp, #20]
 800c74c:	9b24      	ldr	r3, [sp, #144]	@ 0x90
 800c74e:	9304      	str	r3, [sp, #16]
 800c750:	9b1f      	ldr	r3, [sp, #124]	@ 0x7c
 800c752:	9303      	str	r3, [sp, #12]
 800c754:	9b21      	ldr	r3, [sp, #132]	@ 0x84
 800c756:	9302      	str	r3, [sp, #8]
 800c758:	9b20      	ldr	r3, [sp, #128]	@ 0x80
 800c75a:	9300      	str	r3, [sp, #0]
 800c75c:	2302      	movs	r3, #2
 800c75e:	9301      	str	r3, [sp, #4]
 800c760:	ee18 3a90 	vmov	r3, s17
 800c764:	f001 fc8a 	bl	800e07c <st_sssa8_ch_nn_mat_mult_kernel_opt>
 800c768:	901e      	str	r0, [sp, #120]	@ 0x78
 800c76a:	9b14      	ldr	r3, [sp, #80]	@ 0x50
 800c76c:	9a10      	ldr	r2, [sp, #64]	@ 0x40
 800c76e:	3b01      	subs	r3, #1
 800c770:	4293      	cmp	r3, r2
 800c772:	d045      	beq.n	800c800 <forward_lite_conv2d_sssa8_ch+0x5dc>
 800c774:	9b1b      	ldr	r3, [sp, #108]	@ 0x6c
 800c776:	930a      	str	r3, [sp, #40]	@ 0x28
 800c778:	e716      	b.n	800c5a8 <forward_lite_conv2d_sssa8_ch+0x384>
 800c77a:	9b11      	ldr	r3, [sp, #68]	@ 0x44
 800c77c:	429c      	cmp	r4, r3
 800c77e:	f6bf af0e 	bge.w	800c59e <forward_lite_conv2d_sssa8_ch+0x37a>
 800c782:	970b      	str	r7, [sp, #44]	@ 0x2c
 800c784:	4698      	mov	r8, r3
 800c786:	9e0f      	ldr	r6, [sp, #60]	@ 0x3c
 800c788:	9d0a      	ldr	r5, [sp, #40]	@ 0x28
 800c78a:	f8dd b070 	ldr.w	fp, [sp, #112]	@ 0x70
 800c78e:	9f12      	ldr	r7, [sp, #72]	@ 0x48
 800c790:	3401      	adds	r4, #1
 800c792:	4629      	mov	r1, r5
 800c794:	4630      	mov	r0, r6
 800c796:	4652      	mov	r2, sl
 800c798:	f000 fbc0 	bl	800cf1c <st_int8_to16_no_shift>
 800c79c:	4544      	cmp	r4, r8
 800c79e:	445d      	add	r5, fp
 800c7a0:	443e      	add	r6, r7
 800c7a2:	d1f5      	bne.n	800c790 <forward_lite_conv2d_sssa8_ch+0x56c>
 800c7a4:	9a1d      	ldr	r2, [sp, #116]	@ 0x74
 800c7a6:	e9dd 370a 	ldrd	r3, r7, [sp, #40]	@ 0x28
 800c7aa:	4413      	add	r3, r2
 800c7ac:	930a      	str	r3, [sp, #40]	@ 0x28
 800c7ae:	e7b5      	b.n	800c71c <forward_lite_conv2d_sssa8_ch+0x4f8>
 800c7b0:	4658      	mov	r0, fp
 800c7b2:	f000 fc15 	bl	800cfe0 <st_int8_to16_no_shift_interleaved>
 800c7b6:	e77b      	b.n	800c6b0 <forward_lite_conv2d_sssa8_ch+0x48c>
 800c7b8:	4658      	mov	r0, fp
 800c7ba:	f000 fbaf 	bl	800cf1c <st_int8_to16_no_shift>
 800c7be:	e6d9      	b.n	800c574 <forward_lite_conv2d_sssa8_ch+0x350>
 800c7c0:	9b1e      	ldr	r3, [sp, #120]	@ 0x78
 800c7c2:	ee19 2a90 	vmov	r2, s19
 800c7c6:	991b      	ldr	r1, [sp, #108]	@ 0x6c
 800c7c8:	ee19 0a10 	vmov	r0, s18
 800c7cc:	9308      	str	r3, [sp, #32]
 800c7ce:	9b22      	ldr	r3, [sp, #136]	@ 0x88
 800c7d0:	9307      	str	r3, [sp, #28]
 800c7d2:	9b25      	ldr	r3, [sp, #148]	@ 0x94
 800c7d4:	9306      	str	r3, [sp, #24]
 800c7d6:	9b84      	ldr	r3, [sp, #528]	@ 0x210
 800c7d8:	9305      	str	r3, [sp, #20]
 800c7da:	9b24      	ldr	r3, [sp, #144]	@ 0x90
 800c7dc:	9304      	str	r3, [sp, #16]
 800c7de:	9b1f      	ldr	r3, [sp, #124]	@ 0x7c
 800c7e0:	9303      	str	r3, [sp, #12]
 800c7e2:	9b21      	ldr	r3, [sp, #132]	@ 0x84
 800c7e4:	9302      	str	r3, [sp, #8]
 800c7e6:	9b20      	ldr	r3, [sp, #128]	@ 0x80
 800c7e8:	9300      	str	r3, [sp, #0]
 800c7ea:	2300      	movs	r3, #0
 800c7ec:	9301      	str	r3, [sp, #4]
 800c7ee:	ee18 3a90 	vmov	r3, s17
 800c7f2:	f001 fc43 	bl	800e07c <st_sssa8_ch_nn_mat_mult_kernel_opt>
 800c7f6:	9b27      	ldr	r3, [sp, #156]	@ 0x9c
 800c7f8:	901e      	str	r0, [sp, #120]	@ 0x78
 800c7fa:	2b03      	cmp	r3, #3
 800c7fc:	d1ba      	bne.n	800c774 <forward_lite_conv2d_sssa8_ch+0x550>
 800c7fe:	e7b4      	b.n	800c76a <forward_lite_conv2d_sssa8_ch+0x546>
 800c800:	9b1e      	ldr	r3, [sp, #120]	@ 0x78
 800c802:	3302      	adds	r3, #2
 800c804:	931e      	str	r3, [sp, #120]	@ 0x78
 800c806:	9b1b      	ldr	r3, [sp, #108]	@ 0x6c
 800c808:	930a      	str	r3, [sp, #40]	@ 0x28
 800c80a:	e6cd      	b.n	800c5a8 <forward_lite_conv2d_sssa8_ch+0x384>
 800c80c:	4572      	cmp	r2, lr
 800c80e:	f840 6c04 	str.w	r6, [r0, #-4]
 800c812:	f100 0004 	add.w	r0, r0, #4
 800c816:	f47f ad8a 	bne.w	800c32e <forward_lite_conv2d_sssa8_ch+0x10a>
 800c81a:	e59b      	b.n	800c354 <forward_lite_conv2d_sssa8_ch+0x130>
 800c81c:	9321      	str	r3, [sp, #132]	@ 0x84
 800c81e:	e72d      	b.n	800c67c <forward_lite_conv2d_sssa8_ch+0x458>
 800c820:	9b14      	ldr	r3, [sp, #80]	@ 0x50
 800c822:	9a7f      	ldr	r2, [sp, #508]	@ 0x1fc
 800c824:	3303      	adds	r3, #3
 800c826:	18d3      	adds	r3, r2, r3
 800c828:	931e      	str	r3, [sp, #120]	@ 0x78
 800c82a:	e641      	b.n	800c4b0 <forward_lite_conv2d_sssa8_ch+0x28c>
 800c82c:	4611      	mov	r1, r2
 800c82e:	9a7f      	ldr	r2, [sp, #508]	@ 0x1fc
 800c830:	9321      	str	r3, [sp, #132]	@ 0x84
 800c832:	440a      	add	r2, r1
 800c834:	927f      	str	r2, [sp, #508]	@ 0x1fc
 800c836:	e721      	b.n	800c67c <forward_lite_conv2d_sssa8_ch+0x458>
 800c838:	9b21      	ldr	r3, [sp, #132]	@ 0x84
 800c83a:	ee19 1a10 	vmov	r1, s18
 800c83e:	9a1f      	ldr	r2, [sp, #124]	@ 0x7c
 800c840:	9872      	ldr	r0, [sp, #456]	@ 0x1c8
 800c842:	f000 fc11 	bl	800d068 <st_int8_to16_dual>
 800c846:	e62d      	b.n	800c4a4 <forward_lite_conv2d_sssa8_ch+0x280>
 800c848:	ee18 1a90 	vmov	r1, s17
 800c84c:	9a1f      	ldr	r2, [sp, #124]	@ 0x7c
 800c84e:	fb02 f301 	mul.w	r3, r2, r1
 800c852:	42a3      	cmp	r3, r4
 800c854:	f73f adc1 	bgt.w	800c3da <forward_lite_conv2d_sssa8_ch+0x1b6>
 800c858:	f01a 0f03 	tst.w	sl, #3
 800c85c:	f8cd 80dc 	str.w	r8, [sp, #220]	@ 0xdc
 800c860:	f040 822e 	bne.w	800ccc0 <forward_lite_conv2d_sssa8_ch+0xa9c>
 800c864:	ee18 3a90 	vmov	r3, s17
 800c868:	ee19 1a10 	vmov	r1, s18
 800c86c:	9872      	ldr	r0, [sp, #456]	@ 0x1c8
 800c86e:	f000 fce5 	bl	800d23c <st_int8_to16_dual_interleaved>
 800c872:	e5b4      	b.n	800c3de <forward_lite_conv2d_sssa8_ch+0x1ba>
 800c874:	9a26      	ldr	r2, [sp, #152]	@ 0x98
 800c876:	9b15      	ldr	r3, [sp, #84]	@ 0x54
 800c878:	fb02 f303 	mul.w	r3, r2, r3
 800c87c:	9a7f      	ldr	r2, [sp, #508]	@ 0x1fc
 800c87e:	fb0a 0303 	mla	r3, sl, r3, r0
 800c882:	429a      	cmp	r2, r3
 800c884:	bf2c      	ite	cs
 800c886:	2300      	movcs	r3, #0
 800c888:	2301      	movcc	r3, #1
 800c88a:	932e      	str	r3, [sp, #184]	@ 0xb8
 800c88c:	e505      	b.n	800c29a <forward_lite_conv2d_sssa8_ch+0x76>
 800c88e:	9b2f      	ldr	r3, [sp, #188]	@ 0xbc
 800c890:	2b00      	cmp	r3, #0
 800c892:	f43f aefd 	beq.w	800c690 <forward_lite_conv2d_sssa8_ch+0x46c>
 800c896:	9a2e      	ldr	r2, [sp, #184]	@ 0xb8
 800c898:	fb0a f306 	mul.w	r3, sl, r6
 800c89c:	9926      	ldr	r1, [sp, #152]	@ 0x98
 800c89e:	fa0f f989 	sxth.w	r9, r9
 800c8a2:	9238      	str	r2, [sp, #224]	@ 0xe0
 800c8a4:	ee0a aa90 	vmov	s21, sl
 800c8a8:	9a1b      	ldr	r2, [sp, #108]	@ 0x6c
 800c8aa:	fb01 f40a 	mul.w	r4, r1, sl
 800c8ae:	982d      	ldr	r0, [sp, #180]	@ 0xb4
 800c8b0:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 800c8b4:	9a34      	ldr	r2, [sp, #208]	@ 0xd0
 800c8b6:	9413      	str	r4, [sp, #76]	@ 0x4c
 800c8b8:	931a      	str	r3, [sp, #104]	@ 0x68
 800c8ba:	fb01 f302 	mul.w	r3, r1, r2
 800c8be:	9914      	ldr	r1, [sp, #80]	@ 0x50
 800c8c0:	425b      	negs	r3, r3
 800c8c2:	1a1b      	subs	r3, r3, r0
 800c8c4:	fb0a 5303 	mla	r3, sl, r3, r5
 800c8c8:	9d7f      	ldr	r5, [sp, #508]	@ 0x1fc
 800c8ca:	9335      	str	r3, [sp, #212]	@ 0xd4
 800c8cc:	9b39      	ldr	r3, [sp, #228]	@ 0xe4
 800c8ce:	953c      	str	r5, [sp, #240]	@ 0xf0
 800c8d0:	3b01      	subs	r3, #1
 800c8d2:	b29b      	uxth	r3, r3
 800c8d4:	9341      	str	r3, [sp, #260]	@ 0x104
 800c8d6:	1ccb      	adds	r3, r1, #3
 800c8d8:	18eb      	adds	r3, r5, r3
 800c8da:	933b      	str	r3, [sp, #236]	@ 0xec
 800c8dc:	f00a 0303 	and.w	r3, sl, #3
 800c8e0:	9312      	str	r3, [sp, #72]	@ 0x48
 800c8e2:	007b      	lsls	r3, r7, #1
 800c8e4:	931c      	str	r3, [sp, #112]	@ 0x70
 800c8e6:	ea4f 034a 	mov.w	r3, sl, lsl #1
 800c8ea:	9334      	str	r3, [sp, #208]	@ 0xd0
 800c8ec:	9b2b      	ldr	r3, [sp, #172]	@ 0xac
 800c8ee:	1a9b      	subs	r3, r3, r2
 800c8f0:	9310      	str	r3, [sp, #64]	@ 0x40
 800c8f2:	4253      	negs	r3, r2
 800c8f4:	9318      	str	r3, [sp, #96]	@ 0x60
 800c8f6:	9b30      	ldr	r3, [sp, #192]	@ 0xc0
 800c8f8:	fb03 f304 	mul.w	r3, r3, r4
 800c8fc:	933e      	str	r3, [sp, #248]	@ 0xf8
 800c8fe:	4243      	negs	r3, r0
 800c900:	a84e      	add	r0, sp, #312	@ 0x138
 800c902:	933a      	str	r3, [sp, #232]	@ 0xe8
 800c904:	1c8b      	adds	r3, r1, #2
 800c906:	9340      	str	r3, [sp, #256]	@ 0x100
 800c908:	ee18 3a90 	vmov	r3, s17
 800c90c:	fb01 f303 	mul.w	r3, r1, r3
 800c910:	933f      	str	r3, [sp, #252]	@ 0xfc
 800c912:	9b16      	ldr	r3, [sp, #88]	@ 0x58
 800c914:	fb03 f30a 	mul.w	r3, r3, sl
 800c918:	46ca      	mov	sl, r9
 800c91a:	9319      	str	r3, [sp, #100]	@ 0x64
 800c91c:	f000 fda2 	bl	800d464 <ai_padding_opt_phase1>
 800c920:	9b27      	ldr	r3, [sp, #156]	@ 0x9c
 800c922:	2b03      	cmp	r3, #3
 800c924:	f000 81b6 	beq.w	800cc94 <forward_lite_conv2d_sssa8_ch+0xa70>
 800c928:	9b3c      	ldr	r3, [sp, #240]	@ 0xf0
 800c92a:	9328      	str	r3, [sp, #160]	@ 0xa0
 800c92c:	9b38      	ldr	r3, [sp, #224]	@ 0xe0
 800c92e:	933d      	str	r3, [sp, #244]	@ 0xf4
 800c930:	9b37      	ldr	r3, [sp, #220]	@ 0xdc
 800c932:	b953      	cbnz	r3, 800c94a <forward_lite_conv2d_sssa8_ch+0x726>
 800c934:	9b12      	ldr	r3, [sp, #72]	@ 0x48
 800c936:	2b00      	cmp	r3, #0
 800c938:	f040 81ba 	bne.w	800ccb0 <forward_lite_conv2d_sssa8_ch+0xa8c>
 800c93c:	9b21      	ldr	r3, [sp, #132]	@ 0x84
 800c93e:	ee19 1a10 	vmov	r1, s18
 800c942:	9a1f      	ldr	r2, [sp, #124]	@ 0x7c
 800c944:	9872      	ldr	r0, [sp, #456]	@ 0x1c8
 800c946:	f000 fc79 	bl	800d23c <st_int8_to16_dual_interleaved>
 800c94a:	9b39      	ldr	r3, [sp, #228]	@ 0xe4
 800c94c:	2b00      	cmp	r3, #0
 800c94e:	f000 817f 	beq.w	800cc50 <forward_lite_conv2d_sssa8_ch+0xa2c>
 800c952:	9a18      	ldr	r2, [sp, #96]	@ 0x60
 800c954:	eeb0 aa69 	vmov.f32	s20, s19
 800c958:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 800c95a:	46b8      	mov	r8, r7
 800c95c:	991c      	ldr	r1, [sp, #112]	@ 0x70
 800c95e:	1a9b      	subs	r3, r3, r2
 800c960:	edcd 8a32 	vstr	s17, [sp, #200]	@ 0xc8
 800c964:	fb01 f303 	mul.w	r3, r1, r3
 800c968:	931d      	str	r3, [sp, #116]	@ 0x74
 800c96a:	9b2b      	ldr	r3, [sp, #172]	@ 0xac
 800c96c:	18d3      	adds	r3, r2, r3
 800c96e:	9333      	str	r3, [sp, #204]	@ 0xcc
 800c970:	9b41      	ldr	r3, [sp, #260]	@ 0x104
 800c972:	9331      	str	r3, [sp, #196]	@ 0xc4
 800c974:	9b21      	ldr	r3, [sp, #132]	@ 0x84
 800c976:	9323      	str	r3, [sp, #140]	@ 0x8c
 800c978:	9b72      	ldr	r3, [sp, #456]	@ 0x1c8
 800c97a:	9336      	str	r3, [sp, #216]	@ 0xd8
 800c97c:	9b25      	ldr	r3, [sp, #148]	@ 0x94
 800c97e:	9329      	str	r3, [sp, #164]	@ 0xa4
 800c980:	9b24      	ldr	r3, [sp, #144]	@ 0x90
 800c982:	932e      	str	r3, [sp, #184]	@ 0xb8
 800c984:	9b84      	ldr	r3, [sp, #528]	@ 0x210
 800c986:	932a      	str	r3, [sp, #168]	@ 0xa8
 800c988:	9a52      	ldr	r2, [sp, #328]	@ 0x148
 800c98a:	9b51      	ldr	r3, [sp, #324]	@ 0x144
 800c98c:	924f      	str	r2, [sp, #316]	@ 0x13c
 800c98e:	9a53      	ldr	r2, [sp, #332]	@ 0x14c
 800c990:	934e      	str	r3, [sp, #312]	@ 0x138
 800c992:	9250      	str	r2, [sp, #320]	@ 0x140
 800c994:	9a14      	ldr	r2, [sp, #80]	@ 0x50
 800c996:	2a00      	cmp	r2, #0
 800c998:	f000 8120 	beq.w	800cbdc <forward_lite_conv2d_sssa8_ch+0x9b8>
 800c99c:	e9dd 212c 	ldrd	r2, r1, [sp, #176]	@ 0xb0
 800c9a0:	1a57      	subs	r7, r2, r1
 800c9a2:	9a3a      	ldr	r2, [sp, #232]	@ 0xe8
 800c9a4:	920c      	str	r2, [sp, #48]	@ 0x30
 800c9a6:	9a35      	ldr	r2, [sp, #212]	@ 0xd4
 800c9a8:	920f      	str	r2, [sp, #60]	@ 0x3c
 800c9aa:	9a28      	ldr	r2, [sp, #160]	@ 0xa0
 800c9ac:	921e      	str	r2, [sp, #120]	@ 0x78
 800c9ae:	9a1b      	ldr	r2, [sp, #108]	@ 0x6c
 800c9b0:	920b      	str	r2, [sp, #44]	@ 0x2c
 800c9b2:	2200      	movs	r2, #0
 800c9b4:	9211      	str	r2, [sp, #68]	@ 0x44
 800c9b6:	2b00      	cmp	r3, #0
 800c9b8:	d05f      	beq.n	800ca7a <forward_lite_conv2d_sssa8_ch+0x856>
 800c9ba:	3b01      	subs	r3, #1
 800c9bc:	934e      	str	r3, [sp, #312]	@ 0x138
 800c9be:	2301      	movs	r3, #1
 800c9c0:	f8ad 315e 	strh.w	r3, [sp, #350]	@ 0x15e
 800c9c4:	9b33      	ldr	r3, [sp, #204]	@ 0xcc
 800c9c6:	9a18      	ldr	r2, [sp, #96]	@ 0x60
 800c9c8:	4293      	cmp	r3, r2
 800c9ca:	dd3f      	ble.n	800ca4c <forward_lite_conv2d_sssa8_ch+0x828>
 800c9cc:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 800c9ce:	ee08 8a10 	vmov	s16, r8
 800c9d2:	9d34      	ldr	r5, [sp, #208]	@ 0xd0
 800c9d4:	ee1a 9a90 	vmov	r9, s21
 800c9d8:	1afb      	subs	r3, r7, r3
 800c9da:	9e26      	ldr	r6, [sp, #152]	@ 0x98
 800c9dc:	fb05 f303 	mul.w	r3, r5, r3
 800c9e0:	9317      	str	r3, [sp, #92]	@ 0x5c
 800c9e2:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800c9e4:	930d      	str	r3, [sp, #52]	@ 0x34
 800c9e6:	9b18      	ldr	r3, [sp, #96]	@ 0x60
 800c9e8:	930e      	str	r3, [sp, #56]	@ 0x38
 800c9ea:	9c0c      	ldr	r4, [sp, #48]	@ 0x30
 800c9ec:	42bc      	cmp	r4, r7
 800c9ee:	da21      	bge.n	800ca34 <forward_lite_conv2d_sssa8_ch+0x810>
 800c9f0:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800c9f2:	9a15      	ldr	r2, [sp, #84]	@ 0x54
 800c9f4:	f8dd b034 	ldr.w	fp, [sp, #52]	@ 0x34
 800c9f8:	4293      	cmp	r3, r2
 800c9fa:	f8dd 802c 	ldr.w	r8, [sp, #44]	@ 0x2c
 800c9fe:	bf34      	ite	cc
 800ca00:	2300      	movcc	r3, #0
 800ca02:	2301      	movcs	r3, #1
 800ca04:	930a      	str	r3, [sp, #40]	@ 0x28
 800ca06:	9b12      	ldr	r3, [sp, #72]	@ 0x48
 800ca08:	2b00      	cmp	r3, #0
 800ca0a:	d03f      	beq.n	800ca8c <forward_lite_conv2d_sssa8_ch+0x868>
 800ca0c:	42b4      	cmp	r4, r6
 800ca0e:	4641      	mov	r1, r8
 800ca10:	464a      	mov	r2, r9
 800ca12:	4650      	mov	r0, sl
 800ca14:	d203      	bcs.n	800ca1e <forward_lite_conv2d_sssa8_ch+0x7fa>
 800ca16:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800ca18:	2b00      	cmp	r3, #0
 800ca1a:	f000 80bf 	beq.w	800cb9c <forward_lite_conv2d_sssa8_ch+0x978>
 800ca1e:	f000 fd3b 	bl	800d498 <st_int16_fill>
 800ca22:	3401      	adds	r4, #1
 800ca24:	44a8      	add	r8, r5
 800ca26:	44cb      	add	fp, r9
 800ca28:	42a7      	cmp	r7, r4
 800ca2a:	d1ef      	bne.n	800ca0c <forward_lite_conv2d_sssa8_ch+0x7e8>
 800ca2c:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800ca2e:	9a17      	ldr	r2, [sp, #92]	@ 0x5c
 800ca30:	4413      	add	r3, r2
 800ca32:	930b      	str	r3, [sp, #44]	@ 0x2c
 800ca34:	9a0d      	ldr	r2, [sp, #52]	@ 0x34
 800ca36:	9913      	ldr	r1, [sp, #76]	@ 0x4c
 800ca38:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800ca3a:	440a      	add	r2, r1
 800ca3c:	3301      	adds	r3, #1
 800ca3e:	920d      	str	r2, [sp, #52]	@ 0x34
 800ca40:	9a10      	ldr	r2, [sp, #64]	@ 0x40
 800ca42:	930e      	str	r3, [sp, #56]	@ 0x38
 800ca44:	4293      	cmp	r3, r2
 800ca46:	d1d0      	bne.n	800c9ea <forward_lite_conv2d_sssa8_ch+0x7c6>
 800ca48:	ee18 8a10 	vmov	r8, s16
 800ca4c:	9b1a      	ldr	r3, [sp, #104]	@ 0x68
 800ca4e:	9a0b      	ldr	r2, [sp, #44]	@ 0x2c
 800ca50:	4293      	cmp	r3, r2
 800ca52:	d055      	beq.n	800cb00 <forward_lite_conv2d_sssa8_ch+0x8dc>
 800ca54:	9a0f      	ldr	r2, [sp, #60]	@ 0x3c
 800ca56:	9919      	ldr	r1, [sp, #100]	@ 0x64
 800ca58:	9b11      	ldr	r3, [sp, #68]	@ 0x44
 800ca5a:	440a      	add	r2, r1
 800ca5c:	9916      	ldr	r1, [sp, #88]	@ 0x58
 800ca5e:	3301      	adds	r3, #1
 800ca60:	920f      	str	r2, [sp, #60]	@ 0x3c
 800ca62:	440f      	add	r7, r1
 800ca64:	9a0c      	ldr	r2, [sp, #48]	@ 0x30
 800ca66:	9311      	str	r3, [sp, #68]	@ 0x44
 800ca68:	440a      	add	r2, r1
 800ca6a:	920c      	str	r2, [sp, #48]	@ 0x30
 800ca6c:	9a14      	ldr	r2, [sp, #80]	@ 0x50
 800ca6e:	429a      	cmp	r2, r3
 800ca70:	f000 8098 	beq.w	800cba4 <forward_lite_conv2d_sssa8_ch+0x980>
 800ca74:	9b4e      	ldr	r3, [sp, #312]	@ 0x138
 800ca76:	2b00      	cmp	r3, #0
 800ca78:	d19f      	bne.n	800c9ba <forward_lite_conv2d_sssa8_ch+0x796>
 800ca7a:	9b4f      	ldr	r3, [sp, #316]	@ 0x13c
 800ca7c:	b9b3      	cbnz	r3, 800caac <forward_lite_conv2d_sssa8_ch+0x888>
 800ca7e:	9b50      	ldr	r3, [sp, #320]	@ 0x140
 800ca80:	3b01      	subs	r3, #1
 800ca82:	9350      	str	r3, [sp, #320]	@ 0x140
 800ca84:	2301      	movs	r3, #1
 800ca86:	f8ad 315e 	strh.w	r3, [sp, #350]	@ 0x15e
 800ca8a:	e79b      	b.n	800c9c4 <forward_lite_conv2d_sssa8_ch+0x7a0>
 800ca8c:	42b4      	cmp	r4, r6
 800ca8e:	464a      	mov	r2, r9
 800ca90:	4641      	mov	r1, r8
 800ca92:	4650      	mov	r0, sl
 800ca94:	d202      	bcs.n	800ca9c <forward_lite_conv2d_sssa8_ch+0x878>
 800ca96:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800ca98:	2b00      	cmp	r3, #0
 800ca9a:	d07b      	beq.n	800cb94 <forward_lite_conv2d_sssa8_ch+0x970>
 800ca9c:	f000 fcfc 	bl	800d498 <st_int16_fill>
 800caa0:	3401      	adds	r4, #1
 800caa2:	44a8      	add	r8, r5
 800caa4:	44cb      	add	fp, r9
 800caa6:	42bc      	cmp	r4, r7
 800caa8:	d1f0      	bne.n	800ca8c <forward_lite_conv2d_sssa8_ch+0x868>
 800caaa:	e7bf      	b.n	800ca2c <forward_lite_conv2d_sssa8_ch+0x808>
 800caac:	3b01      	subs	r3, #1
 800caae:	934f      	str	r3, [sp, #316]	@ 0x13c
 800cab0:	f8bd 315c 	ldrh.w	r3, [sp, #348]	@ 0x15c
 800cab4:	2b01      	cmp	r3, #1
 800cab6:	f8ad 315e 	strh.w	r3, [sp, #350]	@ 0x15e
 800caba:	d083      	beq.n	800c9c4 <forward_lite_conv2d_sssa8_ch+0x7a0>
 800cabc:	9b12      	ldr	r3, [sp, #72]	@ 0x48
 800cabe:	9c18      	ldr	r4, [sp, #96]	@ 0x60
 800cac0:	2b00      	cmp	r3, #0
 800cac2:	d14b      	bne.n	800cb5c <forward_lite_conv2d_sssa8_ch+0x938>
 800cac4:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 800cac6:	429c      	cmp	r4, r3
 800cac8:	dac0      	bge.n	800ca4c <forward_lite_conv2d_sssa8_ch+0x828>
 800caca:	970a      	str	r7, [sp, #40]	@ 0x28
 800cacc:	461f      	mov	r7, r3
 800cace:	9e0f      	ldr	r6, [sp, #60]	@ 0x3c
 800cad0:	9d0b      	ldr	r5, [sp, #44]	@ 0x2c
 800cad2:	f8dd b04c 	ldr.w	fp, [sp, #76]	@ 0x4c
 800cad6:	f8dd 9070 	ldr.w	r9, [sp, #112]	@ 0x70
 800cada:	3401      	adds	r4, #1
 800cadc:	4629      	mov	r1, r5
 800cade:	4630      	mov	r0, r6
 800cae0:	4642      	mov	r2, r8
 800cae2:	f000 fa7d 	bl	800cfe0 <st_int8_to16_no_shift_interleaved>
 800cae6:	42bc      	cmp	r4, r7
 800cae8:	444d      	add	r5, r9
 800caea:	445e      	add	r6, fp
 800caec:	d1f5      	bne.n	800cada <forward_lite_conv2d_sssa8_ch+0x8b6>
 800caee:	9a1d      	ldr	r2, [sp, #116]	@ 0x74
 800caf0:	e9dd 730a 	ldrd	r7, r3, [sp, #40]	@ 0x28
 800caf4:	4413      	add	r3, r2
 800caf6:	930b      	str	r3, [sp, #44]	@ 0x2c
 800caf8:	9b1a      	ldr	r3, [sp, #104]	@ 0x68
 800cafa:	9a0b      	ldr	r2, [sp, #44]	@ 0x2c
 800cafc:	4293      	cmp	r3, r2
 800cafe:	d1a9      	bne.n	800ca54 <forward_lite_conv2d_sssa8_ch+0x830>
 800cb00:	9b1e      	ldr	r3, [sp, #120]	@ 0x78
 800cb02:	ee19 0a10 	vmov	r0, s18
 800cb06:	9a19      	ldr	r2, [sp, #100]	@ 0x64
 800cb08:	9308      	str	r3, [sp, #32]
 800cb0a:	9b22      	ldr	r3, [sp, #136]	@ 0x88
 800cb0c:	9c11      	ldr	r4, [sp, #68]	@ 0x44
 800cb0e:	9307      	str	r3, [sp, #28]
 800cb10:	9b29      	ldr	r3, [sp, #164]	@ 0xa4
 800cb12:	3401      	adds	r4, #1
 800cb14:	991b      	ldr	r1, [sp, #108]	@ 0x6c
 800cb16:	9306      	str	r3, [sp, #24]
 800cb18:	9b2a      	ldr	r3, [sp, #168]	@ 0xa8
 800cb1a:	9411      	str	r4, [sp, #68]	@ 0x44
 800cb1c:	9305      	str	r3, [sp, #20]
 800cb1e:	9b2e      	ldr	r3, [sp, #184]	@ 0xb8
 800cb20:	9304      	str	r3, [sp, #16]
 800cb22:	9b1f      	ldr	r3, [sp, #124]	@ 0x7c
 800cb24:	9303      	str	r3, [sp, #12]
 800cb26:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 800cb28:	9302      	str	r3, [sp, #8]
 800cb2a:	9b20      	ldr	r3, [sp, #128]	@ 0x80
 800cb2c:	9300      	str	r3, [sp, #0]
 800cb2e:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800cb30:	4413      	add	r3, r2
 800cb32:	9a16      	ldr	r2, [sp, #88]	@ 0x58
 800cb34:	930f      	str	r3, [sp, #60]	@ 0x3c
 800cb36:	4417      	add	r7, r2
 800cb38:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 800cb3a:	4413      	add	r3, r2
 800cb3c:	ee1a 2a10 	vmov	r2, s20
 800cb40:	930c      	str	r3, [sp, #48]	@ 0x30
 800cb42:	2300      	movs	r3, #0
 800cb44:	9301      	str	r3, [sp, #4]
 800cb46:	ee18 3a90 	vmov	r3, s17
 800cb4a:	f001 fa97 	bl	800e07c <st_sssa8_ch_nn_mat_mult_kernel_opt>
 800cb4e:	9b14      	ldr	r3, [sp, #80]	@ 0x50
 800cb50:	901e      	str	r0, [sp, #120]	@ 0x78
 800cb52:	42a3      	cmp	r3, r4
 800cb54:	d042      	beq.n	800cbdc <forward_lite_conv2d_sssa8_ch+0x9b8>
 800cb56:	9b1b      	ldr	r3, [sp, #108]	@ 0x6c
 800cb58:	930b      	str	r3, [sp, #44]	@ 0x2c
 800cb5a:	e78b      	b.n	800ca74 <forward_lite_conv2d_sssa8_ch+0x850>
 800cb5c:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 800cb5e:	429c      	cmp	r4, r3
 800cb60:	f6bf af74 	bge.w	800ca4c <forward_lite_conv2d_sssa8_ch+0x828>
 800cb64:	970a      	str	r7, [sp, #40]	@ 0x28
 800cb66:	461f      	mov	r7, r3
 800cb68:	9e0f      	ldr	r6, [sp, #60]	@ 0x3c
 800cb6a:	9d0b      	ldr	r5, [sp, #44]	@ 0x2c
 800cb6c:	f8dd b04c 	ldr.w	fp, [sp, #76]	@ 0x4c
 800cb70:	f8dd 9070 	ldr.w	r9, [sp, #112]	@ 0x70
 800cb74:	3401      	adds	r4, #1
 800cb76:	4629      	mov	r1, r5
 800cb78:	4630      	mov	r0, r6
 800cb7a:	4642      	mov	r2, r8
 800cb7c:	f000 f9ce 	bl	800cf1c <st_int8_to16_no_shift>
 800cb80:	42bc      	cmp	r4, r7
 800cb82:	444d      	add	r5, r9
 800cb84:	445e      	add	r6, fp
 800cb86:	d1f5      	bne.n	800cb74 <forward_lite_conv2d_sssa8_ch+0x950>
 800cb88:	9a1d      	ldr	r2, [sp, #116]	@ 0x74
 800cb8a:	e9dd 730a 	ldrd	r7, r3, [sp, #40]	@ 0x28
 800cb8e:	4413      	add	r3, r2
 800cb90:	930b      	str	r3, [sp, #44]	@ 0x2c
 800cb92:	e7b1      	b.n	800caf8 <forward_lite_conv2d_sssa8_ch+0x8d4>
 800cb94:	4658      	mov	r0, fp
 800cb96:	f000 fa23 	bl	800cfe0 <st_int8_to16_no_shift_interleaved>
 800cb9a:	e781      	b.n	800caa0 <forward_lite_conv2d_sssa8_ch+0x87c>
 800cb9c:	4658      	mov	r0, fp
 800cb9e:	f000 f9bd 	bl	800cf1c <st_int8_to16_no_shift>
 800cba2:	e73e      	b.n	800ca22 <forward_lite_conv2d_sssa8_ch+0x7fe>
 800cba4:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800cba6:	991b      	ldr	r1, [sp, #108]	@ 0x6c
 800cba8:	428b      	cmp	r3, r1
 800cbaa:	d017      	beq.n	800cbdc <forward_lite_conv2d_sssa8_ch+0x9b8>
 800cbac:	9b1e      	ldr	r3, [sp, #120]	@ 0x78
 800cbae:	ee1a 2a10 	vmov	r2, s20
 800cbb2:	ee19 0a10 	vmov	r0, s18
 800cbb6:	9307      	str	r3, [sp, #28]
 800cbb8:	9b22      	ldr	r3, [sp, #136]	@ 0x88
 800cbba:	9306      	str	r3, [sp, #24]
 800cbbc:	9b29      	ldr	r3, [sp, #164]	@ 0xa4
 800cbbe:	9305      	str	r3, [sp, #20]
 800cbc0:	9b2a      	ldr	r3, [sp, #168]	@ 0xa8
 800cbc2:	9304      	str	r3, [sp, #16]
 800cbc4:	9b2e      	ldr	r3, [sp, #184]	@ 0xb8
 800cbc6:	9303      	str	r3, [sp, #12]
 800cbc8:	9b1f      	ldr	r3, [sp, #124]	@ 0x7c
 800cbca:	9302      	str	r3, [sp, #8]
 800cbcc:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 800cbce:	9301      	str	r3, [sp, #4]
 800cbd0:	9b20      	ldr	r3, [sp, #128]	@ 0x80
 800cbd2:	9300      	str	r3, [sp, #0]
 800cbd4:	ee18 3a90 	vmov	r3, s17
 800cbd8:	f001 f886 	bl	800dce8 <st_sssa8_ch_nn_mat_mult_kernel_single_opt>
 800cbdc:	9a23      	ldr	r2, [sp, #140]	@ 0x8c
 800cbde:	9b32      	ldr	r3, [sp, #200]	@ 0xc8
 800cbe0:	9928      	ldr	r1, [sp, #160]	@ 0xa0
 800cbe2:	1a9b      	subs	r3, r3, r2
 800cbe4:	4411      	add	r1, r2
 800cbe6:	9128      	str	r1, [sp, #160]	@ 0xa0
 800cbe8:	b299      	uxth	r1, r3
 800cbea:	4613      	mov	r3, r2
 800cbec:	428a      	cmp	r2, r1
 800cbee:	9132      	str	r1, [sp, #200]	@ 0xc8
 800cbf0:	bf28      	it	cs
 800cbf2:	460b      	movcs	r3, r1
 800cbf4:	b29b      	uxth	r3, r3
 800cbf6:	2b00      	cmp	r3, #0
 800cbf8:	d051      	beq.n	800cc9e <forward_lite_conv2d_sssa8_ch+0xa7a>
 800cbfa:	ee1a 4a10 	vmov	r4, s20
 800cbfe:	9836      	ldr	r0, [sp, #216]	@ 0xd8
 800cc00:	991f      	ldr	r1, [sp, #124]	@ 0x7c
 800cc02:	eb04 0482 	add.w	r4, r4, r2, lsl #2
 800cc06:	fb01 0002 	mla	r0, r1, r2, r0
 800cc0a:	ee0a 4a10 	vmov	s20, r4
 800cc0e:	9c2e      	ldr	r4, [sp, #184]	@ 0xb8
 800cc10:	9036      	str	r0, [sp, #216]	@ 0xd8
 800cc12:	eb04 0442 	add.w	r4, r4, r2, lsl #1
 800cc16:	942e      	str	r4, [sp, #184]	@ 0xb8
 800cc18:	9c2a      	ldr	r4, [sp, #168]	@ 0xa8
 800cc1a:	eb04 0482 	add.w	r4, r4, r2, lsl #2
 800cc1e:	942a      	str	r4, [sp, #168]	@ 0xa8
 800cc20:	9c29      	ldr	r4, [sp, #164]	@ 0xa4
 800cc22:	eb04 0282 	add.w	r2, r4, r2, lsl #2
 800cc26:	9229      	str	r2, [sp, #164]	@ 0xa4
 800cc28:	9a12      	ldr	r2, [sp, #72]	@ 0x48
 800cc2a:	2a00      	cmp	r2, #0
 800cc2c:	d139      	bne.n	800cca2 <forward_lite_conv2d_sssa8_ch+0xa7e>
 800cc2e:	460a      	mov	r2, r1
 800cc30:	ee19 1a10 	vmov	r1, s18
 800cc34:	9323      	str	r3, [sp, #140]	@ 0x8c
 800cc36:	f000 fb01 	bl	800d23c <st_int8_to16_dual_interleaved>
 800cc3a:	9b31      	ldr	r3, [sp, #196]	@ 0xc4
 800cc3c:	3b01      	subs	r3, #1
 800cc3e:	b29b      	uxth	r3, r3
 800cc40:	461a      	mov	r2, r3
 800cc42:	9331      	str	r3, [sp, #196]	@ 0xc4
 800cc44:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 800cc48:	429a      	cmp	r2, r3
 800cc4a:	f47f ae9d 	bne.w	800c988 <forward_lite_conv2d_sssa8_ch+0x764>
 800cc4e:	4647      	mov	r7, r8
 800cc50:	9a30      	ldr	r2, [sp, #192]	@ 0xc0
 800cc52:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 800cc54:	4413      	add	r3, r2
 800cc56:	9310      	str	r3, [sp, #64]	@ 0x40
 800cc58:	9b18      	ldr	r3, [sp, #96]	@ 0x60
 800cc5a:	4413      	add	r3, r2
 800cc5c:	9a3e      	ldr	r2, [sp, #248]	@ 0xf8
 800cc5e:	9318      	str	r3, [sp, #96]	@ 0x60
 800cc60:	9b35      	ldr	r3, [sp, #212]	@ 0xd4
 800cc62:	4413      	add	r3, r2
 800cc64:	9a40      	ldr	r2, [sp, #256]	@ 0x100
 800cc66:	9335      	str	r3, [sp, #212]	@ 0xd4
 800cc68:	9b3b      	ldr	r3, [sp, #236]	@ 0xec
 800cc6a:	4413      	add	r3, r2
 800cc6c:	9a3f      	ldr	r2, [sp, #252]	@ 0xfc
 800cc6e:	933b      	str	r3, [sp, #236]	@ 0xec
 800cc70:	9b3c      	ldr	r3, [sp, #240]	@ 0xf0
 800cc72:	4413      	add	r3, r2
 800cc74:	9a3d      	ldr	r2, [sp, #244]	@ 0xf4
 800cc76:	933c      	str	r3, [sp, #240]	@ 0xf0
 800cc78:	9b38      	ldr	r3, [sp, #224]	@ 0xe0
 800cc7a:	3301      	adds	r3, #1
 800cc7c:	9338      	str	r3, [sp, #224]	@ 0xe0
 800cc7e:	9b2f      	ldr	r3, [sp, #188]	@ 0xbc
 800cc80:	4293      	cmp	r3, r2
 800cc82:	f77f ad05 	ble.w	800c690 <forward_lite_conv2d_sssa8_ch+0x46c>
 800cc86:	a84e      	add	r0, sp, #312	@ 0x138
 800cc88:	f000 fbec 	bl	800d464 <ai_padding_opt_phase1>
 800cc8c:	9b27      	ldr	r3, [sp, #156]	@ 0x9c
 800cc8e:	2b03      	cmp	r3, #3
 800cc90:	f47f ae4a 	bne.w	800c928 <forward_lite_conv2d_sssa8_ch+0x704>
 800cc94:	9b38      	ldr	r3, [sp, #224]	@ 0xe0
 800cc96:	933d      	str	r3, [sp, #244]	@ 0xf4
 800cc98:	9b3b      	ldr	r3, [sp, #236]	@ 0xec
 800cc9a:	9328      	str	r3, [sp, #160]	@ 0xa0
 800cc9c:	e648      	b.n	800c930 <forward_lite_conv2d_sssa8_ch+0x70c>
 800cc9e:	9323      	str	r3, [sp, #140]	@ 0x8c
 800cca0:	e7cb      	b.n	800cc3a <forward_lite_conv2d_sssa8_ch+0xa16>
 800cca2:	460a      	mov	r2, r1
 800cca4:	ee19 1a10 	vmov	r1, s18
 800cca8:	9323      	str	r3, [sp, #140]	@ 0x8c
 800ccaa:	f000 f9dd 	bl	800d068 <st_int8_to16_dual>
 800ccae:	e7c4      	b.n	800cc3a <forward_lite_conv2d_sssa8_ch+0xa16>
 800ccb0:	9b21      	ldr	r3, [sp, #132]	@ 0x84
 800ccb2:	ee19 1a10 	vmov	r1, s18
 800ccb6:	9a1f      	ldr	r2, [sp, #124]	@ 0x7c
 800ccb8:	9872      	ldr	r0, [sp, #456]	@ 0x1c8
 800ccba:	f000 f9d5 	bl	800d068 <st_int8_to16_dual>
 800ccbe:	e644      	b.n	800c94a <forward_lite_conv2d_sssa8_ch+0x726>
 800ccc0:	ee18 3a90 	vmov	r3, s17
 800ccc4:	ee19 1a10 	vmov	r1, s18
 800ccc8:	9872      	ldr	r0, [sp, #456]	@ 0x1c8
 800ccca:	f000 f9cd 	bl	800d068 <st_int8_to16_dual>
 800ccce:	f7ff bb86 	b.w	800c3de <forward_lite_conv2d_sssa8_ch+0x1ba>
 800ccd2:	bf00      	nop

0800ccd4 <forward_lite_maxpool_is8os8_scaleneg>:
 800ccd4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800ccd8:	b095      	sub	sp, #84	@ 0x54
 800ccda:	4614      	mov	r4, r2
 800ccdc:	e9cd 010a 	strd	r0, r1, [sp, #40]	@ 0x28
 800cce0:	f8bd 107c 	ldrh.w	r1, [sp, #124]	@ 0x7c
 800cce4:	f99d 009c 	ldrsb.w	r0, [sp, #156]	@ 0x9c
 800cce8:	910d      	str	r1, [sp, #52]	@ 0x34
 800ccea:	f8bd 1080 	ldrh.w	r1, [sp, #128]	@ 0x80
 800ccee:	930c      	str	r3, [sp, #48]	@ 0x30
 800ccf0:	910e      	str	r1, [sp, #56]	@ 0x38
 800ccf2:	f8bd 1084 	ldrh.w	r1, [sp, #132]	@ 0x84
 800ccf6:	f8bd 3098 	ldrh.w	r3, [sp, #152]	@ 0x98
 800ccfa:	910f      	str	r1, [sp, #60]	@ 0x3c
 800ccfc:	f8bd 1088 	ldrh.w	r1, [sp, #136]	@ 0x88
 800cd00:	9206      	str	r2, [sp, #24]
 800cd02:	9110      	str	r1, [sp, #64]	@ 0x40
 800cd04:	f8bd 108c 	ldrh.w	r1, [sp, #140]	@ 0x8c
 800cd08:	f8bd a078 	ldrh.w	sl, [sp, #120]	@ 0x78
 800cd0c:	9111      	str	r1, [sp, #68]	@ 0x44
 800cd0e:	f8bd 1090 	ldrh.w	r1, [sp, #144]	@ 0x90
 800cd12:	f99d 20a0 	ldrsb.w	r2, [sp, #160]	@ 0xa0
 800cd16:	9112      	str	r1, [sp, #72]	@ 0x48
 800cd18:	f8bd 1094 	ldrh.w	r1, [sp, #148]	@ 0x94
 800cd1c:	9313      	str	r3, [sp, #76]	@ 0x4c
 800cd1e:	9107      	str	r1, [sp, #28]
 800cd20:	9003      	str	r0, [sp, #12]
 800cd22:	2b00      	cmp	r3, #0
 800cd24:	f000 8093 	beq.w	800ce4e <forward_lite_maxpool_is8os8_scaleneg+0x17a>
 800cd28:	eef7 7a00 	vmov.f32	s15, #112	@ 0x3f800000  1.0
 800cd2c:	eeb4 0a67 	vcmp.f32	s0, s15
 800cd30:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800cd34:	bf0c      	ite	eq
 800cd36:	2301      	moveq	r3, #1
 800cd38:	2300      	movne	r3, #0
 800cd3a:	4290      	cmp	r0, r2
 800cd3c:	bf14      	ite	ne
 800cd3e:	2300      	movne	r3, #0
 800cd40:	f003 0301 	andeq.w	r3, r3, #1
 800cd44:	9301      	str	r3, [sp, #4]
 800cd46:	2900      	cmp	r1, #0
 800cd48:	f000 8081 	beq.w	800ce4e <forward_lite_maxpool_is8os8_scaleneg+0x17a>
 800cd4c:	f1ba 0f00 	cmp.w	sl, #0
 800cd50:	d07d      	beq.n	800ce4e <forward_lite_maxpool_is8os8_scaleneg+0x17a>
 800cd52:	ee07 2a90 	vmov	s15, r2
 800cd56:	2300      	movs	r3, #0
 800cd58:	ed9f 6a4d 	vldr	s12, [pc, #308]	@ 800ce90 <forward_lite_maxpool_is8os8_scaleneg+0x1bc>
 800cd5c:	fb04 fb0a 	mul.w	fp, r4, sl
 800cd60:	eef8 6ae7 	vcvt.f32.s32	s13, s15
 800cd64:	9304      	str	r3, [sp, #16]
 800cd66:	9b04      	ldr	r3, [sp, #16]
 800cd68:	eef6 5a00 	vmov.f32	s11, #96	@ 0x3f000000  0.5
 800cd6c:	9907      	ldr	r1, [sp, #28]
 800cd6e:	9a12      	ldr	r2, [sp, #72]	@ 0x48
 800cd70:	fb03 f202 	mul.w	r2, r3, r2
 800cd74:	fb03 f301 	mul.w	r3, r3, r1
 800cd78:	9910      	ldr	r1, [sp, #64]	@ 0x40
 800cd7a:	9308      	str	r3, [sp, #32]
 800cd7c:	2300      	movs	r3, #0
 800cd7e:	9305      	str	r3, [sp, #20]
 800cd80:	1a53      	subs	r3, r2, r1
 800cd82:	1a8a      	subs	r2, r1, r2
 800cd84:	990c      	ldr	r1, [sp, #48]	@ 0x30
 800cd86:	2b00      	cmp	r3, #0
 800cd88:	eb02 0c01 	add.w	ip, r2, r1
 800cd8c:	bfd8      	it	le
 800cd8e:	4691      	movle	r9, r2
 800cd90:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 800cd92:	bfc8      	it	gt
 800cd94:	f04f 0900 	movgt.w	r9, #0
 800cd98:	4594      	cmp	ip, r2
 800cd9a:	444b      	add	r3, r9
 800cd9c:	bfa8      	it	ge
 800cd9e:	4694      	movge	ip, r2
 800cda0:	9a06      	ldr	r2, [sp, #24]
 800cda2:	fb02 f303 	mul.w	r3, r2, r3
 800cda6:	9309      	str	r3, [sp, #36]	@ 0x24
 800cda8:	9a05      	ldr	r2, [sp, #20]
 800cdaa:	f04f 0e00 	mov.w	lr, #0
 800cdae:	9908      	ldr	r1, [sp, #32]
 800cdb0:	9b11      	ldr	r3, [sp, #68]	@ 0x44
 800cdb2:	eb02 0801 	add.w	r8, r2, r1
 800cdb6:	990f      	ldr	r1, [sp, #60]	@ 0x3c
 800cdb8:	fb03 f302 	mul.w	r3, r3, r2
 800cdbc:	9a0b      	ldr	r2, [sp, #44]	@ 0x2c
 800cdbe:	9c0d      	ldr	r4, [sp, #52]	@ 0x34
 800cdc0:	fb0a 2808 	mla	r8, sl, r8, r2
 800cdc4:	1a5a      	subs	r2, r3, r1
 800cdc6:	1acb      	subs	r3, r1, r3
 800cdc8:	9906      	ldr	r1, [sp, #24]
 800cdca:	2a00      	cmp	r2, #0
 800cdcc:	bfd8      	it	le
 800cdce:	461f      	movle	r7, r3
 800cdd0:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800cdd2:	bfc8      	it	gt
 800cdd4:	2700      	movgt	r7, #0
 800cdd6:	18d3      	adds	r3, r2, r3
 800cdd8:	1a8a      	subs	r2, r1, r2
 800cdda:	4294      	cmp	r4, r2
 800cddc:	443b      	add	r3, r7
 800cdde:	bfa8      	it	ge
 800cde0:	4614      	movge	r4, r2
 800cde2:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 800cde4:	fb0a 2303 	mla	r3, sl, r3, r2
 800cde8:	9302      	str	r3, [sp, #8]
 800cdea:	45e1      	cmp	r9, ip
 800cdec:	da4d      	bge.n	800ce8a <forward_lite_maxpool_is8os8_scaleneg+0x1b6>
 800cdee:	9b02      	ldr	r3, [sp, #8]
 800cdf0:	464d      	mov	r5, r9
 800cdf2:	217f      	movs	r1, #127	@ 0x7f
 800cdf4:	eb03 060e 	add.w	r6, r3, lr
 800cdf8:	42a7      	cmp	r7, r4
 800cdfa:	da0a      	bge.n	800ce12 <forward_lite_maxpool_is8os8_scaleneg+0x13e>
 800cdfc:	4632      	mov	r2, r6
 800cdfe:	463b      	mov	r3, r7
 800ce00:	f992 0000 	ldrsb.w	r0, [r2]
 800ce04:	3301      	adds	r3, #1
 800ce06:	4452      	add	r2, sl
 800ce08:	4281      	cmp	r1, r0
 800ce0a:	bfa8      	it	ge
 800ce0c:	4601      	movge	r1, r0
 800ce0e:	429c      	cmp	r4, r3
 800ce10:	d1f6      	bne.n	800ce00 <forward_lite_maxpool_is8os8_scaleneg+0x12c>
 800ce12:	3501      	adds	r5, #1
 800ce14:	445e      	add	r6, fp
 800ce16:	45ac      	cmp	ip, r5
 800ce18:	d1ee      	bne.n	800cdf8 <forward_lite_maxpool_is8os8_scaleneg+0x124>
 800ce1a:	9b01      	ldr	r3, [sp, #4]
 800ce1c:	b1d3      	cbz	r3, 800ce54 <forward_lite_maxpool_is8os8_scaleneg+0x180>
 800ce1e:	f888 1000 	strb.w	r1, [r8]
 800ce22:	f10e 0e01 	add.w	lr, lr, #1
 800ce26:	f108 0801 	add.w	r8, r8, #1
 800ce2a:	fa1f f38e 	uxth.w	r3, lr
 800ce2e:	459a      	cmp	sl, r3
 800ce30:	d8db      	bhi.n	800cdea <forward_lite_maxpool_is8os8_scaleneg+0x116>
 800ce32:	9b05      	ldr	r3, [sp, #20]
 800ce34:	9a07      	ldr	r2, [sp, #28]
 800ce36:	3301      	adds	r3, #1
 800ce38:	b29b      	uxth	r3, r3
 800ce3a:	429a      	cmp	r2, r3
 800ce3c:	9305      	str	r3, [sp, #20]
 800ce3e:	d8b3      	bhi.n	800cda8 <forward_lite_maxpool_is8os8_scaleneg+0xd4>
 800ce40:	9b04      	ldr	r3, [sp, #16]
 800ce42:	9a13      	ldr	r2, [sp, #76]	@ 0x4c
 800ce44:	3301      	adds	r3, #1
 800ce46:	b29b      	uxth	r3, r3
 800ce48:	429a      	cmp	r2, r3
 800ce4a:	9304      	str	r3, [sp, #16]
 800ce4c:	d88b      	bhi.n	800cd66 <forward_lite_maxpool_is8os8_scaleneg+0x92>
 800ce4e:	b015      	add	sp, #84	@ 0x54
 800ce50:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800ce54:	9b03      	ldr	r3, [sp, #12]
 800ce56:	eeb0 7a66 	vmov.f32	s14, s13
 800ce5a:	1ac9      	subs	r1, r1, r3
 800ce5c:	ee07 1a90 	vmov	s15, r1
 800ce60:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800ce64:	eea7 7a80 	vfma.f32	s14, s15, s0
 800ce68:	eeb5 7ac0 	vcmpe.f32	s14, #0.0
 800ce6c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800ce70:	fe65 7a86 	vselge.f32	s15, s11, s12
 800ce74:	ee77 7a87 	vadd.f32	s15, s15, s14
 800ce78:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800ce7c:	ee17 3a90 	vmov	r3, s15
 800ce80:	f303 0307 	ssat	r3, #8, r3
 800ce84:	f888 3000 	strb.w	r3, [r8]
 800ce88:	e7cb      	b.n	800ce22 <forward_lite_maxpool_is8os8_scaleneg+0x14e>
 800ce8a:	217f      	movs	r1, #127	@ 0x7f
 800ce8c:	e7c5      	b.n	800ce1a <forward_lite_maxpool_is8os8_scaleneg+0x146>
 800ce8e:	bf00      	nop
 800ce90:	befffffc 	.word	0xbefffffc

0800ce94 <forward_lite_nl_softmax_is8os8>:
 800ce94:	fbb2 f2f3 	udiv	r2, r2, r3
 800ce98:	b410      	push	{r4}
 800ce9a:	9c01      	ldr	r4, [sp, #4]
 800ce9c:	fbb2 f2f4 	udiv	r2, r2, r4
 800cea0:	f85d 4b04 	ldr.w	r4, [sp], #4
 800cea4:	f001 bb86 	b.w	800e5b4 <_lite_kernel_nl_softmax_is8os8>

0800cea8 <forward_lite_nl_softmax_iu8ou8>:
 800cea8:	fbb2 f2f3 	udiv	r2, r2, r3
 800ceac:	b410      	push	{r4}
 800ceae:	9c01      	ldr	r4, [sp, #4]
 800ceb0:	fbb2 f2f4 	udiv	r2, r2, r4
 800ceb4:	f85d 4b04 	ldr.w	r4, [sp], #4
 800ceb8:	f002 b92e 	b.w	800f118 <_lite_kernel_nl_softmax_iu8ou8>

0800cebc <align_factor_ch>:
 800cebc:	b361      	cbz	r1, 800cf18 <align_factor_ch+0x5c>
 800cebe:	ee80 7a20 	vdiv.f32	s14, s0, s1
 800cec2:	eb00 0181 	add.w	r1, r0, r1, lsl #2
 800cec6:	b570      	push	{r4, r5, r6, lr}
 800cec8:	1e9d      	subs	r5, r3, #2
 800ceca:	1f14      	subs	r4, r2, #4
 800cecc:	2600      	movs	r6, #0
 800cece:	ecf0 7a01 	vldmia	r0!, {s15}
 800ced2:	ee67 7a27 	vmul.f32	s15, s14, s15
 800ced6:	ee17 ea90 	vmov	lr, s15
 800ceda:	f3ce 52c7 	ubfx	r2, lr, #23, #8
 800cede:	f3ce 0c16 	ubfx	ip, lr, #0, #23
 800cee2:	f1be 0f00 	cmp.w	lr, #0
 800cee6:	f50c 0c00 	add.w	ip, ip, #8388608	@ 0x800000
 800ceea:	f1c2 027e 	rsb	r2, r2, #126	@ 0x7e
 800ceee:	bfb8      	it	lt
 800cef0:	f1cc 0c00 	rsblt	ip, ip, #0
 800cef4:	2a1f      	cmp	r2, #31
 800cef6:	ea4f 13cc 	mov.w	r3, ip, lsl #7
 800cefa:	dc06      	bgt.n	800cf0a <align_factor_ch+0x4e>
 800cefc:	4281      	cmp	r1, r0
 800cefe:	f825 2f02 	strh.w	r2, [r5, #2]!
 800cf02:	f844 3f04 	str.w	r3, [r4, #4]!
 800cf06:	d1e2      	bne.n	800cece <align_factor_ch+0x12>
 800cf08:	bd70      	pop	{r4, r5, r6, pc}
 800cf0a:	4281      	cmp	r1, r0
 800cf0c:	f825 6f02 	strh.w	r6, [r5, #2]!
 800cf10:	f844 6f04 	str.w	r6, [r4, #4]!
 800cf14:	d1db      	bne.n	800cece <align_factor_ch+0x12>
 800cf16:	bd70      	pop	{r4, r5, r6, pc}
 800cf18:	4770      	bx	lr
 800cf1a:	bf00      	nop

0800cf1c <st_int8_to16_no_shift>:
 800cf1c:	b570      	push	{r4, r5, r6, lr}
 800cf1e:	f1b2 0410 	subs.w	r4, r2, #16
 800cf22:	f04f 0e00 	mov.w	lr, #0
 800cf26:	d438      	bmi.n	800cf9a <st_int8_to16_no_shift+0x7e>
 800cf28:	f8d0 c000 	ldr.w	ip, [r0]
 800cf2c:	6843      	ldr	r3, [r0, #4]
 800cf2e:	fa2f f59c 	sxtb16	r5, ip, ror #8
 800cf32:	fa2f fc8c 	sxtb16	ip, ip
 800cf36:	eac5 462c 	pkhtb	r6, r5, ip, asr #16
 800cf3a:	eacc 4c05 	pkhbt	ip, ip, r5, lsl #16
 800cf3e:	fa2f f593 	sxtb16	r5, r3, ror #8
 800cf42:	3010      	adds	r0, #16
 800cf44:	604e      	str	r6, [r1, #4]
 800cf46:	f8c1 c000 	str.w	ip, [r1]
 800cf4a:	fa2f f383 	sxtb16	r3, r3
 800cf4e:	eac5 4623 	pkhtb	r6, r5, r3, asr #16
 800cf52:	eac3 4305 	pkhbt	r3, r3, r5, lsl #16
 800cf56:	60ce      	str	r6, [r1, #12]
 800cf58:	608b      	str	r3, [r1, #8]
 800cf5a:	f850 cc08 	ldr.w	ip, [r0, #-8]
 800cf5e:	f850 3c04 	ldr.w	r3, [r0, #-4]
 800cf62:	fa2f f59c 	sxtb16	r5, ip, ror #8
 800cf66:	fa2f fc8c 	sxtb16	ip, ip
 800cf6a:	eac5 462c 	pkhtb	r6, r5, ip, asr #16
 800cf6e:	eacc 4c05 	pkhbt	ip, ip, r5, lsl #16
 800cf72:	fa2f f593 	sxtb16	r5, r3, ror #8
 800cf76:	f10e 0e10 	add.w	lr, lr, #16
 800cf7a:	f8c1 c010 	str.w	ip, [r1, #16]
 800cf7e:	614e      	str	r6, [r1, #20]
 800cf80:	3120      	adds	r1, #32
 800cf82:	45a6      	cmp	lr, r4
 800cf84:	fa2f f383 	sxtb16	r3, r3
 800cf88:	eac5 4c23 	pkhtb	ip, r5, r3, asr #16
 800cf8c:	eac3 4305 	pkhbt	r3, r3, r5, lsl #16
 800cf90:	f841 cc04 	str.w	ip, [r1, #-4]
 800cf94:	f841 3c08 	str.w	r3, [r1, #-8]
 800cf98:	ddc6      	ble.n	800cf28 <st_int8_to16_no_shift+0xc>
 800cf9a:	1f16      	subs	r6, r2, #4
 800cf9c:	4576      	cmp	r6, lr
 800cf9e:	db12      	blt.n	800cfc6 <st_int8_to16_no_shift+0xaa>
 800cfa0:	f850 3b04 	ldr.w	r3, [r0], #4
 800cfa4:	fa2f f493 	sxtb16	r4, r3, ror #8
 800cfa8:	f10e 0e04 	add.w	lr, lr, #4
 800cfac:	3108      	adds	r1, #8
 800cfae:	fa2f f383 	sxtb16	r3, r3
 800cfb2:	45b6      	cmp	lr, r6
 800cfb4:	eac4 4523 	pkhtb	r5, r4, r3, asr #16
 800cfb8:	eac3 4304 	pkhbt	r3, r3, r4, lsl #16
 800cfbc:	f841 5c04 	str.w	r5, [r1, #-4]
 800cfc0:	f841 3c08 	str.w	r3, [r1, #-8]
 800cfc4:	ddec      	ble.n	800cfa0 <st_int8_to16_no_shift+0x84>
 800cfc6:	4572      	cmp	r2, lr
 800cfc8:	dd08      	ble.n	800cfdc <st_int8_to16_no_shift+0xc0>
 800cfca:	eba2 020e 	sub.w	r2, r2, lr
 800cfce:	4402      	add	r2, r0
 800cfd0:	f910 3b01 	ldrsb.w	r3, [r0], #1
 800cfd4:	4290      	cmp	r0, r2
 800cfd6:	f821 3b02 	strh.w	r3, [r1], #2
 800cfda:	d1f9      	bne.n	800cfd0 <st_int8_to16_no_shift+0xb4>
 800cfdc:	bd70      	pop	{r4, r5, r6, pc}
 800cfde:	bf00      	nop

0800cfe0 <st_int8_to16_no_shift_interleaved>:
 800cfe0:	b570      	push	{r4, r5, r6, lr}
 800cfe2:	f1b2 0510 	subs.w	r5, r2, #16
 800cfe6:	f04f 0e00 	mov.w	lr, #0
 800cfea:	d428      	bmi.n	800d03e <st_int8_to16_no_shift_interleaved+0x5e>
 800cfec:	f8d0 c000 	ldr.w	ip, [r0]
 800cff0:	6843      	ldr	r3, [r0, #4]
 800cff2:	fa2f f69c 	sxtb16	r6, ip, ror #8
 800cff6:	fa2f fc8c 	sxtb16	ip, ip
 800cffa:	fa2f f493 	sxtb16	r4, r3, ror #8
 800cffe:	3010      	adds	r0, #16
 800d000:	600e      	str	r6, [r1, #0]
 800d002:	f8c1 c004 	str.w	ip, [r1, #4]
 800d006:	608c      	str	r4, [r1, #8]
 800d008:	fa2f f383 	sxtb16	r3, r3
 800d00c:	60cb      	str	r3, [r1, #12]
 800d00e:	f850 cc08 	ldr.w	ip, [r0, #-8]
 800d012:	f850 3c04 	ldr.w	r3, [r0, #-4]
 800d016:	fa2f f69c 	sxtb16	r6, ip, ror #8
 800d01a:	fa2f fc8c 	sxtb16	ip, ip
 800d01e:	fa2f f493 	sxtb16	r4, r3, ror #8
 800d022:	f10e 0e10 	add.w	lr, lr, #16
 800d026:	610e      	str	r6, [r1, #16]
 800d028:	f8c1 c014 	str.w	ip, [r1, #20]
 800d02c:	3120      	adds	r1, #32
 800d02e:	45ae      	cmp	lr, r5
 800d030:	f841 4c08 	str.w	r4, [r1, #-8]
 800d034:	fa2f f383 	sxtb16	r3, r3
 800d038:	f841 3c04 	str.w	r3, [r1, #-4]
 800d03c:	ddd6      	ble.n	800cfec <st_int8_to16_no_shift_interleaved+0xc>
 800d03e:	3a04      	subs	r2, #4
 800d040:	4572      	cmp	r2, lr
 800d042:	db0f      	blt.n	800d064 <st_int8_to16_no_shift_interleaved+0x84>
 800d044:	ebae 0e00 	sub.w	lr, lr, r0
 800d048:	f850 3b04 	ldr.w	r3, [r0], #4
 800d04c:	fa2f f493 	sxtb16	r4, r3, ror #8
 800d050:	eb00 0c0e 	add.w	ip, r0, lr
 800d054:	600c      	str	r4, [r1, #0]
 800d056:	3108      	adds	r1, #8
 800d058:	4562      	cmp	r2, ip
 800d05a:	fa2f f383 	sxtb16	r3, r3
 800d05e:	f841 3c04 	str.w	r3, [r1, #-4]
 800d062:	daf1      	bge.n	800d048 <st_int8_to16_no_shift_interleaved+0x68>
 800d064:	bd70      	pop	{r4, r5, r6, pc}
 800d066:	bf00      	nop

0800d068 <st_int8_to16_dual>:
 800d068:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800d06c:	4698      	mov	r8, r3
 800d06e:	085b      	lsrs	r3, r3, #1
 800d070:	eb00 0c02 	add.w	ip, r0, r2
 800d074:	f000 80b9 	beq.w	800d1ea <st_int8_to16_dual+0x182>
 800d078:	f1a2 0710 	sub.w	r7, r2, #16
 800d07c:	1f16      	subs	r6, r2, #4
 800d07e:	2f00      	cmp	r7, #0
 800d080:	f04f 0500 	mov.w	r5, #0
 800d084:	db73      	blt.n	800d16e <st_int8_to16_dual+0x106>
 800d086:	f8d0 e000 	ldr.w	lr, [r0]
 800d08a:	f8dc 4000 	ldr.w	r4, [ip]
 800d08e:	fa2f f99e 	sxtb16	r9, lr, ror #8
 800d092:	fa2f fe8e 	sxtb16	lr, lr
 800d096:	eac9 4a2e 	pkhtb	sl, r9, lr, asr #16
 800d09a:	eace 4e09 	pkhbt	lr, lr, r9, lsl #16
 800d09e:	fa2f f994 	sxtb16	r9, r4, ror #8
 800d0a2:	f8c1 e000 	str.w	lr, [r1]
 800d0a6:	f8c1 a008 	str.w	sl, [r1, #8]
 800d0aa:	fa2f f484 	sxtb16	r4, r4
 800d0ae:	eac9 4e24 	pkhtb	lr, r9, r4, asr #16
 800d0b2:	eac4 4409 	pkhbt	r4, r4, r9, lsl #16
 800d0b6:	f8c1 e00c 	str.w	lr, [r1, #12]
 800d0ba:	604c      	str	r4, [r1, #4]
 800d0bc:	f8d0 e004 	ldr.w	lr, [r0, #4]
 800d0c0:	f8dc 4004 	ldr.w	r4, [ip, #4]
 800d0c4:	fa2f f99e 	sxtb16	r9, lr, ror #8
 800d0c8:	fa2f fe8e 	sxtb16	lr, lr
 800d0cc:	eac9 4a2e 	pkhtb	sl, r9, lr, asr #16
 800d0d0:	eace 4e09 	pkhbt	lr, lr, r9, lsl #16
 800d0d4:	fa2f f994 	sxtb16	r9, r4, ror #8
 800d0d8:	f8c1 e010 	str.w	lr, [r1, #16]
 800d0dc:	f8c1 a018 	str.w	sl, [r1, #24]
 800d0e0:	fa2f f484 	sxtb16	r4, r4
 800d0e4:	eac9 4e24 	pkhtb	lr, r9, r4, asr #16
 800d0e8:	eac4 4409 	pkhbt	r4, r4, r9, lsl #16
 800d0ec:	f8c1 e01c 	str.w	lr, [r1, #28]
 800d0f0:	614c      	str	r4, [r1, #20]
 800d0f2:	f8d0 e008 	ldr.w	lr, [r0, #8]
 800d0f6:	f8dc 4008 	ldr.w	r4, [ip, #8]
 800d0fa:	fa2f f99e 	sxtb16	r9, lr, ror #8
 800d0fe:	fa2f fe8e 	sxtb16	lr, lr
 800d102:	eac9 4a2e 	pkhtb	sl, r9, lr, asr #16
 800d106:	eace 4e09 	pkhbt	lr, lr, r9, lsl #16
 800d10a:	fa2f f994 	sxtb16	r9, r4, ror #8
 800d10e:	3010      	adds	r0, #16
 800d110:	f10c 0c10 	add.w	ip, ip, #16
 800d114:	f8c1 e020 	str.w	lr, [r1, #32]
 800d118:	f8c1 a028 	str.w	sl, [r1, #40]	@ 0x28
 800d11c:	fa2f f484 	sxtb16	r4, r4
 800d120:	eac9 4e24 	pkhtb	lr, r9, r4, asr #16
 800d124:	eac4 4409 	pkhbt	r4, r4, r9, lsl #16
 800d128:	f8c1 e02c 	str.w	lr, [r1, #44]	@ 0x2c
 800d12c:	624c      	str	r4, [r1, #36]	@ 0x24
 800d12e:	f850 ec04 	ldr.w	lr, [r0, #-4]
 800d132:	f85c 4c04 	ldr.w	r4, [ip, #-4]
 800d136:	fa2f fa9e 	sxtb16	sl, lr, ror #8
 800d13a:	fa2f fe8e 	sxtb16	lr, lr
 800d13e:	eaca 492e 	pkhtb	r9, sl, lr, asr #16
 800d142:	eace 4e0a 	pkhbt	lr, lr, sl, lsl #16
 800d146:	fa2f fa94 	sxtb16	sl, r4, ror #8
 800d14a:	3510      	adds	r5, #16
 800d14c:	f8c1 e030 	str.w	lr, [r1, #48]	@ 0x30
 800d150:	f8c1 9038 	str.w	r9, [r1, #56]	@ 0x38
 800d154:	3140      	adds	r1, #64	@ 0x40
 800d156:	42bd      	cmp	r5, r7
 800d158:	fa2f f484 	sxtb16	r4, r4
 800d15c:	eaca 4e24 	pkhtb	lr, sl, r4, asr #16
 800d160:	eac4 440a 	pkhbt	r4, r4, sl, lsl #16
 800d164:	f841 ec04 	str.w	lr, [r1, #-4]
 800d168:	f841 4c0c 	str.w	r4, [r1, #-12]
 800d16c:	dd8b      	ble.n	800d086 <st_int8_to16_dual+0x1e>
 800d16e:	42ae      	cmp	r6, r5
 800d170:	db1e      	blt.n	800d1b0 <st_int8_to16_dual+0x148>
 800d172:	f850 4b04 	ldr.w	r4, [r0], #4
 800d176:	f85c eb04 	ldr.w	lr, [ip], #4
 800d17a:	fa2f fa94 	sxtb16	sl, r4, ror #8
 800d17e:	fa2f f484 	sxtb16	r4, r4
 800d182:	eaca 4924 	pkhtb	r9, sl, r4, asr #16
 800d186:	eac4 440a 	pkhbt	r4, r4, sl, lsl #16
 800d18a:	fa2f fa9e 	sxtb16	sl, lr, ror #8
 800d18e:	3504      	adds	r5, #4
 800d190:	600c      	str	r4, [r1, #0]
 800d192:	f8c1 9008 	str.w	r9, [r1, #8]
 800d196:	3110      	adds	r1, #16
 800d198:	42b5      	cmp	r5, r6
 800d19a:	fa2f fe8e 	sxtb16	lr, lr
 800d19e:	eaca 442e 	pkhtb	r4, sl, lr, asr #16
 800d1a2:	eace 4e0a 	pkhbt	lr, lr, sl, lsl #16
 800d1a6:	f841 4c04 	str.w	r4, [r1, #-4]
 800d1aa:	f841 ec0c 	str.w	lr, [r1, #-12]
 800d1ae:	dde0      	ble.n	800d172 <st_int8_to16_dual+0x10a>
 800d1b0:	42aa      	cmp	r2, r5
 800d1b2:	dd40      	ble.n	800d236 <st_int8_to16_dual+0x1ce>
 800d1b4:	1b55      	subs	r5, r2, r5
 800d1b6:	1d0c      	adds	r4, r1, #4
 800d1b8:	46e6      	mov	lr, ip
 800d1ba:	eb00 0a05 	add.w	sl, r0, r5
 800d1be:	f910 9b01 	ldrsb.w	r9, [r0], #1
 800d1c2:	3404      	adds	r4, #4
 800d1c4:	f824 9c08 	strh.w	r9, [r4, #-8]
 800d1c8:	4550      	cmp	r0, sl
 800d1ca:	f91e 9b01 	ldrsb.w	r9, [lr], #1
 800d1ce:	f824 9c06 	strh.w	r9, [r4, #-6]
 800d1d2:	d1f4      	bne.n	800d1be <st_int8_to16_dual+0x156>
 800d1d4:	44ac      	add	ip, r5
 800d1d6:	eb01 0185 	add.w	r1, r1, r5, lsl #2
 800d1da:	3b01      	subs	r3, #1
 800d1dc:	eb0a 0002 	add.w	r0, sl, r2
 800d1e0:	4494      	add	ip, r2
 800d1e2:	b29b      	uxth	r3, r3
 800d1e4:	2b00      	cmp	r3, #0
 800d1e6:	f47f af4a 	bne.w	800d07e <st_int8_to16_dual+0x16>
 800d1ea:	f018 0f01 	tst.w	r8, #1
 800d1ee:	d020      	beq.n	800d232 <st_int8_to16_dual+0x1ca>
 800d1f0:	1f17      	subs	r7, r2, #4
 800d1f2:	f04f 0400 	mov.w	r4, #0
 800d1f6:	d411      	bmi.n	800d21c <st_int8_to16_dual+0x1b4>
 800d1f8:	f850 3b04 	ldr.w	r3, [r0], #4
 800d1fc:	fa2f f593 	sxtb16	r5, r3, ror #8
 800d200:	3404      	adds	r4, #4
 800d202:	3108      	adds	r1, #8
 800d204:	fa2f f383 	sxtb16	r3, r3
 800d208:	42a7      	cmp	r7, r4
 800d20a:	eac5 4623 	pkhtb	r6, r5, r3, asr #16
 800d20e:	eac3 4305 	pkhbt	r3, r3, r5, lsl #16
 800d212:	f841 6c04 	str.w	r6, [r1, #-4]
 800d216:	f841 3c08 	str.w	r3, [r1, #-8]
 800d21a:	daed      	bge.n	800d1f8 <st_int8_to16_dual+0x190>
 800d21c:	42a2      	cmp	r2, r4
 800d21e:	dd08      	ble.n	800d232 <st_int8_to16_dual+0x1ca>
 800d220:	1b13      	subs	r3, r2, r4
 800d222:	eb01 0343 	add.w	r3, r1, r3, lsl #1
 800d226:	f910 2b01 	ldrsb.w	r2, [r0], #1
 800d22a:	f821 2b02 	strh.w	r2, [r1], #2
 800d22e:	428b      	cmp	r3, r1
 800d230:	d1f9      	bne.n	800d226 <st_int8_to16_dual+0x1be>
 800d232:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800d236:	4682      	mov	sl, r0
 800d238:	e7cf      	b.n	800d1da <st_int8_to16_dual+0x172>
 800d23a:	bf00      	nop

0800d23c <st_int8_to16_dual_interleaved>:
 800d23c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800d240:	4698      	mov	r8, r3
 800d242:	085b      	lsrs	r3, r3, #1
 800d244:	eb00 0c02 	add.w	ip, r0, r2
 800d248:	f000 808f 	beq.w	800d36a <st_int8_to16_dual_interleaved+0x12e>
 800d24c:	f1a2 0710 	sub.w	r7, r2, #16
 800d250:	1f16      	subs	r6, r2, #4
 800d252:	2f00      	cmp	r7, #0
 800d254:	f04f 0e00 	mov.w	lr, #0
 800d258:	db4e      	blt.n	800d2f8 <st_int8_to16_dual_interleaved+0xbc>
 800d25a:	6805      	ldr	r5, [r0, #0]
 800d25c:	f8dc 4000 	ldr.w	r4, [ip]
 800d260:	fa2f fa95 	sxtb16	sl, r5, ror #8
 800d264:	fa2f f585 	sxtb16	r5, r5
 800d268:	fa2f f994 	sxtb16	r9, r4, ror #8
 800d26c:	f8c1 a000 	str.w	sl, [r1]
 800d270:	f8c1 9004 	str.w	r9, [r1, #4]
 800d274:	608d      	str	r5, [r1, #8]
 800d276:	fa2f f484 	sxtb16	r4, r4
 800d27a:	60cc      	str	r4, [r1, #12]
 800d27c:	6845      	ldr	r5, [r0, #4]
 800d27e:	f8dc 4004 	ldr.w	r4, [ip, #4]
 800d282:	fa2f fa95 	sxtb16	sl, r5, ror #8
 800d286:	fa2f f585 	sxtb16	r5, r5
 800d28a:	fa2f f994 	sxtb16	r9, r4, ror #8
 800d28e:	f8c1 a010 	str.w	sl, [r1, #16]
 800d292:	f8c1 9014 	str.w	r9, [r1, #20]
 800d296:	618d      	str	r5, [r1, #24]
 800d298:	fa2f f484 	sxtb16	r4, r4
 800d29c:	61cc      	str	r4, [r1, #28]
 800d29e:	6885      	ldr	r5, [r0, #8]
 800d2a0:	f8dc 4008 	ldr.w	r4, [ip, #8]
 800d2a4:	fa2f fa95 	sxtb16	sl, r5, ror #8
 800d2a8:	fa2f f585 	sxtb16	r5, r5
 800d2ac:	fa2f f994 	sxtb16	r9, r4, ror #8
 800d2b0:	3010      	adds	r0, #16
 800d2b2:	f10c 0c10 	add.w	ip, ip, #16
 800d2b6:	f8c1 a020 	str.w	sl, [r1, #32]
 800d2ba:	f8c1 9024 	str.w	r9, [r1, #36]	@ 0x24
 800d2be:	628d      	str	r5, [r1, #40]	@ 0x28
 800d2c0:	fa2f f484 	sxtb16	r4, r4
 800d2c4:	62cc      	str	r4, [r1, #44]	@ 0x2c
 800d2c6:	f850 5c04 	ldr.w	r5, [r0, #-4]
 800d2ca:	f85c 4c04 	ldr.w	r4, [ip, #-4]
 800d2ce:	fa2f fa95 	sxtb16	sl, r5, ror #8
 800d2d2:	fa2f f585 	sxtb16	r5, r5
 800d2d6:	fa2f f994 	sxtb16	r9, r4, ror #8
 800d2da:	f10e 0e10 	add.w	lr, lr, #16
 800d2de:	f8c1 a030 	str.w	sl, [r1, #48]	@ 0x30
 800d2e2:	f8c1 9034 	str.w	r9, [r1, #52]	@ 0x34
 800d2e6:	3140      	adds	r1, #64	@ 0x40
 800d2e8:	45be      	cmp	lr, r7
 800d2ea:	f841 5c08 	str.w	r5, [r1, #-8]
 800d2ee:	fa2f f484 	sxtb16	r4, r4
 800d2f2:	f841 4c04 	str.w	r4, [r1, #-4]
 800d2f6:	ddb0      	ble.n	800d25a <st_int8_to16_dual_interleaved+0x1e>
 800d2f8:	4576      	cmp	r6, lr
 800d2fa:	db18      	blt.n	800d32e <st_int8_to16_dual_interleaved+0xf2>
 800d2fc:	f850 5b04 	ldr.w	r5, [r0], #4
 800d300:	f85c 4b04 	ldr.w	r4, [ip], #4
 800d304:	fa2f fa95 	sxtb16	sl, r5, ror #8
 800d308:	fa2f f585 	sxtb16	r5, r5
 800d30c:	fa2f f994 	sxtb16	r9, r4, ror #8
 800d310:	f10e 0e04 	add.w	lr, lr, #4
 800d314:	f8c1 a000 	str.w	sl, [r1]
 800d318:	f8c1 9004 	str.w	r9, [r1, #4]
 800d31c:	3110      	adds	r1, #16
 800d31e:	45b6      	cmp	lr, r6
 800d320:	f841 5c08 	str.w	r5, [r1, #-8]
 800d324:	fa2f f484 	sxtb16	r4, r4
 800d328:	f841 4c04 	str.w	r4, [r1, #-4]
 800d32c:	dde6      	ble.n	800d2fc <st_int8_to16_dual_interleaved+0xc0>
 800d32e:	4572      	cmp	r2, lr
 800d330:	dd3c      	ble.n	800d3ac <st_int8_to16_dual_interleaved+0x170>
 800d332:	eba2 0e0e 	sub.w	lr, r2, lr
 800d336:	1d0c      	adds	r4, r1, #4
 800d338:	4665      	mov	r5, ip
 800d33a:	eb00 0a0e 	add.w	sl, r0, lr
 800d33e:	f910 9b01 	ldrsb.w	r9, [r0], #1
 800d342:	3404      	adds	r4, #4
 800d344:	f824 9c08 	strh.w	r9, [r4, #-8]
 800d348:	4550      	cmp	r0, sl
 800d34a:	f915 9b01 	ldrsb.w	r9, [r5], #1
 800d34e:	f824 9c06 	strh.w	r9, [r4, #-6]
 800d352:	d1f4      	bne.n	800d33e <st_int8_to16_dual_interleaved+0x102>
 800d354:	44f4      	add	ip, lr
 800d356:	eb01 018e 	add.w	r1, r1, lr, lsl #2
 800d35a:	3b01      	subs	r3, #1
 800d35c:	eb0a 0002 	add.w	r0, sl, r2
 800d360:	4494      	add	ip, r2
 800d362:	b29b      	uxth	r3, r3
 800d364:	2b00      	cmp	r3, #0
 800d366:	f47f af74 	bne.w	800d252 <st_int8_to16_dual_interleaved+0x16>
 800d36a:	f018 0f01 	tst.w	r8, #1
 800d36e:	d01b      	beq.n	800d3a8 <st_int8_to16_dual_interleaved+0x16c>
 800d370:	1f16      	subs	r6, r2, #4
 800d372:	f04f 0400 	mov.w	r4, #0
 800d376:	d40c      	bmi.n	800d392 <st_int8_to16_dual_interleaved+0x156>
 800d378:	f850 3b04 	ldr.w	r3, [r0], #4
 800d37c:	fa2f f593 	sxtb16	r5, r3, ror #8
 800d380:	3404      	adds	r4, #4
 800d382:	600d      	str	r5, [r1, #0]
 800d384:	3108      	adds	r1, #8
 800d386:	42a6      	cmp	r6, r4
 800d388:	fa2f f383 	sxtb16	r3, r3
 800d38c:	f841 3c04 	str.w	r3, [r1, #-4]
 800d390:	daf2      	bge.n	800d378 <st_int8_to16_dual_interleaved+0x13c>
 800d392:	42a2      	cmp	r2, r4
 800d394:	dd08      	ble.n	800d3a8 <st_int8_to16_dual_interleaved+0x16c>
 800d396:	1b13      	subs	r3, r2, r4
 800d398:	eb01 0343 	add.w	r3, r1, r3, lsl #1
 800d39c:	f910 2b01 	ldrsb.w	r2, [r0], #1
 800d3a0:	f821 2b02 	strh.w	r2, [r1], #2
 800d3a4:	428b      	cmp	r3, r1
 800d3a6:	d1f9      	bne.n	800d39c <st_int8_to16_dual_interleaved+0x160>
 800d3a8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800d3ac:	4682      	mov	sl, r0
 800d3ae:	e7d4      	b.n	800d35a <st_int8_to16_dual_interleaved+0x11e>

0800d3b0 <ai_padding_opt_init>:
 800d3b0:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800d3b4:	2700      	movs	r7, #0
 800d3b6:	9c07      	ldr	r4, [sp, #28]
 800d3b8:	e9c0 7700 	strd	r7, r7, [r0]
 800d3bc:	6087      	str	r7, [r0, #8]
 800d3be:	46b9      	mov	r9, r7
 800d3c0:	690e      	ldr	r6, [r1, #16]
 800d3c2:	f1c6 0c00 	rsb	ip, r6, #0
 800d3c6:	689e      	ldr	r6, [r3, #8]
 800d3c8:	42be      	cmp	r6, r7
 800d3ca:	dd1c      	ble.n	800d406 <ai_padding_opt_init+0x56>
 800d3cc:	463e      	mov	r6, r7
 800d3ce:	46be      	mov	lr, r7
 800d3d0:	e010      	b.n	800d3f4 <ai_padding_opt_init+0x44>
 800d3d2:	6895      	ldr	r5, [r2, #8]
 800d3d4:	eba5 080c 	sub.w	r8, r5, ip
 800d3d8:	68a5      	ldr	r5, [r4, #8]
 800d3da:	45a8      	cmp	r8, r5
 800d3dc:	da10      	bge.n	800d400 <ai_padding_opt_init+0x50>
 800d3de:	f109 0901 	add.w	r9, r9, #1
 800d3e2:	f8c0 9008 	str.w	r9, [r0, #8]
 800d3e6:	688d      	ldr	r5, [r1, #8]
 800d3e8:	f10e 0e01 	add.w	lr, lr, #1
 800d3ec:	44ac      	add	ip, r5
 800d3ee:	689d      	ldr	r5, [r3, #8]
 800d3f0:	4575      	cmp	r5, lr
 800d3f2:	dd09      	ble.n	800d408 <ai_padding_opt_init+0x58>
 800d3f4:	f1bc 0f00 	cmp.w	ip, #0
 800d3f8:	daeb      	bge.n	800d3d2 <ai_padding_opt_init+0x22>
 800d3fa:	3601      	adds	r6, #1
 800d3fc:	6006      	str	r6, [r0, #0]
 800d3fe:	e7f2      	b.n	800d3e6 <ai_padding_opt_init+0x36>
 800d400:	3701      	adds	r7, #1
 800d402:	6047      	str	r7, [r0, #4]
 800d404:	e7ef      	b.n	800d3e6 <ai_padding_opt_init+0x36>
 800d406:	463e      	mov	r6, r7
 800d408:	2500      	movs	r5, #0
 800d40a:	f8c0 9014 	str.w	r9, [r0, #20]
 800d40e:	e9c0 6703 	strd	r6, r7, [r0, #12]
 800d412:	e9c0 5506 	strd	r5, r5, [r0, #24]
 800d416:	6205      	str	r5, [r0, #32]
 800d418:	694e      	ldr	r6, [r1, #20]
 800d41a:	f1c6 0c00 	rsb	ip, r6, #0
 800d41e:	685e      	ldr	r6, [r3, #4]
 800d420:	42ae      	cmp	r6, r5
 800d422:	dd1c      	ble.n	800d45e <ai_padding_opt_init+0xae>
 800d424:	46ae      	mov	lr, r5
 800d426:	e00f      	b.n	800d448 <ai_padding_opt_init+0x98>
 800d428:	6855      	ldr	r5, [r2, #4]
 800d42a:	6866      	ldr	r6, [r4, #4]
 800d42c:	eba5 050c 	sub.w	r5, r5, ip
 800d430:	42b5      	cmp	r5, r6
 800d432:	da10      	bge.n	800d456 <ai_padding_opt_init+0xa6>
 800d434:	6a05      	ldr	r5, [r0, #32]
 800d436:	3501      	adds	r5, #1
 800d438:	6205      	str	r5, [r0, #32]
 800d43a:	68cd      	ldr	r5, [r1, #12]
 800d43c:	f10e 0e01 	add.w	lr, lr, #1
 800d440:	44ac      	add	ip, r5
 800d442:	685d      	ldr	r5, [r3, #4]
 800d444:	4575      	cmp	r5, lr
 800d446:	dd0a      	ble.n	800d45e <ai_padding_opt_init+0xae>
 800d448:	f1bc 0f00 	cmp.w	ip, #0
 800d44c:	daec      	bge.n	800d428 <ai_padding_opt_init+0x78>
 800d44e:	6985      	ldr	r5, [r0, #24]
 800d450:	3501      	adds	r5, #1
 800d452:	6185      	str	r5, [r0, #24]
 800d454:	e7f1      	b.n	800d43a <ai_padding_opt_init+0x8a>
 800d456:	69c5      	ldr	r5, [r0, #28]
 800d458:	3501      	adds	r5, #1
 800d45a:	61c5      	str	r5, [r0, #28]
 800d45c:	e7ed      	b.n	800d43a <ai_padding_opt_init+0x8a>
 800d45e:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800d462:	bf00      	nop

0800d464 <ai_padding_opt_phase1>:
 800d464:	e9d0 3206 	ldrd	r3, r2, [r0, #24]
 800d468:	b923      	cbnz	r3, 800d474 <ai_padding_opt_phase1+0x10>
 800d46a:	b17a      	cbz	r2, 800d48c <ai_padding_opt_phase1+0x28>
 800d46c:	3a01      	subs	r2, #1
 800d46e:	8483      	strh	r3, [r0, #36]	@ 0x24
 800d470:	61c2      	str	r2, [r0, #28]
 800d472:	e004      	b.n	800d47e <ai_padding_opt_phase1+0x1a>
 800d474:	b152      	cbz	r2, 800d48c <ai_padding_opt_phase1+0x28>
 800d476:	2201      	movs	r2, #1
 800d478:	3b01      	subs	r3, #1
 800d47a:	8482      	strh	r2, [r0, #36]	@ 0x24
 800d47c:	6183      	str	r3, [r0, #24]
 800d47e:	68c3      	ldr	r3, [r0, #12]
 800d480:	e9d0 1204 	ldrd	r1, r2, [r0, #16]
 800d484:	6003      	str	r3, [r0, #0]
 800d486:	e9c0 1201 	strd	r1, r2, [r0, #4]
 800d48a:	4770      	bx	lr
 800d48c:	6a03      	ldr	r3, [r0, #32]
 800d48e:	2201      	movs	r2, #1
 800d490:	3b01      	subs	r3, #1
 800d492:	8482      	strh	r2, [r0, #36]	@ 0x24
 800d494:	6203      	str	r3, [r0, #32]
 800d496:	e7f2      	b.n	800d47e <ai_padding_opt_phase1+0x1a>

0800d498 <st_int16_fill>:
 800d498:	b510      	push	{r4, lr}
 800d49a:	eac0 4400 	pkhbt	r4, r0, r0, lsl #16
 800d49e:	ea5f 0e92 	movs.w	lr, r2, lsr #2
 800d4a2:	d013      	beq.n	800d4cc <st_int16_fill+0x34>
 800d4a4:	f10e 33ff 	add.w	r3, lr, #4294967295
 800d4a8:	2b03      	cmp	r3, #3
 800d4aa:	460b      	mov	r3, r1
 800d4ac:	d919      	bls.n	800d4e2 <st_int16_fill+0x4a>
 800d4ae:	f011 0f07 	tst.w	r1, #7
 800d4b2:	d116      	bne.n	800d4e2 <st_int16_fill+0x4a>
 800d4b4:	f04f 0c00 	mov.w	ip, #0
 800d4b8:	f10c 0c01 	add.w	ip, ip, #1
 800d4bc:	45e6      	cmp	lr, ip
 800d4be:	e9c3 4400 	strd	r4, r4, [r3]
 800d4c2:	f103 0308 	add.w	r3, r3, #8
 800d4c6:	d1f7      	bne.n	800d4b8 <st_int16_fill+0x20>
 800d4c8:	eb01 01ce 	add.w	r1, r1, lr, lsl #3
 800d4cc:	f012 0203 	ands.w	r2, r2, #3
 800d4d0:	d006      	beq.n	800d4e0 <st_int16_fill+0x48>
 800d4d2:	3a01      	subs	r2, #1
 800d4d4:	8008      	strh	r0, [r1, #0]
 800d4d6:	d003      	beq.n	800d4e0 <st_int16_fill+0x48>
 800d4d8:	2a01      	cmp	r2, #1
 800d4da:	8048      	strh	r0, [r1, #2]
 800d4dc:	bf18      	it	ne
 800d4de:	8088      	strhne	r0, [r1, #4]
 800d4e0:	bd10      	pop	{r4, pc}
 800d4e2:	46f4      	mov	ip, lr
 800d4e4:	f1bc 0c01 	subs.w	ip, ip, #1
 800d4e8:	601c      	str	r4, [r3, #0]
 800d4ea:	605c      	str	r4, [r3, #4]
 800d4ec:	f103 0308 	add.w	r3, r3, #8
 800d4f0:	d1f8      	bne.n	800d4e4 <st_int16_fill+0x4c>
 800d4f2:	e7e9      	b.n	800d4c8 <st_int16_fill+0x30>

0800d4f4 <st_sssa8_ch_convolve_rank1upd>:
 800d4f4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800d4f8:	b085      	sub	sp, #20
 800d4fa:	f8bd 4038 	ldrh.w	r4, [sp, #56]	@ 0x38
 800d4fe:	f99d b040 	ldrsb.w	fp, [sp, #64]	@ 0x40
 800d502:	fb13 f304 	smulbb	r3, r3, r4
 800d506:	460c      	mov	r4, r1
 800d508:	990f      	ldr	r1, [sp, #60]	@ 0x3c
 800d50a:	fb13 f500 	smulbb	r5, r3, r0
 800d50e:	9b11      	ldr	r3, [sp, #68]	@ 0x44
 800d510:	2a00      	cmp	r2, #0
 800d512:	d070      	beq.n	800d5f6 <st_sssa8_ch_convolve_rank1upd+0x102>
 800d514:	b2ad      	uxth	r5, r5
 800d516:	f1a1 0904 	sub.w	r9, r1, #4
 800d51a:	eb03 0a82 	add.w	sl, r3, r2, lsl #2
 800d51e:	08af      	lsrs	r7, r5, #2
 800d520:	f005 0503 	and.w	r5, r5, #3
 800d524:	eb03 08c2 	add.w	r8, r3, r2, lsl #3
 800d528:	1e69      	subs	r1, r5, #1
 800d52a:	f1a7 0381 	sub.w	r3, r7, #129	@ 0x81
 800d52e:	f1a7 0280 	sub.w	r2, r7, #128	@ 0x80
 800d532:	f3c3 13c8 	ubfx	r3, r3, #7, #9
 800d536:	b289      	uxth	r1, r1
 800d538:	9100      	str	r1, [sp, #0]
 800d53a:	ebc3 2143 	rsb	r1, r3, r3, lsl #9
 800d53e:	eb02 12c1 	add.w	r2, r2, r1, lsl #7
 800d542:	b292      	uxth	r2, r2
 800d544:	9202      	str	r2, [sp, #8]
 800d546:	025a      	lsls	r2, r3, #9
 800d548:	3301      	adds	r3, #1
 800d54a:	f502 6280 	add.w	r2, r2, #1024	@ 0x400
 800d54e:	025b      	lsls	r3, r3, #9
 800d550:	9203      	str	r2, [sp, #12]
 800d552:	9301      	str	r3, [sp, #4]
 800d554:	2f80      	cmp	r7, #128	@ 0x80
 800d556:	d953      	bls.n	800d600 <st_sssa8_ch_convolve_rank1upd+0x10c>
 800d558:	9b03      	ldr	r3, [sp, #12]
 800d55a:	f504 7000 	add.w	r0, r4, #512	@ 0x200
 800d55e:	2600      	movs	r6, #0
 800d560:	eb04 0c03 	add.w	ip, r4, r3
 800d564:	f5a0 7100 	sub.w	r1, r0, #512	@ 0x200
 800d568:	2200      	movs	r2, #0
 800d56a:	f851 3b04 	ldr.w	r3, [r1], #4
 800d56e:	fa2f fe83 	sxtb16	lr, r3
 800d572:	4281      	cmp	r1, r0
 800d574:	ea4f 2333 	mov.w	r3, r3, ror #8
 800d578:	fa92 f21e 	qadd16	r2, r2, lr
 800d57c:	fa2f f383 	sxtb16	r3, r3
 800d580:	fa92 f213 	qadd16	r2, r2, r3
 800d584:	d1f1      	bne.n	800d56a <st_sssa8_ch_convolve_rank1upd+0x76>
 800d586:	f501 7000 	add.w	r0, r1, #512	@ 0x200
 800d58a:	b213      	sxth	r3, r2
 800d58c:	4560      	cmp	r0, ip
 800d58e:	eb03 4322 	add.w	r3, r3, r2, asr #16
 800d592:	441e      	add	r6, r3
 800d594:	d1e6      	bne.n	800d564 <st_sssa8_ch_convolve_rank1upd+0x70>
 800d596:	9b01      	ldr	r3, [sp, #4]
 800d598:	18e1      	adds	r1, r4, r3
 800d59a:	9c02      	ldr	r4, [sp, #8]
 800d59c:	b374      	cbz	r4, 800d5fc <st_sssa8_ch_convolve_rank1upd+0x108>
 800d59e:	eb01 0484 	add.w	r4, r1, r4, lsl #2
 800d5a2:	2200      	movs	r2, #0
 800d5a4:	f851 3b04 	ldr.w	r3, [r1], #4
 800d5a8:	fa2f f083 	sxtb16	r0, r3
 800d5ac:	428c      	cmp	r4, r1
 800d5ae:	ea4f 2333 	mov.w	r3, r3, ror #8
 800d5b2:	fa92 f210 	qadd16	r2, r2, r0
 800d5b6:	fa2f f383 	sxtb16	r3, r3
 800d5ba:	fa92 f213 	qadd16	r2, r2, r3
 800d5be:	d1f1      	bne.n	800d5a4 <st_sssa8_ch_convolve_rank1upd+0xb0>
 800d5c0:	b213      	sxth	r3, r2
 800d5c2:	eb03 4322 	add.w	r3, r3, r2, asr #16
 800d5c6:	441e      	add	r6, r3
 800d5c8:	b16d      	cbz	r5, 800d5e6 <st_sssa8_ch_convolve_rank1upd+0xf2>
 800d5ca:	f994 3000 	ldrsb.w	r3, [r4]
 800d5ce:	441e      	add	r6, r3
 800d5d0:	9b00      	ldr	r3, [sp, #0]
 800d5d2:	b13b      	cbz	r3, 800d5e4 <st_sssa8_ch_convolve_rank1upd+0xf0>
 800d5d4:	f994 3001 	ldrsb.w	r3, [r4, #1]
 800d5d8:	2d02      	cmp	r5, #2
 800d5da:	441e      	add	r6, r3
 800d5dc:	d002      	beq.n	800d5e4 <st_sssa8_ch_convolve_rank1upd+0xf0>
 800d5de:	f994 3002 	ldrsb.w	r3, [r4, #2]
 800d5e2:	441e      	add	r6, r3
 800d5e4:	442c      	add	r4, r5
 800d5e6:	f859 3f04 	ldr.w	r3, [r9, #4]!
 800d5ea:	fb06 331b 	mls	r3, r6, fp, r3
 800d5ee:	f84a 3b04 	str.w	r3, [sl], #4
 800d5f2:	45c2      	cmp	sl, r8
 800d5f4:	d1ae      	bne.n	800d554 <st_sssa8_ch_convolve_rank1upd+0x60>
 800d5f6:	b005      	add	sp, #20
 800d5f8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800d5fc:	460c      	mov	r4, r1
 800d5fe:	e7e3      	b.n	800d5c8 <st_sssa8_ch_convolve_rank1upd+0xd4>
 800d600:	4621      	mov	r1, r4
 800d602:	2600      	movs	r6, #0
 800d604:	463c      	mov	r4, r7
 800d606:	e7c9      	b.n	800d59c <st_sssa8_ch_convolve_rank1upd+0xa8>

0800d608 <st_sssa8_ch_fully_connected>:
 800d608:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800d60c:	b097      	sub	sp, #92	@ 0x5c
 800d60e:	468a      	mov	sl, r1
 800d610:	4693      	mov	fp, r2
 800d612:	4619      	mov	r1, r3
 800d614:	9a26      	ldr	r2, [sp, #152]	@ 0x98
 800d616:	9314      	str	r3, [sp, #80]	@ 0x50
 800d618:	eb03 0383 	add.w	r3, r3, r3, lsl #2
 800d61c:	eb02 0581 	add.w	r5, r2, r1, lsl #2
 800d620:	9f21      	ldr	r7, [sp, #132]	@ 0x84
 800d622:	eb02 0343 	add.w	r3, r2, r3, lsl #1
 800d626:	f99d e088 	ldrsb.w	lr, [sp, #136]	@ 0x88
 800d62a:	9512      	str	r5, [sp, #72]	@ 0x48
 800d62c:	930d      	str	r3, [sp, #52]	@ 0x34
 800d62e:	f99d 308c 	ldrsb.w	r3, [sp, #140]	@ 0x8c
 800d632:	2900      	cmp	r1, #0
 800d634:	f000 827b 	beq.w	800db2e <st_sssa8_ch_fully_connected+0x526>
 800d638:	463c      	mov	r4, r7
 800d63a:	3504      	adds	r5, #4
 800d63c:	ea4f 0841 	mov.w	r8, r1, lsl #1
 800d640:	f04f 0c01 	mov.w	ip, #1
 800d644:	eb07 0741 	add.w	r7, r7, r1, lsl #1
 800d648:	f934 2b02 	ldrsh.w	r2, [r4], #2
 800d64c:	1e51      	subs	r1, r2, #1
 800d64e:	fa0c f602 	lsl.w	r6, ip, r2
 800d652:	fa03 f202 	lsl.w	r2, r3, r2
 800d656:	b289      	uxth	r1, r1
 800d658:	eb02 0256 	add.w	r2, r2, r6, lsr #1
 800d65c:	2914      	cmp	r1, #20
 800d65e:	f200 81e8 	bhi.w	800da32 <st_sssa8_ch_fully_connected+0x42a>
 800d662:	42bc      	cmp	r4, r7
 800d664:	f845 2c04 	str.w	r2, [r5, #-4]
 800d668:	f105 0504 	add.w	r5, r5, #4
 800d66c:	d1ec      	bne.n	800d648 <st_sssa8_ch_fully_connected+0x40>
 800d66e:	9a14      	ldr	r2, [sp, #80]	@ 0x50
 800d670:	fa1f f38e 	uxth.w	r3, lr
 800d674:	9e0d      	ldr	r6, [sp, #52]	@ 0x34
 800d676:	eba7 0508 	sub.w	r5, r7, r8
 800d67a:	0852      	lsrs	r2, r2, #1
 800d67c:	f8cd e000 	str.w	lr, [sp]
 800d680:	ea43 430e 	orr.w	r3, r3, lr, lsl #16
 800d684:	4631      	mov	r1, r6
 800d686:	4614      	mov	r4, r2
 800d688:	9215      	str	r2, [sp, #84]	@ 0x54
 800d68a:	465a      	mov	r2, fp
 800d68c:	9513      	str	r5, [sp, #76]	@ 0x4c
 800d68e:	f000 faf5 	bl	800dc7c <st_int8_reordered_no_shift_zero>
 800d692:	2c00      	cmp	r4, #0
 800d694:	f000 8179 	beq.w	800d98a <st_sssa8_ch_fully_connected+0x382>
 800d698:	9824      	ldr	r0, [sp, #144]	@ 0x90
 800d69a:	1e62      	subs	r2, r4, #1
 800d69c:	f1ab 0310 	sub.w	r3, fp, #16
 800d6a0:	46d9      	mov	r9, fp
 800d6a2:	b292      	uxth	r2, r2
 800d6a4:	f100 0110 	add.w	r1, r0, #16
 800d6a8:	091b      	lsrs	r3, r3, #4
 800d6aa:	eb01 02c2 	add.w	r2, r1, r2, lsl #3
 800d6ae:	3301      	adds	r3, #1
 800d6b0:	920e      	str	r2, [sp, #56]	@ 0x38
 800d6b2:	f1ab 0203 	sub.w	r2, fp, #3
 800d6b6:	920f      	str	r2, [sp, #60]	@ 0x3c
 800d6b8:	4602      	mov	r2, r0
 800d6ba:	3208      	adds	r2, #8
 800d6bc:	9208      	str	r2, [sp, #32]
 800d6be:	1d2a      	adds	r2, r5, #4
 800d6c0:	9207      	str	r2, [sp, #28]
 800d6c2:	9a25      	ldr	r2, [sp, #148]	@ 0x94
 800d6c4:	3202      	adds	r2, #2
 800d6c6:	9204      	str	r2, [sp, #16]
 800d6c8:	9a20      	ldr	r2, [sp, #128]	@ 0x80
 800d6ca:	3204      	adds	r2, #4
 800d6cc:	9205      	str	r2, [sp, #20]
 800d6ce:	9a12      	ldr	r2, [sp, #72]	@ 0x48
 800d6d0:	3204      	adds	r2, #4
 800d6d2:	9206      	str	r2, [sp, #24]
 800d6d4:	011a      	lsls	r2, r3, #4
 800d6d6:	eb06 1343 	add.w	r3, r6, r3, lsl #5
 800d6da:	9209      	str	r2, [sp, #36]	@ 0x24
 800d6dc:	9310      	str	r3, [sp, #64]	@ 0x40
 800d6de:	f1ab 0304 	sub.w	r3, fp, #4
 800d6e2:	9311      	str	r3, [sp, #68]	@ 0x44
 800d6e4:	9b08      	ldr	r3, [sp, #32]
 800d6e6:	f1b9 0f0f 	cmp.w	r9, #15
 800d6ea:	eb0a 0b09 	add.w	fp, sl, r9
 800d6ee:	e953 1302 	ldrd	r1, r3, [r3, #-8]
 800d6f2:	f340 81ef 	ble.w	800dad4 <st_sssa8_ch_fully_connected+0x4cc>
 800d6f6:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800d6f8:	465c      	mov	r4, fp
 800d6fa:	eb0a 0502 	add.w	r5, sl, r2
 800d6fe:	9a0d      	ldr	r2, [sp, #52]	@ 0x34
 800d700:	f8da 6000 	ldr.w	r6, [sl]
 800d704:	6820      	ldr	r0, [r4, #0]
 800d706:	ea4f 2736 	mov.w	r7, r6, ror #8
 800d70a:	f8d2 e000 	ldr.w	lr, [r2]
 800d70e:	ea4f 2c30 	mov.w	ip, r0, ror #8
 800d712:	fa2f f787 	sxtb16	r7, r7
 800d716:	fa2f f686 	sxtb16	r6, r6
 800d71a:	fa2f fc8c 	sxtb16	ip, ip
 800d71e:	fa2f f080 	sxtb16	r0, r0
 800d722:	fb2e 1106 	smlad	r1, lr, r6, r1
 800d726:	fb2e 3300 	smlad	r3, lr, r0, r3
 800d72a:	f8d2 e004 	ldr.w	lr, [r2, #4]
 800d72e:	fb2e 1707 	smlad	r7, lr, r7, r1
 800d732:	fb2e 3e0c 	smlad	lr, lr, ip, r3
 800d736:	f8da 1004 	ldr.w	r1, [sl, #4]
 800d73a:	6860      	ldr	r0, [r4, #4]
 800d73c:	ea4f 2631 	mov.w	r6, r1, ror #8
 800d740:	6893      	ldr	r3, [r2, #8]
 800d742:	ea4f 2c30 	mov.w	ip, r0, ror #8
 800d746:	fa2f f686 	sxtb16	r6, r6
 800d74a:	fa2f f181 	sxtb16	r1, r1
 800d74e:	fa2f fc8c 	sxtb16	ip, ip
 800d752:	fa2f f080 	sxtb16	r0, r0
 800d756:	fb23 7101 	smlad	r1, r3, r1, r7
 800d75a:	fb23 e300 	smlad	r3, r3, r0, lr
 800d75e:	f8d2 e00c 	ldr.w	lr, [r2, #12]
 800d762:	fb2e 1606 	smlad	r6, lr, r6, r1
 800d766:	fb2e 3e0c 	smlad	lr, lr, ip, r3
 800d76a:	f8da 0008 	ldr.w	r0, [sl, #8]
 800d76e:	68a1      	ldr	r1, [r4, #8]
 800d770:	ea4f 2c30 	mov.w	ip, r0, ror #8
 800d774:	6913      	ldr	r3, [r2, #16]
 800d776:	ea4f 2731 	mov.w	r7, r1, ror #8
 800d77a:	fa2f fc8c 	sxtb16	ip, ip
 800d77e:	fa2f f080 	sxtb16	r0, r0
 800d782:	fa2f f787 	sxtb16	r7, r7
 800d786:	fa2f f181 	sxtb16	r1, r1
 800d78a:	fb23 6000 	smlad	r0, r3, r0, r6
 800d78e:	fb23 e301 	smlad	r3, r3, r1, lr
 800d792:	6951      	ldr	r1, [r2, #20]
 800d794:	fb21 000c 	smlad	r0, r1, ip, r0
 800d798:	fb21 3c07 	smlad	ip, r1, r7, r3
 800d79c:	f8da 100c 	ldr.w	r1, [sl, #12]
 800d7a0:	3410      	adds	r4, #16
 800d7a2:	f854 ec04 	ldr.w	lr, [r4, #-4]
 800d7a6:	f10a 0a10 	add.w	sl, sl, #16
 800d7aa:	ea4f 2731 	mov.w	r7, r1, ror #8
 800d7ae:	6993      	ldr	r3, [r2, #24]
 800d7b0:	ea4f 263e 	mov.w	r6, lr, ror #8
 800d7b4:	fa2f f787 	sxtb16	r7, r7
 800d7b8:	fa2f f181 	sxtb16	r1, r1
 800d7bc:	fa2f fe8e 	sxtb16	lr, lr
 800d7c0:	fa2f f686 	sxtb16	r6, r6
 800d7c4:	fb23 0101 	smlad	r1, r3, r1, r0
 800d7c8:	fb23 c00e 	smlad	r0, r3, lr, ip
 800d7cc:	69d3      	ldr	r3, [r2, #28]
 800d7ce:	3220      	adds	r2, #32
 800d7d0:	fb23 1107 	smlad	r1, r3, r7, r1
 800d7d4:	fb23 0306 	smlad	r3, r3, r6, r0
 800d7d8:	4555      	cmp	r5, sl
 800d7da:	d191      	bne.n	800d700 <st_sssa8_ch_fully_connected+0xf8>
 800d7dc:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800d7de:	9810      	ldr	r0, [sp, #64]	@ 0x40
 800d7e0:	4493      	add	fp, r2
 800d7e2:	4690      	mov	r8, r2
 800d7e4:	9003      	str	r0, [sp, #12]
 800d7e6:	9a0f      	ldr	r2, [sp, #60]	@ 0x3c
 800d7e8:	4542      	cmp	r2, r8
 800d7ea:	f340 8171 	ble.w	800dad0 <st_sssa8_ch_fully_connected+0x4c8>
 800d7ee:	9a11      	ldr	r2, [sp, #68]	@ 0x44
 800d7f0:	46dc      	mov	ip, fp
 800d7f2:	9d03      	ldr	r5, [sp, #12]
 800d7f4:	eba2 0208 	sub.w	r2, r2, r8
 800d7f8:	0892      	lsrs	r2, r2, #2
 800d7fa:	920c      	str	r2, [sp, #48]	@ 0x30
 800d7fc:	3201      	adds	r2, #1
 800d7fe:	0090      	lsls	r0, r2, #2
 800d800:	920b      	str	r2, [sp, #44]	@ 0x2c
 800d802:	eb0a 0e82 	add.w	lr, sl, r2, lsl #2
 800d806:	900a      	str	r0, [sp, #40]	@ 0x28
 800d808:	f85a 7b04 	ldr.w	r7, [sl], #4
 800d80c:	f85c 0b04 	ldr.w	r0, [ip], #4
 800d810:	ea4f 2637 	mov.w	r6, r7, ror #8
 800d814:	682a      	ldr	r2, [r5, #0]
 800d816:	ea4f 2430 	mov.w	r4, r0, ror #8
 800d81a:	fa2f f686 	sxtb16	r6, r6
 800d81e:	fa2f f787 	sxtb16	r7, r7
 800d822:	fa2f f484 	sxtb16	r4, r4
 800d826:	fa2f f080 	sxtb16	r0, r0
 800d82a:	fb22 1107 	smlad	r1, r2, r7, r1
 800d82e:	fb22 3200 	smlad	r2, r2, r0, r3
 800d832:	686b      	ldr	r3, [r5, #4]
 800d834:	3508      	adds	r5, #8
 800d836:	fb23 1106 	smlad	r1, r3, r6, r1
 800d83a:	fb23 2304 	smlad	r3, r3, r4, r2
 800d83e:	45d6      	cmp	lr, sl
 800d840:	d1e2      	bne.n	800d808 <st_sssa8_ch_fully_connected+0x200>
 800d842:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 800d844:	f108 0804 	add.w	r8, r8, #4
 800d848:	980b      	ldr	r0, [sp, #44]	@ 0x2c
 800d84a:	4493      	add	fp, r2
 800d84c:	9a03      	ldr	r2, [sp, #12]
 800d84e:	eb02 02c0 	add.w	r2, r2, r0, lsl #3
 800d852:	9203      	str	r2, [sp, #12]
 800d854:	9a0c      	ldr	r2, [sp, #48]	@ 0x30
 800d856:	eb08 0882 	add.w	r8, r8, r2, lsl #2
 800d85a:	45c1      	cmp	r9, r8
 800d85c:	dd37      	ble.n	800d8ce <st_sssa8_ch_fully_connected+0x2c6>
 800d85e:	9c03      	ldr	r4, [sp, #12]
 800d860:	f99e 0000 	ldrsb.w	r0, [lr]
 800d864:	f9b4 2000 	ldrsh.w	r2, [r4]
 800d868:	fb12 1100 	smlabb	r1, r2, r0, r1
 800d86c:	f99b 0000 	ldrsb.w	r0, [fp]
 800d870:	fb12 3300 	smlabb	r3, r2, r0, r3
 800d874:	f108 0201 	add.w	r2, r8, #1
 800d878:	454a      	cmp	r2, r9
 800d87a:	da25      	bge.n	800d8c8 <st_sssa8_ch_fully_connected+0x2c0>
 800d87c:	f9b4 2002 	ldrsh.w	r2, [r4, #2]
 800d880:	f99e 0001 	ldrsb.w	r0, [lr, #1]
 800d884:	fb12 1100 	smlabb	r1, r2, r0, r1
 800d888:	f99b 0001 	ldrsb.w	r0, [fp, #1]
 800d88c:	fb12 3300 	smlabb	r3, r2, r0, r3
 800d890:	f108 0202 	add.w	r2, r8, #2
 800d894:	4591      	cmp	r9, r2
 800d896:	dd17      	ble.n	800d8c8 <st_sssa8_ch_fully_connected+0x2c0>
 800d898:	f9b4 2004 	ldrsh.w	r2, [r4, #4]
 800d89c:	f99e 0002 	ldrsb.w	r0, [lr, #2]
 800d8a0:	fb12 1100 	smlabb	r1, r2, r0, r1
 800d8a4:	f99b 0002 	ldrsb.w	r0, [fp, #2]
 800d8a8:	fb12 3300 	smlabb	r3, r2, r0, r3
 800d8ac:	f108 0203 	add.w	r2, r8, #3
 800d8b0:	4591      	cmp	r9, r2
 800d8b2:	dd09      	ble.n	800d8c8 <st_sssa8_ch_fully_connected+0x2c0>
 800d8b4:	f9b4 2006 	ldrsh.w	r2, [r4, #6]
 800d8b8:	f99b 0003 	ldrsb.w	r0, [fp, #3]
 800d8bc:	fb12 3300 	smlabb	r3, r2, r0, r3
 800d8c0:	f99e 0003 	ldrsb.w	r0, [lr, #3]
 800d8c4:	fb12 1100 	smlabb	r1, r2, r0, r1
 800d8c8:	eba9 0808 	sub.w	r8, r9, r8
 800d8cc:	44c6      	add	lr, r8
 800d8ce:	9d07      	ldr	r5, [sp, #28]
 800d8d0:	f935 0c04 	ldrsh.w	r0, [r5, #-4]
 800d8d4:	2815      	cmp	r0, #21
 800d8d6:	f340 80c2 	ble.w	800da5e <st_sssa8_ch_fully_connected+0x456>
 800d8da:	1e84      	subs	r4, r0, #2
 800d8dc:	2201      	movs	r2, #1
 800d8de:	3801      	subs	r0, #1
 800d8e0:	fa02 f404 	lsl.w	r4, r2, r4
 800d8e4:	9a05      	ldr	r2, [sp, #20]
 800d8e6:	f852 2c04 	ldr.w	r2, [r2, #-4]
 800d8ea:	fb51 4202 	smmla	r2, r1, r2, r4
 800d8ee:	9906      	ldr	r1, [sp, #24]
 800d8f0:	4102      	asrs	r2, r0
 800d8f2:	1eac      	subs	r4, r5, #2
 800d8f4:	f851 1c04 	ldr.w	r1, [r1, #-4]
 800d8f8:	440a      	add	r2, r1
 800d8fa:	f302 0207 	ssat	r2, #8, r2
 800d8fe:	9904      	ldr	r1, [sp, #16]
 800d900:	b252      	sxtb	r2, r2
 800d902:	1e48      	subs	r0, r1, #1
 800d904:	f801 2c02 	strb.w	r2, [r1, #-2]
 800d908:	f9b4 4000 	ldrsh.w	r4, [r4]
 800d90c:	2c15      	cmp	r4, #21
 800d90e:	f340 8098 	ble.w	800da42 <st_sssa8_ch_fully_connected+0x43a>
 800d912:	1ea1      	subs	r1, r4, #2
 800d914:	2201      	movs	r2, #1
 800d916:	3c01      	subs	r4, #1
 800d918:	fa02 f101 	lsl.w	r1, r2, r1
 800d91c:	9a05      	ldr	r2, [sp, #20]
 800d91e:	6812      	ldr	r2, [r2, #0]
 800d920:	fb53 1302 	smmla	r3, r3, r2, r1
 800d924:	9a06      	ldr	r2, [sp, #24]
 800d926:	4123      	asrs	r3, r4
 800d928:	6812      	ldr	r2, [r2, #0]
 800d92a:	4413      	add	r3, r2
 800d92c:	f303 0307 	ssat	r3, #8, r3
 800d930:	b25b      	sxtb	r3, r3
 800d932:	9a07      	ldr	r2, [sp, #28]
 800d934:	eb0e 0a09 	add.w	sl, lr, r9
 800d938:	7003      	strb	r3, [r0, #0]
 800d93a:	3204      	adds	r2, #4
 800d93c:	9b08      	ldr	r3, [sp, #32]
 800d93e:	9207      	str	r2, [sp, #28]
 800d940:	3308      	adds	r3, #8
 800d942:	9a04      	ldr	r2, [sp, #16]
 800d944:	9308      	str	r3, [sp, #32]
 800d946:	3202      	adds	r2, #2
 800d948:	9204      	str	r2, [sp, #16]
 800d94a:	9a05      	ldr	r2, [sp, #20]
 800d94c:	3208      	adds	r2, #8
 800d94e:	9205      	str	r2, [sp, #20]
 800d950:	9a06      	ldr	r2, [sp, #24]
 800d952:	3208      	adds	r2, #8
 800d954:	9206      	str	r2, [sp, #24]
 800d956:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 800d958:	429a      	cmp	r2, r3
 800d95a:	f47f aec3 	bne.w	800d6e4 <st_sssa8_ch_fully_connected+0xdc>
 800d95e:	9b15      	ldr	r3, [sp, #84]	@ 0x54
 800d960:	46cb      	mov	fp, r9
 800d962:	9a20      	ldr	r2, [sp, #128]	@ 0x80
 800d964:	eb02 02c3 	add.w	r2, r2, r3, lsl #3
 800d968:	9220      	str	r2, [sp, #128]	@ 0x80
 800d96a:	9a13      	ldr	r2, [sp, #76]	@ 0x4c
 800d96c:	eb02 0283 	add.w	r2, r2, r3, lsl #2
 800d970:	9213      	str	r2, [sp, #76]	@ 0x4c
 800d972:	9a24      	ldr	r2, [sp, #144]	@ 0x90
 800d974:	eb02 02c3 	add.w	r2, r2, r3, lsl #3
 800d978:	9224      	str	r2, [sp, #144]	@ 0x90
 800d97a:	9a25      	ldr	r2, [sp, #148]	@ 0x94
 800d97c:	eb02 0243 	add.w	r2, r2, r3, lsl #1
 800d980:	9225      	str	r2, [sp, #148]	@ 0x94
 800d982:	9a12      	ldr	r2, [sp, #72]	@ 0x48
 800d984:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
 800d988:	9312      	str	r3, [sp, #72]	@ 0x48
 800d98a:	9b14      	ldr	r3, [sp, #80]	@ 0x50
 800d98c:	07db      	lsls	r3, r3, #31
 800d98e:	d54c      	bpl.n	800da2a <st_sssa8_ch_fully_connected+0x422>
 800d990:	9b24      	ldr	r3, [sp, #144]	@ 0x90
 800d992:	ea5f 079b 	movs.w	r7, fp, lsr #2
 800d996:	681b      	ldr	r3, [r3, #0]
 800d998:	f000 80c7 	beq.w	800db2a <st_sssa8_ch_fully_connected+0x522>
 800d99c:	eb0a 0687 	add.w	r6, sl, r7, lsl #2
 800d9a0:	980d      	ldr	r0, [sp, #52]	@ 0x34
 800d9a2:	f85a 2b04 	ldr.w	r2, [sl], #4
 800d9a6:	3008      	adds	r0, #8
 800d9a8:	f850 5c08 	ldr.w	r5, [r0, #-8]
 800d9ac:	ea4f 2132 	mov.w	r1, r2, ror #8
 800d9b0:	f850 4c04 	ldr.w	r4, [r0, #-4]
 800d9b4:	fa2f f282 	sxtb16	r2, r2
 800d9b8:	fa2f f181 	sxtb16	r1, r1
 800d9bc:	fb25 3302 	smlad	r3, r5, r2, r3
 800d9c0:	fb24 3301 	smlad	r3, r4, r1, r3
 800d9c4:	45b2      	cmp	sl, r6
 800d9c6:	d1ec      	bne.n	800d9a2 <st_sssa8_ch_fully_connected+0x39a>
 800d9c8:	9a0d      	ldr	r2, [sp, #52]	@ 0x34
 800d9ca:	eb02 02c7 	add.w	r2, r2, r7, lsl #3
 800d9ce:	920d      	str	r2, [sp, #52]	@ 0x34
 800d9d0:	f01b 0203 	ands.w	r2, fp, #3
 800d9d4:	d014      	beq.n	800da00 <st_sssa8_ch_fully_connected+0x3f8>
 800d9d6:	3a01      	subs	r2, #1
 800d9d8:	9c0d      	ldr	r4, [sp, #52]	@ 0x34
 800d9da:	f996 1000 	ldrsb.w	r1, [r6]
 800d9de:	8820      	ldrh	r0, [r4, #0]
 800d9e0:	b292      	uxth	r2, r2
 800d9e2:	fb10 3301 	smlabb	r3, r0, r1, r3
 800d9e6:	b15a      	cbz	r2, 800da00 <st_sssa8_ch_fully_connected+0x3f8>
 800d9e8:	f996 1001 	ldrsb.w	r1, [r6, #1]
 800d9ec:	2a01      	cmp	r2, #1
 800d9ee:	8860      	ldrh	r0, [r4, #2]
 800d9f0:	fb10 3301 	smlabb	r3, r0, r1, r3
 800d9f4:	d004      	beq.n	800da00 <st_sssa8_ch_fully_connected+0x3f8>
 800d9f6:	f996 2002 	ldrsb.w	r2, [r6, #2]
 800d9fa:	88a1      	ldrh	r1, [r4, #4]
 800d9fc:	fb11 3302 	smlabb	r3, r1, r2, r3
 800da00:	9a13      	ldr	r2, [sp, #76]	@ 0x4c
 800da02:	f9b2 2000 	ldrsh.w	r2, [r2]
 800da06:	2a15      	cmp	r2, #21
 800da08:	dd69      	ble.n	800dade <st_sssa8_ch_fully_connected+0x4d6>
 800da0a:	9812      	ldr	r0, [sp, #72]	@ 0x48
 800da0c:	1e95      	subs	r5, r2, #2
 800da0e:	9920      	ldr	r1, [sp, #128]	@ 0x80
 800da10:	3a01      	subs	r2, #1
 800da12:	6804      	ldr	r4, [r0, #0]
 800da14:	2001      	movs	r0, #1
 800da16:	6809      	ldr	r1, [r1, #0]
 800da18:	40a8      	lsls	r0, r5
 800da1a:	fb53 0301 	smmla	r3, r3, r1, r0
 800da1e:	4113      	asrs	r3, r2
 800da20:	4423      	add	r3, r4
 800da22:	f303 0307 	ssat	r3, #8, r3
 800da26:	9a25      	ldr	r2, [sp, #148]	@ 0x94
 800da28:	7013      	strb	r3, [r2, #0]
 800da2a:	2000      	movs	r0, #0
 800da2c:	b017      	add	sp, #92	@ 0x5c
 800da2e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800da32:	42bc      	cmp	r4, r7
 800da34:	f845 3c04 	str.w	r3, [r5, #-4]
 800da38:	f105 0504 	add.w	r5, r5, #4
 800da3c:	f47f ae04 	bne.w	800d648 <st_sssa8_ch_fully_connected+0x40>
 800da40:	e615      	b.n	800d66e <st_sssa8_ch_fully_connected+0x66>
 800da42:	2c00      	cmp	r4, #0
 800da44:	dd1f      	ble.n	800da86 <st_sssa8_ch_fully_connected+0x47e>
 800da46:	9a05      	ldr	r2, [sp, #20]
 800da48:	005b      	lsls	r3, r3, #1
 800da4a:	9906      	ldr	r1, [sp, #24]
 800da4c:	6812      	ldr	r2, [r2, #0]
 800da4e:	6809      	ldr	r1, [r1, #0]
 800da50:	fb53 1302 	smmla	r3, r3, r2, r1
 800da54:	4123      	asrs	r3, r4
 800da56:	f303 0307 	ssat	r3, #8, r3
 800da5a:	b25b      	sxtb	r3, r3
 800da5c:	e769      	b.n	800d932 <st_sssa8_ch_fully_connected+0x32a>
 800da5e:	2800      	cmp	r0, #0
 800da60:	dd21      	ble.n	800daa6 <st_sssa8_ch_fully_connected+0x49e>
 800da62:	462c      	mov	r4, r5
 800da64:	9a05      	ldr	r2, [sp, #20]
 800da66:	004d      	lsls	r5, r1, #1
 800da68:	9906      	ldr	r1, [sp, #24]
 800da6a:	f852 2c04 	ldr.w	r2, [r2, #-4]
 800da6e:	3c02      	subs	r4, #2
 800da70:	f851 1c04 	ldr.w	r1, [r1, #-4]
 800da74:	fb55 1502 	smmla	r5, r5, r2, r1
 800da78:	4105      	asrs	r5, r0
 800da7a:	f305 0207 	ssat	r2, #8, r5
 800da7e:	9904      	ldr	r1, [sp, #16]
 800da80:	b252      	sxtb	r2, r2
 800da82:	1e48      	subs	r0, r1, #1
 800da84:	e73e      	b.n	800d904 <st_sssa8_ch_fully_connected+0x2fc>
 800da86:	f1c4 0401 	rsb	r4, r4, #1
 800da8a:	40a3      	lsls	r3, r4
 800da8c:	f303 031f 	ssat	r3, #32, r3
 800da90:	9a05      	ldr	r2, [sp, #20]
 800da92:	6812      	ldr	r2, [r2, #0]
 800da94:	fb53 f212 	smmulr	r2, r3, r2
 800da98:	9b06      	ldr	r3, [sp, #24]
 800da9a:	681b      	ldr	r3, [r3, #0]
 800da9c:	4413      	add	r3, r2
 800da9e:	f303 0307 	ssat	r3, #8, r3
 800daa2:	b25b      	sxtb	r3, r3
 800daa4:	e745      	b.n	800d932 <st_sssa8_ch_fully_connected+0x32a>
 800daa6:	f1c0 0001 	rsb	r0, r0, #1
 800daaa:	1eac      	subs	r4, r5, #2
 800daac:	4081      	lsls	r1, r0
 800daae:	f301 011f 	ssat	r1, #32, r1
 800dab2:	9a05      	ldr	r2, [sp, #20]
 800dab4:	f852 2c04 	ldr.w	r2, [r2, #-4]
 800dab8:	fb51 f212 	smmulr	r2, r1, r2
 800dabc:	9906      	ldr	r1, [sp, #24]
 800dabe:	f851 1c04 	ldr.w	r1, [r1, #-4]
 800dac2:	440a      	add	r2, r1
 800dac4:	f302 0207 	ssat	r2, #8, r2
 800dac8:	9904      	ldr	r1, [sp, #16]
 800daca:	b252      	sxtb	r2, r2
 800dacc:	1e48      	subs	r0, r1, #1
 800dace:	e719      	b.n	800d904 <st_sssa8_ch_fully_connected+0x2fc>
 800dad0:	46d6      	mov	lr, sl
 800dad2:	e6c2      	b.n	800d85a <st_sssa8_ch_fully_connected+0x252>
 800dad4:	9a0d      	ldr	r2, [sp, #52]	@ 0x34
 800dad6:	f04f 0800 	mov.w	r8, #0
 800dada:	9203      	str	r2, [sp, #12]
 800dadc:	e683      	b.n	800d7e6 <st_sssa8_ch_fully_connected+0x1de>
 800dade:	2a00      	cmp	r2, #0
 800dae0:	dd0f      	ble.n	800db02 <st_sssa8_ch_fully_connected+0x4fa>
 800dae2:	9920      	ldr	r1, [sp, #128]	@ 0x80
 800dae4:	005b      	lsls	r3, r3, #1
 800dae6:	9812      	ldr	r0, [sp, #72]	@ 0x48
 800dae8:	6809      	ldr	r1, [r1, #0]
 800daea:	6800      	ldr	r0, [r0, #0]
 800daec:	fb53 0301 	smmla	r3, r3, r1, r0
 800daf0:	4113      	asrs	r3, r2
 800daf2:	f303 0307 	ssat	r3, #8, r3
 800daf6:	2000      	movs	r0, #0
 800daf8:	9a25      	ldr	r2, [sp, #148]	@ 0x94
 800dafa:	7013      	strb	r3, [r2, #0]
 800dafc:	b017      	add	sp, #92	@ 0x5c
 800dafe:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800db02:	f1c2 0201 	rsb	r2, r2, #1
 800db06:	4093      	lsls	r3, r2
 800db08:	f303 031f 	ssat	r3, #32, r3
 800db0c:	9a20      	ldr	r2, [sp, #128]	@ 0x80
 800db0e:	6812      	ldr	r2, [r2, #0]
 800db10:	fb53 f312 	smmulr	r3, r3, r2
 800db14:	9a12      	ldr	r2, [sp, #72]	@ 0x48
 800db16:	6812      	ldr	r2, [r2, #0]
 800db18:	4413      	add	r3, r2
 800db1a:	f303 0307 	ssat	r3, #8, r3
 800db1e:	2000      	movs	r0, #0
 800db20:	9a25      	ldr	r2, [sp, #148]	@ 0x94
 800db22:	7013      	strb	r3, [r2, #0]
 800db24:	b017      	add	sp, #92	@ 0x5c
 800db26:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800db2a:	4656      	mov	r6, sl
 800db2c:	e750      	b.n	800d9d0 <st_sssa8_ch_fully_connected+0x3c8>
 800db2e:	f8dd 8050 	ldr.w	r8, [sp, #80]	@ 0x50
 800db32:	9212      	str	r2, [sp, #72]	@ 0x48
 800db34:	e59b      	b.n	800d66e <st_sssa8_ch_fully_connected+0x66>
 800db36:	bf00      	nop

0800db38 <st_int8_copy>:
 800db38:	4288      	cmp	r0, r1
 800db3a:	d023      	beq.n	800db84 <st_int8_copy+0x4c>
 800db3c:	b312      	cbz	r2, 800db84 <st_int8_copy+0x4c>
 800db3e:	4288      	cmp	r0, r1
 800db40:	eb00 0302 	add.w	r3, r0, r2
 800db44:	d20b      	bcs.n	800db5e <st_int8_copy+0x26>
 800db46:	4299      	cmp	r1, r3
 800db48:	d209      	bcs.n	800db5e <st_int8_copy+0x26>
 800db4a:	4298      	cmp	r0, r3
 800db4c:	440a      	add	r2, r1
 800db4e:	d219      	bcs.n	800db84 <st_int8_copy+0x4c>
 800db50:	f913 1d01 	ldrsb.w	r1, [r3, #-1]!
 800db54:	4298      	cmp	r0, r3
 800db56:	f802 1d01 	strb.w	r1, [r2, #-1]!
 800db5a:	d1f9      	bne.n	800db50 <st_int8_copy+0x18>
 800db5c:	4770      	bx	lr
 800db5e:	2a03      	cmp	r2, #3
 800db60:	d811      	bhi.n	800db86 <st_int8_copy+0x4e>
 800db62:	f810 3b01 	ldrb.w	r3, [r0], #1
 800db66:	f801 3b01 	strb.w	r3, [r1], #1
 800db6a:	2a01      	cmp	r2, #1
 800db6c:	d00a      	beq.n	800db84 <st_int8_copy+0x4c>
 800db6e:	f810 3b01 	ldrb.w	r3, [r0], #1
 800db72:	f801 3b01 	strb.w	r3, [r1], #1
 800db76:	2a02      	cmp	r2, #2
 800db78:	d004      	beq.n	800db84 <st_int8_copy+0x4c>
 800db7a:	f810 3b01 	ldrb.w	r3, [r0], #1
 800db7e:	f801 3b01 	strb.w	r3, [r1], #1
 800db82:	4770      	bx	lr
 800db84:	4770      	bx	lr
 800db86:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800db8a:	f001 0403 	and.w	r4, r1, #3
 800db8e:	f000 0e03 	and.w	lr, r0, #3
 800db92:	f1c4 0304 	rsb	r3, r4, #4
 800db96:	eba2 0c03 	sub.w	ip, r2, r3
 800db9a:	f810 3b01 	ldrb.w	r3, [r0], #1
 800db9e:	f801 3b01 	strb.w	r3, [r1], #1
 800dba2:	2c03      	cmp	r4, #3
 800dba4:	f1c4 0202 	rsb	r2, r4, #2
 800dba8:	d00e      	beq.n	800dbc8 <st_int8_copy+0x90>
 800dbaa:	f810 3b01 	ldrb.w	r3, [r0], #1
 800dbae:	f801 3b01 	strb.w	r3, [r1], #1
 800dbb2:	2a00      	cmp	r2, #0
 800dbb4:	dd08      	ble.n	800dbc8 <st_int8_copy+0x90>
 800dbb6:	f810 3b01 	ldrb.w	r3, [r0], #1
 800dbba:	f801 3b01 	strb.w	r3, [r1], #1
 800dbbe:	b91c      	cbnz	r4, 800dbc8 <st_int8_copy+0x90>
 800dbc0:	f810 3b01 	ldrb.w	r3, [r0], #1
 800dbc4:	f801 3b01 	strb.w	r3, [r1], #1
 800dbc8:	4574      	cmp	r4, lr
 800dbca:	d02b      	beq.n	800dc24 <st_int8_copy+0xec>
 800dbcc:	ea4f 131c 	mov.w	r3, ip, lsr #4
 800dbd0:	1e5a      	subs	r2, r3, #1
 800dbd2:	b153      	cbz	r3, 800dbea <st_int8_copy+0xb2>
 800dbd4:	f850 3b04 	ldr.w	r3, [r0], #4
 800dbd8:	f850 4b04 	ldr.w	r4, [r0], #4
 800dbdc:	f850 5b04 	ldr.w	r5, [r0], #4
 800dbe0:	f850 6b04 	ldr.w	r6, [r0], #4
 800dbe4:	c178      	stmia	r1!, {r3, r4, r5, r6}
 800dbe6:	3a01      	subs	r2, #1
 800dbe8:	d2f4      	bcs.n	800dbd4 <st_int8_copy+0x9c>
 800dbea:	f01c 0f08 	tst.w	ip, #8
 800dbee:	d004      	beq.n	800dbfa <st_int8_copy+0xc2>
 800dbf0:	f850 3b04 	ldr.w	r3, [r0], #4
 800dbf4:	f850 4b04 	ldr.w	r4, [r0], #4
 800dbf8:	c118      	stmia	r1!, {r3, r4}
 800dbfa:	f01c 0f04 	tst.w	ip, #4
 800dbfe:	d003      	beq.n	800dc08 <st_int8_copy+0xd0>
 800dc00:	f850 3b04 	ldr.w	r3, [r0], #4
 800dc04:	f841 3b04 	str.w	r3, [r1], #4
 800dc08:	f01c 0f02 	tst.w	ip, #2
 800dc0c:	d003      	beq.n	800dc16 <st_int8_copy+0xde>
 800dc0e:	f830 3b02 	ldrh.w	r3, [r0], #2
 800dc12:	f821 3b02 	strh.w	r3, [r1], #2
 800dc16:	f01c 0f01 	tst.w	ip, #1
 800dc1a:	d001      	beq.n	800dc20 <st_int8_copy+0xe8>
 800dc1c:	7803      	ldrb	r3, [r0, #0]
 800dc1e:	700b      	strb	r3, [r1, #0]
 800dc20:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800dc24:	ea4f 139c 	mov.w	r3, ip, lsr #6
 800dc28:	f103 39ff 	add.w	r9, r3, #4294967295
 800dc2c:	b183      	cbz	r3, 800dc50 <st_int8_copy+0x118>
 800dc2e:	4688      	mov	r8, r1
 800dc30:	4686      	mov	lr, r0
 800dc32:	e8be 00ff 	ldmia.w	lr!, {r0, r1, r2, r3, r4, r5, r6, r7}
 800dc36:	e8a8 00ff 	stmia.w	r8!, {r0, r1, r2, r3, r4, r5, r6, r7}
 800dc3a:	e8be 00ff 	ldmia.w	lr!, {r0, r1, r2, r3, r4, r5, r6, r7}
 800dc3e:	e8a8 00ff 	stmia.w	r8!, {r0, r1, r2, r3, r4, r5, r6, r7}
 800dc42:	f109 39ff 	add.w	r9, r9, #4294967295
 800dc46:	4641      	mov	r1, r8
 800dc48:	4670      	mov	r0, lr
 800dc4a:	f1b9 3fff 	cmp.w	r9, #4294967295
 800dc4e:	d1ee      	bne.n	800dc2e <st_int8_copy+0xf6>
 800dc50:	f01c 0f20 	tst.w	ip, #32
 800dc54:	d007      	beq.n	800dc66 <st_int8_copy+0x12e>
 800dc56:	4688      	mov	r8, r1
 800dc58:	4686      	mov	lr, r0
 800dc5a:	e8be 00ff 	ldmia.w	lr!, {r0, r1, r2, r3, r4, r5, r6, r7}
 800dc5e:	e8a8 00ff 	stmia.w	r8!, {r0, r1, r2, r3, r4, r5, r6, r7}
 800dc62:	4641      	mov	r1, r8
 800dc64:	4670      	mov	r0, lr
 800dc66:	f01c 0f10 	tst.w	ip, #16
 800dc6a:	d001      	beq.n	800dc70 <st_int8_copy+0x138>
 800dc6c:	c878      	ldmia	r0!, {r3, r4, r5, r6}
 800dc6e:	c178      	stmia	r1!, {r3, r4, r5, r6}
 800dc70:	f01c 0f08 	tst.w	ip, #8
 800dc74:	d0c1      	beq.n	800dbfa <st_int8_copy+0xc2>
 800dc76:	c818      	ldmia	r0!, {r3, r4}
 800dc78:	c118      	stmia	r1!, {r3, r4}
 800dc7a:	e7be      	b.n	800dbfa <st_int8_copy+0xc2>

0800dc7c <st_int8_reordered_no_shift_zero>:
 800dc7c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800dc7e:	0897      	lsrs	r7, r2, #2
 800dc80:	f9bd 6014 	ldrsh.w	r6, [sp, #20]
 800dc84:	d02d      	beq.n	800dce2 <st_int8_reordered_no_shift_zero+0x66>
 800dc86:	eb00 0587 	add.w	r5, r0, r7, lsl #2
 800dc8a:	468e      	mov	lr, r1
 800dc8c:	f850 cb04 	ldr.w	ip, [r0], #4
 800dc90:	fa2f f49c 	sxtb16	r4, ip, ror #8
 800dc94:	fad4 f403 	ssub16	r4, r4, r3
 800dc98:	fa2f fc8c 	sxtb16	ip, ip
 800dc9c:	fadc fc03 	ssub16	ip, ip, r3
 800dca0:	42a8      	cmp	r0, r5
 800dca2:	f8ce c000 	str.w	ip, [lr]
 800dca6:	f8ce 4004 	str.w	r4, [lr, #4]
 800dcaa:	f10e 0e08 	add.w	lr, lr, #8
 800dcae:	d1ed      	bne.n	800dc8c <st_int8_reordered_no_shift_zero+0x10>
 800dcb0:	eb01 01c7 	add.w	r1, r1, r7, lsl #3
 800dcb4:	f012 0203 	ands.w	r2, r2, #3
 800dcb8:	d012      	beq.n	800dce0 <st_int8_reordered_no_shift_zero+0x64>
 800dcba:	f995 0000 	ldrsb.w	r0, [r5]
 800dcbe:	b273      	sxtb	r3, r6
 800dcc0:	3a01      	subs	r2, #1
 800dcc2:	eba0 0003 	sub.w	r0, r0, r3
 800dcc6:	8008      	strh	r0, [r1, #0]
 800dcc8:	d00a      	beq.n	800dce0 <st_int8_reordered_no_shift_zero+0x64>
 800dcca:	f995 0001 	ldrsb.w	r0, [r5, #1]
 800dcce:	2a01      	cmp	r2, #1
 800dcd0:	eba0 0003 	sub.w	r0, r0, r3
 800dcd4:	8048      	strh	r0, [r1, #2]
 800dcd6:	d003      	beq.n	800dce0 <st_int8_reordered_no_shift_zero+0x64>
 800dcd8:	f995 2002 	ldrsb.w	r2, [r5, #2]
 800dcdc:	1ad3      	subs	r3, r2, r3
 800dcde:	808b      	strh	r3, [r1, #4]
 800dce0:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800dce2:	4605      	mov	r5, r0
 800dce4:	e7e6      	b.n	800dcb4 <st_int8_reordered_no_shift_zero+0x38>
 800dce6:	bf00      	nop

0800dce8 <st_sssa8_ch_nn_mat_mult_kernel_single_opt>:
 800dce8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800dcec:	b093      	sub	sp, #76	@ 0x4c
 800dcee:	f8bd 4074 	ldrh.w	r4, [sp, #116]	@ 0x74
 800dcf2:	920a      	str	r2, [sp, #40]	@ 0x28
 800dcf4:	f8bd 2078 	ldrh.w	r2, [sp, #120]	@ 0x78
 800dcf8:	930f      	str	r3, [sp, #60]	@ 0x3c
 800dcfa:	920d      	str	r2, [sp, #52]	@ 0x34
 800dcfc:	0862      	lsrs	r2, r4, #1
 800dcfe:	f89d 3088 	ldrb.w	r3, [sp, #136]	@ 0x88
 800dd02:	940c      	str	r4, [sp, #48]	@ 0x30
 800dd04:	9104      	str	r1, [sp, #16]
 800dd06:	930e      	str	r3, [sp, #56]	@ 0x38
 800dd08:	920b      	str	r2, [sp, #44]	@ 0x2c
 800dd0a:	2b00      	cmp	r3, #0
 800dd0c:	f000 8184 	beq.w	800e018 <st_sssa8_ch_nn_mat_mult_kernel_single_opt+0x330>
 800dd10:	9b1c      	ldr	r3, [sp, #112]	@ 0x70
 800dd12:	b299      	uxth	r1, r3
 800dd14:	4613      	mov	r3, r2
 800dd16:	2b00      	cmp	r3, #0
 800dd18:	f000 80d7 	beq.w	800deca <st_sssa8_ch_nn_mat_mult_kernel_single_opt+0x1e2>
 800dd1c:	9a0d      	ldr	r2, [sp, #52]	@ 0x34
 800dd1e:	3b01      	subs	r3, #1
 800dd20:	0897      	lsrs	r7, r2, #2
 800dd22:	f002 0203 	and.w	r2, r2, #3
 800dd26:	b29b      	uxth	r3, r3
 800dd28:	9201      	str	r2, [sp, #4]
 800dd2a:	1c4a      	adds	r2, r1, #1
 800dd2c:	0049      	lsls	r1, r1, #1
 800dd2e:	9703      	str	r7, [sp, #12]
 800dd30:	9105      	str	r1, [sp, #20]
 800dd32:	9923      	ldr	r1, [sp, #140]	@ 0x8c
 800dd34:	4411      	add	r1, r2
 800dd36:	9102      	str	r1, [sp, #8]
 800dd38:	990a      	ldr	r1, [sp, #40]	@ 0x28
 800dd3a:	f101 0210 	add.w	r2, r1, #16
 800dd3e:	f101 0c08 	add.w	ip, r1, #8
 800dd42:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
 800dd46:	9a01      	ldr	r2, [sp, #4]
 800dd48:	9306      	str	r3, [sp, #24]
 800dd4a:	9b1f      	ldr	r3, [sp, #124]	@ 0x7c
 800dd4c:	f103 0e04 	add.w	lr, r3, #4
 800dd50:	9b20      	ldr	r3, [sp, #128]	@ 0x80
 800dd52:	f103 0508 	add.w	r5, r3, #8
 800dd56:	9b21      	ldr	r3, [sp, #132]	@ 0x84
 800dd58:	f103 0408 	add.w	r4, r3, #8
 800dd5c:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 800dd5e:	1c5e      	adds	r6, r3, #1
 800dd60:	013b      	lsls	r3, r7, #4
 800dd62:	9307      	str	r3, [sp, #28]
 800dd64:	9b04      	ldr	r3, [sp, #16]
 800dd66:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 800dd6a:	9308      	str	r3, [sp, #32]
 800dd6c:	0093      	lsls	r3, r2, #2
 800dd6e:	9309      	str	r3, [sp, #36]	@ 0x24
 800dd70:	f85c 3c08 	ldr.w	r3, [ip, #-8]
 800dd74:	f85c 2c04 	ldr.w	r2, [ip, #-4]
 800dd78:	9311      	str	r3, [sp, #68]	@ 0x44
 800dd7a:	9903      	ldr	r1, [sp, #12]
 800dd7c:	9b11      	ldr	r3, [sp, #68]	@ 0x44
 800dd7e:	9211      	str	r2, [sp, #68]	@ 0x44
 800dd80:	9a11      	ldr	r2, [sp, #68]	@ 0x44
 800dd82:	2900      	cmp	r1, #0
 800dd84:	f000 8146 	beq.w	800e014 <st_sssa8_ch_nn_mat_mult_kernel_single_opt+0x32c>
 800dd88:	4688      	mov	r8, r1
 800dd8a:	9f04      	ldr	r7, [sp, #16]
 800dd8c:	4601      	mov	r1, r0
 800dd8e:	f8d7 9000 	ldr.w	r9, [r7]
 800dd92:	f8d1 a000 	ldr.w	sl, [r1]
 800dd96:	fb2a 3a09 	smlad	sl, sl, r9, r3
 800dd9a:	684b      	ldr	r3, [r1, #4]
 800dd9c:	fb23 2909 	smlad	r9, r3, r9, r2
 800dda0:	f8d7 b004 	ldr.w	fp, [r7, #4]
 800dda4:	3110      	adds	r1, #16
 800dda6:	f851 3c08 	ldr.w	r3, [r1, #-8]
 800ddaa:	3708      	adds	r7, #8
 800ddac:	f851 2c04 	ldr.w	r2, [r1, #-4]
 800ddb0:	fb23 a30b 	smlad	r3, r3, fp, sl
 800ddb4:	fb22 920b 	smlad	r2, r2, fp, r9
 800ddb8:	f1b8 0801 	subs.w	r8, r8, #1
 800ddbc:	d1e7      	bne.n	800dd8e <st_sssa8_ch_nn_mat_mult_kernel_single_opt+0xa6>
 800ddbe:	9907      	ldr	r1, [sp, #28]
 800ddc0:	4408      	add	r0, r1
 800ddc2:	9908      	ldr	r1, [sp, #32]
 800ddc4:	9f01      	ldr	r7, [sp, #4]
 800ddc6:	b31f      	cbz	r7, 800de10 <st_sssa8_ch_nn_mat_mult_kernel_single_opt+0x128>
 800ddc8:	f9b1 7000 	ldrsh.w	r7, [r1]
 800ddcc:	f8b0 8000 	ldrh.w	r8, [r0]
 800ddd0:	fb17 3308 	smlabb	r3, r7, r8, r3
 800ddd4:	f8b0 8002 	ldrh.w	r8, [r0, #2]
 800ddd8:	fb18 2207 	smlabb	r2, r8, r7, r2
 800dddc:	9f01      	ldr	r7, [sp, #4]
 800ddde:	2f01      	cmp	r7, #1
 800dde0:	d014      	beq.n	800de0c <st_sssa8_ch_nn_mat_mult_kernel_single_opt+0x124>
 800dde2:	f9b1 7002 	ldrsh.w	r7, [r1, #2]
 800dde6:	f8b0 8004 	ldrh.w	r8, [r0, #4]
 800ddea:	fb17 3308 	smlabb	r3, r7, r8, r3
 800ddee:	f8b0 8006 	ldrh.w	r8, [r0, #6]
 800ddf2:	fb18 2207 	smlabb	r2, r8, r7, r2
 800ddf6:	9f01      	ldr	r7, [sp, #4]
 800ddf8:	2f02      	cmp	r7, #2
 800ddfa:	d007      	beq.n	800de0c <st_sssa8_ch_nn_mat_mult_kernel_single_opt+0x124>
 800ddfc:	f9b1 1004 	ldrsh.w	r1, [r1, #4]
 800de00:	8907      	ldrh	r7, [r0, #8]
 800de02:	fb17 3301 	smlabb	r3, r7, r1, r3
 800de06:	8947      	ldrh	r7, [r0, #10]
 800de08:	fb11 2207 	smlabb	r2, r1, r7, r2
 800de0c:	9909      	ldr	r1, [sp, #36]	@ 0x24
 800de0e:	4408      	add	r0, r1
 800de10:	f93e 9c04 	ldrsh.w	r9, [lr, #-4]
 800de14:	f1b9 0f15 	cmp.w	r9, #21
 800de18:	f340 80af 	ble.w	800df7a <st_sssa8_ch_nn_mat_mult_kernel_single_opt+0x292>
 800de1c:	f109 38ff 	add.w	r8, r9, #4294967295
 800de20:	f1a9 0702 	sub.w	r7, r9, #2
 800de24:	2101      	movs	r1, #1
 800de26:	fa01 f707 	lsl.w	r7, r1, r7
 800de2a:	f855 1c08 	ldr.w	r1, [r5, #-8]
 800de2e:	fb53 7101 	smmla	r1, r3, r1, r7
 800de32:	f854 3c08 	ldr.w	r3, [r4, #-8]
 800de36:	fa41 f108 	asr.w	r1, r1, r8
 800de3a:	1f27      	subs	r7, r4, #4
 800de3c:	f1a5 0804 	sub.w	r8, r5, #4
 800de40:	440b      	add	r3, r1
 800de42:	f1ae 0102 	sub.w	r1, lr, #2
 800de46:	f303 0307 	ssat	r3, #8, r3
 800de4a:	b25b      	sxtb	r3, r3
 800de4c:	f806 3c01 	strb.w	r3, [r6, #-1]
 800de50:	f9b1 1000 	ldrsh.w	r1, [r1]
 800de54:	2915      	cmp	r1, #21
 800de56:	f340 80ab 	ble.w	800dfb0 <st_sssa8_ch_nn_mat_mult_kernel_single_opt+0x2c8>
 800de5a:	f8d8 3000 	ldr.w	r3, [r8]
 800de5e:	f04f 0901 	mov.w	r9, #1
 800de62:	f8d7 8000 	ldr.w	r8, [r7]
 800de66:	1e8f      	subs	r7, r1, #2
 800de68:	3901      	subs	r1, #1
 800de6a:	fa09 f707 	lsl.w	r7, r9, r7
 800de6e:	fb52 7303 	smmla	r3, r2, r3, r7
 800de72:	410b      	asrs	r3, r1
 800de74:	4443      	add	r3, r8
 800de76:	f303 0307 	ssat	r3, #8, r3
 800de7a:	b25b      	sxtb	r3, r3
 800de7c:	9a02      	ldr	r2, [sp, #8]
 800de7e:	f10c 0c08 	add.w	ip, ip, #8
 800de82:	f10e 0e04 	add.w	lr, lr, #4
 800de86:	3508      	adds	r5, #8
 800de88:	f802 3c01 	strb.w	r3, [r2, #-1]
 800de8c:	3408      	adds	r4, #8
 800de8e:	9b05      	ldr	r3, [sp, #20]
 800de90:	441a      	add	r2, r3
 800de92:	441e      	add	r6, r3
 800de94:	9b06      	ldr	r3, [sp, #24]
 800de96:	9202      	str	r2, [sp, #8]
 800de98:	459c      	cmp	ip, r3
 800de9a:	f47f af69 	bne.w	800dd70 <st_sssa8_ch_nn_mat_mult_kernel_single_opt+0x88>
 800de9e:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800dea0:	9a23      	ldr	r2, [sp, #140]	@ 0x8c
 800dea2:	9905      	ldr	r1, [sp, #20]
 800dea4:	fb03 2201 	mla	r2, r3, r1, r2
 800dea8:	9223      	str	r2, [sp, #140]	@ 0x8c
 800deaa:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 800deac:	eb02 02c3 	add.w	r2, r2, r3, lsl #3
 800deb0:	920a      	str	r2, [sp, #40]	@ 0x28
 800deb2:	9a1f      	ldr	r2, [sp, #124]	@ 0x7c
 800deb4:	eb02 0283 	add.w	r2, r2, r3, lsl #2
 800deb8:	921f      	str	r2, [sp, #124]	@ 0x7c
 800deba:	9a20      	ldr	r2, [sp, #128]	@ 0x80
 800debc:	eb02 02c3 	add.w	r2, r2, r3, lsl #3
 800dec0:	9220      	str	r2, [sp, #128]	@ 0x80
 800dec2:	9a21      	ldr	r2, [sp, #132]	@ 0x84
 800dec4:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
 800dec8:	9321      	str	r3, [sp, #132]	@ 0x84
 800deca:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 800decc:	07db      	lsls	r3, r3, #31
 800dece:	d546      	bpl.n	800df5e <st_sssa8_ch_nn_mat_mult_kernel_single_opt+0x276>
 800ded0:	9a0d      	ldr	r2, [sp, #52]	@ 0x34
 800ded2:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800ded4:	0896      	lsrs	r6, r2, #2
 800ded6:	681b      	ldr	r3, [r3, #0]
 800ded8:	f000 80cd 	beq.w	800e076 <st_sssa8_ch_nn_mat_mult_kernel_single_opt+0x38e>
 800dedc:	00f7      	lsls	r7, r6, #3
 800dede:	9904      	ldr	r1, [sp, #16]
 800dee0:	eb00 06c6 	add.w	r6, r0, r6, lsl #3
 800dee4:	6804      	ldr	r4, [r0, #0]
 800dee6:	3008      	adds	r0, #8
 800dee8:	f850 2c04 	ldr.w	r2, [r0, #-4]
 800deec:	680d      	ldr	r5, [r1, #0]
 800deee:	fb24 3305 	smlad	r3, r4, r5, r3
 800def2:	684c      	ldr	r4, [r1, #4]
 800def4:	3108      	adds	r1, #8
 800def6:	fb22 3304 	smlad	r3, r2, r4, r3
 800defa:	42b0      	cmp	r0, r6
 800defc:	d1f2      	bne.n	800dee4 <st_sssa8_ch_nn_mat_mult_kernel_single_opt+0x1fc>
 800defe:	9a04      	ldr	r2, [sp, #16]
 800df00:	443a      	add	r2, r7
 800df02:	9204      	str	r2, [sp, #16]
 800df04:	9a0d      	ldr	r2, [sp, #52]	@ 0x34
 800df06:	f012 0203 	ands.w	r2, r2, #3
 800df0a:	d011      	beq.n	800df30 <st_sssa8_ch_nn_mat_mult_kernel_single_opt+0x248>
 800df0c:	3a01      	subs	r2, #1
 800df0e:	9c04      	ldr	r4, [sp, #16]
 800df10:	8831      	ldrh	r1, [r6, #0]
 800df12:	8820      	ldrh	r0, [r4, #0]
 800df14:	b292      	uxth	r2, r2
 800df16:	fb10 3301 	smlabb	r3, r0, r1, r3
 800df1a:	b14a      	cbz	r2, 800df30 <st_sssa8_ch_nn_mat_mult_kernel_single_opt+0x248>
 800df1c:	8860      	ldrh	r0, [r4, #2]
 800df1e:	2a01      	cmp	r2, #1
 800df20:	8871      	ldrh	r1, [r6, #2]
 800df22:	fb10 3301 	smlabb	r3, r0, r1, r3
 800df26:	d003      	beq.n	800df30 <st_sssa8_ch_nn_mat_mult_kernel_single_opt+0x248>
 800df28:	88b1      	ldrh	r1, [r6, #4]
 800df2a:	88a2      	ldrh	r2, [r4, #4]
 800df2c:	fb11 3302 	smlabb	r3, r1, r2, r3
 800df30:	9a1f      	ldr	r2, [sp, #124]	@ 0x7c
 800df32:	f9b2 2000 	ldrsh.w	r2, [r2]
 800df36:	2a15      	cmp	r2, #21
 800df38:	dd79      	ble.n	800e02e <st_sssa8_ch_nn_mat_mult_kernel_single_opt+0x346>
 800df3a:	9821      	ldr	r0, [sp, #132]	@ 0x84
 800df3c:	1e95      	subs	r5, r2, #2
 800df3e:	9920      	ldr	r1, [sp, #128]	@ 0x80
 800df40:	3a01      	subs	r2, #1
 800df42:	6804      	ldr	r4, [r0, #0]
 800df44:	2001      	movs	r0, #1
 800df46:	6809      	ldr	r1, [r1, #0]
 800df48:	40a8      	lsls	r0, r5
 800df4a:	fb53 0301 	smmla	r3, r3, r1, r0
 800df4e:	4113      	asrs	r3, r2
 800df50:	4423      	add	r3, r4
 800df52:	f303 0307 	ssat	r3, #8, r3
 800df56:	9a23      	ldr	r2, [sp, #140]	@ 0x8c
 800df58:	f802 3b01 	strb.w	r3, [r2], #1
 800df5c:	9223      	str	r2, [sp, #140]	@ 0x8c
 800df5e:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800df60:	2b00      	cmp	r3, #0
 800df62:	d05c      	beq.n	800e01e <st_sssa8_ch_nn_mat_mult_kernel_single_opt+0x336>
 800df64:	9a1c      	ldr	r2, [sp, #112]	@ 0x70
 800df66:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 800df68:	fb02 f303 	mul.w	r3, r2, r3
 800df6c:	9a23      	ldr	r2, [sp, #140]	@ 0x8c
 800df6e:	f1c3 0301 	rsb	r3, r3, #1
 800df72:	18d0      	adds	r0, r2, r3
 800df74:	b013      	add	sp, #76	@ 0x4c
 800df76:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800df7a:	f1b9 0f00 	cmp.w	r9, #0
 800df7e:	dd24      	ble.n	800dfca <st_sssa8_ch_nn_mat_mult_kernel_single_opt+0x2e2>
 800df80:	f855 1c08 	ldr.w	r1, [r5, #-8]
 800df84:	005b      	lsls	r3, r3, #1
 800df86:	f854 7c08 	ldr.w	r7, [r4, #-8]
 800df8a:	f1a5 0804 	sub.w	r8, r5, #4
 800df8e:	fb53 7301 	smmla	r3, r3, r1, r7
 800df92:	1f27      	subs	r7, r4, #4
 800df94:	fa43 f309 	asr.w	r3, r3, r9
 800df98:	f1ae 0102 	sub.w	r1, lr, #2
 800df9c:	f303 0307 	ssat	r3, #8, r3
 800dfa0:	b25b      	sxtb	r3, r3
 800dfa2:	f806 3c01 	strb.w	r3, [r6, #-1]
 800dfa6:	f9b1 1000 	ldrsh.w	r1, [r1]
 800dfaa:	2915      	cmp	r1, #21
 800dfac:	f73f af55 	bgt.w	800de5a <st_sssa8_ch_nn_mat_mult_kernel_single_opt+0x172>
 800dfb0:	2900      	cmp	r1, #0
 800dfb2:	dd20      	ble.n	800dff6 <st_sssa8_ch_nn_mat_mult_kernel_single_opt+0x30e>
 800dfb4:	0053      	lsls	r3, r2, #1
 800dfb6:	683f      	ldr	r7, [r7, #0]
 800dfb8:	f8d8 2000 	ldr.w	r2, [r8]
 800dfbc:	fb53 7302 	smmla	r3, r3, r2, r7
 800dfc0:	410b      	asrs	r3, r1
 800dfc2:	f303 0307 	ssat	r3, #8, r3
 800dfc6:	b25b      	sxtb	r3, r3
 800dfc8:	e758      	b.n	800de7c <st_sssa8_ch_nn_mat_mult_kernel_single_opt+0x194>
 800dfca:	f1c9 0701 	rsb	r7, r9, #1
 800dfce:	f1ae 0102 	sub.w	r1, lr, #2
 800dfd2:	fa03 f707 	lsl.w	r7, r3, r7
 800dfd6:	f307 071f 	ssat	r7, #32, r7
 800dfda:	f1a5 0804 	sub.w	r8, r5, #4
 800dfde:	f855 3c08 	ldr.w	r3, [r5, #-8]
 800dfe2:	fb57 f713 	smmulr	r7, r7, r3
 800dfe6:	f854 3c08 	ldr.w	r3, [r4, #-8]
 800dfea:	443b      	add	r3, r7
 800dfec:	1f27      	subs	r7, r4, #4
 800dfee:	f303 0307 	ssat	r3, #8, r3
 800dff2:	b25b      	sxtb	r3, r3
 800dff4:	e72a      	b.n	800de4c <st_sssa8_ch_nn_mat_mult_kernel_single_opt+0x164>
 800dff6:	f1c1 0101 	rsb	r1, r1, #1
 800dffa:	408a      	lsls	r2, r1
 800dffc:	f302 021f 	ssat	r2, #32, r2
 800e000:	f8d8 3000 	ldr.w	r3, [r8]
 800e004:	fb52 f313 	smmulr	r3, r2, r3
 800e008:	683a      	ldr	r2, [r7, #0]
 800e00a:	4413      	add	r3, r2
 800e00c:	f303 0307 	ssat	r3, #8, r3
 800e010:	b25b      	sxtb	r3, r3
 800e012:	e733      	b.n	800de7c <st_sssa8_ch_nn_mat_mult_kernel_single_opt+0x194>
 800e014:	9904      	ldr	r1, [sp, #16]
 800e016:	e6d5      	b.n	800ddc4 <st_sssa8_ch_nn_mat_mult_kernel_single_opt+0xdc>
 800e018:	2101      	movs	r1, #1
 800e01a:	4613      	mov	r3, r2
 800e01c:	e67b      	b.n	800dd16 <st_sssa8_ch_nn_mat_mult_kernel_single_opt+0x2e>
 800e01e:	9a0c      	ldr	r2, [sp, #48]	@ 0x30
 800e020:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800e022:	1a9b      	subs	r3, r3, r2
 800e024:	9a23      	ldr	r2, [sp, #140]	@ 0x8c
 800e026:	18d0      	adds	r0, r2, r3
 800e028:	b013      	add	sp, #76	@ 0x4c
 800e02a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800e02e:	2a00      	cmp	r2, #0
 800e030:	dd0e      	ble.n	800e050 <st_sssa8_ch_nn_mat_mult_kernel_single_opt+0x368>
 800e032:	9920      	ldr	r1, [sp, #128]	@ 0x80
 800e034:	005b      	lsls	r3, r3, #1
 800e036:	9821      	ldr	r0, [sp, #132]	@ 0x84
 800e038:	6809      	ldr	r1, [r1, #0]
 800e03a:	6800      	ldr	r0, [r0, #0]
 800e03c:	fb53 0301 	smmla	r3, r3, r1, r0
 800e040:	4113      	asrs	r3, r2
 800e042:	f303 0307 	ssat	r3, #8, r3
 800e046:	9a23      	ldr	r2, [sp, #140]	@ 0x8c
 800e048:	f802 3b01 	strb.w	r3, [r2], #1
 800e04c:	9223      	str	r2, [sp, #140]	@ 0x8c
 800e04e:	e786      	b.n	800df5e <st_sssa8_ch_nn_mat_mult_kernel_single_opt+0x276>
 800e050:	f1c2 0201 	rsb	r2, r2, #1
 800e054:	4093      	lsls	r3, r2
 800e056:	f303 031f 	ssat	r3, #32, r3
 800e05a:	9a20      	ldr	r2, [sp, #128]	@ 0x80
 800e05c:	6812      	ldr	r2, [r2, #0]
 800e05e:	fb53 f312 	smmulr	r3, r3, r2
 800e062:	9a21      	ldr	r2, [sp, #132]	@ 0x84
 800e064:	6812      	ldr	r2, [r2, #0]
 800e066:	4413      	add	r3, r2
 800e068:	f303 0307 	ssat	r3, #8, r3
 800e06c:	9a23      	ldr	r2, [sp, #140]	@ 0x8c
 800e06e:	f802 3b01 	strb.w	r3, [r2], #1
 800e072:	9223      	str	r2, [sp, #140]	@ 0x8c
 800e074:	e773      	b.n	800df5e <st_sssa8_ch_nn_mat_mult_kernel_single_opt+0x276>
 800e076:	4606      	mov	r6, r0
 800e078:	e744      	b.n	800df04 <st_sssa8_ch_nn_mat_mult_kernel_single_opt+0x21c>
 800e07a:	bf00      	nop

0800e07c <st_sssa8_ch_nn_mat_mult_kernel_opt>:
 800e07c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800e080:	b086      	sub	sp, #24
 800e082:	f89d 7058 	ldrb.w	r7, [sp, #88]	@ 0x58
 800e086:	9100      	str	r1, [sp, #0]
 800e088:	9203      	str	r2, [sp, #12]
 800e08a:	2f00      	cmp	r7, #0
 800e08c:	9305      	str	r3, [sp, #20]
 800e08e:	bf18      	it	ne
 800e090:	2301      	movne	r3, #1
 800e092:	9c10      	ldr	r4, [sp, #64]	@ 0x40
 800e094:	fb04 3303 	mla	r3, r4, r3, r3
 800e098:	9304      	str	r3, [sp, #16]
 800e09a:	9d0f      	ldr	r5, [sp, #60]	@ 0x3c
 800e09c:	bf14      	ite	ne
 800e09e:	462f      	movne	r7, r5
 800e0a0:	2701      	moveq	r7, #1
 800e0a2:	9701      	str	r7, [sp, #4]
 800e0a4:	f8bd 3044 	ldrh.w	r3, [sp, #68]	@ 0x44
 800e0a8:	085b      	lsrs	r3, r3, #1
 800e0aa:	f000 809f 	beq.w	800e1ec <st_sssa8_ch_nn_mat_mult_kernel_opt+0x170>
 800e0ae:	f8dd b050 	ldr.w	fp, [sp, #80]	@ 0x50
 800e0b2:	9a13      	ldr	r2, [sp, #76]	@ 0x4c
 800e0b4:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 800e0b8:	9302      	str	r3, [sp, #8]
 800e0ba:	f8dd e048 	ldr.w	lr, [sp, #72]	@ 0x48
 800e0be:	9f03      	ldr	r7, [sp, #12]
 800e0c0:	ea5f 089e 	movs.w	r8, lr, lsr #2
 800e0c4:	f8dd c000 	ldr.w	ip, [sp]
 800e0c8:	f857 6b04 	ldr.w	r6, [r7], #4
 800e0cc:	f857 3b04 	ldr.w	r3, [r7], #4
 800e0d0:	9703      	str	r7, [sp, #12]
 800e0d2:	461a      	mov	r2, r3
 800e0d4:	4631      	mov	r1, r6
 800e0d6:	d022      	beq.n	800e11e <st_sssa8_ch_nn_mat_mult_kernel_opt+0xa2>
 800e0d8:	f85c 701e 	ldr.w	r7, [ip, lr, lsl #1]
 800e0dc:	f85c 9b04 	ldr.w	r9, [ip], #4
 800e0e0:	f850 ab04 	ldr.w	sl, [r0], #4
 800e0e4:	fb2a 6609 	smlad	r6, sl, r9, r6
 800e0e8:	f850 5b04 	ldr.w	r5, [r0], #4
 800e0ec:	fb2a 1107 	smlad	r1, sl, r7, r1
 800e0f0:	f850 ab04 	ldr.w	sl, [r0], #4
 800e0f4:	fb25 2207 	smlad	r2, r5, r7, r2
 800e0f8:	f85c 701e 	ldr.w	r7, [ip, lr, lsl #1]
 800e0fc:	fb25 3309 	smlad	r3, r5, r9, r3
 800e100:	f85c 9b04 	ldr.w	r9, [ip], #4
 800e104:	fb2a 6609 	smlad	r6, sl, r9, r6
 800e108:	fb2a 1107 	smlad	r1, sl, r7, r1
 800e10c:	f850 5b04 	ldr.w	r5, [r0], #4
 800e110:	fb25 3309 	smlad	r3, r5, r9, r3
 800e114:	f1b8 0801 	subs.w	r8, r8, #1
 800e118:	fb25 2207 	smlad	r2, r5, r7, r2
 800e11c:	d1dc      	bne.n	800e0d8 <st_sssa8_ch_nn_mat_mult_kernel_opt+0x5c>
 800e11e:	f00e 0703 	and.w	r7, lr, #3
 800e122:	b18f      	cbz	r7, 800e148 <st_sssa8_ch_nn_mat_mult_kernel_opt+0xcc>
 800e124:	f93c 801e 	ldrsh.w	r8, [ip, lr, lsl #1]
 800e128:	f93c ab02 	ldrsh.w	sl, [ip], #2
 800e12c:	f930 5b02 	ldrsh.w	r5, [r0], #2
 800e130:	fb0a 6605 	mla	r6, sl, r5, r6
 800e134:	f930 9b02 	ldrsh.w	r9, [r0], #2
 800e138:	fb09 330a 	mla	r3, r9, sl, r3
 800e13c:	fb08 1105 	mla	r1, r8, r5, r1
 800e140:	3f01      	subs	r7, #1
 800e142:	fb09 2208 	mla	r2, r9, r8, r2
 800e146:	dced      	bgt.n	800e124 <st_sssa8_ch_nn_mat_mult_kernel_opt+0xa8>
 800e148:	f8dd a04c 	ldr.w	sl, [sp, #76]	@ 0x4c
 800e14c:	9f15      	ldr	r7, [sp, #84]	@ 0x54
 800e14e:	f93a 4b02 	ldrsh.w	r4, [sl], #2
 800e152:	f857 cb04 	ldr.w	ip, [r7], #4
 800e156:	f85b 5b04 	ldr.w	r5, [fp], #4
 800e15a:	f1c4 0915 	rsb	r9, r4, #21
 800e15e:	ea99 0904 	eors.w	r9, r9, r4
 800e162:	f340 80c8 	ble.w	800e2f6 <st_sssa8_ch_nn_mat_mult_kernel_opt+0x27a>
 800e166:	ea4f 0646 	mov.w	r6, r6, lsl #1
 800e16a:	ea4f 0141 	mov.w	r1, r1, lsl #1
 800e16e:	fb56 c605 	smmla	r6, r6, r5, ip
 800e172:	fb51 c105 	smmla	r1, r1, r5, ip
 800e176:	fa46 f604 	asr.w	r6, r6, r4
 800e17a:	fa41 f104 	asr.w	r1, r1, r4
 800e17e:	f93a 4b02 	ldrsh.w	r4, [sl], #2
 800e182:	f857 cb04 	ldr.w	ip, [r7], #4
 800e186:	f85b 5b04 	ldr.w	r5, [fp], #4
 800e18a:	f1c4 0915 	rsb	r9, r4, #21
 800e18e:	ea99 0904 	eors.w	r9, r9, r4
 800e192:	f340 8099 	ble.w	800e2c8 <st_sssa8_ch_nn_mat_mult_kernel_opt+0x24c>
 800e196:	ea4f 0343 	mov.w	r3, r3, lsl #1
 800e19a:	ea4f 0242 	mov.w	r2, r2, lsl #1
 800e19e:	fb53 c305 	smmla	r3, r3, r5, ip
 800e1a2:	fb52 c205 	smmla	r2, r2, r5, ip
 800e1a6:	fa43 f304 	asr.w	r3, r3, r4
 800e1aa:	fa42 f204 	asr.w	r2, r2, r4
 800e1ae:	f306 0607 	ssat	r6, #8, r6
 800e1b2:	f8dd 9004 	ldr.w	r9, [sp, #4]
 800e1b6:	9c17      	ldr	r4, [sp, #92]	@ 0x5c
 800e1b8:	f8dd 8010 	ldr.w	r8, [sp, #16]
 800e1bc:	7026      	strb	r6, [r4, #0]
 800e1be:	44a0      	add	r8, r4
 800e1c0:	f301 0107 	ssat	r1, #8, r1
 800e1c4:	f888 1000 	strb.w	r1, [r8]
 800e1c8:	f303 0307 	ssat	r3, #8, r3
 800e1cc:	f804 3009 	strb.w	r3, [r4, r9]
 800e1d0:	f302 0207 	ssat	r2, #8, r2
 800e1d4:	f808 2009 	strb.w	r2, [r8, r9]
 800e1d8:	eb04 0249 	add.w	r2, r4, r9, lsl #1
 800e1dc:	9217      	str	r2, [sp, #92]	@ 0x5c
 800e1de:	f8cd a04c 	str.w	sl, [sp, #76]	@ 0x4c
 800e1e2:	9c02      	ldr	r4, [sp, #8]
 800e1e4:	9715      	str	r7, [sp, #84]	@ 0x54
 800e1e6:	45a2      	cmp	sl, r4
 800e1e8:	f47f af67 	bne.w	800e0ba <st_sssa8_ch_nn_mat_mult_kernel_opt+0x3e>
 800e1ec:	9b11      	ldr	r3, [sp, #68]	@ 0x44
 800e1ee:	f013 0301 	ands.w	r3, r3, #1
 800e1f2:	d054      	beq.n	800e29e <st_sssa8_ch_nn_mat_mult_kernel_opt+0x222>
 800e1f4:	f8bd e048 	ldrh.w	lr, [sp, #72]	@ 0x48
 800e1f8:	9b03      	ldr	r3, [sp, #12]
 800e1fa:	f8dd c000 	ldr.w	ip, [sp]
 800e1fe:	6819      	ldr	r1, [r3, #0]
 800e200:	ea5f 079e 	movs.w	r7, lr, lsr #2
 800e204:	eb0c 044e 	add.w	r4, ip, lr, lsl #1
 800e208:	460e      	mov	r6, r1
 800e20a:	d015      	beq.n	800e238 <st_sssa8_ch_nn_mat_mult_kernel_opt+0x1bc>
 800e20c:	f85c 501e 	ldr.w	r5, [ip, lr, lsl #1]
 800e210:	f85c 8b04 	ldr.w	r8, [ip], #4
 800e214:	f850 ab04 	ldr.w	sl, [r0], #4
 800e218:	f850 3b04 	ldr.w	r3, [r0], #4
 800e21c:	fb2a 6608 	smlad	r6, sl, r8, r6
 800e220:	fb2a 1105 	smlad	r1, sl, r5, r1
 800e224:	f85c a01e 	ldr.w	sl, [ip, lr, lsl #1]
 800e228:	f85c 8b04 	ldr.w	r8, [ip], #4
 800e22c:	fb23 6608 	smlad	r6, r3, r8, r6
 800e230:	fb23 110a 	smlad	r1, r3, sl, r1
 800e234:	3f01      	subs	r7, #1
 800e236:	d1e9      	bne.n	800e20c <st_sssa8_ch_nn_mat_mult_kernel_opt+0x190>
 800e238:	f01e 0703 	ands.w	r7, lr, #3
 800e23c:	d00b      	beq.n	800e256 <st_sssa8_ch_nn_mat_mult_kernel_opt+0x1da>
 800e23e:	f83c 301e 	ldrh.w	r3, [ip, lr, lsl #1]
 800e242:	f83c 9b02 	ldrh.w	r9, [ip], #2
 800e246:	f930 ab02 	ldrsh.w	sl, [r0], #2
 800e24a:	fb19 660a 	smlabb	r6, r9, sl, r6
 800e24e:	3f01      	subs	r7, #1
 800e250:	fb13 110a 	smlabb	r1, r3, sl, r1
 800e254:	dcf3      	bgt.n	800e23e <st_sssa8_ch_nn_mat_mult_kernel_opt+0x1c2>
 800e256:	f8dd a04c 	ldr.w	sl, [sp, #76]	@ 0x4c
 800e25a:	9f15      	ldr	r7, [sp, #84]	@ 0x54
 800e25c:	f9ba 4000 	ldrsh.w	r4, [sl]
 800e260:	f8d7 c000 	ldr.w	ip, [r7]
 800e264:	f8db 5000 	ldr.w	r5, [fp]
 800e268:	f1c4 0915 	rsb	r9, r4, #21
 800e26c:	ea99 0904 	eors.w	r9, r9, r4
 800e270:	dd58      	ble.n	800e324 <st_sssa8_ch_nn_mat_mult_kernel_opt+0x2a8>
 800e272:	ea4f 0646 	mov.w	r6, r6, lsl #1
 800e276:	ea4f 0141 	mov.w	r1, r1, lsl #1
 800e27a:	fb56 c605 	smmla	r6, r6, r5, ip
 800e27e:	fb51 c105 	smmla	r1, r1, r5, ip
 800e282:	fa46 f604 	asr.w	r6, r6, r4
 800e286:	fa41 f104 	asr.w	r1, r1, r4
 800e28a:	f306 0607 	ssat	r6, #8, r6
 800e28e:	9a17      	ldr	r2, [sp, #92]	@ 0x5c
 800e290:	9c04      	ldr	r4, [sp, #16]
 800e292:	7016      	strb	r6, [r2, #0]
 800e294:	f301 0107 	ssat	r1, #8, r1
 800e298:	5511      	strb	r1, [r2, r4]
 800e29a:	9b01      	ldr	r3, [sp, #4]
 800e29c:	441a      	add	r2, r3
 800e29e:	9911      	ldr	r1, [sp, #68]	@ 0x44
 800e2a0:	9b16      	ldr	r3, [sp, #88]	@ 0x58
 800e2a2:	9c10      	ldr	r4, [sp, #64]	@ 0x40
 800e2a4:	b133      	cbz	r3, 800e2b4 <st_sssa8_ch_nn_mat_mult_kernel_opt+0x238>
 800e2a6:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800e2a8:	f104 0002 	add.w	r0, r4, #2
 800e2ac:	fb03 0011 	mls	r0, r3, r1, r0
 800e2b0:	4410      	add	r0, r2
 800e2b2:	e006      	b.n	800e2c2 <st_sssa8_ch_nn_mat_mult_kernel_opt+0x246>
 800e2b4:	eba2 0001 	sub.w	r0, r2, r1
 800e2b8:	9a05      	ldr	r2, [sp, #20]
 800e2ba:	f104 0402 	add.w	r4, r4, #2
 800e2be:	fb02 0004 	mla	r0, r2, r4, r0
 800e2c2:	b006      	add	sp, #24
 800e2c4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800e2c8:	2c00      	cmp	r4, #0
 800e2ca:	dd42      	ble.n	800e352 <st_sssa8_ch_nn_mat_mult_kernel_opt+0x2d6>
 800e2cc:	f04f 0901 	mov.w	r9, #1
 800e2d0:	fa09 f904 	lsl.w	r9, r9, r4
 800e2d4:	ea4f 09a9 	mov.w	r9, r9, asr #2
 800e2d8:	fb53 9305 	smmla	r3, r3, r5, r9
 800e2dc:	ea4f 0343 	mov.w	r3, r3, lsl #1
 800e2e0:	fa43 f304 	asr.w	r3, r3, r4
 800e2e4:	4463      	add	r3, ip
 800e2e6:	fb52 9205 	smmla	r2, r2, r5, r9
 800e2ea:	ea4f 0242 	mov.w	r2, r2, lsl #1
 800e2ee:	fa42 f204 	asr.w	r2, r2, r4
 800e2f2:	4462      	add	r2, ip
 800e2f4:	e75b      	b.n	800e1ae <st_sssa8_ch_nn_mat_mult_kernel_opt+0x132>
 800e2f6:	2c00      	cmp	r4, #0
 800e2f8:	dd3c      	ble.n	800e374 <st_sssa8_ch_nn_mat_mult_kernel_opt+0x2f8>
 800e2fa:	f04f 0901 	mov.w	r9, #1
 800e2fe:	fa09 f904 	lsl.w	r9, r9, r4
 800e302:	ea4f 09a9 	mov.w	r9, r9, asr #2
 800e306:	fb56 9605 	smmla	r6, r6, r5, r9
 800e30a:	ea4f 0646 	mov.w	r6, r6, lsl #1
 800e30e:	fa46 f604 	asr.w	r6, r6, r4
 800e312:	4466      	add	r6, ip
 800e314:	fb51 9105 	smmla	r1, r1, r5, r9
 800e318:	ea4f 0141 	mov.w	r1, r1, lsl #1
 800e31c:	fa41 f104 	asr.w	r1, r1, r4
 800e320:	4461      	add	r1, ip
 800e322:	e72c      	b.n	800e17e <st_sssa8_ch_nn_mat_mult_kernel_opt+0x102>
 800e324:	2c00      	cmp	r4, #0
 800e326:	dd36      	ble.n	800e396 <st_sssa8_ch_nn_mat_mult_kernel_opt+0x31a>
 800e328:	f04f 0901 	mov.w	r9, #1
 800e32c:	fa09 f904 	lsl.w	r9, r9, r4
 800e330:	ea4f 09a9 	mov.w	r9, r9, asr #2
 800e334:	fb56 9605 	smmla	r6, r6, r5, r9
 800e338:	ea4f 0646 	mov.w	r6, r6, lsl #1
 800e33c:	fa46 f604 	asr.w	r6, r6, r4
 800e340:	4466      	add	r6, ip
 800e342:	fb51 9105 	smmla	r1, r1, r5, r9
 800e346:	ea4f 0141 	mov.w	r1, r1, lsl #1
 800e34a:	fa41 f104 	asr.w	r1, r1, r4
 800e34e:	4461      	add	r1, ip
 800e350:	e79b      	b.n	800e28a <st_sssa8_ch_nn_mat_mult_kernel_opt+0x20e>
 800e352:	f1c4 0901 	rsb	r9, r4, #1
 800e356:	fa03 f309 	lsl.w	r3, r3, r9
 800e35a:	f303 031f 	ssat	r3, #32, r3
 800e35e:	fb53 f315 	smmulr	r3, r3, r5
 800e362:	fa02 f209 	lsl.w	r2, r2, r9
 800e366:	f302 021f 	ssat	r2, #32, r2
 800e36a:	fb52 f215 	smmulr	r2, r2, r5
 800e36e:	4463      	add	r3, ip
 800e370:	4462      	add	r2, ip
 800e372:	e71c      	b.n	800e1ae <st_sssa8_ch_nn_mat_mult_kernel_opt+0x132>
 800e374:	f1c4 0901 	rsb	r9, r4, #1
 800e378:	fa06 f609 	lsl.w	r6, r6, r9
 800e37c:	f306 061f 	ssat	r6, #32, r6
 800e380:	fb56 f615 	smmulr	r6, r6, r5
 800e384:	fa01 f109 	lsl.w	r1, r1, r9
 800e388:	f301 011f 	ssat	r1, #32, r1
 800e38c:	fb51 f115 	smmulr	r1, r1, r5
 800e390:	4466      	add	r6, ip
 800e392:	4461      	add	r1, ip
 800e394:	e6f3      	b.n	800e17e <st_sssa8_ch_nn_mat_mult_kernel_opt+0x102>
 800e396:	f1c4 0901 	rsb	r9, r4, #1
 800e39a:	fa06 f609 	lsl.w	r6, r6, r9
 800e39e:	f306 061f 	ssat	r6, #32, r6
 800e3a2:	fb56 f615 	smmulr	r6, r6, r5
 800e3a6:	fa01 f109 	lsl.w	r1, r1, r9
 800e3aa:	f301 011f 	ssat	r1, #32, r1
 800e3ae:	fb51 f115 	smmulr	r1, r1, r5
 800e3b2:	4466      	add	r6, ip
 800e3b4:	4461      	add	r1, ip
 800e3b6:	e768      	b.n	800e28a <st_sssa8_ch_nn_mat_mult_kernel_opt+0x20e>

0800e3b8 <ai_array_to_buffer_fmt>:
 800e3b8:	f3c0 4343 	ubfx	r3, r0, #17, #4
 800e3bc:	2b02      	cmp	r3, #2
 800e3be:	d055      	beq.n	800e46c <ai_array_to_buffer_fmt+0xb4>
 800e3c0:	f020 437e 	bic.w	r3, r0, #4261412864	@ 0xfe000000
 800e3c4:	4a2c      	ldr	r2, [pc, #176]	@ (800e478 <ai_array_to_buffer_fmt+0xc0>)
 800e3c6:	4293      	cmp	r3, r2
 800e3c8:	d010      	beq.n	800e3ec <ai_array_to_buffer_fmt+0x34>
 800e3ca:	dc21      	bgt.n	800e410 <ai_array_to_buffer_fmt+0x58>
 800e3cc:	4a2b      	ldr	r2, [pc, #172]	@ (800e47c <ai_array_to_buffer_fmt+0xc4>)
 800e3ce:	4293      	cmp	r3, r2
 800e3d0:	d00c      	beq.n	800e3ec <ai_array_to_buffer_fmt+0x34>
 800e3d2:	dd0f      	ble.n	800e3f4 <ai_array_to_buffer_fmt+0x3c>
 800e3d4:	4a2a      	ldr	r2, [pc, #168]	@ (800e480 <ai_array_to_buffer_fmt+0xc8>)
 800e3d6:	4293      	cmp	r3, r2
 800e3d8:	d008      	beq.n	800e3ec <ai_array_to_buffer_fmt+0x34>
 800e3da:	f502 32fa 	add.w	r2, r2, #128000	@ 0x1f400
 800e3de:	4293      	cmp	r3, r2
 800e3e0:	d004      	beq.n	800e3ec <ai_array_to_buffer_fmt+0x34>
 800e3e2:	4a28      	ldr	r2, [pc, #160]	@ (800e484 <ai_array_to_buffer_fmt+0xcc>)
 800e3e4:	4293      	cmp	r3, r2
 800e3e6:	bf0c      	ite	eq
 800e3e8:	4613      	moveq	r3, r2
 800e3ea:	2340      	movne	r3, #64	@ 0x40
 800e3ec:	f000 40d0 	and.w	r0, r0, #1744830464	@ 0x68000000
 800e3f0:	4318      	orrs	r0, r3
 800e3f2:	4770      	bx	lr
 800e3f4:	f5a2 6280 	sub.w	r2, r2, #1024	@ 0x400
 800e3f8:	4293      	cmp	r3, r2
 800e3fa:	d0f7      	beq.n	800e3ec <ai_array_to_buffer_fmt+0x34>
 800e3fc:	dd2c      	ble.n	800e458 <ai_array_to_buffer_fmt+0xa0>
 800e3fe:	4a22      	ldr	r2, [pc, #136]	@ (800e488 <ai_array_to_buffer_fmt+0xd0>)
 800e400:	f000 40d0 	and.w	r0, r0, #1744830464	@ 0x68000000
 800e404:	4293      	cmp	r3, r2
 800e406:	bf0c      	ite	eq
 800e408:	4613      	moveq	r3, r2
 800e40a:	2340      	movne	r3, #64	@ 0x40
 800e40c:	4318      	orrs	r0, r3
 800e40e:	4770      	bx	lr
 800e410:	4a1e      	ldr	r2, [pc, #120]	@ (800e48c <ai_array_to_buffer_fmt+0xd4>)
 800e412:	4293      	cmp	r3, r2
 800e414:	d0ea      	beq.n	800e3ec <ai_array_to_buffer_fmt+0x34>
 800e416:	dd10      	ble.n	800e43a <ai_array_to_buffer_fmt+0x82>
 800e418:	4a1d      	ldr	r2, [pc, #116]	@ (800e490 <ai_array_to_buffer_fmt+0xd8>)
 800e41a:	4293      	cmp	r3, r2
 800e41c:	d0e6      	beq.n	800e3ec <ai_array_to_buffer_fmt+0x34>
 800e41e:	f202 72f1 	addw	r2, r2, #2033	@ 0x7f1
 800e422:	4293      	cmp	r3, r2
 800e424:	d0e2      	beq.n	800e3ec <ai_array_to_buffer_fmt+0x34>
 800e426:	f5a2 6200 	sub.w	r2, r2, #2048	@ 0x800
 800e42a:	f000 40d0 	and.w	r0, r0, #1744830464	@ 0x68000000
 800e42e:	4293      	cmp	r3, r2
 800e430:	bf0c      	ite	eq
 800e432:	4613      	moveq	r3, r2
 800e434:	2340      	movne	r3, #64	@ 0x40
 800e436:	4318      	orrs	r0, r3
 800e438:	4770      	bx	lr
 800e43a:	f2a2 3287 	subw	r2, r2, #903	@ 0x387
 800e43e:	4293      	cmp	r3, r2
 800e440:	d0d4      	beq.n	800e3ec <ai_array_to_buffer_fmt+0x34>
 800e442:	f502 7260 	add.w	r2, r2, #896	@ 0x380
 800e446:	4293      	cmp	r3, r2
 800e448:	d0d0      	beq.n	800e3ec <ai_array_to_buffer_fmt+0x34>
 800e44a:	f5a2 6280 	sub.w	r2, r2, #1024	@ 0x400
 800e44e:	4293      	cmp	r3, r2
 800e450:	bf0c      	ite	eq
 800e452:	4613      	moveq	r3, r2
 800e454:	2340      	movne	r3, #64	@ 0x40
 800e456:	e7c9      	b.n	800e3ec <ai_array_to_buffer_fmt+0x34>
 800e458:	f5a2 6280 	sub.w	r2, r2, #1024	@ 0x400
 800e45c:	4293      	cmp	r3, r2
 800e45e:	d0c5      	beq.n	800e3ec <ai_array_to_buffer_fmt+0x34>
 800e460:	3280      	adds	r2, #128	@ 0x80
 800e462:	4293      	cmp	r3, r2
 800e464:	bf0c      	ite	eq
 800e466:	4613      	moveq	r3, r2
 800e468:	2340      	movne	r3, #64	@ 0x40
 800e46a:	e7bf      	b.n	800e3ec <ai_array_to_buffer_fmt+0x34>
 800e46c:	4b09      	ldr	r3, [pc, #36]	@ (800e494 <ai_array_to_buffer_fmt+0xdc>)
 800e46e:	4003      	ands	r3, r0
 800e470:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 800e474:	e7ba      	b.n	800e3ec <ai_array_to_buffer_fmt+0x34>
 800e476:	bf00      	nop
 800e478:	00821040 	.word	0x00821040
 800e47c:	00040840 	.word	0x00040840
 800e480:	00041040 	.word	0x00041040
 800e484:	0004084f 	.word	0x0004084f
 800e488:	00040447 	.word	0x00040447
 800e48c:	00840447 	.word	0x00840447
 800e490:	0084084f 	.word	0x0084084f
 800e494:	00803fff 	.word	0x00803fff

0800e498 <ai_array_get_byte_size>:
 800e498:	b321      	cbz	r1, 800e4e4 <ai_array_get_byte_size+0x4c>
 800e49a:	f3c0 13c6 	ubfx	r3, r0, #7, #7
 800e49e:	f46f 7288 	mvn.w	r2, #272	@ 0x110
 800e4a2:	f3c0 5c41 	ubfx	ip, r0, #21, #2
 800e4a6:	fb03 f101 	mul.w	r1, r3, r1
 800e4aa:	b500      	push	{lr}
 800e4ac:	f3c0 4e43 	ubfx	lr, r0, #17, #4
 800e4b0:	3107      	adds	r1, #7
 800e4b2:	11c0      	asrs	r0, r0, #7
 800e4b4:	fa42 f20e 	asr.w	r2, r2, lr
 800e4b8:	f021 0107 	bic.w	r1, r1, #7
 800e4bc:	07d2      	lsls	r2, r2, #31
 800e4be:	fa21 f10c 	lsr.w	r1, r1, ip
 800e4c2:	d505      	bpl.n	800e4d0 <ai_array_get_byte_size+0x38>
 800e4c4:	2300      	movs	r3, #0
 800e4c6:	3107      	adds	r1, #7
 800e4c8:	4419      	add	r1, r3
 800e4ca:	08c8      	lsrs	r0, r1, #3
 800e4cc:	f85d fb04 	ldr.w	pc, [sp], #4
 800e4d0:	f000 007f 	and.w	r0, r0, #127	@ 0x7f
 800e4d4:	3107      	adds	r1, #7
 800e4d6:	fa40 f00c 	asr.w	r0, r0, ip
 800e4da:	4083      	lsls	r3, r0
 800e4dc:	4419      	add	r1, r3
 800e4de:	08c8      	lsrs	r0, r1, #3
 800e4e0:	f85d fb04 	ldr.w	pc, [sp], #4
 800e4e4:	4608      	mov	r0, r1
 800e4e6:	4770      	bx	lr

0800e4e8 <ai_array_get_data_byte_size>:
 800e4e8:	b169      	cbz	r1, 800e506 <ai_array_get_data_byte_size+0x1e>
 800e4ea:	f3c0 13c6 	ubfx	r3, r0, #7, #7
 800e4ee:	f3c0 5041 	ubfx	r0, r0, #21, #2
 800e4f2:	fb03 f101 	mul.w	r1, r3, r1
 800e4f6:	1dcb      	adds	r3, r1, #7
 800e4f8:	f023 0307 	bic.w	r3, r3, #7
 800e4fc:	fa23 f000 	lsr.w	r0, r3, r0
 800e500:	3007      	adds	r0, #7
 800e502:	08c0      	lsrs	r0, r0, #3
 800e504:	4770      	bx	lr
 800e506:	4608      	mov	r0, r1
 800e508:	4770      	bx	lr
 800e50a:	bf00      	nop

0800e50c <ai_version_get>:
 800e50c:	0212      	lsls	r2, r2, #8
 800e50e:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 800e512:	ea42 6000 	orr.w	r0, r2, r0, lsl #24
 800e516:	4770      	bx	lr

0800e518 <get_tensor_byte_size>:
 800e518:	b430      	push	{r4, r5}
 800e51a:	6985      	ldr	r5, [r0, #24]
 800e51c:	68c4      	ldr	r4, [r0, #12]
 800e51e:	6941      	ldr	r1, [r0, #20]
 800e520:	4b06      	ldr	r3, [pc, #24]	@ (800e53c <get_tensor_byte_size+0x24>)
 800e522:	6828      	ldr	r0, [r5, #0]
 800e524:	4a06      	ldr	r2, [pc, #24]	@ (800e540 <get_tensor_byte_size+0x28>)
 800e526:	4003      	ands	r3, r0
 800e528:	68c9      	ldr	r1, [r1, #12]
 800e52a:	68e0      	ldr	r0, [r4, #12]
 800e52c:	4293      	cmp	r3, r2
 800e52e:	fb01 f000 	mul.w	r0, r1, r0
 800e532:	d101      	bne.n	800e538 <get_tensor_byte_size+0x20>
 800e534:	3007      	adds	r0, #7
 800e536:	08c0      	lsrs	r0, r0, #3
 800e538:	bc30      	pop	{r4, r5}
 800e53a:	4770      	bx	lr
 800e53c:	017fffff 	.word	0x017fffff
 800e540:	000400c0 	.word	0x000400c0

0800e544 <core_tensor_clone>:
 800e544:	680b      	ldr	r3, [r1, #0]
 800e546:	6882      	ldr	r2, [r0, #8]
 800e548:	6003      	str	r3, [r0, #0]
 800e54a:	684b      	ldr	r3, [r1, #4]
 800e54c:	6043      	str	r3, [r0, #4]
 800e54e:	698b      	ldr	r3, [r1, #24]
 800e550:	6183      	str	r3, [r0, #24]
 800e552:	688b      	ldr	r3, [r1, #8]
 800e554:	f3c3 2317 	ubfx	r3, r3, #8, #24
 800e558:	f363 221f 	bfi	r2, r3, #8, #24
 800e55c:	b410      	push	{r4}
 800e55e:	6082      	str	r2, [r0, #8]
 800e560:	b15b      	cbz	r3, 800e57a <core_tensor_clone+0x36>
 800e562:	2300      	movs	r3, #0
 800e564:	68cc      	ldr	r4, [r1, #12]
 800e566:	68c2      	ldr	r2, [r0, #12]
 800e568:	f854 4023 	ldr.w	r4, [r4, r3, lsl #2]
 800e56c:	f842 4023 	str.w	r4, [r2, r3, lsl #2]
 800e570:	3301      	adds	r3, #1
 800e572:	6882      	ldr	r2, [r0, #8]
 800e574:	ebb3 2f12 	cmp.w	r3, r2, lsr #8
 800e578:	d3f4      	bcc.n	800e564 <core_tensor_clone+0x20>
 800e57a:	690b      	ldr	r3, [r1, #16]
 800e57c:	6902      	ldr	r2, [r0, #16]
 800e57e:	f3c3 2317 	ubfx	r3, r3, #8, #24
 800e582:	f363 221f 	bfi	r2, r3, #8, #24
 800e586:	6102      	str	r2, [r0, #16]
 800e588:	b15b      	cbz	r3, 800e5a2 <core_tensor_clone+0x5e>
 800e58a:	2300      	movs	r3, #0
 800e58c:	694c      	ldr	r4, [r1, #20]
 800e58e:	6942      	ldr	r2, [r0, #20]
 800e590:	f854 4023 	ldr.w	r4, [r4, r3, lsl #2]
 800e594:	f842 4023 	str.w	r4, [r2, r3, lsl #2]
 800e598:	3301      	adds	r3, #1
 800e59a:	6902      	ldr	r2, [r0, #16]
 800e59c:	ebb3 2f12 	cmp.w	r3, r2, lsr #8
 800e5a0:	d3f4      	bcc.n	800e58c <core_tensor_clone+0x48>
 800e5a2:	f85d 4b04 	ldr.w	r4, [sp], #4
 800e5a6:	4770      	bx	lr

0800e5a8 <core_array_clone>:
 800e5a8:	4684      	mov	ip, r0
 800e5aa:	c90f      	ldmia	r1, {r0, r1, r2, r3}
 800e5ac:	e88c 000f 	stmia.w	ip, {r0, r1, r2, r3}
 800e5b0:	4770      	bx	lr
 800e5b2:	bf00      	nop

0800e5b4 <_lite_kernel_nl_softmax_is8os8>:
 800e5b4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800e5b8:	b08f      	sub	sp, #60	@ 0x3c
 800e5ba:	461f      	mov	r7, r3
 800e5bc:	9b1b      	ldr	r3, [sp, #108]	@ 0x6c
 800e5be:	f8dd a060 	ldr.w	sl, [sp, #96]	@ 0x60
 800e5c2:	f513 7f80 	cmn.w	r3, #256	@ 0x100
 800e5c6:	920c      	str	r2, [sp, #48]	@ 0x30
 800e5c8:	e9cd 1009 	strd	r1, r0, [sp, #36]	@ 0x24
 800e5cc:	f280 8408 	bge.w	800ede0 <_lite_kernel_nl_softmax_is8os8+0x82c>
 800e5d0:	4613      	mov	r3, r2
 800e5d2:	f44f 7980 	mov.w	r9, #256	@ 0x100
 800e5d6:	fb07 f303 	mul.w	r3, r7, r3
 800e5da:	2b01      	cmp	r3, #1
 800e5dc:	f240 840c 	bls.w	800edf8 <_lite_kernel_nl_softmax_is8os8+0x844>
 800e5e0:	9b1c      	ldr	r3, [sp, #112]	@ 0x70
 800e5e2:	f04f 0b00 	mov.w	fp, #0
 800e5e6:	f8df e47c 	ldr.w	lr, [pc, #1148]	@ 800ea64 <_lite_kernel_nl_softmax_is8os8+0x4b0>
 800e5ea:	f04f 4880 	mov.w	r8, #1073741824	@ 0x40000000
 800e5ee:	3b04      	subs	r3, #4
 800e5f0:	f8cd a060 	str.w	sl, [sp, #96]	@ 0x60
 800e5f4:	9301      	str	r3, [sp, #4]
 800e5f6:	e9cd 9702 	strd	r9, r7, [sp, #8]
 800e5fa:	9b1a      	ldr	r3, [sp, #104]	@ 0x68
 800e5fc:	9819      	ldr	r0, [sp, #100]	@ 0x64
 800e5fe:	fa0b f203 	lsl.w	r2, fp, r3
 800e602:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 800e604:	4252      	negs	r2, r2
 800e606:	4053      	eors	r3, r2
 800e608:	0fdb      	lsrs	r3, r3, #31
 800e60a:	2b00      	cmp	r3, #0
 800e60c:	bf0b      	itete	eq
 800e60e:	f04f 4380 	moveq.w	r3, #1073741824	@ 0x40000000
 800e612:	4673      	movne	r3, lr
 800e614:	2100      	moveq	r1, #0
 800e616:	f04f 31ff 	movne.w	r1, #4294967295
 800e61a:	fbc0 3102 	smlal	r3, r1, r0, r2
 800e61e:	2900      	cmp	r1, #0
 800e620:	da04      	bge.n	800e62c <_lite_kernel_nl_softmax_is8os8+0x78>
 800e622:	f06f 4200 	mvn.w	r2, #2147483648	@ 0x80000000
 800e626:	189b      	adds	r3, r3, r2
 800e628:	f141 0100 	adc.w	r1, r1, #0
 800e62c:	0fdb      	lsrs	r3, r3, #31
 800e62e:	f04f 0c00 	mov.w	ip, #0
 800e632:	ea43 0341 	orr.w	r3, r3, r1, lsl #1
 800e636:	4641      	mov	r1, r8
 800e638:	f043 427f 	orr.w	r2, r3, #4278190080	@ 0xff000000
 800e63c:	0154      	lsls	r4, r2, #5
 800e63e:	1ad2      	subs	r2, r2, r3
 800e640:	f104 5480 	add.w	r4, r4, #268435456	@ 0x10000000
 800e644:	fbc4 1c04 	smlal	r1, ip, r4, r4
 800e648:	f1bc 0f00 	cmp.w	ip, #0
 800e64c:	ea4f 75e4 	mov.w	r5, r4, asr #31
 800e650:	da05      	bge.n	800e65e <_lite_kernel_nl_softmax_is8os8+0xaa>
 800e652:	f06f 4000 	mvn.w	r0, #2147483648	@ 0x80000000
 800e656:	1808      	adds	r0, r1, r0
 800e658:	4601      	mov	r1, r0
 800e65a:	f14c 0c00 	adc.w	ip, ip, #0
 800e65e:	0fc9      	lsrs	r1, r1, #31
 800e660:	ea41 014c 	orr.w	r1, r1, ip, lsl #1
 800e664:	ea4f 7cec 	mov.w	ip, ip, asr #31
 800e668:	fba1 0701 	umull	r0, r7, r1, r1
 800e66c:	fb01 f90c 	mul.w	r9, r1, ip
 800e670:	f110 4080 	adds.w	r0, r0, #1073741824	@ 0x40000000
 800e674:	eb47 0749 	adc.w	r7, r7, r9, lsl #1
 800e678:	2f00      	cmp	r7, #0
 800e67a:	da06      	bge.n	800e68a <_lite_kernel_nl_softmax_is8os8+0xd6>
 800e67c:	f06f 4900 	mvn.w	r9, #2147483648	@ 0x80000000
 800e680:	eb10 0909 	adds.w	r9, r0, r9
 800e684:	4648      	mov	r0, r9
 800e686:	f147 0700 	adc.w	r7, r7, #0
 800e68a:	0fc0      	lsrs	r0, r0, #31
 800e68c:	fb01 f505 	mul.w	r5, r1, r5
 800e690:	ea40 0047 	orr.w	r0, r0, r7, lsl #1
 800e694:	fb04 550c 	mla	r5, r4, ip, r5
 800e698:	1087      	asrs	r7, r0, #2
 800e69a:	f000 0003 	and.w	r0, r0, #3
 800e69e:	bf54      	ite	pl
 800e6a0:	f04f 0901 	movpl.w	r9, #1
 800e6a4:	f04f 0902 	movmi.w	r9, #2
 800e6a8:	4581      	cmp	r9, r0
 800e6aa:	ea81 0004 	eor.w	r0, r1, r4
 800e6ae:	ea4f 70d0 	mov.w	r0, r0, lsr #31
 800e6b2:	bfb8      	it	lt
 800e6b4:	3701      	addlt	r7, #1
 800e6b6:	2800      	cmp	r0, #0
 800e6b8:	fba1 0a04 	umull	r0, sl, r1, r4
 800e6bc:	bf0b      	itete	eq
 800e6be:	f04f 4c80 	moveq.w	ip, #1073741824	@ 0x40000000
 800e6c2:	46f4      	movne	ip, lr
 800e6c4:	f04f 0900 	moveq.w	r9, #0
 800e6c8:	f04f 39ff 	movne.w	r9, #4294967295
 800e6cc:	4455      	add	r5, sl
 800e6ce:	eb10 000c 	adds.w	r0, r0, ip
 800e6d2:	eb45 0509 	adc.w	r5, r5, r9
 800e6d6:	2d00      	cmp	r5, #0
 800e6d8:	da06      	bge.n	800e6e8 <_lite_kernel_nl_softmax_is8os8+0x134>
 800e6da:	f06f 4c00 	mvn.w	ip, #2147483648	@ 0x80000000
 800e6de:	eb10 0c0c 	adds.w	ip, r0, ip
 800e6e2:	4660      	mov	r0, ip
 800e6e4:	f145 0500 	adc.w	r5, r5, #0
 800e6e8:	0fc0      	lsrs	r0, r0, #31
 800e6ea:	4ed5      	ldr	r6, [pc, #852]	@ (800ea40 <_lite_kernel_nl_softmax_is8os8+0x48c>)
 800e6ec:	ea40 0045 	orr.w	r0, r0, r5, lsl #1
 800e6f0:	4438      	add	r0, r7
 800e6f2:	0fc5      	lsrs	r5, r0, #31
 800e6f4:	2d00      	cmp	r5, #0
 800e6f6:	bf0b      	itete	eq
 800e6f8:	f04f 4580 	moveq.w	r5, #1073741824	@ 0x40000000
 800e6fc:	4675      	movne	r5, lr
 800e6fe:	2700      	moveq	r7, #0
 800e700:	f04f 37ff 	movne.w	r7, #4294967295
 800e704:	fbc0 5706 	smlal	r5, r7, r0, r6
 800e708:	2f00      	cmp	r7, #0
 800e70a:	da05      	bge.n	800e718 <_lite_kernel_nl_softmax_is8os8+0x164>
 800e70c:	f06f 4000 	mvn.w	r0, #2147483648	@ 0x80000000
 800e710:	1828      	adds	r0, r5, r0
 800e712:	4605      	mov	r5, r0
 800e714:	f147 0700 	adc.w	r7, r7, #0
 800e718:	0fed      	lsrs	r5, r5, #31
 800e71a:	ea45 0547 	orr.w	r5, r5, r7, lsl #1
 800e71e:	4429      	add	r1, r5
 800e720:	07cf      	lsls	r7, r1, #31
 800e722:	ea4f 0061 	mov.w	r0, r1, asr #1
 800e726:	d502      	bpl.n	800e72e <_lite_kernel_nl_softmax_is8os8+0x17a>
 800e728:	2800      	cmp	r0, #0
 800e72a:	bfa8      	it	ge
 800e72c:	3001      	addge	r0, #1
 800e72e:	4404      	add	r4, r0
 800e730:	4dc4      	ldr	r5, [pc, #784]	@ (800ea44 <_lite_kernel_nl_softmax_is8os8+0x490>)
 800e732:	0fe1      	lsrs	r1, r4, #31
 800e734:	2900      	cmp	r1, #0
 800e736:	bf0b      	itete	eq
 800e738:	f04f 4080 	moveq.w	r0, #1073741824	@ 0x40000000
 800e73c:	4670      	movne	r0, lr
 800e73e:	2100      	moveq	r1, #0
 800e740:	f04f 31ff 	movne.w	r1, #4294967295
 800e744:	fbc4 0105 	smlal	r0, r1, r4, r5
 800e748:	2900      	cmp	r1, #0
 800e74a:	da05      	bge.n	800e758 <_lite_kernel_nl_softmax_is8os8+0x1a4>
 800e74c:	f06f 4400 	mvn.w	r4, #2147483648	@ 0x80000000
 800e750:	1904      	adds	r4, r0, r4
 800e752:	4620      	mov	r0, r4
 800e754:	f141 0100 	adc.w	r1, r1, #0
 800e758:	0fc0      	lsrs	r0, r0, #31
 800e75a:	f3c2 6400 	ubfx	r4, r2, #24, #1
 800e75e:	4eba      	ldr	r6, [pc, #744]	@ (800ea48 <_lite_kernel_nl_softmax_is8os8+0x494>)
 800e760:	4645      	mov	r5, r8
 800e762:	ea40 0041 	orr.w	r0, r0, r1, lsl #1
 800e766:	2100      	movs	r1, #0
 800e768:	3c01      	subs	r4, #1
 800e76a:	fab3 f383 	clz	r3, r3
 800e76e:	f100 40e2 	add.w	r0, r0, #1895825408	@ 0x71000000
 800e772:	460f      	mov	r7, r1
 800e774:	468c      	mov	ip, r1
 800e776:	095b      	lsrs	r3, r3, #5
 800e778:	f5a0 2025 	sub.w	r0, r0, #675840	@ 0xa5000
 800e77c:	f10b 0b01 	add.w	fp, fp, #1
 800e780:	f2a0 706c 	subw	r0, r0, #1900	@ 0x76c
 800e784:	fbc0 5706 	smlal	r5, r7, r0, r6
 800e788:	0fed      	lsrs	r5, r5, #31
 800e78a:	4004      	ands	r4, r0
 800e78c:	f342 6000 	sbfx	r0, r2, #24, #1
 800e790:	ea45 0547 	orr.w	r5, r5, r7, lsl #1
 800e794:	4ead      	ldr	r6, [pc, #692]	@ (800ea4c <_lite_kernel_nl_softmax_is8os8+0x498>)
 800e796:	460f      	mov	r7, r1
 800e798:	4028      	ands	r0, r5
 800e79a:	4645      	mov	r5, r8
 800e79c:	4060      	eors	r0, r4
 800e79e:	f3c2 6440 	ubfx	r4, r2, #25, #1
 800e7a2:	fbc0 5706 	smlal	r5, r7, r0, r6
 800e7a6:	3c01      	subs	r4, #1
 800e7a8:	0fed      	lsrs	r5, r5, #31
 800e7aa:	4ea9      	ldr	r6, [pc, #676]	@ (800ea50 <_lite_kernel_nl_softmax_is8os8+0x49c>)
 800e7ac:	4004      	ands	r4, r0
 800e7ae:	f342 6040 	sbfx	r0, r2, #25, #1
 800e7b2:	ea45 0547 	orr.w	r5, r5, r7, lsl #1
 800e7b6:	460f      	mov	r7, r1
 800e7b8:	4028      	ands	r0, r5
 800e7ba:	4645      	mov	r5, r8
 800e7bc:	4060      	eors	r0, r4
 800e7be:	f3c2 6480 	ubfx	r4, r2, #26, #1
 800e7c2:	fbc0 5706 	smlal	r5, r7, r0, r6
 800e7c6:	3c01      	subs	r4, #1
 800e7c8:	0fed      	lsrs	r5, r5, #31
 800e7ca:	4ea2      	ldr	r6, [pc, #648]	@ (800ea54 <_lite_kernel_nl_softmax_is8os8+0x4a0>)
 800e7cc:	4004      	ands	r4, r0
 800e7ce:	f342 6080 	sbfx	r0, r2, #26, #1
 800e7d2:	ea45 0547 	orr.w	r5, r5, r7, lsl #1
 800e7d6:	460f      	mov	r7, r1
 800e7d8:	4028      	ands	r0, r5
 800e7da:	f3c2 65c0 	ubfx	r5, r2, #27, #1
 800e7de:	4060      	eors	r0, r4
 800e7e0:	4644      	mov	r4, r8
 800e7e2:	3d01      	subs	r5, #1
 800e7e4:	fbc0 4706 	smlal	r4, r7, r0, r6
 800e7e8:	0fe4      	lsrs	r4, r4, #31
 800e7ea:	4005      	ands	r5, r0
 800e7ec:	f342 60c0 	sbfx	r0, r2, #27, #1
 800e7f0:	ea44 0447 	orr.w	r4, r4, r7, lsl #1
 800e7f4:	4e98      	ldr	r6, [pc, #608]	@ (800ea58 <_lite_kernel_nl_softmax_is8os8+0x4a4>)
 800e7f6:	460f      	mov	r7, r1
 800e7f8:	4020      	ands	r0, r4
 800e7fa:	ea85 0400 	eor.w	r4, r5, r0
 800e7fe:	f3c2 7000 	ubfx	r0, r2, #28, #1
 800e802:	4645      	mov	r5, r8
 800e804:	3801      	subs	r0, #1
 800e806:	fbc4 5706 	smlal	r5, r7, r4, r6
 800e80a:	0fed      	lsrs	r5, r5, #31
 800e80c:	4020      	ands	r0, r4
 800e80e:	f342 7400 	sbfx	r4, r2, #28, #1
 800e812:	ea45 0547 	orr.w	r5, r5, r7, lsl #1
 800e816:	4f91      	ldr	r7, [pc, #580]	@ (800ea5c <_lite_kernel_nl_softmax_is8os8+0x4a8>)
 800e818:	402c      	ands	r4, r5
 800e81a:	4645      	mov	r5, r8
 800e81c:	4060      	eors	r0, r4
 800e81e:	f3c2 7440 	ubfx	r4, r2, #29, #1
 800e822:	fbc0 5c07 	smlal	r5, ip, r0, r7
 800e826:	3c01      	subs	r4, #1
 800e828:	0fed      	lsrs	r5, r5, #31
 800e82a:	4004      	ands	r4, r0
 800e82c:	f342 7040 	sbfx	r0, r2, #29, #1
 800e830:	ea45 054c 	orr.w	r5, r5, ip, lsl #1
 800e834:	4028      	ands	r0, r5
 800e836:	4645      	mov	r5, r8
 800e838:	4060      	eors	r0, r4
 800e83a:	24f2      	movs	r4, #242	@ 0xf2
 800e83c:	fbc0 5104 	smlal	r5, r1, r0, r4
 800e840:	0fed      	lsrs	r5, r5, #31
 800e842:	ea45 0541 	orr.w	r5, r5, r1, lsl #1
 800e846:	f3c2 7180 	ubfx	r1, r2, #30, #1
 800e84a:	f342 7280 	sbfx	r2, r2, #30, #1
 800e84e:	3901      	subs	r1, #1
 800e850:	402a      	ands	r2, r5
 800e852:	4001      	ands	r1, r0
 800e854:	404a      	eors	r2, r1
 800e856:	1e59      	subs	r1, r3, #1
 800e858:	425b      	negs	r3, r3
 800e85a:	400a      	ands	r2, r1
 800e85c:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 800e860:	4053      	eors	r3, r2
 800e862:	9a01      	ldr	r2, [sp, #4]
 800e864:	f842 3f04 	str.w	r3, [r2, #4]!
 800e868:	9b02      	ldr	r3, [sp, #8]
 800e86a:	9201      	str	r2, [sp, #4]
 800e86c:	455b      	cmp	r3, fp
 800e86e:	f63f aec4 	bhi.w	800e5fa <_lite_kernel_nl_softmax_is8os8+0x46>
 800e872:	4699      	mov	r9, r3
 800e874:	9f03      	ldr	r7, [sp, #12]
 800e876:	f8dd a060 	ldr.w	sl, [sp, #96]	@ 0x60
 800e87a:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 800e87c:	2b00      	cmp	r3, #0
 800e87e:	f000 823b 	beq.w	800ecf8 <_lite_kernel_nl_softmax_is8os8+0x744>
 800e882:	fb0a f307 	mul.w	r3, sl, r7
 800e886:	930d      	str	r3, [sp, #52]	@ 0x34
 800e888:	2f00      	cmp	r7, #0
 800e88a:	f000 8235 	beq.w	800ecf8 <_lite_kernel_nl_softmax_is8os8+0x744>
 800e88e:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800e890:	46c8      	mov	r8, r9
 800e892:	46be      	mov	lr, r7
 800e894:	443b      	add	r3, r7
 800e896:	9308      	str	r3, [sp, #32]
 800e898:	2300      	movs	r3, #0
 800e89a:	930b      	str	r3, [sp, #44]	@ 0x2c
 800e89c:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800e89e:	4651      	mov	r1, sl
 800e8a0:	46c2      	mov	sl, r8
 800e8a2:	9303      	str	r3, [sp, #12]
 800e8a4:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800e8a6:	9302      	str	r3, [sp, #8]
 800e8a8:	9b02      	ldr	r3, [sp, #8]
 800e8aa:	2901      	cmp	r1, #1
 800e8ac:	f993 2000 	ldrsb.w	r2, [r3]
 800e8b0:	f240 8254 	bls.w	800ed5c <_lite_kernel_nl_softmax_is8os8+0x7a8>
 800e8b4:	eb03 000e 	add.w	r0, r3, lr
 800e8b8:	2301      	movs	r3, #1
 800e8ba:	f990 4000 	ldrsb.w	r4, [r0]
 800e8be:	3301      	adds	r3, #1
 800e8c0:	4470      	add	r0, lr
 800e8c2:	42a2      	cmp	r2, r4
 800e8c4:	bfb8      	it	lt
 800e8c6:	4622      	movlt	r2, r4
 800e8c8:	4299      	cmp	r1, r3
 800e8ca:	d1f6      	bne.n	800e8ba <_lite_kernel_nl_softmax_is8os8+0x306>
 800e8cc:	2500      	movs	r5, #0
 800e8ce:	9802      	ldr	r0, [sp, #8]
 800e8d0:	f240 7cff 	movw	ip, #2047	@ 0x7ff
 800e8d4:	9f1c      	ldr	r7, [sp, #112]	@ 0x70
 800e8d6:	462b      	mov	r3, r5
 800e8d8:	f990 4000 	ldrsb.w	r4, [r0]
 800e8dc:	3301      	adds	r3, #1
 800e8de:	4470      	add	r0, lr
 800e8e0:	1b14      	subs	r4, r2, r4
 800e8e2:	4554      	cmp	r4, sl
 800e8e4:	da0c      	bge.n	800e900 <_lite_kernel_nl_softmax_is8os8+0x34c>
 800e8e6:	f857 4024 	ldr.w	r4, [r7, r4, lsl #2]
 800e8ea:	1326      	asrs	r6, r4, #12
 800e8ec:	f3c4 040b 	ubfx	r4, r4, #0, #12
 800e8f0:	bf54      	ite	pl
 800e8f2:	46e0      	movpl	r8, ip
 800e8f4:	f44f 6800 	movmi.w	r8, #2048	@ 0x800
 800e8f8:	4544      	cmp	r4, r8
 800e8fa:	bfc8      	it	gt
 800e8fc:	3601      	addgt	r6, #1
 800e8fe:	4435      	add	r5, r6
 800e900:	4299      	cmp	r1, r3
 800e902:	d8e9      	bhi.n	800e8d8 <_lite_kernel_nl_softmax_is8os8+0x324>
 800e904:	2d00      	cmp	r5, #0
 800e906:	f000 822c 	beq.w	800ed62 <_lite_kernel_nl_softmax_is8os8+0x7ae>
 800e90a:	fab5 f385 	clz	r3, r5
 800e90e:	409d      	lsls	r5, r3
 800e910:	9306      	str	r3, [sp, #24]
 800e912:	f1c3 0323 	rsb	r3, r3, #35	@ 0x23
 800e916:	9301      	str	r3, [sp, #4]
 800e918:	f105 4300 	add.w	r3, r5, #2147483648	@ 0x80000000
 800e91c:	17de      	asrs	r6, r3, #31
 800e91e:	f1b6 3fff 	cmp.w	r6, #4294967295
 800e922:	bf08      	it	eq
 800e924:	2d00      	cmpeq	r5, #0
 800e926:	f000 8220 	beq.w	800ed6a <_lite_kernel_nl_softmax_is8os8+0x7b6>
 800e92a:	f113 4300 	adds.w	r3, r3, #2147483648	@ 0x80000000
 800e92e:	484c      	ldr	r0, [pc, #304]	@ (800ea60 <_lite_kernel_nl_softmax_is8os8+0x4ac>)
 800e930:	f146 0600 	adc.w	r6, r6, #0
 800e934:	085b      	lsrs	r3, r3, #1
 800e936:	ea43 73c6 	orr.w	r3, r3, r6, lsl #31
 800e93a:	1076      	asrs	r6, r6, #1
 800e93c:	425d      	negs	r5, r3
 800e93e:	469b      	mov	fp, r3
 800e940:	fb00 5506 	mla	r5, r0, r6, r5
 800e944:	fba3 0400 	umull	r0, r4, r3, r0
 800e948:	442c      	add	r4, r5
 800e94a:	4d46      	ldr	r5, [pc, #280]	@ (800ea64 <_lite_kernel_nl_softmax_is8os8+0x4b0>)
 800e94c:	1940      	adds	r0, r0, r5
 800e94e:	f164 0400 	sbc.w	r4, r4, #0
 800e952:	2c00      	cmp	r4, #0
 800e954:	da05      	bge.n	800e962 <_lite_kernel_nl_softmax_is8os8+0x3ae>
 800e956:	f06f 4500 	mvn.w	r5, #2147483648	@ 0x80000000
 800e95a:	1945      	adds	r5, r0, r5
 800e95c:	4628      	mov	r0, r5
 800e95e:	f144 0400 	adc.w	r4, r4, #0
 800e962:	0fc0      	lsrs	r0, r0, #31
 800e964:	ea40 0544 	orr.w	r5, r0, r4, lsl #1
 800e968:	f105 3c5a 	add.w	ip, r5, #1515870810	@ 0x5a5a5a5a
 800e96c:	ea4f 70ec 	mov.w	r0, ip, asr #31
 800e970:	4667      	mov	r7, ip
 800e972:	fb03 f900 	mul.w	r9, r3, r0
 800e976:	9004      	str	r0, [sp, #16]
 800e978:	fba3 080c 	umull	r0, r8, r3, ip
 800e97c:	fb0c 9906 	mla	r9, ip, r6, r9
 800e980:	f110 4080 	adds.w	r0, r0, #1073741824	@ 0x40000000
 800e984:	eb49 0808 	adc.w	r8, r9, r8
 800e988:	f1b8 0f00 	cmp.w	r8, #0
 800e98c:	da06      	bge.n	800e99c <_lite_kernel_nl_softmax_is8os8+0x3e8>
 800e98e:	f06f 4900 	mvn.w	r9, #2147483648	@ 0x80000000
 800e992:	eb10 0909 	adds.w	r9, r0, r9
 800e996:	4648      	mov	r0, r9
 800e998:	f148 0800 	adc.w	r8, r8, #0
 800e99c:	0fc0      	lsrs	r0, r0, #31
 800e99e:	4c31      	ldr	r4, [pc, #196]	@ (800ea64 <_lite_kernel_nl_softmax_is8os8+0x4b0>)
 800e9a0:	ea40 0048 	orr.w	r0, r0, r8, lsl #1
 800e9a4:	f1c0 5000 	rsb	r0, r0, #536870912	@ 0x20000000
 800e9a8:	ea80 080c 	eor.w	r8, r0, ip
 800e9ac:	ea4f 78d8 	mov.w	r8, r8, lsr #31
 800e9b0:	f1b8 0f00 	cmp.w	r8, #0
 800e9b4:	bf15      	itete	ne
 800e9b6:	46a0      	movne	r8, r4
 800e9b8:	2400      	moveq	r4, #0
 800e9ba:	f04f 34ff 	movne.w	r4, #4294967295
 800e9be:	f04f 4880 	moveq.w	r8, #1073741824	@ 0x40000000
 800e9c2:	9405      	str	r4, [sp, #20]
 800e9c4:	9c04      	ldr	r4, [sp, #16]
 800e9c6:	ea4f 79e0 	mov.w	r9, r0, asr #31
 800e9ca:	fb00 f404 	mul.w	r4, r0, r4
 800e9ce:	fb07 4409 	mla	r4, r7, r9, r4
 800e9d2:	fba0 0707 	umull	r0, r7, r0, r7
 800e9d6:	eb10 0008 	adds.w	r0, r0, r8
 800e9da:	443c      	add	r4, r7
 800e9dc:	9f05      	ldr	r7, [sp, #20]
 800e9de:	eb44 0707 	adc.w	r7, r4, r7
 800e9e2:	2f00      	cmp	r7, #0
 800e9e4:	da05      	bge.n	800e9f2 <_lite_kernel_nl_softmax_is8os8+0x43e>
 800e9e6:	f06f 4400 	mvn.w	r4, #2147483648	@ 0x80000000
 800e9ea:	1904      	adds	r4, r0, r4
 800e9ec:	4620      	mov	r0, r4
 800e9ee:	f147 0700 	adc.w	r7, r7, #0
 800e9f2:	0fc0      	lsrs	r0, r0, #31
 800e9f4:	ea40 0047 	orr.w	r0, r0, r7, lsl #1
 800e9f8:	f1b0 4f60 	cmp.w	r0, #3758096384	@ 0xe0000000
 800e9fc:	f340 809d 	ble.w	800eb3a <_lite_kernel_nl_softmax_is8os8+0x586>
 800ea00:	eb0c 0480 	add.w	r4, ip, r0, lsl #2
 800ea04:	ea8b 0004 	eor.w	r0, fp, r4
 800ea08:	17e5      	asrs	r5, r4, #31
 800ea0a:	0fc0      	lsrs	r0, r0, #31
 800ea0c:	fb03 f705 	mul.w	r7, r3, r5
 800ea10:	2800      	cmp	r0, #0
 800ea12:	4814      	ldr	r0, [pc, #80]	@ (800ea64 <_lite_kernel_nl_softmax_is8os8+0x4b0>)
 800ea14:	fb04 7706 	mla	r7, r4, r6, r7
 800ea18:	bf14      	ite	ne
 800ea1a:	4684      	movne	ip, r0
 800ea1c:	f04f 4c80 	moveq.w	ip, #1073741824	@ 0x40000000
 800ea20:	fba3 0904 	umull	r0, r9, r3, r4
 800ea24:	bf0c      	ite	eq
 800ea26:	f04f 0800 	moveq.w	r8, #0
 800ea2a:	f04f 38ff 	movne.w	r8, #4294967295
 800ea2e:	444f      	add	r7, r9
 800ea30:	eb10 000c 	adds.w	r0, r0, ip
 800ea34:	eb47 0708 	adc.w	r7, r7, r8
 800ea38:	2f00      	cmp	r7, #0
 800ea3a:	da1c      	bge.n	800ea76 <_lite_kernel_nl_softmax_is8os8+0x4c2>
 800ea3c:	e014      	b.n	800ea68 <_lite_kernel_nl_softmax_is8os8+0x4b4>
 800ea3e:	bf00      	nop
 800ea40:	2aaaaaab 	.word	0x2aaaaaab
 800ea44:	70f5a894 	.word	0x70f5a894
 800ea48:	63afbe7b 	.word	0x63afbe7b
 800ea4c:	4da2cbf2 	.word	0x4da2cbf2
 800ea50:	2f16ac6c 	.word	0x2f16ac6c
 800ea54:	1152aaa4 	.word	0x1152aaa4
 800ea58:	02582ab7 	.word	0x02582ab7
 800ea5c:	000afe11 	.word	0x000afe11
 800ea60:	c3c3c3c4 	.word	0xc3c3c3c4
 800ea64:	c0000001 	.word	0xc0000001
 800ea68:	f06f 4c00 	mvn.w	ip, #2147483648	@ 0x80000000
 800ea6c:	eb10 0c0c 	adds.w	ip, r0, ip
 800ea70:	4660      	mov	r0, ip
 800ea72:	f147 0700 	adc.w	r7, r7, #0
 800ea76:	0fc0      	lsrs	r0, r0, #31
 800ea78:	ea40 0047 	orr.w	r0, r0, r7, lsl #1
 800ea7c:	f1c0 5000 	rsb	r0, r0, #536870912	@ 0x20000000
 800ea80:	ea84 0700 	eor.w	r7, r4, r0
 800ea84:	0fff      	lsrs	r7, r7, #31
 800ea86:	2f00      	cmp	r7, #0
 800ea88:	4fbf      	ldr	r7, [pc, #764]	@ (800ed88 <_lite_kernel_nl_softmax_is8os8+0x7d4>)
 800ea8a:	bf06      	itte	eq
 800ea8c:	f04f 0c00 	moveq.w	ip, #0
 800ea90:	f04f 4780 	moveq.w	r7, #1073741824	@ 0x40000000
 800ea94:	f04f 3cff 	movne.w	ip, #4294967295
 800ea98:	fb00 f505 	mul.w	r5, r0, r5
 800ea9c:	ea4f 78e0 	mov.w	r8, r0, asr #31
 800eaa0:	fb04 5508 	mla	r5, r4, r8, r5
 800eaa4:	fba0 0804 	umull	r0, r8, r0, r4
 800eaa8:	19c0      	adds	r0, r0, r7
 800eaaa:	4445      	add	r5, r8
 800eaac:	eb45 050c 	adc.w	r5, r5, ip
 800eab0:	2d00      	cmp	r5, #0
 800eab2:	da05      	bge.n	800eac0 <_lite_kernel_nl_softmax_is8os8+0x50c>
 800eab4:	f06f 4700 	mvn.w	r7, #2147483648	@ 0x80000000
 800eab8:	19c7      	adds	r7, r0, r7
 800eaba:	4638      	mov	r0, r7
 800eabc:	f145 0500 	adc.w	r5, r5, #0
 800eac0:	0fc0      	lsrs	r0, r0, #31
 800eac2:	ea40 0045 	orr.w	r0, r0, r5, lsl #1
 800eac6:	f1b0 5f00 	cmp.w	r0, #536870912	@ 0x20000000
 800eaca:	db65      	blt.n	800eb98 <_lite_kernel_nl_softmax_is8os8+0x5e4>
 800eacc:	f06f 4500 	mvn.w	r5, #2147483648	@ 0x80000000
 800ead0:	1960      	adds	r0, r4, r5
 800ead2:	ea9b 0f00 	teq	fp, r0
 800ead6:	f140 813d 	bpl.w	800ed54 <_lite_kernel_nl_softmax_is8os8+0x7a0>
 800eada:	4dab      	ldr	r5, [pc, #684]	@ (800ed88 <_lite_kernel_nl_softmax_is8os8+0x7d4>)
 800eadc:	f04f 37ff 	mov.w	r7, #4294967295
 800eae0:	17c4      	asrs	r4, r0, #31
 800eae2:	fb03 fc04 	mul.w	ip, r3, r4
 800eae6:	fb00 c606 	mla	r6, r0, r6, ip
 800eaea:	fba3 3c00 	umull	r3, ip, r3, r0
 800eaee:	195b      	adds	r3, r3, r5
 800eaf0:	4466      	add	r6, ip
 800eaf2:	eb46 0607 	adc.w	r6, r6, r7
 800eaf6:	2e00      	cmp	r6, #0
 800eaf8:	da05      	bge.n	800eb06 <_lite_kernel_nl_softmax_is8os8+0x552>
 800eafa:	f06f 4500 	mvn.w	r5, #2147483648	@ 0x80000000
 800eafe:	195d      	adds	r5, r3, r5
 800eb00:	462b      	mov	r3, r5
 800eb02:	f146 0600 	adc.w	r6, r6, #0
 800eb06:	0fdb      	lsrs	r3, r3, #31
 800eb08:	ea43 0346 	orr.w	r3, r3, r6, lsl #1
 800eb0c:	f1c3 5300 	rsb	r3, r3, #536870912	@ 0x20000000
 800eb10:	ea80 0503 	eor.w	r5, r0, r3
 800eb14:	0fed      	lsrs	r5, r5, #31
 800eb16:	2d00      	cmp	r5, #0
 800eb18:	4d9b      	ldr	r5, [pc, #620]	@ (800ed88 <_lite_kernel_nl_softmax_is8os8+0x7d4>)
 800eb1a:	bf06      	itte	eq
 800eb1c:	2600      	moveq	r6, #0
 800eb1e:	f04f 4580 	moveq.w	r5, #1073741824	@ 0x40000000
 800eb22:	f04f 36ff 	movne.w	r6, #4294967295
 800eb26:	4298      	cmp	r0, r3
 800eb28:	d15d      	bne.n	800ebe6 <_lite_kernel_nl_softmax_is8os8+0x632>
 800eb2a:	f1b0 4f00 	cmp.w	r0, #2147483648	@ 0x80000000
 800eb2e:	d15a      	bne.n	800ebe6 <_lite_kernel_nl_softmax_is8os8+0x632>
 800eb30:	f06f 4600 	mvn.w	r6, #2147483648	@ 0x80000000
 800eb34:	4406      	add	r6, r0
 800eb36:	0076      	lsls	r6, r6, #1
 800eb38:	e075      	b.n	800ec26 <_lite_kernel_nl_softmax_is8os8+0x672>
 800eb3a:	4c94      	ldr	r4, [pc, #592]	@ (800ed8c <_lite_kernel_nl_softmax_is8os8+0x7d8>)
 800eb3c:	192c      	adds	r4, r5, r4
 800eb3e:	ea9b 0f04 	teq	fp, r4
 800eb42:	f140 8127 	bpl.w	800ed94 <_lite_kernel_nl_softmax_is8os8+0x7e0>
 800eb46:	17e0      	asrs	r0, r4, #31
 800eb48:	fb04 f506 	mul.w	r5, r4, r6
 800eb4c:	fb03 5500 	mla	r5, r3, r0, r5
 800eb50:	fba4 0703 	umull	r0, r7, r4, r3
 800eb54:	442f      	add	r7, r5
 800eb56:	4d8c      	ldr	r5, [pc, #560]	@ (800ed88 <_lite_kernel_nl_softmax_is8os8+0x7d4>)
 800eb58:	1940      	adds	r0, r0, r5
 800eb5a:	f167 0700 	sbc.w	r7, r7, #0
 800eb5e:	2f00      	cmp	r7, #0
 800eb60:	da05      	bge.n	800eb6e <_lite_kernel_nl_softmax_is8os8+0x5ba>
 800eb62:	f06f 4500 	mvn.w	r5, #2147483648	@ 0x80000000
 800eb66:	1945      	adds	r5, r0, r5
 800eb68:	4628      	mov	r0, r5
 800eb6a:	f147 0700 	adc.w	r7, r7, #0
 800eb6e:	0fc0      	lsrs	r0, r0, #31
 800eb70:	ea40 0047 	orr.w	r0, r0, r7, lsl #1
 800eb74:	f04f 37ff 	mov.w	r7, #4294967295
 800eb78:	f1c0 5500 	rsb	r5, r0, #536870912	@ 0x20000000
 800eb7c:	4882      	ldr	r0, [pc, #520]	@ (800ed88 <_lite_kernel_nl_softmax_is8os8+0x7d4>)
 800eb7e:	fbc5 0704 	smlal	r0, r7, r5, r4
 800eb82:	2f00      	cmp	r7, #0
 800eb84:	da05      	bge.n	800eb92 <_lite_kernel_nl_softmax_is8os8+0x5de>
 800eb86:	f06f 4500 	mvn.w	r5, #2147483648	@ 0x80000000
 800eb8a:	1945      	adds	r5, r0, r5
 800eb8c:	4628      	mov	r0, r5
 800eb8e:	f147 0700 	adc.w	r7, r7, #0
 800eb92:	0fc0      	lsrs	r0, r0, #31
 800eb94:	ea40 0047 	orr.w	r0, r0, r7, lsl #1
 800eb98:	f1b0 4f60 	cmp.w	r0, #3758096384	@ 0xe0000000
 800eb9c:	ea4f 0580 	mov.w	r5, r0, lsl #2
 800eba0:	dc96      	bgt.n	800ead0 <_lite_kernel_nl_softmax_is8os8+0x51c>
 800eba2:	f104 4000 	add.w	r0, r4, #2147483648	@ 0x80000000
 800eba6:	ea90 0f0b 	teq	r0, fp
 800ebaa:	f140 80d3 	bpl.w	800ed54 <_lite_kernel_nl_softmax_is8os8+0x7a0>
 800ebae:	fb00 f606 	mul.w	r6, r0, r6
 800ebb2:	17c4      	asrs	r4, r0, #31
 800ebb4:	fb03 6604 	mla	r6, r3, r4, r6
 800ebb8:	fba0 3503 	umull	r3, r5, r0, r3
 800ebbc:	4435      	add	r5, r6
 800ebbe:	4e72      	ldr	r6, [pc, #456]	@ (800ed88 <_lite_kernel_nl_softmax_is8os8+0x7d4>)
 800ebc0:	199b      	adds	r3, r3, r6
 800ebc2:	f165 0500 	sbc.w	r5, r5, #0
 800ebc6:	2d00      	cmp	r5, #0
 800ebc8:	da05      	bge.n	800ebd6 <_lite_kernel_nl_softmax_is8os8+0x622>
 800ebca:	f06f 4600 	mvn.w	r6, #2147483648	@ 0x80000000
 800ebce:	199e      	adds	r6, r3, r6
 800ebd0:	4633      	mov	r3, r6
 800ebd2:	f145 0500 	adc.w	r5, r5, #0
 800ebd6:	0fdb      	lsrs	r3, r3, #31
 800ebd8:	f04f 36ff 	mov.w	r6, #4294967295
 800ebdc:	ea43 0345 	orr.w	r3, r3, r5, lsl #1
 800ebe0:	4d69      	ldr	r5, [pc, #420]	@ (800ed88 <_lite_kernel_nl_softmax_is8os8+0x7d4>)
 800ebe2:	f1c3 5300 	rsb	r3, r3, #536870912	@ 0x20000000
 800ebe6:	fb03 f404 	mul.w	r4, r3, r4
 800ebea:	17df      	asrs	r7, r3, #31
 800ebec:	fb00 4407 	mla	r4, r0, r7, r4
 800ebf0:	fba3 3700 	umull	r3, r7, r3, r0
 800ebf4:	195b      	adds	r3, r3, r5
 800ebf6:	443c      	add	r4, r7
 800ebf8:	eb44 0406 	adc.w	r4, r4, r6
 800ebfc:	2c00      	cmp	r4, #0
 800ebfe:	da04      	bge.n	800ec0a <_lite_kernel_nl_softmax_is8os8+0x656>
 800ec00:	f06f 4500 	mvn.w	r5, #2147483648	@ 0x80000000
 800ec04:	195b      	adds	r3, r3, r5
 800ec06:	f144 0400 	adc.w	r4, r4, #0
 800ec0a:	0fdb      	lsrs	r3, r3, #31
 800ec0c:	ea43 0344 	orr.w	r3, r3, r4, lsl #1
 800ec10:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800ec14:	f2c0 8092 	blt.w	800ed3c <_lite_kernel_nl_softmax_is8os8+0x788>
 800ec18:	f06f 4300 	mvn.w	r3, #2147483648	@ 0x80000000
 800ec1c:	18c6      	adds	r6, r0, r3
 800ec1e:	f1b6 4f80 	cmp.w	r6, #1073741824	@ 0x40000000
 800ec22:	db88      	blt.n	800eb36 <_lite_kernel_nl_softmax_is8os8+0x582>
 800ec24:	461e      	mov	r6, r3
 800ec26:	9b01      	ldr	r3, [sp, #4]
 800ec28:	2b1f      	cmp	r3, #31
 800ec2a:	dd05      	ble.n	800ec38 <_lite_kernel_nl_softmax_is8os8+0x684>
 800ec2c:	9b06      	ldr	r3, [sp, #24]
 800ec2e:	f1c3 0304 	rsb	r3, r3, #4
 800ec32:	411e      	asrs	r6, r3
 800ec34:	231f      	movs	r3, #31
 800ec36:	9301      	str	r3, [sp, #4]
 800ec38:	2900      	cmp	r1, #0
 800ec3a:	d040      	beq.n	800ecbe <_lite_kernel_nl_softmax_is8os8+0x70a>
 800ec3c:	9801      	ldr	r0, [sp, #4]
 800ec3e:	f04f 0c01 	mov.w	ip, #1
 800ec42:	f06f 4300 	mvn.w	r3, #2147483648	@ 0x80000000
 800ec46:	f04f 0880 	mov.w	r8, #128	@ 0x80
 800ec4a:	fa0c fc00 	lsl.w	ip, ip, r0
 800ec4e:	fa43 f000 	asr.w	r0, r3, r0
 800ec52:	9307      	str	r3, [sp, #28]
 800ec54:	f10c 3cff 	add.w	ip, ip, #4294967295
 800ec58:	9005      	str	r0, [sp, #20]
 800ec5a:	2000      	movs	r0, #0
 800ec5c:	ea4f 096c 	mov.w	r9, ip, asr #1
 800ec60:	ea0c 0703 	and.w	r7, ip, r3
 800ec64:	e9dd 5402 	ldrd	r5, r4, [sp, #8]
 800ec68:	f109 0301 	add.w	r3, r9, #1
 800ec6c:	9706      	str	r7, [sp, #24]
 800ec6e:	9304      	str	r3, [sp, #16]
 800ec70:	f995 3000 	ldrsb.w	r3, [r5]
 800ec74:	1ad3      	subs	r3, r2, r3
 800ec76:	4553      	cmp	r3, sl
 800ec78:	da41      	bge.n	800ecfe <_lite_kernel_nl_softmax_is8os8+0x74a>
 800ec7a:	9f1c      	ldr	r7, [sp, #112]	@ 0x70
 800ec7c:	f857 7023 	ldr.w	r7, [r7, r3, lsl #2]
 800ec80:	ea87 0306 	eor.w	r3, r7, r6
 800ec84:	0fdb      	lsrs	r3, r3, #31
 800ec86:	2b00      	cmp	r3, #0
 800ec88:	4b3f      	ldr	r3, [pc, #252]	@ (800ed88 <_lite_kernel_nl_softmax_is8os8+0x7d4>)
 800ec8a:	bf06      	itte	eq
 800ec8c:	f04f 0b00 	moveq.w	fp, #0
 800ec90:	f04f 4380 	moveq.w	r3, #1073741824	@ 0x40000000
 800ec94:	f04f 3bff 	movne.w	fp, #4294967295
 800ec98:	42b7      	cmp	r7, r6
 800ec9a:	d133      	bne.n	800ed04 <_lite_kernel_nl_softmax_is8os8+0x750>
 800ec9c:	f1b6 4f00 	cmp.w	r6, #2147483648	@ 0x80000000
 800eca0:	d130      	bne.n	800ed04 <_lite_kernel_nl_softmax_is8os8+0x750>
 800eca2:	e9dd 3b05 	ldrd	r3, fp, [sp, #20]
 800eca6:	45d9      	cmp	r9, fp
 800eca8:	da00      	bge.n	800ecac <_lite_kernel_nl_softmax_is8os8+0x6f8>
 800ecaa:	3301      	adds	r3, #1
 800ecac:	2bfe      	cmp	r3, #254	@ 0xfe
 800ecae:	dd40      	ble.n	800ed32 <_lite_kernel_nl_softmax_is8os8+0x77e>
 800ecb0:	237f      	movs	r3, #127	@ 0x7f
 800ecb2:	7023      	strb	r3, [r4, #0]
 800ecb4:	3001      	adds	r0, #1
 800ecb6:	4475      	add	r5, lr
 800ecb8:	4474      	add	r4, lr
 800ecba:	4281      	cmp	r1, r0
 800ecbc:	d1d8      	bne.n	800ec70 <_lite_kernel_nl_softmax_is8os8+0x6bc>
 800ecbe:	9a03      	ldr	r2, [sp, #12]
 800ecc0:	9b02      	ldr	r3, [sp, #8]
 800ecc2:	3201      	adds	r2, #1
 800ecc4:	3301      	adds	r3, #1
 800ecc6:	9203      	str	r2, [sp, #12]
 800ecc8:	9a08      	ldr	r2, [sp, #32]
 800ecca:	9302      	str	r3, [sp, #8]
 800eccc:	4293      	cmp	r3, r2
 800ecce:	f47f adeb 	bne.w	800e8a8 <_lite_kernel_nl_softmax_is8os8+0x2f4>
 800ecd2:	9a0d      	ldr	r2, [sp, #52]	@ 0x34
 800ecd4:	46d0      	mov	r8, sl
 800ecd6:	468a      	mov	sl, r1
 800ecd8:	9909      	ldr	r1, [sp, #36]	@ 0x24
 800ecda:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800ecdc:	4411      	add	r1, r2
 800ecde:	3301      	adds	r3, #1
 800ece0:	9109      	str	r1, [sp, #36]	@ 0x24
 800ece2:	990a      	ldr	r1, [sp, #40]	@ 0x28
 800ece4:	930b      	str	r3, [sp, #44]	@ 0x2c
 800ece6:	4411      	add	r1, r2
 800ece8:	910a      	str	r1, [sp, #40]	@ 0x28
 800ecea:	9908      	ldr	r1, [sp, #32]
 800ecec:	4411      	add	r1, r2
 800ecee:	9a0c      	ldr	r2, [sp, #48]	@ 0x30
 800ecf0:	429a      	cmp	r2, r3
 800ecf2:	9108      	str	r1, [sp, #32]
 800ecf4:	f47f add2 	bne.w	800e89c <_lite_kernel_nl_softmax_is8os8+0x2e8>
 800ecf8:	b00f      	add	sp, #60	@ 0x3c
 800ecfa:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800ecfe:	f884 8000 	strb.w	r8, [r4]
 800ed02:	e7d7      	b.n	800ecb4 <_lite_kernel_nl_softmax_is8os8+0x700>
 800ed04:	fbc6 3b07 	smlal	r3, fp, r6, r7
 800ed08:	f1bb 0f00 	cmp.w	fp, #0
 800ed0c:	da03      	bge.n	800ed16 <_lite_kernel_nl_softmax_is8os8+0x762>
 800ed0e:	9f07      	ldr	r7, [sp, #28]
 800ed10:	19db      	adds	r3, r3, r7
 800ed12:	f14b 0b00 	adc.w	fp, fp, #0
 800ed16:	0fdb      	lsrs	r3, r3, #31
 800ed18:	9f01      	ldr	r7, [sp, #4]
 800ed1a:	ea43 034b 	orr.w	r3, r3, fp, lsl #1
 800ed1e:	ea03 0b0c 	and.w	fp, r3, ip
 800ed22:	413b      	asrs	r3, r7
 800ed24:	d5bf      	bpl.n	800eca6 <_lite_kernel_nl_softmax_is8os8+0x6f2>
 800ed26:	9f04      	ldr	r7, [sp, #16]
 800ed28:	45bb      	cmp	fp, r7
 800ed2a:	dcbe      	bgt.n	800ecaa <_lite_kernel_nl_softmax_is8os8+0x6f6>
 800ed2c:	f06f 037f 	mvn.w	r3, #127	@ 0x7f
 800ed30:	e7bf      	b.n	800ecb2 <_lite_kernel_nl_softmax_is8os8+0x6fe>
 800ed32:	2b00      	cmp	r3, #0
 800ed34:	ddfa      	ble.n	800ed2c <_lite_kernel_nl_softmax_is8os8+0x778>
 800ed36:	3b80      	subs	r3, #128	@ 0x80
 800ed38:	b25b      	sxtb	r3, r3
 800ed3a:	e7ba      	b.n	800ecb2 <_lite_kernel_nl_softmax_is8os8+0x6fe>
 800ed3c:	f1b3 4f60 	cmp.w	r3, #3758096384	@ 0xe0000000
 800ed40:	dc45      	bgt.n	800edce <_lite_kernel_nl_softmax_is8os8+0x81a>
 800ed42:	f100 4300 	add.w	r3, r0, #2147483648	@ 0x80000000
 800ed46:	0046      	lsls	r6, r0, #1
 800ed48:	f1b3 4f40 	cmp.w	r3, #3221225472	@ 0xc0000000
 800ed4c:	bfd8      	it	le
 800ed4e:	f04f 4600 	movle.w	r6, #2147483648	@ 0x80000000
 800ed52:	e768      	b.n	800ec26 <_lite_kernel_nl_softmax_is8os8+0x672>
 800ed54:	f04f 4580 	mov.w	r5, #1073741824	@ 0x40000000
 800ed58:	2700      	movs	r7, #0
 800ed5a:	e6c1      	b.n	800eae0 <_lite_kernel_nl_softmax_is8os8+0x52c>
 800ed5c:	2900      	cmp	r1, #0
 800ed5e:	f47f adb5 	bne.w	800e8cc <_lite_kernel_nl_softmax_is8os8+0x318>
 800ed62:	2303      	movs	r3, #3
 800ed64:	9301      	str	r3, [sp, #4]
 800ed66:	2320      	movs	r3, #32
 800ed68:	9306      	str	r3, [sp, #24]
 800ed6a:	f04f 3bff 	mov.w	fp, #4294967295
 800ed6e:	2500      	movs	r5, #0
 800ed70:	f04f 375a 	mov.w	r7, #1515870810	@ 0x5a5a5a5a
 800ed74:	4806      	ldr	r0, [pc, #24]	@ (800ed90 <_lite_kernel_nl_softmax_is8os8+0x7dc>)
 800ed76:	465b      	mov	r3, fp
 800ed78:	465e      	mov	r6, fp
 800ed7a:	46bc      	mov	ip, r7
 800ed7c:	f04f 4880 	mov.w	r8, #1073741824	@ 0x40000000
 800ed80:	9504      	str	r5, [sp, #16]
 800ed82:	9505      	str	r5, [sp, #20]
 800ed84:	e61e      	b.n	800e9c4 <_lite_kernel_nl_softmax_is8os8+0x410>
 800ed86:	bf00      	nop
 800ed88:	c0000001 	.word	0xc0000001
 800ed8c:	da5a5a5a 	.word	0xda5a5a5a
 800ed90:	20000001 	.word	0x20000001
 800ed94:	fba4 0703 	umull	r0, r7, r4, r3
 800ed98:	17e5      	asrs	r5, r4, #31
 800ed9a:	fb04 fc06 	mul.w	ip, r4, r6
 800ed9e:	f110 4080 	adds.w	r0, r0, #1073741824	@ 0x40000000
 800eda2:	fb03 cc05 	mla	ip, r3, r5, ip
 800eda6:	eb4c 0707 	adc.w	r7, ip, r7
 800edaa:	2f00      	cmp	r7, #0
 800edac:	da06      	bge.n	800edbc <_lite_kernel_nl_softmax_is8os8+0x808>
 800edae:	f06f 4c00 	mvn.w	ip, #2147483648	@ 0x80000000
 800edb2:	eb10 0c0c 	adds.w	ip, r0, ip
 800edb6:	4660      	mov	r0, ip
 800edb8:	f147 0700 	adc.w	r7, r7, #0
 800edbc:	0fc0      	lsrs	r0, r0, #31
 800edbe:	f04f 3cff 	mov.w	ip, #4294967295
 800edc2:	ea40 0047 	orr.w	r0, r0, r7, lsl #1
 800edc6:	4fcb      	ldr	r7, [pc, #812]	@ (800f0f4 <_lite_kernel_nl_softmax_is8os8+0xb40>)
 800edc8:	f1c0 5000 	rsb	r0, r0, #536870912	@ 0x20000000
 800edcc:	e664      	b.n	800ea98 <_lite_kernel_nl_softmax_is8os8+0x4e4>
 800edce:	eb00 0383 	add.w	r3, r0, r3, lsl #2
 800edd2:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800edd6:	f2c0 818b 	blt.w	800f0f0 <_lite_kernel_nl_softmax_is8os8+0xb3c>
 800edda:	f06f 4600 	mvn.w	r6, #2147483648	@ 0x80000000
 800edde:	e722      	b.n	800ec26 <_lite_kernel_nl_softmax_is8os8+0x672>
 800ede0:	f1c3 0900 	rsb	r9, r3, #0
 800ede4:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 800ede6:	fb07 f303 	mul.w	r3, r7, r3
 800edea:	2b01      	cmp	r3, #1
 800edec:	d904      	bls.n	800edf8 <_lite_kernel_nl_softmax_is8os8+0x844>
 800edee:	f1b9 0f00 	cmp.w	r9, #0
 800edf2:	f47f abf5 	bne.w	800e5e0 <_lite_kernel_nl_softmax_is8os8+0x2c>
 800edf6:	e540      	b.n	800e87a <_lite_kernel_nl_softmax_is8os8+0x2c6>
 800edf8:	fb03 f10a 	mul.w	r1, r3, sl
 800edfc:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800edfe:	2901      	cmp	r1, #1
 800ee00:	f993 2000 	ldrsb.w	r2, [r3]
 800ee04:	9102      	str	r1, [sp, #8]
 800ee06:	9203      	str	r2, [sp, #12]
 800ee08:	f240 816c 	bls.w	800f0e4 <_lite_kernel_nl_softmax_is8os8+0xb30>
 800ee0c:	1e58      	subs	r0, r3, #1
 800ee0e:	1841      	adds	r1, r0, r1
 800ee10:	f913 4f01 	ldrsb.w	r4, [r3, #1]!
 800ee14:	42a2      	cmp	r2, r4
 800ee16:	bfb8      	it	lt
 800ee18:	4622      	movlt	r2, r4
 800ee1a:	428b      	cmp	r3, r1
 800ee1c:	d1f8      	bne.n	800ee10 <_lite_kernel_nl_softmax_is8os8+0x85c>
 800ee1e:	9203      	str	r2, [sp, #12]
 800ee20:	4605      	mov	r5, r0
 800ee22:	9704      	str	r7, [sp, #16]
 800ee24:	f8cd a060 	str.w	sl, [sp, #96]	@ 0x60
 800ee28:	9b03      	ldr	r3, [sp, #12]
 800ee2a:	9501      	str	r5, [sp, #4]
 800ee2c:	f915 cf01 	ldrsb.w	ip, [r5, #1]!
 800ee30:	eba3 0c0c 	sub.w	ip, r3, ip
 800ee34:	45cc      	cmp	ip, r9
 800ee36:	f080 8148 	bcs.w	800f0ca <_lite_kernel_nl_softmax_is8os8+0xb16>
 800ee3a:	9b1a      	ldr	r3, [sp, #104]	@ 0x68
 800ee3c:	9819      	ldr	r0, [sp, #100]	@ 0x64
 800ee3e:	fa0c f203 	lsl.w	r2, ip, r3
 800ee42:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 800ee44:	4252      	negs	r2, r2
 800ee46:	4053      	eors	r3, r2
 800ee48:	0fdb      	lsrs	r3, r3, #31
 800ee4a:	2b00      	cmp	r3, #0
 800ee4c:	4ba9      	ldr	r3, [pc, #676]	@ (800f0f4 <_lite_kernel_nl_softmax_is8os8+0xb40>)
 800ee4e:	bf06      	itte	eq
 800ee50:	2100      	moveq	r1, #0
 800ee52:	f04f 4380 	moveq.w	r3, #1073741824	@ 0x40000000
 800ee56:	f04f 31ff 	movne.w	r1, #4294967295
 800ee5a:	fbc2 3100 	smlal	r3, r1, r2, r0
 800ee5e:	2900      	cmp	r1, #0
 800ee60:	da05      	bge.n	800ee6e <_lite_kernel_nl_softmax_is8os8+0x8ba>
 800ee62:	f06f 4200 	mvn.w	r2, #2147483648	@ 0x80000000
 800ee66:	189a      	adds	r2, r3, r2
 800ee68:	4613      	mov	r3, r2
 800ee6a:	f141 0100 	adc.w	r1, r1, #0
 800ee6e:	0fdb      	lsrs	r3, r3, #31
 800ee70:	2400      	movs	r4, #0
 800ee72:	ea43 0241 	orr.w	r2, r3, r1, lsl #1
 800ee76:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 800ee7a:	f042 417f 	orr.w	r1, r2, #4278190080	@ 0xff000000
 800ee7e:	014f      	lsls	r7, r1, #5
 800ee80:	1a89      	subs	r1, r1, r2
 800ee82:	f107 5780 	add.w	r7, r7, #268435456	@ 0x10000000
 800ee86:	fbc7 3407 	smlal	r3, r4, r7, r7
 800ee8a:	2c00      	cmp	r4, #0
 800ee8c:	ea4f 78e7 	mov.w	r8, r7, asr #31
 800ee90:	da05      	bge.n	800ee9e <_lite_kernel_nl_softmax_is8os8+0x8ea>
 800ee92:	f06f 4000 	mvn.w	r0, #2147483648	@ 0x80000000
 800ee96:	1818      	adds	r0, r3, r0
 800ee98:	4603      	mov	r3, r0
 800ee9a:	f144 0400 	adc.w	r4, r4, #0
 800ee9e:	0fdb      	lsrs	r3, r3, #31
 800eea0:	ea43 0344 	orr.w	r3, r3, r4, lsl #1
 800eea4:	17e4      	asrs	r4, r4, #31
 800eea6:	fba3 0e03 	umull	r0, lr, r3, r3
 800eeaa:	fb03 fa04 	mul.w	sl, r3, r4
 800eeae:	f110 4080 	adds.w	r0, r0, #1073741824	@ 0x40000000
 800eeb2:	eb4e 0e4a 	adc.w	lr, lr, sl, lsl #1
 800eeb6:	f1be 0f00 	cmp.w	lr, #0
 800eeba:	da06      	bge.n	800eeca <_lite_kernel_nl_softmax_is8os8+0x916>
 800eebc:	f06f 4a00 	mvn.w	sl, #2147483648	@ 0x80000000
 800eec0:	eb10 0a0a 	adds.w	sl, r0, sl
 800eec4:	4650      	mov	r0, sl
 800eec6:	f14e 0e00 	adc.w	lr, lr, #0
 800eeca:	0fc0      	lsrs	r0, r0, #31
 800eecc:	ea40 004e 	orr.w	r0, r0, lr, lsl #1
 800eed0:	ea5f 0ea0 	movs.w	lr, r0, asr #2
 800eed4:	f000 0003 	and.w	r0, r0, #3
 800eed8:	bf54      	ite	pl
 800eeda:	f04f 0a01 	movpl.w	sl, #1
 800eede:	f04f 0a02 	movmi.w	sl, #2
 800eee2:	4550      	cmp	r0, sl
 800eee4:	fb07 f004 	mul.w	r0, r7, r4
 800eee8:	ea87 0403 	eor.w	r4, r7, r3
 800eeec:	bfc8      	it	gt
 800eeee:	f10e 0e01 	addgt.w	lr, lr, #1
 800eef2:	fb03 0008 	mla	r0, r3, r8, r0
 800eef6:	0fe4      	lsrs	r4, r4, #31
 800eef8:	2c00      	cmp	r4, #0
 800eefa:	4c7e      	ldr	r4, [pc, #504]	@ (800f0f4 <_lite_kernel_nl_softmax_is8os8+0xb40>)
 800eefc:	bf0c      	ite	eq
 800eefe:	f04f 4880 	moveq.w	r8, #1073741824	@ 0x40000000
 800ef02:	46a0      	movne	r8, r4
 800ef04:	fba7 4b03 	umull	r4, fp, r7, r3
 800ef08:	bf0c      	ite	eq
 800ef0a:	f04f 0a00 	moveq.w	sl, #0
 800ef0e:	f04f 3aff 	movne.w	sl, #4294967295
 800ef12:	4458      	add	r0, fp
 800ef14:	eb14 0408 	adds.w	r4, r4, r8
 800ef18:	eb40 000a 	adc.w	r0, r0, sl
 800ef1c:	2800      	cmp	r0, #0
 800ef1e:	da06      	bge.n	800ef2e <_lite_kernel_nl_softmax_is8os8+0x97a>
 800ef20:	f06f 4800 	mvn.w	r8, #2147483648	@ 0x80000000
 800ef24:	eb14 0808 	adds.w	r8, r4, r8
 800ef28:	4644      	mov	r4, r8
 800ef2a:	f140 0000 	adc.w	r0, r0, #0
 800ef2e:	0fe4      	lsrs	r4, r4, #31
 800ef30:	4e71      	ldr	r6, [pc, #452]	@ (800f0f8 <_lite_kernel_nl_softmax_is8os8+0xb44>)
 800ef32:	ea44 0440 	orr.w	r4, r4, r0, lsl #1
 800ef36:	eb0e 0004 	add.w	r0, lr, r4
 800ef3a:	0fc4      	lsrs	r4, r0, #31
 800ef3c:	2c00      	cmp	r4, #0
 800ef3e:	4c6d      	ldr	r4, [pc, #436]	@ (800f0f4 <_lite_kernel_nl_softmax_is8os8+0xb40>)
 800ef40:	bf06      	itte	eq
 800ef42:	f04f 0e00 	moveq.w	lr, #0
 800ef46:	f04f 4480 	moveq.w	r4, #1073741824	@ 0x40000000
 800ef4a:	f04f 3eff 	movne.w	lr, #4294967295
 800ef4e:	fbc0 4e06 	smlal	r4, lr, r0, r6
 800ef52:	f1be 0f00 	cmp.w	lr, #0
 800ef56:	da05      	bge.n	800ef64 <_lite_kernel_nl_softmax_is8os8+0x9b0>
 800ef58:	f06f 4000 	mvn.w	r0, #2147483648	@ 0x80000000
 800ef5c:	1820      	adds	r0, r4, r0
 800ef5e:	4604      	mov	r4, r0
 800ef60:	f14e 0e00 	adc.w	lr, lr, #0
 800ef64:	0fe4      	lsrs	r4, r4, #31
 800ef66:	ea44 044e 	orr.w	r4, r4, lr, lsl #1
 800ef6a:	4423      	add	r3, r4
 800ef6c:	07de      	lsls	r6, r3, #31
 800ef6e:	ea4f 0463 	mov.w	r4, r3, asr #1
 800ef72:	d502      	bpl.n	800ef7a <_lite_kernel_nl_softmax_is8os8+0x9c6>
 800ef74:	2c00      	cmp	r4, #0
 800ef76:	bfa8      	it	ge
 800ef78:	3401      	addge	r4, #1
 800ef7a:	443c      	add	r4, r7
 800ef7c:	4e5f      	ldr	r6, [pc, #380]	@ (800f0fc <_lite_kernel_nl_softmax_is8os8+0xb48>)
 800ef7e:	0fe3      	lsrs	r3, r4, #31
 800ef80:	2b00      	cmp	r3, #0
 800ef82:	4b5c      	ldr	r3, [pc, #368]	@ (800f0f4 <_lite_kernel_nl_softmax_is8os8+0xb40>)
 800ef84:	bf0b      	itete	eq
 800ef86:	f04f 4080 	moveq.w	r0, #1073741824	@ 0x40000000
 800ef8a:	4618      	movne	r0, r3
 800ef8c:	2300      	moveq	r3, #0
 800ef8e:	f04f 33ff 	movne.w	r3, #4294967295
 800ef92:	fbc4 0306 	smlal	r0, r3, r4, r6
 800ef96:	2b00      	cmp	r3, #0
 800ef98:	da05      	bge.n	800efa6 <_lite_kernel_nl_softmax_is8os8+0x9f2>
 800ef9a:	f06f 4400 	mvn.w	r4, #2147483648	@ 0x80000000
 800ef9e:	1904      	adds	r4, r0, r4
 800efa0:	4620      	mov	r0, r4
 800efa2:	f143 0300 	adc.w	r3, r3, #0
 800efa6:	0fc0      	lsrs	r0, r0, #31
 800efa8:	2400      	movs	r4, #0
 800efaa:	f3c1 6700 	ubfx	r7, r1, #24, #1
 800efae:	4e54      	ldr	r6, [pc, #336]	@ (800f100 <_lite_kernel_nl_softmax_is8os8+0xb4c>)
 800efb0:	ea40 0043 	orr.w	r0, r0, r3, lsl #1
 800efb4:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 800efb8:	46a0      	mov	r8, r4
 800efba:	3f01      	subs	r7, #1
 800efbc:	f100 40e2 	add.w	r0, r0, #1895825408	@ 0x71000000
 800efc0:	469e      	mov	lr, r3
 800efc2:	fab2 f282 	clz	r2, r2
 800efc6:	f5a0 2025 	sub.w	r0, r0, #675840	@ 0xa5000
 800efca:	0952      	lsrs	r2, r2, #5
 800efcc:	f2a0 706c 	subw	r0, r0, #1900	@ 0x76c
 800efd0:	fbc0 e806 	smlal	lr, r8, r0, r6
 800efd4:	ea4f 7ede 	mov.w	lr, lr, lsr #31
 800efd8:	4007      	ands	r7, r0
 800efda:	f341 6000 	sbfx	r0, r1, #24, #1
 800efde:	ea4e 0e48 	orr.w	lr, lr, r8, lsl #1
 800efe2:	4e48      	ldr	r6, [pc, #288]	@ (800f104 <_lite_kernel_nl_softmax_is8os8+0xb50>)
 800efe4:	46a0      	mov	r8, r4
 800efe6:	ea00 000e 	and.w	r0, r0, lr
 800efea:	469e      	mov	lr, r3
 800efec:	4078      	eors	r0, r7
 800efee:	f3c1 6740 	ubfx	r7, r1, #25, #1
 800eff2:	fbc0 e806 	smlal	lr, r8, r0, r6
 800eff6:	3f01      	subs	r7, #1
 800eff8:	ea4f 7ede 	mov.w	lr, lr, lsr #31
 800effc:	4e42      	ldr	r6, [pc, #264]	@ (800f108 <_lite_kernel_nl_softmax_is8os8+0xb54>)
 800effe:	4007      	ands	r7, r0
 800f000:	f341 6040 	sbfx	r0, r1, #25, #1
 800f004:	ea4e 0e48 	orr.w	lr, lr, r8, lsl #1
 800f008:	46a0      	mov	r8, r4
 800f00a:	ea00 000e 	and.w	r0, r0, lr
 800f00e:	469e      	mov	lr, r3
 800f010:	4078      	eors	r0, r7
 800f012:	f3c1 6780 	ubfx	r7, r1, #26, #1
 800f016:	fbc0 e806 	smlal	lr, r8, r0, r6
 800f01a:	3f01      	subs	r7, #1
 800f01c:	ea4f 7ede 	mov.w	lr, lr, lsr #31
 800f020:	4e3a      	ldr	r6, [pc, #232]	@ (800f10c <_lite_kernel_nl_softmax_is8os8+0xb58>)
 800f022:	4007      	ands	r7, r0
 800f024:	f341 6080 	sbfx	r0, r1, #26, #1
 800f028:	ea4e 0e48 	orr.w	lr, lr, r8, lsl #1
 800f02c:	46a0      	mov	r8, r4
 800f02e:	ea00 000e 	and.w	r0, r0, lr
 800f032:	469e      	mov	lr, r3
 800f034:	4078      	eors	r0, r7
 800f036:	f3c1 67c0 	ubfx	r7, r1, #27, #1
 800f03a:	fbc0 e806 	smlal	lr, r8, r0, r6
 800f03e:	3f01      	subs	r7, #1
 800f040:	ea4f 7ede 	mov.w	lr, lr, lsr #31
 800f044:	4e32      	ldr	r6, [pc, #200]	@ (800f110 <_lite_kernel_nl_softmax_is8os8+0xb5c>)
 800f046:	4007      	ands	r7, r0
 800f048:	f341 60c0 	sbfx	r0, r1, #27, #1
 800f04c:	ea4e 0e48 	orr.w	lr, lr, r8, lsl #1
 800f050:	46a0      	mov	r8, r4
 800f052:	ea00 000e 	and.w	r0, r0, lr
 800f056:	469e      	mov	lr, r3
 800f058:	4078      	eors	r0, r7
 800f05a:	f3c1 7700 	ubfx	r7, r1, #28, #1
 800f05e:	fbc0 e806 	smlal	lr, r8, r0, r6
 800f062:	3f01      	subs	r7, #1
 800f064:	ea4f 7ede 	mov.w	lr, lr, lsr #31
 800f068:	4e2a      	ldr	r6, [pc, #168]	@ (800f114 <_lite_kernel_nl_softmax_is8os8+0xb60>)
 800f06a:	4007      	ands	r7, r0
 800f06c:	f341 7000 	sbfx	r0, r1, #28, #1
 800f070:	ea4e 0e48 	orr.w	lr, lr, r8, lsl #1
 800f074:	46a0      	mov	r8, r4
 800f076:	ea00 000e 	and.w	r0, r0, lr
 800f07a:	469e      	mov	lr, r3
 800f07c:	4078      	eors	r0, r7
 800f07e:	f3c1 7740 	ubfx	r7, r1, #29, #1
 800f082:	fbc0 e806 	smlal	lr, r8, r0, r6
 800f086:	3f01      	subs	r7, #1
 800f088:	ea4f 7ede 	mov.w	lr, lr, lsr #31
 800f08c:	4007      	ands	r7, r0
 800f08e:	f341 7040 	sbfx	r0, r1, #29, #1
 800f092:	ea4e 0e48 	orr.w	lr, lr, r8, lsl #1
 800f096:	ea00 000e 	and.w	r0, r0, lr
 800f09a:	4078      	eors	r0, r7
 800f09c:	27f2      	movs	r7, #242	@ 0xf2
 800f09e:	fbc0 3407 	smlal	r3, r4, r0, r7
 800f0a2:	0fdb      	lsrs	r3, r3, #31
 800f0a4:	ea43 0344 	orr.w	r3, r3, r4, lsl #1
 800f0a8:	f3c1 7480 	ubfx	r4, r1, #30, #1
 800f0ac:	f341 7180 	sbfx	r1, r1, #30, #1
 800f0b0:	3c01      	subs	r4, #1
 800f0b2:	4019      	ands	r1, r3
 800f0b4:	1e53      	subs	r3, r2, #1
 800f0b6:	4004      	ands	r4, r0
 800f0b8:	4252      	negs	r2, r2
 800f0ba:	4061      	eors	r1, r4
 800f0bc:	f022 4200 	bic.w	r2, r2, #2147483648	@ 0x80000000
 800f0c0:	400b      	ands	r3, r1
 800f0c2:	4053      	eors	r3, r2
 800f0c4:	9a1c      	ldr	r2, [sp, #112]	@ 0x70
 800f0c6:	f842 302c 	str.w	r3, [r2, ip, lsl #2]
 800f0ca:	9b01      	ldr	r3, [sp, #4]
 800f0cc:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800f0ce:	3302      	adds	r3, #2
 800f0d0:	1a9b      	subs	r3, r3, r2
 800f0d2:	9a02      	ldr	r2, [sp, #8]
 800f0d4:	429a      	cmp	r2, r3
 800f0d6:	f63f aea7 	bhi.w	800ee28 <_lite_kernel_nl_softmax_is8os8+0x874>
 800f0da:	9f04      	ldr	r7, [sp, #16]
 800f0dc:	f8dd a060 	ldr.w	sl, [sp, #96]	@ 0x60
 800f0e0:	f7ff bbcb 	b.w	800e87a <_lite_kernel_nl_softmax_is8os8+0x2c6>
 800f0e4:	2900      	cmp	r1, #0
 800f0e6:	f43f abc8 	beq.w	800e87a <_lite_kernel_nl_softmax_is8os8+0x2c6>
 800f0ea:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800f0ec:	1e58      	subs	r0, r3, #1
 800f0ee:	e697      	b.n	800ee20 <_lite_kernel_nl_softmax_is8os8+0x86c>
 800f0f0:	005e      	lsls	r6, r3, #1
 800f0f2:	e629      	b.n	800ed48 <_lite_kernel_nl_softmax_is8os8+0x794>
 800f0f4:	c0000001 	.word	0xc0000001
 800f0f8:	2aaaaaab 	.word	0x2aaaaaab
 800f0fc:	70f5a894 	.word	0x70f5a894
 800f100:	63afbe7b 	.word	0x63afbe7b
 800f104:	4da2cbf2 	.word	0x4da2cbf2
 800f108:	2f16ac6c 	.word	0x2f16ac6c
 800f10c:	1152aaa4 	.word	0x1152aaa4
 800f110:	02582ab7 	.word	0x02582ab7
 800f114:	000afe11 	.word	0x000afe11

0800f118 <_lite_kernel_nl_softmax_iu8ou8>:
 800f118:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800f11c:	b09d      	sub	sp, #116	@ 0x74
 800f11e:	4698      	mov	r8, r3
 800f120:	e9cd 0117 	strd	r0, r1, [sp, #92]	@ 0x5c
 800f124:	9b2a      	ldr	r3, [sp, #168]	@ 0xa8
 800f126:	921b      	str	r2, [sp, #108]	@ 0x6c
 800f128:	2a00      	cmp	r2, #0
 800f12a:	f000 83d8 	beq.w	800f8de <_lite_kernel_nl_softmax_iu8ou8+0x7c6>
 800f12e:	9a26      	ldr	r2, [sp, #152]	@ 0x98
 800f130:	fb02 f208 	mul.w	r2, r2, r8
 800f134:	921a      	str	r2, [sp, #104]	@ 0x68
 800f136:	f1b8 0f00 	cmp.w	r8, #0
 800f13a:	f000 83d0 	beq.w	800f8de <_lite_kernel_nl_softmax_iu8ou8+0x7c6>
 800f13e:	2200      	movs	r2, #0
 800f140:	3b04      	subs	r3, #4
 800f142:	f8cd 8004 	str.w	r8, [sp, #4]
 800f146:	9219      	str	r2, [sp, #100]	@ 0x64
 800f148:	9a26      	ldr	r2, [sp, #152]	@ 0x98
 800f14a:	9314      	str	r3, [sp, #80]	@ 0x50
 800f14c:	eb03 0382 	add.w	r3, r3, r2, lsl #2
 800f150:	9316      	str	r3, [sp, #88]	@ 0x58
 800f152:	9b17      	ldr	r3, [sp, #92]	@ 0x5c
 800f154:	9a01      	ldr	r2, [sp, #4]
 800f156:	9313      	str	r3, [sp, #76]	@ 0x4c
 800f158:	9b18      	ldr	r3, [sp, #96]	@ 0x60
 800f15a:	9312      	str	r3, [sp, #72]	@ 0x48
 800f15c:	4413      	add	r3, r2
 800f15e:	9315      	str	r3, [sp, #84]	@ 0x54
 800f160:	9b12      	ldr	r3, [sp, #72]	@ 0x48
 800f162:	9a26      	ldr	r2, [sp, #152]	@ 0x98
 800f164:	7819      	ldrb	r1, [r3, #0]
 800f166:	2a01      	cmp	r2, #1
 800f168:	9110      	str	r1, [sp, #64]	@ 0x40
 800f16a:	f240 83cf 	bls.w	800f90c <_lite_kernel_nl_softmax_iu8ou8+0x7f4>
 800f16e:	9c01      	ldr	r4, [sp, #4]
 800f170:	4615      	mov	r5, r2
 800f172:	191a      	adds	r2, r3, r4
 800f174:	2301      	movs	r3, #1
 800f176:	7810      	ldrb	r0, [r2, #0]
 800f178:	3301      	adds	r3, #1
 800f17a:	4422      	add	r2, r4
 800f17c:	4281      	cmp	r1, r0
 800f17e:	bfb8      	it	lt
 800f180:	4601      	movlt	r1, r0
 800f182:	429d      	cmp	r5, r3
 800f184:	d1f7      	bne.n	800f176 <_lite_kernel_nl_softmax_iu8ou8+0x5e>
 800f186:	9b29      	ldr	r3, [sp, #164]	@ 0xa4
 800f188:	9110      	str	r1, [sp, #64]	@ 0x40
 800f18a:	440b      	add	r3, r1
 800f18c:	9303      	str	r3, [sp, #12]
 800f18e:	2300      	movs	r3, #0
 800f190:	f8dd a048 	ldr.w	sl, [sp, #72]	@ 0x48
 800f194:	9a14      	ldr	r2, [sp, #80]	@ 0x50
 800f196:	469b      	mov	fp, r3
 800f198:	46d4      	mov	ip, sl
 800f19a:	4699      	mov	r9, r3
 800f19c:	9302      	str	r3, [sp, #8]
 800f19e:	9200      	str	r2, [sp, #0]
 800f1a0:	e103      	b.n	800f3aa <_lite_kernel_nl_softmax_iu8ou8+0x292>
 800f1a2:	9a10      	ldr	r2, [sp, #64]	@ 0x40
 800f1a4:	1a9b      	subs	r3, r3, r2
 800f1a6:	9a28      	ldr	r2, [sp, #160]	@ 0xa0
 800f1a8:	4093      	lsls	r3, r2
 800f1aa:	9a27      	ldr	r2, [sp, #156]	@ 0x9c
 800f1ac:	405a      	eors	r2, r3
 800f1ae:	0fd2      	lsrs	r2, r2, #31
 800f1b0:	2a00      	cmp	r2, #0
 800f1b2:	4ac6      	ldr	r2, [pc, #792]	@ (800f4cc <_lite_kernel_nl_softmax_iu8ou8+0x3b4>)
 800f1b4:	bf0b      	itete	eq
 800f1b6:	f04f 4180 	moveq.w	r1, #1073741824	@ 0x40000000
 800f1ba:	4611      	movne	r1, r2
 800f1bc:	2200      	moveq	r2, #0
 800f1be:	f04f 32ff 	movne.w	r2, #4294967295
 800f1c2:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 800f1c6:	f040 80f8 	bne.w	800f3ba <_lite_kernel_nl_softmax_iu8ou8+0x2a2>
 800f1ca:	9827      	ldr	r0, [sp, #156]	@ 0x9c
 800f1cc:	4298      	cmp	r0, r3
 800f1ce:	f040 80f4 	bne.w	800f3ba <_lite_kernel_nl_softmax_iu8ou8+0x2a2>
 800f1d2:	4bbf      	ldr	r3, [pc, #764]	@ (800f4d0 <_lite_kernel_nl_softmax_iu8ou8+0x3b8>)
 800f1d4:	2200      	movs	r2, #0
 800f1d6:	f04f 36ff 	mov.w	r6, #4294967295
 800f1da:	4dbe      	ldr	r5, [pc, #760]	@ (800f4d4 <_lite_kernel_nl_softmax_iu8ou8+0x3bc>)
 800f1dc:	930e      	str	r3, [sp, #56]	@ 0x38
 800f1de:	f44f 3100 	mov.w	r1, #131072	@ 0x20000
 800f1e2:	4bbd      	ldr	r3, [pc, #756]	@ (800f4d8 <_lite_kernel_nl_softmax_iu8ou8+0x3c0>)
 800f1e4:	4696      	mov	lr, r2
 800f1e6:	4637      	mov	r7, r6
 800f1e8:	46b3      	mov	fp, r6
 800f1ea:	930f      	str	r3, [sp, #60]	@ 0x3c
 800f1ec:	46b0      	mov	r8, r6
 800f1ee:	4bbb      	ldr	r3, [pc, #748]	@ (800f4dc <_lite_kernel_nl_softmax_iu8ou8+0x3c4>)
 800f1f0:	4614      	mov	r4, r2
 800f1f2:	4692      	mov	sl, r2
 800f1f4:	2001      	movs	r0, #1
 800f1f6:	9207      	str	r2, [sp, #28]
 800f1f8:	9204      	str	r2, [sp, #16]
 800f1fa:	e9cd 220c 	strd	r2, r2, [sp, #48]	@ 0x30
 800f1fe:	e9cd 660a 	strd	r6, r6, [sp, #40]	@ 0x28
 800f202:	e9cd 6608 	strd	r6, r6, [sp, #32]
 800f206:	e9cd 2205 	strd	r2, r2, [sp, #20]
 800f20a:	4282      	cmp	r2, r0
 800f20c:	4aaf      	ldr	r2, [pc, #700]	@ (800f4cc <_lite_kernel_nl_softmax_iu8ou8+0x3b4>)
 800f20e:	980f      	ldr	r0, [sp, #60]	@ 0x3c
 800f210:	bfc8      	it	gt
 800f212:	3101      	addgt	r1, #1
 800f214:	f1be 0f00 	cmp.w	lr, #0
 800f218:	bf06      	itte	eq
 800f21a:	f04f 4280 	moveq.w	r2, #1073741824	@ 0x40000000
 800f21e:	f04f 0e00 	moveq.w	lr, #0
 800f222:	f04f 3eff 	movne.w	lr, #4294967295
 800f226:	1882      	adds	r2, r0, r2
 800f228:	eb43 0e0e 	adc.w	lr, r3, lr
 800f22c:	f1be 0f00 	cmp.w	lr, #0
 800f230:	da05      	bge.n	800f23e <_lite_kernel_nl_softmax_iu8ou8+0x126>
 800f232:	f06f 4300 	mvn.w	r3, #2147483648	@ 0x80000000
 800f236:	18d3      	adds	r3, r2, r3
 800f238:	461a      	mov	r2, r3
 800f23a:	f14e 0e00 	adc.w	lr, lr, #0
 800f23e:	0fd2      	lsrs	r2, r2, #31
 800f240:	48a7      	ldr	r0, [pc, #668]	@ (800f4e0 <_lite_kernel_nl_softmax_iu8ou8+0x3c8>)
 800f242:	ea42 024e 	orr.w	r2, r2, lr, lsl #1
 800f246:	440a      	add	r2, r1
 800f248:	0fd3      	lsrs	r3, r2, #31
 800f24a:	2b00      	cmp	r3, #0
 800f24c:	4b9f      	ldr	r3, [pc, #636]	@ (800f4cc <_lite_kernel_nl_softmax_iu8ou8+0x3b4>)
 800f24e:	bf06      	itte	eq
 800f250:	2100      	moveq	r1, #0
 800f252:	f04f 4380 	moveq.w	r3, #1073741824	@ 0x40000000
 800f256:	f04f 31ff 	movne.w	r1, #4294967295
 800f25a:	fbc2 3100 	smlal	r3, r1, r2, r0
 800f25e:	2900      	cmp	r1, #0
 800f260:	da05      	bge.n	800f26e <_lite_kernel_nl_softmax_iu8ou8+0x156>
 800f262:	f06f 4200 	mvn.w	r2, #2147483648	@ 0x80000000
 800f266:	189a      	adds	r2, r3, r2
 800f268:	4613      	mov	r3, r2
 800f26a:	f141 0100 	adc.w	r1, r1, #0
 800f26e:	0fdb      	lsrs	r3, r3, #31
 800f270:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 800f272:	ea43 0341 	orr.w	r3, r3, r1, lsl #1
 800f276:	441a      	add	r2, r3
 800f278:	07d0      	lsls	r0, r2, #31
 800f27a:	ea4f 0362 	mov.w	r3, r2, asr #1
 800f27e:	d502      	bpl.n	800f286 <_lite_kernel_nl_softmax_iu8ou8+0x16e>
 800f280:	2b00      	cmp	r3, #0
 800f282:	bfa8      	it	ge
 800f284:	3301      	addge	r3, #1
 800f286:	442b      	add	r3, r5
 800f288:	4896      	ldr	r0, [pc, #600]	@ (800f4e4 <_lite_kernel_nl_softmax_iu8ou8+0x3cc>)
 800f28a:	0fda      	lsrs	r2, r3, #31
 800f28c:	2a00      	cmp	r2, #0
 800f28e:	4a8f      	ldr	r2, [pc, #572]	@ (800f4cc <_lite_kernel_nl_softmax_iu8ou8+0x3b4>)
 800f290:	bf06      	itte	eq
 800f292:	2100      	moveq	r1, #0
 800f294:	f04f 4280 	moveq.w	r2, #1073741824	@ 0x40000000
 800f298:	f04f 31ff 	movne.w	r1, #4294967295
 800f29c:	fbc3 2100 	smlal	r2, r1, r3, r0
 800f2a0:	2900      	cmp	r1, #0
 800f2a2:	da05      	bge.n	800f2b0 <_lite_kernel_nl_softmax_iu8ou8+0x198>
 800f2a4:	f06f 4300 	mvn.w	r3, #2147483648	@ 0x80000000
 800f2a8:	18d3      	adds	r3, r2, r3
 800f2aa:	461a      	mov	r2, r3
 800f2ac:	f141 0100 	adc.w	r1, r1, #0
 800f2b0:	0fd2      	lsrs	r2, r2, #31
 800f2b2:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 800f2b6:	488c      	ldr	r0, [pc, #560]	@ (800f4e8 <_lite_kernel_nl_softmax_iu8ou8+0x3d0>)
 800f2b8:	ea42 0241 	orr.w	r2, r2, r1, lsl #1
 800f2bc:	2100      	movs	r1, #0
 800f2be:	461d      	mov	r5, r3
 800f2c0:	f102 42e2 	add.w	r2, r2, #1895825408	@ 0x71000000
 800f2c4:	468e      	mov	lr, r1
 800f2c6:	f5a2 2225 	sub.w	r2, r2, #675840	@ 0xa5000
 800f2ca:	f2a2 726c 	subw	r2, r2, #1900	@ 0x76c
 800f2ce:	fbc2 5e00 	smlal	r5, lr, r2, r0
 800f2d2:	0fed      	lsrs	r5, r5, #31
 800f2d4:	ea08 0802 	and.w	r8, r8, r2
 800f2d8:	4884      	ldr	r0, [pc, #528]	@ (800f4ec <_lite_kernel_nl_softmax_iu8ou8+0x3d4>)
 800f2da:	ea45 054e 	orr.w	r5, r5, lr, lsl #1
 800f2de:	461a      	mov	r2, r3
 800f2e0:	402c      	ands	r4, r5
 800f2e2:	460d      	mov	r5, r1
 800f2e4:	ea88 0404 	eor.w	r4, r8, r4
 800f2e8:	fbc4 2500 	smlal	r2, r5, r4, r0
 800f2ec:	0fd2      	lsrs	r2, r2, #31
 800f2ee:	9807      	ldr	r0, [sp, #28]
 800f2f0:	4027      	ands	r7, r4
 800f2f2:	ea42 0245 	orr.w	r2, r2, r5, lsl #1
 800f2f6:	460c      	mov	r4, r1
 800f2f8:	4d7d      	ldr	r5, [pc, #500]	@ (800f4f0 <_lite_kernel_nl_softmax_iu8ou8+0x3d8>)
 800f2fa:	4010      	ands	r0, r2
 800f2fc:	461a      	mov	r2, r3
 800f2fe:	4078      	eors	r0, r7
 800f300:	4f7c      	ldr	r7, [pc, #496]	@ (800f4f4 <_lite_kernel_nl_softmax_iu8ou8+0x3dc>)
 800f302:	fbc0 2405 	smlal	r2, r4, r0, r5
 800f306:	0fd2      	lsrs	r2, r2, #31
 800f308:	ea0b 0b00 	and.w	fp, fp, r0
 800f30c:	4d7a      	ldr	r5, [pc, #488]	@ (800f4f8 <_lite_kernel_nl_softmax_iu8ou8+0x3e0>)
 800f30e:	ea42 0244 	orr.w	r2, r2, r4, lsl #1
 800f312:	460c      	mov	r4, r1
 800f314:	ea0a 0a02 	and.w	sl, sl, r2
 800f318:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800f31a:	ea8b 0a0a 	eor.w	sl, fp, sl
 800f31e:	ea02 000a 	and.w	r0, r2, sl
 800f322:	461a      	mov	r2, r3
 800f324:	fbca 2405 	smlal	r2, r4, sl, r5
 800f328:	0fd2      	lsrs	r2, r2, #31
 800f32a:	460d      	mov	r5, r1
 800f32c:	ea42 0244 	orr.w	r2, r2, r4, lsl #1
 800f330:	9c0c      	ldr	r4, [sp, #48]	@ 0x30
 800f332:	4014      	ands	r4, r2
 800f334:	4622      	mov	r2, r4
 800f336:	9c0a      	ldr	r4, [sp, #40]	@ 0x28
 800f338:	4042      	eors	r2, r0
 800f33a:	4618      	mov	r0, r3
 800f33c:	fbc2 0507 	smlal	r0, r5, r2, r7
 800f340:	0fc0      	lsrs	r0, r0, #31
 800f342:	4014      	ands	r4, r2
 800f344:	9a06      	ldr	r2, [sp, #24]
 800f346:	ea40 0045 	orr.w	r0, r0, r5, lsl #1
 800f34a:	4f6c      	ldr	r7, [pc, #432]	@ (800f4fc <_lite_kernel_nl_softmax_iu8ou8+0x3e4>)
 800f34c:	460d      	mov	r5, r1
 800f34e:	4002      	ands	r2, r0
 800f350:	4618      	mov	r0, r3
 800f352:	4062      	eors	r2, r4
 800f354:	9c0b      	ldr	r4, [sp, #44]	@ 0x2c
 800f356:	fbc2 0507 	smlal	r0, r5, r2, r7
 800f35a:	0fc0      	lsrs	r0, r0, #31
 800f35c:	4014      	ands	r4, r2
 800f35e:	9a05      	ldr	r2, [sp, #20]
 800f360:	ea40 0045 	orr.w	r0, r0, r5, lsl #1
 800f364:	4002      	ands	r2, r0
 800f366:	20f2      	movs	r0, #242	@ 0xf2
 800f368:	4062      	eors	r2, r4
 800f36a:	fbc2 3100 	smlal	r3, r1, r2, r0
 800f36e:	0fdb      	lsrs	r3, r3, #31
 800f370:	4032      	ands	r2, r6
 800f372:	ea43 0341 	orr.w	r3, r3, r1, lsl #1
 800f376:	9904      	ldr	r1, [sp, #16]
 800f378:	4019      	ands	r1, r3
 800f37a:	9b08      	ldr	r3, [sp, #32]
 800f37c:	404a      	eors	r2, r1
 800f37e:	401a      	ands	r2, r3
 800f380:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 800f382:	405a      	eors	r2, r3
 800f384:	1313      	asrs	r3, r2, #12
 800f386:	0511      	lsls	r1, r2, #20
 800f388:	9902      	ldr	r1, [sp, #8]
 800f38a:	bf48      	it	mi
 800f38c:	3301      	addmi	r3, #1
 800f38e:	4419      	add	r1, r3
 800f390:	9102      	str	r1, [sp, #8]
 800f392:	9b00      	ldr	r3, [sp, #0]
 800f394:	f109 0901 	add.w	r9, r9, #1
 800f398:	f843 2f04 	str.w	r2, [r3, #4]!
 800f39c:	9300      	str	r3, [sp, #0]
 800f39e:	9b01      	ldr	r3, [sp, #4]
 800f3a0:	449c      	add	ip, r3
 800f3a2:	9b26      	ldr	r3, [sp, #152]	@ 0x98
 800f3a4:	454b      	cmp	r3, r9
 800f3a6:	f240 80ab 	bls.w	800f500 <_lite_kernel_nl_softmax_iu8ou8+0x3e8>
 800f3aa:	f89c 3000 	ldrb.w	r3, [ip]
 800f3ae:	9a03      	ldr	r2, [sp, #12]
 800f3b0:	429a      	cmp	r2, r3
 800f3b2:	f77f aef6 	ble.w	800f1a2 <_lite_kernel_nl_softmax_iu8ou8+0x8a>
 800f3b6:	2200      	movs	r2, #0
 800f3b8:	e7eb      	b.n	800f392 <_lite_kernel_nl_softmax_iu8ou8+0x27a>
 800f3ba:	9827      	ldr	r0, [sp, #156]	@ 0x9c
 800f3bc:	fbc3 1200 	smlal	r1, r2, r3, r0
 800f3c0:	2a00      	cmp	r2, #0
 800f3c2:	da04      	bge.n	800f3ce <_lite_kernel_nl_softmax_iu8ou8+0x2b6>
 800f3c4:	f06f 4300 	mvn.w	r3, #2147483648	@ 0x80000000
 800f3c8:	18c9      	adds	r1, r1, r3
 800f3ca:	f142 0200 	adc.w	r2, r2, #0
 800f3ce:	0fc9      	lsrs	r1, r1, #31
 800f3d0:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 800f3d4:	2600      	movs	r6, #0
 800f3d6:	ea41 0142 	orr.w	r1, r1, r2, lsl #1
 800f3da:	f041 477f 	orr.w	r7, r1, #4278190080	@ 0xff000000
 800f3de:	017d      	lsls	r5, r7, #5
 800f3e0:	1a7f      	subs	r7, r7, r1
 800f3e2:	f105 5580 	add.w	r5, r5, #268435456	@ 0x10000000
 800f3e6:	fbc5 3605 	smlal	r3, r6, r5, r5
 800f3ea:	2e00      	cmp	r6, #0
 800f3ec:	da05      	bge.n	800f3fa <_lite_kernel_nl_softmax_iu8ou8+0x2e2>
 800f3ee:	f06f 4200 	mvn.w	r2, #2147483648	@ 0x80000000
 800f3f2:	189a      	adds	r2, r3, r2
 800f3f4:	4613      	mov	r3, r2
 800f3f6:	f146 0600 	adc.w	r6, r6, #0
 800f3fa:	0fdb      	lsrs	r3, r3, #31
 800f3fc:	ea43 0346 	orr.w	r3, r3, r6, lsl #1
 800f400:	17f6      	asrs	r6, r6, #31
 800f402:	fba3 2003 	umull	r2, r0, r3, r3
 800f406:	fb03 f406 	mul.w	r4, r3, r6
 800f40a:	f112 4280 	adds.w	r2, r2, #1073741824	@ 0x40000000
 800f40e:	930e      	str	r3, [sp, #56]	@ 0x38
 800f410:	eb40 0044 	adc.w	r0, r0, r4, lsl #1
 800f414:	2800      	cmp	r0, #0
 800f416:	da05      	bge.n	800f424 <_lite_kernel_nl_softmax_iu8ou8+0x30c>
 800f418:	f06f 4400 	mvn.w	r4, #2147483648	@ 0x80000000
 800f41c:	1914      	adds	r4, r2, r4
 800f41e:	4622      	mov	r2, r4
 800f420:	f140 0000 	adc.w	r0, r0, #0
 800f424:	0fd2      	lsrs	r2, r2, #31
 800f426:	f3c7 6400 	ubfx	r4, r7, #24, #1
 800f42a:	fb05 f606 	mul.w	r6, r5, r6
 800f42e:	ea83 0e05 	eor.w	lr, r3, r5
 800f432:	ea42 0240 	orr.w	r2, r2, r0, lsl #1
 800f436:	9411      	str	r4, [sp, #68]	@ 0x44
 800f438:	17e8      	asrs	r0, r5, #31
 800f43a:	fab1 f181 	clz	r1, r1
 800f43e:	f3c7 7b80 	ubfx	fp, r7, #30, #1
 800f442:	f3c7 7a40 	ubfx	sl, r7, #29, #1
 800f446:	fb03 6600 	mla	r6, r3, r0, r6
 800f44a:	0949      	lsrs	r1, r1, #5
 800f44c:	fba5 4303 	umull	r4, r3, r5, r3
 800f450:	f3c7 7000 	ubfx	r0, r7, #28, #1
 800f454:	f3c7 6880 	ubfx	r8, r7, #26, #1
 800f458:	ea4f 7ede 	mov.w	lr, lr, lsr #31
 800f45c:	940f      	str	r4, [sp, #60]	@ 0x3c
 800f45e:	f347 64c0 	sbfx	r4, r7, #27, #1
 800f462:	4433      	add	r3, r6
 800f464:	424e      	negs	r6, r1
 800f466:	940c      	str	r4, [sp, #48]	@ 0x30
 800f468:	3901      	subs	r1, #1
 800f46a:	f1cb 0400 	rsb	r4, fp, #0
 800f46e:	9006      	str	r0, [sp, #24]
 800f470:	9108      	str	r1, [sp, #32]
 800f472:	f026 4100 	bic.w	r1, r6, #2147483648	@ 0x80000000
 800f476:	9404      	str	r4, [sp, #16]
 800f478:	f10a 34ff 	add.w	r4, sl, #4294967295
 800f47c:	f3c7 6040 	ubfx	r0, r7, #25, #1
 800f480:	910d      	str	r1, [sp, #52]	@ 0x34
 800f482:	940b      	str	r4, [sp, #44]	@ 0x2c
 800f484:	f3c7 61c0 	ubfx	r1, r7, #27, #1
 800f488:	f1ca 0400 	rsb	r4, sl, #0
 800f48c:	9f06      	ldr	r7, [sp, #24]
 800f48e:	3901      	subs	r1, #1
 800f490:	f10b 36ff 	add.w	r6, fp, #4294967295
 800f494:	9405      	str	r4, [sp, #20]
 800f496:	1e7c      	subs	r4, r7, #1
 800f498:	9109      	str	r1, [sp, #36]	@ 0x24
 800f49a:	1091      	asrs	r1, r2, #2
 800f49c:	940a      	str	r4, [sp, #40]	@ 0x28
 800f49e:	f1c7 0400 	rsb	r4, r7, #0
 800f4a2:	f100 37ff 	add.w	r7, r0, #4294967295
 800f4a6:	f1c0 0000 	rsb	r0, r0, #0
 800f4aa:	f108 3bff 	add.w	fp, r8, #4294967295
 800f4ae:	f1c8 0a00 	rsb	sl, r8, #0
 800f4b2:	9007      	str	r0, [sp, #28]
 800f4b4:	f002 0203 	and.w	r2, r2, #3
 800f4b8:	9811      	ldr	r0, [sp, #68]	@ 0x44
 800f4ba:	9406      	str	r4, [sp, #24]
 800f4bc:	f100 38ff 	add.w	r8, r0, #4294967295
 800f4c0:	f1c0 0400 	rsb	r4, r0, #0
 800f4c4:	bf54      	ite	pl
 800f4c6:	2001      	movpl	r0, #1
 800f4c8:	2002      	movmi	r0, #2
 800f4ca:	e69e      	b.n	800f20a <_lite_kernel_nl_softmax_iu8ou8+0xf2>
 800f4cc:	c0000001 	.word	0xc0000001
 800f4d0:	01fffff8 	.word	0x01fffff8
 800f4d4:	0fffffe0 	.word	0x0fffffe0
 800f4d8:	40000100 	.word	0x40000100
 800f4dc:	001fffff 	.word	0x001fffff
 800f4e0:	2aaaaaab 	.word	0x2aaaaaab
 800f4e4:	70f5a894 	.word	0x70f5a894
 800f4e8:	63afbe7b 	.word	0x63afbe7b
 800f4ec:	4da2cbf2 	.word	0x4da2cbf2
 800f4f0:	2f16ac6c 	.word	0x2f16ac6c
 800f4f4:	02582ab7 	.word	0x02582ab7
 800f4f8:	1152aaa4 	.word	0x1152aaa4
 800f4fc:	000afe11 	.word	0x000afe11
 800f500:	9b02      	ldr	r3, [sp, #8]
 800f502:	2b00      	cmp	r3, #0
 800f504:	f000 8203 	beq.w	800f90e <_lite_kernel_nl_softmax_iu8ou8+0x7f6>
 800f508:	fab3 f983 	clz	r9, r3
 800f50c:	fa03 f209 	lsl.w	r2, r3, r9
 800f510:	f1c9 0a23 	rsb	sl, r9, #35	@ 0x23
 800f514:	f102 4300 	add.w	r3, r2, #2147483648	@ 0x80000000
 800f518:	17d9      	asrs	r1, r3, #31
 800f51a:	f1b1 3fff 	cmp.w	r1, #4294967295
 800f51e:	bf08      	it	eq
 800f520:	2a00      	cmpeq	r2, #0
 800f522:	f000 81f8 	beq.w	800f916 <_lite_kernel_nl_softmax_iu8ou8+0x7fe>
 800f526:	f113 4300 	adds.w	r3, r3, #2147483648	@ 0x80000000
 800f52a:	4ac3      	ldr	r2, [pc, #780]	@ (800f838 <_lite_kernel_nl_softmax_iu8ou8+0x720>)
 800f52c:	4dc3      	ldr	r5, [pc, #780]	@ (800f83c <_lite_kernel_nl_softmax_iu8ou8+0x724>)
 800f52e:	f141 0100 	adc.w	r1, r1, #0
 800f532:	085b      	lsrs	r3, r3, #1
 800f534:	ea43 73c1 	orr.w	r3, r3, r1, lsl #31
 800f538:	1049      	asrs	r1, r1, #1
 800f53a:	4258      	negs	r0, r3
 800f53c:	469c      	mov	ip, r3
 800f53e:	fb02 0001 	mla	r0, r2, r1, r0
 800f542:	fba3 2402 	umull	r2, r4, r3, r2
 800f546:	1952      	adds	r2, r2, r5
 800f548:	4420      	add	r0, r4
 800f54a:	f160 0000 	sbc.w	r0, r0, #0
 800f54e:	2800      	cmp	r0, #0
 800f550:	da05      	bge.n	800f55e <_lite_kernel_nl_softmax_iu8ou8+0x446>
 800f552:	f06f 4400 	mvn.w	r4, #2147483648	@ 0x80000000
 800f556:	1914      	adds	r4, r2, r4
 800f558:	4622      	mov	r2, r4
 800f55a:	f140 0000 	adc.w	r0, r0, #0
 800f55e:	0fd2      	lsrs	r2, r2, #31
 800f560:	ea42 0440 	orr.w	r4, r2, r0, lsl #1
 800f564:	f104 365a 	add.w	r6, r4, #1515870810	@ 0x5a5a5a5a
 800f568:	17f0      	asrs	r0, r6, #31
 800f56a:	fba3 2706 	umull	r2, r7, r3, r6
 800f56e:	4635      	mov	r5, r6
 800f570:	fb03 fe00 	mul.w	lr, r3, r0
 800f574:	f112 4280 	adds.w	r2, r2, #1073741824	@ 0x40000000
 800f578:	fb06 ee01 	mla	lr, r6, r1, lr
 800f57c:	eb4e 0707 	adc.w	r7, lr, r7
 800f580:	2f00      	cmp	r7, #0
 800f582:	da06      	bge.n	800f592 <_lite_kernel_nl_softmax_iu8ou8+0x47a>
 800f584:	f06f 4e00 	mvn.w	lr, #2147483648	@ 0x80000000
 800f588:	eb12 0e0e 	adds.w	lr, r2, lr
 800f58c:	4672      	mov	r2, lr
 800f58e:	f147 0700 	adc.w	r7, r7, #0
 800f592:	0fd2      	lsrs	r2, r2, #31
 800f594:	ea42 0247 	orr.w	r2, r2, r7, lsl #1
 800f598:	4fa8      	ldr	r7, [pc, #672]	@ (800f83c <_lite_kernel_nl_softmax_iu8ou8+0x724>)
 800f59a:	f1c2 5200 	rsb	r2, r2, #536870912	@ 0x20000000
 800f59e:	ea82 0e06 	eor.w	lr, r2, r6
 800f5a2:	ea4f 7ede 	mov.w	lr, lr, lsr #31
 800f5a6:	f1be 0f00 	cmp.w	lr, #0
 800f5aa:	bf06      	itte	eq
 800f5ac:	f04f 4780 	moveq.w	r7, #1073741824	@ 0x40000000
 800f5b0:	f04f 0800 	moveq.w	r8, #0
 800f5b4:	f04f 38ff 	movne.w	r8, #4294967295
 800f5b8:	fb02 f000 	mul.w	r0, r2, r0
 800f5bc:	ea4f 7ee2 	mov.w	lr, r2, asr #31
 800f5c0:	fb05 000e 	mla	r0, r5, lr, r0
 800f5c4:	fba2 2505 	umull	r2, r5, r2, r5
 800f5c8:	19d2      	adds	r2, r2, r7
 800f5ca:	4428      	add	r0, r5
 800f5cc:	eb40 0508 	adc.w	r5, r0, r8
 800f5d0:	2d00      	cmp	r5, #0
 800f5d2:	da05      	bge.n	800f5e0 <_lite_kernel_nl_softmax_iu8ou8+0x4c8>
 800f5d4:	f06f 4000 	mvn.w	r0, #2147483648	@ 0x80000000
 800f5d8:	1810      	adds	r0, r2, r0
 800f5da:	4602      	mov	r2, r0
 800f5dc:	f145 0500 	adc.w	r5, r5, #0
 800f5e0:	0fd2      	lsrs	r2, r2, #31
 800f5e2:	ea42 0245 	orr.w	r2, r2, r5, lsl #1
 800f5e6:	f1b2 4f60 	cmp.w	r2, #3758096384	@ 0xe0000000
 800f5ea:	dd7f      	ble.n	800f6ec <_lite_kernel_nl_softmax_iu8ou8+0x5d4>
 800f5ec:	eb06 0082 	add.w	r0, r6, r2, lsl #2
 800f5f0:	4e92      	ldr	r6, [pc, #584]	@ (800f83c <_lite_kernel_nl_softmax_iu8ou8+0x724>)
 800f5f2:	ea80 020c 	eor.w	r2, r0, ip
 800f5f6:	17c4      	asrs	r4, r0, #31
 800f5f8:	fb00 f501 	mul.w	r5, r0, r1
 800f5fc:	0fd2      	lsrs	r2, r2, #31
 800f5fe:	fb03 5504 	mla	r5, r3, r4, r5
 800f602:	2a00      	cmp	r2, #0
 800f604:	fba0 2e03 	umull	r2, lr, r0, r3
 800f608:	bf06      	itte	eq
 800f60a:	f04f 4680 	moveq.w	r6, #1073741824	@ 0x40000000
 800f60e:	2700      	moveq	r7, #0
 800f610:	f04f 37ff 	movne.w	r7, #4294967295
 800f614:	4475      	add	r5, lr
 800f616:	1992      	adds	r2, r2, r6
 800f618:	eb45 0507 	adc.w	r5, r5, r7
 800f61c:	2d00      	cmp	r5, #0
 800f61e:	da05      	bge.n	800f62c <_lite_kernel_nl_softmax_iu8ou8+0x514>
 800f620:	f06f 4600 	mvn.w	r6, #2147483648	@ 0x80000000
 800f624:	1996      	adds	r6, r2, r6
 800f626:	4632      	mov	r2, r6
 800f628:	f145 0500 	adc.w	r5, r5, #0
 800f62c:	0fd2      	lsrs	r2, r2, #31
 800f62e:	ea42 0245 	orr.w	r2, r2, r5, lsl #1
 800f632:	4d82      	ldr	r5, [pc, #520]	@ (800f83c <_lite_kernel_nl_softmax_iu8ou8+0x724>)
 800f634:	f1c2 5200 	rsb	r2, r2, #536870912	@ 0x20000000
 800f638:	ea80 0602 	eor.w	r6, r0, r2
 800f63c:	0ff6      	lsrs	r6, r6, #31
 800f63e:	2e00      	cmp	r6, #0
 800f640:	bf06      	itte	eq
 800f642:	f04f 4580 	moveq.w	r5, #1073741824	@ 0x40000000
 800f646:	2600      	moveq	r6, #0
 800f648:	f04f 36ff 	movne.w	r6, #4294967295
 800f64c:	fb02 f404 	mul.w	r4, r2, r4
 800f650:	17d7      	asrs	r7, r2, #31
 800f652:	fb00 4407 	mla	r4, r0, r7, r4
 800f656:	fba2 2700 	umull	r2, r7, r2, r0
 800f65a:	1952      	adds	r2, r2, r5
 800f65c:	443c      	add	r4, r7
 800f65e:	eb44 0406 	adc.w	r4, r4, r6
 800f662:	2c00      	cmp	r4, #0
 800f664:	da05      	bge.n	800f672 <_lite_kernel_nl_softmax_iu8ou8+0x55a>
 800f666:	f06f 4500 	mvn.w	r5, #2147483648	@ 0x80000000
 800f66a:	1955      	adds	r5, r2, r5
 800f66c:	462a      	mov	r2, r5
 800f66e:	f144 0400 	adc.w	r4, r4, #0
 800f672:	0fd2      	lsrs	r2, r2, #31
 800f674:	ea42 0244 	orr.w	r2, r2, r4, lsl #1
 800f678:	f1b2 5f00 	cmp.w	r2, #536870912	@ 0x20000000
 800f67c:	db65      	blt.n	800f74a <_lite_kernel_nl_softmax_iu8ou8+0x632>
 800f67e:	f06f 4400 	mvn.w	r4, #2147483648	@ 0x80000000
 800f682:	1902      	adds	r2, r0, r4
 800f684:	ea92 0f0c 	teq	r2, ip
 800f688:	f140 813c 	bpl.w	800f904 <_lite_kernel_nl_softmax_iu8ou8+0x7ec>
 800f68c:	4c6b      	ldr	r4, [pc, #428]	@ (800f83c <_lite_kernel_nl_softmax_iu8ou8+0x724>)
 800f68e:	f04f 35ff 	mov.w	r5, #4294967295
 800f692:	fb02 f101 	mul.w	r1, r2, r1
 800f696:	17d0      	asrs	r0, r2, #31
 800f698:	fb03 1100 	mla	r1, r3, r0, r1
 800f69c:	fba2 3603 	umull	r3, r6, r2, r3
 800f6a0:	191b      	adds	r3, r3, r4
 800f6a2:	4431      	add	r1, r6
 800f6a4:	eb41 0105 	adc.w	r1, r1, r5
 800f6a8:	2900      	cmp	r1, #0
 800f6aa:	da05      	bge.n	800f6b8 <_lite_kernel_nl_softmax_iu8ou8+0x5a0>
 800f6ac:	f06f 4400 	mvn.w	r4, #2147483648	@ 0x80000000
 800f6b0:	191c      	adds	r4, r3, r4
 800f6b2:	4623      	mov	r3, r4
 800f6b4:	f141 0100 	adc.w	r1, r1, #0
 800f6b8:	0fdb      	lsrs	r3, r3, #31
 800f6ba:	ea43 0341 	orr.w	r3, r3, r1, lsl #1
 800f6be:	495f      	ldr	r1, [pc, #380]	@ (800f83c <_lite_kernel_nl_softmax_iu8ou8+0x724>)
 800f6c0:	f1c3 5300 	rsb	r3, r3, #536870912	@ 0x20000000
 800f6c4:	ea83 0402 	eor.w	r4, r3, r2
 800f6c8:	0fe4      	lsrs	r4, r4, #31
 800f6ca:	2c00      	cmp	r4, #0
 800f6cc:	bf06      	itte	eq
 800f6ce:	f04f 4180 	moveq.w	r1, #1073741824	@ 0x40000000
 800f6d2:	2400      	moveq	r4, #0
 800f6d4:	f04f 34ff 	movne.w	r4, #4294967295
 800f6d8:	4293      	cmp	r3, r2
 800f6da:	d15d      	bne.n	800f798 <_lite_kernel_nl_softmax_iu8ou8+0x680>
 800f6dc:	f1b2 4f00 	cmp.w	r2, #2147483648	@ 0x80000000
 800f6e0:	d15a      	bne.n	800f798 <_lite_kernel_nl_softmax_iu8ou8+0x680>
 800f6e2:	f06f 4100 	mvn.w	r1, #2147483648	@ 0x80000000
 800f6e6:	4411      	add	r1, r2
 800f6e8:	0049      	lsls	r1, r1, #1
 800f6ea:	e076      	b.n	800f7da <_lite_kernel_nl_softmax_iu8ou8+0x6c2>
 800f6ec:	4854      	ldr	r0, [pc, #336]	@ (800f840 <_lite_kernel_nl_softmax_iu8ou8+0x728>)
 800f6ee:	4420      	add	r0, r4
 800f6f0:	ea90 0f0c 	teq	r0, ip
 800f6f4:	f140 811d 	bpl.w	800f932 <_lite_kernel_nl_softmax_iu8ou8+0x81a>
 800f6f8:	17c2      	asrs	r2, r0, #31
 800f6fa:	fb00 f401 	mul.w	r4, r0, r1
 800f6fe:	4d4f      	ldr	r5, [pc, #316]	@ (800f83c <_lite_kernel_nl_softmax_iu8ou8+0x724>)
 800f700:	fb03 4402 	mla	r4, r3, r2, r4
 800f704:	fba0 2603 	umull	r2, r6, r0, r3
 800f708:	1952      	adds	r2, r2, r5
 800f70a:	4434      	add	r4, r6
 800f70c:	f164 0500 	sbc.w	r5, r4, #0
 800f710:	2d00      	cmp	r5, #0
 800f712:	da05      	bge.n	800f720 <_lite_kernel_nl_softmax_iu8ou8+0x608>
 800f714:	f06f 4400 	mvn.w	r4, #2147483648	@ 0x80000000
 800f718:	1914      	adds	r4, r2, r4
 800f71a:	4622      	mov	r2, r4
 800f71c:	f145 0500 	adc.w	r5, r5, #0
 800f720:	0fd2      	lsrs	r2, r2, #31
 800f722:	ea42 0245 	orr.w	r2, r2, r5, lsl #1
 800f726:	f04f 35ff 	mov.w	r5, #4294967295
 800f72a:	f1c2 5400 	rsb	r4, r2, #536870912	@ 0x20000000
 800f72e:	4a43      	ldr	r2, [pc, #268]	@ (800f83c <_lite_kernel_nl_softmax_iu8ou8+0x724>)
 800f730:	fbc0 2504 	smlal	r2, r5, r0, r4
 800f734:	2d00      	cmp	r5, #0
 800f736:	da05      	bge.n	800f744 <_lite_kernel_nl_softmax_iu8ou8+0x62c>
 800f738:	f06f 4400 	mvn.w	r4, #2147483648	@ 0x80000000
 800f73c:	1914      	adds	r4, r2, r4
 800f73e:	4622      	mov	r2, r4
 800f740:	f145 0500 	adc.w	r5, r5, #0
 800f744:	0fd2      	lsrs	r2, r2, #31
 800f746:	ea42 0245 	orr.w	r2, r2, r5, lsl #1
 800f74a:	f1b2 4f60 	cmp.w	r2, #3758096384	@ 0xe0000000
 800f74e:	ea4f 0482 	mov.w	r4, r2, lsl #2
 800f752:	dc96      	bgt.n	800f682 <_lite_kernel_nl_softmax_iu8ou8+0x56a>
 800f754:	f100 4200 	add.w	r2, r0, #2147483648	@ 0x80000000
 800f758:	ea92 0f0c 	teq	r2, ip
 800f75c:	f140 80d2 	bpl.w	800f904 <_lite_kernel_nl_softmax_iu8ou8+0x7ec>
 800f760:	fb02 f101 	mul.w	r1, r2, r1
 800f764:	17d0      	asrs	r0, r2, #31
 800f766:	fb03 1100 	mla	r1, r3, r0, r1
 800f76a:	fba2 4303 	umull	r4, r3, r2, r3
 800f76e:	4419      	add	r1, r3
 800f770:	4b32      	ldr	r3, [pc, #200]	@ (800f83c <_lite_kernel_nl_softmax_iu8ou8+0x724>)
 800f772:	18e3      	adds	r3, r4, r3
 800f774:	f161 0100 	sbc.w	r1, r1, #0
 800f778:	2900      	cmp	r1, #0
 800f77a:	da05      	bge.n	800f788 <_lite_kernel_nl_softmax_iu8ou8+0x670>
 800f77c:	f06f 4400 	mvn.w	r4, #2147483648	@ 0x80000000
 800f780:	191c      	adds	r4, r3, r4
 800f782:	4623      	mov	r3, r4
 800f784:	f141 0100 	adc.w	r1, r1, #0
 800f788:	0fdb      	lsrs	r3, r3, #31
 800f78a:	f04f 34ff 	mov.w	r4, #4294967295
 800f78e:	ea43 0341 	orr.w	r3, r3, r1, lsl #1
 800f792:	492a      	ldr	r1, [pc, #168]	@ (800f83c <_lite_kernel_nl_softmax_iu8ou8+0x724>)
 800f794:	f1c3 5300 	rsb	r3, r3, #536870912	@ 0x20000000
 800f798:	fb03 f000 	mul.w	r0, r3, r0
 800f79c:	17dd      	asrs	r5, r3, #31
 800f79e:	fb02 0005 	mla	r0, r2, r5, r0
 800f7a2:	fba3 3502 	umull	r3, r5, r3, r2
 800f7a6:	185b      	adds	r3, r3, r1
 800f7a8:	4428      	add	r0, r5
 800f7aa:	eb40 0004 	adc.w	r0, r0, r4
 800f7ae:	2800      	cmp	r0, #0
 800f7b0:	da05      	bge.n	800f7be <_lite_kernel_nl_softmax_iu8ou8+0x6a6>
 800f7b2:	f06f 4100 	mvn.w	r1, #2147483648	@ 0x80000000
 800f7b6:	1859      	adds	r1, r3, r1
 800f7b8:	460b      	mov	r3, r1
 800f7ba:	f140 0000 	adc.w	r0, r0, #0
 800f7be:	0fdb      	lsrs	r3, r3, #31
 800f7c0:	ea43 0340 	orr.w	r3, r3, r0, lsl #1
 800f7c4:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800f7c8:	f2c0 8090 	blt.w	800f8ec <_lite_kernel_nl_softmax_iu8ou8+0x7d4>
 800f7cc:	f06f 4300 	mvn.w	r3, #2147483648	@ 0x80000000
 800f7d0:	18d1      	adds	r1, r2, r3
 800f7d2:	f1b1 4f80 	cmp.w	r1, #1073741824	@ 0x40000000
 800f7d6:	db87      	blt.n	800f6e8 <_lite_kernel_nl_softmax_iu8ou8+0x5d0>
 800f7d8:	4619      	mov	r1, r3
 800f7da:	f1ba 0f1f 	cmp.w	sl, #31
 800f7de:	dd04      	ble.n	800f7ea <_lite_kernel_nl_softmax_iu8ou8+0x6d2>
 800f7e0:	f1c9 0304 	rsb	r3, r9, #4
 800f7e4:	f04f 0a1f 	mov.w	sl, #31
 800f7e8:	4119      	asrs	r1, r3
 800f7ea:	9b26      	ldr	r3, [sp, #152]	@ 0x98
 800f7ec:	2b00      	cmp	r3, #0
 800f7ee:	d05e      	beq.n	800f8ae <_lite_kernel_nl_softmax_iu8ou8+0x796>
 800f7f0:	2501      	movs	r5, #1
 800f7f2:	f1a1 4e00 	sub.w	lr, r1, #2147483648	@ 0x80000000
 800f7f6:	f06f 4700 	mvn.w	r7, #2147483648	@ 0x80000000
 800f7fa:	9c14      	ldr	r4, [sp, #80]	@ 0x50
 800f7fc:	fa05 f50a 	lsl.w	r5, r5, sl
 800f800:	fabe fe8e 	clz	lr, lr
 800f804:	fa47 f90a 	asr.w	r9, r7, sl
 800f808:	9703      	str	r7, [sp, #12]
 800f80a:	3d01      	subs	r5, #1
 800f80c:	ea4f 1e5e 	mov.w	lr, lr, lsr #5
 800f810:	f8cd 9008 	str.w	r9, [sp, #8]
 800f814:	ea05 0307 	and.w	r3, r5, r7
 800f818:	ea4f 0c65 	mov.w	ip, r5, asr #1
 800f81c:	9813      	ldr	r0, [sp, #76]	@ 0x4c
 800f81e:	f10c 0801 	add.w	r8, ip, #1
 800f822:	9300      	str	r3, [sp, #0]
 800f824:	4673      	mov	r3, lr
 800f826:	4e05      	ldr	r6, [pc, #20]	@ (800f83c <_lite_kernel_nl_softmax_iu8ou8+0x724>)
 800f828:	4647      	mov	r7, r8
 800f82a:	46ae      	mov	lr, r5
 800f82c:	f8dd 9058 	ldr.w	r9, [sp, #88]	@ 0x58
 800f830:	461d      	mov	r5, r3
 800f832:	f8dd 8004 	ldr.w	r8, [sp, #4]
 800f836:	e012      	b.n	800f85e <_lite_kernel_nl_softmax_iu8ou8+0x746>
 800f838:	c3c3c3c4 	.word	0xc3c3c3c4
 800f83c:	c0000001 	.word	0xc0000001
 800f840:	da5a5a5a 	.word	0xda5a5a5a
 800f844:	b1dd      	cbz	r5, 800f87e <_lite_kernel_nl_softmax_iu8ou8+0x766>
 800f846:	9b02      	ldr	r3, [sp, #8]
 800f848:	9a00      	ldr	r2, [sp, #0]
 800f84a:	4594      	cmp	ip, r2
 800f84c:	da00      	bge.n	800f850 <_lite_kernel_nl_softmax_iu8ou8+0x738>
 800f84e:	3301      	adds	r3, #1
 800f850:	2bfe      	cmp	r3, #254	@ 0xfe
 800f852:	dd47      	ble.n	800f8e4 <_lite_kernel_nl_softmax_iu8ou8+0x7cc>
 800f854:	23ff      	movs	r3, #255	@ 0xff
 800f856:	45a1      	cmp	r9, r4
 800f858:	7003      	strb	r3, [r0, #0]
 800f85a:	4440      	add	r0, r8
 800f85c:	d027      	beq.n	800f8ae <_lite_kernel_nl_softmax_iu8ou8+0x796>
 800f85e:	f854 2f04 	ldr.w	r2, [r4, #4]!
 800f862:	ea81 0302 	eor.w	r3, r1, r2
 800f866:	0fdb      	lsrs	r3, r3, #31
 800f868:	2b00      	cmp	r3, #0
 800f86a:	bf0b      	itete	eq
 800f86c:	f04f 4380 	moveq.w	r3, #1073741824	@ 0x40000000
 800f870:	4633      	movne	r3, r6
 800f872:	f04f 0b00 	moveq.w	fp, #0
 800f876:	f04f 3bff 	movne.w	fp, #4294967295
 800f87a:	4291      	cmp	r1, r2
 800f87c:	d0e2      	beq.n	800f844 <_lite_kernel_nl_softmax_iu8ou8+0x72c>
 800f87e:	fbc2 3b01 	smlal	r3, fp, r2, r1
 800f882:	f1bb 0f00 	cmp.w	fp, #0
 800f886:	da03      	bge.n	800f890 <_lite_kernel_nl_softmax_iu8ou8+0x778>
 800f888:	9a03      	ldr	r2, [sp, #12]
 800f88a:	189b      	adds	r3, r3, r2
 800f88c:	f14b 0b00 	adc.w	fp, fp, #0
 800f890:	0fdb      	lsrs	r3, r3, #31
 800f892:	ea43 034b 	orr.w	r3, r3, fp, lsl #1
 800f896:	ea0e 0203 	and.w	r2, lr, r3
 800f89a:	fa53 f30a 	asrs.w	r3, r3, sl
 800f89e:	d5d4      	bpl.n	800f84a <_lite_kernel_nl_softmax_iu8ou8+0x732>
 800f8a0:	4297      	cmp	r7, r2
 800f8a2:	dbd4      	blt.n	800f84e <_lite_kernel_nl_softmax_iu8ou8+0x736>
 800f8a4:	2300      	movs	r3, #0
 800f8a6:	45a1      	cmp	r9, r4
 800f8a8:	7003      	strb	r3, [r0, #0]
 800f8aa:	4440      	add	r0, r8
 800f8ac:	d1d7      	bne.n	800f85e <_lite_kernel_nl_softmax_iu8ou8+0x746>
 800f8ae:	9a13      	ldr	r2, [sp, #76]	@ 0x4c
 800f8b0:	9b12      	ldr	r3, [sp, #72]	@ 0x48
 800f8b2:	3201      	adds	r2, #1
 800f8b4:	3301      	adds	r3, #1
 800f8b6:	9213      	str	r2, [sp, #76]	@ 0x4c
 800f8b8:	9a15      	ldr	r2, [sp, #84]	@ 0x54
 800f8ba:	9312      	str	r3, [sp, #72]	@ 0x48
 800f8bc:	4293      	cmp	r3, r2
 800f8be:	f47f ac4f 	bne.w	800f160 <_lite_kernel_nl_softmax_iu8ou8+0x48>
 800f8c2:	9a18      	ldr	r2, [sp, #96]	@ 0x60
 800f8c4:	991a      	ldr	r1, [sp, #104]	@ 0x68
 800f8c6:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 800f8c8:	440a      	add	r2, r1
 800f8ca:	3301      	adds	r3, #1
 800f8cc:	9218      	str	r2, [sp, #96]	@ 0x60
 800f8ce:	9a17      	ldr	r2, [sp, #92]	@ 0x5c
 800f8d0:	9319      	str	r3, [sp, #100]	@ 0x64
 800f8d2:	440a      	add	r2, r1
 800f8d4:	9217      	str	r2, [sp, #92]	@ 0x5c
 800f8d6:	9a1b      	ldr	r2, [sp, #108]	@ 0x6c
 800f8d8:	429a      	cmp	r2, r3
 800f8da:	f47f ac3a 	bne.w	800f152 <_lite_kernel_nl_softmax_iu8ou8+0x3a>
 800f8de:	b01d      	add	sp, #116	@ 0x74
 800f8e0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800f8e4:	2b00      	cmp	r3, #0
 800f8e6:	dddd      	ble.n	800f8a4 <_lite_kernel_nl_softmax_iu8ou8+0x78c>
 800f8e8:	b2db      	uxtb	r3, r3
 800f8ea:	e7b4      	b.n	800f856 <_lite_kernel_nl_softmax_iu8ou8+0x73e>
 800f8ec:	f1b3 4f60 	cmp.w	r3, #3758096384	@ 0xe0000000
 800f8f0:	dc3b      	bgt.n	800f96a <_lite_kernel_nl_softmax_iu8ou8+0x852>
 800f8f2:	f102 4300 	add.w	r3, r2, #2147483648	@ 0x80000000
 800f8f6:	0051      	lsls	r1, r2, #1
 800f8f8:	f1b3 4f40 	cmp.w	r3, #3221225472	@ 0xc0000000
 800f8fc:	bfd8      	it	le
 800f8fe:	f04f 4100 	movle.w	r1, #2147483648	@ 0x80000000
 800f902:	e76a      	b.n	800f7da <_lite_kernel_nl_softmax_iu8ou8+0x6c2>
 800f904:	f04f 4480 	mov.w	r4, #1073741824	@ 0x40000000
 800f908:	2500      	movs	r5, #0
 800f90a:	e6c2      	b.n	800f692 <_lite_kernel_nl_softmax_iu8ou8+0x57a>
 800f90c:	bbba      	cbnz	r2, 800f97e <_lite_kernel_nl_softmax_iu8ou8+0x866>
 800f90e:	f04f 0a03 	mov.w	sl, #3
 800f912:	f04f 0920 	mov.w	r9, #32
 800f916:	2000      	movs	r0, #0
 800f918:	f04f 33ff 	mov.w	r3, #4294967295
 800f91c:	f04f 355a 	mov.w	r5, #1515870810	@ 0x5a5a5a5a
 800f920:	4a19      	ldr	r2, [pc, #100]	@ (800f988 <_lite_kernel_nl_softmax_iu8ou8+0x870>)
 800f922:	4604      	mov	r4, r0
 800f924:	4619      	mov	r1, r3
 800f926:	462e      	mov	r6, r5
 800f928:	469c      	mov	ip, r3
 800f92a:	f04f 4780 	mov.w	r7, #1073741824	@ 0x40000000
 800f92e:	4680      	mov	r8, r0
 800f930:	e642      	b.n	800f5b8 <_lite_kernel_nl_softmax_iu8ou8+0x4a0>
 800f932:	17c4      	asrs	r4, r0, #31
 800f934:	fba3 2500 	umull	r2, r5, r3, r0
 800f938:	fb03 f604 	mul.w	r6, r3, r4
 800f93c:	f112 4280 	adds.w	r2, r2, #1073741824	@ 0x40000000
 800f940:	fb00 6601 	mla	r6, r0, r1, r6
 800f944:	eb46 0505 	adc.w	r5, r6, r5
 800f948:	2d00      	cmp	r5, #0
 800f94a:	da05      	bge.n	800f958 <_lite_kernel_nl_softmax_iu8ou8+0x840>
 800f94c:	f06f 4600 	mvn.w	r6, #2147483648	@ 0x80000000
 800f950:	1996      	adds	r6, r2, r6
 800f952:	4632      	mov	r2, r6
 800f954:	f145 0500 	adc.w	r5, r5, #0
 800f958:	0fd2      	lsrs	r2, r2, #31
 800f95a:	f04f 36ff 	mov.w	r6, #4294967295
 800f95e:	ea42 0245 	orr.w	r2, r2, r5, lsl #1
 800f962:	4d0a      	ldr	r5, [pc, #40]	@ (800f98c <_lite_kernel_nl_softmax_iu8ou8+0x874>)
 800f964:	f1c2 5200 	rsb	r2, r2, #536870912	@ 0x20000000
 800f968:	e670      	b.n	800f64c <_lite_kernel_nl_softmax_iu8ou8+0x534>
 800f96a:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 800f96e:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800f972:	db02      	blt.n	800f97a <_lite_kernel_nl_softmax_iu8ou8+0x862>
 800f974:	f06f 4100 	mvn.w	r1, #2147483648	@ 0x80000000
 800f978:	e72f      	b.n	800f7da <_lite_kernel_nl_softmax_iu8ou8+0x6c2>
 800f97a:	0059      	lsls	r1, r3, #1
 800f97c:	e7bc      	b.n	800f8f8 <_lite_kernel_nl_softmax_iu8ou8+0x7e0>
 800f97e:	9b29      	ldr	r3, [sp, #164]	@ 0xa4
 800f980:	9a10      	ldr	r2, [sp, #64]	@ 0x40
 800f982:	4413      	add	r3, r2
 800f984:	9303      	str	r3, [sp, #12]
 800f986:	e402      	b.n	800f18e <_lite_kernel_nl_softmax_iu8ou8+0x76>
 800f988:	20000001 	.word	0x20000001
 800f98c:	c0000001 	.word	0xc0000001

0800f990 <atoi>:
 800f990:	220a      	movs	r2, #10
 800f992:	2100      	movs	r1, #0
 800f994:	f000 b9ca 	b.w	800fd2c <strtol>

0800f998 <malloc>:
 800f998:	4b02      	ldr	r3, [pc, #8]	@ (800f9a4 <malloc+0xc>)
 800f99a:	4601      	mov	r1, r0
 800f99c:	6818      	ldr	r0, [r3, #0]
 800f99e:	f000 b825 	b.w	800f9ec <_malloc_r>
 800f9a2:	bf00      	nop
 800f9a4:	2003c544 	.word	0x2003c544

0800f9a8 <sbrk_aligned>:
 800f9a8:	b570      	push	{r4, r5, r6, lr}
 800f9aa:	4e0f      	ldr	r6, [pc, #60]	@ (800f9e8 <sbrk_aligned+0x40>)
 800f9ac:	460c      	mov	r4, r1
 800f9ae:	6831      	ldr	r1, [r6, #0]
 800f9b0:	4605      	mov	r5, r0
 800f9b2:	b911      	cbnz	r1, 800f9ba <sbrk_aligned+0x12>
 800f9b4:	f000 fb38 	bl	8010028 <_sbrk_r>
 800f9b8:	6030      	str	r0, [r6, #0]
 800f9ba:	4621      	mov	r1, r4
 800f9bc:	4628      	mov	r0, r5
 800f9be:	f000 fb33 	bl	8010028 <_sbrk_r>
 800f9c2:	1c43      	adds	r3, r0, #1
 800f9c4:	d103      	bne.n	800f9ce <sbrk_aligned+0x26>
 800f9c6:	f04f 34ff 	mov.w	r4, #4294967295
 800f9ca:	4620      	mov	r0, r4
 800f9cc:	bd70      	pop	{r4, r5, r6, pc}
 800f9ce:	1cc4      	adds	r4, r0, #3
 800f9d0:	f024 0403 	bic.w	r4, r4, #3
 800f9d4:	42a0      	cmp	r0, r4
 800f9d6:	d0f8      	beq.n	800f9ca <sbrk_aligned+0x22>
 800f9d8:	1a21      	subs	r1, r4, r0
 800f9da:	4628      	mov	r0, r5
 800f9dc:	f000 fb24 	bl	8010028 <_sbrk_r>
 800f9e0:	3001      	adds	r0, #1
 800f9e2:	d1f2      	bne.n	800f9ca <sbrk_aligned+0x22>
 800f9e4:	e7ef      	b.n	800f9c6 <sbrk_aligned+0x1e>
 800f9e6:	bf00      	nop
 800f9e8:	20043d40 	.word	0x20043d40

0800f9ec <_malloc_r>:
 800f9ec:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800f9f0:	1ccd      	adds	r5, r1, #3
 800f9f2:	f025 0503 	bic.w	r5, r5, #3
 800f9f6:	3508      	adds	r5, #8
 800f9f8:	2d0c      	cmp	r5, #12
 800f9fa:	bf38      	it	cc
 800f9fc:	250c      	movcc	r5, #12
 800f9fe:	2d00      	cmp	r5, #0
 800fa00:	4606      	mov	r6, r0
 800fa02:	db01      	blt.n	800fa08 <_malloc_r+0x1c>
 800fa04:	42a9      	cmp	r1, r5
 800fa06:	d904      	bls.n	800fa12 <_malloc_r+0x26>
 800fa08:	230c      	movs	r3, #12
 800fa0a:	6033      	str	r3, [r6, #0]
 800fa0c:	2000      	movs	r0, #0
 800fa0e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800fa12:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 800fae8 <_malloc_r+0xfc>
 800fa16:	f000 f869 	bl	800faec <__malloc_lock>
 800fa1a:	f8d8 3000 	ldr.w	r3, [r8]
 800fa1e:	461c      	mov	r4, r3
 800fa20:	bb44      	cbnz	r4, 800fa74 <_malloc_r+0x88>
 800fa22:	4629      	mov	r1, r5
 800fa24:	4630      	mov	r0, r6
 800fa26:	f7ff ffbf 	bl	800f9a8 <sbrk_aligned>
 800fa2a:	1c43      	adds	r3, r0, #1
 800fa2c:	4604      	mov	r4, r0
 800fa2e:	d158      	bne.n	800fae2 <_malloc_r+0xf6>
 800fa30:	f8d8 4000 	ldr.w	r4, [r8]
 800fa34:	4627      	mov	r7, r4
 800fa36:	2f00      	cmp	r7, #0
 800fa38:	d143      	bne.n	800fac2 <_malloc_r+0xd6>
 800fa3a:	2c00      	cmp	r4, #0
 800fa3c:	d04b      	beq.n	800fad6 <_malloc_r+0xea>
 800fa3e:	6823      	ldr	r3, [r4, #0]
 800fa40:	4639      	mov	r1, r7
 800fa42:	4630      	mov	r0, r6
 800fa44:	eb04 0903 	add.w	r9, r4, r3
 800fa48:	f000 faee 	bl	8010028 <_sbrk_r>
 800fa4c:	4581      	cmp	r9, r0
 800fa4e:	d142      	bne.n	800fad6 <_malloc_r+0xea>
 800fa50:	6821      	ldr	r1, [r4, #0]
 800fa52:	1a6d      	subs	r5, r5, r1
 800fa54:	4629      	mov	r1, r5
 800fa56:	4630      	mov	r0, r6
 800fa58:	f7ff ffa6 	bl	800f9a8 <sbrk_aligned>
 800fa5c:	3001      	adds	r0, #1
 800fa5e:	d03a      	beq.n	800fad6 <_malloc_r+0xea>
 800fa60:	6823      	ldr	r3, [r4, #0]
 800fa62:	442b      	add	r3, r5
 800fa64:	6023      	str	r3, [r4, #0]
 800fa66:	f8d8 3000 	ldr.w	r3, [r8]
 800fa6a:	685a      	ldr	r2, [r3, #4]
 800fa6c:	bb62      	cbnz	r2, 800fac8 <_malloc_r+0xdc>
 800fa6e:	f8c8 7000 	str.w	r7, [r8]
 800fa72:	e00f      	b.n	800fa94 <_malloc_r+0xa8>
 800fa74:	6822      	ldr	r2, [r4, #0]
 800fa76:	1b52      	subs	r2, r2, r5
 800fa78:	d420      	bmi.n	800fabc <_malloc_r+0xd0>
 800fa7a:	2a0b      	cmp	r2, #11
 800fa7c:	d917      	bls.n	800faae <_malloc_r+0xc2>
 800fa7e:	1961      	adds	r1, r4, r5
 800fa80:	42a3      	cmp	r3, r4
 800fa82:	6025      	str	r5, [r4, #0]
 800fa84:	bf18      	it	ne
 800fa86:	6059      	strne	r1, [r3, #4]
 800fa88:	6863      	ldr	r3, [r4, #4]
 800fa8a:	bf08      	it	eq
 800fa8c:	f8c8 1000 	streq.w	r1, [r8]
 800fa90:	5162      	str	r2, [r4, r5]
 800fa92:	604b      	str	r3, [r1, #4]
 800fa94:	4630      	mov	r0, r6
 800fa96:	f000 f82f 	bl	800faf8 <__malloc_unlock>
 800fa9a:	f104 000b 	add.w	r0, r4, #11
 800fa9e:	1d23      	adds	r3, r4, #4
 800faa0:	f020 0007 	bic.w	r0, r0, #7
 800faa4:	1ac2      	subs	r2, r0, r3
 800faa6:	bf1c      	itt	ne
 800faa8:	1a1b      	subne	r3, r3, r0
 800faaa:	50a3      	strne	r3, [r4, r2]
 800faac:	e7af      	b.n	800fa0e <_malloc_r+0x22>
 800faae:	6862      	ldr	r2, [r4, #4]
 800fab0:	42a3      	cmp	r3, r4
 800fab2:	bf0c      	ite	eq
 800fab4:	f8c8 2000 	streq.w	r2, [r8]
 800fab8:	605a      	strne	r2, [r3, #4]
 800faba:	e7eb      	b.n	800fa94 <_malloc_r+0xa8>
 800fabc:	4623      	mov	r3, r4
 800fabe:	6864      	ldr	r4, [r4, #4]
 800fac0:	e7ae      	b.n	800fa20 <_malloc_r+0x34>
 800fac2:	463c      	mov	r4, r7
 800fac4:	687f      	ldr	r7, [r7, #4]
 800fac6:	e7b6      	b.n	800fa36 <_malloc_r+0x4a>
 800fac8:	461a      	mov	r2, r3
 800faca:	685b      	ldr	r3, [r3, #4]
 800facc:	42a3      	cmp	r3, r4
 800face:	d1fb      	bne.n	800fac8 <_malloc_r+0xdc>
 800fad0:	2300      	movs	r3, #0
 800fad2:	6053      	str	r3, [r2, #4]
 800fad4:	e7de      	b.n	800fa94 <_malloc_r+0xa8>
 800fad6:	230c      	movs	r3, #12
 800fad8:	6033      	str	r3, [r6, #0]
 800fada:	4630      	mov	r0, r6
 800fadc:	f000 f80c 	bl	800faf8 <__malloc_unlock>
 800fae0:	e794      	b.n	800fa0c <_malloc_r+0x20>
 800fae2:	6005      	str	r5, [r0, #0]
 800fae4:	e7d6      	b.n	800fa94 <_malloc_r+0xa8>
 800fae6:	bf00      	nop
 800fae8:	20043d44 	.word	0x20043d44

0800faec <__malloc_lock>:
 800faec:	4801      	ldr	r0, [pc, #4]	@ (800faf4 <__malloc_lock+0x8>)
 800faee:	f000 bae8 	b.w	80100c2 <__retarget_lock_acquire_recursive>
 800faf2:	bf00      	nop
 800faf4:	20043e88 	.word	0x20043e88

0800faf8 <__malloc_unlock>:
 800faf8:	4801      	ldr	r0, [pc, #4]	@ (800fb00 <__malloc_unlock+0x8>)
 800fafa:	f000 bae3 	b.w	80100c4 <__retarget_lock_release_recursive>
 800fafe:	bf00      	nop
 800fb00:	20043e88 	.word	0x20043e88

0800fb04 <srand>:
 800fb04:	b538      	push	{r3, r4, r5, lr}
 800fb06:	4b10      	ldr	r3, [pc, #64]	@ (800fb48 <srand+0x44>)
 800fb08:	681d      	ldr	r5, [r3, #0]
 800fb0a:	6b2b      	ldr	r3, [r5, #48]	@ 0x30
 800fb0c:	4604      	mov	r4, r0
 800fb0e:	b9b3      	cbnz	r3, 800fb3e <srand+0x3a>
 800fb10:	2018      	movs	r0, #24
 800fb12:	f7ff ff41 	bl	800f998 <malloc>
 800fb16:	4602      	mov	r2, r0
 800fb18:	6328      	str	r0, [r5, #48]	@ 0x30
 800fb1a:	b920      	cbnz	r0, 800fb26 <srand+0x22>
 800fb1c:	4b0b      	ldr	r3, [pc, #44]	@ (800fb4c <srand+0x48>)
 800fb1e:	480c      	ldr	r0, [pc, #48]	@ (800fb50 <srand+0x4c>)
 800fb20:	2146      	movs	r1, #70	@ 0x46
 800fb22:	f000 fadf 	bl	80100e4 <__assert_func>
 800fb26:	490b      	ldr	r1, [pc, #44]	@ (800fb54 <srand+0x50>)
 800fb28:	4b0b      	ldr	r3, [pc, #44]	@ (800fb58 <srand+0x54>)
 800fb2a:	e9c0 1300 	strd	r1, r3, [r0]
 800fb2e:	4b0b      	ldr	r3, [pc, #44]	@ (800fb5c <srand+0x58>)
 800fb30:	6083      	str	r3, [r0, #8]
 800fb32:	230b      	movs	r3, #11
 800fb34:	8183      	strh	r3, [r0, #12]
 800fb36:	2100      	movs	r1, #0
 800fb38:	2001      	movs	r0, #1
 800fb3a:	e9c2 0104 	strd	r0, r1, [r2, #16]
 800fb3e:	6b2b      	ldr	r3, [r5, #48]	@ 0x30
 800fb40:	2200      	movs	r2, #0
 800fb42:	611c      	str	r4, [r3, #16]
 800fb44:	615a      	str	r2, [r3, #20]
 800fb46:	bd38      	pop	{r3, r4, r5, pc}
 800fb48:	2003c544 	.word	0x2003c544
 800fb4c:	0801b850 	.word	0x0801b850
 800fb50:	0801b867 	.word	0x0801b867
 800fb54:	abcd330e 	.word	0xabcd330e
 800fb58:	e66d1234 	.word	0xe66d1234
 800fb5c:	0005deec 	.word	0x0005deec

0800fb60 <rand>:
 800fb60:	4b16      	ldr	r3, [pc, #88]	@ (800fbbc <rand+0x5c>)
 800fb62:	b510      	push	{r4, lr}
 800fb64:	681c      	ldr	r4, [r3, #0]
 800fb66:	6b23      	ldr	r3, [r4, #48]	@ 0x30
 800fb68:	b9b3      	cbnz	r3, 800fb98 <rand+0x38>
 800fb6a:	2018      	movs	r0, #24
 800fb6c:	f7ff ff14 	bl	800f998 <malloc>
 800fb70:	4602      	mov	r2, r0
 800fb72:	6320      	str	r0, [r4, #48]	@ 0x30
 800fb74:	b920      	cbnz	r0, 800fb80 <rand+0x20>
 800fb76:	4b12      	ldr	r3, [pc, #72]	@ (800fbc0 <rand+0x60>)
 800fb78:	4812      	ldr	r0, [pc, #72]	@ (800fbc4 <rand+0x64>)
 800fb7a:	2152      	movs	r1, #82	@ 0x52
 800fb7c:	f000 fab2 	bl	80100e4 <__assert_func>
 800fb80:	4911      	ldr	r1, [pc, #68]	@ (800fbc8 <rand+0x68>)
 800fb82:	4b12      	ldr	r3, [pc, #72]	@ (800fbcc <rand+0x6c>)
 800fb84:	e9c0 1300 	strd	r1, r3, [r0]
 800fb88:	4b11      	ldr	r3, [pc, #68]	@ (800fbd0 <rand+0x70>)
 800fb8a:	6083      	str	r3, [r0, #8]
 800fb8c:	230b      	movs	r3, #11
 800fb8e:	8183      	strh	r3, [r0, #12]
 800fb90:	2100      	movs	r1, #0
 800fb92:	2001      	movs	r0, #1
 800fb94:	e9c2 0104 	strd	r0, r1, [r2, #16]
 800fb98:	6b21      	ldr	r1, [r4, #48]	@ 0x30
 800fb9a:	480e      	ldr	r0, [pc, #56]	@ (800fbd4 <rand+0x74>)
 800fb9c:	690b      	ldr	r3, [r1, #16]
 800fb9e:	694c      	ldr	r4, [r1, #20]
 800fba0:	4a0d      	ldr	r2, [pc, #52]	@ (800fbd8 <rand+0x78>)
 800fba2:	4358      	muls	r0, r3
 800fba4:	fb02 0004 	mla	r0, r2, r4, r0
 800fba8:	fba3 3202 	umull	r3, r2, r3, r2
 800fbac:	3301      	adds	r3, #1
 800fbae:	eb40 0002 	adc.w	r0, r0, r2
 800fbb2:	e9c1 3004 	strd	r3, r0, [r1, #16]
 800fbb6:	f020 4000 	bic.w	r0, r0, #2147483648	@ 0x80000000
 800fbba:	bd10      	pop	{r4, pc}
 800fbbc:	2003c544 	.word	0x2003c544
 800fbc0:	0801b850 	.word	0x0801b850
 800fbc4:	0801b867 	.word	0x0801b867
 800fbc8:	abcd330e 	.word	0xabcd330e
 800fbcc:	e66d1234 	.word	0xe66d1234
 800fbd0:	0005deec 	.word	0x0005deec
 800fbd4:	5851f42d 	.word	0x5851f42d
 800fbd8:	4c957f2d 	.word	0x4c957f2d

0800fbdc <_realloc_r>:
 800fbdc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800fbe0:	4680      	mov	r8, r0
 800fbe2:	4615      	mov	r5, r2
 800fbe4:	460c      	mov	r4, r1
 800fbe6:	b921      	cbnz	r1, 800fbf2 <_realloc_r+0x16>
 800fbe8:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800fbec:	4611      	mov	r1, r2
 800fbee:	f7ff befd 	b.w	800f9ec <_malloc_r>
 800fbf2:	b92a      	cbnz	r2, 800fc00 <_realloc_r+0x24>
 800fbf4:	f000 fa94 	bl	8010120 <_free_r>
 800fbf8:	2400      	movs	r4, #0
 800fbfa:	4620      	mov	r0, r4
 800fbfc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800fc00:	f000 fad8 	bl	80101b4 <_malloc_usable_size_r>
 800fc04:	4285      	cmp	r5, r0
 800fc06:	4606      	mov	r6, r0
 800fc08:	d802      	bhi.n	800fc10 <_realloc_r+0x34>
 800fc0a:	ebb5 0f50 	cmp.w	r5, r0, lsr #1
 800fc0e:	d8f4      	bhi.n	800fbfa <_realloc_r+0x1e>
 800fc10:	4629      	mov	r1, r5
 800fc12:	4640      	mov	r0, r8
 800fc14:	f7ff feea 	bl	800f9ec <_malloc_r>
 800fc18:	4607      	mov	r7, r0
 800fc1a:	2800      	cmp	r0, #0
 800fc1c:	d0ec      	beq.n	800fbf8 <_realloc_r+0x1c>
 800fc1e:	42b5      	cmp	r5, r6
 800fc20:	462a      	mov	r2, r5
 800fc22:	4621      	mov	r1, r4
 800fc24:	bf28      	it	cs
 800fc26:	4632      	movcs	r2, r6
 800fc28:	f000 fa4d 	bl	80100c6 <memcpy>
 800fc2c:	4621      	mov	r1, r4
 800fc2e:	4640      	mov	r0, r8
 800fc30:	f000 fa76 	bl	8010120 <_free_r>
 800fc34:	463c      	mov	r4, r7
 800fc36:	e7e0      	b.n	800fbfa <_realloc_r+0x1e>

0800fc38 <_strtol_l.constprop.0>:
 800fc38:	2b24      	cmp	r3, #36	@ 0x24
 800fc3a:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800fc3e:	4686      	mov	lr, r0
 800fc40:	4690      	mov	r8, r2
 800fc42:	d801      	bhi.n	800fc48 <_strtol_l.constprop.0+0x10>
 800fc44:	2b01      	cmp	r3, #1
 800fc46:	d106      	bne.n	800fc56 <_strtol_l.constprop.0+0x1e>
 800fc48:	f000 fa10 	bl	801006c <__errno>
 800fc4c:	2316      	movs	r3, #22
 800fc4e:	6003      	str	r3, [r0, #0]
 800fc50:	2000      	movs	r0, #0
 800fc52:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800fc56:	4834      	ldr	r0, [pc, #208]	@ (800fd28 <_strtol_l.constprop.0+0xf0>)
 800fc58:	460d      	mov	r5, r1
 800fc5a:	462a      	mov	r2, r5
 800fc5c:	f815 4b01 	ldrb.w	r4, [r5], #1
 800fc60:	5d06      	ldrb	r6, [r0, r4]
 800fc62:	f016 0608 	ands.w	r6, r6, #8
 800fc66:	d1f8      	bne.n	800fc5a <_strtol_l.constprop.0+0x22>
 800fc68:	2c2d      	cmp	r4, #45	@ 0x2d
 800fc6a:	d12d      	bne.n	800fcc8 <_strtol_l.constprop.0+0x90>
 800fc6c:	782c      	ldrb	r4, [r5, #0]
 800fc6e:	2601      	movs	r6, #1
 800fc70:	1c95      	adds	r5, r2, #2
 800fc72:	f033 0210 	bics.w	r2, r3, #16
 800fc76:	d109      	bne.n	800fc8c <_strtol_l.constprop.0+0x54>
 800fc78:	2c30      	cmp	r4, #48	@ 0x30
 800fc7a:	d12a      	bne.n	800fcd2 <_strtol_l.constprop.0+0x9a>
 800fc7c:	782a      	ldrb	r2, [r5, #0]
 800fc7e:	f002 02df 	and.w	r2, r2, #223	@ 0xdf
 800fc82:	2a58      	cmp	r2, #88	@ 0x58
 800fc84:	d125      	bne.n	800fcd2 <_strtol_l.constprop.0+0x9a>
 800fc86:	786c      	ldrb	r4, [r5, #1]
 800fc88:	2310      	movs	r3, #16
 800fc8a:	3502      	adds	r5, #2
 800fc8c:	f106 4c00 	add.w	ip, r6, #2147483648	@ 0x80000000
 800fc90:	f10c 3cff 	add.w	ip, ip, #4294967295
 800fc94:	2200      	movs	r2, #0
 800fc96:	fbbc f9f3 	udiv	r9, ip, r3
 800fc9a:	4610      	mov	r0, r2
 800fc9c:	fb03 ca19 	mls	sl, r3, r9, ip
 800fca0:	f1a4 0730 	sub.w	r7, r4, #48	@ 0x30
 800fca4:	2f09      	cmp	r7, #9
 800fca6:	d81b      	bhi.n	800fce0 <_strtol_l.constprop.0+0xa8>
 800fca8:	463c      	mov	r4, r7
 800fcaa:	42a3      	cmp	r3, r4
 800fcac:	dd27      	ble.n	800fcfe <_strtol_l.constprop.0+0xc6>
 800fcae:	1c57      	adds	r7, r2, #1
 800fcb0:	d007      	beq.n	800fcc2 <_strtol_l.constprop.0+0x8a>
 800fcb2:	4581      	cmp	r9, r0
 800fcb4:	d320      	bcc.n	800fcf8 <_strtol_l.constprop.0+0xc0>
 800fcb6:	d101      	bne.n	800fcbc <_strtol_l.constprop.0+0x84>
 800fcb8:	45a2      	cmp	sl, r4
 800fcba:	db1d      	blt.n	800fcf8 <_strtol_l.constprop.0+0xc0>
 800fcbc:	fb00 4003 	mla	r0, r0, r3, r4
 800fcc0:	2201      	movs	r2, #1
 800fcc2:	f815 4b01 	ldrb.w	r4, [r5], #1
 800fcc6:	e7eb      	b.n	800fca0 <_strtol_l.constprop.0+0x68>
 800fcc8:	2c2b      	cmp	r4, #43	@ 0x2b
 800fcca:	bf04      	itt	eq
 800fccc:	782c      	ldrbeq	r4, [r5, #0]
 800fcce:	1c95      	addeq	r5, r2, #2
 800fcd0:	e7cf      	b.n	800fc72 <_strtol_l.constprop.0+0x3a>
 800fcd2:	2b00      	cmp	r3, #0
 800fcd4:	d1da      	bne.n	800fc8c <_strtol_l.constprop.0+0x54>
 800fcd6:	2c30      	cmp	r4, #48	@ 0x30
 800fcd8:	bf0c      	ite	eq
 800fcda:	2308      	moveq	r3, #8
 800fcdc:	230a      	movne	r3, #10
 800fcde:	e7d5      	b.n	800fc8c <_strtol_l.constprop.0+0x54>
 800fce0:	f1a4 0741 	sub.w	r7, r4, #65	@ 0x41
 800fce4:	2f19      	cmp	r7, #25
 800fce6:	d801      	bhi.n	800fcec <_strtol_l.constprop.0+0xb4>
 800fce8:	3c37      	subs	r4, #55	@ 0x37
 800fcea:	e7de      	b.n	800fcaa <_strtol_l.constprop.0+0x72>
 800fcec:	f1a4 0761 	sub.w	r7, r4, #97	@ 0x61
 800fcf0:	2f19      	cmp	r7, #25
 800fcf2:	d804      	bhi.n	800fcfe <_strtol_l.constprop.0+0xc6>
 800fcf4:	3c57      	subs	r4, #87	@ 0x57
 800fcf6:	e7d8      	b.n	800fcaa <_strtol_l.constprop.0+0x72>
 800fcf8:	f04f 32ff 	mov.w	r2, #4294967295
 800fcfc:	e7e1      	b.n	800fcc2 <_strtol_l.constprop.0+0x8a>
 800fcfe:	1c53      	adds	r3, r2, #1
 800fd00:	d108      	bne.n	800fd14 <_strtol_l.constprop.0+0xdc>
 800fd02:	2322      	movs	r3, #34	@ 0x22
 800fd04:	f8ce 3000 	str.w	r3, [lr]
 800fd08:	4660      	mov	r0, ip
 800fd0a:	f1b8 0f00 	cmp.w	r8, #0
 800fd0e:	d0a0      	beq.n	800fc52 <_strtol_l.constprop.0+0x1a>
 800fd10:	1e69      	subs	r1, r5, #1
 800fd12:	e006      	b.n	800fd22 <_strtol_l.constprop.0+0xea>
 800fd14:	b106      	cbz	r6, 800fd18 <_strtol_l.constprop.0+0xe0>
 800fd16:	4240      	negs	r0, r0
 800fd18:	f1b8 0f00 	cmp.w	r8, #0
 800fd1c:	d099      	beq.n	800fc52 <_strtol_l.constprop.0+0x1a>
 800fd1e:	2a00      	cmp	r2, #0
 800fd20:	d1f6      	bne.n	800fd10 <_strtol_l.constprop.0+0xd8>
 800fd22:	f8c8 1000 	str.w	r1, [r8]
 800fd26:	e794      	b.n	800fc52 <_strtol_l.constprop.0+0x1a>
 800fd28:	0801b8c0 	.word	0x0801b8c0

0800fd2c <strtol>:
 800fd2c:	4613      	mov	r3, r2
 800fd2e:	460a      	mov	r2, r1
 800fd30:	4601      	mov	r1, r0
 800fd32:	4802      	ldr	r0, [pc, #8]	@ (800fd3c <strtol+0x10>)
 800fd34:	6800      	ldr	r0, [r0, #0]
 800fd36:	f7ff bf7f 	b.w	800fc38 <_strtol_l.constprop.0>
 800fd3a:	bf00      	nop
 800fd3c:	2003c544 	.word	0x2003c544

0800fd40 <std>:
 800fd40:	2300      	movs	r3, #0
 800fd42:	b510      	push	{r4, lr}
 800fd44:	4604      	mov	r4, r0
 800fd46:	e9c0 3300 	strd	r3, r3, [r0]
 800fd4a:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800fd4e:	6083      	str	r3, [r0, #8]
 800fd50:	8181      	strh	r1, [r0, #12]
 800fd52:	6643      	str	r3, [r0, #100]	@ 0x64
 800fd54:	81c2      	strh	r2, [r0, #14]
 800fd56:	6183      	str	r3, [r0, #24]
 800fd58:	4619      	mov	r1, r3
 800fd5a:	2208      	movs	r2, #8
 800fd5c:	305c      	adds	r0, #92	@ 0x5c
 800fd5e:	f000 f926 	bl	800ffae <memset>
 800fd62:	4b0d      	ldr	r3, [pc, #52]	@ (800fd98 <std+0x58>)
 800fd64:	6263      	str	r3, [r4, #36]	@ 0x24
 800fd66:	4b0d      	ldr	r3, [pc, #52]	@ (800fd9c <std+0x5c>)
 800fd68:	62a3      	str	r3, [r4, #40]	@ 0x28
 800fd6a:	4b0d      	ldr	r3, [pc, #52]	@ (800fda0 <std+0x60>)
 800fd6c:	62e3      	str	r3, [r4, #44]	@ 0x2c
 800fd6e:	4b0d      	ldr	r3, [pc, #52]	@ (800fda4 <std+0x64>)
 800fd70:	6323      	str	r3, [r4, #48]	@ 0x30
 800fd72:	4b0d      	ldr	r3, [pc, #52]	@ (800fda8 <std+0x68>)
 800fd74:	6224      	str	r4, [r4, #32]
 800fd76:	429c      	cmp	r4, r3
 800fd78:	d006      	beq.n	800fd88 <std+0x48>
 800fd7a:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 800fd7e:	4294      	cmp	r4, r2
 800fd80:	d002      	beq.n	800fd88 <std+0x48>
 800fd82:	33d0      	adds	r3, #208	@ 0xd0
 800fd84:	429c      	cmp	r4, r3
 800fd86:	d105      	bne.n	800fd94 <std+0x54>
 800fd88:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 800fd8c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800fd90:	f000 b996 	b.w	80100c0 <__retarget_lock_init_recursive>
 800fd94:	bd10      	pop	{r4, pc}
 800fd96:	bf00      	nop
 800fd98:	0800ff29 	.word	0x0800ff29
 800fd9c:	0800ff4b 	.word	0x0800ff4b
 800fda0:	0800ff83 	.word	0x0800ff83
 800fda4:	0800ffa7 	.word	0x0800ffa7
 800fda8:	20043d48 	.word	0x20043d48

0800fdac <stdio_exit_handler>:
 800fdac:	4a02      	ldr	r2, [pc, #8]	@ (800fdb8 <stdio_exit_handler+0xc>)
 800fdae:	4903      	ldr	r1, [pc, #12]	@ (800fdbc <stdio_exit_handler+0x10>)
 800fdb0:	4803      	ldr	r0, [pc, #12]	@ (800fdc0 <stdio_exit_handler+0x14>)
 800fdb2:	f000 b869 	b.w	800fe88 <_fwalk_sglue>
 800fdb6:	bf00      	nop
 800fdb8:	2003c538 	.word	0x2003c538
 800fdbc:	08010b1d 	.word	0x08010b1d
 800fdc0:	2003c548 	.word	0x2003c548

0800fdc4 <cleanup_stdio>:
 800fdc4:	6841      	ldr	r1, [r0, #4]
 800fdc6:	4b0c      	ldr	r3, [pc, #48]	@ (800fdf8 <cleanup_stdio+0x34>)
 800fdc8:	4299      	cmp	r1, r3
 800fdca:	b510      	push	{r4, lr}
 800fdcc:	4604      	mov	r4, r0
 800fdce:	d001      	beq.n	800fdd4 <cleanup_stdio+0x10>
 800fdd0:	f000 fea4 	bl	8010b1c <_fflush_r>
 800fdd4:	68a1      	ldr	r1, [r4, #8]
 800fdd6:	4b09      	ldr	r3, [pc, #36]	@ (800fdfc <cleanup_stdio+0x38>)
 800fdd8:	4299      	cmp	r1, r3
 800fdda:	d002      	beq.n	800fde2 <cleanup_stdio+0x1e>
 800fddc:	4620      	mov	r0, r4
 800fdde:	f000 fe9d 	bl	8010b1c <_fflush_r>
 800fde2:	68e1      	ldr	r1, [r4, #12]
 800fde4:	4b06      	ldr	r3, [pc, #24]	@ (800fe00 <cleanup_stdio+0x3c>)
 800fde6:	4299      	cmp	r1, r3
 800fde8:	d004      	beq.n	800fdf4 <cleanup_stdio+0x30>
 800fdea:	4620      	mov	r0, r4
 800fdec:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800fdf0:	f000 be94 	b.w	8010b1c <_fflush_r>
 800fdf4:	bd10      	pop	{r4, pc}
 800fdf6:	bf00      	nop
 800fdf8:	20043d48 	.word	0x20043d48
 800fdfc:	20043db0 	.word	0x20043db0
 800fe00:	20043e18 	.word	0x20043e18

0800fe04 <global_stdio_init.part.0>:
 800fe04:	b510      	push	{r4, lr}
 800fe06:	4b0b      	ldr	r3, [pc, #44]	@ (800fe34 <global_stdio_init.part.0+0x30>)
 800fe08:	4c0b      	ldr	r4, [pc, #44]	@ (800fe38 <global_stdio_init.part.0+0x34>)
 800fe0a:	4a0c      	ldr	r2, [pc, #48]	@ (800fe3c <global_stdio_init.part.0+0x38>)
 800fe0c:	601a      	str	r2, [r3, #0]
 800fe0e:	4620      	mov	r0, r4
 800fe10:	2200      	movs	r2, #0
 800fe12:	2104      	movs	r1, #4
 800fe14:	f7ff ff94 	bl	800fd40 <std>
 800fe18:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 800fe1c:	2201      	movs	r2, #1
 800fe1e:	2109      	movs	r1, #9
 800fe20:	f7ff ff8e 	bl	800fd40 <std>
 800fe24:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 800fe28:	2202      	movs	r2, #2
 800fe2a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800fe2e:	2112      	movs	r1, #18
 800fe30:	f7ff bf86 	b.w	800fd40 <std>
 800fe34:	20043e80 	.word	0x20043e80
 800fe38:	20043d48 	.word	0x20043d48
 800fe3c:	0800fdad 	.word	0x0800fdad

0800fe40 <__sfp_lock_acquire>:
 800fe40:	4801      	ldr	r0, [pc, #4]	@ (800fe48 <__sfp_lock_acquire+0x8>)
 800fe42:	f000 b93e 	b.w	80100c2 <__retarget_lock_acquire_recursive>
 800fe46:	bf00      	nop
 800fe48:	20043e89 	.word	0x20043e89

0800fe4c <__sfp_lock_release>:
 800fe4c:	4801      	ldr	r0, [pc, #4]	@ (800fe54 <__sfp_lock_release+0x8>)
 800fe4e:	f000 b939 	b.w	80100c4 <__retarget_lock_release_recursive>
 800fe52:	bf00      	nop
 800fe54:	20043e89 	.word	0x20043e89

0800fe58 <__sinit>:
 800fe58:	b510      	push	{r4, lr}
 800fe5a:	4604      	mov	r4, r0
 800fe5c:	f7ff fff0 	bl	800fe40 <__sfp_lock_acquire>
 800fe60:	6a23      	ldr	r3, [r4, #32]
 800fe62:	b11b      	cbz	r3, 800fe6c <__sinit+0x14>
 800fe64:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800fe68:	f7ff bff0 	b.w	800fe4c <__sfp_lock_release>
 800fe6c:	4b04      	ldr	r3, [pc, #16]	@ (800fe80 <__sinit+0x28>)
 800fe6e:	6223      	str	r3, [r4, #32]
 800fe70:	4b04      	ldr	r3, [pc, #16]	@ (800fe84 <__sinit+0x2c>)
 800fe72:	681b      	ldr	r3, [r3, #0]
 800fe74:	2b00      	cmp	r3, #0
 800fe76:	d1f5      	bne.n	800fe64 <__sinit+0xc>
 800fe78:	f7ff ffc4 	bl	800fe04 <global_stdio_init.part.0>
 800fe7c:	e7f2      	b.n	800fe64 <__sinit+0xc>
 800fe7e:	bf00      	nop
 800fe80:	0800fdc5 	.word	0x0800fdc5
 800fe84:	20043e80 	.word	0x20043e80

0800fe88 <_fwalk_sglue>:
 800fe88:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800fe8c:	4607      	mov	r7, r0
 800fe8e:	4688      	mov	r8, r1
 800fe90:	4614      	mov	r4, r2
 800fe92:	2600      	movs	r6, #0
 800fe94:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 800fe98:	f1b9 0901 	subs.w	r9, r9, #1
 800fe9c:	d505      	bpl.n	800feaa <_fwalk_sglue+0x22>
 800fe9e:	6824      	ldr	r4, [r4, #0]
 800fea0:	2c00      	cmp	r4, #0
 800fea2:	d1f7      	bne.n	800fe94 <_fwalk_sglue+0xc>
 800fea4:	4630      	mov	r0, r6
 800fea6:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800feaa:	89ab      	ldrh	r3, [r5, #12]
 800feac:	2b01      	cmp	r3, #1
 800feae:	d907      	bls.n	800fec0 <_fwalk_sglue+0x38>
 800feb0:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 800feb4:	3301      	adds	r3, #1
 800feb6:	d003      	beq.n	800fec0 <_fwalk_sglue+0x38>
 800feb8:	4629      	mov	r1, r5
 800feba:	4638      	mov	r0, r7
 800febc:	47c0      	blx	r8
 800febe:	4306      	orrs	r6, r0
 800fec0:	3568      	adds	r5, #104	@ 0x68
 800fec2:	e7e9      	b.n	800fe98 <_fwalk_sglue+0x10>

0800fec4 <iprintf>:
 800fec4:	b40f      	push	{r0, r1, r2, r3}
 800fec6:	b507      	push	{r0, r1, r2, lr}
 800fec8:	4906      	ldr	r1, [pc, #24]	@ (800fee4 <iprintf+0x20>)
 800feca:	ab04      	add	r3, sp, #16
 800fecc:	6808      	ldr	r0, [r1, #0]
 800fece:	f853 2b04 	ldr.w	r2, [r3], #4
 800fed2:	6881      	ldr	r1, [r0, #8]
 800fed4:	9301      	str	r3, [sp, #4]
 800fed6:	f000 faf7 	bl	80104c8 <_vfiprintf_r>
 800feda:	b003      	add	sp, #12
 800fedc:	f85d eb04 	ldr.w	lr, [sp], #4
 800fee0:	b004      	add	sp, #16
 800fee2:	4770      	bx	lr
 800fee4:	2003c544 	.word	0x2003c544

0800fee8 <siprintf>:
 800fee8:	b40e      	push	{r1, r2, r3}
 800feea:	b500      	push	{lr}
 800feec:	b09c      	sub	sp, #112	@ 0x70
 800feee:	ab1d      	add	r3, sp, #116	@ 0x74
 800fef0:	9002      	str	r0, [sp, #8]
 800fef2:	9006      	str	r0, [sp, #24]
 800fef4:	f06f 4100 	mvn.w	r1, #2147483648	@ 0x80000000
 800fef8:	4809      	ldr	r0, [pc, #36]	@ (800ff20 <siprintf+0x38>)
 800fefa:	9107      	str	r1, [sp, #28]
 800fefc:	9104      	str	r1, [sp, #16]
 800fefe:	4909      	ldr	r1, [pc, #36]	@ (800ff24 <siprintf+0x3c>)
 800ff00:	f853 2b04 	ldr.w	r2, [r3], #4
 800ff04:	9105      	str	r1, [sp, #20]
 800ff06:	6800      	ldr	r0, [r0, #0]
 800ff08:	9301      	str	r3, [sp, #4]
 800ff0a:	a902      	add	r1, sp, #8
 800ff0c:	f000 f9b6 	bl	801027c <_svfiprintf_r>
 800ff10:	9b02      	ldr	r3, [sp, #8]
 800ff12:	2200      	movs	r2, #0
 800ff14:	701a      	strb	r2, [r3, #0]
 800ff16:	b01c      	add	sp, #112	@ 0x70
 800ff18:	f85d eb04 	ldr.w	lr, [sp], #4
 800ff1c:	b003      	add	sp, #12
 800ff1e:	4770      	bx	lr
 800ff20:	2003c544 	.word	0x2003c544
 800ff24:	ffff0208 	.word	0xffff0208

0800ff28 <__sread>:
 800ff28:	b510      	push	{r4, lr}
 800ff2a:	460c      	mov	r4, r1
 800ff2c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800ff30:	f000 f868 	bl	8010004 <_read_r>
 800ff34:	2800      	cmp	r0, #0
 800ff36:	bfab      	itete	ge
 800ff38:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 800ff3a:	89a3      	ldrhlt	r3, [r4, #12]
 800ff3c:	181b      	addge	r3, r3, r0
 800ff3e:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 800ff42:	bfac      	ite	ge
 800ff44:	6563      	strge	r3, [r4, #84]	@ 0x54
 800ff46:	81a3      	strhlt	r3, [r4, #12]
 800ff48:	bd10      	pop	{r4, pc}

0800ff4a <__swrite>:
 800ff4a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800ff4e:	461f      	mov	r7, r3
 800ff50:	898b      	ldrh	r3, [r1, #12]
 800ff52:	05db      	lsls	r3, r3, #23
 800ff54:	4605      	mov	r5, r0
 800ff56:	460c      	mov	r4, r1
 800ff58:	4616      	mov	r6, r2
 800ff5a:	d505      	bpl.n	800ff68 <__swrite+0x1e>
 800ff5c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800ff60:	2302      	movs	r3, #2
 800ff62:	2200      	movs	r2, #0
 800ff64:	f000 f83c 	bl	800ffe0 <_lseek_r>
 800ff68:	89a3      	ldrh	r3, [r4, #12]
 800ff6a:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800ff6e:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 800ff72:	81a3      	strh	r3, [r4, #12]
 800ff74:	4632      	mov	r2, r6
 800ff76:	463b      	mov	r3, r7
 800ff78:	4628      	mov	r0, r5
 800ff7a:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800ff7e:	f000 b863 	b.w	8010048 <_write_r>

0800ff82 <__sseek>:
 800ff82:	b510      	push	{r4, lr}
 800ff84:	460c      	mov	r4, r1
 800ff86:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800ff8a:	f000 f829 	bl	800ffe0 <_lseek_r>
 800ff8e:	1c43      	adds	r3, r0, #1
 800ff90:	89a3      	ldrh	r3, [r4, #12]
 800ff92:	bf15      	itete	ne
 800ff94:	6560      	strne	r0, [r4, #84]	@ 0x54
 800ff96:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 800ff9a:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 800ff9e:	81a3      	strheq	r3, [r4, #12]
 800ffa0:	bf18      	it	ne
 800ffa2:	81a3      	strhne	r3, [r4, #12]
 800ffa4:	bd10      	pop	{r4, pc}

0800ffa6 <__sclose>:
 800ffa6:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800ffaa:	f000 b809 	b.w	800ffc0 <_close_r>

0800ffae <memset>:
 800ffae:	4402      	add	r2, r0
 800ffb0:	4603      	mov	r3, r0
 800ffb2:	4293      	cmp	r3, r2
 800ffb4:	d100      	bne.n	800ffb8 <memset+0xa>
 800ffb6:	4770      	bx	lr
 800ffb8:	f803 1b01 	strb.w	r1, [r3], #1
 800ffbc:	e7f9      	b.n	800ffb2 <memset+0x4>
	...

0800ffc0 <_close_r>:
 800ffc0:	b538      	push	{r3, r4, r5, lr}
 800ffc2:	4d06      	ldr	r5, [pc, #24]	@ (800ffdc <_close_r+0x1c>)
 800ffc4:	2300      	movs	r3, #0
 800ffc6:	4604      	mov	r4, r0
 800ffc8:	4608      	mov	r0, r1
 800ffca:	602b      	str	r3, [r5, #0]
 800ffcc:	f000 ff5e 	bl	8010e8c <_close>
 800ffd0:	1c43      	adds	r3, r0, #1
 800ffd2:	d102      	bne.n	800ffda <_close_r+0x1a>
 800ffd4:	682b      	ldr	r3, [r5, #0]
 800ffd6:	b103      	cbz	r3, 800ffda <_close_r+0x1a>
 800ffd8:	6023      	str	r3, [r4, #0]
 800ffda:	bd38      	pop	{r3, r4, r5, pc}
 800ffdc:	20043e84 	.word	0x20043e84

0800ffe0 <_lseek_r>:
 800ffe0:	b538      	push	{r3, r4, r5, lr}
 800ffe2:	4d07      	ldr	r5, [pc, #28]	@ (8010000 <_lseek_r+0x20>)
 800ffe4:	4604      	mov	r4, r0
 800ffe6:	4608      	mov	r0, r1
 800ffe8:	4611      	mov	r1, r2
 800ffea:	2200      	movs	r2, #0
 800ffec:	602a      	str	r2, [r5, #0]
 800ffee:	461a      	mov	r2, r3
 800fff0:	f000 ff74 	bl	8010edc <_lseek>
 800fff4:	1c43      	adds	r3, r0, #1
 800fff6:	d102      	bne.n	800fffe <_lseek_r+0x1e>
 800fff8:	682b      	ldr	r3, [r5, #0]
 800fffa:	b103      	cbz	r3, 800fffe <_lseek_r+0x1e>
 800fffc:	6023      	str	r3, [r4, #0]
 800fffe:	bd38      	pop	{r3, r4, r5, pc}
 8010000:	20043e84 	.word	0x20043e84

08010004 <_read_r>:
 8010004:	b538      	push	{r3, r4, r5, lr}
 8010006:	4d07      	ldr	r5, [pc, #28]	@ (8010024 <_read_r+0x20>)
 8010008:	4604      	mov	r4, r0
 801000a:	4608      	mov	r0, r1
 801000c:	4611      	mov	r1, r2
 801000e:	2200      	movs	r2, #0
 8010010:	602a      	str	r2, [r5, #0]
 8010012:	461a      	mov	r2, r3
 8010014:	f000 ff6a 	bl	8010eec <_read>
 8010018:	1c43      	adds	r3, r0, #1
 801001a:	d102      	bne.n	8010022 <_read_r+0x1e>
 801001c:	682b      	ldr	r3, [r5, #0]
 801001e:	b103      	cbz	r3, 8010022 <_read_r+0x1e>
 8010020:	6023      	str	r3, [r4, #0]
 8010022:	bd38      	pop	{r3, r4, r5, pc}
 8010024:	20043e84 	.word	0x20043e84

08010028 <_sbrk_r>:
 8010028:	b538      	push	{r3, r4, r5, lr}
 801002a:	4d06      	ldr	r5, [pc, #24]	@ (8010044 <_sbrk_r+0x1c>)
 801002c:	2300      	movs	r3, #0
 801002e:	4604      	mov	r4, r0
 8010030:	4608      	mov	r0, r1
 8010032:	602b      	str	r3, [r5, #0]
 8010034:	f7f1 fec0 	bl	8001db8 <_sbrk>
 8010038:	1c43      	adds	r3, r0, #1
 801003a:	d102      	bne.n	8010042 <_sbrk_r+0x1a>
 801003c:	682b      	ldr	r3, [r5, #0]
 801003e:	b103      	cbz	r3, 8010042 <_sbrk_r+0x1a>
 8010040:	6023      	str	r3, [r4, #0]
 8010042:	bd38      	pop	{r3, r4, r5, pc}
 8010044:	20043e84 	.word	0x20043e84

08010048 <_write_r>:
 8010048:	b538      	push	{r3, r4, r5, lr}
 801004a:	4d07      	ldr	r5, [pc, #28]	@ (8010068 <_write_r+0x20>)
 801004c:	4604      	mov	r4, r0
 801004e:	4608      	mov	r0, r1
 8010050:	4611      	mov	r1, r2
 8010052:	2200      	movs	r2, #0
 8010054:	602a      	str	r2, [r5, #0]
 8010056:	461a      	mov	r2, r3
 8010058:	f000 ff50 	bl	8010efc <_write>
 801005c:	1c43      	adds	r3, r0, #1
 801005e:	d102      	bne.n	8010066 <_write_r+0x1e>
 8010060:	682b      	ldr	r3, [r5, #0]
 8010062:	b103      	cbz	r3, 8010066 <_write_r+0x1e>
 8010064:	6023      	str	r3, [r4, #0]
 8010066:	bd38      	pop	{r3, r4, r5, pc}
 8010068:	20043e84 	.word	0x20043e84

0801006c <__errno>:
 801006c:	4b01      	ldr	r3, [pc, #4]	@ (8010074 <__errno+0x8>)
 801006e:	6818      	ldr	r0, [r3, #0]
 8010070:	4770      	bx	lr
 8010072:	bf00      	nop
 8010074:	2003c544 	.word	0x2003c544

08010078 <__libc_init_array>:
 8010078:	b570      	push	{r4, r5, r6, lr}
 801007a:	4d0d      	ldr	r5, [pc, #52]	@ (80100b0 <__libc_init_array+0x38>)
 801007c:	4c0d      	ldr	r4, [pc, #52]	@ (80100b4 <__libc_init_array+0x3c>)
 801007e:	1b64      	subs	r4, r4, r5
 8010080:	10a4      	asrs	r4, r4, #2
 8010082:	2600      	movs	r6, #0
 8010084:	42a6      	cmp	r6, r4
 8010086:	d109      	bne.n	801009c <__libc_init_array+0x24>
 8010088:	4d0b      	ldr	r5, [pc, #44]	@ (80100b8 <__libc_init_array+0x40>)
 801008a:	4c0c      	ldr	r4, [pc, #48]	@ (80100bc <__libc_init_array+0x44>)
 801008c:	f000 ff40 	bl	8010f10 <_init>
 8010090:	1b64      	subs	r4, r4, r5
 8010092:	10a4      	asrs	r4, r4, #2
 8010094:	2600      	movs	r6, #0
 8010096:	42a6      	cmp	r6, r4
 8010098:	d105      	bne.n	80100a6 <__libc_init_array+0x2e>
 801009a:	bd70      	pop	{r4, r5, r6, pc}
 801009c:	f855 3b04 	ldr.w	r3, [r5], #4
 80100a0:	4798      	blx	r3
 80100a2:	3601      	adds	r6, #1
 80100a4:	e7ee      	b.n	8010084 <__libc_init_array+0xc>
 80100a6:	f855 3b04 	ldr.w	r3, [r5], #4
 80100aa:	4798      	blx	r3
 80100ac:	3601      	adds	r6, #1
 80100ae:	e7f2      	b.n	8010096 <__libc_init_array+0x1e>
 80100b0:	0801ba38 	.word	0x0801ba38
 80100b4:	0801ba38 	.word	0x0801ba38
 80100b8:	0801ba38 	.word	0x0801ba38
 80100bc:	0801ba3c 	.word	0x0801ba3c

080100c0 <__retarget_lock_init_recursive>:
 80100c0:	4770      	bx	lr

080100c2 <__retarget_lock_acquire_recursive>:
 80100c2:	4770      	bx	lr

080100c4 <__retarget_lock_release_recursive>:
 80100c4:	4770      	bx	lr

080100c6 <memcpy>:
 80100c6:	440a      	add	r2, r1
 80100c8:	4291      	cmp	r1, r2
 80100ca:	f100 33ff 	add.w	r3, r0, #4294967295
 80100ce:	d100      	bne.n	80100d2 <memcpy+0xc>
 80100d0:	4770      	bx	lr
 80100d2:	b510      	push	{r4, lr}
 80100d4:	f811 4b01 	ldrb.w	r4, [r1], #1
 80100d8:	f803 4f01 	strb.w	r4, [r3, #1]!
 80100dc:	4291      	cmp	r1, r2
 80100de:	d1f9      	bne.n	80100d4 <memcpy+0xe>
 80100e0:	bd10      	pop	{r4, pc}
	...

080100e4 <__assert_func>:
 80100e4:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 80100e6:	4614      	mov	r4, r2
 80100e8:	461a      	mov	r2, r3
 80100ea:	4b09      	ldr	r3, [pc, #36]	@ (8010110 <__assert_func+0x2c>)
 80100ec:	681b      	ldr	r3, [r3, #0]
 80100ee:	4605      	mov	r5, r0
 80100f0:	68d8      	ldr	r0, [r3, #12]
 80100f2:	b954      	cbnz	r4, 801010a <__assert_func+0x26>
 80100f4:	4b07      	ldr	r3, [pc, #28]	@ (8010114 <__assert_func+0x30>)
 80100f6:	461c      	mov	r4, r3
 80100f8:	e9cd 3401 	strd	r3, r4, [sp, #4]
 80100fc:	9100      	str	r1, [sp, #0]
 80100fe:	462b      	mov	r3, r5
 8010100:	4905      	ldr	r1, [pc, #20]	@ (8010118 <__assert_func+0x34>)
 8010102:	f000 fd33 	bl	8010b6c <fiprintf>
 8010106:	f000 fdf1 	bl	8010cec <abort>
 801010a:	4b04      	ldr	r3, [pc, #16]	@ (801011c <__assert_func+0x38>)
 801010c:	e7f4      	b.n	80100f8 <__assert_func+0x14>
 801010e:	bf00      	nop
 8010110:	2003c544 	.word	0x2003c544
 8010114:	0801b9fb 	.word	0x0801b9fb
 8010118:	0801b9cd 	.word	0x0801b9cd
 801011c:	0801b9c0 	.word	0x0801b9c0

08010120 <_free_r>:
 8010120:	b538      	push	{r3, r4, r5, lr}
 8010122:	4605      	mov	r5, r0
 8010124:	2900      	cmp	r1, #0
 8010126:	d041      	beq.n	80101ac <_free_r+0x8c>
 8010128:	f851 3c04 	ldr.w	r3, [r1, #-4]
 801012c:	1f0c      	subs	r4, r1, #4
 801012e:	2b00      	cmp	r3, #0
 8010130:	bfb8      	it	lt
 8010132:	18e4      	addlt	r4, r4, r3
 8010134:	f7ff fcda 	bl	800faec <__malloc_lock>
 8010138:	4a1d      	ldr	r2, [pc, #116]	@ (80101b0 <_free_r+0x90>)
 801013a:	6813      	ldr	r3, [r2, #0]
 801013c:	b933      	cbnz	r3, 801014c <_free_r+0x2c>
 801013e:	6063      	str	r3, [r4, #4]
 8010140:	6014      	str	r4, [r2, #0]
 8010142:	4628      	mov	r0, r5
 8010144:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8010148:	f7ff bcd6 	b.w	800faf8 <__malloc_unlock>
 801014c:	42a3      	cmp	r3, r4
 801014e:	d908      	bls.n	8010162 <_free_r+0x42>
 8010150:	6820      	ldr	r0, [r4, #0]
 8010152:	1821      	adds	r1, r4, r0
 8010154:	428b      	cmp	r3, r1
 8010156:	bf01      	itttt	eq
 8010158:	6819      	ldreq	r1, [r3, #0]
 801015a:	685b      	ldreq	r3, [r3, #4]
 801015c:	1809      	addeq	r1, r1, r0
 801015e:	6021      	streq	r1, [r4, #0]
 8010160:	e7ed      	b.n	801013e <_free_r+0x1e>
 8010162:	461a      	mov	r2, r3
 8010164:	685b      	ldr	r3, [r3, #4]
 8010166:	b10b      	cbz	r3, 801016c <_free_r+0x4c>
 8010168:	42a3      	cmp	r3, r4
 801016a:	d9fa      	bls.n	8010162 <_free_r+0x42>
 801016c:	6811      	ldr	r1, [r2, #0]
 801016e:	1850      	adds	r0, r2, r1
 8010170:	42a0      	cmp	r0, r4
 8010172:	d10b      	bne.n	801018c <_free_r+0x6c>
 8010174:	6820      	ldr	r0, [r4, #0]
 8010176:	4401      	add	r1, r0
 8010178:	1850      	adds	r0, r2, r1
 801017a:	4283      	cmp	r3, r0
 801017c:	6011      	str	r1, [r2, #0]
 801017e:	d1e0      	bne.n	8010142 <_free_r+0x22>
 8010180:	6818      	ldr	r0, [r3, #0]
 8010182:	685b      	ldr	r3, [r3, #4]
 8010184:	6053      	str	r3, [r2, #4]
 8010186:	4408      	add	r0, r1
 8010188:	6010      	str	r0, [r2, #0]
 801018a:	e7da      	b.n	8010142 <_free_r+0x22>
 801018c:	d902      	bls.n	8010194 <_free_r+0x74>
 801018e:	230c      	movs	r3, #12
 8010190:	602b      	str	r3, [r5, #0]
 8010192:	e7d6      	b.n	8010142 <_free_r+0x22>
 8010194:	6820      	ldr	r0, [r4, #0]
 8010196:	1821      	adds	r1, r4, r0
 8010198:	428b      	cmp	r3, r1
 801019a:	bf04      	itt	eq
 801019c:	6819      	ldreq	r1, [r3, #0]
 801019e:	685b      	ldreq	r3, [r3, #4]
 80101a0:	6063      	str	r3, [r4, #4]
 80101a2:	bf04      	itt	eq
 80101a4:	1809      	addeq	r1, r1, r0
 80101a6:	6021      	streq	r1, [r4, #0]
 80101a8:	6054      	str	r4, [r2, #4]
 80101aa:	e7ca      	b.n	8010142 <_free_r+0x22>
 80101ac:	bd38      	pop	{r3, r4, r5, pc}
 80101ae:	bf00      	nop
 80101b0:	20043d44 	.word	0x20043d44

080101b4 <_malloc_usable_size_r>:
 80101b4:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80101b8:	1f18      	subs	r0, r3, #4
 80101ba:	2b00      	cmp	r3, #0
 80101bc:	bfbc      	itt	lt
 80101be:	580b      	ldrlt	r3, [r1, r0]
 80101c0:	18c0      	addlt	r0, r0, r3
 80101c2:	4770      	bx	lr

080101c4 <__ssputs_r>:
 80101c4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80101c8:	688e      	ldr	r6, [r1, #8]
 80101ca:	461f      	mov	r7, r3
 80101cc:	42be      	cmp	r6, r7
 80101ce:	680b      	ldr	r3, [r1, #0]
 80101d0:	4682      	mov	sl, r0
 80101d2:	460c      	mov	r4, r1
 80101d4:	4690      	mov	r8, r2
 80101d6:	d82d      	bhi.n	8010234 <__ssputs_r+0x70>
 80101d8:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 80101dc:	f412 6f90 	tst.w	r2, #1152	@ 0x480
 80101e0:	d026      	beq.n	8010230 <__ssputs_r+0x6c>
 80101e2:	6965      	ldr	r5, [r4, #20]
 80101e4:	6909      	ldr	r1, [r1, #16]
 80101e6:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 80101ea:	eba3 0901 	sub.w	r9, r3, r1
 80101ee:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 80101f2:	1c7b      	adds	r3, r7, #1
 80101f4:	444b      	add	r3, r9
 80101f6:	106d      	asrs	r5, r5, #1
 80101f8:	429d      	cmp	r5, r3
 80101fa:	bf38      	it	cc
 80101fc:	461d      	movcc	r5, r3
 80101fe:	0553      	lsls	r3, r2, #21
 8010200:	d527      	bpl.n	8010252 <__ssputs_r+0x8e>
 8010202:	4629      	mov	r1, r5
 8010204:	f7ff fbf2 	bl	800f9ec <_malloc_r>
 8010208:	4606      	mov	r6, r0
 801020a:	b360      	cbz	r0, 8010266 <__ssputs_r+0xa2>
 801020c:	6921      	ldr	r1, [r4, #16]
 801020e:	464a      	mov	r2, r9
 8010210:	f7ff ff59 	bl	80100c6 <memcpy>
 8010214:	89a3      	ldrh	r3, [r4, #12]
 8010216:	f423 6390 	bic.w	r3, r3, #1152	@ 0x480
 801021a:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 801021e:	81a3      	strh	r3, [r4, #12]
 8010220:	6126      	str	r6, [r4, #16]
 8010222:	6165      	str	r5, [r4, #20]
 8010224:	444e      	add	r6, r9
 8010226:	eba5 0509 	sub.w	r5, r5, r9
 801022a:	6026      	str	r6, [r4, #0]
 801022c:	60a5      	str	r5, [r4, #8]
 801022e:	463e      	mov	r6, r7
 8010230:	42be      	cmp	r6, r7
 8010232:	d900      	bls.n	8010236 <__ssputs_r+0x72>
 8010234:	463e      	mov	r6, r7
 8010236:	6820      	ldr	r0, [r4, #0]
 8010238:	4632      	mov	r2, r6
 801023a:	4641      	mov	r1, r8
 801023c:	f000 fd3c 	bl	8010cb8 <memmove>
 8010240:	68a3      	ldr	r3, [r4, #8]
 8010242:	1b9b      	subs	r3, r3, r6
 8010244:	60a3      	str	r3, [r4, #8]
 8010246:	6823      	ldr	r3, [r4, #0]
 8010248:	4433      	add	r3, r6
 801024a:	6023      	str	r3, [r4, #0]
 801024c:	2000      	movs	r0, #0
 801024e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8010252:	462a      	mov	r2, r5
 8010254:	f7ff fcc2 	bl	800fbdc <_realloc_r>
 8010258:	4606      	mov	r6, r0
 801025a:	2800      	cmp	r0, #0
 801025c:	d1e0      	bne.n	8010220 <__ssputs_r+0x5c>
 801025e:	6921      	ldr	r1, [r4, #16]
 8010260:	4650      	mov	r0, sl
 8010262:	f7ff ff5d 	bl	8010120 <_free_r>
 8010266:	230c      	movs	r3, #12
 8010268:	f8ca 3000 	str.w	r3, [sl]
 801026c:	89a3      	ldrh	r3, [r4, #12]
 801026e:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8010272:	81a3      	strh	r3, [r4, #12]
 8010274:	f04f 30ff 	mov.w	r0, #4294967295
 8010278:	e7e9      	b.n	801024e <__ssputs_r+0x8a>
	...

0801027c <_svfiprintf_r>:
 801027c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8010280:	4698      	mov	r8, r3
 8010282:	898b      	ldrh	r3, [r1, #12]
 8010284:	061b      	lsls	r3, r3, #24
 8010286:	b09d      	sub	sp, #116	@ 0x74
 8010288:	4607      	mov	r7, r0
 801028a:	460d      	mov	r5, r1
 801028c:	4614      	mov	r4, r2
 801028e:	d510      	bpl.n	80102b2 <_svfiprintf_r+0x36>
 8010290:	690b      	ldr	r3, [r1, #16]
 8010292:	b973      	cbnz	r3, 80102b2 <_svfiprintf_r+0x36>
 8010294:	2140      	movs	r1, #64	@ 0x40
 8010296:	f7ff fba9 	bl	800f9ec <_malloc_r>
 801029a:	6028      	str	r0, [r5, #0]
 801029c:	6128      	str	r0, [r5, #16]
 801029e:	b930      	cbnz	r0, 80102ae <_svfiprintf_r+0x32>
 80102a0:	230c      	movs	r3, #12
 80102a2:	603b      	str	r3, [r7, #0]
 80102a4:	f04f 30ff 	mov.w	r0, #4294967295
 80102a8:	b01d      	add	sp, #116	@ 0x74
 80102aa:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80102ae:	2340      	movs	r3, #64	@ 0x40
 80102b0:	616b      	str	r3, [r5, #20]
 80102b2:	2300      	movs	r3, #0
 80102b4:	9309      	str	r3, [sp, #36]	@ 0x24
 80102b6:	2320      	movs	r3, #32
 80102b8:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 80102bc:	f8cd 800c 	str.w	r8, [sp, #12]
 80102c0:	2330      	movs	r3, #48	@ 0x30
 80102c2:	f8df 819c 	ldr.w	r8, [pc, #412]	@ 8010460 <_svfiprintf_r+0x1e4>
 80102c6:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 80102ca:	f04f 0901 	mov.w	r9, #1
 80102ce:	4623      	mov	r3, r4
 80102d0:	469a      	mov	sl, r3
 80102d2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80102d6:	b10a      	cbz	r2, 80102dc <_svfiprintf_r+0x60>
 80102d8:	2a25      	cmp	r2, #37	@ 0x25
 80102da:	d1f9      	bne.n	80102d0 <_svfiprintf_r+0x54>
 80102dc:	ebba 0b04 	subs.w	fp, sl, r4
 80102e0:	d00b      	beq.n	80102fa <_svfiprintf_r+0x7e>
 80102e2:	465b      	mov	r3, fp
 80102e4:	4622      	mov	r2, r4
 80102e6:	4629      	mov	r1, r5
 80102e8:	4638      	mov	r0, r7
 80102ea:	f7ff ff6b 	bl	80101c4 <__ssputs_r>
 80102ee:	3001      	adds	r0, #1
 80102f0:	f000 80a7 	beq.w	8010442 <_svfiprintf_r+0x1c6>
 80102f4:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 80102f6:	445a      	add	r2, fp
 80102f8:	9209      	str	r2, [sp, #36]	@ 0x24
 80102fa:	f89a 3000 	ldrb.w	r3, [sl]
 80102fe:	2b00      	cmp	r3, #0
 8010300:	f000 809f 	beq.w	8010442 <_svfiprintf_r+0x1c6>
 8010304:	2300      	movs	r3, #0
 8010306:	f04f 32ff 	mov.w	r2, #4294967295
 801030a:	e9cd 2305 	strd	r2, r3, [sp, #20]
 801030e:	f10a 0a01 	add.w	sl, sl, #1
 8010312:	9304      	str	r3, [sp, #16]
 8010314:	9307      	str	r3, [sp, #28]
 8010316:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 801031a:	931a      	str	r3, [sp, #104]	@ 0x68
 801031c:	4654      	mov	r4, sl
 801031e:	2205      	movs	r2, #5
 8010320:	f814 1b01 	ldrb.w	r1, [r4], #1
 8010324:	484e      	ldr	r0, [pc, #312]	@ (8010460 <_svfiprintf_r+0x1e4>)
 8010326:	f7ef ff93 	bl	8000250 <memchr>
 801032a:	9a04      	ldr	r2, [sp, #16]
 801032c:	b9d8      	cbnz	r0, 8010366 <_svfiprintf_r+0xea>
 801032e:	06d0      	lsls	r0, r2, #27
 8010330:	bf44      	itt	mi
 8010332:	2320      	movmi	r3, #32
 8010334:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8010338:	0711      	lsls	r1, r2, #28
 801033a:	bf44      	itt	mi
 801033c:	232b      	movmi	r3, #43	@ 0x2b
 801033e:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8010342:	f89a 3000 	ldrb.w	r3, [sl]
 8010346:	2b2a      	cmp	r3, #42	@ 0x2a
 8010348:	d015      	beq.n	8010376 <_svfiprintf_r+0xfa>
 801034a:	9a07      	ldr	r2, [sp, #28]
 801034c:	4654      	mov	r4, sl
 801034e:	2000      	movs	r0, #0
 8010350:	f04f 0c0a 	mov.w	ip, #10
 8010354:	4621      	mov	r1, r4
 8010356:	f811 3b01 	ldrb.w	r3, [r1], #1
 801035a:	3b30      	subs	r3, #48	@ 0x30
 801035c:	2b09      	cmp	r3, #9
 801035e:	d94b      	bls.n	80103f8 <_svfiprintf_r+0x17c>
 8010360:	b1b0      	cbz	r0, 8010390 <_svfiprintf_r+0x114>
 8010362:	9207      	str	r2, [sp, #28]
 8010364:	e014      	b.n	8010390 <_svfiprintf_r+0x114>
 8010366:	eba0 0308 	sub.w	r3, r0, r8
 801036a:	fa09 f303 	lsl.w	r3, r9, r3
 801036e:	4313      	orrs	r3, r2
 8010370:	9304      	str	r3, [sp, #16]
 8010372:	46a2      	mov	sl, r4
 8010374:	e7d2      	b.n	801031c <_svfiprintf_r+0xa0>
 8010376:	9b03      	ldr	r3, [sp, #12]
 8010378:	1d19      	adds	r1, r3, #4
 801037a:	681b      	ldr	r3, [r3, #0]
 801037c:	9103      	str	r1, [sp, #12]
 801037e:	2b00      	cmp	r3, #0
 8010380:	bfbb      	ittet	lt
 8010382:	425b      	neglt	r3, r3
 8010384:	f042 0202 	orrlt.w	r2, r2, #2
 8010388:	9307      	strge	r3, [sp, #28]
 801038a:	9307      	strlt	r3, [sp, #28]
 801038c:	bfb8      	it	lt
 801038e:	9204      	strlt	r2, [sp, #16]
 8010390:	7823      	ldrb	r3, [r4, #0]
 8010392:	2b2e      	cmp	r3, #46	@ 0x2e
 8010394:	d10a      	bne.n	80103ac <_svfiprintf_r+0x130>
 8010396:	7863      	ldrb	r3, [r4, #1]
 8010398:	2b2a      	cmp	r3, #42	@ 0x2a
 801039a:	d132      	bne.n	8010402 <_svfiprintf_r+0x186>
 801039c:	9b03      	ldr	r3, [sp, #12]
 801039e:	1d1a      	adds	r2, r3, #4
 80103a0:	681b      	ldr	r3, [r3, #0]
 80103a2:	9203      	str	r2, [sp, #12]
 80103a4:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 80103a8:	3402      	adds	r4, #2
 80103aa:	9305      	str	r3, [sp, #20]
 80103ac:	f8df a0c0 	ldr.w	sl, [pc, #192]	@ 8010470 <_svfiprintf_r+0x1f4>
 80103b0:	7821      	ldrb	r1, [r4, #0]
 80103b2:	2203      	movs	r2, #3
 80103b4:	4650      	mov	r0, sl
 80103b6:	f7ef ff4b 	bl	8000250 <memchr>
 80103ba:	b138      	cbz	r0, 80103cc <_svfiprintf_r+0x150>
 80103bc:	9b04      	ldr	r3, [sp, #16]
 80103be:	eba0 000a 	sub.w	r0, r0, sl
 80103c2:	2240      	movs	r2, #64	@ 0x40
 80103c4:	4082      	lsls	r2, r0
 80103c6:	4313      	orrs	r3, r2
 80103c8:	3401      	adds	r4, #1
 80103ca:	9304      	str	r3, [sp, #16]
 80103cc:	f814 1b01 	ldrb.w	r1, [r4], #1
 80103d0:	4824      	ldr	r0, [pc, #144]	@ (8010464 <_svfiprintf_r+0x1e8>)
 80103d2:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 80103d6:	2206      	movs	r2, #6
 80103d8:	f7ef ff3a 	bl	8000250 <memchr>
 80103dc:	2800      	cmp	r0, #0
 80103de:	d036      	beq.n	801044e <_svfiprintf_r+0x1d2>
 80103e0:	4b21      	ldr	r3, [pc, #132]	@ (8010468 <_svfiprintf_r+0x1ec>)
 80103e2:	bb1b      	cbnz	r3, 801042c <_svfiprintf_r+0x1b0>
 80103e4:	9b03      	ldr	r3, [sp, #12]
 80103e6:	3307      	adds	r3, #7
 80103e8:	f023 0307 	bic.w	r3, r3, #7
 80103ec:	3308      	adds	r3, #8
 80103ee:	9303      	str	r3, [sp, #12]
 80103f0:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80103f2:	4433      	add	r3, r6
 80103f4:	9309      	str	r3, [sp, #36]	@ 0x24
 80103f6:	e76a      	b.n	80102ce <_svfiprintf_r+0x52>
 80103f8:	fb0c 3202 	mla	r2, ip, r2, r3
 80103fc:	460c      	mov	r4, r1
 80103fe:	2001      	movs	r0, #1
 8010400:	e7a8      	b.n	8010354 <_svfiprintf_r+0xd8>
 8010402:	2300      	movs	r3, #0
 8010404:	3401      	adds	r4, #1
 8010406:	9305      	str	r3, [sp, #20]
 8010408:	4619      	mov	r1, r3
 801040a:	f04f 0c0a 	mov.w	ip, #10
 801040e:	4620      	mov	r0, r4
 8010410:	f810 2b01 	ldrb.w	r2, [r0], #1
 8010414:	3a30      	subs	r2, #48	@ 0x30
 8010416:	2a09      	cmp	r2, #9
 8010418:	d903      	bls.n	8010422 <_svfiprintf_r+0x1a6>
 801041a:	2b00      	cmp	r3, #0
 801041c:	d0c6      	beq.n	80103ac <_svfiprintf_r+0x130>
 801041e:	9105      	str	r1, [sp, #20]
 8010420:	e7c4      	b.n	80103ac <_svfiprintf_r+0x130>
 8010422:	fb0c 2101 	mla	r1, ip, r1, r2
 8010426:	4604      	mov	r4, r0
 8010428:	2301      	movs	r3, #1
 801042a:	e7f0      	b.n	801040e <_svfiprintf_r+0x192>
 801042c:	ab03      	add	r3, sp, #12
 801042e:	9300      	str	r3, [sp, #0]
 8010430:	462a      	mov	r2, r5
 8010432:	4b0e      	ldr	r3, [pc, #56]	@ (801046c <_svfiprintf_r+0x1f0>)
 8010434:	a904      	add	r1, sp, #16
 8010436:	4638      	mov	r0, r7
 8010438:	f3af 8000 	nop.w
 801043c:	1c42      	adds	r2, r0, #1
 801043e:	4606      	mov	r6, r0
 8010440:	d1d6      	bne.n	80103f0 <_svfiprintf_r+0x174>
 8010442:	89ab      	ldrh	r3, [r5, #12]
 8010444:	065b      	lsls	r3, r3, #25
 8010446:	f53f af2d 	bmi.w	80102a4 <_svfiprintf_r+0x28>
 801044a:	9809      	ldr	r0, [sp, #36]	@ 0x24
 801044c:	e72c      	b.n	80102a8 <_svfiprintf_r+0x2c>
 801044e:	ab03      	add	r3, sp, #12
 8010450:	9300      	str	r3, [sp, #0]
 8010452:	462a      	mov	r2, r5
 8010454:	4b05      	ldr	r3, [pc, #20]	@ (801046c <_svfiprintf_r+0x1f0>)
 8010456:	a904      	add	r1, sp, #16
 8010458:	4638      	mov	r0, r7
 801045a:	f000 f9bb 	bl	80107d4 <_printf_i>
 801045e:	e7ed      	b.n	801043c <_svfiprintf_r+0x1c0>
 8010460:	0801b9fc 	.word	0x0801b9fc
 8010464:	0801ba06 	.word	0x0801ba06
 8010468:	00000000 	.word	0x00000000
 801046c:	080101c5 	.word	0x080101c5
 8010470:	0801ba02 	.word	0x0801ba02

08010474 <__sfputc_r>:
 8010474:	6893      	ldr	r3, [r2, #8]
 8010476:	3b01      	subs	r3, #1
 8010478:	2b00      	cmp	r3, #0
 801047a:	b410      	push	{r4}
 801047c:	6093      	str	r3, [r2, #8]
 801047e:	da08      	bge.n	8010492 <__sfputc_r+0x1e>
 8010480:	6994      	ldr	r4, [r2, #24]
 8010482:	42a3      	cmp	r3, r4
 8010484:	db01      	blt.n	801048a <__sfputc_r+0x16>
 8010486:	290a      	cmp	r1, #10
 8010488:	d103      	bne.n	8010492 <__sfputc_r+0x1e>
 801048a:	f85d 4b04 	ldr.w	r4, [sp], #4
 801048e:	f000 bb7f 	b.w	8010b90 <__swbuf_r>
 8010492:	6813      	ldr	r3, [r2, #0]
 8010494:	1c58      	adds	r0, r3, #1
 8010496:	6010      	str	r0, [r2, #0]
 8010498:	7019      	strb	r1, [r3, #0]
 801049a:	4608      	mov	r0, r1
 801049c:	f85d 4b04 	ldr.w	r4, [sp], #4
 80104a0:	4770      	bx	lr

080104a2 <__sfputs_r>:
 80104a2:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80104a4:	4606      	mov	r6, r0
 80104a6:	460f      	mov	r7, r1
 80104a8:	4614      	mov	r4, r2
 80104aa:	18d5      	adds	r5, r2, r3
 80104ac:	42ac      	cmp	r4, r5
 80104ae:	d101      	bne.n	80104b4 <__sfputs_r+0x12>
 80104b0:	2000      	movs	r0, #0
 80104b2:	e007      	b.n	80104c4 <__sfputs_r+0x22>
 80104b4:	f814 1b01 	ldrb.w	r1, [r4], #1
 80104b8:	463a      	mov	r2, r7
 80104ba:	4630      	mov	r0, r6
 80104bc:	f7ff ffda 	bl	8010474 <__sfputc_r>
 80104c0:	1c43      	adds	r3, r0, #1
 80104c2:	d1f3      	bne.n	80104ac <__sfputs_r+0xa>
 80104c4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

080104c8 <_vfiprintf_r>:
 80104c8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80104cc:	460d      	mov	r5, r1
 80104ce:	b09d      	sub	sp, #116	@ 0x74
 80104d0:	4614      	mov	r4, r2
 80104d2:	4698      	mov	r8, r3
 80104d4:	4606      	mov	r6, r0
 80104d6:	b118      	cbz	r0, 80104e0 <_vfiprintf_r+0x18>
 80104d8:	6a03      	ldr	r3, [r0, #32]
 80104da:	b90b      	cbnz	r3, 80104e0 <_vfiprintf_r+0x18>
 80104dc:	f7ff fcbc 	bl	800fe58 <__sinit>
 80104e0:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 80104e2:	07d9      	lsls	r1, r3, #31
 80104e4:	d405      	bmi.n	80104f2 <_vfiprintf_r+0x2a>
 80104e6:	89ab      	ldrh	r3, [r5, #12]
 80104e8:	059a      	lsls	r2, r3, #22
 80104ea:	d402      	bmi.n	80104f2 <_vfiprintf_r+0x2a>
 80104ec:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 80104ee:	f7ff fde8 	bl	80100c2 <__retarget_lock_acquire_recursive>
 80104f2:	89ab      	ldrh	r3, [r5, #12]
 80104f4:	071b      	lsls	r3, r3, #28
 80104f6:	d501      	bpl.n	80104fc <_vfiprintf_r+0x34>
 80104f8:	692b      	ldr	r3, [r5, #16]
 80104fa:	b99b      	cbnz	r3, 8010524 <_vfiprintf_r+0x5c>
 80104fc:	4629      	mov	r1, r5
 80104fe:	4630      	mov	r0, r6
 8010500:	f000 fb84 	bl	8010c0c <__swsetup_r>
 8010504:	b170      	cbz	r0, 8010524 <_vfiprintf_r+0x5c>
 8010506:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8010508:	07dc      	lsls	r4, r3, #31
 801050a:	d504      	bpl.n	8010516 <_vfiprintf_r+0x4e>
 801050c:	f04f 30ff 	mov.w	r0, #4294967295
 8010510:	b01d      	add	sp, #116	@ 0x74
 8010512:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8010516:	89ab      	ldrh	r3, [r5, #12]
 8010518:	0598      	lsls	r0, r3, #22
 801051a:	d4f7      	bmi.n	801050c <_vfiprintf_r+0x44>
 801051c:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 801051e:	f7ff fdd1 	bl	80100c4 <__retarget_lock_release_recursive>
 8010522:	e7f3      	b.n	801050c <_vfiprintf_r+0x44>
 8010524:	2300      	movs	r3, #0
 8010526:	9309      	str	r3, [sp, #36]	@ 0x24
 8010528:	2320      	movs	r3, #32
 801052a:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 801052e:	f8cd 800c 	str.w	r8, [sp, #12]
 8010532:	2330      	movs	r3, #48	@ 0x30
 8010534:	f8df 81ac 	ldr.w	r8, [pc, #428]	@ 80106e4 <_vfiprintf_r+0x21c>
 8010538:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 801053c:	f04f 0901 	mov.w	r9, #1
 8010540:	4623      	mov	r3, r4
 8010542:	469a      	mov	sl, r3
 8010544:	f813 2b01 	ldrb.w	r2, [r3], #1
 8010548:	b10a      	cbz	r2, 801054e <_vfiprintf_r+0x86>
 801054a:	2a25      	cmp	r2, #37	@ 0x25
 801054c:	d1f9      	bne.n	8010542 <_vfiprintf_r+0x7a>
 801054e:	ebba 0b04 	subs.w	fp, sl, r4
 8010552:	d00b      	beq.n	801056c <_vfiprintf_r+0xa4>
 8010554:	465b      	mov	r3, fp
 8010556:	4622      	mov	r2, r4
 8010558:	4629      	mov	r1, r5
 801055a:	4630      	mov	r0, r6
 801055c:	f7ff ffa1 	bl	80104a2 <__sfputs_r>
 8010560:	3001      	adds	r0, #1
 8010562:	f000 80a7 	beq.w	80106b4 <_vfiprintf_r+0x1ec>
 8010566:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8010568:	445a      	add	r2, fp
 801056a:	9209      	str	r2, [sp, #36]	@ 0x24
 801056c:	f89a 3000 	ldrb.w	r3, [sl]
 8010570:	2b00      	cmp	r3, #0
 8010572:	f000 809f 	beq.w	80106b4 <_vfiprintf_r+0x1ec>
 8010576:	2300      	movs	r3, #0
 8010578:	f04f 32ff 	mov.w	r2, #4294967295
 801057c:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8010580:	f10a 0a01 	add.w	sl, sl, #1
 8010584:	9304      	str	r3, [sp, #16]
 8010586:	9307      	str	r3, [sp, #28]
 8010588:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 801058c:	931a      	str	r3, [sp, #104]	@ 0x68
 801058e:	4654      	mov	r4, sl
 8010590:	2205      	movs	r2, #5
 8010592:	f814 1b01 	ldrb.w	r1, [r4], #1
 8010596:	4853      	ldr	r0, [pc, #332]	@ (80106e4 <_vfiprintf_r+0x21c>)
 8010598:	f7ef fe5a 	bl	8000250 <memchr>
 801059c:	9a04      	ldr	r2, [sp, #16]
 801059e:	b9d8      	cbnz	r0, 80105d8 <_vfiprintf_r+0x110>
 80105a0:	06d1      	lsls	r1, r2, #27
 80105a2:	bf44      	itt	mi
 80105a4:	2320      	movmi	r3, #32
 80105a6:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 80105aa:	0713      	lsls	r3, r2, #28
 80105ac:	bf44      	itt	mi
 80105ae:	232b      	movmi	r3, #43	@ 0x2b
 80105b0:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 80105b4:	f89a 3000 	ldrb.w	r3, [sl]
 80105b8:	2b2a      	cmp	r3, #42	@ 0x2a
 80105ba:	d015      	beq.n	80105e8 <_vfiprintf_r+0x120>
 80105bc:	9a07      	ldr	r2, [sp, #28]
 80105be:	4654      	mov	r4, sl
 80105c0:	2000      	movs	r0, #0
 80105c2:	f04f 0c0a 	mov.w	ip, #10
 80105c6:	4621      	mov	r1, r4
 80105c8:	f811 3b01 	ldrb.w	r3, [r1], #1
 80105cc:	3b30      	subs	r3, #48	@ 0x30
 80105ce:	2b09      	cmp	r3, #9
 80105d0:	d94b      	bls.n	801066a <_vfiprintf_r+0x1a2>
 80105d2:	b1b0      	cbz	r0, 8010602 <_vfiprintf_r+0x13a>
 80105d4:	9207      	str	r2, [sp, #28]
 80105d6:	e014      	b.n	8010602 <_vfiprintf_r+0x13a>
 80105d8:	eba0 0308 	sub.w	r3, r0, r8
 80105dc:	fa09 f303 	lsl.w	r3, r9, r3
 80105e0:	4313      	orrs	r3, r2
 80105e2:	9304      	str	r3, [sp, #16]
 80105e4:	46a2      	mov	sl, r4
 80105e6:	e7d2      	b.n	801058e <_vfiprintf_r+0xc6>
 80105e8:	9b03      	ldr	r3, [sp, #12]
 80105ea:	1d19      	adds	r1, r3, #4
 80105ec:	681b      	ldr	r3, [r3, #0]
 80105ee:	9103      	str	r1, [sp, #12]
 80105f0:	2b00      	cmp	r3, #0
 80105f2:	bfbb      	ittet	lt
 80105f4:	425b      	neglt	r3, r3
 80105f6:	f042 0202 	orrlt.w	r2, r2, #2
 80105fa:	9307      	strge	r3, [sp, #28]
 80105fc:	9307      	strlt	r3, [sp, #28]
 80105fe:	bfb8      	it	lt
 8010600:	9204      	strlt	r2, [sp, #16]
 8010602:	7823      	ldrb	r3, [r4, #0]
 8010604:	2b2e      	cmp	r3, #46	@ 0x2e
 8010606:	d10a      	bne.n	801061e <_vfiprintf_r+0x156>
 8010608:	7863      	ldrb	r3, [r4, #1]
 801060a:	2b2a      	cmp	r3, #42	@ 0x2a
 801060c:	d132      	bne.n	8010674 <_vfiprintf_r+0x1ac>
 801060e:	9b03      	ldr	r3, [sp, #12]
 8010610:	1d1a      	adds	r2, r3, #4
 8010612:	681b      	ldr	r3, [r3, #0]
 8010614:	9203      	str	r2, [sp, #12]
 8010616:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 801061a:	3402      	adds	r4, #2
 801061c:	9305      	str	r3, [sp, #20]
 801061e:	f8df a0d4 	ldr.w	sl, [pc, #212]	@ 80106f4 <_vfiprintf_r+0x22c>
 8010622:	7821      	ldrb	r1, [r4, #0]
 8010624:	2203      	movs	r2, #3
 8010626:	4650      	mov	r0, sl
 8010628:	f7ef fe12 	bl	8000250 <memchr>
 801062c:	b138      	cbz	r0, 801063e <_vfiprintf_r+0x176>
 801062e:	9b04      	ldr	r3, [sp, #16]
 8010630:	eba0 000a 	sub.w	r0, r0, sl
 8010634:	2240      	movs	r2, #64	@ 0x40
 8010636:	4082      	lsls	r2, r0
 8010638:	4313      	orrs	r3, r2
 801063a:	3401      	adds	r4, #1
 801063c:	9304      	str	r3, [sp, #16]
 801063e:	f814 1b01 	ldrb.w	r1, [r4], #1
 8010642:	4829      	ldr	r0, [pc, #164]	@ (80106e8 <_vfiprintf_r+0x220>)
 8010644:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 8010648:	2206      	movs	r2, #6
 801064a:	f7ef fe01 	bl	8000250 <memchr>
 801064e:	2800      	cmp	r0, #0
 8010650:	d03f      	beq.n	80106d2 <_vfiprintf_r+0x20a>
 8010652:	4b26      	ldr	r3, [pc, #152]	@ (80106ec <_vfiprintf_r+0x224>)
 8010654:	bb1b      	cbnz	r3, 801069e <_vfiprintf_r+0x1d6>
 8010656:	9b03      	ldr	r3, [sp, #12]
 8010658:	3307      	adds	r3, #7
 801065a:	f023 0307 	bic.w	r3, r3, #7
 801065e:	3308      	adds	r3, #8
 8010660:	9303      	str	r3, [sp, #12]
 8010662:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8010664:	443b      	add	r3, r7
 8010666:	9309      	str	r3, [sp, #36]	@ 0x24
 8010668:	e76a      	b.n	8010540 <_vfiprintf_r+0x78>
 801066a:	fb0c 3202 	mla	r2, ip, r2, r3
 801066e:	460c      	mov	r4, r1
 8010670:	2001      	movs	r0, #1
 8010672:	e7a8      	b.n	80105c6 <_vfiprintf_r+0xfe>
 8010674:	2300      	movs	r3, #0
 8010676:	3401      	adds	r4, #1
 8010678:	9305      	str	r3, [sp, #20]
 801067a:	4619      	mov	r1, r3
 801067c:	f04f 0c0a 	mov.w	ip, #10
 8010680:	4620      	mov	r0, r4
 8010682:	f810 2b01 	ldrb.w	r2, [r0], #1
 8010686:	3a30      	subs	r2, #48	@ 0x30
 8010688:	2a09      	cmp	r2, #9
 801068a:	d903      	bls.n	8010694 <_vfiprintf_r+0x1cc>
 801068c:	2b00      	cmp	r3, #0
 801068e:	d0c6      	beq.n	801061e <_vfiprintf_r+0x156>
 8010690:	9105      	str	r1, [sp, #20]
 8010692:	e7c4      	b.n	801061e <_vfiprintf_r+0x156>
 8010694:	fb0c 2101 	mla	r1, ip, r1, r2
 8010698:	4604      	mov	r4, r0
 801069a:	2301      	movs	r3, #1
 801069c:	e7f0      	b.n	8010680 <_vfiprintf_r+0x1b8>
 801069e:	ab03      	add	r3, sp, #12
 80106a0:	9300      	str	r3, [sp, #0]
 80106a2:	462a      	mov	r2, r5
 80106a4:	4b12      	ldr	r3, [pc, #72]	@ (80106f0 <_vfiprintf_r+0x228>)
 80106a6:	a904      	add	r1, sp, #16
 80106a8:	4630      	mov	r0, r6
 80106aa:	f3af 8000 	nop.w
 80106ae:	4607      	mov	r7, r0
 80106b0:	1c78      	adds	r0, r7, #1
 80106b2:	d1d6      	bne.n	8010662 <_vfiprintf_r+0x19a>
 80106b4:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 80106b6:	07d9      	lsls	r1, r3, #31
 80106b8:	d405      	bmi.n	80106c6 <_vfiprintf_r+0x1fe>
 80106ba:	89ab      	ldrh	r3, [r5, #12]
 80106bc:	059a      	lsls	r2, r3, #22
 80106be:	d402      	bmi.n	80106c6 <_vfiprintf_r+0x1fe>
 80106c0:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 80106c2:	f7ff fcff 	bl	80100c4 <__retarget_lock_release_recursive>
 80106c6:	89ab      	ldrh	r3, [r5, #12]
 80106c8:	065b      	lsls	r3, r3, #25
 80106ca:	f53f af1f 	bmi.w	801050c <_vfiprintf_r+0x44>
 80106ce:	9809      	ldr	r0, [sp, #36]	@ 0x24
 80106d0:	e71e      	b.n	8010510 <_vfiprintf_r+0x48>
 80106d2:	ab03      	add	r3, sp, #12
 80106d4:	9300      	str	r3, [sp, #0]
 80106d6:	462a      	mov	r2, r5
 80106d8:	4b05      	ldr	r3, [pc, #20]	@ (80106f0 <_vfiprintf_r+0x228>)
 80106da:	a904      	add	r1, sp, #16
 80106dc:	4630      	mov	r0, r6
 80106de:	f000 f879 	bl	80107d4 <_printf_i>
 80106e2:	e7e4      	b.n	80106ae <_vfiprintf_r+0x1e6>
 80106e4:	0801b9fc 	.word	0x0801b9fc
 80106e8:	0801ba06 	.word	0x0801ba06
 80106ec:	00000000 	.word	0x00000000
 80106f0:	080104a3 	.word	0x080104a3
 80106f4:	0801ba02 	.word	0x0801ba02

080106f8 <_printf_common>:
 80106f8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80106fc:	4616      	mov	r6, r2
 80106fe:	4698      	mov	r8, r3
 8010700:	688a      	ldr	r2, [r1, #8]
 8010702:	690b      	ldr	r3, [r1, #16]
 8010704:	f8dd 9020 	ldr.w	r9, [sp, #32]
 8010708:	4293      	cmp	r3, r2
 801070a:	bfb8      	it	lt
 801070c:	4613      	movlt	r3, r2
 801070e:	6033      	str	r3, [r6, #0]
 8010710:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 8010714:	4607      	mov	r7, r0
 8010716:	460c      	mov	r4, r1
 8010718:	b10a      	cbz	r2, 801071e <_printf_common+0x26>
 801071a:	3301      	adds	r3, #1
 801071c:	6033      	str	r3, [r6, #0]
 801071e:	6823      	ldr	r3, [r4, #0]
 8010720:	0699      	lsls	r1, r3, #26
 8010722:	bf42      	ittt	mi
 8010724:	6833      	ldrmi	r3, [r6, #0]
 8010726:	3302      	addmi	r3, #2
 8010728:	6033      	strmi	r3, [r6, #0]
 801072a:	6825      	ldr	r5, [r4, #0]
 801072c:	f015 0506 	ands.w	r5, r5, #6
 8010730:	d106      	bne.n	8010740 <_printf_common+0x48>
 8010732:	f104 0a19 	add.w	sl, r4, #25
 8010736:	68e3      	ldr	r3, [r4, #12]
 8010738:	6832      	ldr	r2, [r6, #0]
 801073a:	1a9b      	subs	r3, r3, r2
 801073c:	42ab      	cmp	r3, r5
 801073e:	dc26      	bgt.n	801078e <_printf_common+0x96>
 8010740:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 8010744:	6822      	ldr	r2, [r4, #0]
 8010746:	3b00      	subs	r3, #0
 8010748:	bf18      	it	ne
 801074a:	2301      	movne	r3, #1
 801074c:	0692      	lsls	r2, r2, #26
 801074e:	d42b      	bmi.n	80107a8 <_printf_common+0xb0>
 8010750:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 8010754:	4641      	mov	r1, r8
 8010756:	4638      	mov	r0, r7
 8010758:	47c8      	blx	r9
 801075a:	3001      	adds	r0, #1
 801075c:	d01e      	beq.n	801079c <_printf_common+0xa4>
 801075e:	6823      	ldr	r3, [r4, #0]
 8010760:	6922      	ldr	r2, [r4, #16]
 8010762:	f003 0306 	and.w	r3, r3, #6
 8010766:	2b04      	cmp	r3, #4
 8010768:	bf02      	ittt	eq
 801076a:	68e5      	ldreq	r5, [r4, #12]
 801076c:	6833      	ldreq	r3, [r6, #0]
 801076e:	1aed      	subeq	r5, r5, r3
 8010770:	68a3      	ldr	r3, [r4, #8]
 8010772:	bf0c      	ite	eq
 8010774:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8010778:	2500      	movne	r5, #0
 801077a:	4293      	cmp	r3, r2
 801077c:	bfc4      	itt	gt
 801077e:	1a9b      	subgt	r3, r3, r2
 8010780:	18ed      	addgt	r5, r5, r3
 8010782:	2600      	movs	r6, #0
 8010784:	341a      	adds	r4, #26
 8010786:	42b5      	cmp	r5, r6
 8010788:	d11a      	bne.n	80107c0 <_printf_common+0xc8>
 801078a:	2000      	movs	r0, #0
 801078c:	e008      	b.n	80107a0 <_printf_common+0xa8>
 801078e:	2301      	movs	r3, #1
 8010790:	4652      	mov	r2, sl
 8010792:	4641      	mov	r1, r8
 8010794:	4638      	mov	r0, r7
 8010796:	47c8      	blx	r9
 8010798:	3001      	adds	r0, #1
 801079a:	d103      	bne.n	80107a4 <_printf_common+0xac>
 801079c:	f04f 30ff 	mov.w	r0, #4294967295
 80107a0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80107a4:	3501      	adds	r5, #1
 80107a6:	e7c6      	b.n	8010736 <_printf_common+0x3e>
 80107a8:	18e1      	adds	r1, r4, r3
 80107aa:	1c5a      	adds	r2, r3, #1
 80107ac:	2030      	movs	r0, #48	@ 0x30
 80107ae:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 80107b2:	4422      	add	r2, r4
 80107b4:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 80107b8:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 80107bc:	3302      	adds	r3, #2
 80107be:	e7c7      	b.n	8010750 <_printf_common+0x58>
 80107c0:	2301      	movs	r3, #1
 80107c2:	4622      	mov	r2, r4
 80107c4:	4641      	mov	r1, r8
 80107c6:	4638      	mov	r0, r7
 80107c8:	47c8      	blx	r9
 80107ca:	3001      	adds	r0, #1
 80107cc:	d0e6      	beq.n	801079c <_printf_common+0xa4>
 80107ce:	3601      	adds	r6, #1
 80107d0:	e7d9      	b.n	8010786 <_printf_common+0x8e>
	...

080107d4 <_printf_i>:
 80107d4:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 80107d8:	7e0f      	ldrb	r7, [r1, #24]
 80107da:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 80107dc:	2f78      	cmp	r7, #120	@ 0x78
 80107de:	4691      	mov	r9, r2
 80107e0:	4680      	mov	r8, r0
 80107e2:	460c      	mov	r4, r1
 80107e4:	469a      	mov	sl, r3
 80107e6:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 80107ea:	d807      	bhi.n	80107fc <_printf_i+0x28>
 80107ec:	2f62      	cmp	r7, #98	@ 0x62
 80107ee:	d80a      	bhi.n	8010806 <_printf_i+0x32>
 80107f0:	2f00      	cmp	r7, #0
 80107f2:	f000 80d2 	beq.w	801099a <_printf_i+0x1c6>
 80107f6:	2f58      	cmp	r7, #88	@ 0x58
 80107f8:	f000 80b9 	beq.w	801096e <_printf_i+0x19a>
 80107fc:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8010800:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 8010804:	e03a      	b.n	801087c <_printf_i+0xa8>
 8010806:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 801080a:	2b15      	cmp	r3, #21
 801080c:	d8f6      	bhi.n	80107fc <_printf_i+0x28>
 801080e:	a101      	add	r1, pc, #4	@ (adr r1, 8010814 <_printf_i+0x40>)
 8010810:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8010814:	0801086d 	.word	0x0801086d
 8010818:	08010881 	.word	0x08010881
 801081c:	080107fd 	.word	0x080107fd
 8010820:	080107fd 	.word	0x080107fd
 8010824:	080107fd 	.word	0x080107fd
 8010828:	080107fd 	.word	0x080107fd
 801082c:	08010881 	.word	0x08010881
 8010830:	080107fd 	.word	0x080107fd
 8010834:	080107fd 	.word	0x080107fd
 8010838:	080107fd 	.word	0x080107fd
 801083c:	080107fd 	.word	0x080107fd
 8010840:	08010981 	.word	0x08010981
 8010844:	080108ab 	.word	0x080108ab
 8010848:	0801093b 	.word	0x0801093b
 801084c:	080107fd 	.word	0x080107fd
 8010850:	080107fd 	.word	0x080107fd
 8010854:	080109a3 	.word	0x080109a3
 8010858:	080107fd 	.word	0x080107fd
 801085c:	080108ab 	.word	0x080108ab
 8010860:	080107fd 	.word	0x080107fd
 8010864:	080107fd 	.word	0x080107fd
 8010868:	08010943 	.word	0x08010943
 801086c:	6833      	ldr	r3, [r6, #0]
 801086e:	1d1a      	adds	r2, r3, #4
 8010870:	681b      	ldr	r3, [r3, #0]
 8010872:	6032      	str	r2, [r6, #0]
 8010874:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8010878:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 801087c:	2301      	movs	r3, #1
 801087e:	e09d      	b.n	80109bc <_printf_i+0x1e8>
 8010880:	6833      	ldr	r3, [r6, #0]
 8010882:	6820      	ldr	r0, [r4, #0]
 8010884:	1d19      	adds	r1, r3, #4
 8010886:	6031      	str	r1, [r6, #0]
 8010888:	0606      	lsls	r6, r0, #24
 801088a:	d501      	bpl.n	8010890 <_printf_i+0xbc>
 801088c:	681d      	ldr	r5, [r3, #0]
 801088e:	e003      	b.n	8010898 <_printf_i+0xc4>
 8010890:	0645      	lsls	r5, r0, #25
 8010892:	d5fb      	bpl.n	801088c <_printf_i+0xb8>
 8010894:	f9b3 5000 	ldrsh.w	r5, [r3]
 8010898:	2d00      	cmp	r5, #0
 801089a:	da03      	bge.n	80108a4 <_printf_i+0xd0>
 801089c:	232d      	movs	r3, #45	@ 0x2d
 801089e:	426d      	negs	r5, r5
 80108a0:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 80108a4:	4859      	ldr	r0, [pc, #356]	@ (8010a0c <_printf_i+0x238>)
 80108a6:	230a      	movs	r3, #10
 80108a8:	e011      	b.n	80108ce <_printf_i+0xfa>
 80108aa:	6821      	ldr	r1, [r4, #0]
 80108ac:	6833      	ldr	r3, [r6, #0]
 80108ae:	0608      	lsls	r0, r1, #24
 80108b0:	f853 5b04 	ldr.w	r5, [r3], #4
 80108b4:	d402      	bmi.n	80108bc <_printf_i+0xe8>
 80108b6:	0649      	lsls	r1, r1, #25
 80108b8:	bf48      	it	mi
 80108ba:	b2ad      	uxthmi	r5, r5
 80108bc:	2f6f      	cmp	r7, #111	@ 0x6f
 80108be:	4853      	ldr	r0, [pc, #332]	@ (8010a0c <_printf_i+0x238>)
 80108c0:	6033      	str	r3, [r6, #0]
 80108c2:	bf14      	ite	ne
 80108c4:	230a      	movne	r3, #10
 80108c6:	2308      	moveq	r3, #8
 80108c8:	2100      	movs	r1, #0
 80108ca:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 80108ce:	6866      	ldr	r6, [r4, #4]
 80108d0:	60a6      	str	r6, [r4, #8]
 80108d2:	2e00      	cmp	r6, #0
 80108d4:	bfa2      	ittt	ge
 80108d6:	6821      	ldrge	r1, [r4, #0]
 80108d8:	f021 0104 	bicge.w	r1, r1, #4
 80108dc:	6021      	strge	r1, [r4, #0]
 80108de:	b90d      	cbnz	r5, 80108e4 <_printf_i+0x110>
 80108e0:	2e00      	cmp	r6, #0
 80108e2:	d04b      	beq.n	801097c <_printf_i+0x1a8>
 80108e4:	4616      	mov	r6, r2
 80108e6:	fbb5 f1f3 	udiv	r1, r5, r3
 80108ea:	fb03 5711 	mls	r7, r3, r1, r5
 80108ee:	5dc7      	ldrb	r7, [r0, r7]
 80108f0:	f806 7d01 	strb.w	r7, [r6, #-1]!
 80108f4:	462f      	mov	r7, r5
 80108f6:	42bb      	cmp	r3, r7
 80108f8:	460d      	mov	r5, r1
 80108fa:	d9f4      	bls.n	80108e6 <_printf_i+0x112>
 80108fc:	2b08      	cmp	r3, #8
 80108fe:	d10b      	bne.n	8010918 <_printf_i+0x144>
 8010900:	6823      	ldr	r3, [r4, #0]
 8010902:	07df      	lsls	r7, r3, #31
 8010904:	d508      	bpl.n	8010918 <_printf_i+0x144>
 8010906:	6923      	ldr	r3, [r4, #16]
 8010908:	6861      	ldr	r1, [r4, #4]
 801090a:	4299      	cmp	r1, r3
 801090c:	bfde      	ittt	le
 801090e:	2330      	movle	r3, #48	@ 0x30
 8010910:	f806 3c01 	strble.w	r3, [r6, #-1]
 8010914:	f106 36ff 	addle.w	r6, r6, #4294967295
 8010918:	1b92      	subs	r2, r2, r6
 801091a:	6122      	str	r2, [r4, #16]
 801091c:	f8cd a000 	str.w	sl, [sp]
 8010920:	464b      	mov	r3, r9
 8010922:	aa03      	add	r2, sp, #12
 8010924:	4621      	mov	r1, r4
 8010926:	4640      	mov	r0, r8
 8010928:	f7ff fee6 	bl	80106f8 <_printf_common>
 801092c:	3001      	adds	r0, #1
 801092e:	d14a      	bne.n	80109c6 <_printf_i+0x1f2>
 8010930:	f04f 30ff 	mov.w	r0, #4294967295
 8010934:	b004      	add	sp, #16
 8010936:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 801093a:	6823      	ldr	r3, [r4, #0]
 801093c:	f043 0320 	orr.w	r3, r3, #32
 8010940:	6023      	str	r3, [r4, #0]
 8010942:	4833      	ldr	r0, [pc, #204]	@ (8010a10 <_printf_i+0x23c>)
 8010944:	2778      	movs	r7, #120	@ 0x78
 8010946:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 801094a:	6823      	ldr	r3, [r4, #0]
 801094c:	6831      	ldr	r1, [r6, #0]
 801094e:	061f      	lsls	r7, r3, #24
 8010950:	f851 5b04 	ldr.w	r5, [r1], #4
 8010954:	d402      	bmi.n	801095c <_printf_i+0x188>
 8010956:	065f      	lsls	r7, r3, #25
 8010958:	bf48      	it	mi
 801095a:	b2ad      	uxthmi	r5, r5
 801095c:	6031      	str	r1, [r6, #0]
 801095e:	07d9      	lsls	r1, r3, #31
 8010960:	bf44      	itt	mi
 8010962:	f043 0320 	orrmi.w	r3, r3, #32
 8010966:	6023      	strmi	r3, [r4, #0]
 8010968:	b11d      	cbz	r5, 8010972 <_printf_i+0x19e>
 801096a:	2310      	movs	r3, #16
 801096c:	e7ac      	b.n	80108c8 <_printf_i+0xf4>
 801096e:	4827      	ldr	r0, [pc, #156]	@ (8010a0c <_printf_i+0x238>)
 8010970:	e7e9      	b.n	8010946 <_printf_i+0x172>
 8010972:	6823      	ldr	r3, [r4, #0]
 8010974:	f023 0320 	bic.w	r3, r3, #32
 8010978:	6023      	str	r3, [r4, #0]
 801097a:	e7f6      	b.n	801096a <_printf_i+0x196>
 801097c:	4616      	mov	r6, r2
 801097e:	e7bd      	b.n	80108fc <_printf_i+0x128>
 8010980:	6833      	ldr	r3, [r6, #0]
 8010982:	6825      	ldr	r5, [r4, #0]
 8010984:	6961      	ldr	r1, [r4, #20]
 8010986:	1d18      	adds	r0, r3, #4
 8010988:	6030      	str	r0, [r6, #0]
 801098a:	062e      	lsls	r6, r5, #24
 801098c:	681b      	ldr	r3, [r3, #0]
 801098e:	d501      	bpl.n	8010994 <_printf_i+0x1c0>
 8010990:	6019      	str	r1, [r3, #0]
 8010992:	e002      	b.n	801099a <_printf_i+0x1c6>
 8010994:	0668      	lsls	r0, r5, #25
 8010996:	d5fb      	bpl.n	8010990 <_printf_i+0x1bc>
 8010998:	8019      	strh	r1, [r3, #0]
 801099a:	2300      	movs	r3, #0
 801099c:	6123      	str	r3, [r4, #16]
 801099e:	4616      	mov	r6, r2
 80109a0:	e7bc      	b.n	801091c <_printf_i+0x148>
 80109a2:	6833      	ldr	r3, [r6, #0]
 80109a4:	1d1a      	adds	r2, r3, #4
 80109a6:	6032      	str	r2, [r6, #0]
 80109a8:	681e      	ldr	r6, [r3, #0]
 80109aa:	6862      	ldr	r2, [r4, #4]
 80109ac:	2100      	movs	r1, #0
 80109ae:	4630      	mov	r0, r6
 80109b0:	f7ef fc4e 	bl	8000250 <memchr>
 80109b4:	b108      	cbz	r0, 80109ba <_printf_i+0x1e6>
 80109b6:	1b80      	subs	r0, r0, r6
 80109b8:	6060      	str	r0, [r4, #4]
 80109ba:	6863      	ldr	r3, [r4, #4]
 80109bc:	6123      	str	r3, [r4, #16]
 80109be:	2300      	movs	r3, #0
 80109c0:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 80109c4:	e7aa      	b.n	801091c <_printf_i+0x148>
 80109c6:	6923      	ldr	r3, [r4, #16]
 80109c8:	4632      	mov	r2, r6
 80109ca:	4649      	mov	r1, r9
 80109cc:	4640      	mov	r0, r8
 80109ce:	47d0      	blx	sl
 80109d0:	3001      	adds	r0, #1
 80109d2:	d0ad      	beq.n	8010930 <_printf_i+0x15c>
 80109d4:	6823      	ldr	r3, [r4, #0]
 80109d6:	079b      	lsls	r3, r3, #30
 80109d8:	d413      	bmi.n	8010a02 <_printf_i+0x22e>
 80109da:	68e0      	ldr	r0, [r4, #12]
 80109dc:	9b03      	ldr	r3, [sp, #12]
 80109de:	4298      	cmp	r0, r3
 80109e0:	bfb8      	it	lt
 80109e2:	4618      	movlt	r0, r3
 80109e4:	e7a6      	b.n	8010934 <_printf_i+0x160>
 80109e6:	2301      	movs	r3, #1
 80109e8:	4632      	mov	r2, r6
 80109ea:	4649      	mov	r1, r9
 80109ec:	4640      	mov	r0, r8
 80109ee:	47d0      	blx	sl
 80109f0:	3001      	adds	r0, #1
 80109f2:	d09d      	beq.n	8010930 <_printf_i+0x15c>
 80109f4:	3501      	adds	r5, #1
 80109f6:	68e3      	ldr	r3, [r4, #12]
 80109f8:	9903      	ldr	r1, [sp, #12]
 80109fa:	1a5b      	subs	r3, r3, r1
 80109fc:	42ab      	cmp	r3, r5
 80109fe:	dcf2      	bgt.n	80109e6 <_printf_i+0x212>
 8010a00:	e7eb      	b.n	80109da <_printf_i+0x206>
 8010a02:	2500      	movs	r5, #0
 8010a04:	f104 0619 	add.w	r6, r4, #25
 8010a08:	e7f5      	b.n	80109f6 <_printf_i+0x222>
 8010a0a:	bf00      	nop
 8010a0c:	0801ba0d 	.word	0x0801ba0d
 8010a10:	0801ba1e 	.word	0x0801ba1e

08010a14 <__sflush_r>:
 8010a14:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 8010a18:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8010a1c:	0716      	lsls	r6, r2, #28
 8010a1e:	4605      	mov	r5, r0
 8010a20:	460c      	mov	r4, r1
 8010a22:	d454      	bmi.n	8010ace <__sflush_r+0xba>
 8010a24:	684b      	ldr	r3, [r1, #4]
 8010a26:	2b00      	cmp	r3, #0
 8010a28:	dc02      	bgt.n	8010a30 <__sflush_r+0x1c>
 8010a2a:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 8010a2c:	2b00      	cmp	r3, #0
 8010a2e:	dd48      	ble.n	8010ac2 <__sflush_r+0xae>
 8010a30:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 8010a32:	2e00      	cmp	r6, #0
 8010a34:	d045      	beq.n	8010ac2 <__sflush_r+0xae>
 8010a36:	2300      	movs	r3, #0
 8010a38:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 8010a3c:	682f      	ldr	r7, [r5, #0]
 8010a3e:	6a21      	ldr	r1, [r4, #32]
 8010a40:	602b      	str	r3, [r5, #0]
 8010a42:	d030      	beq.n	8010aa6 <__sflush_r+0x92>
 8010a44:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 8010a46:	89a3      	ldrh	r3, [r4, #12]
 8010a48:	0759      	lsls	r1, r3, #29
 8010a4a:	d505      	bpl.n	8010a58 <__sflush_r+0x44>
 8010a4c:	6863      	ldr	r3, [r4, #4]
 8010a4e:	1ad2      	subs	r2, r2, r3
 8010a50:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 8010a52:	b10b      	cbz	r3, 8010a58 <__sflush_r+0x44>
 8010a54:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 8010a56:	1ad2      	subs	r2, r2, r3
 8010a58:	2300      	movs	r3, #0
 8010a5a:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 8010a5c:	6a21      	ldr	r1, [r4, #32]
 8010a5e:	4628      	mov	r0, r5
 8010a60:	47b0      	blx	r6
 8010a62:	1c43      	adds	r3, r0, #1
 8010a64:	89a3      	ldrh	r3, [r4, #12]
 8010a66:	d106      	bne.n	8010a76 <__sflush_r+0x62>
 8010a68:	6829      	ldr	r1, [r5, #0]
 8010a6a:	291d      	cmp	r1, #29
 8010a6c:	d82b      	bhi.n	8010ac6 <__sflush_r+0xb2>
 8010a6e:	4a2a      	ldr	r2, [pc, #168]	@ (8010b18 <__sflush_r+0x104>)
 8010a70:	410a      	asrs	r2, r1
 8010a72:	07d6      	lsls	r6, r2, #31
 8010a74:	d427      	bmi.n	8010ac6 <__sflush_r+0xb2>
 8010a76:	2200      	movs	r2, #0
 8010a78:	6062      	str	r2, [r4, #4]
 8010a7a:	04d9      	lsls	r1, r3, #19
 8010a7c:	6922      	ldr	r2, [r4, #16]
 8010a7e:	6022      	str	r2, [r4, #0]
 8010a80:	d504      	bpl.n	8010a8c <__sflush_r+0x78>
 8010a82:	1c42      	adds	r2, r0, #1
 8010a84:	d101      	bne.n	8010a8a <__sflush_r+0x76>
 8010a86:	682b      	ldr	r3, [r5, #0]
 8010a88:	b903      	cbnz	r3, 8010a8c <__sflush_r+0x78>
 8010a8a:	6560      	str	r0, [r4, #84]	@ 0x54
 8010a8c:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8010a8e:	602f      	str	r7, [r5, #0]
 8010a90:	b1b9      	cbz	r1, 8010ac2 <__sflush_r+0xae>
 8010a92:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 8010a96:	4299      	cmp	r1, r3
 8010a98:	d002      	beq.n	8010aa0 <__sflush_r+0x8c>
 8010a9a:	4628      	mov	r0, r5
 8010a9c:	f7ff fb40 	bl	8010120 <_free_r>
 8010aa0:	2300      	movs	r3, #0
 8010aa2:	6363      	str	r3, [r4, #52]	@ 0x34
 8010aa4:	e00d      	b.n	8010ac2 <__sflush_r+0xae>
 8010aa6:	2301      	movs	r3, #1
 8010aa8:	4628      	mov	r0, r5
 8010aaa:	47b0      	blx	r6
 8010aac:	4602      	mov	r2, r0
 8010aae:	1c50      	adds	r0, r2, #1
 8010ab0:	d1c9      	bne.n	8010a46 <__sflush_r+0x32>
 8010ab2:	682b      	ldr	r3, [r5, #0]
 8010ab4:	2b00      	cmp	r3, #0
 8010ab6:	d0c6      	beq.n	8010a46 <__sflush_r+0x32>
 8010ab8:	2b1d      	cmp	r3, #29
 8010aba:	d001      	beq.n	8010ac0 <__sflush_r+0xac>
 8010abc:	2b16      	cmp	r3, #22
 8010abe:	d11e      	bne.n	8010afe <__sflush_r+0xea>
 8010ac0:	602f      	str	r7, [r5, #0]
 8010ac2:	2000      	movs	r0, #0
 8010ac4:	e022      	b.n	8010b0c <__sflush_r+0xf8>
 8010ac6:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8010aca:	b21b      	sxth	r3, r3
 8010acc:	e01b      	b.n	8010b06 <__sflush_r+0xf2>
 8010ace:	690f      	ldr	r7, [r1, #16]
 8010ad0:	2f00      	cmp	r7, #0
 8010ad2:	d0f6      	beq.n	8010ac2 <__sflush_r+0xae>
 8010ad4:	0793      	lsls	r3, r2, #30
 8010ad6:	680e      	ldr	r6, [r1, #0]
 8010ad8:	bf08      	it	eq
 8010ada:	694b      	ldreq	r3, [r1, #20]
 8010adc:	600f      	str	r7, [r1, #0]
 8010ade:	bf18      	it	ne
 8010ae0:	2300      	movne	r3, #0
 8010ae2:	eba6 0807 	sub.w	r8, r6, r7
 8010ae6:	608b      	str	r3, [r1, #8]
 8010ae8:	f1b8 0f00 	cmp.w	r8, #0
 8010aec:	dde9      	ble.n	8010ac2 <__sflush_r+0xae>
 8010aee:	6a21      	ldr	r1, [r4, #32]
 8010af0:	6aa6      	ldr	r6, [r4, #40]	@ 0x28
 8010af2:	4643      	mov	r3, r8
 8010af4:	463a      	mov	r2, r7
 8010af6:	4628      	mov	r0, r5
 8010af8:	47b0      	blx	r6
 8010afa:	2800      	cmp	r0, #0
 8010afc:	dc08      	bgt.n	8010b10 <__sflush_r+0xfc>
 8010afe:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8010b02:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8010b06:	81a3      	strh	r3, [r4, #12]
 8010b08:	f04f 30ff 	mov.w	r0, #4294967295
 8010b0c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8010b10:	4407      	add	r7, r0
 8010b12:	eba8 0800 	sub.w	r8, r8, r0
 8010b16:	e7e7      	b.n	8010ae8 <__sflush_r+0xd4>
 8010b18:	dfbffffe 	.word	0xdfbffffe

08010b1c <_fflush_r>:
 8010b1c:	b538      	push	{r3, r4, r5, lr}
 8010b1e:	690b      	ldr	r3, [r1, #16]
 8010b20:	4605      	mov	r5, r0
 8010b22:	460c      	mov	r4, r1
 8010b24:	b913      	cbnz	r3, 8010b2c <_fflush_r+0x10>
 8010b26:	2500      	movs	r5, #0
 8010b28:	4628      	mov	r0, r5
 8010b2a:	bd38      	pop	{r3, r4, r5, pc}
 8010b2c:	b118      	cbz	r0, 8010b36 <_fflush_r+0x1a>
 8010b2e:	6a03      	ldr	r3, [r0, #32]
 8010b30:	b90b      	cbnz	r3, 8010b36 <_fflush_r+0x1a>
 8010b32:	f7ff f991 	bl	800fe58 <__sinit>
 8010b36:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8010b3a:	2b00      	cmp	r3, #0
 8010b3c:	d0f3      	beq.n	8010b26 <_fflush_r+0xa>
 8010b3e:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 8010b40:	07d0      	lsls	r0, r2, #31
 8010b42:	d404      	bmi.n	8010b4e <_fflush_r+0x32>
 8010b44:	0599      	lsls	r1, r3, #22
 8010b46:	d402      	bmi.n	8010b4e <_fflush_r+0x32>
 8010b48:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8010b4a:	f7ff faba 	bl	80100c2 <__retarget_lock_acquire_recursive>
 8010b4e:	4628      	mov	r0, r5
 8010b50:	4621      	mov	r1, r4
 8010b52:	f7ff ff5f 	bl	8010a14 <__sflush_r>
 8010b56:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8010b58:	07da      	lsls	r2, r3, #31
 8010b5a:	4605      	mov	r5, r0
 8010b5c:	d4e4      	bmi.n	8010b28 <_fflush_r+0xc>
 8010b5e:	89a3      	ldrh	r3, [r4, #12]
 8010b60:	059b      	lsls	r3, r3, #22
 8010b62:	d4e1      	bmi.n	8010b28 <_fflush_r+0xc>
 8010b64:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8010b66:	f7ff faad 	bl	80100c4 <__retarget_lock_release_recursive>
 8010b6a:	e7dd      	b.n	8010b28 <_fflush_r+0xc>

08010b6c <fiprintf>:
 8010b6c:	b40e      	push	{r1, r2, r3}
 8010b6e:	b503      	push	{r0, r1, lr}
 8010b70:	4601      	mov	r1, r0
 8010b72:	ab03      	add	r3, sp, #12
 8010b74:	4805      	ldr	r0, [pc, #20]	@ (8010b8c <fiprintf+0x20>)
 8010b76:	f853 2b04 	ldr.w	r2, [r3], #4
 8010b7a:	6800      	ldr	r0, [r0, #0]
 8010b7c:	9301      	str	r3, [sp, #4]
 8010b7e:	f7ff fca3 	bl	80104c8 <_vfiprintf_r>
 8010b82:	b002      	add	sp, #8
 8010b84:	f85d eb04 	ldr.w	lr, [sp], #4
 8010b88:	b003      	add	sp, #12
 8010b8a:	4770      	bx	lr
 8010b8c:	2003c544 	.word	0x2003c544

08010b90 <__swbuf_r>:
 8010b90:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8010b92:	460e      	mov	r6, r1
 8010b94:	4614      	mov	r4, r2
 8010b96:	4605      	mov	r5, r0
 8010b98:	b118      	cbz	r0, 8010ba2 <__swbuf_r+0x12>
 8010b9a:	6a03      	ldr	r3, [r0, #32]
 8010b9c:	b90b      	cbnz	r3, 8010ba2 <__swbuf_r+0x12>
 8010b9e:	f7ff f95b 	bl	800fe58 <__sinit>
 8010ba2:	69a3      	ldr	r3, [r4, #24]
 8010ba4:	60a3      	str	r3, [r4, #8]
 8010ba6:	89a3      	ldrh	r3, [r4, #12]
 8010ba8:	071a      	lsls	r2, r3, #28
 8010baa:	d501      	bpl.n	8010bb0 <__swbuf_r+0x20>
 8010bac:	6923      	ldr	r3, [r4, #16]
 8010bae:	b943      	cbnz	r3, 8010bc2 <__swbuf_r+0x32>
 8010bb0:	4621      	mov	r1, r4
 8010bb2:	4628      	mov	r0, r5
 8010bb4:	f000 f82a 	bl	8010c0c <__swsetup_r>
 8010bb8:	b118      	cbz	r0, 8010bc2 <__swbuf_r+0x32>
 8010bba:	f04f 37ff 	mov.w	r7, #4294967295
 8010bbe:	4638      	mov	r0, r7
 8010bc0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8010bc2:	6823      	ldr	r3, [r4, #0]
 8010bc4:	6922      	ldr	r2, [r4, #16]
 8010bc6:	1a98      	subs	r0, r3, r2
 8010bc8:	6963      	ldr	r3, [r4, #20]
 8010bca:	b2f6      	uxtb	r6, r6
 8010bcc:	4283      	cmp	r3, r0
 8010bce:	4637      	mov	r7, r6
 8010bd0:	dc05      	bgt.n	8010bde <__swbuf_r+0x4e>
 8010bd2:	4621      	mov	r1, r4
 8010bd4:	4628      	mov	r0, r5
 8010bd6:	f7ff ffa1 	bl	8010b1c <_fflush_r>
 8010bda:	2800      	cmp	r0, #0
 8010bdc:	d1ed      	bne.n	8010bba <__swbuf_r+0x2a>
 8010bde:	68a3      	ldr	r3, [r4, #8]
 8010be0:	3b01      	subs	r3, #1
 8010be2:	60a3      	str	r3, [r4, #8]
 8010be4:	6823      	ldr	r3, [r4, #0]
 8010be6:	1c5a      	adds	r2, r3, #1
 8010be8:	6022      	str	r2, [r4, #0]
 8010bea:	701e      	strb	r6, [r3, #0]
 8010bec:	6962      	ldr	r2, [r4, #20]
 8010bee:	1c43      	adds	r3, r0, #1
 8010bf0:	429a      	cmp	r2, r3
 8010bf2:	d004      	beq.n	8010bfe <__swbuf_r+0x6e>
 8010bf4:	89a3      	ldrh	r3, [r4, #12]
 8010bf6:	07db      	lsls	r3, r3, #31
 8010bf8:	d5e1      	bpl.n	8010bbe <__swbuf_r+0x2e>
 8010bfa:	2e0a      	cmp	r6, #10
 8010bfc:	d1df      	bne.n	8010bbe <__swbuf_r+0x2e>
 8010bfe:	4621      	mov	r1, r4
 8010c00:	4628      	mov	r0, r5
 8010c02:	f7ff ff8b 	bl	8010b1c <_fflush_r>
 8010c06:	2800      	cmp	r0, #0
 8010c08:	d0d9      	beq.n	8010bbe <__swbuf_r+0x2e>
 8010c0a:	e7d6      	b.n	8010bba <__swbuf_r+0x2a>

08010c0c <__swsetup_r>:
 8010c0c:	b538      	push	{r3, r4, r5, lr}
 8010c0e:	4b29      	ldr	r3, [pc, #164]	@ (8010cb4 <__swsetup_r+0xa8>)
 8010c10:	4605      	mov	r5, r0
 8010c12:	6818      	ldr	r0, [r3, #0]
 8010c14:	460c      	mov	r4, r1
 8010c16:	b118      	cbz	r0, 8010c20 <__swsetup_r+0x14>
 8010c18:	6a03      	ldr	r3, [r0, #32]
 8010c1a:	b90b      	cbnz	r3, 8010c20 <__swsetup_r+0x14>
 8010c1c:	f7ff f91c 	bl	800fe58 <__sinit>
 8010c20:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8010c24:	0719      	lsls	r1, r3, #28
 8010c26:	d422      	bmi.n	8010c6e <__swsetup_r+0x62>
 8010c28:	06da      	lsls	r2, r3, #27
 8010c2a:	d407      	bmi.n	8010c3c <__swsetup_r+0x30>
 8010c2c:	2209      	movs	r2, #9
 8010c2e:	602a      	str	r2, [r5, #0]
 8010c30:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8010c34:	81a3      	strh	r3, [r4, #12]
 8010c36:	f04f 30ff 	mov.w	r0, #4294967295
 8010c3a:	e033      	b.n	8010ca4 <__swsetup_r+0x98>
 8010c3c:	0758      	lsls	r0, r3, #29
 8010c3e:	d512      	bpl.n	8010c66 <__swsetup_r+0x5a>
 8010c40:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8010c42:	b141      	cbz	r1, 8010c56 <__swsetup_r+0x4a>
 8010c44:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 8010c48:	4299      	cmp	r1, r3
 8010c4a:	d002      	beq.n	8010c52 <__swsetup_r+0x46>
 8010c4c:	4628      	mov	r0, r5
 8010c4e:	f7ff fa67 	bl	8010120 <_free_r>
 8010c52:	2300      	movs	r3, #0
 8010c54:	6363      	str	r3, [r4, #52]	@ 0x34
 8010c56:	89a3      	ldrh	r3, [r4, #12]
 8010c58:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 8010c5c:	81a3      	strh	r3, [r4, #12]
 8010c5e:	2300      	movs	r3, #0
 8010c60:	6063      	str	r3, [r4, #4]
 8010c62:	6923      	ldr	r3, [r4, #16]
 8010c64:	6023      	str	r3, [r4, #0]
 8010c66:	89a3      	ldrh	r3, [r4, #12]
 8010c68:	f043 0308 	orr.w	r3, r3, #8
 8010c6c:	81a3      	strh	r3, [r4, #12]
 8010c6e:	6923      	ldr	r3, [r4, #16]
 8010c70:	b94b      	cbnz	r3, 8010c86 <__swsetup_r+0x7a>
 8010c72:	89a3      	ldrh	r3, [r4, #12]
 8010c74:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 8010c78:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8010c7c:	d003      	beq.n	8010c86 <__swsetup_r+0x7a>
 8010c7e:	4621      	mov	r1, r4
 8010c80:	4628      	mov	r0, r5
 8010c82:	f000 f860 	bl	8010d46 <__smakebuf_r>
 8010c86:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8010c8a:	f013 0201 	ands.w	r2, r3, #1
 8010c8e:	d00a      	beq.n	8010ca6 <__swsetup_r+0x9a>
 8010c90:	2200      	movs	r2, #0
 8010c92:	60a2      	str	r2, [r4, #8]
 8010c94:	6962      	ldr	r2, [r4, #20]
 8010c96:	4252      	negs	r2, r2
 8010c98:	61a2      	str	r2, [r4, #24]
 8010c9a:	6922      	ldr	r2, [r4, #16]
 8010c9c:	b942      	cbnz	r2, 8010cb0 <__swsetup_r+0xa4>
 8010c9e:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 8010ca2:	d1c5      	bne.n	8010c30 <__swsetup_r+0x24>
 8010ca4:	bd38      	pop	{r3, r4, r5, pc}
 8010ca6:	0799      	lsls	r1, r3, #30
 8010ca8:	bf58      	it	pl
 8010caa:	6962      	ldrpl	r2, [r4, #20]
 8010cac:	60a2      	str	r2, [r4, #8]
 8010cae:	e7f4      	b.n	8010c9a <__swsetup_r+0x8e>
 8010cb0:	2000      	movs	r0, #0
 8010cb2:	e7f7      	b.n	8010ca4 <__swsetup_r+0x98>
 8010cb4:	2003c544 	.word	0x2003c544

08010cb8 <memmove>:
 8010cb8:	4288      	cmp	r0, r1
 8010cba:	b510      	push	{r4, lr}
 8010cbc:	eb01 0402 	add.w	r4, r1, r2
 8010cc0:	d902      	bls.n	8010cc8 <memmove+0x10>
 8010cc2:	4284      	cmp	r4, r0
 8010cc4:	4623      	mov	r3, r4
 8010cc6:	d807      	bhi.n	8010cd8 <memmove+0x20>
 8010cc8:	1e43      	subs	r3, r0, #1
 8010cca:	42a1      	cmp	r1, r4
 8010ccc:	d008      	beq.n	8010ce0 <memmove+0x28>
 8010cce:	f811 2b01 	ldrb.w	r2, [r1], #1
 8010cd2:	f803 2f01 	strb.w	r2, [r3, #1]!
 8010cd6:	e7f8      	b.n	8010cca <memmove+0x12>
 8010cd8:	4402      	add	r2, r0
 8010cda:	4601      	mov	r1, r0
 8010cdc:	428a      	cmp	r2, r1
 8010cde:	d100      	bne.n	8010ce2 <memmove+0x2a>
 8010ce0:	bd10      	pop	{r4, pc}
 8010ce2:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8010ce6:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8010cea:	e7f7      	b.n	8010cdc <memmove+0x24>

08010cec <abort>:
 8010cec:	b508      	push	{r3, lr}
 8010cee:	2006      	movs	r0, #6
 8010cf0:	f000 f88e 	bl	8010e10 <raise>
 8010cf4:	2001      	movs	r0, #1
 8010cf6:	f000 f909 	bl	8010f0c <_exit>

08010cfa <__swhatbuf_r>:
 8010cfa:	b570      	push	{r4, r5, r6, lr}
 8010cfc:	460c      	mov	r4, r1
 8010cfe:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8010d02:	2900      	cmp	r1, #0
 8010d04:	b096      	sub	sp, #88	@ 0x58
 8010d06:	4615      	mov	r5, r2
 8010d08:	461e      	mov	r6, r3
 8010d0a:	da0d      	bge.n	8010d28 <__swhatbuf_r+0x2e>
 8010d0c:	89a3      	ldrh	r3, [r4, #12]
 8010d0e:	f013 0f80 	tst.w	r3, #128	@ 0x80
 8010d12:	f04f 0100 	mov.w	r1, #0
 8010d16:	bf14      	ite	ne
 8010d18:	2340      	movne	r3, #64	@ 0x40
 8010d1a:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 8010d1e:	2000      	movs	r0, #0
 8010d20:	6031      	str	r1, [r6, #0]
 8010d22:	602b      	str	r3, [r5, #0]
 8010d24:	b016      	add	sp, #88	@ 0x58
 8010d26:	bd70      	pop	{r4, r5, r6, pc}
 8010d28:	466a      	mov	r2, sp
 8010d2a:	f000 f879 	bl	8010e20 <_fstat_r>
 8010d2e:	2800      	cmp	r0, #0
 8010d30:	dbec      	blt.n	8010d0c <__swhatbuf_r+0x12>
 8010d32:	9901      	ldr	r1, [sp, #4]
 8010d34:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 8010d38:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 8010d3c:	4259      	negs	r1, r3
 8010d3e:	4159      	adcs	r1, r3
 8010d40:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8010d44:	e7eb      	b.n	8010d1e <__swhatbuf_r+0x24>

08010d46 <__smakebuf_r>:
 8010d46:	898b      	ldrh	r3, [r1, #12]
 8010d48:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8010d4a:	079d      	lsls	r5, r3, #30
 8010d4c:	4606      	mov	r6, r0
 8010d4e:	460c      	mov	r4, r1
 8010d50:	d507      	bpl.n	8010d62 <__smakebuf_r+0x1c>
 8010d52:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 8010d56:	6023      	str	r3, [r4, #0]
 8010d58:	6123      	str	r3, [r4, #16]
 8010d5a:	2301      	movs	r3, #1
 8010d5c:	6163      	str	r3, [r4, #20]
 8010d5e:	b003      	add	sp, #12
 8010d60:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8010d62:	ab01      	add	r3, sp, #4
 8010d64:	466a      	mov	r2, sp
 8010d66:	f7ff ffc8 	bl	8010cfa <__swhatbuf_r>
 8010d6a:	9f00      	ldr	r7, [sp, #0]
 8010d6c:	4605      	mov	r5, r0
 8010d6e:	4639      	mov	r1, r7
 8010d70:	4630      	mov	r0, r6
 8010d72:	f7fe fe3b 	bl	800f9ec <_malloc_r>
 8010d76:	b948      	cbnz	r0, 8010d8c <__smakebuf_r+0x46>
 8010d78:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8010d7c:	059a      	lsls	r2, r3, #22
 8010d7e:	d4ee      	bmi.n	8010d5e <__smakebuf_r+0x18>
 8010d80:	f023 0303 	bic.w	r3, r3, #3
 8010d84:	f043 0302 	orr.w	r3, r3, #2
 8010d88:	81a3      	strh	r3, [r4, #12]
 8010d8a:	e7e2      	b.n	8010d52 <__smakebuf_r+0xc>
 8010d8c:	89a3      	ldrh	r3, [r4, #12]
 8010d8e:	6020      	str	r0, [r4, #0]
 8010d90:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8010d94:	81a3      	strh	r3, [r4, #12]
 8010d96:	9b01      	ldr	r3, [sp, #4]
 8010d98:	e9c4 0704 	strd	r0, r7, [r4, #16]
 8010d9c:	b15b      	cbz	r3, 8010db6 <__smakebuf_r+0x70>
 8010d9e:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8010da2:	4630      	mov	r0, r6
 8010da4:	f000 f84e 	bl	8010e44 <_isatty_r>
 8010da8:	b128      	cbz	r0, 8010db6 <__smakebuf_r+0x70>
 8010daa:	89a3      	ldrh	r3, [r4, #12]
 8010dac:	f023 0303 	bic.w	r3, r3, #3
 8010db0:	f043 0301 	orr.w	r3, r3, #1
 8010db4:	81a3      	strh	r3, [r4, #12]
 8010db6:	89a3      	ldrh	r3, [r4, #12]
 8010db8:	431d      	orrs	r5, r3
 8010dba:	81a5      	strh	r5, [r4, #12]
 8010dbc:	e7cf      	b.n	8010d5e <__smakebuf_r+0x18>

08010dbe <_raise_r>:
 8010dbe:	291f      	cmp	r1, #31
 8010dc0:	b538      	push	{r3, r4, r5, lr}
 8010dc2:	4605      	mov	r5, r0
 8010dc4:	460c      	mov	r4, r1
 8010dc6:	d904      	bls.n	8010dd2 <_raise_r+0x14>
 8010dc8:	2316      	movs	r3, #22
 8010dca:	6003      	str	r3, [r0, #0]
 8010dcc:	f04f 30ff 	mov.w	r0, #4294967295
 8010dd0:	bd38      	pop	{r3, r4, r5, pc}
 8010dd2:	6bc2      	ldr	r2, [r0, #60]	@ 0x3c
 8010dd4:	b112      	cbz	r2, 8010ddc <_raise_r+0x1e>
 8010dd6:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 8010dda:	b94b      	cbnz	r3, 8010df0 <_raise_r+0x32>
 8010ddc:	4628      	mov	r0, r5
 8010dde:	f000 f853 	bl	8010e88 <_getpid_r>
 8010de2:	4622      	mov	r2, r4
 8010de4:	4601      	mov	r1, r0
 8010de6:	4628      	mov	r0, r5
 8010de8:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8010dec:	f000 b83a 	b.w	8010e64 <_kill_r>
 8010df0:	2b01      	cmp	r3, #1
 8010df2:	d00a      	beq.n	8010e0a <_raise_r+0x4c>
 8010df4:	1c59      	adds	r1, r3, #1
 8010df6:	d103      	bne.n	8010e00 <_raise_r+0x42>
 8010df8:	2316      	movs	r3, #22
 8010dfa:	6003      	str	r3, [r0, #0]
 8010dfc:	2001      	movs	r0, #1
 8010dfe:	e7e7      	b.n	8010dd0 <_raise_r+0x12>
 8010e00:	2100      	movs	r1, #0
 8010e02:	f842 1024 	str.w	r1, [r2, r4, lsl #2]
 8010e06:	4620      	mov	r0, r4
 8010e08:	4798      	blx	r3
 8010e0a:	2000      	movs	r0, #0
 8010e0c:	e7e0      	b.n	8010dd0 <_raise_r+0x12>
	...

08010e10 <raise>:
 8010e10:	4b02      	ldr	r3, [pc, #8]	@ (8010e1c <raise+0xc>)
 8010e12:	4601      	mov	r1, r0
 8010e14:	6818      	ldr	r0, [r3, #0]
 8010e16:	f7ff bfd2 	b.w	8010dbe <_raise_r>
 8010e1a:	bf00      	nop
 8010e1c:	2003c544 	.word	0x2003c544

08010e20 <_fstat_r>:
 8010e20:	b538      	push	{r3, r4, r5, lr}
 8010e22:	4d07      	ldr	r5, [pc, #28]	@ (8010e40 <_fstat_r+0x20>)
 8010e24:	2300      	movs	r3, #0
 8010e26:	4604      	mov	r4, r0
 8010e28:	4608      	mov	r0, r1
 8010e2a:	4611      	mov	r1, r2
 8010e2c:	602b      	str	r3, [r5, #0]
 8010e2e:	f000 f835 	bl	8010e9c <_fstat>
 8010e32:	1c43      	adds	r3, r0, #1
 8010e34:	d102      	bne.n	8010e3c <_fstat_r+0x1c>
 8010e36:	682b      	ldr	r3, [r5, #0]
 8010e38:	b103      	cbz	r3, 8010e3c <_fstat_r+0x1c>
 8010e3a:	6023      	str	r3, [r4, #0]
 8010e3c:	bd38      	pop	{r3, r4, r5, pc}
 8010e3e:	bf00      	nop
 8010e40:	20043e84 	.word	0x20043e84

08010e44 <_isatty_r>:
 8010e44:	b538      	push	{r3, r4, r5, lr}
 8010e46:	4d06      	ldr	r5, [pc, #24]	@ (8010e60 <_isatty_r+0x1c>)
 8010e48:	2300      	movs	r3, #0
 8010e4a:	4604      	mov	r4, r0
 8010e4c:	4608      	mov	r0, r1
 8010e4e:	602b      	str	r3, [r5, #0]
 8010e50:	f000 f834 	bl	8010ebc <_isatty>
 8010e54:	1c43      	adds	r3, r0, #1
 8010e56:	d102      	bne.n	8010e5e <_isatty_r+0x1a>
 8010e58:	682b      	ldr	r3, [r5, #0]
 8010e5a:	b103      	cbz	r3, 8010e5e <_isatty_r+0x1a>
 8010e5c:	6023      	str	r3, [r4, #0]
 8010e5e:	bd38      	pop	{r3, r4, r5, pc}
 8010e60:	20043e84 	.word	0x20043e84

08010e64 <_kill_r>:
 8010e64:	b538      	push	{r3, r4, r5, lr}
 8010e66:	4d07      	ldr	r5, [pc, #28]	@ (8010e84 <_kill_r+0x20>)
 8010e68:	2300      	movs	r3, #0
 8010e6a:	4604      	mov	r4, r0
 8010e6c:	4608      	mov	r0, r1
 8010e6e:	4611      	mov	r1, r2
 8010e70:	602b      	str	r3, [r5, #0]
 8010e72:	f000 f82b 	bl	8010ecc <_kill>
 8010e76:	1c43      	adds	r3, r0, #1
 8010e78:	d102      	bne.n	8010e80 <_kill_r+0x1c>
 8010e7a:	682b      	ldr	r3, [r5, #0]
 8010e7c:	b103      	cbz	r3, 8010e80 <_kill_r+0x1c>
 8010e7e:	6023      	str	r3, [r4, #0]
 8010e80:	bd38      	pop	{r3, r4, r5, pc}
 8010e82:	bf00      	nop
 8010e84:	20043e84 	.word	0x20043e84

08010e88 <_getpid_r>:
 8010e88:	f000 b810 	b.w	8010eac <_getpid>

08010e8c <_close>:
 8010e8c:	4b02      	ldr	r3, [pc, #8]	@ (8010e98 <_close+0xc>)
 8010e8e:	2258      	movs	r2, #88	@ 0x58
 8010e90:	601a      	str	r2, [r3, #0]
 8010e92:	f04f 30ff 	mov.w	r0, #4294967295
 8010e96:	4770      	bx	lr
 8010e98:	20043e84 	.word	0x20043e84

08010e9c <_fstat>:
 8010e9c:	4b02      	ldr	r3, [pc, #8]	@ (8010ea8 <_fstat+0xc>)
 8010e9e:	2258      	movs	r2, #88	@ 0x58
 8010ea0:	601a      	str	r2, [r3, #0]
 8010ea2:	f04f 30ff 	mov.w	r0, #4294967295
 8010ea6:	4770      	bx	lr
 8010ea8:	20043e84 	.word	0x20043e84

08010eac <_getpid>:
 8010eac:	4b02      	ldr	r3, [pc, #8]	@ (8010eb8 <_getpid+0xc>)
 8010eae:	2258      	movs	r2, #88	@ 0x58
 8010eb0:	601a      	str	r2, [r3, #0]
 8010eb2:	f04f 30ff 	mov.w	r0, #4294967295
 8010eb6:	4770      	bx	lr
 8010eb8:	20043e84 	.word	0x20043e84

08010ebc <_isatty>:
 8010ebc:	4b02      	ldr	r3, [pc, #8]	@ (8010ec8 <_isatty+0xc>)
 8010ebe:	2258      	movs	r2, #88	@ 0x58
 8010ec0:	601a      	str	r2, [r3, #0]
 8010ec2:	2000      	movs	r0, #0
 8010ec4:	4770      	bx	lr
 8010ec6:	bf00      	nop
 8010ec8:	20043e84 	.word	0x20043e84

08010ecc <_kill>:
 8010ecc:	4b02      	ldr	r3, [pc, #8]	@ (8010ed8 <_kill+0xc>)
 8010ece:	2258      	movs	r2, #88	@ 0x58
 8010ed0:	601a      	str	r2, [r3, #0]
 8010ed2:	f04f 30ff 	mov.w	r0, #4294967295
 8010ed6:	4770      	bx	lr
 8010ed8:	20043e84 	.word	0x20043e84

08010edc <_lseek>:
 8010edc:	4b02      	ldr	r3, [pc, #8]	@ (8010ee8 <_lseek+0xc>)
 8010ede:	2258      	movs	r2, #88	@ 0x58
 8010ee0:	601a      	str	r2, [r3, #0]
 8010ee2:	f04f 30ff 	mov.w	r0, #4294967295
 8010ee6:	4770      	bx	lr
 8010ee8:	20043e84 	.word	0x20043e84

08010eec <_read>:
 8010eec:	4b02      	ldr	r3, [pc, #8]	@ (8010ef8 <_read+0xc>)
 8010eee:	2258      	movs	r2, #88	@ 0x58
 8010ef0:	601a      	str	r2, [r3, #0]
 8010ef2:	f04f 30ff 	mov.w	r0, #4294967295
 8010ef6:	4770      	bx	lr
 8010ef8:	20043e84 	.word	0x20043e84

08010efc <_write>:
 8010efc:	4b02      	ldr	r3, [pc, #8]	@ (8010f08 <_write+0xc>)
 8010efe:	2258      	movs	r2, #88	@ 0x58
 8010f00:	601a      	str	r2, [r3, #0]
 8010f02:	f04f 30ff 	mov.w	r0, #4294967295
 8010f06:	4770      	bx	lr
 8010f08:	20043e84 	.word	0x20043e84

08010f0c <_exit>:
 8010f0c:	e7fe      	b.n	8010f0c <_exit>
	...

08010f10 <_init>:
 8010f10:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8010f12:	bf00      	nop
 8010f14:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8010f16:	bc08      	pop	{r3}
 8010f18:	469e      	mov	lr, r3
 8010f1a:	4770      	bx	lr

08010f1c <_fini>:
 8010f1c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8010f1e:	bf00      	nop
 8010f20:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8010f22:	bc08      	pop	{r3}
 8010f24:	469e      	mov	lr, r3
 8010f26:	4770      	bx	lr
