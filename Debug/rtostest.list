
rtostest.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001f8  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00010c88  08000200  08000200  00001200  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000a4d0  08010ea0  08010ea0  00011ea0  2**5
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0801b370  0801b370  00045b80  2**0
                  CONTENTS
  4 .ARM          00000008  0801b370  0801b370  0001c370  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0801b378  0801b378  00045b80  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0801b378  0801b378  0001c378  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  0801b37c  0801b37c  0001c37c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         00028a40  20000000  0801b380  0001d000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .RxDecripSection 000000a0  20028a40  08043dc0  00045a40  2**2
                  CONTENTS, ALLOC, LOAD, DATA
 10 .TxDecripSection 000000a0  20028ae0  08043e60  00045ae0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
 11 .bss          000077ac  20028b80  08043f00  00045b80  2**5
                  ALLOC
 12 ._user_heap_stack 00001004  2003032c  08043f00  0004632c  2**0
                  ALLOC
 13 .ARM.attributes 0000002e  00000000  00000000  00045b80  2**0
                  CONTENTS, READONLY
 14 .debug_info   0002a307  00000000  00000000  00045bae  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_abbrev 00005645  00000000  00000000  0006feb5  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_aranges 00002110  00000000  00000000  00075500  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_rnglists 00001985  00000000  00000000  00077610  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_macro  000085f6  00000000  00000000  00078f95  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_line   000299c3  00000000  00000000  0008158b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_str    0011f2b1  00000000  00000000  000aaf4e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .comment      00000086  00000000  00000000  001ca1ff  2**0
                  CONTENTS, READONLY
 22 .debug_frame  0000985c  00000000  00000000  001ca288  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 23 .debug_line_str 00000063  00000000  00000000  001d3ae4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000200 <__do_global_dtors_aux>:
 8000200:	b510      	push	{r4, lr}
 8000202:	4c05      	ldr	r4, [pc, #20]	@ (8000218 <__do_global_dtors_aux+0x18>)
 8000204:	7823      	ldrb	r3, [r4, #0]
 8000206:	b933      	cbnz	r3, 8000216 <__do_global_dtors_aux+0x16>
 8000208:	4b04      	ldr	r3, [pc, #16]	@ (800021c <__do_global_dtors_aux+0x1c>)
 800020a:	b113      	cbz	r3, 8000212 <__do_global_dtors_aux+0x12>
 800020c:	4804      	ldr	r0, [pc, #16]	@ (8000220 <__do_global_dtors_aux+0x20>)
 800020e:	f3af 8000 	nop.w
 8000212:	2301      	movs	r3, #1
 8000214:	7023      	strb	r3, [r4, #0]
 8000216:	bd10      	pop	{r4, pc}
 8000218:	20028b80 	.word	0x20028b80
 800021c:	00000000 	.word	0x00000000
 8000220:	08010e70 	.word	0x08010e70

08000224 <frame_dummy>:
 8000224:	b508      	push	{r3, lr}
 8000226:	4b03      	ldr	r3, [pc, #12]	@ (8000234 <frame_dummy+0x10>)
 8000228:	b11b      	cbz	r3, 8000232 <frame_dummy+0xe>
 800022a:	4903      	ldr	r1, [pc, #12]	@ (8000238 <frame_dummy+0x14>)
 800022c:	4803      	ldr	r0, [pc, #12]	@ (800023c <frame_dummy+0x18>)
 800022e:	f3af 8000 	nop.w
 8000232:	bd08      	pop	{r3, pc}
 8000234:	00000000 	.word	0x00000000
 8000238:	20028b84 	.word	0x20028b84
 800023c:	08010e70 	.word	0x08010e70

08000240 <strlen>:
 8000240:	4603      	mov	r3, r0
 8000242:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000246:	2a00      	cmp	r2, #0
 8000248:	d1fb      	bne.n	8000242 <strlen+0x2>
 800024a:	1a18      	subs	r0, r3, r0
 800024c:	3801      	subs	r0, #1
 800024e:	4770      	bx	lr

08000250 <memchr>:
 8000250:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 8000254:	2a10      	cmp	r2, #16
 8000256:	db2b      	blt.n	80002b0 <memchr+0x60>
 8000258:	f010 0f07 	tst.w	r0, #7
 800025c:	d008      	beq.n	8000270 <memchr+0x20>
 800025e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000262:	3a01      	subs	r2, #1
 8000264:	428b      	cmp	r3, r1
 8000266:	d02d      	beq.n	80002c4 <memchr+0x74>
 8000268:	f010 0f07 	tst.w	r0, #7
 800026c:	b342      	cbz	r2, 80002c0 <memchr+0x70>
 800026e:	d1f6      	bne.n	800025e <memchr+0xe>
 8000270:	b4f0      	push	{r4, r5, r6, r7}
 8000272:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000276:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800027a:	f022 0407 	bic.w	r4, r2, #7
 800027e:	f07f 0700 	mvns.w	r7, #0
 8000282:	2300      	movs	r3, #0
 8000284:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000288:	3c08      	subs	r4, #8
 800028a:	ea85 0501 	eor.w	r5, r5, r1
 800028e:	ea86 0601 	eor.w	r6, r6, r1
 8000292:	fa85 f547 	uadd8	r5, r5, r7
 8000296:	faa3 f587 	sel	r5, r3, r7
 800029a:	fa86 f647 	uadd8	r6, r6, r7
 800029e:	faa5 f687 	sel	r6, r5, r7
 80002a2:	b98e      	cbnz	r6, 80002c8 <memchr+0x78>
 80002a4:	d1ee      	bne.n	8000284 <memchr+0x34>
 80002a6:	bcf0      	pop	{r4, r5, r6, r7}
 80002a8:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 80002ac:	f002 0207 	and.w	r2, r2, #7
 80002b0:	b132      	cbz	r2, 80002c0 <memchr+0x70>
 80002b2:	f810 3b01 	ldrb.w	r3, [r0], #1
 80002b6:	3a01      	subs	r2, #1
 80002b8:	ea83 0301 	eor.w	r3, r3, r1
 80002bc:	b113      	cbz	r3, 80002c4 <memchr+0x74>
 80002be:	d1f8      	bne.n	80002b2 <memchr+0x62>
 80002c0:	2000      	movs	r0, #0
 80002c2:	4770      	bx	lr
 80002c4:	3801      	subs	r0, #1
 80002c6:	4770      	bx	lr
 80002c8:	2d00      	cmp	r5, #0
 80002ca:	bf06      	itte	eq
 80002cc:	4635      	moveq	r5, r6
 80002ce:	3803      	subeq	r0, #3
 80002d0:	3807      	subne	r0, #7
 80002d2:	f015 0f01 	tst.w	r5, #1
 80002d6:	d107      	bne.n	80002e8 <memchr+0x98>
 80002d8:	3001      	adds	r0, #1
 80002da:	f415 7f80 	tst.w	r5, #256	@ 0x100
 80002de:	bf02      	ittt	eq
 80002e0:	3001      	addeq	r0, #1
 80002e2:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 80002e6:	3001      	addeq	r0, #1
 80002e8:	bcf0      	pop	{r4, r5, r6, r7}
 80002ea:	3801      	subs	r0, #1
 80002ec:	4770      	bx	lr
 80002ee:	bf00      	nop

080002f0 <__aeabi_uldivmod>:
 80002f0:	b953      	cbnz	r3, 8000308 <__aeabi_uldivmod+0x18>
 80002f2:	b94a      	cbnz	r2, 8000308 <__aeabi_uldivmod+0x18>
 80002f4:	2900      	cmp	r1, #0
 80002f6:	bf08      	it	eq
 80002f8:	2800      	cmpeq	r0, #0
 80002fa:	bf1c      	itt	ne
 80002fc:	f04f 31ff 	movne.w	r1, #4294967295
 8000300:	f04f 30ff 	movne.w	r0, #4294967295
 8000304:	f000 b96a 	b.w	80005dc <__aeabi_idiv0>
 8000308:	f1ad 0c08 	sub.w	ip, sp, #8
 800030c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000310:	f000 f806 	bl	8000320 <__udivmoddi4>
 8000314:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000318:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800031c:	b004      	add	sp, #16
 800031e:	4770      	bx	lr

08000320 <__udivmoddi4>:
 8000320:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000324:	9d08      	ldr	r5, [sp, #32]
 8000326:	460c      	mov	r4, r1
 8000328:	2b00      	cmp	r3, #0
 800032a:	d14e      	bne.n	80003ca <__udivmoddi4+0xaa>
 800032c:	4694      	mov	ip, r2
 800032e:	458c      	cmp	ip, r1
 8000330:	4686      	mov	lr, r0
 8000332:	fab2 f282 	clz	r2, r2
 8000336:	d962      	bls.n	80003fe <__udivmoddi4+0xde>
 8000338:	b14a      	cbz	r2, 800034e <__udivmoddi4+0x2e>
 800033a:	f1c2 0320 	rsb	r3, r2, #32
 800033e:	4091      	lsls	r1, r2
 8000340:	fa20 f303 	lsr.w	r3, r0, r3
 8000344:	fa0c fc02 	lsl.w	ip, ip, r2
 8000348:	4319      	orrs	r1, r3
 800034a:	fa00 fe02 	lsl.w	lr, r0, r2
 800034e:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000352:	fa1f f68c 	uxth.w	r6, ip
 8000356:	fbb1 f4f7 	udiv	r4, r1, r7
 800035a:	ea4f 431e 	mov.w	r3, lr, lsr #16
 800035e:	fb07 1114 	mls	r1, r7, r4, r1
 8000362:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000366:	fb04 f106 	mul.w	r1, r4, r6
 800036a:	4299      	cmp	r1, r3
 800036c:	d90a      	bls.n	8000384 <__udivmoddi4+0x64>
 800036e:	eb1c 0303 	adds.w	r3, ip, r3
 8000372:	f104 30ff 	add.w	r0, r4, #4294967295
 8000376:	f080 8112 	bcs.w	800059e <__udivmoddi4+0x27e>
 800037a:	4299      	cmp	r1, r3
 800037c:	f240 810f 	bls.w	800059e <__udivmoddi4+0x27e>
 8000380:	3c02      	subs	r4, #2
 8000382:	4463      	add	r3, ip
 8000384:	1a59      	subs	r1, r3, r1
 8000386:	fa1f f38e 	uxth.w	r3, lr
 800038a:	fbb1 f0f7 	udiv	r0, r1, r7
 800038e:	fb07 1110 	mls	r1, r7, r0, r1
 8000392:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000396:	fb00 f606 	mul.w	r6, r0, r6
 800039a:	429e      	cmp	r6, r3
 800039c:	d90a      	bls.n	80003b4 <__udivmoddi4+0x94>
 800039e:	eb1c 0303 	adds.w	r3, ip, r3
 80003a2:	f100 31ff 	add.w	r1, r0, #4294967295
 80003a6:	f080 80fc 	bcs.w	80005a2 <__udivmoddi4+0x282>
 80003aa:	429e      	cmp	r6, r3
 80003ac:	f240 80f9 	bls.w	80005a2 <__udivmoddi4+0x282>
 80003b0:	4463      	add	r3, ip
 80003b2:	3802      	subs	r0, #2
 80003b4:	1b9b      	subs	r3, r3, r6
 80003b6:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 80003ba:	2100      	movs	r1, #0
 80003bc:	b11d      	cbz	r5, 80003c6 <__udivmoddi4+0xa6>
 80003be:	40d3      	lsrs	r3, r2
 80003c0:	2200      	movs	r2, #0
 80003c2:	e9c5 3200 	strd	r3, r2, [r5]
 80003c6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80003ca:	428b      	cmp	r3, r1
 80003cc:	d905      	bls.n	80003da <__udivmoddi4+0xba>
 80003ce:	b10d      	cbz	r5, 80003d4 <__udivmoddi4+0xb4>
 80003d0:	e9c5 0100 	strd	r0, r1, [r5]
 80003d4:	2100      	movs	r1, #0
 80003d6:	4608      	mov	r0, r1
 80003d8:	e7f5      	b.n	80003c6 <__udivmoddi4+0xa6>
 80003da:	fab3 f183 	clz	r1, r3
 80003de:	2900      	cmp	r1, #0
 80003e0:	d146      	bne.n	8000470 <__udivmoddi4+0x150>
 80003e2:	42a3      	cmp	r3, r4
 80003e4:	d302      	bcc.n	80003ec <__udivmoddi4+0xcc>
 80003e6:	4290      	cmp	r0, r2
 80003e8:	f0c0 80f0 	bcc.w	80005cc <__udivmoddi4+0x2ac>
 80003ec:	1a86      	subs	r6, r0, r2
 80003ee:	eb64 0303 	sbc.w	r3, r4, r3
 80003f2:	2001      	movs	r0, #1
 80003f4:	2d00      	cmp	r5, #0
 80003f6:	d0e6      	beq.n	80003c6 <__udivmoddi4+0xa6>
 80003f8:	e9c5 6300 	strd	r6, r3, [r5]
 80003fc:	e7e3      	b.n	80003c6 <__udivmoddi4+0xa6>
 80003fe:	2a00      	cmp	r2, #0
 8000400:	f040 8090 	bne.w	8000524 <__udivmoddi4+0x204>
 8000404:	eba1 040c 	sub.w	r4, r1, ip
 8000408:	ea4f 481c 	mov.w	r8, ip, lsr #16
 800040c:	fa1f f78c 	uxth.w	r7, ip
 8000410:	2101      	movs	r1, #1
 8000412:	fbb4 f6f8 	udiv	r6, r4, r8
 8000416:	ea4f 431e 	mov.w	r3, lr, lsr #16
 800041a:	fb08 4416 	mls	r4, r8, r6, r4
 800041e:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000422:	fb07 f006 	mul.w	r0, r7, r6
 8000426:	4298      	cmp	r0, r3
 8000428:	d908      	bls.n	800043c <__udivmoddi4+0x11c>
 800042a:	eb1c 0303 	adds.w	r3, ip, r3
 800042e:	f106 34ff 	add.w	r4, r6, #4294967295
 8000432:	d202      	bcs.n	800043a <__udivmoddi4+0x11a>
 8000434:	4298      	cmp	r0, r3
 8000436:	f200 80cd 	bhi.w	80005d4 <__udivmoddi4+0x2b4>
 800043a:	4626      	mov	r6, r4
 800043c:	1a1c      	subs	r4, r3, r0
 800043e:	fa1f f38e 	uxth.w	r3, lr
 8000442:	fbb4 f0f8 	udiv	r0, r4, r8
 8000446:	fb08 4410 	mls	r4, r8, r0, r4
 800044a:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 800044e:	fb00 f707 	mul.w	r7, r0, r7
 8000452:	429f      	cmp	r7, r3
 8000454:	d908      	bls.n	8000468 <__udivmoddi4+0x148>
 8000456:	eb1c 0303 	adds.w	r3, ip, r3
 800045a:	f100 34ff 	add.w	r4, r0, #4294967295
 800045e:	d202      	bcs.n	8000466 <__udivmoddi4+0x146>
 8000460:	429f      	cmp	r7, r3
 8000462:	f200 80b0 	bhi.w	80005c6 <__udivmoddi4+0x2a6>
 8000466:	4620      	mov	r0, r4
 8000468:	1bdb      	subs	r3, r3, r7
 800046a:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 800046e:	e7a5      	b.n	80003bc <__udivmoddi4+0x9c>
 8000470:	f1c1 0620 	rsb	r6, r1, #32
 8000474:	408b      	lsls	r3, r1
 8000476:	fa22 f706 	lsr.w	r7, r2, r6
 800047a:	431f      	orrs	r7, r3
 800047c:	fa20 fc06 	lsr.w	ip, r0, r6
 8000480:	fa04 f301 	lsl.w	r3, r4, r1
 8000484:	ea43 030c 	orr.w	r3, r3, ip
 8000488:	40f4      	lsrs	r4, r6
 800048a:	fa00 f801 	lsl.w	r8, r0, r1
 800048e:	0c38      	lsrs	r0, r7, #16
 8000490:	ea4f 4913 	mov.w	r9, r3, lsr #16
 8000494:	fbb4 fef0 	udiv	lr, r4, r0
 8000498:	fa1f fc87 	uxth.w	ip, r7
 800049c:	fb00 441e 	mls	r4, r0, lr, r4
 80004a0:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 80004a4:	fb0e f90c 	mul.w	r9, lr, ip
 80004a8:	45a1      	cmp	r9, r4
 80004aa:	fa02 f201 	lsl.w	r2, r2, r1
 80004ae:	d90a      	bls.n	80004c6 <__udivmoddi4+0x1a6>
 80004b0:	193c      	adds	r4, r7, r4
 80004b2:	f10e 3aff 	add.w	sl, lr, #4294967295
 80004b6:	f080 8084 	bcs.w	80005c2 <__udivmoddi4+0x2a2>
 80004ba:	45a1      	cmp	r9, r4
 80004bc:	f240 8081 	bls.w	80005c2 <__udivmoddi4+0x2a2>
 80004c0:	f1ae 0e02 	sub.w	lr, lr, #2
 80004c4:	443c      	add	r4, r7
 80004c6:	eba4 0409 	sub.w	r4, r4, r9
 80004ca:	fa1f f983 	uxth.w	r9, r3
 80004ce:	fbb4 f3f0 	udiv	r3, r4, r0
 80004d2:	fb00 4413 	mls	r4, r0, r3, r4
 80004d6:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 80004da:	fb03 fc0c 	mul.w	ip, r3, ip
 80004de:	45a4      	cmp	ip, r4
 80004e0:	d907      	bls.n	80004f2 <__udivmoddi4+0x1d2>
 80004e2:	193c      	adds	r4, r7, r4
 80004e4:	f103 30ff 	add.w	r0, r3, #4294967295
 80004e8:	d267      	bcs.n	80005ba <__udivmoddi4+0x29a>
 80004ea:	45a4      	cmp	ip, r4
 80004ec:	d965      	bls.n	80005ba <__udivmoddi4+0x29a>
 80004ee:	3b02      	subs	r3, #2
 80004f0:	443c      	add	r4, r7
 80004f2:	ea43 400e 	orr.w	r0, r3, lr, lsl #16
 80004f6:	fba0 9302 	umull	r9, r3, r0, r2
 80004fa:	eba4 040c 	sub.w	r4, r4, ip
 80004fe:	429c      	cmp	r4, r3
 8000500:	46ce      	mov	lr, r9
 8000502:	469c      	mov	ip, r3
 8000504:	d351      	bcc.n	80005aa <__udivmoddi4+0x28a>
 8000506:	d04e      	beq.n	80005a6 <__udivmoddi4+0x286>
 8000508:	b155      	cbz	r5, 8000520 <__udivmoddi4+0x200>
 800050a:	ebb8 030e 	subs.w	r3, r8, lr
 800050e:	eb64 040c 	sbc.w	r4, r4, ip
 8000512:	fa04 f606 	lsl.w	r6, r4, r6
 8000516:	40cb      	lsrs	r3, r1
 8000518:	431e      	orrs	r6, r3
 800051a:	40cc      	lsrs	r4, r1
 800051c:	e9c5 6400 	strd	r6, r4, [r5]
 8000520:	2100      	movs	r1, #0
 8000522:	e750      	b.n	80003c6 <__udivmoddi4+0xa6>
 8000524:	f1c2 0320 	rsb	r3, r2, #32
 8000528:	fa20 f103 	lsr.w	r1, r0, r3
 800052c:	fa0c fc02 	lsl.w	ip, ip, r2
 8000530:	fa24 f303 	lsr.w	r3, r4, r3
 8000534:	4094      	lsls	r4, r2
 8000536:	430c      	orrs	r4, r1
 8000538:	ea4f 481c 	mov.w	r8, ip, lsr #16
 800053c:	fa00 fe02 	lsl.w	lr, r0, r2
 8000540:	fa1f f78c 	uxth.w	r7, ip
 8000544:	fbb3 f0f8 	udiv	r0, r3, r8
 8000548:	fb08 3110 	mls	r1, r8, r0, r3
 800054c:	0c23      	lsrs	r3, r4, #16
 800054e:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000552:	fb00 f107 	mul.w	r1, r0, r7
 8000556:	4299      	cmp	r1, r3
 8000558:	d908      	bls.n	800056c <__udivmoddi4+0x24c>
 800055a:	eb1c 0303 	adds.w	r3, ip, r3
 800055e:	f100 36ff 	add.w	r6, r0, #4294967295
 8000562:	d22c      	bcs.n	80005be <__udivmoddi4+0x29e>
 8000564:	4299      	cmp	r1, r3
 8000566:	d92a      	bls.n	80005be <__udivmoddi4+0x29e>
 8000568:	3802      	subs	r0, #2
 800056a:	4463      	add	r3, ip
 800056c:	1a5b      	subs	r3, r3, r1
 800056e:	b2a4      	uxth	r4, r4
 8000570:	fbb3 f1f8 	udiv	r1, r3, r8
 8000574:	fb08 3311 	mls	r3, r8, r1, r3
 8000578:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 800057c:	fb01 f307 	mul.w	r3, r1, r7
 8000580:	42a3      	cmp	r3, r4
 8000582:	d908      	bls.n	8000596 <__udivmoddi4+0x276>
 8000584:	eb1c 0404 	adds.w	r4, ip, r4
 8000588:	f101 36ff 	add.w	r6, r1, #4294967295
 800058c:	d213      	bcs.n	80005b6 <__udivmoddi4+0x296>
 800058e:	42a3      	cmp	r3, r4
 8000590:	d911      	bls.n	80005b6 <__udivmoddi4+0x296>
 8000592:	3902      	subs	r1, #2
 8000594:	4464      	add	r4, ip
 8000596:	1ae4      	subs	r4, r4, r3
 8000598:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 800059c:	e739      	b.n	8000412 <__udivmoddi4+0xf2>
 800059e:	4604      	mov	r4, r0
 80005a0:	e6f0      	b.n	8000384 <__udivmoddi4+0x64>
 80005a2:	4608      	mov	r0, r1
 80005a4:	e706      	b.n	80003b4 <__udivmoddi4+0x94>
 80005a6:	45c8      	cmp	r8, r9
 80005a8:	d2ae      	bcs.n	8000508 <__udivmoddi4+0x1e8>
 80005aa:	ebb9 0e02 	subs.w	lr, r9, r2
 80005ae:	eb63 0c07 	sbc.w	ip, r3, r7
 80005b2:	3801      	subs	r0, #1
 80005b4:	e7a8      	b.n	8000508 <__udivmoddi4+0x1e8>
 80005b6:	4631      	mov	r1, r6
 80005b8:	e7ed      	b.n	8000596 <__udivmoddi4+0x276>
 80005ba:	4603      	mov	r3, r0
 80005bc:	e799      	b.n	80004f2 <__udivmoddi4+0x1d2>
 80005be:	4630      	mov	r0, r6
 80005c0:	e7d4      	b.n	800056c <__udivmoddi4+0x24c>
 80005c2:	46d6      	mov	lr, sl
 80005c4:	e77f      	b.n	80004c6 <__udivmoddi4+0x1a6>
 80005c6:	4463      	add	r3, ip
 80005c8:	3802      	subs	r0, #2
 80005ca:	e74d      	b.n	8000468 <__udivmoddi4+0x148>
 80005cc:	4606      	mov	r6, r0
 80005ce:	4623      	mov	r3, r4
 80005d0:	4608      	mov	r0, r1
 80005d2:	e70f      	b.n	80003f4 <__udivmoddi4+0xd4>
 80005d4:	3e02      	subs	r6, #2
 80005d6:	4463      	add	r3, ip
 80005d8:	e730      	b.n	800043c <__udivmoddi4+0x11c>
 80005da:	bf00      	nop

080005dc <__aeabi_idiv0>:
 80005dc:	4770      	bx	lr
 80005de:	bf00      	nop

080005e0 <SCB_EnableICache>:
/**
  \brief   Enable I-Cache
  \details Turns on I-Cache
  */
__STATIC_INLINE void SCB_EnableICache (void)
{
 80005e0:	b480      	push	{r7}
 80005e2:	af00      	add	r7, sp, #0
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__STATIC_FORCEINLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
 80005e4:	f3bf 8f4f 	dsb	sy
}
 80005e8:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 80005ea:	f3bf 8f6f 	isb	sy
}
 80005ee:	bf00      	nop
  #if defined (__ICACHE_PRESENT) && (__ICACHE_PRESENT == 1U)
    __DSB();
    __ISB();
    SCB->ICIALLU = 0UL;                     /* invalidate I-Cache */
 80005f0:	4b0d      	ldr	r3, [pc, #52]	@ (8000628 <SCB_EnableICache+0x48>)
 80005f2:	2200      	movs	r2, #0
 80005f4:	f8c3 2250 	str.w	r2, [r3, #592]	@ 0x250
  __ASM volatile ("dsb 0xF":::"memory");
 80005f8:	f3bf 8f4f 	dsb	sy
}
 80005fc:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 80005fe:	f3bf 8f6f 	isb	sy
}
 8000602:	bf00      	nop
    __DSB();
    __ISB();
    SCB->CCR |=  (uint32_t)SCB_CCR_IC_Msk;  /* enable I-Cache */
 8000604:	4b08      	ldr	r3, [pc, #32]	@ (8000628 <SCB_EnableICache+0x48>)
 8000606:	695b      	ldr	r3, [r3, #20]
 8000608:	4a07      	ldr	r2, [pc, #28]	@ (8000628 <SCB_EnableICache+0x48>)
 800060a:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800060e:	6153      	str	r3, [r2, #20]
  __ASM volatile ("dsb 0xF":::"memory");
 8000610:	f3bf 8f4f 	dsb	sy
}
 8000614:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 8000616:	f3bf 8f6f 	isb	sy
}
 800061a:	bf00      	nop
    __DSB();
    __ISB();
  #endif
}
 800061c:	bf00      	nop
 800061e:	46bd      	mov	sp, r7
 8000620:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000624:	4770      	bx	lr
 8000626:	bf00      	nop
 8000628:	e000ed00 	.word	0xe000ed00

0800062c <SCB_EnableDCache>:
/**
  \brief   Enable D-Cache
  \details Turns on D-Cache
  */
__STATIC_INLINE void SCB_EnableDCache (void)
{
 800062c:	b480      	push	{r7}
 800062e:	b085      	sub	sp, #20
 8000630:	af00      	add	r7, sp, #0
  #if defined (__DCACHE_PRESENT) && (__DCACHE_PRESENT == 1U)
    uint32_t ccsidr;
    uint32_t sets;
    uint32_t ways;

    SCB->CSSELR = 0U; /*(0U << 1U) | 0U;*/  /* Level 1 data cache */
 8000632:	4b1f      	ldr	r3, [pc, #124]	@ (80006b0 <SCB_EnableDCache+0x84>)
 8000634:	2200      	movs	r2, #0
 8000636:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
  __ASM volatile ("dsb 0xF":::"memory");
 800063a:	f3bf 8f4f 	dsb	sy
}
 800063e:	bf00      	nop
    __DSB();

    ccsidr = SCB->CCSIDR;
 8000640:	4b1b      	ldr	r3, [pc, #108]	@ (80006b0 <SCB_EnableDCache+0x84>)
 8000642:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8000646:	607b      	str	r3, [r7, #4]

                                            /* invalidate D-Cache */
    sets = (uint32_t)(CCSIDR_SETS(ccsidr));
 8000648:	687b      	ldr	r3, [r7, #4]
 800064a:	0b5b      	lsrs	r3, r3, #13
 800064c:	f3c3 030e 	ubfx	r3, r3, #0, #15
 8000650:	60fb      	str	r3, [r7, #12]
    do {
      ways = (uint32_t)(CCSIDR_WAYS(ccsidr));
 8000652:	687b      	ldr	r3, [r7, #4]
 8000654:	08db      	lsrs	r3, r3, #3
 8000656:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800065a:	60bb      	str	r3, [r7, #8]
      do {
        SCB->DCISW = (((sets << SCB_DCISW_SET_Pos) & SCB_DCISW_SET_Msk) |
 800065c:	68fb      	ldr	r3, [r7, #12]
 800065e:	015a      	lsls	r2, r3, #5
 8000660:	f643 73e0 	movw	r3, #16352	@ 0x3fe0
 8000664:	4013      	ands	r3, r2
                      ((ways << SCB_DCISW_WAY_Pos) & SCB_DCISW_WAY_Msk)  );
 8000666:	68ba      	ldr	r2, [r7, #8]
 8000668:	0792      	lsls	r2, r2, #30
        SCB->DCISW = (((sets << SCB_DCISW_SET_Pos) & SCB_DCISW_SET_Msk) |
 800066a:	4911      	ldr	r1, [pc, #68]	@ (80006b0 <SCB_EnableDCache+0x84>)
 800066c:	4313      	orrs	r3, r2
 800066e:	f8c1 3260 	str.w	r3, [r1, #608]	@ 0x260
        #if defined ( __CC_ARM )
          __schedule_barrier();
        #endif
      } while (ways-- != 0U);
 8000672:	68bb      	ldr	r3, [r7, #8]
 8000674:	1e5a      	subs	r2, r3, #1
 8000676:	60ba      	str	r2, [r7, #8]
 8000678:	2b00      	cmp	r3, #0
 800067a:	d1ef      	bne.n	800065c <SCB_EnableDCache+0x30>
    } while(sets-- != 0U);
 800067c:	68fb      	ldr	r3, [r7, #12]
 800067e:	1e5a      	subs	r2, r3, #1
 8000680:	60fa      	str	r2, [r7, #12]
 8000682:	2b00      	cmp	r3, #0
 8000684:	d1e5      	bne.n	8000652 <SCB_EnableDCache+0x26>
  __ASM volatile ("dsb 0xF":::"memory");
 8000686:	f3bf 8f4f 	dsb	sy
}
 800068a:	bf00      	nop
    __DSB();

    SCB->CCR |=  (uint32_t)SCB_CCR_DC_Msk;  /* enable D-Cache */
 800068c:	4b08      	ldr	r3, [pc, #32]	@ (80006b0 <SCB_EnableDCache+0x84>)
 800068e:	695b      	ldr	r3, [r3, #20]
 8000690:	4a07      	ldr	r2, [pc, #28]	@ (80006b0 <SCB_EnableDCache+0x84>)
 8000692:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8000696:	6153      	str	r3, [r2, #20]
  __ASM volatile ("dsb 0xF":::"memory");
 8000698:	f3bf 8f4f 	dsb	sy
}
 800069c:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 800069e:	f3bf 8f6f 	isb	sy
}
 80006a2:	bf00      	nop

    __DSB();
    __ISB();
  #endif
}
 80006a4:	bf00      	nop
 80006a6:	3714      	adds	r7, #20
 80006a8:	46bd      	mov	sp, r7
 80006aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80006ae:	4770      	bx	lr
 80006b0:	e000ed00 	.word	0xe000ed00

080006b4 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80006b4:	b580      	push	{r7, lr}
 80006b6:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* Enable the CPU Cache */

  /* Enable I-Cache---------------------------------------------------------*/
  SCB_EnableICache();
 80006b8:	f7ff ff92 	bl	80005e0 <SCB_EnableICache>

  /* Enable D-Cache---------------------------------------------------------*/
  SCB_EnableDCache();
 80006bc:	f7ff ffb6 	bl	800062c <SCB_EnableDCache>

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80006c0:	f001 fb97 	bl	8001df2 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80006c4:	f000 f886 	bl	80007d4 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80006c8:	f000 fa58 	bl	8000b7c <MX_GPIO_Init>
  MX_ETH_Init();
 80006cc:	f000 f91c 	bl	8000908 <MX_ETH_Init>
  MX_USART3_UART_Init();
 80006d0:	f000 f9f6 	bl	8000ac0 <MX_USART3_UART_Init>
  MX_USB_OTG_FS_PCD_Init();
 80006d4:	f000 fa24 	bl	8000b20 <MX_USB_OTG_FS_PCD_Init>
  MX_I2C2_Init();
 80006d8:	f000 f964 	bl	80009a4 <MX_I2C2_Init>
  MX_DAC_Init();
 80006dc:	f000 f8ea 	bl	80008b4 <MX_DAC_Init>
  MX_TIM4_Init();
 80006e0:	f000 f9a0 	bl	8000a24 <MX_TIM4_Init>
  MX_X_CUBE_AI_Init();
 80006e4:	f009 fdfc 	bl	800a2e0 <MX_X_CUBE_AI_Init>
  /* USER CODE BEGIN 2 */
//  MX_USART3_UART_Init();
  ssd1306_Init();
 80006e8:	f000 fdf2 	bl	80012d0 <ssd1306_Init>
  HAL_UART_Receive_IT(&huart3, (uint8_t*)image_buffer, 28 * 28);
 80006ec:	f44f 7244 	mov.w	r2, #784	@ 0x310
 80006f0:	4924      	ldr	r1, [pc, #144]	@ (8000784 <main+0xd0>)
 80006f2:	4825      	ldr	r0, [pc, #148]	@ (8000788 <main+0xd4>)
 80006f4:	f005 f903 	bl	80058fe <HAL_UART_Receive_IT>
  /* USER CODE END 2 */

  /* Init scheduler */
  osKernelInitialize();
 80006f8:	f006 fe7c 	bl	80073f4 <osKernelInitialize>
  /* start timers, add new ones, ... */
  /* USER CODE END RTOS_TIMERS */

  /* USER CODE BEGIN RTOS_QUEUES */
//  xQueue_Image = xQueueCreate(1, IMAGE_SIZE);
  xQueue_DigitResult = xQueueCreate(1, 10);
 80006fc:	2200      	movs	r2, #0
 80006fe:	210a      	movs	r1, #10
 8000700:	2001      	movs	r0, #1
 8000702:	f007 f990 	bl	8007a26 <xQueueGenericCreate>
 8000706:	4603      	mov	r3, r0
 8000708:	4a20      	ldr	r2, [pc, #128]	@ (800078c <main+0xd8>)
 800070a:	6013      	str	r3, [r2, #0]
  xQueue_Display = xQueueCreate(1, 20);
 800070c:	2200      	movs	r2, #0
 800070e:	2114      	movs	r1, #20
 8000710:	2001      	movs	r0, #1
 8000712:	f007 f988 	bl	8007a26 <xQueueGenericCreate>
 8000716:	4603      	mov	r3, r0
 8000718:	4a1d      	ldr	r2, [pc, #116]	@ (8000790 <main+0xdc>)
 800071a:	6013      	str	r3, [r2, #0]
  xQueue_SoundCommand = xQueueCreate(1, 10);
 800071c:	2200      	movs	r2, #0
 800071e:	210a      	movs	r1, #10
 8000720:	2001      	movs	r0, #1
 8000722:	f007 f980 	bl	8007a26 <xQueueGenericCreate>
 8000726:	4603      	mov	r3, r0
 8000728:	4a1a      	ldr	r2, [pc, #104]	@ (8000794 <main+0xe0>)
 800072a:	6013      	str	r3, [r2, #0]
  /* add queues, ... */
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* creation of Task01input */
  Task01inputHandle = osThreadNew(Taskuser, NULL, &Task01input_attributes);
 800072c:	4a1a      	ldr	r2, [pc, #104]	@ (8000798 <main+0xe4>)
 800072e:	2100      	movs	r1, #0
 8000730:	481a      	ldr	r0, [pc, #104]	@ (800079c <main+0xe8>)
 8000732:	f006 fec9 	bl	80074c8 <osThreadNew>
 8000736:	4603      	mov	r3, r0
 8000738:	4a19      	ldr	r2, [pc, #100]	@ (80007a0 <main+0xec>)
 800073a:	6013      	str	r3, [r2, #0]

  /* creation of Task02img */
  Task02imgHandle = osThreadNew(Task02image, NULL, &Task02img_attributes);
 800073c:	4a19      	ldr	r2, [pc, #100]	@ (80007a4 <main+0xf0>)
 800073e:	2100      	movs	r1, #0
 8000740:	4819      	ldr	r0, [pc, #100]	@ (80007a8 <main+0xf4>)
 8000742:	f006 fec1 	bl	80074c8 <osThreadNew>
 8000746:	4603      	mov	r3, r0
 8000748:	4a18      	ldr	r2, [pc, #96]	@ (80007ac <main+0xf8>)
 800074a:	6013      	str	r3, [r2, #0]

  /* creation of Task03game */
  Task03gameHandle = osThreadNew(Task03logic, NULL, &Task03game_attributes);
 800074c:	4a18      	ldr	r2, [pc, #96]	@ (80007b0 <main+0xfc>)
 800074e:	2100      	movs	r1, #0
 8000750:	4818      	ldr	r0, [pc, #96]	@ (80007b4 <main+0x100>)
 8000752:	f006 feb9 	bl	80074c8 <osThreadNew>
 8000756:	4603      	mov	r3, r0
 8000758:	4a17      	ldr	r2, [pc, #92]	@ (80007b8 <main+0x104>)
 800075a:	6013      	str	r3, [r2, #0]

  /* creation of Task04oled */
  Task04oledHandle = osThreadNew(Task04display, NULL, &Task04oled_attributes);
 800075c:	4a17      	ldr	r2, [pc, #92]	@ (80007bc <main+0x108>)
 800075e:	2100      	movs	r1, #0
 8000760:	4817      	ldr	r0, [pc, #92]	@ (80007c0 <main+0x10c>)
 8000762:	f006 feb1 	bl	80074c8 <osThreadNew>
 8000766:	4603      	mov	r3, r0
 8000768:	4a16      	ldr	r2, [pc, #88]	@ (80007c4 <main+0x110>)
 800076a:	6013      	str	r3, [r2, #0]

  /* creation of Task05music */
  Task05musicHandle = osThreadNew(Task05song, NULL, &Task05music_attributes);
 800076c:	4a16      	ldr	r2, [pc, #88]	@ (80007c8 <main+0x114>)
 800076e:	2100      	movs	r1, #0
 8000770:	4816      	ldr	r0, [pc, #88]	@ (80007cc <main+0x118>)
 8000772:	f006 fea9 	bl	80074c8 <osThreadNew>
 8000776:	4603      	mov	r3, r0
 8000778:	4a15      	ldr	r2, [pc, #84]	@ (80007d0 <main+0x11c>)
 800077a:	6013      	str	r3, [r2, #0]
  /* USER CODE BEGIN RTOS_EVENTS */
  /* add events, ... */
  /* USER CODE END RTOS_EVENTS */

  /* Start scheduler */
  osKernelStart();
 800077c:	f006 fe6e 	bl	800745c <osKernelStart>

  /* We should never get here as control is now taken by the scheduler */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 8000780:	bf00      	nop
 8000782:	e7fd      	b.n	8000780 <main+0xcc>
 8000784:	20028ba8 	.word	0x20028ba8
 8000788:	20029060 	.word	0x20029060
 800078c:	20028b9c 	.word	0x20028b9c
 8000790:	20028ba0 	.word	0x20028ba0
 8000794:	20028ba4 	.word	0x20028ba4
 8000798:	08011004 	.word	0x08011004
 800079c:	08000d69 	.word	0x08000d69
 80007a0:	200295c8 	.word	0x200295c8
 80007a4:	08011028 	.word	0x08011028
 80007a8:	08000e61 	.word	0x08000e61
 80007ac:	200295cc 	.word	0x200295cc
 80007b0:	0801104c 	.word	0x0801104c
 80007b4:	08000f0d 	.word	0x08000f0d
 80007b8:	200295d0 	.word	0x200295d0
 80007bc:	08011070 	.word	0x08011070
 80007c0:	080010cd 	.word	0x080010cd
 80007c4:	200295d4 	.word	0x200295d4
 80007c8:	08011094 	.word	0x08011094
 80007cc:	080011a1 	.word	0x080011a1
 80007d0:	200295d8 	.word	0x200295d8

080007d4 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80007d4:	b580      	push	{r7, lr}
 80007d6:	b094      	sub	sp, #80	@ 0x50
 80007d8:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80007da:	f107 031c 	add.w	r3, r7, #28
 80007de:	2234      	movs	r2, #52	@ 0x34
 80007e0:	2100      	movs	r1, #0
 80007e2:	4618      	mov	r0, r3
 80007e4:	f00f fb93 	bl	800ff0e <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80007e8:	f107 0308 	add.w	r3, r7, #8
 80007ec:	2200      	movs	r2, #0
 80007ee:	601a      	str	r2, [r3, #0]
 80007f0:	605a      	str	r2, [r3, #4]
 80007f2:	609a      	str	r2, [r3, #8]
 80007f4:	60da      	str	r2, [r3, #12]
 80007f6:	611a      	str	r2, [r3, #16]

  /** Configure LSE Drive Capability
  */
  HAL_PWR_EnableBkUpAccess();
 80007f8:	f003 f95a 	bl	8003ab0 <HAL_PWR_EnableBkUpAccess>

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 80007fc:	4b2b      	ldr	r3, [pc, #172]	@ (80008ac <SystemClock_Config+0xd8>)
 80007fe:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000800:	4a2a      	ldr	r2, [pc, #168]	@ (80008ac <SystemClock_Config+0xd8>)
 8000802:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8000806:	6413      	str	r3, [r2, #64]	@ 0x40
 8000808:	4b28      	ldr	r3, [pc, #160]	@ (80008ac <SystemClock_Config+0xd8>)
 800080a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800080c:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8000810:	607b      	str	r3, [r7, #4]
 8000812:	687b      	ldr	r3, [r7, #4]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8000814:	4b26      	ldr	r3, [pc, #152]	@ (80008b0 <SystemClock_Config+0xdc>)
 8000816:	681b      	ldr	r3, [r3, #0]
 8000818:	4a25      	ldr	r2, [pc, #148]	@ (80008b0 <SystemClock_Config+0xdc>)
 800081a:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 800081e:	6013      	str	r3, [r2, #0]
 8000820:	4b23      	ldr	r3, [pc, #140]	@ (80008b0 <SystemClock_Config+0xdc>)
 8000822:	681b      	ldr	r3, [r3, #0]
 8000824:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 8000828:	603b      	str	r3, [r7, #0]
 800082a:	683b      	ldr	r3, [r7, #0]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 800082c:	2301      	movs	r3, #1
 800082e:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.HSEState = RCC_HSE_BYPASS;
 8000830:	f44f 23a0 	mov.w	r3, #327680	@ 0x50000
 8000834:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000836:	2302      	movs	r3, #2
 8000838:	637b      	str	r3, [r7, #52]	@ 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 800083a:	f44f 0380 	mov.w	r3, #4194304	@ 0x400000
 800083e:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLM = 4;
 8000840:	2304      	movs	r3, #4
 8000842:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLN = 216;
 8000844:	23d8      	movs	r3, #216	@ 0xd8
 8000846:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8000848:	2302      	movs	r3, #2
 800084a:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLQ = 9;
 800084c:	2309      	movs	r3, #9
 800084e:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLR = 2;
 8000850:	2302      	movs	r3, #2
 8000852:	64fb      	str	r3, [r7, #76]	@ 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000854:	f107 031c 	add.w	r3, r7, #28
 8000858:	4618      	mov	r0, r3
 800085a:	f003 f989 	bl	8003b70 <HAL_RCC_OscConfig>
 800085e:	4603      	mov	r3, r0
 8000860:	2b00      	cmp	r3, #0
 8000862:	d001      	beq.n	8000868 <SystemClock_Config+0x94>
  {
    Error_Handler();
 8000864:	f000 fcf4 	bl	8001250 <Error_Handler>
  }

  /** Activate the Over-Drive mode
  */
  if (HAL_PWREx_EnableOverDrive() != HAL_OK)
 8000868:	f003 f932 	bl	8003ad0 <HAL_PWREx_EnableOverDrive>
 800086c:	4603      	mov	r3, r0
 800086e:	2b00      	cmp	r3, #0
 8000870:	d001      	beq.n	8000876 <SystemClock_Config+0xa2>
  {
    Error_Handler();
 8000872:	f000 fced 	bl	8001250 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000876:	230f      	movs	r3, #15
 8000878:	60bb      	str	r3, [r7, #8]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800087a:	2302      	movs	r3, #2
 800087c:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800087e:	2300      	movs	r3, #0
 8000880:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 8000882:	f44f 53a0 	mov.w	r3, #5120	@ 0x1400
 8000886:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 8000888:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 800088c:	61bb      	str	r3, [r7, #24]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_7) != HAL_OK)
 800088e:	f107 0308 	add.w	r3, r7, #8
 8000892:	2107      	movs	r1, #7
 8000894:	4618      	mov	r0, r3
 8000896:	f003 fc19 	bl	80040cc <HAL_RCC_ClockConfig>
 800089a:	4603      	mov	r3, r0
 800089c:	2b00      	cmp	r3, #0
 800089e:	d001      	beq.n	80008a4 <SystemClock_Config+0xd0>
  {
    Error_Handler();
 80008a0:	f000 fcd6 	bl	8001250 <Error_Handler>
  }
}
 80008a4:	bf00      	nop
 80008a6:	3750      	adds	r7, #80	@ 0x50
 80008a8:	46bd      	mov	sp, r7
 80008aa:	bd80      	pop	{r7, pc}
 80008ac:	40023800 	.word	0x40023800
 80008b0:	40007000 	.word	0x40007000

080008b4 <MX_DAC_Init>:
  * @brief DAC Initialization Function
  * @param None
  * @retval None
  */
static void MX_DAC_Init(void)
{
 80008b4:	b580      	push	{r7, lr}
 80008b6:	b082      	sub	sp, #8
 80008b8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN DAC_Init 0 */

  /* USER CODE END DAC_Init 0 */

  DAC_ChannelConfTypeDef sConfig = {0};
 80008ba:	463b      	mov	r3, r7
 80008bc:	2200      	movs	r2, #0
 80008be:	601a      	str	r2, [r3, #0]
 80008c0:	605a      	str	r2, [r3, #4]

  /* USER CODE END DAC_Init 1 */

  /** DAC Initialization
  */
  hdac.Instance = DAC;
 80008c2:	4b0f      	ldr	r3, [pc, #60]	@ (8000900 <MX_DAC_Init+0x4c>)
 80008c4:	4a0f      	ldr	r2, [pc, #60]	@ (8000904 <MX_DAC_Init+0x50>)
 80008c6:	601a      	str	r2, [r3, #0]
  if (HAL_DAC_Init(&hdac) != HAL_OK)
 80008c8:	480d      	ldr	r0, [pc, #52]	@ (8000900 <MX_DAC_Init+0x4c>)
 80008ca:	f001 fc24 	bl	8002116 <HAL_DAC_Init>
 80008ce:	4603      	mov	r3, r0
 80008d0:	2b00      	cmp	r3, #0
 80008d2:	d001      	beq.n	80008d8 <MX_DAC_Init+0x24>
  {
    Error_Handler();
 80008d4:	f000 fcbc 	bl	8001250 <Error_Handler>
  }

  /** DAC channel OUT1 config
  */
  sConfig.DAC_Trigger = DAC_TRIGGER_T4_TRGO;
 80008d8:	232c      	movs	r3, #44	@ 0x2c
 80008da:	603b      	str	r3, [r7, #0]
  sConfig.DAC_OutputBuffer = DAC_OUTPUTBUFFER_ENABLE;
 80008dc:	2300      	movs	r3, #0
 80008de:	607b      	str	r3, [r7, #4]
  if (HAL_DAC_ConfigChannel(&hdac, &sConfig, DAC_CHANNEL_1) != HAL_OK)
 80008e0:	463b      	mov	r3, r7
 80008e2:	2200      	movs	r2, #0
 80008e4:	4619      	mov	r1, r3
 80008e6:	4806      	ldr	r0, [pc, #24]	@ (8000900 <MX_DAC_Init+0x4c>)
 80008e8:	f001 fcda 	bl	80022a0 <HAL_DAC_ConfigChannel>
 80008ec:	4603      	mov	r3, r0
 80008ee:	2b00      	cmp	r3, #0
 80008f0:	d001      	beq.n	80008f6 <MX_DAC_Init+0x42>
  {
    Error_Handler();
 80008f2:	f000 fcad 	bl	8001250 <Error_Handler>
  }
  /* USER CODE BEGIN DAC_Init 2 */

  /* USER CODE END DAC_Init 2 */

}
 80008f6:	bf00      	nop
 80008f8:	3708      	adds	r7, #8
 80008fa:	46bd      	mov	sp, r7
 80008fc:	bd80      	pop	{r7, pc}
 80008fe:	bf00      	nop
 8000900:	20028efc 	.word	0x20028efc
 8000904:	40007400 	.word	0x40007400

08000908 <MX_ETH_Init>:
  * @brief ETH Initialization Function
  * @param None
  * @retval None
  */
static void MX_ETH_Init(void)
{
 8000908:	b580      	push	{r7, lr}
 800090a:	af00      	add	r7, sp, #0
   static uint8_t MACAddr[6];

  /* USER CODE BEGIN ETH_Init 1 */

  /* USER CODE END ETH_Init 1 */
  heth.Instance = ETH;
 800090c:	4b1f      	ldr	r3, [pc, #124]	@ (800098c <MX_ETH_Init+0x84>)
 800090e:	4a20      	ldr	r2, [pc, #128]	@ (8000990 <MX_ETH_Init+0x88>)
 8000910:	601a      	str	r2, [r3, #0]
  MACAddr[0] = 0x00;
 8000912:	4b20      	ldr	r3, [pc, #128]	@ (8000994 <MX_ETH_Init+0x8c>)
 8000914:	2200      	movs	r2, #0
 8000916:	701a      	strb	r2, [r3, #0]
  MACAddr[1] = 0x80;
 8000918:	4b1e      	ldr	r3, [pc, #120]	@ (8000994 <MX_ETH_Init+0x8c>)
 800091a:	2280      	movs	r2, #128	@ 0x80
 800091c:	705a      	strb	r2, [r3, #1]
  MACAddr[2] = 0xE1;
 800091e:	4b1d      	ldr	r3, [pc, #116]	@ (8000994 <MX_ETH_Init+0x8c>)
 8000920:	22e1      	movs	r2, #225	@ 0xe1
 8000922:	709a      	strb	r2, [r3, #2]
  MACAddr[3] = 0x00;
 8000924:	4b1b      	ldr	r3, [pc, #108]	@ (8000994 <MX_ETH_Init+0x8c>)
 8000926:	2200      	movs	r2, #0
 8000928:	70da      	strb	r2, [r3, #3]
  MACAddr[4] = 0x00;
 800092a:	4b1a      	ldr	r3, [pc, #104]	@ (8000994 <MX_ETH_Init+0x8c>)
 800092c:	2200      	movs	r2, #0
 800092e:	711a      	strb	r2, [r3, #4]
  MACAddr[5] = 0x00;
 8000930:	4b18      	ldr	r3, [pc, #96]	@ (8000994 <MX_ETH_Init+0x8c>)
 8000932:	2200      	movs	r2, #0
 8000934:	715a      	strb	r2, [r3, #5]
  heth.Init.MACAddr = &MACAddr[0];
 8000936:	4b15      	ldr	r3, [pc, #84]	@ (800098c <MX_ETH_Init+0x84>)
 8000938:	4a16      	ldr	r2, [pc, #88]	@ (8000994 <MX_ETH_Init+0x8c>)
 800093a:	605a      	str	r2, [r3, #4]
  heth.Init.MediaInterface = HAL_ETH_RMII_MODE;
 800093c:	4b13      	ldr	r3, [pc, #76]	@ (800098c <MX_ETH_Init+0x84>)
 800093e:	f44f 0200 	mov.w	r2, #8388608	@ 0x800000
 8000942:	609a      	str	r2, [r3, #8]
  heth.Init.TxDesc = DMATxDscrTab;
 8000944:	4b11      	ldr	r3, [pc, #68]	@ (800098c <MX_ETH_Init+0x84>)
 8000946:	4a14      	ldr	r2, [pc, #80]	@ (8000998 <MX_ETH_Init+0x90>)
 8000948:	60da      	str	r2, [r3, #12]
  heth.Init.RxDesc = DMARxDscrTab;
 800094a:	4b10      	ldr	r3, [pc, #64]	@ (800098c <MX_ETH_Init+0x84>)
 800094c:	4a13      	ldr	r2, [pc, #76]	@ (800099c <MX_ETH_Init+0x94>)
 800094e:	611a      	str	r2, [r3, #16]
  heth.Init.RxBuffLen = 1524;
 8000950:	4b0e      	ldr	r3, [pc, #56]	@ (800098c <MX_ETH_Init+0x84>)
 8000952:	f240 52f4 	movw	r2, #1524	@ 0x5f4
 8000956:	615a      	str	r2, [r3, #20]

  /* USER CODE BEGIN MACADDRESS */

  /* USER CODE END MACADDRESS */

  if (HAL_ETH_Init(&heth) != HAL_OK)
 8000958:	480c      	ldr	r0, [pc, #48]	@ (800098c <MX_ETH_Init+0x84>)
 800095a:	f001 fd8d 	bl	8002478 <HAL_ETH_Init>
 800095e:	4603      	mov	r3, r0
 8000960:	2b00      	cmp	r3, #0
 8000962:	d001      	beq.n	8000968 <MX_ETH_Init+0x60>
  {
    Error_Handler();
 8000964:	f000 fc74 	bl	8001250 <Error_Handler>
  }

  memset(&TxConfig, 0 , sizeof(ETH_TxPacketConfig));
 8000968:	2238      	movs	r2, #56	@ 0x38
 800096a:	2100      	movs	r1, #0
 800096c:	480c      	ldr	r0, [pc, #48]	@ (80009a0 <MX_ETH_Init+0x98>)
 800096e:	f00f face 	bl	800ff0e <memset>
  TxConfig.Attributes = ETH_TX_PACKETS_FEATURES_CSUM | ETH_TX_PACKETS_FEATURES_CRCPAD;
 8000972:	4b0b      	ldr	r3, [pc, #44]	@ (80009a0 <MX_ETH_Init+0x98>)
 8000974:	2221      	movs	r2, #33	@ 0x21
 8000976:	601a      	str	r2, [r3, #0]
  TxConfig.ChecksumCtrl = ETH_CHECKSUM_IPHDR_PAYLOAD_INSERT_PHDR_CALC;
 8000978:	4b09      	ldr	r3, [pc, #36]	@ (80009a0 <MX_ETH_Init+0x98>)
 800097a:	f44f 0240 	mov.w	r2, #12582912	@ 0xc00000
 800097e:	615a      	str	r2, [r3, #20]
  TxConfig.CRCPadCtrl = ETH_CRC_PAD_INSERT;
 8000980:	4b07      	ldr	r3, [pc, #28]	@ (80009a0 <MX_ETH_Init+0x98>)
 8000982:	2200      	movs	r2, #0
 8000984:	611a      	str	r2, [r3, #16]
  /* USER CODE BEGIN ETH_Init 2 */

  /* USER CODE END ETH_Init 2 */

}
 8000986:	bf00      	nop
 8000988:	bd80      	pop	{r7, pc}
 800098a:	bf00      	nop
 800098c:	20028f10 	.word	0x20028f10
 8000990:	40028000 	.word	0x40028000
 8000994:	200295dc 	.word	0x200295dc
 8000998:	20028ae0 	.word	0x20028ae0
 800099c:	20028a40 	.word	0x20028a40
 80009a0:	20028ec4 	.word	0x20028ec4

080009a4 <MX_I2C2_Init>:
  * @brief I2C2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C2_Init(void)
{
 80009a4:	b580      	push	{r7, lr}
 80009a6:	af00      	add	r7, sp, #0
  /* USER CODE END I2C2_Init 0 */

  /* USER CODE BEGIN I2C2_Init 1 */

  /* USER CODE END I2C2_Init 1 */
  hi2c2.Instance = I2C2;
 80009a8:	4b1b      	ldr	r3, [pc, #108]	@ (8000a18 <MX_I2C2_Init+0x74>)
 80009aa:	4a1c      	ldr	r2, [pc, #112]	@ (8000a1c <MX_I2C2_Init+0x78>)
 80009ac:	601a      	str	r2, [r3, #0]
  hi2c2.Init.Timing = 0x20404768;
 80009ae:	4b1a      	ldr	r3, [pc, #104]	@ (8000a18 <MX_I2C2_Init+0x74>)
 80009b0:	4a1b      	ldr	r2, [pc, #108]	@ (8000a20 <MX_I2C2_Init+0x7c>)
 80009b2:	605a      	str	r2, [r3, #4]
  hi2c2.Init.OwnAddress1 = 0;
 80009b4:	4b18      	ldr	r3, [pc, #96]	@ (8000a18 <MX_I2C2_Init+0x74>)
 80009b6:	2200      	movs	r2, #0
 80009b8:	609a      	str	r2, [r3, #8]
  hi2c2.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 80009ba:	4b17      	ldr	r3, [pc, #92]	@ (8000a18 <MX_I2C2_Init+0x74>)
 80009bc:	2201      	movs	r2, #1
 80009be:	60da      	str	r2, [r3, #12]
  hi2c2.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 80009c0:	4b15      	ldr	r3, [pc, #84]	@ (8000a18 <MX_I2C2_Init+0x74>)
 80009c2:	2200      	movs	r2, #0
 80009c4:	611a      	str	r2, [r3, #16]
  hi2c2.Init.OwnAddress2 = 0;
 80009c6:	4b14      	ldr	r3, [pc, #80]	@ (8000a18 <MX_I2C2_Init+0x74>)
 80009c8:	2200      	movs	r2, #0
 80009ca:	615a      	str	r2, [r3, #20]
  hi2c2.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 80009cc:	4b12      	ldr	r3, [pc, #72]	@ (8000a18 <MX_I2C2_Init+0x74>)
 80009ce:	2200      	movs	r2, #0
 80009d0:	619a      	str	r2, [r3, #24]
  hi2c2.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 80009d2:	4b11      	ldr	r3, [pc, #68]	@ (8000a18 <MX_I2C2_Init+0x74>)
 80009d4:	2200      	movs	r2, #0
 80009d6:	61da      	str	r2, [r3, #28]
  hi2c2.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 80009d8:	4b0f      	ldr	r3, [pc, #60]	@ (8000a18 <MX_I2C2_Init+0x74>)
 80009da:	2200      	movs	r2, #0
 80009dc:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c2) != HAL_OK)
 80009de:	480e      	ldr	r0, [pc, #56]	@ (8000a18 <MX_I2C2_Init+0x74>)
 80009e0:	f002 fa76 	bl	8002ed0 <HAL_I2C_Init>
 80009e4:	4603      	mov	r3, r0
 80009e6:	2b00      	cmp	r3, #0
 80009e8:	d001      	beq.n	80009ee <MX_I2C2_Init+0x4a>
  {
    Error_Handler();
 80009ea:	f000 fc31 	bl	8001250 <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c2, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 80009ee:	2100      	movs	r1, #0
 80009f0:	4809      	ldr	r0, [pc, #36]	@ (8000a18 <MX_I2C2_Init+0x74>)
 80009f2:	f002 fe8b 	bl	800370c <HAL_I2CEx_ConfigAnalogFilter>
 80009f6:	4603      	mov	r3, r0
 80009f8:	2b00      	cmp	r3, #0
 80009fa:	d001      	beq.n	8000a00 <MX_I2C2_Init+0x5c>
  {
    Error_Handler();
 80009fc:	f000 fc28 	bl	8001250 <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c2, 0) != HAL_OK)
 8000a00:	2100      	movs	r1, #0
 8000a02:	4805      	ldr	r0, [pc, #20]	@ (8000a18 <MX_I2C2_Init+0x74>)
 8000a04:	f002 fecd 	bl	80037a2 <HAL_I2CEx_ConfigDigitalFilter>
 8000a08:	4603      	mov	r3, r0
 8000a0a:	2b00      	cmp	r3, #0
 8000a0c:	d001      	beq.n	8000a12 <MX_I2C2_Init+0x6e>
  {
    Error_Handler();
 8000a0e:	f000 fc1f 	bl	8001250 <Error_Handler>
  }
  /* USER CODE BEGIN I2C2_Init 2 */

  /* USER CODE END I2C2_Init 2 */

}
 8000a12:	bf00      	nop
 8000a14:	bd80      	pop	{r7, pc}
 8000a16:	bf00      	nop
 8000a18:	20028fc0 	.word	0x20028fc0
 8000a1c:	40005800 	.word	0x40005800
 8000a20:	20404768 	.word	0x20404768

08000a24 <MX_TIM4_Init>:
  * @brief TIM4 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM4_Init(void)
{
 8000a24:	b580      	push	{r7, lr}
 8000a26:	b088      	sub	sp, #32
 8000a28:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM4_Init 0 */

  /* USER CODE END TIM4_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8000a2a:	f107 0310 	add.w	r3, r7, #16
 8000a2e:	2200      	movs	r2, #0
 8000a30:	601a      	str	r2, [r3, #0]
 8000a32:	605a      	str	r2, [r3, #4]
 8000a34:	609a      	str	r2, [r3, #8]
 8000a36:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000a38:	1d3b      	adds	r3, r7, #4
 8000a3a:	2200      	movs	r2, #0
 8000a3c:	601a      	str	r2, [r3, #0]
 8000a3e:	605a      	str	r2, [r3, #4]
 8000a40:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM4_Init 1 */

  /* USER CODE END TIM4_Init 1 */
  htim4.Instance = TIM4;
 8000a42:	4b1d      	ldr	r3, [pc, #116]	@ (8000ab8 <MX_TIM4_Init+0x94>)
 8000a44:	4a1d      	ldr	r2, [pc, #116]	@ (8000abc <MX_TIM4_Init+0x98>)
 8000a46:	601a      	str	r2, [r3, #0]
  htim4.Init.Prescaler = 1223;
 8000a48:	4b1b      	ldr	r3, [pc, #108]	@ (8000ab8 <MX_TIM4_Init+0x94>)
 8000a4a:	f240 42c7 	movw	r2, #1223	@ 0x4c7
 8000a4e:	605a      	str	r2, [r3, #4]
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000a50:	4b19      	ldr	r3, [pc, #100]	@ (8000ab8 <MX_TIM4_Init+0x94>)
 8000a52:	2200      	movs	r2, #0
 8000a54:	609a      	str	r2, [r3, #8]
  htim4.Init.Period = 1;
 8000a56:	4b18      	ldr	r3, [pc, #96]	@ (8000ab8 <MX_TIM4_Init+0x94>)
 8000a58:	2201      	movs	r2, #1
 8000a5a:	60da      	str	r2, [r3, #12]
  htim4.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000a5c:	4b16      	ldr	r3, [pc, #88]	@ (8000ab8 <MX_TIM4_Init+0x94>)
 8000a5e:	2200      	movs	r2, #0
 8000a60:	611a      	str	r2, [r3, #16]
  htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000a62:	4b15      	ldr	r3, [pc, #84]	@ (8000ab8 <MX_TIM4_Init+0x94>)
 8000a64:	2200      	movs	r2, #0
 8000a66:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim4) != HAL_OK)
 8000a68:	4813      	ldr	r0, [pc, #76]	@ (8000ab8 <MX_TIM4_Init+0x94>)
 8000a6a:	f004 f97d 	bl	8004d68 <HAL_TIM_Base_Init>
 8000a6e:	4603      	mov	r3, r0
 8000a70:	2b00      	cmp	r3, #0
 8000a72:	d001      	beq.n	8000a78 <MX_TIM4_Init+0x54>
  {
    Error_Handler();
 8000a74:	f000 fbec 	bl	8001250 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000a78:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8000a7c:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_ConfigClockSource(&htim4, &sClockSourceConfig) != HAL_OK)
 8000a7e:	f107 0310 	add.w	r3, r7, #16
 8000a82:	4619      	mov	r1, r3
 8000a84:	480c      	ldr	r0, [pc, #48]	@ (8000ab8 <MX_TIM4_Init+0x94>)
 8000a86:	f004 fb75 	bl	8005174 <HAL_TIM_ConfigClockSource>
 8000a8a:	4603      	mov	r3, r0
 8000a8c:	2b00      	cmp	r3, #0
 8000a8e:	d001      	beq.n	8000a94 <MX_TIM4_Init+0x70>
  {
    Error_Handler();
 8000a90:	f000 fbde 	bl	8001250 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_UPDATE;
 8000a94:	2320      	movs	r3, #32
 8000a96:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000a98:	2300      	movs	r3, #0
 8000a9a:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig) != HAL_OK)
 8000a9c:	1d3b      	adds	r3, r7, #4
 8000a9e:	4619      	mov	r1, r3
 8000aa0:	4805      	ldr	r0, [pc, #20]	@ (8000ab8 <MX_TIM4_Init+0x94>)
 8000aa2:	f004 fda9 	bl	80055f8 <HAL_TIMEx_MasterConfigSynchronization>
 8000aa6:	4603      	mov	r3, r0
 8000aa8:	2b00      	cmp	r3, #0
 8000aaa:	d001      	beq.n	8000ab0 <MX_TIM4_Init+0x8c>
  {
    Error_Handler();
 8000aac:	f000 fbd0 	bl	8001250 <Error_Handler>
  }
  /* USER CODE BEGIN TIM4_Init 2 */

  /* USER CODE END TIM4_Init 2 */

}
 8000ab0:	bf00      	nop
 8000ab2:	3720      	adds	r7, #32
 8000ab4:	46bd      	mov	sp, r7
 8000ab6:	bd80      	pop	{r7, pc}
 8000ab8:	20029014 	.word	0x20029014
 8000abc:	40000800 	.word	0x40000800

08000ac0 <MX_USART3_UART_Init>:
  * @brief USART3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART3_UART_Init(void)
{
 8000ac0:	b580      	push	{r7, lr}
 8000ac2:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 8000ac4:	4b14      	ldr	r3, [pc, #80]	@ (8000b18 <MX_USART3_UART_Init+0x58>)
 8000ac6:	4a15      	ldr	r2, [pc, #84]	@ (8000b1c <MX_USART3_UART_Init+0x5c>)
 8000ac8:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 115200;
 8000aca:	4b13      	ldr	r3, [pc, #76]	@ (8000b18 <MX_USART3_UART_Init+0x58>)
 8000acc:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8000ad0:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 8000ad2:	4b11      	ldr	r3, [pc, #68]	@ (8000b18 <MX_USART3_UART_Init+0x58>)
 8000ad4:	2200      	movs	r2, #0
 8000ad6:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 8000ad8:	4b0f      	ldr	r3, [pc, #60]	@ (8000b18 <MX_USART3_UART_Init+0x58>)
 8000ada:	2200      	movs	r2, #0
 8000adc:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 8000ade:	4b0e      	ldr	r3, [pc, #56]	@ (8000b18 <MX_USART3_UART_Init+0x58>)
 8000ae0:	2200      	movs	r2, #0
 8000ae2:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 8000ae4:	4b0c      	ldr	r3, [pc, #48]	@ (8000b18 <MX_USART3_UART_Init+0x58>)
 8000ae6:	220c      	movs	r2, #12
 8000ae8:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000aea:	4b0b      	ldr	r3, [pc, #44]	@ (8000b18 <MX_USART3_UART_Init+0x58>)
 8000aec:	2200      	movs	r2, #0
 8000aee:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 8000af0:	4b09      	ldr	r3, [pc, #36]	@ (8000b18 <MX_USART3_UART_Init+0x58>)
 8000af2:	2200      	movs	r2, #0
 8000af4:	61da      	str	r2, [r3, #28]
  huart3.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8000af6:	4b08      	ldr	r3, [pc, #32]	@ (8000b18 <MX_USART3_UART_Init+0x58>)
 8000af8:	2200      	movs	r2, #0
 8000afa:	621a      	str	r2, [r3, #32]
  huart3.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8000afc:	4b06      	ldr	r3, [pc, #24]	@ (8000b18 <MX_USART3_UART_Init+0x58>)
 8000afe:	2200      	movs	r2, #0
 8000b00:	625a      	str	r2, [r3, #36]	@ 0x24
  if (HAL_UART_Init(&huart3) != HAL_OK)
 8000b02:	4805      	ldr	r0, [pc, #20]	@ (8000b18 <MX_USART3_UART_Init+0x58>)
 8000b04:	f004 fe24 	bl	8005750 <HAL_UART_Init>
 8000b08:	4603      	mov	r3, r0
 8000b0a:	2b00      	cmp	r3, #0
 8000b0c:	d001      	beq.n	8000b12 <MX_USART3_UART_Init+0x52>
  {
    Error_Handler();
 8000b0e:	f000 fb9f 	bl	8001250 <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 8000b12:	bf00      	nop
 8000b14:	bd80      	pop	{r7, pc}
 8000b16:	bf00      	nop
 8000b18:	20029060 	.word	0x20029060
 8000b1c:	40004800 	.word	0x40004800

08000b20 <MX_USB_OTG_FS_PCD_Init>:
  * @brief USB_OTG_FS Initialization Function
  * @param None
  * @retval None
  */
static void MX_USB_OTG_FS_PCD_Init(void)
{
 8000b20:	b580      	push	{r7, lr}
 8000b22:	af00      	add	r7, sp, #0
  /* USER CODE END USB_OTG_FS_Init 0 */

  /* USER CODE BEGIN USB_OTG_FS_Init 1 */

  /* USER CODE END USB_OTG_FS_Init 1 */
  hpcd_USB_OTG_FS.Instance = USB_OTG_FS;
 8000b24:	4b14      	ldr	r3, [pc, #80]	@ (8000b78 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8000b26:	f04f 42a0 	mov.w	r2, #1342177280	@ 0x50000000
 8000b2a:	601a      	str	r2, [r3, #0]
  hpcd_USB_OTG_FS.Init.dev_endpoints = 6;
 8000b2c:	4b12      	ldr	r3, [pc, #72]	@ (8000b78 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8000b2e:	2206      	movs	r2, #6
 8000b30:	711a      	strb	r2, [r3, #4]
  hpcd_USB_OTG_FS.Init.speed = PCD_SPEED_FULL;
 8000b32:	4b11      	ldr	r3, [pc, #68]	@ (8000b78 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8000b34:	2202      	movs	r2, #2
 8000b36:	71da      	strb	r2, [r3, #7]
  hpcd_USB_OTG_FS.Init.dma_enable = DISABLE;
 8000b38:	4b0f      	ldr	r3, [pc, #60]	@ (8000b78 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8000b3a:	2200      	movs	r2, #0
 8000b3c:	719a      	strb	r2, [r3, #6]
  hpcd_USB_OTG_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 8000b3e:	4b0e      	ldr	r3, [pc, #56]	@ (8000b78 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8000b40:	2202      	movs	r2, #2
 8000b42:	725a      	strb	r2, [r3, #9]
  hpcd_USB_OTG_FS.Init.Sof_enable = ENABLE;
 8000b44:	4b0c      	ldr	r3, [pc, #48]	@ (8000b78 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8000b46:	2201      	movs	r2, #1
 8000b48:	729a      	strb	r2, [r3, #10]
  hpcd_USB_OTG_FS.Init.low_power_enable = DISABLE;
 8000b4a:	4b0b      	ldr	r3, [pc, #44]	@ (8000b78 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8000b4c:	2200      	movs	r2, #0
 8000b4e:	72da      	strb	r2, [r3, #11]
  hpcd_USB_OTG_FS.Init.lpm_enable = DISABLE;
 8000b50:	4b09      	ldr	r3, [pc, #36]	@ (8000b78 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8000b52:	2200      	movs	r2, #0
 8000b54:	731a      	strb	r2, [r3, #12]
  hpcd_USB_OTG_FS.Init.vbus_sensing_enable = ENABLE;
 8000b56:	4b08      	ldr	r3, [pc, #32]	@ (8000b78 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8000b58:	2201      	movs	r2, #1
 8000b5a:	739a      	strb	r2, [r3, #14]
  hpcd_USB_OTG_FS.Init.use_dedicated_ep1 = DISABLE;
 8000b5c:	4b06      	ldr	r3, [pc, #24]	@ (8000b78 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8000b5e:	2200      	movs	r2, #0
 8000b60:	73da      	strb	r2, [r3, #15]
  if (HAL_PCD_Init(&hpcd_USB_OTG_FS) != HAL_OK)
 8000b62:	4805      	ldr	r0, [pc, #20]	@ (8000b78 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8000b64:	f002 fe69 	bl	800383a <HAL_PCD_Init>
 8000b68:	4603      	mov	r3, r0
 8000b6a:	2b00      	cmp	r3, #0
 8000b6c:	d001      	beq.n	8000b72 <MX_USB_OTG_FS_PCD_Init+0x52>
  {
    Error_Handler();
 8000b6e:	f000 fb6f 	bl	8001250 <Error_Handler>
  }
  /* USER CODE BEGIN USB_OTG_FS_Init 2 */

  /* USER CODE END USB_OTG_FS_Init 2 */

}
 8000b72:	bf00      	nop
 8000b74:	bd80      	pop	{r7, pc}
 8000b76:	bf00      	nop
 8000b78:	200290e8 	.word	0x200290e8

08000b7c <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000b7c:	b580      	push	{r7, lr}
 8000b7e:	b08e      	sub	sp, #56	@ 0x38
 8000b80:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000b82:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8000b86:	2200      	movs	r2, #0
 8000b88:	601a      	str	r2, [r3, #0]
 8000b8a:	605a      	str	r2, [r3, #4]
 8000b8c:	609a      	str	r2, [r3, #8]
 8000b8e:	60da      	str	r2, [r3, #12]
 8000b90:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000b92:	4b59      	ldr	r3, [pc, #356]	@ (8000cf8 <MX_GPIO_Init+0x17c>)
 8000b94:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000b96:	4a58      	ldr	r2, [pc, #352]	@ (8000cf8 <MX_GPIO_Init+0x17c>)
 8000b98:	f043 0304 	orr.w	r3, r3, #4
 8000b9c:	6313      	str	r3, [r2, #48]	@ 0x30
 8000b9e:	4b56      	ldr	r3, [pc, #344]	@ (8000cf8 <MX_GPIO_Init+0x17c>)
 8000ba0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000ba2:	f003 0304 	and.w	r3, r3, #4
 8000ba6:	623b      	str	r3, [r7, #32]
 8000ba8:	6a3b      	ldr	r3, [r7, #32]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 8000baa:	4b53      	ldr	r3, [pc, #332]	@ (8000cf8 <MX_GPIO_Init+0x17c>)
 8000bac:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000bae:	4a52      	ldr	r2, [pc, #328]	@ (8000cf8 <MX_GPIO_Init+0x17c>)
 8000bb0:	f043 0320 	orr.w	r3, r3, #32
 8000bb4:	6313      	str	r3, [r2, #48]	@ 0x30
 8000bb6:	4b50      	ldr	r3, [pc, #320]	@ (8000cf8 <MX_GPIO_Init+0x17c>)
 8000bb8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000bba:	f003 0320 	and.w	r3, r3, #32
 8000bbe:	61fb      	str	r3, [r7, #28]
 8000bc0:	69fb      	ldr	r3, [r7, #28]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8000bc2:	4b4d      	ldr	r3, [pc, #308]	@ (8000cf8 <MX_GPIO_Init+0x17c>)
 8000bc4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000bc6:	4a4c      	ldr	r2, [pc, #304]	@ (8000cf8 <MX_GPIO_Init+0x17c>)
 8000bc8:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8000bcc:	6313      	str	r3, [r2, #48]	@ 0x30
 8000bce:	4b4a      	ldr	r3, [pc, #296]	@ (8000cf8 <MX_GPIO_Init+0x17c>)
 8000bd0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000bd2:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8000bd6:	61bb      	str	r3, [r7, #24]
 8000bd8:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000bda:	4b47      	ldr	r3, [pc, #284]	@ (8000cf8 <MX_GPIO_Init+0x17c>)
 8000bdc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000bde:	4a46      	ldr	r2, [pc, #280]	@ (8000cf8 <MX_GPIO_Init+0x17c>)
 8000be0:	f043 0301 	orr.w	r3, r3, #1
 8000be4:	6313      	str	r3, [r2, #48]	@ 0x30
 8000be6:	4b44      	ldr	r3, [pc, #272]	@ (8000cf8 <MX_GPIO_Init+0x17c>)
 8000be8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000bea:	f003 0301 	and.w	r3, r3, #1
 8000bee:	617b      	str	r3, [r7, #20]
 8000bf0:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000bf2:	4b41      	ldr	r3, [pc, #260]	@ (8000cf8 <MX_GPIO_Init+0x17c>)
 8000bf4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000bf6:	4a40      	ldr	r2, [pc, #256]	@ (8000cf8 <MX_GPIO_Init+0x17c>)
 8000bf8:	f043 0302 	orr.w	r3, r3, #2
 8000bfc:	6313      	str	r3, [r2, #48]	@ 0x30
 8000bfe:	4b3e      	ldr	r3, [pc, #248]	@ (8000cf8 <MX_GPIO_Init+0x17c>)
 8000c00:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000c02:	f003 0302 	and.w	r3, r3, #2
 8000c06:	613b      	str	r3, [r7, #16]
 8000c08:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8000c0a:	4b3b      	ldr	r3, [pc, #236]	@ (8000cf8 <MX_GPIO_Init+0x17c>)
 8000c0c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000c0e:	4a3a      	ldr	r2, [pc, #232]	@ (8000cf8 <MX_GPIO_Init+0x17c>)
 8000c10:	f043 0310 	orr.w	r3, r3, #16
 8000c14:	6313      	str	r3, [r2, #48]	@ 0x30
 8000c16:	4b38      	ldr	r3, [pc, #224]	@ (8000cf8 <MX_GPIO_Init+0x17c>)
 8000c18:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000c1a:	f003 0310 	and.w	r3, r3, #16
 8000c1e:	60fb      	str	r3, [r7, #12]
 8000c20:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000c22:	4b35      	ldr	r3, [pc, #212]	@ (8000cf8 <MX_GPIO_Init+0x17c>)
 8000c24:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000c26:	4a34      	ldr	r2, [pc, #208]	@ (8000cf8 <MX_GPIO_Init+0x17c>)
 8000c28:	f043 0308 	orr.w	r3, r3, #8
 8000c2c:	6313      	str	r3, [r2, #48]	@ 0x30
 8000c2e:	4b32      	ldr	r3, [pc, #200]	@ (8000cf8 <MX_GPIO_Init+0x17c>)
 8000c30:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000c32:	f003 0308 	and.w	r3, r3, #8
 8000c36:	60bb      	str	r3, [r7, #8]
 8000c38:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 8000c3a:	4b2f      	ldr	r3, [pc, #188]	@ (8000cf8 <MX_GPIO_Init+0x17c>)
 8000c3c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000c3e:	4a2e      	ldr	r2, [pc, #184]	@ (8000cf8 <MX_GPIO_Init+0x17c>)
 8000c40:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8000c44:	6313      	str	r3, [r2, #48]	@ 0x30
 8000c46:	4b2c      	ldr	r3, [pc, #176]	@ (8000cf8 <MX_GPIO_Init+0x17c>)
 8000c48:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000c4a:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8000c4e:	607b      	str	r3, [r7, #4]
 8000c50:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, LD1_Pin|LD3_Pin|LD2_Pin, GPIO_PIN_RESET);
 8000c52:	2200      	movs	r2, #0
 8000c54:	f244 0181 	movw	r1, #16513	@ 0x4081
 8000c58:	4828      	ldr	r0, [pc, #160]	@ (8000cfc <MX_GPIO_Init+0x180>)
 8000c5a:	f002 f91f 	bl	8002e9c <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(USB_PowerSwitchOn_GPIO_Port, USB_PowerSwitchOn_Pin, GPIO_PIN_RESET);
 8000c5e:	2200      	movs	r2, #0
 8000c60:	2140      	movs	r1, #64	@ 0x40
 8000c62:	4827      	ldr	r0, [pc, #156]	@ (8000d00 <MX_GPIO_Init+0x184>)
 8000c64:	f002 f91a 	bl	8002e9c <HAL_GPIO_WritePin>

  /*Configure GPIO pin : USER_Btn_Pin */
  GPIO_InitStruct.Pin = USER_Btn_Pin;
 8000c68:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8000c6c:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8000c6e:	f44f 1388 	mov.w	r3, #1114112	@ 0x110000
 8000c72:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c74:	2300      	movs	r3, #0
 8000c76:	62fb      	str	r3, [r7, #44]	@ 0x2c
  HAL_GPIO_Init(USER_Btn_GPIO_Port, &GPIO_InitStruct);
 8000c78:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8000c7c:	4619      	mov	r1, r3
 8000c7e:	4821      	ldr	r0, [pc, #132]	@ (8000d04 <MX_GPIO_Init+0x188>)
 8000c80:	f001 ff48 	bl	8002b14 <HAL_GPIO_Init>

  /*Configure GPIO pins : LD1_Pin LD3_Pin LD2_Pin */
  GPIO_InitStruct.Pin = LD1_Pin|LD3_Pin|LD2_Pin;
 8000c84:	f244 0381 	movw	r3, #16513	@ 0x4081
 8000c88:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000c8a:	2301      	movs	r3, #1
 8000c8c:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c8e:	2300      	movs	r3, #0
 8000c90:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000c92:	2300      	movs	r3, #0
 8000c94:	633b      	str	r3, [r7, #48]	@ 0x30
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000c96:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8000c9a:	4619      	mov	r1, r3
 8000c9c:	4817      	ldr	r0, [pc, #92]	@ (8000cfc <MX_GPIO_Init+0x180>)
 8000c9e:	f001 ff39 	bl	8002b14 <HAL_GPIO_Init>

  /*Configure GPIO pin : PE9 */
  GPIO_InitStruct.Pin = GPIO_PIN_9;
 8000ca2:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8000ca6:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000ca8:	2300      	movs	r3, #0
 8000caa:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8000cac:	2301      	movs	r3, #1
 8000cae:	62fb      	str	r3, [r7, #44]	@ 0x2c
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8000cb0:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8000cb4:	4619      	mov	r1, r3
 8000cb6:	4814      	ldr	r0, [pc, #80]	@ (8000d08 <MX_GPIO_Init+0x18c>)
 8000cb8:	f001 ff2c 	bl	8002b14 <HAL_GPIO_Init>

  /*Configure GPIO pin : USB_PowerSwitchOn_Pin */
  GPIO_InitStruct.Pin = USB_PowerSwitchOn_Pin;
 8000cbc:	2340      	movs	r3, #64	@ 0x40
 8000cbe:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000cc0:	2301      	movs	r3, #1
 8000cc2:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000cc4:	2300      	movs	r3, #0
 8000cc6:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000cc8:	2300      	movs	r3, #0
 8000cca:	633b      	str	r3, [r7, #48]	@ 0x30
  HAL_GPIO_Init(USB_PowerSwitchOn_GPIO_Port, &GPIO_InitStruct);
 8000ccc:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8000cd0:	4619      	mov	r1, r3
 8000cd2:	480b      	ldr	r0, [pc, #44]	@ (8000d00 <MX_GPIO_Init+0x184>)
 8000cd4:	f001 ff1e 	bl	8002b14 <HAL_GPIO_Init>

  /*Configure GPIO pin : USB_OverCurrent_Pin */
  GPIO_InitStruct.Pin = USB_OverCurrent_Pin;
 8000cd8:	2380      	movs	r3, #128	@ 0x80
 8000cda:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000cdc:	2300      	movs	r3, #0
 8000cde:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ce0:	2300      	movs	r3, #0
 8000ce2:	62fb      	str	r3, [r7, #44]	@ 0x2c
  HAL_GPIO_Init(USB_OverCurrent_GPIO_Port, &GPIO_InitStruct);
 8000ce4:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8000ce8:	4619      	mov	r1, r3
 8000cea:	4805      	ldr	r0, [pc, #20]	@ (8000d00 <MX_GPIO_Init+0x184>)
 8000cec:	f001 ff12 	bl	8002b14 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8000cf0:	bf00      	nop
 8000cf2:	3738      	adds	r7, #56	@ 0x38
 8000cf4:	46bd      	mov	sp, r7
 8000cf6:	bd80      	pop	{r7, pc}
 8000cf8:	40023800 	.word	0x40023800
 8000cfc:	40020400 	.word	0x40020400
 8000d00:	40021800 	.word	0x40021800
 8000d04:	40020800 	.word	0x40020800
 8000d08:	40021000 	.word	0x40021000

08000d0c <HAL_UART_RxCpltCallback>:

/* USER CODE BEGIN 4 */
void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 8000d0c:	b580      	push	{r7, lr}
 8000d0e:	b082      	sub	sp, #8
 8000d10:	af00      	add	r7, sp, #0
 8000d12:	6078      	str	r0, [r7, #4]
  if (huart == &huart3)
 8000d14:	687b      	ldr	r3, [r7, #4]
 8000d16:	4a07      	ldr	r2, [pc, #28]	@ (8000d34 <HAL_UART_RxCpltCallback+0x28>)
 8000d18:	4293      	cmp	r3, r2
 8000d1a:	d107      	bne.n	8000d2c <HAL_UART_RxCpltCallback+0x20>
  {
//    HAL_UART_Transmit(&huart3, (uint8_t *)"Received", 8, HAL_MAX_DELAY);

	  image_ready = 1;
 8000d1c:	4b06      	ldr	r3, [pc, #24]	@ (8000d38 <HAL_UART_RxCpltCallback+0x2c>)
 8000d1e:	2201      	movs	r2, #1
 8000d20:	701a      	strb	r2, [r3, #0]

//	  HAL_UART_Receive_IT(&huart3, (uint8_t*)image_buffer, 28 * 28);

	  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_0, 1);
 8000d22:	2201      	movs	r2, #1
 8000d24:	2101      	movs	r1, #1
 8000d26:	4805      	ldr	r0, [pc, #20]	@ (8000d3c <HAL_UART_RxCpltCallback+0x30>)
 8000d28:	f002 f8b8 	bl	8002e9c <HAL_GPIO_WritePin>
  }
}
 8000d2c:	bf00      	nop
 8000d2e:	3708      	adds	r7, #8
 8000d30:	46bd      	mov	sp, r7
 8000d32:	bd80      	pop	{r7, pc}
 8000d34:	20029060 	.word	0x20029060
 8000d38:	20028eb8 	.word	0x20028eb8
 8000d3c:	40020400 	.word	0x40020400

08000d40 <PlayWav>:



void PlayWav(void) {
 8000d40:	b580      	push	{r7, lr}
 8000d42:	af00      	add	r7, sp, #0
    wav_index = 0;
 8000d44:	4b05      	ldr	r3, [pc, #20]	@ (8000d5c <PlayWav+0x1c>)
 8000d46:	2200      	movs	r2, #0
 8000d48:	601a      	str	r2, [r3, #0]
    HAL_TIM_Base_Start_IT(&htim4);
 8000d4a:	4805      	ldr	r0, [pc, #20]	@ (8000d60 <PlayWav+0x20>)
 8000d4c:	f004 f864 	bl	8004e18 <HAL_TIM_Base_Start_IT>
    HAL_DAC_Start(&hdac, DAC_CHANNEL_1);
 8000d50:	2100      	movs	r1, #0
 8000d52:	4804      	ldr	r0, [pc, #16]	@ (8000d64 <PlayWav+0x24>)
 8000d54:	f001 fa01 	bl	800215a <HAL_DAC_Start>
}
 8000d58:	bf00      	nop
 8000d5a:	bd80      	pop	{r7, pc}
 8000d5c:	20028ebc 	.word	0x20028ebc
 8000d60:	20029014 	.word	0x20029014
 8000d64:	20028efc 	.word	0x20028efc

08000d68 <Taskuser>:
  * @param  argument: Not used
  * @retval None
  */
/* USER CODE END Header_Taskuser */
void Taskuser(void *argument)
{
 8000d68:	b580      	push	{r7, lr}
 8000d6a:	b082      	sub	sp, #8
 8000d6c:	af00      	add	r7, sp, #0
 8000d6e:	6078      	str	r0, [r7, #4]

  /* Infinite loop */
  for(;;)
  {

	  if (HAL_GPIO_ReadPin(GPIOE, GPIO_PIN_9) == 0) {
 8000d70:	f44f 7100 	mov.w	r1, #512	@ 0x200
 8000d74:	4832      	ldr	r0, [pc, #200]	@ (8000e40 <Taskuser+0xd8>)
 8000d76:	f002 f879 	bl	8002e6c <HAL_GPIO_ReadPin>
 8000d7a:	4603      	mov	r3, r0
 8000d7c:	2b00      	cmp	r3, #0
 8000d7e:	d146      	bne.n	8000e0e <Taskuser+0xa6>
	        HAL_GPIO_WritePin(GPIOB, GPIO_PIN_7, 1);
 8000d80:	2201      	movs	r2, #1
 8000d82:	2180      	movs	r1, #128	@ 0x80
 8000d84:	482f      	ldr	r0, [pc, #188]	@ (8000e44 <Taskuser+0xdc>)
 8000d86:	f002 f889 	bl	8002e9c <HAL_GPIO_WritePin>

	        if (game_started == 0) {
 8000d8a:	4b2f      	ldr	r3, [pc, #188]	@ (8000e48 <Taskuser+0xe0>)
 8000d8c:	f993 3000 	ldrsb.w	r3, [r3]
 8000d90:	2b00      	cmp	r3, #0
 8000d92:	d125      	bne.n	8000de0 <Taskuser+0x78>
	          srand(HAL_GetTick());
 8000d94:	f001 f87e 	bl	8001e94 <HAL_GetTick>
 8000d98:	4603      	mov	r3, r0
 8000d9a:	4618      	mov	r0, r3
 8000d9c:	f00e fe62 	bl	800fa64 <srand>
	          random_digit = rand() % 10;
 8000da0:	f00e fe8e 	bl	800fac0 <rand>
 8000da4:	4602      	mov	r2, r0
 8000da6:	4b29      	ldr	r3, [pc, #164]	@ (8000e4c <Taskuser+0xe4>)
 8000da8:	fb83 1302 	smull	r1, r3, r3, r2
 8000dac:	1099      	asrs	r1, r3, #2
 8000dae:	17d3      	asrs	r3, r2, #31
 8000db0:	1ac9      	subs	r1, r1, r3
 8000db2:	460b      	mov	r3, r1
 8000db4:	009b      	lsls	r3, r3, #2
 8000db6:	440b      	add	r3, r1
 8000db8:	005b      	lsls	r3, r3, #1
 8000dba:	1ad1      	subs	r1, r2, r3
 8000dbc:	b2ca      	uxtb	r2, r1
 8000dbe:	4b24      	ldr	r3, [pc, #144]	@ (8000e50 <Taskuser+0xe8>)
 8000dc0:	701a      	strb	r2, [r3, #0]
	          game_started = 1;
 8000dc2:	4b21      	ldr	r3, [pc, #132]	@ (8000e48 <Taskuser+0xe0>)
 8000dc4:	2201      	movs	r2, #1
 8000dc6:	701a      	strb	r2, [r3, #0]
	          ssd1306_Fill(Black);
 8000dc8:	2000      	movs	r0, #0
 8000dca:	f000 faeb 	bl	80013a4 <ssd1306_Fill>
	          ssd1306_UpdateScreen();
 8000dce:	f000 fb01 	bl	80013d4 <ssd1306_UpdateScreen>
	          HAL_UART_Receive_IT(&huart3, (uint8_t*)image_buffer, 28 * 28);
 8000dd2:	f44f 7244 	mov.w	r2, #784	@ 0x310
 8000dd6:	491f      	ldr	r1, [pc, #124]	@ (8000e54 <Taskuser+0xec>)
 8000dd8:	481f      	ldr	r0, [pc, #124]	@ (8000e58 <Taskuser+0xf0>)
 8000dda:	f004 fd90 	bl	80058fe <HAL_UART_Receive_IT>
 8000dde:	e016      	b.n	8000e0e <Taskuser+0xa6>
	        }
	        else{
	        	srand(HAL_GetTick());
 8000de0:	f001 f858 	bl	8001e94 <HAL_GetTick>
 8000de4:	4603      	mov	r3, r0
 8000de6:	4618      	mov	r0, r3
 8000de8:	f00e fe3c 	bl	800fa64 <srand>
	        	random_digit = rand() % 10;
 8000dec:	f00e fe68 	bl	800fac0 <rand>
 8000df0:	4602      	mov	r2, r0
 8000df2:	4b16      	ldr	r3, [pc, #88]	@ (8000e4c <Taskuser+0xe4>)
 8000df4:	fb83 1302 	smull	r1, r3, r3, r2
 8000df8:	1099      	asrs	r1, r3, #2
 8000dfa:	17d3      	asrs	r3, r2, #31
 8000dfc:	1ac9      	subs	r1, r1, r3
 8000dfe:	460b      	mov	r3, r1
 8000e00:	009b      	lsls	r3, r3, #2
 8000e02:	440b      	add	r3, r1
 8000e04:	005b      	lsls	r3, r3, #1
 8000e06:	1ad1      	subs	r1, r2, r3
 8000e08:	b2ca      	uxtb	r2, r1
 8000e0a:	4b11      	ldr	r3, [pc, #68]	@ (8000e50 <Taskuser+0xe8>)
 8000e0c:	701a      	strb	r2, [r3, #0]
	        }
	      }

	   HAL_GPIO_WritePin(GPIOB, GPIO_PIN_14, game_started ? 1 : 0);
 8000e0e:	4b0e      	ldr	r3, [pc, #56]	@ (8000e48 <Taskuser+0xe0>)
 8000e10:	f993 3000 	ldrsb.w	r3, [r3]
 8000e14:	2b00      	cmp	r3, #0
 8000e16:	bf14      	ite	ne
 8000e18:	2301      	movne	r3, #1
 8000e1a:	2300      	moveq	r3, #0
 8000e1c:	b2db      	uxtb	r3, r3
 8000e1e:	461a      	mov	r2, r3
 8000e20:	f44f 4180 	mov.w	r1, #16384	@ 0x4000
 8000e24:	4807      	ldr	r0, [pc, #28]	@ (8000e44 <Taskuser+0xdc>)
 8000e26:	f002 f839 	bl	8002e9c <HAL_GPIO_WritePin>

	 HAL_UART_Transmit(&huart3, "1", 1, HAL_MAX_DELAY);
 8000e2a:	f04f 33ff 	mov.w	r3, #4294967295
 8000e2e:	2201      	movs	r2, #1
 8000e30:	490a      	ldr	r1, [pc, #40]	@ (8000e5c <Taskuser+0xf4>)
 8000e32:	4809      	ldr	r0, [pc, #36]	@ (8000e58 <Taskuser+0xf0>)
 8000e34:	f004 fcda 	bl	80057ec <HAL_UART_Transmit>
    osDelay(10);
 8000e38:	200a      	movs	r0, #10
 8000e3a:	f006 fbeb 	bl	8007614 <osDelay>
	  if (HAL_GPIO_ReadPin(GPIOE, GPIO_PIN_9) == 0) {
 8000e3e:	e797      	b.n	8000d70 <Taskuser+0x8>
 8000e40:	40021000 	.word	0x40021000
 8000e44:	40020400 	.word	0x40020400
 8000e48:	20028eb9 	.word	0x20028eb9
 8000e4c:	66666667 	.word	0x66666667
 8000e50:	20028eba 	.word	0x20028eba
 8000e54:	20028ba8 	.word	0x20028ba8
 8000e58:	20029060 	.word	0x20029060
 8000e5c:	08010edc 	.word	0x08010edc

08000e60 <Task02image>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_Task02image */
void Task02image(void *argument)
{
 8000e60:	b580      	push	{r7, lr}
 8000e62:	b086      	sub	sp, #24
 8000e64:	af00      	add	r7, sp, #0
 8000e66:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Task02image */
	char buffer[10];
  /* Infinite loop */
  for(;;)
  {
	   if(image_ready == 1)
 8000e68:	4b20      	ldr	r3, [pc, #128]	@ (8000eec <Task02image+0x8c>)
 8000e6a:	f993 3000 	ldrsb.w	r3, [r3]
 8000e6e:	2b01      	cmp	r3, #1
 8000e70:	d130      	bne.n	8000ed4 <Task02image+0x74>
	    {

	      MX_X_CUBE_AI_Process();
 8000e72:	f009 fa3f 	bl	800a2f4 <MX_X_CUBE_AI_Process>

	      sprintf(buffer, "%d", player_guess);
 8000e76:	4b1e      	ldr	r3, [pc, #120]	@ (8000ef0 <Task02image+0x90>)
 8000e78:	f993 3000 	ldrsb.w	r3, [r3]
 8000e7c:	461a      	mov	r2, r3
 8000e7e:	f107 030c 	add.w	r3, r7, #12
 8000e82:	491c      	ldr	r1, [pc, #112]	@ (8000ef4 <Task02image+0x94>)
 8000e84:	4618      	mov	r0, r3
 8000e86:	f00e ffdf 	bl	800fe48 <siprintf>
	      HAL_UART_Transmit(&huart3, (uint8_t *)buffer, strlen(buffer), HAL_MAX_DELAY);
 8000e8a:	f107 030c 	add.w	r3, r7, #12
 8000e8e:	4618      	mov	r0, r3
 8000e90:	f7ff f9d6 	bl	8000240 <strlen>
 8000e94:	4603      	mov	r3, r0
 8000e96:	b29a      	uxth	r2, r3
 8000e98:	f107 010c 	add.w	r1, r7, #12
 8000e9c:	f04f 33ff 	mov.w	r3, #4294967295
 8000ea0:	4815      	ldr	r0, [pc, #84]	@ (8000ef8 <Task02image+0x98>)
 8000ea2:	f004 fca3 	bl	80057ec <HAL_UART_Transmit>

//	      HAL_UART_Receive_IT(&huart3, (uint8_t*)image_buffer, 28 * 28);

	      memset(image_buffer, 0, sizeof(image_buffer));
 8000ea6:	f44f 7244 	mov.w	r2, #784	@ 0x310
 8000eaa:	2100      	movs	r1, #0
 8000eac:	4813      	ldr	r0, [pc, #76]	@ (8000efc <Task02image+0x9c>)
 8000eae:	f00f f82e 	bl	800ff0e <memset>

	      image_ready = 0;
 8000eb2:	4b0e      	ldr	r3, [pc, #56]	@ (8000eec <Task02image+0x8c>)
 8000eb4:	2200      	movs	r2, #0
 8000eb6:	701a      	strb	r2, [r3, #0]

	      HAL_GPIO_WritePin(GPIOB, GPIO_PIN_0, 0);
 8000eb8:	2200      	movs	r2, #0
 8000eba:	2101      	movs	r1, #1
 8000ebc:	4810      	ldr	r0, [pc, #64]	@ (8000f00 <Task02image+0xa0>)
 8000ebe:	f001 ffed 	bl	8002e9c <HAL_GPIO_WritePin>
	      xQueueSend(xQueue_DigitResult, &buffer, portMAX_DELAY);
 8000ec2:	4b10      	ldr	r3, [pc, #64]	@ (8000f04 <Task02image+0xa4>)
 8000ec4:	6818      	ldr	r0, [r3, #0]
 8000ec6:	f107 010c 	add.w	r1, r7, #12
 8000eca:	2300      	movs	r3, #0
 8000ecc:	f04f 32ff 	mov.w	r2, #4294967295
 8000ed0:	f006 fe10 	bl	8007af4 <xQueueGenericSend>

	    }

	  HAL_UART_Transmit(&huart3, "2", 1, HAL_MAX_DELAY);
 8000ed4:	f04f 33ff 	mov.w	r3, #4294967295
 8000ed8:	2201      	movs	r2, #1
 8000eda:	490b      	ldr	r1, [pc, #44]	@ (8000f08 <Task02image+0xa8>)
 8000edc:	4806      	ldr	r0, [pc, #24]	@ (8000ef8 <Task02image+0x98>)
 8000ede:	f004 fc85 	bl	80057ec <HAL_UART_Transmit>
    osDelay(10);
 8000ee2:	200a      	movs	r0, #10
 8000ee4:	f006 fb96 	bl	8007614 <osDelay>
	   if(image_ready == 1)
 8000ee8:	e7be      	b.n	8000e68 <Task02image+0x8>
 8000eea:	bf00      	nop
 8000eec:	20028eb8 	.word	0x20028eb8
 8000ef0:	20000000 	.word	0x20000000
 8000ef4:	08010ee0 	.word	0x08010ee0
 8000ef8:	20029060 	.word	0x20029060
 8000efc:	20028ba8 	.word	0x20028ba8
 8000f00:	40020400 	.word	0x40020400
 8000f04:	20028b9c 	.word	0x20028b9c
 8000f08:	08010ee4 	.word	0x08010ee4

08000f0c <Task03logic>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_Task03logic */
void Task03logic(void *argument)
{
 8000f0c:	b580      	push	{r7, lr}
 8000f0e:	b08e      	sub	sp, #56	@ 0x38
 8000f10:	af00      	add	r7, sp, #0
 8000f12:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Task03logic */
	char buffer[10];
	char messageDis[20];
	char messageSound[10];
	uint8_t song = 0;
 8000f14:	2300      	movs	r3, #0
 8000f16:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37
  /* Infinite loop */
  for(;;)
  {

	  if(game_started == 1){
 8000f1a:	4b60      	ldr	r3, [pc, #384]	@ (800109c <Task03logic+0x190>)
 8000f1c:	f993 3000 	ldrsb.w	r3, [r3]
 8000f20:	2b01      	cmp	r3, #1
 8000f22:	f040 80b0 	bne.w	8001086 <Task03logic+0x17a>

	   if (xQueueReceive(xQueue_DigitResult, &buffer, portMAX_DELAY) == pdTRUE) {
 8000f26:	4b5e      	ldr	r3, [pc, #376]	@ (80010a0 <Task03logic+0x194>)
 8000f28:	681b      	ldr	r3, [r3, #0]
 8000f2a:	f107 012c 	add.w	r1, r7, #44	@ 0x2c
 8000f2e:	f04f 32ff 	mov.w	r2, #4294967295
 8000f32:	4618      	mov	r0, r3
 8000f34:	f006 ff8c 	bl	8007e50 <xQueueReceive>
 8000f38:	4603      	mov	r3, r0
 8000f3a:	2b01      	cmp	r3, #1
 8000f3c:	f040 80a3 	bne.w	8001086 <Task03logic+0x17a>


		            	 uint8_t number_player = atoi(buffer);
 8000f40:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8000f44:	4618      	mov	r0, r3
 8000f46:	f00e fcd3 	bl	800f8f0 <atoi>
 8000f4a:	4603      	mov	r3, r0
 8000f4c:	f887 3036 	strb.w	r3, [r7, #54]	@ 0x36

		            	 if (random_digit  == number_player) {
 8000f50:	4b54      	ldr	r3, [pc, #336]	@ (80010a4 <Task03logic+0x198>)
 8000f52:	781b      	ldrb	r3, [r3, #0]
 8000f54:	f897 2036 	ldrb.w	r2, [r7, #54]	@ 0x36
 8000f58:	429a      	cmp	r2, r3
 8000f5a:	d13d      	bne.n	8000fd8 <Task03logic+0xcc>

		            		 srand(HAL_GetTick());
 8000f5c:	f000 ff9a 	bl	8001e94 <HAL_GetTick>
 8000f60:	4603      	mov	r3, r0
 8000f62:	4618      	mov	r0, r3
 8000f64:	f00e fd7e 	bl	800fa64 <srand>
		            		 random_digit = rand() % 10;
 8000f68:	f00e fdaa 	bl	800fac0 <rand>
 8000f6c:	4602      	mov	r2, r0
 8000f6e:	4b4e      	ldr	r3, [pc, #312]	@ (80010a8 <Task03logic+0x19c>)
 8000f70:	fb83 1302 	smull	r1, r3, r3, r2
 8000f74:	1099      	asrs	r1, r3, #2
 8000f76:	17d3      	asrs	r3, r2, #31
 8000f78:	1ac9      	subs	r1, r1, r3
 8000f7a:	460b      	mov	r3, r1
 8000f7c:	009b      	lsls	r3, r3, #2
 8000f7e:	440b      	add	r3, r1
 8000f80:	005b      	lsls	r3, r3, #1
 8000f82:	1ad1      	subs	r1, r2, r3
 8000f84:	b2ca      	uxtb	r2, r1
 8000f86:	4b47      	ldr	r3, [pc, #284]	@ (80010a4 <Task03logic+0x198>)
 8000f88:	701a      	strb	r2, [r3, #0]

//		            		 game_started = 1; //1

							 sprintf((char*)messageDis, "Correct!");
 8000f8a:	f107 0318 	add.w	r3, r7, #24
 8000f8e:	4947      	ldr	r1, [pc, #284]	@ (80010ac <Task03logic+0x1a0>)
 8000f90:	4618      	mov	r0, r3
 8000f92:	f00e ff59 	bl	800fe48 <siprintf>
							 xQueueSend(xQueue_Display, &messageDis, portMAX_DELAY);
 8000f96:	4b46      	ldr	r3, [pc, #280]	@ (80010b0 <Task03logic+0x1a4>)
 8000f98:	6818      	ldr	r0, [r3, #0]
 8000f9a:	f107 0118 	add.w	r1, r7, #24
 8000f9e:	2300      	movs	r3, #0
 8000fa0:	f04f 32ff 	mov.w	r2, #4294967295
 8000fa4:	f006 fda6 	bl	8007af4 <xQueueGenericSend>

							 song = 0;
 8000fa8:	2300      	movs	r3, #0
 8000faa:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37
							 sprintf(messageSound, "%d", song);
 8000fae:	f897 2037 	ldrb.w	r2, [r7, #55]	@ 0x37
 8000fb2:	f107 030c 	add.w	r3, r7, #12
 8000fb6:	493f      	ldr	r1, [pc, #252]	@ (80010b4 <Task03logic+0x1a8>)
 8000fb8:	4618      	mov	r0, r3
 8000fba:	f00e ff45 	bl	800fe48 <siprintf>
							 xQueueSend(xQueue_SoundCommand, &messageSound, portMAX_DELAY);
 8000fbe:	4b3e      	ldr	r3, [pc, #248]	@ (80010b8 <Task03logic+0x1ac>)
 8000fc0:	6818      	ldr	r0, [r3, #0]
 8000fc2:	f107 010c 	add.w	r1, r7, #12
 8000fc6:	2300      	movs	r3, #0
 8000fc8:	f04f 32ff 	mov.w	r2, #4294967295
 8000fcc:	f006 fd92 	bl	8007af4 <xQueueGenericSend>

							 game_started = 0; //1
 8000fd0:	4b32      	ldr	r3, [pc, #200]	@ (800109c <Task03logic+0x190>)
 8000fd2:	2200      	movs	r2, #0
 8000fd4:	701a      	strb	r2, [r3, #0]
 8000fd6:	e056      	b.n	8001086 <Task03logic+0x17a>

		            	 }
		            	 else if (random_digit < number_player) {
 8000fd8:	4b32      	ldr	r3, [pc, #200]	@ (80010a4 <Task03logic+0x198>)
 8000fda:	781b      	ldrb	r3, [r3, #0]
 8000fdc:	f897 2036 	ldrb.w	r2, [r7, #54]	@ 0x36
 8000fe0:	429a      	cmp	r2, r3
 8000fe2:	d925      	bls.n	8001030 <Task03logic+0x124>

		            		 sprintf((char*)messageDis, "%d Greater",number_player);
 8000fe4:	f897 2036 	ldrb.w	r2, [r7, #54]	@ 0x36
 8000fe8:	f107 0318 	add.w	r3, r7, #24
 8000fec:	4933      	ldr	r1, [pc, #204]	@ (80010bc <Task03logic+0x1b0>)
 8000fee:	4618      	mov	r0, r3
 8000ff0:	f00e ff2a 	bl	800fe48 <siprintf>
		            	 	 xQueueSend(xQueue_Display, &messageDis, portMAX_DELAY);
 8000ff4:	4b2e      	ldr	r3, [pc, #184]	@ (80010b0 <Task03logic+0x1a4>)
 8000ff6:	6818      	ldr	r0, [r3, #0]
 8000ff8:	f107 0118 	add.w	r1, r7, #24
 8000ffc:	2300      	movs	r3, #0
 8000ffe:	f04f 32ff 	mov.w	r2, #4294967295
 8001002:	f006 fd77 	bl	8007af4 <xQueueGenericSend>


		            	 	 song = 1;
 8001006:	2301      	movs	r3, #1
 8001008:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37
		            	 	 sprintf(messageSound, "%d", song);
 800100c:	f897 2037 	ldrb.w	r2, [r7, #55]	@ 0x37
 8001010:	f107 030c 	add.w	r3, r7, #12
 8001014:	4927      	ldr	r1, [pc, #156]	@ (80010b4 <Task03logic+0x1a8>)
 8001016:	4618      	mov	r0, r3
 8001018:	f00e ff16 	bl	800fe48 <siprintf>
		            	 	 xQueueSend(xQueue_SoundCommand, &messageSound, portMAX_DELAY);
 800101c:	4b26      	ldr	r3, [pc, #152]	@ (80010b8 <Task03logic+0x1ac>)
 800101e:	6818      	ldr	r0, [r3, #0]
 8001020:	f107 010c 	add.w	r1, r7, #12
 8001024:	2300      	movs	r3, #0
 8001026:	f04f 32ff 	mov.w	r2, #4294967295
 800102a:	f006 fd63 	bl	8007af4 <xQueueGenericSend>
 800102e:	e02a      	b.n	8001086 <Task03logic+0x17a>
		            	 }
		            	 else if (random_digit > number_player) {
 8001030:	4b1c      	ldr	r3, [pc, #112]	@ (80010a4 <Task03logic+0x198>)
 8001032:	781b      	ldrb	r3, [r3, #0]
 8001034:	f897 2036 	ldrb.w	r2, [r7, #54]	@ 0x36
 8001038:	429a      	cmp	r2, r3
 800103a:	d224      	bcs.n	8001086 <Task03logic+0x17a>

		            		 sprintf((char*)messageDis, "%d Lower",number_player);
 800103c:	f897 2036 	ldrb.w	r2, [r7, #54]	@ 0x36
 8001040:	f107 0318 	add.w	r3, r7, #24
 8001044:	491e      	ldr	r1, [pc, #120]	@ (80010c0 <Task03logic+0x1b4>)
 8001046:	4618      	mov	r0, r3
 8001048:	f00e fefe 	bl	800fe48 <siprintf>
		            	 	 xQueueSend(xQueue_Display, &messageDis, portMAX_DELAY);
 800104c:	4b18      	ldr	r3, [pc, #96]	@ (80010b0 <Task03logic+0x1a4>)
 800104e:	6818      	ldr	r0, [r3, #0]
 8001050:	f107 0118 	add.w	r1, r7, #24
 8001054:	2300      	movs	r3, #0
 8001056:	f04f 32ff 	mov.w	r2, #4294967295
 800105a:	f006 fd4b 	bl	8007af4 <xQueueGenericSend>

		            	 	 song = 2;
 800105e:	2302      	movs	r3, #2
 8001060:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37
		            	 	 sprintf(messageSound, "%d", song);
 8001064:	f897 2037 	ldrb.w	r2, [r7, #55]	@ 0x37
 8001068:	f107 030c 	add.w	r3, r7, #12
 800106c:	4911      	ldr	r1, [pc, #68]	@ (80010b4 <Task03logic+0x1a8>)
 800106e:	4618      	mov	r0, r3
 8001070:	f00e feea 	bl	800fe48 <siprintf>
		            	 	 xQueueSend(xQueue_SoundCommand, &messageSound, portMAX_DELAY);
 8001074:	4b10      	ldr	r3, [pc, #64]	@ (80010b8 <Task03logic+0x1ac>)
 8001076:	6818      	ldr	r0, [r3, #0]
 8001078:	f107 010c 	add.w	r1, r7, #12
 800107c:	2300      	movs	r3, #0
 800107e:	f04f 32ff 	mov.w	r2, #4294967295
 8001082:	f006 fd37 	bl	8007af4 <xQueueGenericSend>

	   }
	 }


	  HAL_UART_Transmit(&huart3, "3", 1, HAL_MAX_DELAY);
 8001086:	f04f 33ff 	mov.w	r3, #4294967295
 800108a:	2201      	movs	r2, #1
 800108c:	490d      	ldr	r1, [pc, #52]	@ (80010c4 <Task03logic+0x1b8>)
 800108e:	480e      	ldr	r0, [pc, #56]	@ (80010c8 <Task03logic+0x1bc>)
 8001090:	f004 fbac 	bl	80057ec <HAL_UART_Transmit>
    osDelay(10);
 8001094:	200a      	movs	r0, #10
 8001096:	f006 fabd 	bl	8007614 <osDelay>
	  if(game_started == 1){
 800109a:	e73e      	b.n	8000f1a <Task03logic+0xe>
 800109c:	20028eb9 	.word	0x20028eb9
 80010a0:	20028b9c 	.word	0x20028b9c
 80010a4:	20028eba 	.word	0x20028eba
 80010a8:	66666667 	.word	0x66666667
 80010ac:	08010ee8 	.word	0x08010ee8
 80010b0:	20028ba0 	.word	0x20028ba0
 80010b4:	08010ee0 	.word	0x08010ee0
 80010b8:	20028ba4 	.word	0x20028ba4
 80010bc:	08010ef4 	.word	0x08010ef4
 80010c0:	08010f00 	.word	0x08010f00
 80010c4:	08010f0c 	.word	0x08010f0c
 80010c8:	20029060 	.word	0x20029060

080010cc <Task04display>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_Task04display */
void Task04display(void *argument)
{
 80010cc:	b580      	push	{r7, lr}
 80010ce:	b090      	sub	sp, #64	@ 0x40
 80010d0:	af02      	add	r7, sp, #8
 80010d2:	6078      	str	r0, [r7, #4]
	char result[10];
  /* Infinite loop */
  for(;;)
  {

	  if(game_started == 1){
 80010d4:	4b2b      	ldr	r3, [pc, #172]	@ (8001184 <Task04display+0xb8>)
 80010d6:	f993 3000 	ldrsb.w	r3, [r3]
 80010da:	2b01      	cmp	r3, #1
 80010dc:	d147      	bne.n	800116e <Task04display+0xa2>
		  if (xQueueReceive(xQueue_Display, messageDis, portMAX_DELAY) == pdTRUE) {
 80010de:	4b2a      	ldr	r3, [pc, #168]	@ (8001188 <Task04display+0xbc>)
 80010e0:	681b      	ldr	r3, [r3, #0]
 80010e2:	f107 0124 	add.w	r1, r7, #36	@ 0x24
 80010e6:	f04f 32ff 	mov.w	r2, #4294967295
 80010ea:	4618      	mov	r0, r3
 80010ec:	f006 feb0 	bl	8007e50 <xQueueReceive>
 80010f0:	4603      	mov	r3, r0
 80010f2:	2b01      	cmp	r3, #1
 80010f4:	d13b      	bne.n	800116e <Task04display+0xa2>

			  	  	  	sprintf(buffer, "%d", game_started);
 80010f6:	4b23      	ldr	r3, [pc, #140]	@ (8001184 <Task04display+0xb8>)
 80010f8:	f993 3000 	ldrsb.w	r3, [r3]
 80010fc:	461a      	mov	r2, r3
 80010fe:	f107 0318 	add.w	r3, r7, #24
 8001102:	4922      	ldr	r1, [pc, #136]	@ (800118c <Task04display+0xc0>)
 8001104:	4618      	mov	r0, r3
 8001106:	f00e fe9f 	bl	800fe48 <siprintf>
			  	  	  	sprintf(result, "%d", random_digit);
 800110a:	4b21      	ldr	r3, [pc, #132]	@ (8001190 <Task04display+0xc4>)
 800110c:	781b      	ldrb	r3, [r3, #0]
 800110e:	461a      	mov	r2, r3
 8001110:	f107 030c 	add.w	r3, r7, #12
 8001114:	491d      	ldr	r1, [pc, #116]	@ (800118c <Task04display+0xc0>)
 8001116:	4618      	mov	r0, r3
 8001118:	f00e fe96 	bl	800fe48 <siprintf>

						ssd1306_Fill(Black);
 800111c:	2000      	movs	r0, #0
 800111e:	f000 f941 	bl	80013a4 <ssd1306_Fill>

						ssd1306_SetCursor(5,2);
 8001122:	2102      	movs	r1, #2
 8001124:	2005      	movs	r0, #5
 8001126:	f000 fa87 	bl	8001638 <ssd1306_SetCursor>
						ssd1306_WriteString(messageDis, Font_7x10, White);
 800112a:	4b1a      	ldr	r3, [pc, #104]	@ (8001194 <Task04display+0xc8>)
 800112c:	f107 0024 	add.w	r0, r7, #36	@ 0x24
 8001130:	2201      	movs	r2, #1
 8001132:	9200      	str	r2, [sp, #0]
 8001134:	cb0e      	ldmia	r3, {r1, r2, r3}
 8001136:	f000 fa59 	bl	80015ec <ssd1306_WriteString>

						ssd1306_SetCursor(5,15);
 800113a:	210f      	movs	r1, #15
 800113c:	2005      	movs	r0, #5
 800113e:	f000 fa7b 	bl	8001638 <ssd1306_SetCursor>
						ssd1306_WriteString(buffer, Font_7x10, White);
 8001142:	4b14      	ldr	r3, [pc, #80]	@ (8001194 <Task04display+0xc8>)
 8001144:	f107 0018 	add.w	r0, r7, #24
 8001148:	2201      	movs	r2, #1
 800114a:	9200      	str	r2, [sp, #0]
 800114c:	cb0e      	ldmia	r3, {r1, r2, r3}
 800114e:	f000 fa4d 	bl	80015ec <ssd1306_WriteString>

						ssd1306_SetCursor(5,15*2);
 8001152:	211e      	movs	r1, #30
 8001154:	2005      	movs	r0, #5
 8001156:	f000 fa6f 	bl	8001638 <ssd1306_SetCursor>
						ssd1306_WriteString(result, Font_7x10, White);
 800115a:	4b0e      	ldr	r3, [pc, #56]	@ (8001194 <Task04display+0xc8>)
 800115c:	f107 000c 	add.w	r0, r7, #12
 8001160:	2201      	movs	r2, #1
 8001162:	9200      	str	r2, [sp, #0]
 8001164:	cb0e      	ldmia	r3, {r1, r2, r3}
 8001166:	f000 fa41 	bl	80015ec <ssd1306_WriteString>

						ssd1306_UpdateScreen();
 800116a:	f000 f933 	bl	80013d4 <ssd1306_UpdateScreen>

		  }
	  }

	  HAL_UART_Transmit(&huart3, "4", 1, HAL_MAX_DELAY);
 800116e:	f04f 33ff 	mov.w	r3, #4294967295
 8001172:	2201      	movs	r2, #1
 8001174:	4908      	ldr	r1, [pc, #32]	@ (8001198 <Task04display+0xcc>)
 8001176:	4809      	ldr	r0, [pc, #36]	@ (800119c <Task04display+0xd0>)
 8001178:	f004 fb38 	bl	80057ec <HAL_UART_Transmit>
    osDelay(20);
 800117c:	2014      	movs	r0, #20
 800117e:	f006 fa49 	bl	8007614 <osDelay>
	  if(game_started == 1){
 8001182:	e7a7      	b.n	80010d4 <Task04display+0x8>
 8001184:	20028eb9 	.word	0x20028eb9
 8001188:	20028ba0 	.word	0x20028ba0
 800118c:	08010ee0 	.word	0x08010ee0
 8001190:	20028eba 	.word	0x20028eba
 8001194:	08011824 	.word	0x08011824
 8001198:	08010f10 	.word	0x08010f10
 800119c:	20029060 	.word	0x20029060

080011a0 <Task05song>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_Task05song */
void Task05song(void *argument)
{
 80011a0:	b580      	push	{r7, lr}
 80011a2:	b086      	sub	sp, #24
 80011a4:	af00      	add	r7, sp, #0
 80011a6:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Task05song */
	char messageSound[10];
  /* Infinite loop */
  for(;;)
  {
	  if(game_started == 1){
 80011a8:	4b23      	ldr	r3, [pc, #140]	@ (8001238 <Task05song+0x98>)
 80011aa:	f993 3000 	ldrsb.w	r3, [r3]
 80011ae:	2b01      	cmp	r3, #1
 80011b0:	d136      	bne.n	8001220 <Task05song+0x80>

		  if (xQueueReceive(xQueue_SoundCommand, messageSound, portMAX_DELAY) == pdTRUE) {
 80011b2:	4b22      	ldr	r3, [pc, #136]	@ (800123c <Task05song+0x9c>)
 80011b4:	681b      	ldr	r3, [r3, #0]
 80011b6:	f107 010c 	add.w	r1, r7, #12
 80011ba:	f04f 32ff 	mov.w	r2, #4294967295
 80011be:	4618      	mov	r0, r3
 80011c0:	f006 fe46 	bl	8007e50 <xQueueReceive>
 80011c4:	4603      	mov	r3, r0
 80011c6:	2b01      	cmp	r3, #1
 80011c8:	d12a      	bne.n	8001220 <Task05song+0x80>

				  uint8_t number_song = atoi(messageSound);
 80011ca:	f107 030c 	add.w	r3, r7, #12
 80011ce:	4618      	mov	r0, r3
 80011d0:	f00e fb8e 	bl	800f8f0 <atoi>
 80011d4:	4603      	mov	r3, r0
 80011d6:	75fb      	strb	r3, [r7, #23]
							 if (number_song == 1){
 80011d8:	7dfb      	ldrb	r3, [r7, #23]
 80011da:	2b01      	cmp	r3, #1
 80011dc:	d10b      	bne.n	80011f6 <Task05song+0x56>

								playsong = 1;
 80011de:	4b18      	ldr	r3, [pc, #96]	@ (8001240 <Task05song+0xa0>)
 80011e0:	2201      	movs	r2, #1
 80011e2:	601a      	str	r2, [r3, #0]
								PlayWav();
 80011e4:	f7ff fdac 	bl	8000d40 <PlayWav>
								HAL_UART_Receive_IT(&huart3, (uint8_t*)image_buffer, 28 * 28);
 80011e8:	f44f 7244 	mov.w	r2, #784	@ 0x310
 80011ec:	4915      	ldr	r1, [pc, #84]	@ (8001244 <Task05song+0xa4>)
 80011ee:	4816      	ldr	r0, [pc, #88]	@ (8001248 <Task05song+0xa8>)
 80011f0:	f004 fb85 	bl	80058fe <HAL_UART_Receive_IT>
 80011f4:	e014      	b.n	8001220 <Task05song+0x80>

							 }
							 else if (number_song == 2){
 80011f6:	7dfb      	ldrb	r3, [r7, #23]
 80011f8:	2b02      	cmp	r3, #2
 80011fa:	d10b      	bne.n	8001214 <Task05song+0x74>

								playsong = 2;
 80011fc:	4b10      	ldr	r3, [pc, #64]	@ (8001240 <Task05song+0xa0>)
 80011fe:	2202      	movs	r2, #2
 8001200:	601a      	str	r2, [r3, #0]
								PlayWav();
 8001202:	f7ff fd9d 	bl	8000d40 <PlayWav>
								HAL_UART_Receive_IT(&huart3, (uint8_t*)image_buffer, 28 * 28);
 8001206:	f44f 7244 	mov.w	r2, #784	@ 0x310
 800120a:	490e      	ldr	r1, [pc, #56]	@ (8001244 <Task05song+0xa4>)
 800120c:	480e      	ldr	r0, [pc, #56]	@ (8001248 <Task05song+0xa8>)
 800120e:	f004 fb76 	bl	80058fe <HAL_UART_Receive_IT>
 8001212:	e005      	b.n	8001220 <Task05song+0x80>
							 }
							 else {

							    HAL_UART_Receive_IT(&huart3, (uint8_t*)image_buffer, 28 * 28);
 8001214:	f44f 7244 	mov.w	r2, #784	@ 0x310
 8001218:	490a      	ldr	r1, [pc, #40]	@ (8001244 <Task05song+0xa4>)
 800121a:	480b      	ldr	r0, [pc, #44]	@ (8001248 <Task05song+0xa8>)
 800121c:	f004 fb6f 	bl	80058fe <HAL_UART_Receive_IT>
						     }

			}
	  }

	  HAL_UART_Transmit(&huart3, "5", 1, HAL_MAX_DELAY);
 8001220:	f04f 33ff 	mov.w	r3, #4294967295
 8001224:	2201      	movs	r2, #1
 8001226:	4909      	ldr	r1, [pc, #36]	@ (800124c <Task05song+0xac>)
 8001228:	4807      	ldr	r0, [pc, #28]	@ (8001248 <Task05song+0xa8>)
 800122a:	f004 fadf 	bl	80057ec <HAL_UART_Transmit>
    osDelay(10);
 800122e:	200a      	movs	r0, #10
 8001230:	f006 f9f0 	bl	8007614 <osDelay>
	  if(game_started == 1){
 8001234:	e7b8      	b.n	80011a8 <Task05song+0x8>
 8001236:	bf00      	nop
 8001238:	20028eb9 	.word	0x20028eb9
 800123c:	20028ba4 	.word	0x20028ba4
 8001240:	20028ec0 	.word	0x20028ec0
 8001244:	20028ba8 	.word	0x20028ba8
 8001248:	20029060 	.word	0x20029060
 800124c:	08010f14 	.word	0x08010f14

08001250 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001250:	b480      	push	{r7}
 8001252:	af00      	add	r7, sp, #0
  __ASM volatile ("cpsid i" : : : "memory");
 8001254:	b672      	cpsid	i
}
 8001256:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001258:	bf00      	nop
 800125a:	e7fd      	b.n	8001258 <Error_Handler+0x8>

0800125c <ssd1306_Reset>:
#include <stdlib.h>
#include <string.h>  // For memcpy

#if defined(SSD1306_USE_I2C)

void ssd1306_Reset(void) {
 800125c:	b480      	push	{r7}
 800125e:	af00      	add	r7, sp, #0
    /* for I2C - do nothing */
}
 8001260:	bf00      	nop
 8001262:	46bd      	mov	sp, r7
 8001264:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001268:	4770      	bx	lr
	...

0800126c <ssd1306_WriteCommand>:

// Send a byte to the command register
void ssd1306_WriteCommand(uint8_t byte) {
 800126c:	b580      	push	{r7, lr}
 800126e:	b086      	sub	sp, #24
 8001270:	af04      	add	r7, sp, #16
 8001272:	4603      	mov	r3, r0
 8001274:	71fb      	strb	r3, [r7, #7]
    HAL_I2C_Mem_Write(&SSD1306_I2C_PORT, SSD1306_I2C_ADDR, 0x00, 1, &byte, 1, HAL_MAX_DELAY);
 8001276:	f04f 33ff 	mov.w	r3, #4294967295
 800127a:	9302      	str	r3, [sp, #8]
 800127c:	2301      	movs	r3, #1
 800127e:	9301      	str	r3, [sp, #4]
 8001280:	1dfb      	adds	r3, r7, #7
 8001282:	9300      	str	r3, [sp, #0]
 8001284:	2301      	movs	r3, #1
 8001286:	2200      	movs	r2, #0
 8001288:	2178      	movs	r1, #120	@ 0x78
 800128a:	4803      	ldr	r0, [pc, #12]	@ (8001298 <ssd1306_WriteCommand+0x2c>)
 800128c:	f001 febc 	bl	8003008 <HAL_I2C_Mem_Write>
}
 8001290:	bf00      	nop
 8001292:	3708      	adds	r7, #8
 8001294:	46bd      	mov	sp, r7
 8001296:	bd80      	pop	{r7, pc}
 8001298:	20028fc0 	.word	0x20028fc0

0800129c <ssd1306_WriteData>:

// Send data
void ssd1306_WriteData(uint8_t* buffer, size_t buff_size) {
 800129c:	b580      	push	{r7, lr}
 800129e:	b086      	sub	sp, #24
 80012a0:	af04      	add	r7, sp, #16
 80012a2:	6078      	str	r0, [r7, #4]
 80012a4:	6039      	str	r1, [r7, #0]
    HAL_I2C_Mem_Write(&SSD1306_I2C_PORT, SSD1306_I2C_ADDR, 0x40, 1, buffer, buff_size, HAL_MAX_DELAY);
 80012a6:	683b      	ldr	r3, [r7, #0]
 80012a8:	b29b      	uxth	r3, r3
 80012aa:	f04f 32ff 	mov.w	r2, #4294967295
 80012ae:	9202      	str	r2, [sp, #8]
 80012b0:	9301      	str	r3, [sp, #4]
 80012b2:	687b      	ldr	r3, [r7, #4]
 80012b4:	9300      	str	r3, [sp, #0]
 80012b6:	2301      	movs	r3, #1
 80012b8:	2240      	movs	r2, #64	@ 0x40
 80012ba:	2178      	movs	r1, #120	@ 0x78
 80012bc:	4803      	ldr	r0, [pc, #12]	@ (80012cc <ssd1306_WriteData+0x30>)
 80012be:	f001 fea3 	bl	8003008 <HAL_I2C_Mem_Write>
}
 80012c2:	bf00      	nop
 80012c4:	3708      	adds	r7, #8
 80012c6:	46bd      	mov	sp, r7
 80012c8:	bd80      	pop	{r7, pc}
 80012ca:	bf00      	nop
 80012cc:	20028fc0 	.word	0x20028fc0

080012d0 <ssd1306_Init>:
    }
    return ret;
}

/* Initialize the oled screen */
void ssd1306_Init(void) {
 80012d0:	b580      	push	{r7, lr}
 80012d2:	af00      	add	r7, sp, #0
    // Reset OLED
    ssd1306_Reset();
 80012d4:	f7ff ffc2 	bl	800125c <ssd1306_Reset>

    // Wait for the screen to boot
    HAL_Delay(100);
 80012d8:	2064      	movs	r0, #100	@ 0x64
 80012da:	f000 fde7 	bl	8001eac <HAL_Delay>

    // Init OLED
    ssd1306_SetDisplayOn(0); //display off
 80012de:	2000      	movs	r0, #0
 80012e0:	f000 f9d6 	bl	8001690 <ssd1306_SetDisplayOn>

    ssd1306_WriteCommand(0x20); //Set Memory Addressing Mode
 80012e4:	2020      	movs	r0, #32
 80012e6:	f7ff ffc1 	bl	800126c <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0x00); // 00b,Horizontal Addressing Mode; 01b,Vertical Addressing Mode;
 80012ea:	2000      	movs	r0, #0
 80012ec:	f7ff ffbe 	bl	800126c <ssd1306_WriteCommand>
                                // 10b,Page Addressing Mode (RESET); 11b,Invalid

    ssd1306_WriteCommand(0xB0); //Set Page Start Address for Page Addressing Mode,0-7
 80012f0:	20b0      	movs	r0, #176	@ 0xb0
 80012f2:	f7ff ffbb 	bl	800126c <ssd1306_WriteCommand>

#ifdef SSD1306_MIRROR_VERT
    ssd1306_WriteCommand(0xC0); // Mirror vertically
#else
    ssd1306_WriteCommand(0xC8); //Set COM Output Scan Direction
 80012f6:	20c8      	movs	r0, #200	@ 0xc8
 80012f8:	f7ff ffb8 	bl	800126c <ssd1306_WriteCommand>
#endif

    ssd1306_WriteCommand(0x00); //---set low column address
 80012fc:	2000      	movs	r0, #0
 80012fe:	f7ff ffb5 	bl	800126c <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0x10); //---set high column address
 8001302:	2010      	movs	r0, #16
 8001304:	f7ff ffb2 	bl	800126c <ssd1306_WriteCommand>

    ssd1306_WriteCommand(0x40); //--set start line address - CHECK
 8001308:	2040      	movs	r0, #64	@ 0x40
 800130a:	f7ff ffaf 	bl	800126c <ssd1306_WriteCommand>

    ssd1306_SetContrast(0xFF);
 800130e:	20ff      	movs	r0, #255	@ 0xff
 8001310:	f000 f9aa 	bl	8001668 <ssd1306_SetContrast>

#ifdef SSD1306_MIRROR_HORIZ
    ssd1306_WriteCommand(0xA0); // Mirror horizontally
#else
    ssd1306_WriteCommand(0xA1); //--set segment re-map 0 to 127 - CHECK
 8001314:	20a1      	movs	r0, #161	@ 0xa1
 8001316:	f7ff ffa9 	bl	800126c <ssd1306_WriteCommand>
#endif

#ifdef SSD1306_INVERSE_COLOR
    ssd1306_WriteCommand(0xA7); //--set inverse color
#else
    ssd1306_WriteCommand(0xA6); //--set normal color
 800131a:	20a6      	movs	r0, #166	@ 0xa6
 800131c:	f7ff ffa6 	bl	800126c <ssd1306_WriteCommand>
// Set multiplex ratio.
#if (SSD1306_HEIGHT == 128)
    // Found in the Luma Python lib for SH1106.
    ssd1306_WriteCommand(0xFF);
#else
    ssd1306_WriteCommand(0xA8); //--set multiplex ratio(1 to 64) - CHECK
 8001320:	20a8      	movs	r0, #168	@ 0xa8
 8001322:	f7ff ffa3 	bl	800126c <ssd1306_WriteCommand>
#endif

#if (SSD1306_HEIGHT == 32)
    ssd1306_WriteCommand(0x1F); //
#elif (SSD1306_HEIGHT == 64)
    ssd1306_WriteCommand(0x3F); //
 8001326:	203f      	movs	r0, #63	@ 0x3f
 8001328:	f7ff ffa0 	bl	800126c <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0x3F); // Seems to work for 128px high displays too.
#else
#error "Only 32, 64, or 128 lines of height are supported!"
#endif

    ssd1306_WriteCommand(0xA4); //0xa4,Output follows RAM content;0xa5,Output ignores RAM content
 800132c:	20a4      	movs	r0, #164	@ 0xa4
 800132e:	f7ff ff9d 	bl	800126c <ssd1306_WriteCommand>

    ssd1306_WriteCommand(0xD3); //-set display offset - CHECK
 8001332:	20d3      	movs	r0, #211	@ 0xd3
 8001334:	f7ff ff9a 	bl	800126c <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0x00); //-not offset
 8001338:	2000      	movs	r0, #0
 800133a:	f7ff ff97 	bl	800126c <ssd1306_WriteCommand>

    ssd1306_WriteCommand(0xD5); //--set display clock divide ratio/oscillator frequency
 800133e:	20d5      	movs	r0, #213	@ 0xd5
 8001340:	f7ff ff94 	bl	800126c <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0xF0); //--set divide ratio
 8001344:	20f0      	movs	r0, #240	@ 0xf0
 8001346:	f7ff ff91 	bl	800126c <ssd1306_WriteCommand>

    ssd1306_WriteCommand(0xD9); //--set pre-charge period
 800134a:	20d9      	movs	r0, #217	@ 0xd9
 800134c:	f7ff ff8e 	bl	800126c <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0x22); //
 8001350:	2022      	movs	r0, #34	@ 0x22
 8001352:	f7ff ff8b 	bl	800126c <ssd1306_WriteCommand>

    ssd1306_WriteCommand(0xDA); //--set com pins hardware configuration - CHECK
 8001356:	20da      	movs	r0, #218	@ 0xda
 8001358:	f7ff ff88 	bl	800126c <ssd1306_WriteCommand>
#if (SSD1306_HEIGHT == 32)
    ssd1306_WriteCommand(0x02);
#elif (SSD1306_HEIGHT == 64)
    ssd1306_WriteCommand(0x12);
 800135c:	2012      	movs	r0, #18
 800135e:	f7ff ff85 	bl	800126c <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0x12);
#else
#error "Only 32, 64, or 128 lines of height are supported!"
#endif

    ssd1306_WriteCommand(0xDB); //--set vcomh
 8001362:	20db      	movs	r0, #219	@ 0xdb
 8001364:	f7ff ff82 	bl	800126c <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0x20); //0x20,0.77xVcc
 8001368:	2020      	movs	r0, #32
 800136a:	f7ff ff7f 	bl	800126c <ssd1306_WriteCommand>

    ssd1306_WriteCommand(0x8D); //--set DC-DC enable
 800136e:	208d      	movs	r0, #141	@ 0x8d
 8001370:	f7ff ff7c 	bl	800126c <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0x14); //
 8001374:	2014      	movs	r0, #20
 8001376:	f7ff ff79 	bl	800126c <ssd1306_WriteCommand>
    ssd1306_SetDisplayOn(1); //--turn on SSD1306 panel
 800137a:	2001      	movs	r0, #1
 800137c:	f000 f988 	bl	8001690 <ssd1306_SetDisplayOn>

    // Clear screen
    ssd1306_Fill(Black);
 8001380:	2000      	movs	r0, #0
 8001382:	f000 f80f 	bl	80013a4 <ssd1306_Fill>
    
    // Flush buffer to screen
    ssd1306_UpdateScreen();
 8001386:	f000 f825 	bl	80013d4 <ssd1306_UpdateScreen>
    
    // Set default values for screen object
    SSD1306.CurrentX = 0;
 800138a:	4b05      	ldr	r3, [pc, #20]	@ (80013a0 <ssd1306_Init+0xd0>)
 800138c:	2200      	movs	r2, #0
 800138e:	801a      	strh	r2, [r3, #0]
    SSD1306.CurrentY = 0;
 8001390:	4b03      	ldr	r3, [pc, #12]	@ (80013a0 <ssd1306_Init+0xd0>)
 8001392:	2200      	movs	r2, #0
 8001394:	805a      	strh	r2, [r3, #2]
    
    SSD1306.Initialized = 1;
 8001396:	4b02      	ldr	r3, [pc, #8]	@ (80013a0 <ssd1306_Init+0xd0>)
 8001398:	2201      	movs	r2, #1
 800139a:	711a      	strb	r2, [r3, #4]
}
 800139c:	bf00      	nop
 800139e:	bd80      	pop	{r7, pc}
 80013a0:	200299e4 	.word	0x200299e4

080013a4 <ssd1306_Fill>:

/* Fill the whole screen with the given color */
void ssd1306_Fill(SSD1306_COLOR color) {
 80013a4:	b580      	push	{r7, lr}
 80013a6:	b082      	sub	sp, #8
 80013a8:	af00      	add	r7, sp, #0
 80013aa:	4603      	mov	r3, r0
 80013ac:	71fb      	strb	r3, [r7, #7]
    memset(SSD1306_Buffer, (color == Black) ? 0x00 : 0xFF, sizeof(SSD1306_Buffer));
 80013ae:	79fb      	ldrb	r3, [r7, #7]
 80013b0:	2b00      	cmp	r3, #0
 80013b2:	d101      	bne.n	80013b8 <ssd1306_Fill+0x14>
 80013b4:	2300      	movs	r3, #0
 80013b6:	e000      	b.n	80013ba <ssd1306_Fill+0x16>
 80013b8:	23ff      	movs	r3, #255	@ 0xff
 80013ba:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 80013be:	4619      	mov	r1, r3
 80013c0:	4803      	ldr	r0, [pc, #12]	@ (80013d0 <ssd1306_Fill+0x2c>)
 80013c2:	f00e fda4 	bl	800ff0e <memset>
}
 80013c6:	bf00      	nop
 80013c8:	3708      	adds	r7, #8
 80013ca:	46bd      	mov	sp, r7
 80013cc:	bd80      	pop	{r7, pc}
 80013ce:	bf00      	nop
 80013d0:	200295e4 	.word	0x200295e4

080013d4 <ssd1306_UpdateScreen>:

/* Write the screenbuffer with changed to the screen */
void ssd1306_UpdateScreen(void) {
 80013d4:	b580      	push	{r7, lr}
 80013d6:	b082      	sub	sp, #8
 80013d8:	af00      	add	r7, sp, #0
    // depends on the screen height:
    //
    //  * 32px   ==  4 pages
    //  * 64px   ==  8 pages
    //  * 128px  ==  16 pages
    for(uint8_t i = 0; i < SSD1306_HEIGHT/8; i++) {
 80013da:	2300      	movs	r3, #0
 80013dc:	71fb      	strb	r3, [r7, #7]
 80013de:	e016      	b.n	800140e <ssd1306_UpdateScreen+0x3a>
        ssd1306_WriteCommand(0xB0 + i); // Set the current RAM page address.
 80013e0:	79fb      	ldrb	r3, [r7, #7]
 80013e2:	3b50      	subs	r3, #80	@ 0x50
 80013e4:	b2db      	uxtb	r3, r3
 80013e6:	4618      	mov	r0, r3
 80013e8:	f7ff ff40 	bl	800126c <ssd1306_WriteCommand>
        ssd1306_WriteCommand(0x00 + SSD1306_X_OFFSET_LOWER);
 80013ec:	2000      	movs	r0, #0
 80013ee:	f7ff ff3d 	bl	800126c <ssd1306_WriteCommand>
        ssd1306_WriteCommand(0x10 + SSD1306_X_OFFSET_UPPER);
 80013f2:	2010      	movs	r0, #16
 80013f4:	f7ff ff3a 	bl	800126c <ssd1306_WriteCommand>
        ssd1306_WriteData(&SSD1306_Buffer[SSD1306_WIDTH*i],SSD1306_WIDTH);
 80013f8:	79fb      	ldrb	r3, [r7, #7]
 80013fa:	01db      	lsls	r3, r3, #7
 80013fc:	4a08      	ldr	r2, [pc, #32]	@ (8001420 <ssd1306_UpdateScreen+0x4c>)
 80013fe:	4413      	add	r3, r2
 8001400:	2180      	movs	r1, #128	@ 0x80
 8001402:	4618      	mov	r0, r3
 8001404:	f7ff ff4a 	bl	800129c <ssd1306_WriteData>
    for(uint8_t i = 0; i < SSD1306_HEIGHT/8; i++) {
 8001408:	79fb      	ldrb	r3, [r7, #7]
 800140a:	3301      	adds	r3, #1
 800140c:	71fb      	strb	r3, [r7, #7]
 800140e:	79fb      	ldrb	r3, [r7, #7]
 8001410:	2b07      	cmp	r3, #7
 8001412:	d9e5      	bls.n	80013e0 <ssd1306_UpdateScreen+0xc>
    }
}
 8001414:	bf00      	nop
 8001416:	bf00      	nop
 8001418:	3708      	adds	r7, #8
 800141a:	46bd      	mov	sp, r7
 800141c:	bd80      	pop	{r7, pc}
 800141e:	bf00      	nop
 8001420:	200295e4 	.word	0x200295e4

08001424 <ssd1306_DrawPixel>:
 * Draw one pixel in the screenbuffer
 * X => X Coordinate
 * Y => Y Coordinate
 * color => Pixel color
 */
void ssd1306_DrawPixel(uint8_t x, uint8_t y, SSD1306_COLOR color) {
 8001424:	b480      	push	{r7}
 8001426:	b083      	sub	sp, #12
 8001428:	af00      	add	r7, sp, #0
 800142a:	4603      	mov	r3, r0
 800142c:	71fb      	strb	r3, [r7, #7]
 800142e:	460b      	mov	r3, r1
 8001430:	71bb      	strb	r3, [r7, #6]
 8001432:	4613      	mov	r3, r2
 8001434:	717b      	strb	r3, [r7, #5]
    if(x >= SSD1306_WIDTH || y >= SSD1306_HEIGHT) {
 8001436:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800143a:	2b00      	cmp	r3, #0
 800143c:	db3d      	blt.n	80014ba <ssd1306_DrawPixel+0x96>
 800143e:	79bb      	ldrb	r3, [r7, #6]
 8001440:	2b3f      	cmp	r3, #63	@ 0x3f
 8001442:	d83a      	bhi.n	80014ba <ssd1306_DrawPixel+0x96>
        // Don't write outside the buffer
        return;
    }
   
    // Draw in the right color
    if(color == White) {
 8001444:	797b      	ldrb	r3, [r7, #5]
 8001446:	2b01      	cmp	r3, #1
 8001448:	d11a      	bne.n	8001480 <ssd1306_DrawPixel+0x5c>
        SSD1306_Buffer[x + (y / 8) * SSD1306_WIDTH] |= 1 << (y % 8);
 800144a:	79fa      	ldrb	r2, [r7, #7]
 800144c:	79bb      	ldrb	r3, [r7, #6]
 800144e:	08db      	lsrs	r3, r3, #3
 8001450:	b2d8      	uxtb	r0, r3
 8001452:	4603      	mov	r3, r0
 8001454:	01db      	lsls	r3, r3, #7
 8001456:	4413      	add	r3, r2
 8001458:	4a1b      	ldr	r2, [pc, #108]	@ (80014c8 <ssd1306_DrawPixel+0xa4>)
 800145a:	5cd3      	ldrb	r3, [r2, r3]
 800145c:	b25a      	sxtb	r2, r3
 800145e:	79bb      	ldrb	r3, [r7, #6]
 8001460:	f003 0307 	and.w	r3, r3, #7
 8001464:	2101      	movs	r1, #1
 8001466:	fa01 f303 	lsl.w	r3, r1, r3
 800146a:	b25b      	sxtb	r3, r3
 800146c:	4313      	orrs	r3, r2
 800146e:	b259      	sxtb	r1, r3
 8001470:	79fa      	ldrb	r2, [r7, #7]
 8001472:	4603      	mov	r3, r0
 8001474:	01db      	lsls	r3, r3, #7
 8001476:	4413      	add	r3, r2
 8001478:	b2c9      	uxtb	r1, r1
 800147a:	4a13      	ldr	r2, [pc, #76]	@ (80014c8 <ssd1306_DrawPixel+0xa4>)
 800147c:	54d1      	strb	r1, [r2, r3]
 800147e:	e01d      	b.n	80014bc <ssd1306_DrawPixel+0x98>
    } else { 
        SSD1306_Buffer[x + (y / 8) * SSD1306_WIDTH] &= ~(1 << (y % 8));
 8001480:	79fa      	ldrb	r2, [r7, #7]
 8001482:	79bb      	ldrb	r3, [r7, #6]
 8001484:	08db      	lsrs	r3, r3, #3
 8001486:	b2d8      	uxtb	r0, r3
 8001488:	4603      	mov	r3, r0
 800148a:	01db      	lsls	r3, r3, #7
 800148c:	4413      	add	r3, r2
 800148e:	4a0e      	ldr	r2, [pc, #56]	@ (80014c8 <ssd1306_DrawPixel+0xa4>)
 8001490:	5cd3      	ldrb	r3, [r2, r3]
 8001492:	b25a      	sxtb	r2, r3
 8001494:	79bb      	ldrb	r3, [r7, #6]
 8001496:	f003 0307 	and.w	r3, r3, #7
 800149a:	2101      	movs	r1, #1
 800149c:	fa01 f303 	lsl.w	r3, r1, r3
 80014a0:	b25b      	sxtb	r3, r3
 80014a2:	43db      	mvns	r3, r3
 80014a4:	b25b      	sxtb	r3, r3
 80014a6:	4013      	ands	r3, r2
 80014a8:	b259      	sxtb	r1, r3
 80014aa:	79fa      	ldrb	r2, [r7, #7]
 80014ac:	4603      	mov	r3, r0
 80014ae:	01db      	lsls	r3, r3, #7
 80014b0:	4413      	add	r3, r2
 80014b2:	b2c9      	uxtb	r1, r1
 80014b4:	4a04      	ldr	r2, [pc, #16]	@ (80014c8 <ssd1306_DrawPixel+0xa4>)
 80014b6:	54d1      	strb	r1, [r2, r3]
 80014b8:	e000      	b.n	80014bc <ssd1306_DrawPixel+0x98>
        return;
 80014ba:	bf00      	nop
    }
}
 80014bc:	370c      	adds	r7, #12
 80014be:	46bd      	mov	sp, r7
 80014c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014c4:	4770      	bx	lr
 80014c6:	bf00      	nop
 80014c8:	200295e4 	.word	0x200295e4

080014cc <ssd1306_WriteChar>:
 * Draw 1 char to the screen buffer
 * ch       => char om weg te schrijven
 * Font     => Font waarmee we gaan schrijven
 * color    => Black or White
 */
char ssd1306_WriteChar(char ch, SSD1306_Font_t Font, SSD1306_COLOR color) {
 80014cc:	b590      	push	{r4, r7, lr}
 80014ce:	b089      	sub	sp, #36	@ 0x24
 80014d0:	af00      	add	r7, sp, #0
 80014d2:	4604      	mov	r4, r0
 80014d4:	4638      	mov	r0, r7
 80014d6:	e880 000e 	stmia.w	r0, {r1, r2, r3}
 80014da:	4623      	mov	r3, r4
 80014dc:	73fb      	strb	r3, [r7, #15]
    uint32_t i, b, j;
    
    // Check if character is valid
    if (ch < 32 || ch > 126)
 80014de:	7bfb      	ldrb	r3, [r7, #15]
 80014e0:	2b1f      	cmp	r3, #31
 80014e2:	d902      	bls.n	80014ea <ssd1306_WriteChar+0x1e>
 80014e4:	7bfb      	ldrb	r3, [r7, #15]
 80014e6:	2b7e      	cmp	r3, #126	@ 0x7e
 80014e8:	d901      	bls.n	80014ee <ssd1306_WriteChar+0x22>
        return 0;
 80014ea:	2300      	movs	r3, #0
 80014ec:	e077      	b.n	80015de <ssd1306_WriteChar+0x112>
    
    // Check remaining space on current line
    if (SSD1306_WIDTH < (SSD1306.CurrentX + Font.width) ||
 80014ee:	4b3e      	ldr	r3, [pc, #248]	@ (80015e8 <ssd1306_WriteChar+0x11c>)
 80014f0:	881b      	ldrh	r3, [r3, #0]
 80014f2:	461a      	mov	r2, r3
 80014f4:	783b      	ldrb	r3, [r7, #0]
 80014f6:	4413      	add	r3, r2
 80014f8:	2b80      	cmp	r3, #128	@ 0x80
 80014fa:	dc06      	bgt.n	800150a <ssd1306_WriteChar+0x3e>
        SSD1306_HEIGHT < (SSD1306.CurrentY + Font.height))
 80014fc:	4b3a      	ldr	r3, [pc, #232]	@ (80015e8 <ssd1306_WriteChar+0x11c>)
 80014fe:	885b      	ldrh	r3, [r3, #2]
 8001500:	461a      	mov	r2, r3
 8001502:	787b      	ldrb	r3, [r7, #1]
 8001504:	4413      	add	r3, r2
    if (SSD1306_WIDTH < (SSD1306.CurrentX + Font.width) ||
 8001506:	2b40      	cmp	r3, #64	@ 0x40
 8001508:	dd01      	ble.n	800150e <ssd1306_WriteChar+0x42>
    {
        // Not enough space on current line
        return 0;
 800150a:	2300      	movs	r3, #0
 800150c:	e067      	b.n	80015de <ssd1306_WriteChar+0x112>
    }
    
    // Use the font to write
    for(i = 0; i < Font.height; i++) {
 800150e:	2300      	movs	r3, #0
 8001510:	61fb      	str	r3, [r7, #28]
 8001512:	e04e      	b.n	80015b2 <ssd1306_WriteChar+0xe6>
        b = Font.data[(ch - 32) * Font.height + i];
 8001514:	687a      	ldr	r2, [r7, #4]
 8001516:	7bfb      	ldrb	r3, [r7, #15]
 8001518:	3b20      	subs	r3, #32
 800151a:	7879      	ldrb	r1, [r7, #1]
 800151c:	fb01 f303 	mul.w	r3, r1, r3
 8001520:	4619      	mov	r1, r3
 8001522:	69fb      	ldr	r3, [r7, #28]
 8001524:	440b      	add	r3, r1
 8001526:	005b      	lsls	r3, r3, #1
 8001528:	4413      	add	r3, r2
 800152a:	881b      	ldrh	r3, [r3, #0]
 800152c:	617b      	str	r3, [r7, #20]
        for(j = 0; j < Font.width; j++) {
 800152e:	2300      	movs	r3, #0
 8001530:	61bb      	str	r3, [r7, #24]
 8001532:	e036      	b.n	80015a2 <ssd1306_WriteChar+0xd6>
            if((b << j) & 0x8000)  {
 8001534:	697a      	ldr	r2, [r7, #20]
 8001536:	69bb      	ldr	r3, [r7, #24]
 8001538:	fa02 f303 	lsl.w	r3, r2, r3
 800153c:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8001540:	2b00      	cmp	r3, #0
 8001542:	d013      	beq.n	800156c <ssd1306_WriteChar+0xa0>
                ssd1306_DrawPixel(SSD1306.CurrentX + j, (SSD1306.CurrentY + i), (SSD1306_COLOR) color);
 8001544:	4b28      	ldr	r3, [pc, #160]	@ (80015e8 <ssd1306_WriteChar+0x11c>)
 8001546:	881b      	ldrh	r3, [r3, #0]
 8001548:	b2da      	uxtb	r2, r3
 800154a:	69bb      	ldr	r3, [r7, #24]
 800154c:	b2db      	uxtb	r3, r3
 800154e:	4413      	add	r3, r2
 8001550:	b2d8      	uxtb	r0, r3
 8001552:	4b25      	ldr	r3, [pc, #148]	@ (80015e8 <ssd1306_WriteChar+0x11c>)
 8001554:	885b      	ldrh	r3, [r3, #2]
 8001556:	b2da      	uxtb	r2, r3
 8001558:	69fb      	ldr	r3, [r7, #28]
 800155a:	b2db      	uxtb	r3, r3
 800155c:	4413      	add	r3, r2
 800155e:	b2db      	uxtb	r3, r3
 8001560:	f897 2030 	ldrb.w	r2, [r7, #48]	@ 0x30
 8001564:	4619      	mov	r1, r3
 8001566:	f7ff ff5d 	bl	8001424 <ssd1306_DrawPixel>
 800156a:	e017      	b.n	800159c <ssd1306_WriteChar+0xd0>
            } else {
                ssd1306_DrawPixel(SSD1306.CurrentX + j, (SSD1306.CurrentY + i), (SSD1306_COLOR)!color);
 800156c:	4b1e      	ldr	r3, [pc, #120]	@ (80015e8 <ssd1306_WriteChar+0x11c>)
 800156e:	881b      	ldrh	r3, [r3, #0]
 8001570:	b2da      	uxtb	r2, r3
 8001572:	69bb      	ldr	r3, [r7, #24]
 8001574:	b2db      	uxtb	r3, r3
 8001576:	4413      	add	r3, r2
 8001578:	b2d8      	uxtb	r0, r3
 800157a:	4b1b      	ldr	r3, [pc, #108]	@ (80015e8 <ssd1306_WriteChar+0x11c>)
 800157c:	885b      	ldrh	r3, [r3, #2]
 800157e:	b2da      	uxtb	r2, r3
 8001580:	69fb      	ldr	r3, [r7, #28]
 8001582:	b2db      	uxtb	r3, r3
 8001584:	4413      	add	r3, r2
 8001586:	b2d9      	uxtb	r1, r3
 8001588:	f897 3030 	ldrb.w	r3, [r7, #48]	@ 0x30
 800158c:	2b00      	cmp	r3, #0
 800158e:	bf0c      	ite	eq
 8001590:	2301      	moveq	r3, #1
 8001592:	2300      	movne	r3, #0
 8001594:	b2db      	uxtb	r3, r3
 8001596:	461a      	mov	r2, r3
 8001598:	f7ff ff44 	bl	8001424 <ssd1306_DrawPixel>
        for(j = 0; j < Font.width; j++) {
 800159c:	69bb      	ldr	r3, [r7, #24]
 800159e:	3301      	adds	r3, #1
 80015a0:	61bb      	str	r3, [r7, #24]
 80015a2:	783b      	ldrb	r3, [r7, #0]
 80015a4:	461a      	mov	r2, r3
 80015a6:	69bb      	ldr	r3, [r7, #24]
 80015a8:	4293      	cmp	r3, r2
 80015aa:	d3c3      	bcc.n	8001534 <ssd1306_WriteChar+0x68>
    for(i = 0; i < Font.height; i++) {
 80015ac:	69fb      	ldr	r3, [r7, #28]
 80015ae:	3301      	adds	r3, #1
 80015b0:	61fb      	str	r3, [r7, #28]
 80015b2:	787b      	ldrb	r3, [r7, #1]
 80015b4:	461a      	mov	r2, r3
 80015b6:	69fb      	ldr	r3, [r7, #28]
 80015b8:	4293      	cmp	r3, r2
 80015ba:	d3ab      	bcc.n	8001514 <ssd1306_WriteChar+0x48>
            }
        }
    }
    
    // The current space is now taken
    SSD1306.CurrentX += Font.char_width ? Font.char_width[ch - 32] : Font.width;
 80015bc:	4b0a      	ldr	r3, [pc, #40]	@ (80015e8 <ssd1306_WriteChar+0x11c>)
 80015be:	881b      	ldrh	r3, [r3, #0]
 80015c0:	68ba      	ldr	r2, [r7, #8]
 80015c2:	2a00      	cmp	r2, #0
 80015c4:	d005      	beq.n	80015d2 <ssd1306_WriteChar+0x106>
 80015c6:	68b9      	ldr	r1, [r7, #8]
 80015c8:	7bfa      	ldrb	r2, [r7, #15]
 80015ca:	3a20      	subs	r2, #32
 80015cc:	440a      	add	r2, r1
 80015ce:	7812      	ldrb	r2, [r2, #0]
 80015d0:	e000      	b.n	80015d4 <ssd1306_WriteChar+0x108>
 80015d2:	783a      	ldrb	r2, [r7, #0]
 80015d4:	4413      	add	r3, r2
 80015d6:	b29a      	uxth	r2, r3
 80015d8:	4b03      	ldr	r3, [pc, #12]	@ (80015e8 <ssd1306_WriteChar+0x11c>)
 80015da:	801a      	strh	r2, [r3, #0]
    
    // Return written char for validation
    return ch;
 80015dc:	7bfb      	ldrb	r3, [r7, #15]
}
 80015de:	4618      	mov	r0, r3
 80015e0:	3724      	adds	r7, #36	@ 0x24
 80015e2:	46bd      	mov	sp, r7
 80015e4:	bd90      	pop	{r4, r7, pc}
 80015e6:	bf00      	nop
 80015e8:	200299e4 	.word	0x200299e4

080015ec <ssd1306_WriteString>:

/* Write full string to screenbuffer */
char ssd1306_WriteString(char* str, SSD1306_Font_t Font, SSD1306_COLOR color) {
 80015ec:	b580      	push	{r7, lr}
 80015ee:	b086      	sub	sp, #24
 80015f0:	af02      	add	r7, sp, #8
 80015f2:	60f8      	str	r0, [r7, #12]
 80015f4:	4638      	mov	r0, r7
 80015f6:	e880 000e 	stmia.w	r0, {r1, r2, r3}
    while (*str) {
 80015fa:	e013      	b.n	8001624 <ssd1306_WriteString+0x38>
        if (ssd1306_WriteChar(*str, Font, color) != *str) {
 80015fc:	68fb      	ldr	r3, [r7, #12]
 80015fe:	7818      	ldrb	r0, [r3, #0]
 8001600:	7e3b      	ldrb	r3, [r7, #24]
 8001602:	9300      	str	r3, [sp, #0]
 8001604:	463b      	mov	r3, r7
 8001606:	cb0e      	ldmia	r3, {r1, r2, r3}
 8001608:	f7ff ff60 	bl	80014cc <ssd1306_WriteChar>
 800160c:	4603      	mov	r3, r0
 800160e:	461a      	mov	r2, r3
 8001610:	68fb      	ldr	r3, [r7, #12]
 8001612:	781b      	ldrb	r3, [r3, #0]
 8001614:	429a      	cmp	r2, r3
 8001616:	d002      	beq.n	800161e <ssd1306_WriteString+0x32>
            // Char could not be written
            return *str;
 8001618:	68fb      	ldr	r3, [r7, #12]
 800161a:	781b      	ldrb	r3, [r3, #0]
 800161c:	e008      	b.n	8001630 <ssd1306_WriteString+0x44>
        }
        str++;
 800161e:	68fb      	ldr	r3, [r7, #12]
 8001620:	3301      	adds	r3, #1
 8001622:	60fb      	str	r3, [r7, #12]
    while (*str) {
 8001624:	68fb      	ldr	r3, [r7, #12]
 8001626:	781b      	ldrb	r3, [r3, #0]
 8001628:	2b00      	cmp	r3, #0
 800162a:	d1e7      	bne.n	80015fc <ssd1306_WriteString+0x10>
    }
    
    // Everything ok
    return *str;
 800162c:	68fb      	ldr	r3, [r7, #12]
 800162e:	781b      	ldrb	r3, [r3, #0]
}
 8001630:	4618      	mov	r0, r3
 8001632:	3710      	adds	r7, #16
 8001634:	46bd      	mov	sp, r7
 8001636:	bd80      	pop	{r7, pc}

08001638 <ssd1306_SetCursor>:

/* Position the cursor */
void ssd1306_SetCursor(uint8_t x, uint8_t y) {
 8001638:	b480      	push	{r7}
 800163a:	b083      	sub	sp, #12
 800163c:	af00      	add	r7, sp, #0
 800163e:	4603      	mov	r3, r0
 8001640:	460a      	mov	r2, r1
 8001642:	71fb      	strb	r3, [r7, #7]
 8001644:	4613      	mov	r3, r2
 8001646:	71bb      	strb	r3, [r7, #6]
    SSD1306.CurrentX = x;
 8001648:	79fb      	ldrb	r3, [r7, #7]
 800164a:	b29a      	uxth	r2, r3
 800164c:	4b05      	ldr	r3, [pc, #20]	@ (8001664 <ssd1306_SetCursor+0x2c>)
 800164e:	801a      	strh	r2, [r3, #0]
    SSD1306.CurrentY = y;
 8001650:	79bb      	ldrb	r3, [r7, #6]
 8001652:	b29a      	uxth	r2, r3
 8001654:	4b03      	ldr	r3, [pc, #12]	@ (8001664 <ssd1306_SetCursor+0x2c>)
 8001656:	805a      	strh	r2, [r3, #2]
}
 8001658:	bf00      	nop
 800165a:	370c      	adds	r7, #12
 800165c:	46bd      	mov	sp, r7
 800165e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001662:	4770      	bx	lr
 8001664:	200299e4 	.word	0x200299e4

08001668 <ssd1306_SetContrast>:
        }
    }
    return;
}

void ssd1306_SetContrast(const uint8_t value) {
 8001668:	b580      	push	{r7, lr}
 800166a:	b084      	sub	sp, #16
 800166c:	af00      	add	r7, sp, #0
 800166e:	4603      	mov	r3, r0
 8001670:	71fb      	strb	r3, [r7, #7]
    const uint8_t kSetContrastControlRegister = 0x81;
 8001672:	2381      	movs	r3, #129	@ 0x81
 8001674:	73fb      	strb	r3, [r7, #15]
    ssd1306_WriteCommand(kSetContrastControlRegister);
 8001676:	7bfb      	ldrb	r3, [r7, #15]
 8001678:	4618      	mov	r0, r3
 800167a:	f7ff fdf7 	bl	800126c <ssd1306_WriteCommand>
    ssd1306_WriteCommand(value);
 800167e:	79fb      	ldrb	r3, [r7, #7]
 8001680:	4618      	mov	r0, r3
 8001682:	f7ff fdf3 	bl	800126c <ssd1306_WriteCommand>
}
 8001686:	bf00      	nop
 8001688:	3710      	adds	r7, #16
 800168a:	46bd      	mov	sp, r7
 800168c:	bd80      	pop	{r7, pc}
	...

08001690 <ssd1306_SetDisplayOn>:

void ssd1306_SetDisplayOn(const uint8_t on) {
 8001690:	b580      	push	{r7, lr}
 8001692:	b084      	sub	sp, #16
 8001694:	af00      	add	r7, sp, #0
 8001696:	4603      	mov	r3, r0
 8001698:	71fb      	strb	r3, [r7, #7]
    uint8_t value;
    if (on) {
 800169a:	79fb      	ldrb	r3, [r7, #7]
 800169c:	2b00      	cmp	r3, #0
 800169e:	d005      	beq.n	80016ac <ssd1306_SetDisplayOn+0x1c>
        value = 0xAF;   // Display on
 80016a0:	23af      	movs	r3, #175	@ 0xaf
 80016a2:	73fb      	strb	r3, [r7, #15]
        SSD1306.DisplayOn = 1;
 80016a4:	4b08      	ldr	r3, [pc, #32]	@ (80016c8 <ssd1306_SetDisplayOn+0x38>)
 80016a6:	2201      	movs	r2, #1
 80016a8:	715a      	strb	r2, [r3, #5]
 80016aa:	e004      	b.n	80016b6 <ssd1306_SetDisplayOn+0x26>
    } else {
        value = 0xAE;   // Display off
 80016ac:	23ae      	movs	r3, #174	@ 0xae
 80016ae:	73fb      	strb	r3, [r7, #15]
        SSD1306.DisplayOn = 0;
 80016b0:	4b05      	ldr	r3, [pc, #20]	@ (80016c8 <ssd1306_SetDisplayOn+0x38>)
 80016b2:	2200      	movs	r2, #0
 80016b4:	715a      	strb	r2, [r3, #5]
    }
    ssd1306_WriteCommand(value);
 80016b6:	7bfb      	ldrb	r3, [r7, #15]
 80016b8:	4618      	mov	r0, r3
 80016ba:	f7ff fdd7 	bl	800126c <ssd1306_WriteCommand>
}
 80016be:	bf00      	nop
 80016c0:	3710      	adds	r7, #16
 80016c2:	46bd      	mov	sp, r7
 80016c4:	bd80      	pop	{r7, pc}
 80016c6:	bf00      	nop
 80016c8:	200299e4 	.word	0x200299e4

080016cc <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80016cc:	b580      	push	{r7, lr}
 80016ce:	b082      	sub	sp, #8
 80016d0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_PWR_CLK_ENABLE();
 80016d2:	4b11      	ldr	r3, [pc, #68]	@ (8001718 <HAL_MspInit+0x4c>)
 80016d4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80016d6:	4a10      	ldr	r2, [pc, #64]	@ (8001718 <HAL_MspInit+0x4c>)
 80016d8:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80016dc:	6413      	str	r3, [r2, #64]	@ 0x40
 80016de:	4b0e      	ldr	r3, [pc, #56]	@ (8001718 <HAL_MspInit+0x4c>)
 80016e0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80016e2:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80016e6:	607b      	str	r3, [r7, #4]
 80016e8:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80016ea:	4b0b      	ldr	r3, [pc, #44]	@ (8001718 <HAL_MspInit+0x4c>)
 80016ec:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80016ee:	4a0a      	ldr	r2, [pc, #40]	@ (8001718 <HAL_MspInit+0x4c>)
 80016f0:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 80016f4:	6453      	str	r3, [r2, #68]	@ 0x44
 80016f6:	4b08      	ldr	r3, [pc, #32]	@ (8001718 <HAL_MspInit+0x4c>)
 80016f8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80016fa:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80016fe:	603b      	str	r3, [r7, #0]
 8001700:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 8001702:	2200      	movs	r2, #0
 8001704:	210f      	movs	r1, #15
 8001706:	f06f 0001 	mvn.w	r0, #1
 800170a:	f000 fcce 	bl	80020aa <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800170e:	bf00      	nop
 8001710:	3708      	adds	r7, #8
 8001712:	46bd      	mov	sp, r7
 8001714:	bd80      	pop	{r7, pc}
 8001716:	bf00      	nop
 8001718:	40023800 	.word	0x40023800

0800171c <HAL_DAC_MspInit>:
* This function configures the hardware resources used in this example
* @param hdac: DAC handle pointer
* @retval None
*/
void HAL_DAC_MspInit(DAC_HandleTypeDef* hdac)
{
 800171c:	b580      	push	{r7, lr}
 800171e:	b08a      	sub	sp, #40	@ 0x28
 8001720:	af00      	add	r7, sp, #0
 8001722:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001724:	f107 0314 	add.w	r3, r7, #20
 8001728:	2200      	movs	r2, #0
 800172a:	601a      	str	r2, [r3, #0]
 800172c:	605a      	str	r2, [r3, #4]
 800172e:	609a      	str	r2, [r3, #8]
 8001730:	60da      	str	r2, [r3, #12]
 8001732:	611a      	str	r2, [r3, #16]
  if(hdac->Instance==DAC)
 8001734:	687b      	ldr	r3, [r7, #4]
 8001736:	681b      	ldr	r3, [r3, #0]
 8001738:	4a15      	ldr	r2, [pc, #84]	@ (8001790 <HAL_DAC_MspInit+0x74>)
 800173a:	4293      	cmp	r3, r2
 800173c:	d123      	bne.n	8001786 <HAL_DAC_MspInit+0x6a>
  {
  /* USER CODE BEGIN DAC_MspInit 0 */

  /* USER CODE END DAC_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_DAC_CLK_ENABLE();
 800173e:	4b15      	ldr	r3, [pc, #84]	@ (8001794 <HAL_DAC_MspInit+0x78>)
 8001740:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001742:	4a14      	ldr	r2, [pc, #80]	@ (8001794 <HAL_DAC_MspInit+0x78>)
 8001744:	f043 5300 	orr.w	r3, r3, #536870912	@ 0x20000000
 8001748:	6413      	str	r3, [r2, #64]	@ 0x40
 800174a:	4b12      	ldr	r3, [pc, #72]	@ (8001794 <HAL_DAC_MspInit+0x78>)
 800174c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800174e:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8001752:	613b      	str	r3, [r7, #16]
 8001754:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001756:	4b0f      	ldr	r3, [pc, #60]	@ (8001794 <HAL_DAC_MspInit+0x78>)
 8001758:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800175a:	4a0e      	ldr	r2, [pc, #56]	@ (8001794 <HAL_DAC_MspInit+0x78>)
 800175c:	f043 0301 	orr.w	r3, r3, #1
 8001760:	6313      	str	r3, [r2, #48]	@ 0x30
 8001762:	4b0c      	ldr	r3, [pc, #48]	@ (8001794 <HAL_DAC_MspInit+0x78>)
 8001764:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001766:	f003 0301 	and.w	r3, r3, #1
 800176a:	60fb      	str	r3, [r7, #12]
 800176c:	68fb      	ldr	r3, [r7, #12]
    /**DAC GPIO Configuration
    PA4     ------> DAC_OUT1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_4;
 800176e:	2310      	movs	r3, #16
 8001770:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8001772:	2303      	movs	r3, #3
 8001774:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001776:	2300      	movs	r3, #0
 8001778:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800177a:	f107 0314 	add.w	r3, r7, #20
 800177e:	4619      	mov	r1, r3
 8001780:	4805      	ldr	r0, [pc, #20]	@ (8001798 <HAL_DAC_MspInit+0x7c>)
 8001782:	f001 f9c7 	bl	8002b14 <HAL_GPIO_Init>

  /* USER CODE END DAC_MspInit 1 */

  }

}
 8001786:	bf00      	nop
 8001788:	3728      	adds	r7, #40	@ 0x28
 800178a:	46bd      	mov	sp, r7
 800178c:	bd80      	pop	{r7, pc}
 800178e:	bf00      	nop
 8001790:	40007400 	.word	0x40007400
 8001794:	40023800 	.word	0x40023800
 8001798:	40020000 	.word	0x40020000

0800179c <HAL_ETH_MspInit>:
* This function configures the hardware resources used in this example
* @param heth: ETH handle pointer
* @retval None
*/
void HAL_ETH_MspInit(ETH_HandleTypeDef* heth)
{
 800179c:	b580      	push	{r7, lr}
 800179e:	b08e      	sub	sp, #56	@ 0x38
 80017a0:	af00      	add	r7, sp, #0
 80017a2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80017a4:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80017a8:	2200      	movs	r2, #0
 80017aa:	601a      	str	r2, [r3, #0]
 80017ac:	605a      	str	r2, [r3, #4]
 80017ae:	609a      	str	r2, [r3, #8]
 80017b0:	60da      	str	r2, [r3, #12]
 80017b2:	611a      	str	r2, [r3, #16]
  if(heth->Instance==ETH)
 80017b4:	687b      	ldr	r3, [r7, #4]
 80017b6:	681b      	ldr	r3, [r3, #0]
 80017b8:	4a4e      	ldr	r2, [pc, #312]	@ (80018f4 <HAL_ETH_MspInit+0x158>)
 80017ba:	4293      	cmp	r3, r2
 80017bc:	f040 8096 	bne.w	80018ec <HAL_ETH_MspInit+0x150>
  {
  /* USER CODE BEGIN ETH_MspInit 0 */

  /* USER CODE END ETH_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ETH_CLK_ENABLE();
 80017c0:	4b4d      	ldr	r3, [pc, #308]	@ (80018f8 <HAL_ETH_MspInit+0x15c>)
 80017c2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80017c4:	4a4c      	ldr	r2, [pc, #304]	@ (80018f8 <HAL_ETH_MspInit+0x15c>)
 80017c6:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 80017ca:	6313      	str	r3, [r2, #48]	@ 0x30
 80017cc:	4b4a      	ldr	r3, [pc, #296]	@ (80018f8 <HAL_ETH_MspInit+0x15c>)
 80017ce:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80017d0:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80017d4:	623b      	str	r3, [r7, #32]
 80017d6:	6a3b      	ldr	r3, [r7, #32]
 80017d8:	4b47      	ldr	r3, [pc, #284]	@ (80018f8 <HAL_ETH_MspInit+0x15c>)
 80017da:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80017dc:	4a46      	ldr	r2, [pc, #280]	@ (80018f8 <HAL_ETH_MspInit+0x15c>)
 80017de:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 80017e2:	6313      	str	r3, [r2, #48]	@ 0x30
 80017e4:	4b44      	ldr	r3, [pc, #272]	@ (80018f8 <HAL_ETH_MspInit+0x15c>)
 80017e6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80017e8:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 80017ec:	61fb      	str	r3, [r7, #28]
 80017ee:	69fb      	ldr	r3, [r7, #28]
 80017f0:	4b41      	ldr	r3, [pc, #260]	@ (80018f8 <HAL_ETH_MspInit+0x15c>)
 80017f2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80017f4:	4a40      	ldr	r2, [pc, #256]	@ (80018f8 <HAL_ETH_MspInit+0x15c>)
 80017f6:	f043 6300 	orr.w	r3, r3, #134217728	@ 0x8000000
 80017fa:	6313      	str	r3, [r2, #48]	@ 0x30
 80017fc:	4b3e      	ldr	r3, [pc, #248]	@ (80018f8 <HAL_ETH_MspInit+0x15c>)
 80017fe:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001800:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8001804:	61bb      	str	r3, [r7, #24]
 8001806:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8001808:	4b3b      	ldr	r3, [pc, #236]	@ (80018f8 <HAL_ETH_MspInit+0x15c>)
 800180a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800180c:	4a3a      	ldr	r2, [pc, #232]	@ (80018f8 <HAL_ETH_MspInit+0x15c>)
 800180e:	f043 0304 	orr.w	r3, r3, #4
 8001812:	6313      	str	r3, [r2, #48]	@ 0x30
 8001814:	4b38      	ldr	r3, [pc, #224]	@ (80018f8 <HAL_ETH_MspInit+0x15c>)
 8001816:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001818:	f003 0304 	and.w	r3, r3, #4
 800181c:	617b      	str	r3, [r7, #20]
 800181e:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001820:	4b35      	ldr	r3, [pc, #212]	@ (80018f8 <HAL_ETH_MspInit+0x15c>)
 8001822:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001824:	4a34      	ldr	r2, [pc, #208]	@ (80018f8 <HAL_ETH_MspInit+0x15c>)
 8001826:	f043 0301 	orr.w	r3, r3, #1
 800182a:	6313      	str	r3, [r2, #48]	@ 0x30
 800182c:	4b32      	ldr	r3, [pc, #200]	@ (80018f8 <HAL_ETH_MspInit+0x15c>)
 800182e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001830:	f003 0301 	and.w	r3, r3, #1
 8001834:	613b      	str	r3, [r7, #16]
 8001836:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001838:	4b2f      	ldr	r3, [pc, #188]	@ (80018f8 <HAL_ETH_MspInit+0x15c>)
 800183a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800183c:	4a2e      	ldr	r2, [pc, #184]	@ (80018f8 <HAL_ETH_MspInit+0x15c>)
 800183e:	f043 0302 	orr.w	r3, r3, #2
 8001842:	6313      	str	r3, [r2, #48]	@ 0x30
 8001844:	4b2c      	ldr	r3, [pc, #176]	@ (80018f8 <HAL_ETH_MspInit+0x15c>)
 8001846:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001848:	f003 0302 	and.w	r3, r3, #2
 800184c:	60fb      	str	r3, [r7, #12]
 800184e:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOG_CLK_ENABLE();
 8001850:	4b29      	ldr	r3, [pc, #164]	@ (80018f8 <HAL_ETH_MspInit+0x15c>)
 8001852:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001854:	4a28      	ldr	r2, [pc, #160]	@ (80018f8 <HAL_ETH_MspInit+0x15c>)
 8001856:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800185a:	6313      	str	r3, [r2, #48]	@ 0x30
 800185c:	4b26      	ldr	r3, [pc, #152]	@ (80018f8 <HAL_ETH_MspInit+0x15c>)
 800185e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001860:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8001864:	60bb      	str	r3, [r7, #8]
 8001866:	68bb      	ldr	r3, [r7, #8]
    PC5     ------> ETH_RXD1
    PB13     ------> ETH_TXD1
    PG11     ------> ETH_TX_EN
    PG13     ------> ETH_TXD0
    */
    GPIO_InitStruct.Pin = RMII_MDC_Pin|RMII_RXD0_Pin|RMII_RXD1_Pin;
 8001868:	2332      	movs	r3, #50	@ 0x32
 800186a:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800186c:	2302      	movs	r3, #2
 800186e:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001870:	2300      	movs	r3, #0
 8001872:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001874:	2303      	movs	r3, #3
 8001876:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8001878:	230b      	movs	r3, #11
 800187a:	637b      	str	r3, [r7, #52]	@ 0x34
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800187c:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8001880:	4619      	mov	r1, r3
 8001882:	481e      	ldr	r0, [pc, #120]	@ (80018fc <HAL_ETH_MspInit+0x160>)
 8001884:	f001 f946 	bl	8002b14 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = RMII_REF_CLK_Pin|RMII_MDIO_Pin|RMII_CRS_DV_Pin;
 8001888:	2386      	movs	r3, #134	@ 0x86
 800188a:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800188c:	2302      	movs	r3, #2
 800188e:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001890:	2300      	movs	r3, #0
 8001892:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001894:	2303      	movs	r3, #3
 8001896:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8001898:	230b      	movs	r3, #11
 800189a:	637b      	str	r3, [r7, #52]	@ 0x34
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800189c:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80018a0:	4619      	mov	r1, r3
 80018a2:	4817      	ldr	r0, [pc, #92]	@ (8001900 <HAL_ETH_MspInit+0x164>)
 80018a4:	f001 f936 	bl	8002b14 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = RMII_TXD1_Pin;
 80018a8:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 80018ac:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80018ae:	2302      	movs	r3, #2
 80018b0:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80018b2:	2300      	movs	r3, #0
 80018b4:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80018b6:	2303      	movs	r3, #3
 80018b8:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 80018ba:	230b      	movs	r3, #11
 80018bc:	637b      	str	r3, [r7, #52]	@ 0x34
    HAL_GPIO_Init(RMII_TXD1_GPIO_Port, &GPIO_InitStruct);
 80018be:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80018c2:	4619      	mov	r1, r3
 80018c4:	480f      	ldr	r0, [pc, #60]	@ (8001904 <HAL_ETH_MspInit+0x168>)
 80018c6:	f001 f925 	bl	8002b14 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = RMII_TX_EN_Pin|RMII_TXD0_Pin;
 80018ca:	f44f 5320 	mov.w	r3, #10240	@ 0x2800
 80018ce:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80018d0:	2302      	movs	r3, #2
 80018d2:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80018d4:	2300      	movs	r3, #0
 80018d6:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80018d8:	2303      	movs	r3, #3
 80018da:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 80018dc:	230b      	movs	r3, #11
 80018de:	637b      	str	r3, [r7, #52]	@ 0x34
    HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 80018e0:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80018e4:	4619      	mov	r1, r3
 80018e6:	4808      	ldr	r0, [pc, #32]	@ (8001908 <HAL_ETH_MspInit+0x16c>)
 80018e8:	f001 f914 	bl	8002b14 <HAL_GPIO_Init>

  /* USER CODE END ETH_MspInit 1 */

  }

}
 80018ec:	bf00      	nop
 80018ee:	3738      	adds	r7, #56	@ 0x38
 80018f0:	46bd      	mov	sp, r7
 80018f2:	bd80      	pop	{r7, pc}
 80018f4:	40028000 	.word	0x40028000
 80018f8:	40023800 	.word	0x40023800
 80018fc:	40020800 	.word	0x40020800
 8001900:	40020000 	.word	0x40020000
 8001904:	40020400 	.word	0x40020400
 8001908:	40021800 	.word	0x40021800

0800190c <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 800190c:	b580      	push	{r7, lr}
 800190e:	b0ae      	sub	sp, #184	@ 0xb8
 8001910:	af00      	add	r7, sp, #0
 8001912:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001914:	f107 03a4 	add.w	r3, r7, #164	@ 0xa4
 8001918:	2200      	movs	r2, #0
 800191a:	601a      	str	r2, [r3, #0]
 800191c:	605a      	str	r2, [r3, #4]
 800191e:	609a      	str	r2, [r3, #8]
 8001920:	60da      	str	r2, [r3, #12]
 8001922:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8001924:	f107 0314 	add.w	r3, r7, #20
 8001928:	2290      	movs	r2, #144	@ 0x90
 800192a:	2100      	movs	r1, #0
 800192c:	4618      	mov	r0, r3
 800192e:	f00e faee 	bl	800ff0e <memset>
  if(hi2c->Instance==I2C2)
 8001932:	687b      	ldr	r3, [r7, #4]
 8001934:	681b      	ldr	r3, [r3, #0]
 8001936:	4a21      	ldr	r2, [pc, #132]	@ (80019bc <HAL_I2C_MspInit+0xb0>)
 8001938:	4293      	cmp	r3, r2
 800193a:	d13b      	bne.n	80019b4 <HAL_I2C_MspInit+0xa8>

  /* USER CODE END I2C2_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_I2C2;
 800193c:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8001940:	617b      	str	r3, [r7, #20]
    PeriphClkInitStruct.I2c2ClockSelection = RCC_I2C2CLKSOURCE_PCLK1;
 8001942:	2300      	movs	r3, #0
 8001944:	67fb      	str	r3, [r7, #124]	@ 0x7c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8001946:	f107 0314 	add.w	r3, r7, #20
 800194a:	4618      	mov	r0, r3
 800194c:	f002 fde4 	bl	8004518 <HAL_RCCEx_PeriphCLKConfig>
 8001950:	4603      	mov	r3, r0
 8001952:	2b00      	cmp	r3, #0
 8001954:	d001      	beq.n	800195a <HAL_I2C_MspInit+0x4e>
    {
      Error_Handler();
 8001956:	f7ff fc7b 	bl	8001250 <Error_Handler>
    }

    __HAL_RCC_GPIOF_CLK_ENABLE();
 800195a:	4b19      	ldr	r3, [pc, #100]	@ (80019c0 <HAL_I2C_MspInit+0xb4>)
 800195c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800195e:	4a18      	ldr	r2, [pc, #96]	@ (80019c0 <HAL_I2C_MspInit+0xb4>)
 8001960:	f043 0320 	orr.w	r3, r3, #32
 8001964:	6313      	str	r3, [r2, #48]	@ 0x30
 8001966:	4b16      	ldr	r3, [pc, #88]	@ (80019c0 <HAL_I2C_MspInit+0xb4>)
 8001968:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800196a:	f003 0320 	and.w	r3, r3, #32
 800196e:	613b      	str	r3, [r7, #16]
 8001970:	693b      	ldr	r3, [r7, #16]
    /**I2C2 GPIO Configuration
    PF0     ------> I2C2_SDA
    PF1     ------> I2C2_SCL
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 8001972:	2303      	movs	r3, #3
 8001974:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8001978:	2312      	movs	r3, #18
 800197a:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 800197e:	2301      	movs	r3, #1
 8001980:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001984:	2303      	movs	r3, #3
 8001986:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C2;
 800198a:	2304      	movs	r3, #4
 800198c:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
    HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 8001990:	f107 03a4 	add.w	r3, r7, #164	@ 0xa4
 8001994:	4619      	mov	r1, r3
 8001996:	480b      	ldr	r0, [pc, #44]	@ (80019c4 <HAL_I2C_MspInit+0xb8>)
 8001998:	f001 f8bc 	bl	8002b14 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C2_CLK_ENABLE();
 800199c:	4b08      	ldr	r3, [pc, #32]	@ (80019c0 <HAL_I2C_MspInit+0xb4>)
 800199e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80019a0:	4a07      	ldr	r2, [pc, #28]	@ (80019c0 <HAL_I2C_MspInit+0xb4>)
 80019a2:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 80019a6:	6413      	str	r3, [r2, #64]	@ 0x40
 80019a8:	4b05      	ldr	r3, [pc, #20]	@ (80019c0 <HAL_I2C_MspInit+0xb4>)
 80019aa:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80019ac:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80019b0:	60fb      	str	r3, [r7, #12]
 80019b2:	68fb      	ldr	r3, [r7, #12]

  /* USER CODE END I2C2_MspInit 1 */

  }

}
 80019b4:	bf00      	nop
 80019b6:	37b8      	adds	r7, #184	@ 0xb8
 80019b8:	46bd      	mov	sp, r7
 80019ba:	bd80      	pop	{r7, pc}
 80019bc:	40005800 	.word	0x40005800
 80019c0:	40023800 	.word	0x40023800
 80019c4:	40021400 	.word	0x40021400

080019c8 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 80019c8:	b580      	push	{r7, lr}
 80019ca:	b084      	sub	sp, #16
 80019cc:	af00      	add	r7, sp, #0
 80019ce:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM4)
 80019d0:	687b      	ldr	r3, [r7, #4]
 80019d2:	681b      	ldr	r3, [r3, #0]
 80019d4:	4a0d      	ldr	r2, [pc, #52]	@ (8001a0c <HAL_TIM_Base_MspInit+0x44>)
 80019d6:	4293      	cmp	r3, r2
 80019d8:	d113      	bne.n	8001a02 <HAL_TIM_Base_MspInit+0x3a>
  {
  /* USER CODE BEGIN TIM4_MspInit 0 */

  /* USER CODE END TIM4_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM4_CLK_ENABLE();
 80019da:	4b0d      	ldr	r3, [pc, #52]	@ (8001a10 <HAL_TIM_Base_MspInit+0x48>)
 80019dc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80019de:	4a0c      	ldr	r2, [pc, #48]	@ (8001a10 <HAL_TIM_Base_MspInit+0x48>)
 80019e0:	f043 0304 	orr.w	r3, r3, #4
 80019e4:	6413      	str	r3, [r2, #64]	@ 0x40
 80019e6:	4b0a      	ldr	r3, [pc, #40]	@ (8001a10 <HAL_TIM_Base_MspInit+0x48>)
 80019e8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80019ea:	f003 0304 	and.w	r3, r3, #4
 80019ee:	60fb      	str	r3, [r7, #12]
 80019f0:	68fb      	ldr	r3, [r7, #12]
    /* TIM4 interrupt Init */
    HAL_NVIC_SetPriority(TIM4_IRQn, 15, 0);
 80019f2:	2200      	movs	r2, #0
 80019f4:	210f      	movs	r1, #15
 80019f6:	201e      	movs	r0, #30
 80019f8:	f000 fb57 	bl	80020aa <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM4_IRQn);
 80019fc:	201e      	movs	r0, #30
 80019fe:	f000 fb70 	bl	80020e2 <HAL_NVIC_EnableIRQ>

  /* USER CODE END TIM4_MspInit 1 */

  }

}
 8001a02:	bf00      	nop
 8001a04:	3710      	adds	r7, #16
 8001a06:	46bd      	mov	sp, r7
 8001a08:	bd80      	pop	{r7, pc}
 8001a0a:	bf00      	nop
 8001a0c:	40000800 	.word	0x40000800
 8001a10:	40023800 	.word	0x40023800

08001a14 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8001a14:	b580      	push	{r7, lr}
 8001a16:	b0ae      	sub	sp, #184	@ 0xb8
 8001a18:	af00      	add	r7, sp, #0
 8001a1a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001a1c:	f107 03a4 	add.w	r3, r7, #164	@ 0xa4
 8001a20:	2200      	movs	r2, #0
 8001a22:	601a      	str	r2, [r3, #0]
 8001a24:	605a      	str	r2, [r3, #4]
 8001a26:	609a      	str	r2, [r3, #8]
 8001a28:	60da      	str	r2, [r3, #12]
 8001a2a:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8001a2c:	f107 0314 	add.w	r3, r7, #20
 8001a30:	2290      	movs	r2, #144	@ 0x90
 8001a32:	2100      	movs	r1, #0
 8001a34:	4618      	mov	r0, r3
 8001a36:	f00e fa6a 	bl	800ff0e <memset>
  if(huart->Instance==USART3)
 8001a3a:	687b      	ldr	r3, [r7, #4]
 8001a3c:	681b      	ldr	r3, [r3, #0]
 8001a3e:	4a26      	ldr	r2, [pc, #152]	@ (8001ad8 <HAL_UART_MspInit+0xc4>)
 8001a40:	4293      	cmp	r3, r2
 8001a42:	d144      	bne.n	8001ace <HAL_UART_MspInit+0xba>

  /* USER CODE END USART3_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART3;
 8001a44:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8001a48:	617b      	str	r3, [r7, #20]
    PeriphClkInitStruct.Usart3ClockSelection = RCC_USART3CLKSOURCE_PCLK1;
 8001a4a:	2300      	movs	r3, #0
 8001a4c:	663b      	str	r3, [r7, #96]	@ 0x60
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8001a4e:	f107 0314 	add.w	r3, r7, #20
 8001a52:	4618      	mov	r0, r3
 8001a54:	f002 fd60 	bl	8004518 <HAL_RCCEx_PeriphCLKConfig>
 8001a58:	4603      	mov	r3, r0
 8001a5a:	2b00      	cmp	r3, #0
 8001a5c:	d001      	beq.n	8001a62 <HAL_UART_MspInit+0x4e>
    {
      Error_Handler();
 8001a5e:	f7ff fbf7 	bl	8001250 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_USART3_CLK_ENABLE();
 8001a62:	4b1e      	ldr	r3, [pc, #120]	@ (8001adc <HAL_UART_MspInit+0xc8>)
 8001a64:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001a66:	4a1d      	ldr	r2, [pc, #116]	@ (8001adc <HAL_UART_MspInit+0xc8>)
 8001a68:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8001a6c:	6413      	str	r3, [r2, #64]	@ 0x40
 8001a6e:	4b1b      	ldr	r3, [pc, #108]	@ (8001adc <HAL_UART_MspInit+0xc8>)
 8001a70:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001a72:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8001a76:	613b      	str	r3, [r7, #16]
 8001a78:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOD_CLK_ENABLE();
 8001a7a:	4b18      	ldr	r3, [pc, #96]	@ (8001adc <HAL_UART_MspInit+0xc8>)
 8001a7c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001a7e:	4a17      	ldr	r2, [pc, #92]	@ (8001adc <HAL_UART_MspInit+0xc8>)
 8001a80:	f043 0308 	orr.w	r3, r3, #8
 8001a84:	6313      	str	r3, [r2, #48]	@ 0x30
 8001a86:	4b15      	ldr	r3, [pc, #84]	@ (8001adc <HAL_UART_MspInit+0xc8>)
 8001a88:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001a8a:	f003 0308 	and.w	r3, r3, #8
 8001a8e:	60fb      	str	r3, [r7, #12]
 8001a90:	68fb      	ldr	r3, [r7, #12]
    /**USART3 GPIO Configuration
    PD8     ------> USART3_TX
    PD9     ------> USART3_RX
    */
    GPIO_InitStruct.Pin = STLK_RX_Pin|STLK_TX_Pin;
 8001a92:	f44f 7340 	mov.w	r3, #768	@ 0x300
 8001a96:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001a9a:	2302      	movs	r3, #2
 8001a9c:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001aa0:	2300      	movs	r3, #0
 8001aa2:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001aa6:	2303      	movs	r3, #3
 8001aa8:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 8001aac:	2307      	movs	r3, #7
 8001aae:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8001ab2:	f107 03a4 	add.w	r3, r7, #164	@ 0xa4
 8001ab6:	4619      	mov	r1, r3
 8001ab8:	4809      	ldr	r0, [pc, #36]	@ (8001ae0 <HAL_UART_MspInit+0xcc>)
 8001aba:	f001 f82b 	bl	8002b14 <HAL_GPIO_Init>

    /* USART3 interrupt Init */
    HAL_NVIC_SetPriority(USART3_IRQn, 14, 0);
 8001abe:	2200      	movs	r2, #0
 8001ac0:	210e      	movs	r1, #14
 8001ac2:	2027      	movs	r0, #39	@ 0x27
 8001ac4:	f000 faf1 	bl	80020aa <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART3_IRQn);
 8001ac8:	2027      	movs	r0, #39	@ 0x27
 8001aca:	f000 fb0a 	bl	80020e2 <HAL_NVIC_EnableIRQ>

  /* USER CODE END USART3_MspInit 1 */

  }

}
 8001ace:	bf00      	nop
 8001ad0:	37b8      	adds	r7, #184	@ 0xb8
 8001ad2:	46bd      	mov	sp, r7
 8001ad4:	bd80      	pop	{r7, pc}
 8001ad6:	bf00      	nop
 8001ad8:	40004800 	.word	0x40004800
 8001adc:	40023800 	.word	0x40023800
 8001ae0:	40020c00 	.word	0x40020c00

08001ae4 <HAL_PCD_MspInit>:
* This function configures the hardware resources used in this example
* @param hpcd: PCD handle pointer
* @retval None
*/
void HAL_PCD_MspInit(PCD_HandleTypeDef* hpcd)
{
 8001ae4:	b580      	push	{r7, lr}
 8001ae6:	b0ae      	sub	sp, #184	@ 0xb8
 8001ae8:	af00      	add	r7, sp, #0
 8001aea:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001aec:	f107 03a4 	add.w	r3, r7, #164	@ 0xa4
 8001af0:	2200      	movs	r2, #0
 8001af2:	601a      	str	r2, [r3, #0]
 8001af4:	605a      	str	r2, [r3, #4]
 8001af6:	609a      	str	r2, [r3, #8]
 8001af8:	60da      	str	r2, [r3, #12]
 8001afa:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8001afc:	f107 0314 	add.w	r3, r7, #20
 8001b00:	2290      	movs	r2, #144	@ 0x90
 8001b02:	2100      	movs	r1, #0
 8001b04:	4618      	mov	r0, r3
 8001b06:	f00e fa02 	bl	800ff0e <memset>
  if(hpcd->Instance==USB_OTG_FS)
 8001b0a:	687b      	ldr	r3, [r7, #4]
 8001b0c:	681b      	ldr	r3, [r3, #0]
 8001b0e:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8001b12:	d159      	bne.n	8001bc8 <HAL_PCD_MspInit+0xe4>

  /* USER CODE END USB_OTG_FS_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_CLK48;
 8001b14:	f44f 1300 	mov.w	r3, #2097152	@ 0x200000
 8001b18:	617b      	str	r3, [r7, #20]
    PeriphClkInitStruct.Clk48ClockSelection = RCC_CLK48SOURCE_PLL;
 8001b1a:	2300      	movs	r3, #0
 8001b1c:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8001b20:	f107 0314 	add.w	r3, r7, #20
 8001b24:	4618      	mov	r0, r3
 8001b26:	f002 fcf7 	bl	8004518 <HAL_RCCEx_PeriphCLKConfig>
 8001b2a:	4603      	mov	r3, r0
 8001b2c:	2b00      	cmp	r3, #0
 8001b2e:	d001      	beq.n	8001b34 <HAL_PCD_MspInit+0x50>
    {
      Error_Handler();
 8001b30:	f7ff fb8e 	bl	8001250 <Error_Handler>
    }

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001b34:	4b26      	ldr	r3, [pc, #152]	@ (8001bd0 <HAL_PCD_MspInit+0xec>)
 8001b36:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001b38:	4a25      	ldr	r2, [pc, #148]	@ (8001bd0 <HAL_PCD_MspInit+0xec>)
 8001b3a:	f043 0301 	orr.w	r3, r3, #1
 8001b3e:	6313      	str	r3, [r2, #48]	@ 0x30
 8001b40:	4b23      	ldr	r3, [pc, #140]	@ (8001bd0 <HAL_PCD_MspInit+0xec>)
 8001b42:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001b44:	f003 0301 	and.w	r3, r3, #1
 8001b48:	613b      	str	r3, [r7, #16]
 8001b4a:	693b      	ldr	r3, [r7, #16]
    PA9     ------> USB_OTG_FS_VBUS
    PA10     ------> USB_OTG_FS_ID
    PA11     ------> USB_OTG_FS_DM
    PA12     ------> USB_OTG_FS_DP
    */
    GPIO_InitStruct.Pin = USB_SOF_Pin|USB_ID_Pin|USB_DM_Pin|USB_DP_Pin;
 8001b4c:	f44f 53e8 	mov.w	r3, #7424	@ 0x1d00
 8001b50:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001b54:	2302      	movs	r3, #2
 8001b56:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001b5a:	2300      	movs	r3, #0
 8001b5c:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001b60:	2303      	movs	r3, #3
 8001b62:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 8001b66:	230a      	movs	r3, #10
 8001b68:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001b6c:	f107 03a4 	add.w	r3, r7, #164	@ 0xa4
 8001b70:	4619      	mov	r1, r3
 8001b72:	4818      	ldr	r0, [pc, #96]	@ (8001bd4 <HAL_PCD_MspInit+0xf0>)
 8001b74:	f000 ffce 	bl	8002b14 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = USB_VBUS_Pin;
 8001b78:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8001b7c:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001b80:	2300      	movs	r3, #0
 8001b82:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001b86:	2300      	movs	r3, #0
 8001b88:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
    HAL_GPIO_Init(USB_VBUS_GPIO_Port, &GPIO_InitStruct);
 8001b8c:	f107 03a4 	add.w	r3, r7, #164	@ 0xa4
 8001b90:	4619      	mov	r1, r3
 8001b92:	4810      	ldr	r0, [pc, #64]	@ (8001bd4 <HAL_PCD_MspInit+0xf0>)
 8001b94:	f000 ffbe 	bl	8002b14 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 8001b98:	4b0d      	ldr	r3, [pc, #52]	@ (8001bd0 <HAL_PCD_MspInit+0xec>)
 8001b9a:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8001b9c:	4a0c      	ldr	r2, [pc, #48]	@ (8001bd0 <HAL_PCD_MspInit+0xec>)
 8001b9e:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8001ba2:	6353      	str	r3, [r2, #52]	@ 0x34
 8001ba4:	4b0a      	ldr	r3, [pc, #40]	@ (8001bd0 <HAL_PCD_MspInit+0xec>)
 8001ba6:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8001ba8:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8001bac:	60fb      	str	r3, [r7, #12]
 8001bae:	68fb      	ldr	r3, [r7, #12]
 8001bb0:	4b07      	ldr	r3, [pc, #28]	@ (8001bd0 <HAL_PCD_MspInit+0xec>)
 8001bb2:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001bb4:	4a06      	ldr	r2, [pc, #24]	@ (8001bd0 <HAL_PCD_MspInit+0xec>)
 8001bb6:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8001bba:	6453      	str	r3, [r2, #68]	@ 0x44
 8001bbc:	4b04      	ldr	r3, [pc, #16]	@ (8001bd0 <HAL_PCD_MspInit+0xec>)
 8001bbe:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001bc0:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8001bc4:	60bb      	str	r3, [r7, #8]
 8001bc6:	68bb      	ldr	r3, [r7, #8]

  /* USER CODE END USB_OTG_FS_MspInit 1 */

  }

}
 8001bc8:	bf00      	nop
 8001bca:	37b8      	adds	r7, #184	@ 0xb8
 8001bcc:	46bd      	mov	sp, r7
 8001bce:	bd80      	pop	{r7, pc}
 8001bd0:	40023800 	.word	0x40023800
 8001bd4:	40020000 	.word	0x40020000

08001bd8 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001bd8:	b480      	push	{r7}
 8001bda:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8001bdc:	bf00      	nop
 8001bde:	e7fd      	b.n	8001bdc <NMI_Handler+0x4>

08001be0 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001be0:	b480      	push	{r7}
 8001be2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001be4:	bf00      	nop
 8001be6:	e7fd      	b.n	8001be4 <HardFault_Handler+0x4>

08001be8 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001be8:	b480      	push	{r7}
 8001bea:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001bec:	bf00      	nop
 8001bee:	e7fd      	b.n	8001bec <MemManage_Handler+0x4>

08001bf0 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001bf0:	b480      	push	{r7}
 8001bf2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001bf4:	bf00      	nop
 8001bf6:	e7fd      	b.n	8001bf4 <BusFault_Handler+0x4>

08001bf8 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001bf8:	b480      	push	{r7}
 8001bfa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001bfc:	bf00      	nop
 8001bfe:	e7fd      	b.n	8001bfc <UsageFault_Handler+0x4>

08001c00 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001c00:	b480      	push	{r7}
 8001c02:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001c04:	bf00      	nop
 8001c06:	46bd      	mov	sp, r7
 8001c08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c0c:	4770      	bx	lr

08001c0e <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001c0e:	b580      	push	{r7, lr}
 8001c10:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001c12:	f000 f92b 	bl	8001e6c <HAL_IncTick>
#if (INCLUDE_xTaskGetSchedulerState == 1 )
  if (xTaskGetSchedulerState() != taskSCHEDULER_NOT_STARTED)
 8001c16:	f007 f9bb 	bl	8008f90 <xTaskGetSchedulerState>
 8001c1a:	4603      	mov	r3, r0
 8001c1c:	2b01      	cmp	r3, #1
 8001c1e:	d001      	beq.n	8001c24 <SysTick_Handler+0x16>
  {
#endif /* INCLUDE_xTaskGetSchedulerState */
  xPortSysTickHandler();
 8001c20:	f007 ffaa 	bl	8009b78 <xPortSysTickHandler>
  }
#endif /* INCLUDE_xTaskGetSchedulerState */
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001c24:	bf00      	nop
 8001c26:	bd80      	pop	{r7, pc}

08001c28 <TIM4_IRQHandler>:

/**
  * @brief This function handles TIM4 global interrupt.
  */
void TIM4_IRQHandler(void)
{
 8001c28:	b580      	push	{r7, lr}
 8001c2a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM4_IRQn 0 */
	if (__HAL_TIM_GET_FLAG(&htim4, TIM_FLAG_UPDATE)) {
 8001c2c:	4b2b      	ldr	r3, [pc, #172]	@ (8001cdc <TIM4_IRQHandler+0xb4>)
 8001c2e:	681b      	ldr	r3, [r3, #0]
 8001c30:	691b      	ldr	r3, [r3, #16]
 8001c32:	f003 0301 	and.w	r3, r3, #1
 8001c36:	2b01      	cmp	r3, #1
 8001c38:	d14b      	bne.n	8001cd2 <TIM4_IRQHandler+0xaa>
			        __HAL_TIM_CLEAR_FLAG(&htim4, TIM_FLAG_UPDATE);
 8001c3a:	4b28      	ldr	r3, [pc, #160]	@ (8001cdc <TIM4_IRQHandler+0xb4>)
 8001c3c:	681b      	ldr	r3, [r3, #0]
 8001c3e:	f06f 0201 	mvn.w	r2, #1
 8001c42:	611a      	str	r2, [r3, #16]

			       if (playsong == 1){
 8001c44:	4b26      	ldr	r3, [pc, #152]	@ (8001ce0 <TIM4_IRQHandler+0xb8>)
 8001c46:	681b      	ldr	r3, [r3, #0]
 8001c48:	2b01      	cmp	r3, #1
 8001c4a:	d11f      	bne.n	8001c8c <TIM4_IRQHandler+0x64>
			    	   if (wav_index < songA_wav_len) {
 8001c4c:	4b25      	ldr	r3, [pc, #148]	@ (8001ce4 <TIM4_IRQHandler+0xbc>)
 8001c4e:	681a      	ldr	r2, [r3, #0]
 8001c50:	4b25      	ldr	r3, [pc, #148]	@ (8001ce8 <TIM4_IRQHandler+0xc0>)
 8001c52:	681b      	ldr	r3, [r3, #0]
 8001c54:	429a      	cmp	r2, r3
 8001c56:	d20e      	bcs.n	8001c76 <TIM4_IRQHandler+0x4e>
			    	   		            HAL_DAC_SetValue(&hdac, DAC_CHANNEL_1, DAC_ALIGN_12B_R, songA_speech_wav[wav_index]);
 8001c58:	4b22      	ldr	r3, [pc, #136]	@ (8001ce4 <TIM4_IRQHandler+0xbc>)
 8001c5a:	681b      	ldr	r3, [r3, #0]
 8001c5c:	4a23      	ldr	r2, [pc, #140]	@ (8001cec <TIM4_IRQHandler+0xc4>)
 8001c5e:	5cd3      	ldrb	r3, [r2, r3]
 8001c60:	2200      	movs	r2, #0
 8001c62:	2100      	movs	r1, #0
 8001c64:	4822      	ldr	r0, [pc, #136]	@ (8001cf0 <TIM4_IRQHandler+0xc8>)
 8001c66:	f000 faf1 	bl	800224c <HAL_DAC_SetValue>
			    	   		            wav_index++;
 8001c6a:	4b1e      	ldr	r3, [pc, #120]	@ (8001ce4 <TIM4_IRQHandler+0xbc>)
 8001c6c:	681b      	ldr	r3, [r3, #0]
 8001c6e:	3301      	adds	r3, #1
 8001c70:	4a1c      	ldr	r2, [pc, #112]	@ (8001ce4 <TIM4_IRQHandler+0xbc>)
 8001c72:	6013      	str	r3, [r2, #0]
 8001c74:	e02d      	b.n	8001cd2 <TIM4_IRQHandler+0xaa>
			    	   }
			    	   else {

			    	   		            HAL_TIM_Base_Stop_IT(&htim4);
 8001c76:	4819      	ldr	r0, [pc, #100]	@ (8001cdc <TIM4_IRQHandler+0xb4>)
 8001c78:	f003 f946 	bl	8004f08 <HAL_TIM_Base_Stop_IT>
			    	   		            HAL_DAC_Stop(&hdac, DAC_CHANNEL_1);
 8001c7c:	2100      	movs	r1, #0
 8001c7e:	481c      	ldr	r0, [pc, #112]	@ (8001cf0 <TIM4_IRQHandler+0xc8>)
 8001c80:	f000 fac2 	bl	8002208 <HAL_DAC_Stop>
			    	   		            wav_index = 0;
 8001c84:	4b17      	ldr	r3, [pc, #92]	@ (8001ce4 <TIM4_IRQHandler+0xbc>)
 8001c86:	2200      	movs	r2, #0
 8001c88:	601a      	str	r2, [r3, #0]
 8001c8a:	e022      	b.n	8001cd2 <TIM4_IRQHandler+0xaa>
			    	   }
			       }
			       else if (playsong == 2){
 8001c8c:	4b14      	ldr	r3, [pc, #80]	@ (8001ce0 <TIM4_IRQHandler+0xb8>)
 8001c8e:	681b      	ldr	r3, [r3, #0]
 8001c90:	2b02      	cmp	r3, #2
 8001c92:	d11e      	bne.n	8001cd2 <TIM4_IRQHandler+0xaa>
			    	   if (wav_index < songB_wav_len) {
 8001c94:	4b13      	ldr	r3, [pc, #76]	@ (8001ce4 <TIM4_IRQHandler+0xbc>)
 8001c96:	681a      	ldr	r2, [r3, #0]
 8001c98:	4b16      	ldr	r3, [pc, #88]	@ (8001cf4 <TIM4_IRQHandler+0xcc>)
 8001c9a:	681b      	ldr	r3, [r3, #0]
 8001c9c:	429a      	cmp	r2, r3
 8001c9e:	d20e      	bcs.n	8001cbe <TIM4_IRQHandler+0x96>
			    	   		     HAL_DAC_SetValue(&hdac, DAC_CHANNEL_1, DAC_ALIGN_12B_R, songB_speech_wav[wav_index]);
 8001ca0:	4b10      	ldr	r3, [pc, #64]	@ (8001ce4 <TIM4_IRQHandler+0xbc>)
 8001ca2:	681b      	ldr	r3, [r3, #0]
 8001ca4:	4a14      	ldr	r2, [pc, #80]	@ (8001cf8 <TIM4_IRQHandler+0xd0>)
 8001ca6:	5cd3      	ldrb	r3, [r2, r3]
 8001ca8:	2200      	movs	r2, #0
 8001caa:	2100      	movs	r1, #0
 8001cac:	4810      	ldr	r0, [pc, #64]	@ (8001cf0 <TIM4_IRQHandler+0xc8>)
 8001cae:	f000 facd 	bl	800224c <HAL_DAC_SetValue>
			    	   		     wav_index++;
 8001cb2:	4b0c      	ldr	r3, [pc, #48]	@ (8001ce4 <TIM4_IRQHandler+0xbc>)
 8001cb4:	681b      	ldr	r3, [r3, #0]
 8001cb6:	3301      	adds	r3, #1
 8001cb8:	4a0a      	ldr	r2, [pc, #40]	@ (8001ce4 <TIM4_IRQHandler+0xbc>)
 8001cba:	6013      	str	r3, [r2, #0]
 8001cbc:	e009      	b.n	8001cd2 <TIM4_IRQHandler+0xaa>
			    	   }
			    	   else {

			    	   		            HAL_TIM_Base_Stop_IT(&htim4);
 8001cbe:	4807      	ldr	r0, [pc, #28]	@ (8001cdc <TIM4_IRQHandler+0xb4>)
 8001cc0:	f003 f922 	bl	8004f08 <HAL_TIM_Base_Stop_IT>
			    	   		            HAL_DAC_Stop(&hdac, DAC_CHANNEL_1);
 8001cc4:	2100      	movs	r1, #0
 8001cc6:	480a      	ldr	r0, [pc, #40]	@ (8001cf0 <TIM4_IRQHandler+0xc8>)
 8001cc8:	f000 fa9e 	bl	8002208 <HAL_DAC_Stop>
			    	   		            wav_index = 0;
 8001ccc:	4b05      	ldr	r3, [pc, #20]	@ (8001ce4 <TIM4_IRQHandler+0xbc>)
 8001cce:	2200      	movs	r2, #0
 8001cd0:	601a      	str	r2, [r3, #0]
	      }



  /* USER CODE END TIM4_IRQn 0 */
  HAL_TIM_IRQHandler(&htim4);
 8001cd2:	4802      	ldr	r0, [pc, #8]	@ (8001cdc <TIM4_IRQHandler+0xb4>)
 8001cd4:	f003 f947 	bl	8004f66 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM4_IRQn 1 */

  /* USER CODE END TIM4_IRQn 1 */
}
 8001cd8:	bf00      	nop
 8001cda:	bd80      	pop	{r7, pc}
 8001cdc:	20029014 	.word	0x20029014
 8001ce0:	20028ec0 	.word	0x20028ec0
 8001ce4:	20028ebc 	.word	0x20028ebc
 8001ce8:	20013e54 	.word	0x20013e54
 8001cec:	20000004 	.word	0x20000004
 8001cf0:	20028efc 	.word	0x20028efc
 8001cf4:	20027fa8 	.word	0x20027fa8
 8001cf8:	20013e58 	.word	0x20013e58

08001cfc <USART3_IRQHandler>:

/**
  * @brief This function handles USART3 global interrupt.
  */
void USART3_IRQHandler(void)
{
 8001cfc:	b580      	push	{r7, lr}
 8001cfe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART3_IRQn 0 */

  /* USER CODE END USART3_IRQn 0 */
  HAL_UART_IRQHandler(&huart3);
 8001d00:	4802      	ldr	r0, [pc, #8]	@ (8001d0c <USART3_IRQHandler+0x10>)
 8001d02:	f003 fe41 	bl	8005988 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART3_IRQn 1 */

  /* USER CODE END USART3_IRQn 1 */
}
 8001d06:	bf00      	nop
 8001d08:	bd80      	pop	{r7, pc}
 8001d0a:	bf00      	nop
 8001d0c:	20029060 	.word	0x20029060

08001d10 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8001d10:	b580      	push	{r7, lr}
 8001d12:	b086      	sub	sp, #24
 8001d14:	af00      	add	r7, sp, #0
 8001d16:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001d18:	4a14      	ldr	r2, [pc, #80]	@ (8001d6c <_sbrk+0x5c>)
 8001d1a:	4b15      	ldr	r3, [pc, #84]	@ (8001d70 <_sbrk+0x60>)
 8001d1c:	1ad3      	subs	r3, r2, r3
 8001d1e:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8001d20:	697b      	ldr	r3, [r7, #20]
 8001d22:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001d24:	4b13      	ldr	r3, [pc, #76]	@ (8001d74 <_sbrk+0x64>)
 8001d26:	681b      	ldr	r3, [r3, #0]
 8001d28:	2b00      	cmp	r3, #0
 8001d2a:	d102      	bne.n	8001d32 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8001d2c:	4b11      	ldr	r3, [pc, #68]	@ (8001d74 <_sbrk+0x64>)
 8001d2e:	4a12      	ldr	r2, [pc, #72]	@ (8001d78 <_sbrk+0x68>)
 8001d30:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8001d32:	4b10      	ldr	r3, [pc, #64]	@ (8001d74 <_sbrk+0x64>)
 8001d34:	681a      	ldr	r2, [r3, #0]
 8001d36:	687b      	ldr	r3, [r7, #4]
 8001d38:	4413      	add	r3, r2
 8001d3a:	693a      	ldr	r2, [r7, #16]
 8001d3c:	429a      	cmp	r2, r3
 8001d3e:	d207      	bcs.n	8001d50 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8001d40:	f00e f944 	bl	800ffcc <__errno>
 8001d44:	4603      	mov	r3, r0
 8001d46:	220c      	movs	r2, #12
 8001d48:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8001d4a:	f04f 33ff 	mov.w	r3, #4294967295
 8001d4e:	e009      	b.n	8001d64 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8001d50:	4b08      	ldr	r3, [pc, #32]	@ (8001d74 <_sbrk+0x64>)
 8001d52:	681b      	ldr	r3, [r3, #0]
 8001d54:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8001d56:	4b07      	ldr	r3, [pc, #28]	@ (8001d74 <_sbrk+0x64>)
 8001d58:	681a      	ldr	r2, [r3, #0]
 8001d5a:	687b      	ldr	r3, [r7, #4]
 8001d5c:	4413      	add	r3, r2
 8001d5e:	4a05      	ldr	r2, [pc, #20]	@ (8001d74 <_sbrk+0x64>)
 8001d60:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8001d62:	68fb      	ldr	r3, [r7, #12]
}
 8001d64:	4618      	mov	r0, r3
 8001d66:	3718      	adds	r7, #24
 8001d68:	46bd      	mov	sp, r7
 8001d6a:	bd80      	pop	{r7, pc}
 8001d6c:	20080000 	.word	0x20080000
 8001d70:	00000800 	.word	0x00000800
 8001d74:	200299ec 	.word	0x200299ec
 8001d78:	20030330 	.word	0x20030330

08001d7c <SystemInit>:
  *         SystemFrequency variable.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8001d7c:	b480      	push	{r7}
 8001d7e:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8001d80:	4b06      	ldr	r3, [pc, #24]	@ (8001d9c <SystemInit+0x20>)
 8001d82:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8001d86:	4a05      	ldr	r2, [pc, #20]	@ (8001d9c <SystemInit+0x20>)
 8001d88:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8001d8c:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001d90:	bf00      	nop
 8001d92:	46bd      	mov	sp, r7
 8001d94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d98:	4770      	bx	lr
 8001d9a:	bf00      	nop
 8001d9c:	e000ed00 	.word	0xe000ed00

08001da0 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 8001da0:	f8df d034 	ldr.w	sp, [pc, #52]	@ 8001dd8 <LoopFillZerobss+0xe>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 8001da4:	f7ff ffea 	bl	8001d7c <SystemInit>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8001da8:	480c      	ldr	r0, [pc, #48]	@ (8001ddc <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8001daa:	490d      	ldr	r1, [pc, #52]	@ (8001de0 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8001dac:	4a0d      	ldr	r2, [pc, #52]	@ (8001de4 <LoopFillZerobss+0x1a>)
  movs r3, #0
 8001dae:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001db0:	e002      	b.n	8001db8 <LoopCopyDataInit>

08001db2 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001db2:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001db4:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001db6:	3304      	adds	r3, #4

08001db8 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001db8:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001dba:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001dbc:	d3f9      	bcc.n	8001db2 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001dbe:	4a0a      	ldr	r2, [pc, #40]	@ (8001de8 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8001dc0:	4c0a      	ldr	r4, [pc, #40]	@ (8001dec <LoopFillZerobss+0x22>)
  movs r3, #0
 8001dc2:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001dc4:	e001      	b.n	8001dca <LoopFillZerobss>

08001dc6 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001dc6:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001dc8:	3204      	adds	r2, #4

08001dca <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001dca:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001dcc:	d3fb      	bcc.n	8001dc6 <FillZerobss>
  
/* Call static constructors */
    bl __libc_init_array
 8001dce:	f00e f903 	bl	800ffd8 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8001dd2:	f7fe fc6f 	bl	80006b4 <main>
  bx  lr    
 8001dd6:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8001dd8:	20080000 	.word	0x20080000
  ldr r0, =_sdata
 8001ddc:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001de0:	20028a40 	.word	0x20028a40
  ldr r2, =_sidata
 8001de4:	0801b380 	.word	0x0801b380
  ldr r2, =_sbss
 8001de8:	20028b80 	.word	0x20028b80
  ldr r4, =_ebss
 8001dec:	2003032c 	.word	0x2003032c

08001df0 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8001df0:	e7fe      	b.n	8001df0 <ADC_IRQHandler>

08001df2 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001df2:	b580      	push	{r7, lr}
 8001df4:	af00      	add	r7, sp, #0
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001df6:	2003      	movs	r0, #3
 8001df8:	f000 f94c 	bl	8002094 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8001dfc:	200f      	movs	r0, #15
 8001dfe:	f000 f805 	bl	8001e0c <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8001e02:	f7ff fc63 	bl	80016cc <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001e06:	2300      	movs	r3, #0
}
 8001e08:	4618      	mov	r0, r3
 8001e0a:	bd80      	pop	{r7, pc}

08001e0c <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001e0c:	b580      	push	{r7, lr}
 8001e0e:	b082      	sub	sp, #8
 8001e10:	af00      	add	r7, sp, #0
 8001e12:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8001e14:	4b12      	ldr	r3, [pc, #72]	@ (8001e60 <HAL_InitTick+0x54>)
 8001e16:	681a      	ldr	r2, [r3, #0]
 8001e18:	4b12      	ldr	r3, [pc, #72]	@ (8001e64 <HAL_InitTick+0x58>)
 8001e1a:	781b      	ldrb	r3, [r3, #0]
 8001e1c:	4619      	mov	r1, r3
 8001e1e:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8001e22:	fbb3 f3f1 	udiv	r3, r3, r1
 8001e26:	fbb2 f3f3 	udiv	r3, r2, r3
 8001e2a:	4618      	mov	r0, r3
 8001e2c:	f000 f967 	bl	80020fe <HAL_SYSTICK_Config>
 8001e30:	4603      	mov	r3, r0
 8001e32:	2b00      	cmp	r3, #0
 8001e34:	d001      	beq.n	8001e3a <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8001e36:	2301      	movs	r3, #1
 8001e38:	e00e      	b.n	8001e58 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001e3a:	687b      	ldr	r3, [r7, #4]
 8001e3c:	2b0f      	cmp	r3, #15
 8001e3e:	d80a      	bhi.n	8001e56 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001e40:	2200      	movs	r2, #0
 8001e42:	6879      	ldr	r1, [r7, #4]
 8001e44:	f04f 30ff 	mov.w	r0, #4294967295
 8001e48:	f000 f92f 	bl	80020aa <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001e4c:	4a06      	ldr	r2, [pc, #24]	@ (8001e68 <HAL_InitTick+0x5c>)
 8001e4e:	687b      	ldr	r3, [r7, #4]
 8001e50:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8001e52:	2300      	movs	r3, #0
 8001e54:	e000      	b.n	8001e58 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8001e56:	2301      	movs	r3, #1
}
 8001e58:	4618      	mov	r0, r3
 8001e5a:	3708      	adds	r7, #8
 8001e5c:	46bd      	mov	sp, r7
 8001e5e:	bd80      	pop	{r7, pc}
 8001e60:	20027fac 	.word	0x20027fac
 8001e64:	20027fb4 	.word	0x20027fb4
 8001e68:	20027fb0 	.word	0x20027fb0

08001e6c <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001e6c:	b480      	push	{r7}
 8001e6e:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001e70:	4b06      	ldr	r3, [pc, #24]	@ (8001e8c <HAL_IncTick+0x20>)
 8001e72:	781b      	ldrb	r3, [r3, #0]
 8001e74:	461a      	mov	r2, r3
 8001e76:	4b06      	ldr	r3, [pc, #24]	@ (8001e90 <HAL_IncTick+0x24>)
 8001e78:	681b      	ldr	r3, [r3, #0]
 8001e7a:	4413      	add	r3, r2
 8001e7c:	4a04      	ldr	r2, [pc, #16]	@ (8001e90 <HAL_IncTick+0x24>)
 8001e7e:	6013      	str	r3, [r2, #0]
}
 8001e80:	bf00      	nop
 8001e82:	46bd      	mov	sp, r7
 8001e84:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e88:	4770      	bx	lr
 8001e8a:	bf00      	nop
 8001e8c:	20027fb4 	.word	0x20027fb4
 8001e90:	200299f0 	.word	0x200299f0

08001e94 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001e94:	b480      	push	{r7}
 8001e96:	af00      	add	r7, sp, #0
  return uwTick;
 8001e98:	4b03      	ldr	r3, [pc, #12]	@ (8001ea8 <HAL_GetTick+0x14>)
 8001e9a:	681b      	ldr	r3, [r3, #0]
}
 8001e9c:	4618      	mov	r0, r3
 8001e9e:	46bd      	mov	sp, r7
 8001ea0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ea4:	4770      	bx	lr
 8001ea6:	bf00      	nop
 8001ea8:	200299f0 	.word	0x200299f0

08001eac <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001eac:	b580      	push	{r7, lr}
 8001eae:	b084      	sub	sp, #16
 8001eb0:	af00      	add	r7, sp, #0
 8001eb2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001eb4:	f7ff ffee 	bl	8001e94 <HAL_GetTick>
 8001eb8:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8001eba:	687b      	ldr	r3, [r7, #4]
 8001ebc:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8001ebe:	68fb      	ldr	r3, [r7, #12]
 8001ec0:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001ec4:	d005      	beq.n	8001ed2 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8001ec6:	4b0a      	ldr	r3, [pc, #40]	@ (8001ef0 <HAL_Delay+0x44>)
 8001ec8:	781b      	ldrb	r3, [r3, #0]
 8001eca:	461a      	mov	r2, r3
 8001ecc:	68fb      	ldr	r3, [r7, #12]
 8001ece:	4413      	add	r3, r2
 8001ed0:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8001ed2:	bf00      	nop
 8001ed4:	f7ff ffde 	bl	8001e94 <HAL_GetTick>
 8001ed8:	4602      	mov	r2, r0
 8001eda:	68bb      	ldr	r3, [r7, #8]
 8001edc:	1ad3      	subs	r3, r2, r3
 8001ede:	68fa      	ldr	r2, [r7, #12]
 8001ee0:	429a      	cmp	r2, r3
 8001ee2:	d8f7      	bhi.n	8001ed4 <HAL_Delay+0x28>
  {
  }
}
 8001ee4:	bf00      	nop
 8001ee6:	bf00      	nop
 8001ee8:	3710      	adds	r7, #16
 8001eea:	46bd      	mov	sp, r7
 8001eec:	bd80      	pop	{r7, pc}
 8001eee:	bf00      	nop
 8001ef0:	20027fb4 	.word	0x20027fb4

08001ef4 <__NVIC_SetPriorityGrouping>:
{
 8001ef4:	b480      	push	{r7}
 8001ef6:	b085      	sub	sp, #20
 8001ef8:	af00      	add	r7, sp, #0
 8001efa:	6078      	str	r0, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001efc:	687b      	ldr	r3, [r7, #4]
 8001efe:	f003 0307 	and.w	r3, r3, #7
 8001f02:	60fb      	str	r3, [r7, #12]
  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001f04:	4b0b      	ldr	r3, [pc, #44]	@ (8001f34 <__NVIC_SetPriorityGrouping+0x40>)
 8001f06:	68db      	ldr	r3, [r3, #12]
 8001f08:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001f0a:	68ba      	ldr	r2, [r7, #8]
 8001f0c:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8001f10:	4013      	ands	r3, r2
 8001f12:	60bb      	str	r3, [r7, #8]
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001f14:	68fb      	ldr	r3, [r7, #12]
 8001f16:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001f18:	68bb      	ldr	r3, [r7, #8]
 8001f1a:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 8001f1c:	4b06      	ldr	r3, [pc, #24]	@ (8001f38 <__NVIC_SetPriorityGrouping+0x44>)
 8001f1e:	4313      	orrs	r3, r2
 8001f20:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001f22:	4a04      	ldr	r2, [pc, #16]	@ (8001f34 <__NVIC_SetPriorityGrouping+0x40>)
 8001f24:	68bb      	ldr	r3, [r7, #8]
 8001f26:	60d3      	str	r3, [r2, #12]
}
 8001f28:	bf00      	nop
 8001f2a:	3714      	adds	r7, #20
 8001f2c:	46bd      	mov	sp, r7
 8001f2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f32:	4770      	bx	lr
 8001f34:	e000ed00 	.word	0xe000ed00
 8001f38:	05fa0000 	.word	0x05fa0000

08001f3c <__NVIC_GetPriorityGrouping>:
{
 8001f3c:	b480      	push	{r7}
 8001f3e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001f40:	4b04      	ldr	r3, [pc, #16]	@ (8001f54 <__NVIC_GetPriorityGrouping+0x18>)
 8001f42:	68db      	ldr	r3, [r3, #12]
 8001f44:	0a1b      	lsrs	r3, r3, #8
 8001f46:	f003 0307 	and.w	r3, r3, #7
}
 8001f4a:	4618      	mov	r0, r3
 8001f4c:	46bd      	mov	sp, r7
 8001f4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f52:	4770      	bx	lr
 8001f54:	e000ed00 	.word	0xe000ed00

08001f58 <__NVIC_EnableIRQ>:
{
 8001f58:	b480      	push	{r7}
 8001f5a:	b083      	sub	sp, #12
 8001f5c:	af00      	add	r7, sp, #0
 8001f5e:	4603      	mov	r3, r0
 8001f60:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001f62:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001f66:	2b00      	cmp	r3, #0
 8001f68:	db0b      	blt.n	8001f82 <__NVIC_EnableIRQ+0x2a>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001f6a:	79fb      	ldrb	r3, [r7, #7]
 8001f6c:	f003 021f 	and.w	r2, r3, #31
 8001f70:	4907      	ldr	r1, [pc, #28]	@ (8001f90 <__NVIC_EnableIRQ+0x38>)
 8001f72:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001f76:	095b      	lsrs	r3, r3, #5
 8001f78:	2001      	movs	r0, #1
 8001f7a:	fa00 f202 	lsl.w	r2, r0, r2
 8001f7e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 8001f82:	bf00      	nop
 8001f84:	370c      	adds	r7, #12
 8001f86:	46bd      	mov	sp, r7
 8001f88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f8c:	4770      	bx	lr
 8001f8e:	bf00      	nop
 8001f90:	e000e100 	.word	0xe000e100

08001f94 <__NVIC_SetPriority>:
{
 8001f94:	b480      	push	{r7}
 8001f96:	b083      	sub	sp, #12
 8001f98:	af00      	add	r7, sp, #0
 8001f9a:	4603      	mov	r3, r0
 8001f9c:	6039      	str	r1, [r7, #0]
 8001f9e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001fa0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001fa4:	2b00      	cmp	r3, #0
 8001fa6:	db0a      	blt.n	8001fbe <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001fa8:	683b      	ldr	r3, [r7, #0]
 8001faa:	b2da      	uxtb	r2, r3
 8001fac:	490c      	ldr	r1, [pc, #48]	@ (8001fe0 <__NVIC_SetPriority+0x4c>)
 8001fae:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001fb2:	0112      	lsls	r2, r2, #4
 8001fb4:	b2d2      	uxtb	r2, r2
 8001fb6:	440b      	add	r3, r1
 8001fb8:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
}
 8001fbc:	e00a      	b.n	8001fd4 <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001fbe:	683b      	ldr	r3, [r7, #0]
 8001fc0:	b2da      	uxtb	r2, r3
 8001fc2:	4908      	ldr	r1, [pc, #32]	@ (8001fe4 <__NVIC_SetPriority+0x50>)
 8001fc4:	79fb      	ldrb	r3, [r7, #7]
 8001fc6:	f003 030f 	and.w	r3, r3, #15
 8001fca:	3b04      	subs	r3, #4
 8001fcc:	0112      	lsls	r2, r2, #4
 8001fce:	b2d2      	uxtb	r2, r2
 8001fd0:	440b      	add	r3, r1
 8001fd2:	761a      	strb	r2, [r3, #24]
}
 8001fd4:	bf00      	nop
 8001fd6:	370c      	adds	r7, #12
 8001fd8:	46bd      	mov	sp, r7
 8001fda:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fde:	4770      	bx	lr
 8001fe0:	e000e100 	.word	0xe000e100
 8001fe4:	e000ed00 	.word	0xe000ed00

08001fe8 <NVIC_EncodePriority>:
{
 8001fe8:	b480      	push	{r7}
 8001fea:	b089      	sub	sp, #36	@ 0x24
 8001fec:	af00      	add	r7, sp, #0
 8001fee:	60f8      	str	r0, [r7, #12]
 8001ff0:	60b9      	str	r1, [r7, #8]
 8001ff2:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001ff4:	68fb      	ldr	r3, [r7, #12]
 8001ff6:	f003 0307 	and.w	r3, r3, #7
 8001ffa:	61fb      	str	r3, [r7, #28]
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001ffc:	69fb      	ldr	r3, [r7, #28]
 8001ffe:	f1c3 0307 	rsb	r3, r3, #7
 8002002:	2b04      	cmp	r3, #4
 8002004:	bf28      	it	cs
 8002006:	2304      	movcs	r3, #4
 8002008:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800200a:	69fb      	ldr	r3, [r7, #28]
 800200c:	3304      	adds	r3, #4
 800200e:	2b06      	cmp	r3, #6
 8002010:	d902      	bls.n	8002018 <NVIC_EncodePriority+0x30>
 8002012:	69fb      	ldr	r3, [r7, #28]
 8002014:	3b03      	subs	r3, #3
 8002016:	e000      	b.n	800201a <NVIC_EncodePriority+0x32>
 8002018:	2300      	movs	r3, #0
 800201a:	617b      	str	r3, [r7, #20]
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800201c:	f04f 32ff 	mov.w	r2, #4294967295
 8002020:	69bb      	ldr	r3, [r7, #24]
 8002022:	fa02 f303 	lsl.w	r3, r2, r3
 8002026:	43da      	mvns	r2, r3
 8002028:	68bb      	ldr	r3, [r7, #8]
 800202a:	401a      	ands	r2, r3
 800202c:	697b      	ldr	r3, [r7, #20]
 800202e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8002030:	f04f 31ff 	mov.w	r1, #4294967295
 8002034:	697b      	ldr	r3, [r7, #20]
 8002036:	fa01 f303 	lsl.w	r3, r1, r3
 800203a:	43d9      	mvns	r1, r3
 800203c:	687b      	ldr	r3, [r7, #4]
 800203e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002040:	4313      	orrs	r3, r2
}
 8002042:	4618      	mov	r0, r3
 8002044:	3724      	adds	r7, #36	@ 0x24
 8002046:	46bd      	mov	sp, r7
 8002048:	f85d 7b04 	ldr.w	r7, [sp], #4
 800204c:	4770      	bx	lr
	...

08002050 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8002050:	b580      	push	{r7, lr}
 8002052:	b082      	sub	sp, #8
 8002054:	af00      	add	r7, sp, #0
 8002056:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8002058:	687b      	ldr	r3, [r7, #4]
 800205a:	3b01      	subs	r3, #1
 800205c:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8002060:	d301      	bcc.n	8002066 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8002062:	2301      	movs	r3, #1
 8002064:	e00f      	b.n	8002086 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8002066:	4a0a      	ldr	r2, [pc, #40]	@ (8002090 <SysTick_Config+0x40>)
 8002068:	687b      	ldr	r3, [r7, #4]
 800206a:	3b01      	subs	r3, #1
 800206c:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800206e:	210f      	movs	r1, #15
 8002070:	f04f 30ff 	mov.w	r0, #4294967295
 8002074:	f7ff ff8e 	bl	8001f94 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8002078:	4b05      	ldr	r3, [pc, #20]	@ (8002090 <SysTick_Config+0x40>)
 800207a:	2200      	movs	r2, #0
 800207c:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800207e:	4b04      	ldr	r3, [pc, #16]	@ (8002090 <SysTick_Config+0x40>)
 8002080:	2207      	movs	r2, #7
 8002082:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8002084:	2300      	movs	r3, #0
}
 8002086:	4618      	mov	r0, r3
 8002088:	3708      	adds	r7, #8
 800208a:	46bd      	mov	sp, r7
 800208c:	bd80      	pop	{r7, pc}
 800208e:	bf00      	nop
 8002090:	e000e010 	.word	0xe000e010

08002094 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002094:	b580      	push	{r7, lr}
 8002096:	b082      	sub	sp, #8
 8002098:	af00      	add	r7, sp, #0
 800209a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 800209c:	6878      	ldr	r0, [r7, #4]
 800209e:	f7ff ff29 	bl	8001ef4 <__NVIC_SetPriorityGrouping>
}
 80020a2:	bf00      	nop
 80020a4:	3708      	adds	r7, #8
 80020a6:	46bd      	mov	sp, r7
 80020a8:	bd80      	pop	{r7, pc}

080020aa <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80020aa:	b580      	push	{r7, lr}
 80020ac:	b086      	sub	sp, #24
 80020ae:	af00      	add	r7, sp, #0
 80020b0:	4603      	mov	r3, r0
 80020b2:	60b9      	str	r1, [r7, #8]
 80020b4:	607a      	str	r2, [r7, #4]
 80020b6:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 80020b8:	2300      	movs	r3, #0
 80020ba:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80020bc:	f7ff ff3e 	bl	8001f3c <__NVIC_GetPriorityGrouping>
 80020c0:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80020c2:	687a      	ldr	r2, [r7, #4]
 80020c4:	68b9      	ldr	r1, [r7, #8]
 80020c6:	6978      	ldr	r0, [r7, #20]
 80020c8:	f7ff ff8e 	bl	8001fe8 <NVIC_EncodePriority>
 80020cc:	4602      	mov	r2, r0
 80020ce:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80020d2:	4611      	mov	r1, r2
 80020d4:	4618      	mov	r0, r3
 80020d6:	f7ff ff5d 	bl	8001f94 <__NVIC_SetPriority>
}
 80020da:	bf00      	nop
 80020dc:	3718      	adds	r7, #24
 80020de:	46bd      	mov	sp, r7
 80020e0:	bd80      	pop	{r7, pc}

080020e2 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f7xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80020e2:	b580      	push	{r7, lr}
 80020e4:	b082      	sub	sp, #8
 80020e6:	af00      	add	r7, sp, #0
 80020e8:	4603      	mov	r3, r0
 80020ea:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80020ec:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80020f0:	4618      	mov	r0, r3
 80020f2:	f7ff ff31 	bl	8001f58 <__NVIC_EnableIRQ>
}
 80020f6:	bf00      	nop
 80020f8:	3708      	adds	r7, #8
 80020fa:	46bd      	mov	sp, r7
 80020fc:	bd80      	pop	{r7, pc}

080020fe <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80020fe:	b580      	push	{r7, lr}
 8002100:	b082      	sub	sp, #8
 8002102:	af00      	add	r7, sp, #0
 8002104:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8002106:	6878      	ldr	r0, [r7, #4]
 8002108:	f7ff ffa2 	bl	8002050 <SysTick_Config>
 800210c:	4603      	mov	r3, r0
}
 800210e:	4618      	mov	r0, r3
 8002110:	3708      	adds	r7, #8
 8002112:	46bd      	mov	sp, r7
 8002114:	bd80      	pop	{r7, pc}

08002116 <HAL_DAC_Init>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_Init(DAC_HandleTypeDef *hdac)
{
 8002116:	b580      	push	{r7, lr}
 8002118:	b082      	sub	sp, #8
 800211a:	af00      	add	r7, sp, #0
 800211c:	6078      	str	r0, [r7, #4]
  /* Check the DAC peripheral handle */
  if (hdac == NULL)
 800211e:	687b      	ldr	r3, [r7, #4]
 8002120:	2b00      	cmp	r3, #0
 8002122:	d101      	bne.n	8002128 <HAL_DAC_Init+0x12>
  {
    return HAL_ERROR;
 8002124:	2301      	movs	r3, #1
 8002126:	e014      	b.n	8002152 <HAL_DAC_Init+0x3c>
  }
  /* Check the parameters */
  assert_param(IS_DAC_ALL_INSTANCE(hdac->Instance));

  if (hdac->State == HAL_DAC_STATE_RESET)
 8002128:	687b      	ldr	r3, [r7, #4]
 800212a:	791b      	ldrb	r3, [r3, #4]
 800212c:	b2db      	uxtb	r3, r3
 800212e:	2b00      	cmp	r3, #0
 8002130:	d105      	bne.n	800213e <HAL_DAC_Init+0x28>
      hdac->MspInitCallback             = HAL_DAC_MspInit;
    }
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */

    /* Allocate lock resource and initialize it */
    hdac->Lock = HAL_UNLOCKED;
 8002132:	687b      	ldr	r3, [r7, #4]
 8002134:	2200      	movs	r2, #0
 8002136:	715a      	strb	r2, [r3, #5]
#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
    /* Init the low level hardware */
    hdac->MspInitCallback(hdac);
#else
    /* Init the low level hardware */
    HAL_DAC_MspInit(hdac);
 8002138:	6878      	ldr	r0, [r7, #4]
 800213a:	f7ff faef 	bl	800171c <HAL_DAC_MspInit>
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */
  }

  /* Initialize the DAC state*/
  hdac->State = HAL_DAC_STATE_BUSY;
 800213e:	687b      	ldr	r3, [r7, #4]
 8002140:	2202      	movs	r2, #2
 8002142:	711a      	strb	r2, [r3, #4]

  /* Set DAC error code to none */
  hdac->ErrorCode = HAL_DAC_ERROR_NONE;
 8002144:	687b      	ldr	r3, [r7, #4]
 8002146:	2200      	movs	r2, #0
 8002148:	611a      	str	r2, [r3, #16]

  /* Initialize the DAC state*/
  hdac->State = HAL_DAC_STATE_READY;
 800214a:	687b      	ldr	r3, [r7, #4]
 800214c:	2201      	movs	r2, #1
 800214e:	711a      	strb	r2, [r3, #4]

  /* Return function status */
  return HAL_OK;
 8002150:	2300      	movs	r3, #0
}
 8002152:	4618      	mov	r0, r3
 8002154:	3708      	adds	r7, #8
 8002156:	46bd      	mov	sp, r7
 8002158:	bd80      	pop	{r7, pc}

0800215a <HAL_DAC_Start>:
  *            @arg DAC_CHANNEL_1: DAC Channel1 selected
  *            @arg DAC_CHANNEL_2: DAC Channel2 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_Start(DAC_HandleTypeDef *hdac, uint32_t Channel)
{
 800215a:	b480      	push	{r7}
 800215c:	b083      	sub	sp, #12
 800215e:	af00      	add	r7, sp, #0
 8002160:	6078      	str	r0, [r7, #4]
 8002162:	6039      	str	r1, [r7, #0]
  /* Check the DAC peripheral handle */
  if (hdac == NULL)
 8002164:	687b      	ldr	r3, [r7, #4]
 8002166:	2b00      	cmp	r3, #0
 8002168:	d101      	bne.n	800216e <HAL_DAC_Start+0x14>
  {
    return HAL_ERROR;
 800216a:	2301      	movs	r3, #1
 800216c:	e046      	b.n	80021fc <HAL_DAC_Start+0xa2>

  /* Check the parameters */
  assert_param(IS_DAC_CHANNEL(Channel));

  /* Process locked */
  __HAL_LOCK(hdac);
 800216e:	687b      	ldr	r3, [r7, #4]
 8002170:	795b      	ldrb	r3, [r3, #5]
 8002172:	2b01      	cmp	r3, #1
 8002174:	d101      	bne.n	800217a <HAL_DAC_Start+0x20>
 8002176:	2302      	movs	r3, #2
 8002178:	e040      	b.n	80021fc <HAL_DAC_Start+0xa2>
 800217a:	687b      	ldr	r3, [r7, #4]
 800217c:	2201      	movs	r2, #1
 800217e:	715a      	strb	r2, [r3, #5]

  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_BUSY;
 8002180:	687b      	ldr	r3, [r7, #4]
 8002182:	2202      	movs	r2, #2
 8002184:	711a      	strb	r2, [r3, #4]

  /* Enable the Peripheral */
  __HAL_DAC_ENABLE(hdac, Channel);
 8002186:	687b      	ldr	r3, [r7, #4]
 8002188:	681b      	ldr	r3, [r3, #0]
 800218a:	6819      	ldr	r1, [r3, #0]
 800218c:	683b      	ldr	r3, [r7, #0]
 800218e:	f003 0310 	and.w	r3, r3, #16
 8002192:	2201      	movs	r2, #1
 8002194:	409a      	lsls	r2, r3
 8002196:	687b      	ldr	r3, [r7, #4]
 8002198:	681b      	ldr	r3, [r3, #0]
 800219a:	430a      	orrs	r2, r1
 800219c:	601a      	str	r2, [r3, #0]

  if (Channel == DAC_CHANNEL_1)
 800219e:	683b      	ldr	r3, [r7, #0]
 80021a0:	2b00      	cmp	r3, #0
 80021a2:	d10f      	bne.n	80021c4 <HAL_DAC_Start+0x6a>
  {
    /* Check if software trigger enabled */
    if ((hdac->Instance->CR & (DAC_CR_TEN1 | DAC_CR_TSEL1)) == DAC_TRIGGER_SOFTWARE)
 80021a4:	687b      	ldr	r3, [r7, #4]
 80021a6:	681b      	ldr	r3, [r3, #0]
 80021a8:	681b      	ldr	r3, [r3, #0]
 80021aa:	f003 033c 	and.w	r3, r3, #60	@ 0x3c
 80021ae:	2b3c      	cmp	r3, #60	@ 0x3c
 80021b0:	d11d      	bne.n	80021ee <HAL_DAC_Start+0x94>
    {
      /* Enable the selected DAC software conversion */
      SET_BIT(hdac->Instance->SWTRIGR, DAC_SWTRIGR_SWTRIG1);
 80021b2:	687b      	ldr	r3, [r7, #4]
 80021b4:	681b      	ldr	r3, [r3, #0]
 80021b6:	685a      	ldr	r2, [r3, #4]
 80021b8:	687b      	ldr	r3, [r7, #4]
 80021ba:	681b      	ldr	r3, [r3, #0]
 80021bc:	f042 0201 	orr.w	r2, r2, #1
 80021c0:	605a      	str	r2, [r3, #4]
 80021c2:	e014      	b.n	80021ee <HAL_DAC_Start+0x94>
  }

  else
  {
    /* Check if software trigger enabled */
    if ((hdac->Instance->CR & (DAC_CR_TEN2 | DAC_CR_TSEL2)) == (DAC_TRIGGER_SOFTWARE << (Channel & 0x10UL)))
 80021c4:	687b      	ldr	r3, [r7, #4]
 80021c6:	681b      	ldr	r3, [r3, #0]
 80021c8:	681b      	ldr	r3, [r3, #0]
 80021ca:	f403 1270 	and.w	r2, r3, #3932160	@ 0x3c0000
 80021ce:	683b      	ldr	r3, [r7, #0]
 80021d0:	f003 0310 	and.w	r3, r3, #16
 80021d4:	213c      	movs	r1, #60	@ 0x3c
 80021d6:	fa01 f303 	lsl.w	r3, r1, r3
 80021da:	429a      	cmp	r2, r3
 80021dc:	d107      	bne.n	80021ee <HAL_DAC_Start+0x94>
    {
      /* Enable the selected DAC software conversion*/
      SET_BIT(hdac->Instance->SWTRIGR, DAC_SWTRIGR_SWTRIG2);
 80021de:	687b      	ldr	r3, [r7, #4]
 80021e0:	681b      	ldr	r3, [r3, #0]
 80021e2:	685a      	ldr	r2, [r3, #4]
 80021e4:	687b      	ldr	r3, [r7, #4]
 80021e6:	681b      	ldr	r3, [r3, #0]
 80021e8:	f042 0202 	orr.w	r2, r2, #2
 80021ec:	605a      	str	r2, [r3, #4]
    }
  }


  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_READY;
 80021ee:	687b      	ldr	r3, [r7, #4]
 80021f0:	2201      	movs	r2, #1
 80021f2:	711a      	strb	r2, [r3, #4]

  /* Process unlocked */
  __HAL_UNLOCK(hdac);
 80021f4:	687b      	ldr	r3, [r7, #4]
 80021f6:	2200      	movs	r2, #0
 80021f8:	715a      	strb	r2, [r3, #5]

  /* Return function status */
  return HAL_OK;
 80021fa:	2300      	movs	r3, #0
}
 80021fc:	4618      	mov	r0, r3
 80021fe:	370c      	adds	r7, #12
 8002200:	46bd      	mov	sp, r7
 8002202:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002206:	4770      	bx	lr

08002208 <HAL_DAC_Stop>:
  *            @arg DAC_CHANNEL_1: DAC Channel1 selected
  *            @arg DAC_CHANNEL_2: DAC Channel2 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_Stop(DAC_HandleTypeDef *hdac, uint32_t Channel)
{
 8002208:	b480      	push	{r7}
 800220a:	b083      	sub	sp, #12
 800220c:	af00      	add	r7, sp, #0
 800220e:	6078      	str	r0, [r7, #4]
 8002210:	6039      	str	r1, [r7, #0]
  /* Check the DAC peripheral handle */
  if (hdac == NULL)
 8002212:	687b      	ldr	r3, [r7, #4]
 8002214:	2b00      	cmp	r3, #0
 8002216:	d101      	bne.n	800221c <HAL_DAC_Stop+0x14>
  {
    return HAL_ERROR;
 8002218:	2301      	movs	r3, #1
 800221a:	e011      	b.n	8002240 <HAL_DAC_Stop+0x38>

  /* Check the parameters */
  assert_param(IS_DAC_CHANNEL(Channel));

  /* Disable the Peripheral */
  __HAL_DAC_DISABLE(hdac, Channel);
 800221c:	687b      	ldr	r3, [r7, #4]
 800221e:	681b      	ldr	r3, [r3, #0]
 8002220:	6819      	ldr	r1, [r3, #0]
 8002222:	683b      	ldr	r3, [r7, #0]
 8002224:	f003 0310 	and.w	r3, r3, #16
 8002228:	2201      	movs	r2, #1
 800222a:	fa02 f303 	lsl.w	r3, r2, r3
 800222e:	43da      	mvns	r2, r3
 8002230:	687b      	ldr	r3, [r7, #4]
 8002232:	681b      	ldr	r3, [r3, #0]
 8002234:	400a      	ands	r2, r1
 8002236:	601a      	str	r2, [r3, #0]

  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_READY;
 8002238:	687b      	ldr	r3, [r7, #4]
 800223a:	2201      	movs	r2, #1
 800223c:	711a      	strb	r2, [r3, #4]

  /* Return function status */
  return HAL_OK;
 800223e:	2300      	movs	r3, #0
}
 8002240:	4618      	mov	r0, r3
 8002242:	370c      	adds	r7, #12
 8002244:	46bd      	mov	sp, r7
 8002246:	f85d 7b04 	ldr.w	r7, [sp], #4
 800224a:	4770      	bx	lr

0800224c <HAL_DAC_SetValue>:
  *            @arg DAC_ALIGN_12B_R: 12bit right data alignment selected
  * @param  Data Data to be loaded in the selected data holding register.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_SetValue(DAC_HandleTypeDef *hdac, uint32_t Channel, uint32_t Alignment, uint32_t Data)
{
 800224c:	b480      	push	{r7}
 800224e:	b087      	sub	sp, #28
 8002250:	af00      	add	r7, sp, #0
 8002252:	60f8      	str	r0, [r7, #12]
 8002254:	60b9      	str	r1, [r7, #8]
 8002256:	607a      	str	r2, [r7, #4]
 8002258:	603b      	str	r3, [r7, #0]
  __IO uint32_t tmp = 0UL;
 800225a:	2300      	movs	r3, #0
 800225c:	617b      	str	r3, [r7, #20]

  /* Check the DAC peripheral handle */
  if (hdac == NULL)
 800225e:	68fb      	ldr	r3, [r7, #12]
 8002260:	2b00      	cmp	r3, #0
 8002262:	d101      	bne.n	8002268 <HAL_DAC_SetValue+0x1c>
  {
    return HAL_ERROR;
 8002264:	2301      	movs	r3, #1
 8002266:	e015      	b.n	8002294 <HAL_DAC_SetValue+0x48>
  /* Check the parameters */
  assert_param(IS_DAC_CHANNEL(Channel));
  assert_param(IS_DAC_ALIGN(Alignment));
  assert_param(IS_DAC_DATA(Data));

  tmp = (uint32_t)hdac->Instance;
 8002268:	68fb      	ldr	r3, [r7, #12]
 800226a:	681b      	ldr	r3, [r3, #0]
 800226c:	617b      	str	r3, [r7, #20]
  if (Channel == DAC_CHANNEL_1)
 800226e:	68bb      	ldr	r3, [r7, #8]
 8002270:	2b00      	cmp	r3, #0
 8002272:	d105      	bne.n	8002280 <HAL_DAC_SetValue+0x34>
  {
    tmp += DAC_DHR12R1_ALIGNMENT(Alignment);
 8002274:	697a      	ldr	r2, [r7, #20]
 8002276:	687b      	ldr	r3, [r7, #4]
 8002278:	4413      	add	r3, r2
 800227a:	3308      	adds	r3, #8
 800227c:	617b      	str	r3, [r7, #20]
 800227e:	e004      	b.n	800228a <HAL_DAC_SetValue+0x3e>
  }

  else
  {
    tmp += DAC_DHR12R2_ALIGNMENT(Alignment);
 8002280:	697a      	ldr	r2, [r7, #20]
 8002282:	687b      	ldr	r3, [r7, #4]
 8002284:	4413      	add	r3, r2
 8002286:	3314      	adds	r3, #20
 8002288:	617b      	str	r3, [r7, #20]
  }


  /* Set the DAC channel selected data holding register */
  *(__IO uint32_t *) tmp = Data;
 800228a:	697b      	ldr	r3, [r7, #20]
 800228c:	461a      	mov	r2, r3
 800228e:	683b      	ldr	r3, [r7, #0]
 8002290:	6013      	str	r3, [r2, #0]

  /* Return function status */
  return HAL_OK;
 8002292:	2300      	movs	r3, #0
}
 8002294:	4618      	mov	r0, r3
 8002296:	371c      	adds	r7, #28
 8002298:	46bd      	mov	sp, r7
 800229a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800229e:	4770      	bx	lr

080022a0 <HAL_DAC_ConfigChannel>:
  *            @arg DAC_CHANNEL_2: DAC Channel2 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_ConfigChannel(DAC_HandleTypeDef *hdac,
                                        const DAC_ChannelConfTypeDef *sConfig, uint32_t Channel)
{
 80022a0:	b480      	push	{r7}
 80022a2:	b089      	sub	sp, #36	@ 0x24
 80022a4:	af00      	add	r7, sp, #0
 80022a6:	60f8      	str	r0, [r7, #12]
 80022a8:	60b9      	str	r1, [r7, #8]
 80022aa:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80022ac:	2300      	movs	r3, #0
 80022ae:	77fb      	strb	r3, [r7, #31]
  uint32_t tmpreg1;
  uint32_t tmpreg2;

  /* Check the DAC peripheral handle and channel configuration struct */
  if ((hdac == NULL) || (sConfig == NULL))
 80022b0:	68fb      	ldr	r3, [r7, #12]
 80022b2:	2b00      	cmp	r3, #0
 80022b4:	d002      	beq.n	80022bc <HAL_DAC_ConfigChannel+0x1c>
 80022b6:	68bb      	ldr	r3, [r7, #8]
 80022b8:	2b00      	cmp	r3, #0
 80022ba:	d101      	bne.n	80022c0 <HAL_DAC_ConfigChannel+0x20>
  {
    return HAL_ERROR;
 80022bc:	2301      	movs	r3, #1
 80022be:	e042      	b.n	8002346 <HAL_DAC_ConfigChannel+0xa6>
  assert_param(IS_DAC_TRIGGER(sConfig->DAC_Trigger));
  assert_param(IS_DAC_OUTPUT_BUFFER_STATE(sConfig->DAC_OutputBuffer));
  assert_param(IS_DAC_CHANNEL(Channel));

  /* Process locked */
  __HAL_LOCK(hdac);
 80022c0:	68fb      	ldr	r3, [r7, #12]
 80022c2:	795b      	ldrb	r3, [r3, #5]
 80022c4:	2b01      	cmp	r3, #1
 80022c6:	d101      	bne.n	80022cc <HAL_DAC_ConfigChannel+0x2c>
 80022c8:	2302      	movs	r3, #2
 80022ca:	e03c      	b.n	8002346 <HAL_DAC_ConfigChannel+0xa6>
 80022cc:	68fb      	ldr	r3, [r7, #12]
 80022ce:	2201      	movs	r2, #1
 80022d0:	715a      	strb	r2, [r3, #5]

  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_BUSY;
 80022d2:	68fb      	ldr	r3, [r7, #12]
 80022d4:	2202      	movs	r2, #2
 80022d6:	711a      	strb	r2, [r3, #4]

  /* Get the DAC CR value */
  tmpreg1 = hdac->Instance->CR;
 80022d8:	68fb      	ldr	r3, [r7, #12]
 80022da:	681b      	ldr	r3, [r3, #0]
 80022dc:	681b      	ldr	r3, [r3, #0]
 80022de:	61bb      	str	r3, [r7, #24]
  /* Clear BOFFx, TENx, TSELx, WAVEx and MAMPx bits */
  tmpreg1 &= ~(((uint32_t)(DAC_CR_MAMP1 | DAC_CR_WAVE1 | DAC_CR_TSEL1 | DAC_CR_TEN1 | DAC_CR_BOFF1))
               << (Channel & 0x10UL));
 80022e0:	687b      	ldr	r3, [r7, #4]
 80022e2:	f003 0310 	and.w	r3, r3, #16
 80022e6:	f640 72fe 	movw	r2, #4094	@ 0xffe
 80022ea:	fa02 f303 	lsl.w	r3, r2, r3
  tmpreg1 &= ~(((uint32_t)(DAC_CR_MAMP1 | DAC_CR_WAVE1 | DAC_CR_TSEL1 | DAC_CR_TEN1 | DAC_CR_BOFF1))
 80022ee:	43db      	mvns	r3, r3
 80022f0:	69ba      	ldr	r2, [r7, #24]
 80022f2:	4013      	ands	r3, r2
 80022f4:	61bb      	str	r3, [r7, #24]
  /* Configure for the selected DAC channel: buffer output, trigger */
  /* Set TSELx and TENx bits according to DAC_Trigger value */
  /* Set BOFFx bit according to DAC_OutputBuffer value */
  tmpreg2 = (sConfig->DAC_Trigger | sConfig->DAC_OutputBuffer);
 80022f6:	68bb      	ldr	r3, [r7, #8]
 80022f8:	681a      	ldr	r2, [r3, #0]
 80022fa:	68bb      	ldr	r3, [r7, #8]
 80022fc:	685b      	ldr	r3, [r3, #4]
 80022fe:	4313      	orrs	r3, r2
 8002300:	617b      	str	r3, [r7, #20]
  /* Calculate CR register value depending on DAC_Channel */
  tmpreg1 |= tmpreg2 << (Channel & 0x10UL);
 8002302:	687b      	ldr	r3, [r7, #4]
 8002304:	f003 0310 	and.w	r3, r3, #16
 8002308:	697a      	ldr	r2, [r7, #20]
 800230a:	fa02 f303 	lsl.w	r3, r2, r3
 800230e:	69ba      	ldr	r2, [r7, #24]
 8002310:	4313      	orrs	r3, r2
 8002312:	61bb      	str	r3, [r7, #24]
  /* Write to DAC CR */
  hdac->Instance->CR = tmpreg1;
 8002314:	68fb      	ldr	r3, [r7, #12]
 8002316:	681b      	ldr	r3, [r3, #0]
 8002318:	69ba      	ldr	r2, [r7, #24]
 800231a:	601a      	str	r2, [r3, #0]
  /* Disable wave generation */
  CLEAR_BIT(hdac->Instance->CR, (DAC_CR_WAVE1 << (Channel & 0x10UL)));
 800231c:	68fb      	ldr	r3, [r7, #12]
 800231e:	681b      	ldr	r3, [r3, #0]
 8002320:	6819      	ldr	r1, [r3, #0]
 8002322:	687b      	ldr	r3, [r7, #4]
 8002324:	f003 0310 	and.w	r3, r3, #16
 8002328:	22c0      	movs	r2, #192	@ 0xc0
 800232a:	fa02 f303 	lsl.w	r3, r2, r3
 800232e:	43da      	mvns	r2, r3
 8002330:	68fb      	ldr	r3, [r7, #12]
 8002332:	681b      	ldr	r3, [r3, #0]
 8002334:	400a      	ands	r2, r1
 8002336:	601a      	str	r2, [r3, #0]

  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_READY;
 8002338:	68fb      	ldr	r3, [r7, #12]
 800233a:	2201      	movs	r2, #1
 800233c:	711a      	strb	r2, [r3, #4]

  /* Process unlocked */
  __HAL_UNLOCK(hdac);
 800233e:	68fb      	ldr	r3, [r7, #12]
 8002340:	2200      	movs	r2, #0
 8002342:	715a      	strb	r2, [r3, #5]

  /* Return function status */
  return status;
 8002344:	7ffb      	ldrb	r3, [r7, #31]
}
 8002346:	4618      	mov	r0, r3
 8002348:	3724      	adds	r7, #36	@ 0x24
 800234a:	46bd      	mov	sp, r7
 800234c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002350:	4770      	bx	lr

08002352 <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8002352:	b580      	push	{r7, lr}
 8002354:	b084      	sub	sp, #16
 8002356:	af00      	add	r7, sp, #0
 8002358:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 800235a:	687b      	ldr	r3, [r7, #4]
 800235c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800235e:	60fb      	str	r3, [r7, #12]
  
  uint32_t tickstart = HAL_GetTick();
 8002360:	f7ff fd98 	bl	8001e94 <HAL_GetTick>
 8002364:	60b8      	str	r0, [r7, #8]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8002366:	687b      	ldr	r3, [r7, #4]
 8002368:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 800236c:	b2db      	uxtb	r3, r3
 800236e:	2b02      	cmp	r3, #2
 8002370:	d008      	beq.n	8002384 <HAL_DMA_Abort+0x32>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8002372:	687b      	ldr	r3, [r7, #4]
 8002374:	2280      	movs	r2, #128	@ 0x80
 8002376:	655a      	str	r2, [r3, #84]	@ 0x54
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8002378:	687b      	ldr	r3, [r7, #4]
 800237a:	2200      	movs	r2, #0
 800237c:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    
    return HAL_ERROR;
 8002380:	2301      	movs	r3, #1
 8002382:	e052      	b.n	800242a <HAL_DMA_Abort+0xd8>
  }
  else
  {
    /* Disable all the transfer interrupts */
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8002384:	687b      	ldr	r3, [r7, #4]
 8002386:	681b      	ldr	r3, [r3, #0]
 8002388:	681a      	ldr	r2, [r3, #0]
 800238a:	687b      	ldr	r3, [r7, #4]
 800238c:	681b      	ldr	r3, [r3, #0]
 800238e:	f022 0216 	bic.w	r2, r2, #22
 8002392:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 8002394:	687b      	ldr	r3, [r7, #4]
 8002396:	681b      	ldr	r3, [r3, #0]
 8002398:	695a      	ldr	r2, [r3, #20]
 800239a:	687b      	ldr	r3, [r7, #4]
 800239c:	681b      	ldr	r3, [r3, #0]
 800239e:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 80023a2:	615a      	str	r2, [r3, #20]
    
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 80023a4:	687b      	ldr	r3, [r7, #4]
 80023a6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80023a8:	2b00      	cmp	r3, #0
 80023aa:	d103      	bne.n	80023b4 <HAL_DMA_Abort+0x62>
 80023ac:	687b      	ldr	r3, [r7, #4]
 80023ae:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80023b0:	2b00      	cmp	r3, #0
 80023b2:	d007      	beq.n	80023c4 <HAL_DMA_Abort+0x72>
    {
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 80023b4:	687b      	ldr	r3, [r7, #4]
 80023b6:	681b      	ldr	r3, [r3, #0]
 80023b8:	681a      	ldr	r2, [r3, #0]
 80023ba:	687b      	ldr	r3, [r7, #4]
 80023bc:	681b      	ldr	r3, [r3, #0]
 80023be:	f022 0208 	bic.w	r2, r2, #8
 80023c2:	601a      	str	r2, [r3, #0]
    }
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 80023c4:	687b      	ldr	r3, [r7, #4]
 80023c6:	681b      	ldr	r3, [r3, #0]
 80023c8:	681a      	ldr	r2, [r3, #0]
 80023ca:	687b      	ldr	r3, [r7, #4]
 80023cc:	681b      	ldr	r3, [r3, #0]
 80023ce:	f022 0201 	bic.w	r2, r2, #1
 80023d2:	601a      	str	r2, [r3, #0]
    
    /* Check if the DMA Stream is effectively disabled */
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 80023d4:	e013      	b.n	80023fe <HAL_DMA_Abort+0xac>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 80023d6:	f7ff fd5d 	bl	8001e94 <HAL_GetTick>
 80023da:	4602      	mov	r2, r0
 80023dc:	68bb      	ldr	r3, [r7, #8]
 80023de:	1ad3      	subs	r3, r2, r3
 80023e0:	2b05      	cmp	r3, #5
 80023e2:	d90c      	bls.n	80023fe <HAL_DMA_Abort+0xac>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 80023e4:	687b      	ldr	r3, [r7, #4]
 80023e6:	2220      	movs	r2, #32
 80023e8:	655a      	str	r2, [r3, #84]	@ 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 80023ea:	687b      	ldr	r3, [r7, #4]
 80023ec:	2203      	movs	r2, #3
 80023ee:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
        
        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 80023f2:	687b      	ldr	r3, [r7, #4]
 80023f4:	2200      	movs	r2, #0
 80023f6:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

        return HAL_TIMEOUT;
 80023fa:	2303      	movs	r3, #3
 80023fc:	e015      	b.n	800242a <HAL_DMA_Abort+0xd8>
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 80023fe:	687b      	ldr	r3, [r7, #4]
 8002400:	681b      	ldr	r3, [r3, #0]
 8002402:	681b      	ldr	r3, [r3, #0]
 8002404:	f003 0301 	and.w	r3, r3, #1
 8002408:	2b00      	cmp	r3, #0
 800240a:	d1e4      	bne.n	80023d6 <HAL_DMA_Abort+0x84>
      }
    }
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 800240c:	687b      	ldr	r3, [r7, #4]
 800240e:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002410:	223f      	movs	r2, #63	@ 0x3f
 8002412:	409a      	lsls	r2, r3
 8002414:	68fb      	ldr	r3, [r7, #12]
 8002416:	609a      	str	r2, [r3, #8]
    
    /* Change the DMA state*/
    hdma->State = HAL_DMA_STATE_READY;
 8002418:	687b      	ldr	r3, [r7, #4]
 800241a:	2201      	movs	r2, #1
 800241c:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8002420:	687b      	ldr	r3, [r7, #4]
 8002422:	2200      	movs	r2, #0
 8002424:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    
  }
  return HAL_OK;
 8002428:	2300      	movs	r3, #0
}
 800242a:	4618      	mov	r0, r3
 800242c:	3710      	adds	r7, #16
 800242e:	46bd      	mov	sp, r7
 8002430:	bd80      	pop	{r7, pc}

08002432 <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8002432:	b480      	push	{r7}
 8002434:	b083      	sub	sp, #12
 8002436:	af00      	add	r7, sp, #0
 8002438:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 800243a:	687b      	ldr	r3, [r7, #4]
 800243c:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8002440:	b2db      	uxtb	r3, r3
 8002442:	2b02      	cmp	r3, #2
 8002444:	d004      	beq.n	8002450 <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8002446:	687b      	ldr	r3, [r7, #4]
 8002448:	2280      	movs	r2, #128	@ 0x80
 800244a:	655a      	str	r2, [r3, #84]	@ 0x54
    return HAL_ERROR;
 800244c:	2301      	movs	r3, #1
 800244e:	e00c      	b.n	800246a <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 8002450:	687b      	ldr	r3, [r7, #4]
 8002452:	2205      	movs	r2, #5
 8002454:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8002458:	687b      	ldr	r3, [r7, #4]
 800245a:	681b      	ldr	r3, [r3, #0]
 800245c:	681a      	ldr	r2, [r3, #0]
 800245e:	687b      	ldr	r3, [r7, #4]
 8002460:	681b      	ldr	r3, [r3, #0]
 8002462:	f022 0201 	bic.w	r2, r2, #1
 8002466:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 8002468:	2300      	movs	r3, #0
}
 800246a:	4618      	mov	r0, r3
 800246c:	370c      	adds	r7, #12
 800246e:	46bd      	mov	sp, r7
 8002470:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002474:	4770      	bx	lr
	...

08002478 <HAL_ETH_Init>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_Init(ETH_HandleTypeDef *heth)
{
 8002478:	b580      	push	{r7, lr}
 800247a:	b084      	sub	sp, #16
 800247c:	af00      	add	r7, sp, #0
 800247e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  if (heth == NULL)
 8002480:	687b      	ldr	r3, [r7, #4]
 8002482:	2b00      	cmp	r3, #0
 8002484:	d101      	bne.n	800248a <HAL_ETH_Init+0x12>
  {
    return HAL_ERROR;
 8002486:	2301      	movs	r3, #1
 8002488:	e086      	b.n	8002598 <HAL_ETH_Init+0x120>
  }
  if (heth->gState == HAL_ETH_STATE_RESET)
 800248a:	687b      	ldr	r3, [r7, #4]
 800248c:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8002490:	2b00      	cmp	r3, #0
 8002492:	d106      	bne.n	80024a2 <HAL_ETH_Init+0x2a>
  {
    heth->gState = HAL_ETH_STATE_BUSY;
 8002494:	687b      	ldr	r3, [r7, #4]
 8002496:	2223      	movs	r2, #35	@ 0x23
 8002498:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

    /* Init the low level hardware */
    heth->MspInitCallback(heth);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC. */
    HAL_ETH_MspInit(heth);
 800249c:	6878      	ldr	r0, [r7, #4]
 800249e:	f7ff f97d 	bl	800179c <HAL_ETH_MspInit>

#endif /* (USE_HAL_ETH_REGISTER_CALLBACKS) */
  }

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80024a2:	4b3f      	ldr	r3, [pc, #252]	@ (80025a0 <HAL_ETH_Init+0x128>)
 80024a4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80024a6:	4a3e      	ldr	r2, [pc, #248]	@ (80025a0 <HAL_ETH_Init+0x128>)
 80024a8:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 80024ac:	6453      	str	r3, [r2, #68]	@ 0x44
 80024ae:	4b3c      	ldr	r3, [pc, #240]	@ (80025a0 <HAL_ETH_Init+0x128>)
 80024b0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80024b2:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80024b6:	60bb      	str	r3, [r7, #8]
 80024b8:	68bb      	ldr	r3, [r7, #8]

  /* Select MII or RMII Mode*/
  SYSCFG->PMC &= ~(SYSCFG_PMC_MII_RMII_SEL);
 80024ba:	4b3a      	ldr	r3, [pc, #232]	@ (80025a4 <HAL_ETH_Init+0x12c>)
 80024bc:	685b      	ldr	r3, [r3, #4]
 80024be:	4a39      	ldr	r2, [pc, #228]	@ (80025a4 <HAL_ETH_Init+0x12c>)
 80024c0:	f423 0300 	bic.w	r3, r3, #8388608	@ 0x800000
 80024c4:	6053      	str	r3, [r2, #4]
  SYSCFG->PMC |= (uint32_t)heth->Init.MediaInterface;
 80024c6:	4b37      	ldr	r3, [pc, #220]	@ (80025a4 <HAL_ETH_Init+0x12c>)
 80024c8:	685a      	ldr	r2, [r3, #4]
 80024ca:	687b      	ldr	r3, [r7, #4]
 80024cc:	689b      	ldr	r3, [r3, #8]
 80024ce:	4935      	ldr	r1, [pc, #212]	@ (80025a4 <HAL_ETH_Init+0x12c>)
 80024d0:	4313      	orrs	r3, r2
 80024d2:	604b      	str	r3, [r1, #4]
  /* Dummy read to sync SYSCFG with ETH */
  (void)SYSCFG->PMC;
 80024d4:	4b33      	ldr	r3, [pc, #204]	@ (80025a4 <HAL_ETH_Init+0x12c>)
 80024d6:	685b      	ldr	r3, [r3, #4]

  /* Ethernet Software reset */
  /* Set the SWR bit: resets all MAC subsystem internal registers and logic */
  /* After reset all the registers holds their respective reset values */
  SET_BIT(heth->Instance->DMABMR, ETH_DMABMR_SR);
 80024d8:	687b      	ldr	r3, [r7, #4]
 80024da:	681b      	ldr	r3, [r3, #0]
 80024dc:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 80024e0:	681b      	ldr	r3, [r3, #0]
 80024e2:	687a      	ldr	r2, [r7, #4]
 80024e4:	6812      	ldr	r2, [r2, #0]
 80024e6:	f043 0301 	orr.w	r3, r3, #1
 80024ea:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 80024ee:	6013      	str	r3, [r2, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 80024f0:	f7ff fcd0 	bl	8001e94 <HAL_GetTick>
 80024f4:	60f8      	str	r0, [r7, #12]

  /* Wait for software reset */
  while (READ_BIT(heth->Instance->DMABMR, ETH_DMABMR_SR) > 0U)
 80024f6:	e011      	b.n	800251c <HAL_ETH_Init+0xa4>
  {
    if (((HAL_GetTick() - tickstart) > ETH_SWRESET_TIMEOUT))
 80024f8:	f7ff fccc 	bl	8001e94 <HAL_GetTick>
 80024fc:	4602      	mov	r2, r0
 80024fe:	68fb      	ldr	r3, [r7, #12]
 8002500:	1ad3      	subs	r3, r2, r3
 8002502:	f5b3 7ffa 	cmp.w	r3, #500	@ 0x1f4
 8002506:	d909      	bls.n	800251c <HAL_ETH_Init+0xa4>
    {
      /* Set Error Code */
      heth->ErrorCode = HAL_ETH_ERROR_TIMEOUT;
 8002508:	687b      	ldr	r3, [r7, #4]
 800250a:	2204      	movs	r2, #4
 800250c:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
      /* Set State as Error */
      heth->gState = HAL_ETH_STATE_ERROR;
 8002510:	687b      	ldr	r3, [r7, #4]
 8002512:	22e0      	movs	r2, #224	@ 0xe0
 8002514:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
      /* Return Error */
      return HAL_ERROR;
 8002518:	2301      	movs	r3, #1
 800251a:	e03d      	b.n	8002598 <HAL_ETH_Init+0x120>
  while (READ_BIT(heth->Instance->DMABMR, ETH_DMABMR_SR) > 0U)
 800251c:	687b      	ldr	r3, [r7, #4]
 800251e:	681b      	ldr	r3, [r3, #0]
 8002520:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8002524:	681b      	ldr	r3, [r3, #0]
 8002526:	f003 0301 	and.w	r3, r3, #1
 800252a:	2b00      	cmp	r3, #0
 800252c:	d1e4      	bne.n	80024f8 <HAL_ETH_Init+0x80>
    }
  }


  /*------------------ MAC, MTL and DMA default Configuration ----------------*/
  ETH_MACDMAConfig(heth);
 800252e:	6878      	ldr	r0, [r7, #4]
 8002530:	f000 f97a 	bl	8002828 <ETH_MACDMAConfig>


  /*------------------ DMA Tx Descriptors Configuration ----------------------*/
  ETH_DMATxDescListInit(heth);
 8002534:	6878      	ldr	r0, [r7, #4]
 8002536:	f000 fa25 	bl	8002984 <ETH_DMATxDescListInit>

  /*------------------ DMA Rx Descriptors Configuration ----------------------*/
  ETH_DMARxDescListInit(heth);
 800253a:	6878      	ldr	r0, [r7, #4]
 800253c:	f000 fa7b 	bl	8002a36 <ETH_DMARxDescListInit>

  /*--------------------- ETHERNET MAC Address Configuration ------------------*/
  ETH_MACAddressConfig(heth, ETH_MAC_ADDRESS0, heth->Init.MACAddr);
 8002540:	687b      	ldr	r3, [r7, #4]
 8002542:	685b      	ldr	r3, [r3, #4]
 8002544:	461a      	mov	r2, r3
 8002546:	2100      	movs	r1, #0
 8002548:	6878      	ldr	r0, [r7, #4]
 800254a:	f000 f9e3 	bl	8002914 <ETH_MACAddressConfig>

  /* Disable MMC Interrupts */
  SET_BIT(heth->Instance->MACIMR, ETH_MACIMR_TSTIM | ETH_MACIMR_PMTIM);
 800254e:	687b      	ldr	r3, [r7, #4]
 8002550:	681b      	ldr	r3, [r3, #0]
 8002552:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8002554:	687b      	ldr	r3, [r7, #4]
 8002556:	681b      	ldr	r3, [r3, #0]
 8002558:	f442 7202 	orr.w	r2, r2, #520	@ 0x208
 800255c:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Disable Rx MMC Interrupts */
  SET_BIT(heth->Instance->MMCRIMR, ETH_MMCRIMR_RGUFM | ETH_MMCRIMR_RFAEM | \
 800255e:	687b      	ldr	r3, [r7, #4]
 8002560:	681b      	ldr	r3, [r3, #0]
 8002562:	f8d3 110c 	ldr.w	r1, [r3, #268]	@ 0x10c
 8002566:	687b      	ldr	r3, [r7, #4]
 8002568:	681a      	ldr	r2, [r3, #0]
 800256a:	4b0f      	ldr	r3, [pc, #60]	@ (80025a8 <HAL_ETH_Init+0x130>)
 800256c:	430b      	orrs	r3, r1
 800256e:	f8c2 310c 	str.w	r3, [r2, #268]	@ 0x10c
          ETH_MMCRIMR_RFCEM);

  /* Disable Tx MMC Interrupts */
  SET_BIT(heth->Instance->MMCTIMR, ETH_MMCTIMR_TGFM | ETH_MMCTIMR_TGFMSCM | \
 8002572:	687b      	ldr	r3, [r7, #4]
 8002574:	681b      	ldr	r3, [r3, #0]
 8002576:	f8d3 2110 	ldr.w	r2, [r3, #272]	@ 0x110
 800257a:	687b      	ldr	r3, [r7, #4]
 800257c:	681b      	ldr	r3, [r3, #0]
 800257e:	f442 1203 	orr.w	r2, r2, #2146304	@ 0x20c000
 8002582:	f8c3 2110 	str.w	r2, [r3, #272]	@ 0x110
          ETH_MMCTIMR_TGFSCM);

  heth->ErrorCode = HAL_ETH_ERROR_NONE;
 8002586:	687b      	ldr	r3, [r7, #4]
 8002588:	2200      	movs	r2, #0
 800258a:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
  heth->gState = HAL_ETH_STATE_READY;
 800258e:	687b      	ldr	r3, [r7, #4]
 8002590:	2210      	movs	r2, #16
 8002592:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 8002596:	2300      	movs	r3, #0
}
 8002598:	4618      	mov	r0, r3
 800259a:	3710      	adds	r7, #16
 800259c:	46bd      	mov	sp, r7
 800259e:	bd80      	pop	{r7, pc}
 80025a0:	40023800 	.word	0x40023800
 80025a4:	40013800 	.word	0x40013800
 80025a8:	00020060 	.word	0x00020060

080025ac <ETH_SetMACConfig>:
  HAL_Delay(ETH_REG_WRITE_DELAY);
  (heth->Instance)->DMAOMR = tmpreg;
}

static void ETH_SetMACConfig(ETH_HandleTypeDef *heth, const ETH_MACConfigTypeDef *macconf)
{
 80025ac:	b580      	push	{r7, lr}
 80025ae:	b084      	sub	sp, #16
 80025b0:	af00      	add	r7, sp, #0
 80025b2:	6078      	str	r0, [r7, #4]
 80025b4:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg1;

  /*------------------------ ETHERNET MACCR Configuration --------------------*/
  /* Get the ETHERNET MACCR value */
  tmpreg1 = (heth->Instance)->MACCR;
 80025b6:	687b      	ldr	r3, [r7, #4]
 80025b8:	681b      	ldr	r3, [r3, #0]
 80025ba:	681b      	ldr	r3, [r3, #0]
 80025bc:	60fb      	str	r3, [r7, #12]
  /* Clear CSTF, WD, PCE, PS, TE and RE bits */
  tmpreg1 &= ETH_MACCR_CLEAR_MASK;
 80025be:	68fa      	ldr	r2, [r7, #12]
 80025c0:	4b53      	ldr	r3, [pc, #332]	@ (8002710 <ETH_SetMACConfig+0x164>)
 80025c2:	4013      	ands	r3, r2
 80025c4:	60fb      	str	r3, [r7, #12]

  tmpreg1 |= (uint32_t)(((uint32_t)macconf->CRCStripTypePacket << 25U) |
 80025c6:	683b      	ldr	r3, [r7, #0]
 80025c8:	7b9b      	ldrb	r3, [r3, #14]
 80025ca:	065b      	lsls	r3, r3, #25
                        ((uint32_t)((macconf->Watchdog == DISABLE) ? 1U : 0U) << 23U) |
 80025cc:	683a      	ldr	r2, [r7, #0]
 80025ce:	7c12      	ldrb	r2, [r2, #16]
 80025d0:	2a00      	cmp	r2, #0
 80025d2:	d102      	bne.n	80025da <ETH_SetMACConfig+0x2e>
 80025d4:	f44f 0200 	mov.w	r2, #8388608	@ 0x800000
 80025d8:	e000      	b.n	80025dc <ETH_SetMACConfig+0x30>
 80025da:	2200      	movs	r2, #0
  tmpreg1 |= (uint32_t)(((uint32_t)macconf->CRCStripTypePacket << 25U) |
 80025dc:	4313      	orrs	r3, r2
                        ((uint32_t)((macconf->Jabber == DISABLE) ? 1U : 0U) << 22U) |
 80025de:	683a      	ldr	r2, [r7, #0]
 80025e0:	7c52      	ldrb	r2, [r2, #17]
 80025e2:	2a00      	cmp	r2, #0
 80025e4:	d102      	bne.n	80025ec <ETH_SetMACConfig+0x40>
 80025e6:	f44f 0280 	mov.w	r2, #4194304	@ 0x400000
 80025ea:	e000      	b.n	80025ee <ETH_SetMACConfig+0x42>
 80025ec:	2200      	movs	r2, #0
                        ((uint32_t)((macconf->Watchdog == DISABLE) ? 1U : 0U) << 23U) |
 80025ee:	431a      	orrs	r2, r3
                        (uint32_t)macconf->InterPacketGapVal |
 80025f0:	683b      	ldr	r3, [r7, #0]
 80025f2:	689b      	ldr	r3, [r3, #8]
                        ((uint32_t)((macconf->Jabber == DISABLE) ? 1U : 0U) << 22U) |
 80025f4:	431a      	orrs	r2, r3
                        ((uint32_t)macconf->CarrierSenseDuringTransmit << 16U) |
 80025f6:	683b      	ldr	r3, [r7, #0]
 80025f8:	7fdb      	ldrb	r3, [r3, #31]
 80025fa:	041b      	lsls	r3, r3, #16
                        (uint32_t)macconf->InterPacketGapVal |
 80025fc:	431a      	orrs	r2, r3
                        macconf->Speed |
 80025fe:	683b      	ldr	r3, [r7, #0]
 8002600:	695b      	ldr	r3, [r3, #20]
                        ((uint32_t)macconf->CarrierSenseDuringTransmit << 16U) |
 8002602:	4313      	orrs	r3, r2
                        ((uint32_t)((macconf->ReceiveOwn == DISABLE) ? 1U : 0U) << 13U) |
 8002604:	683a      	ldr	r2, [r7, #0]
 8002606:	7f92      	ldrb	r2, [r2, #30]
 8002608:	2a00      	cmp	r2, #0
 800260a:	d102      	bne.n	8002612 <ETH_SetMACConfig+0x66>
 800260c:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 8002610:	e000      	b.n	8002614 <ETH_SetMACConfig+0x68>
 8002612:	2200      	movs	r2, #0
                        macconf->Speed |
 8002614:	431a      	orrs	r2, r3
                        ((uint32_t)macconf->LoopbackMode << 12U) |
 8002616:	683b      	ldr	r3, [r7, #0]
 8002618:	7f1b      	ldrb	r3, [r3, #28]
 800261a:	031b      	lsls	r3, r3, #12
                        ((uint32_t)((macconf->ReceiveOwn == DISABLE) ? 1U : 0U) << 13U) |
 800261c:	431a      	orrs	r2, r3
                        macconf->DuplexMode |
 800261e:	683b      	ldr	r3, [r7, #0]
 8002620:	699b      	ldr	r3, [r3, #24]
                        ((uint32_t)macconf->LoopbackMode << 12U) |
 8002622:	431a      	orrs	r2, r3
                        ((uint32_t)macconf->ChecksumOffload << 10U) |
 8002624:	683b      	ldr	r3, [r7, #0]
 8002626:	791b      	ldrb	r3, [r3, #4]
 8002628:	029b      	lsls	r3, r3, #10
                        macconf->DuplexMode |
 800262a:	4313      	orrs	r3, r2
                        ((uint32_t)((macconf->RetryTransmission == DISABLE) ? 1U : 0U) << 9U) |
 800262c:	683a      	ldr	r2, [r7, #0]
 800262e:	f892 2020 	ldrb.w	r2, [r2, #32]
 8002632:	2a00      	cmp	r2, #0
 8002634:	d102      	bne.n	800263c <ETH_SetMACConfig+0x90>
 8002636:	f44f 7200 	mov.w	r2, #512	@ 0x200
 800263a:	e000      	b.n	800263e <ETH_SetMACConfig+0x92>
 800263c:	2200      	movs	r2, #0
                        ((uint32_t)macconf->ChecksumOffload << 10U) |
 800263e:	431a      	orrs	r2, r3
                        ((uint32_t)macconf->AutomaticPadCRCStrip << 7U) |
 8002640:	683b      	ldr	r3, [r7, #0]
 8002642:	7bdb      	ldrb	r3, [r3, #15]
 8002644:	01db      	lsls	r3, r3, #7
                        ((uint32_t)((macconf->RetryTransmission == DISABLE) ? 1U : 0U) << 9U) |
 8002646:	431a      	orrs	r2, r3
                        macconf->BackOffLimit |
 8002648:	683b      	ldr	r3, [r7, #0]
 800264a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
                        ((uint32_t)macconf->AutomaticPadCRCStrip << 7U) |
 800264c:	431a      	orrs	r2, r3
                        ((uint32_t)macconf->DeferralCheck << 4U));
 800264e:	683b      	ldr	r3, [r7, #0]
 8002650:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8002654:	011b      	lsls	r3, r3, #4
  tmpreg1 |= (uint32_t)(((uint32_t)macconf->CRCStripTypePacket << 25U) |
 8002656:	4313      	orrs	r3, r2
 8002658:	68fa      	ldr	r2, [r7, #12]
 800265a:	4313      	orrs	r3, r2
 800265c:	60fb      	str	r3, [r7, #12]

  /* Write to ETHERNET MACCR */
  (heth->Instance)->MACCR = (uint32_t)tmpreg1;
 800265e:	687b      	ldr	r3, [r7, #4]
 8002660:	681b      	ldr	r3, [r3, #0]
 8002662:	68fa      	ldr	r2, [r7, #12]
 8002664:	601a      	str	r2, [r3, #0]

  /* Wait until the write operation will be taken into account :
  at least four TX_CLK/RX_CLK clock cycles */
  tmpreg1 = (heth->Instance)->MACCR;
 8002666:	687b      	ldr	r3, [r7, #4]
 8002668:	681b      	ldr	r3, [r3, #0]
 800266a:	681b      	ldr	r3, [r3, #0]
 800266c:	60fb      	str	r3, [r7, #12]
  HAL_Delay(ETH_REG_WRITE_DELAY);
 800266e:	2001      	movs	r0, #1
 8002670:	f7ff fc1c 	bl	8001eac <HAL_Delay>
  (heth->Instance)->MACCR = tmpreg1;
 8002674:	687b      	ldr	r3, [r7, #4]
 8002676:	681b      	ldr	r3, [r3, #0]
 8002678:	68fa      	ldr	r2, [r7, #12]
 800267a:	601a      	str	r2, [r3, #0]

  /*----------------------- ETHERNET MACFCR Configuration --------------------*/

  /* Get the ETHERNET MACFCR value */
  tmpreg1 = (heth->Instance)->MACFCR;
 800267c:	687b      	ldr	r3, [r7, #4]
 800267e:	681b      	ldr	r3, [r3, #0]
 8002680:	699b      	ldr	r3, [r3, #24]
 8002682:	60fb      	str	r3, [r7, #12]
  /* Clear xx bits */
  tmpreg1 &= ETH_MACFCR_CLEAR_MASK;
 8002684:	68fa      	ldr	r2, [r7, #12]
 8002686:	f64f 7341 	movw	r3, #65345	@ 0xff41
 800268a:	4013      	ands	r3, r2
 800268c:	60fb      	str	r3, [r7, #12]

  tmpreg1 |= (uint32_t)((macconf->PauseTime << 16U) |
 800268e:	683b      	ldr	r3, [r7, #0]
 8002690:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8002692:	041b      	lsls	r3, r3, #16
                        ((uint32_t)((macconf->ZeroQuantaPause == DISABLE) ? 1U : 0U) << 7U) |
 8002694:	683a      	ldr	r2, [r7, #0]
 8002696:	f892 204c 	ldrb.w	r2, [r2, #76]	@ 0x4c
 800269a:	2a00      	cmp	r2, #0
 800269c:	d101      	bne.n	80026a2 <ETH_SetMACConfig+0xf6>
 800269e:	2280      	movs	r2, #128	@ 0x80
 80026a0:	e000      	b.n	80026a4 <ETH_SetMACConfig+0xf8>
 80026a2:	2200      	movs	r2, #0
  tmpreg1 |= (uint32_t)((macconf->PauseTime << 16U) |
 80026a4:	431a      	orrs	r2, r3
                        macconf->PauseLowThreshold |
 80026a6:	683b      	ldr	r3, [r7, #0]
 80026a8:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
                        ((uint32_t)((macconf->ZeroQuantaPause == DISABLE) ? 1U : 0U) << 7U) |
 80026aa:	4313      	orrs	r3, r2
                        ((uint32_t)((macconf->UnicastPausePacketDetect == ENABLE) ? 1U : 0U) << 3U) |
 80026ac:	683a      	ldr	r2, [r7, #0]
 80026ae:	f892 2055 	ldrb.w	r2, [r2, #85]	@ 0x55
 80026b2:	2a01      	cmp	r2, #1
 80026b4:	d101      	bne.n	80026ba <ETH_SetMACConfig+0x10e>
 80026b6:	2208      	movs	r2, #8
 80026b8:	e000      	b.n	80026bc <ETH_SetMACConfig+0x110>
 80026ba:	2200      	movs	r2, #0
                        macconf->PauseLowThreshold |
 80026bc:	4313      	orrs	r3, r2
                        ((uint32_t)((macconf->ReceiveFlowControl == ENABLE) ? 1U : 0U) << 2U) |
 80026be:	683a      	ldr	r2, [r7, #0]
 80026c0:	f892 2056 	ldrb.w	r2, [r2, #86]	@ 0x56
 80026c4:	2a01      	cmp	r2, #1
 80026c6:	d101      	bne.n	80026cc <ETH_SetMACConfig+0x120>
 80026c8:	2204      	movs	r2, #4
 80026ca:	e000      	b.n	80026ce <ETH_SetMACConfig+0x122>
 80026cc:	2200      	movs	r2, #0
                        ((uint32_t)((macconf->UnicastPausePacketDetect == ENABLE) ? 1U : 0U) << 3U) |
 80026ce:	4313      	orrs	r3, r2
                        ((uint32_t)((macconf->TransmitFlowControl == ENABLE) ? 1U : 0U) << 1U));
 80026d0:	683a      	ldr	r2, [r7, #0]
 80026d2:	f892 2054 	ldrb.w	r2, [r2, #84]	@ 0x54
 80026d6:	2a01      	cmp	r2, #1
 80026d8:	d101      	bne.n	80026de <ETH_SetMACConfig+0x132>
 80026da:	2202      	movs	r2, #2
 80026dc:	e000      	b.n	80026e0 <ETH_SetMACConfig+0x134>
 80026de:	2200      	movs	r2, #0
  tmpreg1 |= (uint32_t)((macconf->PauseTime << 16U) |
 80026e0:	4313      	orrs	r3, r2
 80026e2:	68fa      	ldr	r2, [r7, #12]
 80026e4:	4313      	orrs	r3, r2
 80026e6:	60fb      	str	r3, [r7, #12]

  /* Write to ETHERNET MACFCR */
  (heth->Instance)->MACFCR = (uint32_t)tmpreg1;
 80026e8:	687b      	ldr	r3, [r7, #4]
 80026ea:	681b      	ldr	r3, [r3, #0]
 80026ec:	68fa      	ldr	r2, [r7, #12]
 80026ee:	619a      	str	r2, [r3, #24]

  /* Wait until the write operation will be taken into account :
  at least four TX_CLK/RX_CLK clock cycles */
  tmpreg1 = (heth->Instance)->MACFCR;
 80026f0:	687b      	ldr	r3, [r7, #4]
 80026f2:	681b      	ldr	r3, [r3, #0]
 80026f4:	699b      	ldr	r3, [r3, #24]
 80026f6:	60fb      	str	r3, [r7, #12]
  HAL_Delay(ETH_REG_WRITE_DELAY);
 80026f8:	2001      	movs	r0, #1
 80026fa:	f7ff fbd7 	bl	8001eac <HAL_Delay>
  (heth->Instance)->MACFCR = tmpreg1;
 80026fe:	687b      	ldr	r3, [r7, #4]
 8002700:	681b      	ldr	r3, [r3, #0]
 8002702:	68fa      	ldr	r2, [r7, #12]
 8002704:	619a      	str	r2, [r3, #24]
}
 8002706:	bf00      	nop
 8002708:	3710      	adds	r7, #16
 800270a:	46bd      	mov	sp, r7
 800270c:	bd80      	pop	{r7, pc}
 800270e:	bf00      	nop
 8002710:	fd20810f 	.word	0xfd20810f

08002714 <ETH_SetDMAConfig>:

static void ETH_SetDMAConfig(ETH_HandleTypeDef *heth, const ETH_DMAConfigTypeDef *dmaconf)
{
 8002714:	b580      	push	{r7, lr}
 8002716:	b084      	sub	sp, #16
 8002718:	af00      	add	r7, sp, #0
 800271a:	6078      	str	r0, [r7, #4]
 800271c:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg1;

  /*----------------------- ETHERNET DMAOMR Configuration --------------------*/
  /* Get the ETHERNET DMAOMR value */
  tmpreg1 = (heth->Instance)->DMAOMR;
 800271e:	687b      	ldr	r3, [r7, #4]
 8002720:	681b      	ldr	r3, [r3, #0]
 8002722:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8002726:	699b      	ldr	r3, [r3, #24]
 8002728:	60fb      	str	r3, [r7, #12]
  /* Clear xx bits */
  tmpreg1 &= ETH_DMAOMR_CLEAR_MASK;
 800272a:	68fa      	ldr	r2, [r7, #12]
 800272c:	4b3d      	ldr	r3, [pc, #244]	@ (8002824 <ETH_SetDMAConfig+0x110>)
 800272e:	4013      	ands	r3, r2
 8002730:	60fb      	str	r3, [r7, #12]

  tmpreg1 |= (uint32_t)(((uint32_t)((dmaconf->DropTCPIPChecksumErrorFrame == DISABLE) ? 1U : 0U) << 26U) |
 8002732:	683b      	ldr	r3, [r7, #0]
 8002734:	7b1b      	ldrb	r3, [r3, #12]
 8002736:	2b00      	cmp	r3, #0
 8002738:	d102      	bne.n	8002740 <ETH_SetDMAConfig+0x2c>
 800273a:	f04f 6280 	mov.w	r2, #67108864	@ 0x4000000
 800273e:	e000      	b.n	8002742 <ETH_SetDMAConfig+0x2e>
 8002740:	2200      	movs	r2, #0
                        ((uint32_t)dmaconf->ReceiveStoreForward << 25U) |
 8002742:	683b      	ldr	r3, [r7, #0]
 8002744:	7b5b      	ldrb	r3, [r3, #13]
 8002746:	065b      	lsls	r3, r3, #25
  tmpreg1 |= (uint32_t)(((uint32_t)((dmaconf->DropTCPIPChecksumErrorFrame == DISABLE) ? 1U : 0U) << 26U) |
 8002748:	4313      	orrs	r3, r2
                        ((uint32_t)((dmaconf->FlushRxPacket == DISABLE) ? 1U : 0U) << 20U) |
 800274a:	683a      	ldr	r2, [r7, #0]
 800274c:	7f52      	ldrb	r2, [r2, #29]
 800274e:	2a00      	cmp	r2, #0
 8002750:	d102      	bne.n	8002758 <ETH_SetDMAConfig+0x44>
 8002752:	f44f 1280 	mov.w	r2, #1048576	@ 0x100000
 8002756:	e000      	b.n	800275a <ETH_SetDMAConfig+0x46>
 8002758:	2200      	movs	r2, #0
                        ((uint32_t)dmaconf->ReceiveStoreForward << 25U) |
 800275a:	431a      	orrs	r2, r3
                        ((uint32_t)dmaconf->TransmitStoreForward << 21U) |
 800275c:	683b      	ldr	r3, [r7, #0]
 800275e:	7b9b      	ldrb	r3, [r3, #14]
 8002760:	055b      	lsls	r3, r3, #21
                        ((uint32_t)((dmaconf->FlushRxPacket == DISABLE) ? 1U : 0U) << 20U) |
 8002762:	431a      	orrs	r2, r3
                        dmaconf->TransmitThresholdControl |
 8002764:	683b      	ldr	r3, [r7, #0]
 8002766:	695b      	ldr	r3, [r3, #20]
                        ((uint32_t)dmaconf->TransmitStoreForward << 21U) |
 8002768:	431a      	orrs	r2, r3
                        ((uint32_t)dmaconf->ForwardErrorFrames << 7U) |
 800276a:	683b      	ldr	r3, [r7, #0]
 800276c:	7f1b      	ldrb	r3, [r3, #28]
 800276e:	01db      	lsls	r3, r3, #7
                        dmaconf->TransmitThresholdControl |
 8002770:	431a      	orrs	r2, r3
                        ((uint32_t)dmaconf->ForwardUndersizedGoodFrames << 6U) |
 8002772:	683b      	ldr	r3, [r7, #0]
 8002774:	7f9b      	ldrb	r3, [r3, #30]
 8002776:	019b      	lsls	r3, r3, #6
                        ((uint32_t)dmaconf->ForwardErrorFrames << 7U) |
 8002778:	431a      	orrs	r2, r3
                        dmaconf->ReceiveThresholdControl |
 800277a:	683b      	ldr	r3, [r7, #0]
 800277c:	6a1b      	ldr	r3, [r3, #32]
                        ((uint32_t)dmaconf->ForwardUndersizedGoodFrames << 6U) |
 800277e:	431a      	orrs	r2, r3
                        ((uint32_t)dmaconf->SecondFrameOperate << 2U));
 8002780:	683b      	ldr	r3, [r7, #0]
 8002782:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 8002786:	009b      	lsls	r3, r3, #2
  tmpreg1 |= (uint32_t)(((uint32_t)((dmaconf->DropTCPIPChecksumErrorFrame == DISABLE) ? 1U : 0U) << 26U) |
 8002788:	4313      	orrs	r3, r2
 800278a:	68fa      	ldr	r2, [r7, #12]
 800278c:	4313      	orrs	r3, r2
 800278e:	60fb      	str	r3, [r7, #12]

  /* Write to ETHERNET DMAOMR */
  (heth->Instance)->DMAOMR = (uint32_t)tmpreg1;
 8002790:	687b      	ldr	r3, [r7, #4]
 8002792:	681b      	ldr	r3, [r3, #0]
 8002794:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8002798:	461a      	mov	r2, r3
 800279a:	68fb      	ldr	r3, [r7, #12]
 800279c:	6193      	str	r3, [r2, #24]

  /* Wait until the write operation will be taken into account:
  at least four TX_CLK/RX_CLK clock cycles */
  tmpreg1 = (heth->Instance)->DMAOMR;
 800279e:	687b      	ldr	r3, [r7, #4]
 80027a0:	681b      	ldr	r3, [r3, #0]
 80027a2:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 80027a6:	699b      	ldr	r3, [r3, #24]
 80027a8:	60fb      	str	r3, [r7, #12]
  HAL_Delay(ETH_REG_WRITE_DELAY);
 80027aa:	2001      	movs	r0, #1
 80027ac:	f7ff fb7e 	bl	8001eac <HAL_Delay>
  (heth->Instance)->DMAOMR = tmpreg1;
 80027b0:	687b      	ldr	r3, [r7, #4]
 80027b2:	681b      	ldr	r3, [r3, #0]
 80027b4:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 80027b8:	461a      	mov	r2, r3
 80027ba:	68fb      	ldr	r3, [r7, #12]
 80027bc:	6193      	str	r3, [r2, #24]

  /*----------------------- ETHERNET DMABMR Configuration --------------------*/
  (heth->Instance)->DMABMR = (uint32_t)(((uint32_t)dmaconf->AddressAlignedBeats << 25U) |
 80027be:	683b      	ldr	r3, [r7, #0]
 80027c0:	791b      	ldrb	r3, [r3, #4]
 80027c2:	065a      	lsls	r2, r3, #25
                                        dmaconf->BurstMode |
 80027c4:	683b      	ldr	r3, [r7, #0]
 80027c6:	689b      	ldr	r3, [r3, #8]
  (heth->Instance)->DMABMR = (uint32_t)(((uint32_t)dmaconf->AddressAlignedBeats << 25U) |
 80027c8:	431a      	orrs	r2, r3
                                        dmaconf->RxDMABurstLength | /* !! if 4xPBL is selected for Tx or
 80027ca:	683b      	ldr	r3, [r7, #0]
 80027cc:	699b      	ldr	r3, [r3, #24]
                                        dmaconf->BurstMode |
 80027ce:	431a      	orrs	r2, r3
                                                                       Rx it is applied for the other */
                                        dmaconf->TxDMABurstLength |
 80027d0:	683b      	ldr	r3, [r7, #0]
 80027d2:	691b      	ldr	r3, [r3, #16]
                                        dmaconf->RxDMABurstLength | /* !! if 4xPBL is selected for Tx or
 80027d4:	431a      	orrs	r2, r3
                                        ((uint32_t)dmaconf->EnhancedDescriptorFormat << 7U) |
 80027d6:	683b      	ldr	r3, [r7, #0]
 80027d8:	f893 3025 	ldrb.w	r3, [r3, #37]	@ 0x25
 80027dc:	01db      	lsls	r3, r3, #7
                                        dmaconf->TxDMABurstLength |
 80027de:	431a      	orrs	r2, r3
                                        (dmaconf->DescriptorSkipLength << 2U) |
 80027e0:	683b      	ldr	r3, [r7, #0]
 80027e2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80027e4:	009b      	lsls	r3, r3, #2
                                        ((uint32_t)dmaconf->EnhancedDescriptorFormat << 7U) |
 80027e6:	431a      	orrs	r2, r3
                                        dmaconf->DMAArbitration |
 80027e8:	683b      	ldr	r3, [r7, #0]
 80027ea:	681b      	ldr	r3, [r3, #0]
                                        (dmaconf->DescriptorSkipLength << 2U) |
 80027ec:	4313      	orrs	r3, r2
  (heth->Instance)->DMABMR = (uint32_t)(((uint32_t)dmaconf->AddressAlignedBeats << 25U) |
 80027ee:	687a      	ldr	r2, [r7, #4]
 80027f0:	6812      	ldr	r2, [r2, #0]
 80027f2:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 80027f6:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 80027fa:	6013      	str	r3, [r2, #0]
                                        ETH_DMABMR_USP); /* Enable use of separate PBL for Rx and Tx */

  /* Wait until the write operation will be taken into account:
     at least four TX_CLK/RX_CLK clock cycles */
  tmpreg1 = (heth->Instance)->DMABMR;
 80027fc:	687b      	ldr	r3, [r7, #4]
 80027fe:	681b      	ldr	r3, [r3, #0]
 8002800:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8002804:	681b      	ldr	r3, [r3, #0]
 8002806:	60fb      	str	r3, [r7, #12]
  HAL_Delay(ETH_REG_WRITE_DELAY);
 8002808:	2001      	movs	r0, #1
 800280a:	f7ff fb4f 	bl	8001eac <HAL_Delay>
  (heth->Instance)->DMABMR = tmpreg1;
 800280e:	687b      	ldr	r3, [r7, #4]
 8002810:	681b      	ldr	r3, [r3, #0]
 8002812:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8002816:	461a      	mov	r2, r3
 8002818:	68fb      	ldr	r3, [r7, #12]
 800281a:	6013      	str	r3, [r2, #0]
}
 800281c:	bf00      	nop
 800281e:	3710      	adds	r7, #16
 8002820:	46bd      	mov	sp, r7
 8002822:	bd80      	pop	{r7, pc}
 8002824:	f8de3f23 	.word	0xf8de3f23

08002828 <ETH_MACDMAConfig>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
static void ETH_MACDMAConfig(ETH_HandleTypeDef *heth)
{
 8002828:	b580      	push	{r7, lr}
 800282a:	b0a6      	sub	sp, #152	@ 0x98
 800282c:	af00      	add	r7, sp, #0
 800282e:	6078      	str	r0, [r7, #4]
  ETH_MACConfigTypeDef macDefaultConf;
  ETH_DMAConfigTypeDef dmaDefaultConf;

  /*--------------- ETHERNET MAC registers default Configuration --------------*/
  macDefaultConf.Watchdog = ENABLE;
 8002830:	2301      	movs	r3, #1
 8002832:	f887 3044 	strb.w	r3, [r7, #68]	@ 0x44
  macDefaultConf.Jabber = ENABLE;
 8002836:	2301      	movs	r3, #1
 8002838:	f887 3045 	strb.w	r3, [r7, #69]	@ 0x45
  macDefaultConf.InterPacketGapVal = ETH_INTERFRAMEGAP_96BIT;
 800283c:	2300      	movs	r3, #0
 800283e:	63fb      	str	r3, [r7, #60]	@ 0x3c
  macDefaultConf.CarrierSenseDuringTransmit = DISABLE;
 8002840:	2300      	movs	r3, #0
 8002842:	f887 3053 	strb.w	r3, [r7, #83]	@ 0x53
  macDefaultConf.ReceiveOwn = ENABLE;
 8002846:	2301      	movs	r3, #1
 8002848:	f887 3052 	strb.w	r3, [r7, #82]	@ 0x52
  macDefaultConf.LoopbackMode = DISABLE;
 800284c:	2300      	movs	r3, #0
 800284e:	f887 3050 	strb.w	r3, [r7, #80]	@ 0x50
  macDefaultConf.CRCStripTypePacket = ENABLE;
 8002852:	2301      	movs	r3, #1
 8002854:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
  macDefaultConf.ChecksumOffload = ENABLE;
 8002858:	2301      	movs	r3, #1
 800285a:	f887 3038 	strb.w	r3, [r7, #56]	@ 0x38
  macDefaultConf.RetryTransmission = DISABLE;
 800285e:	2300      	movs	r3, #0
 8002860:	f887 3054 	strb.w	r3, [r7, #84]	@ 0x54
  macDefaultConf.AutomaticPadCRCStrip = DISABLE;
 8002864:	2300      	movs	r3, #0
 8002866:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
  macDefaultConf.BackOffLimit = ETH_BACKOFFLIMIT_10;
 800286a:	2300      	movs	r3, #0
 800286c:	65bb      	str	r3, [r7, #88]	@ 0x58
  macDefaultConf.DeferralCheck = DISABLE;
 800286e:	2300      	movs	r3, #0
 8002870:	f887 305c 	strb.w	r3, [r7, #92]	@ 0x5c
  macDefaultConf.PauseTime = 0x0U;
 8002874:	2300      	movs	r3, #0
 8002876:	67fb      	str	r3, [r7, #124]	@ 0x7c
  macDefaultConf.ZeroQuantaPause = DISABLE;
 8002878:	2300      	movs	r3, #0
 800287a:	f887 3080 	strb.w	r3, [r7, #128]	@ 0x80
  macDefaultConf.PauseLowThreshold = ETH_PAUSELOWTHRESHOLD_MINUS4;
 800287e:	2300      	movs	r3, #0
 8002880:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
  macDefaultConf.ReceiveFlowControl = DISABLE;
 8002884:	2300      	movs	r3, #0
 8002886:	f887 308a 	strb.w	r3, [r7, #138]	@ 0x8a
  macDefaultConf.TransmitFlowControl = DISABLE;
 800288a:	2300      	movs	r3, #0
 800288c:	f887 3088 	strb.w	r3, [r7, #136]	@ 0x88
  macDefaultConf.Speed = ETH_SPEED_100M;
 8002890:	f44f 4380 	mov.w	r3, #16384	@ 0x4000
 8002894:	64bb      	str	r3, [r7, #72]	@ 0x48
  macDefaultConf.DuplexMode = ETH_FULLDUPLEX_MODE;
 8002896:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 800289a:	64fb      	str	r3, [r7, #76]	@ 0x4c
  macDefaultConf.UnicastPausePacketDetect = DISABLE;
 800289c:	2300      	movs	r3, #0
 800289e:	f887 3089 	strb.w	r3, [r7, #137]	@ 0x89

  /* MAC default configuration */
  ETH_SetMACConfig(heth, &macDefaultConf);
 80028a2:	f107 0334 	add.w	r3, r7, #52	@ 0x34
 80028a6:	4619      	mov	r1, r3
 80028a8:	6878      	ldr	r0, [r7, #4]
 80028aa:	f7ff fe7f 	bl	80025ac <ETH_SetMACConfig>

  /*--------------- ETHERNET DMA registers default Configuration --------------*/
  dmaDefaultConf.DropTCPIPChecksumErrorFrame = ENABLE;
 80028ae:	2301      	movs	r3, #1
 80028b0:	753b      	strb	r3, [r7, #20]
  dmaDefaultConf.ReceiveStoreForward = ENABLE;
 80028b2:	2301      	movs	r3, #1
 80028b4:	757b      	strb	r3, [r7, #21]
  dmaDefaultConf.FlushRxPacket = ENABLE;
 80028b6:	2301      	movs	r3, #1
 80028b8:	f887 3025 	strb.w	r3, [r7, #37]	@ 0x25
  dmaDefaultConf.TransmitStoreForward = ENABLE;
 80028bc:	2301      	movs	r3, #1
 80028be:	75bb      	strb	r3, [r7, #22]
  dmaDefaultConf.TransmitThresholdControl = ETH_TRANSMITTHRESHOLDCONTROL_64BYTES;
 80028c0:	2300      	movs	r3, #0
 80028c2:	61fb      	str	r3, [r7, #28]
  dmaDefaultConf.ForwardErrorFrames = DISABLE;
 80028c4:	2300      	movs	r3, #0
 80028c6:	f887 3024 	strb.w	r3, [r7, #36]	@ 0x24
  dmaDefaultConf.ForwardUndersizedGoodFrames = DISABLE;
 80028ca:	2300      	movs	r3, #0
 80028cc:	f887 3026 	strb.w	r3, [r7, #38]	@ 0x26
  dmaDefaultConf.ReceiveThresholdControl = ETH_RECEIVEDTHRESHOLDCONTROL_64BYTES;
 80028d0:	2300      	movs	r3, #0
 80028d2:	62bb      	str	r3, [r7, #40]	@ 0x28
  dmaDefaultConf.SecondFrameOperate = ENABLE;
 80028d4:	2301      	movs	r3, #1
 80028d6:	f887 302c 	strb.w	r3, [r7, #44]	@ 0x2c
  dmaDefaultConf.AddressAlignedBeats = ENABLE;
 80028da:	2301      	movs	r3, #1
 80028dc:	733b      	strb	r3, [r7, #12]
  dmaDefaultConf.BurstMode = ETH_BURSTLENGTH_FIXED;
 80028de:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 80028e2:	613b      	str	r3, [r7, #16]
  dmaDefaultConf.RxDMABurstLength = ETH_RXDMABURSTLENGTH_32BEAT;
 80028e4:	f44f 0380 	mov.w	r3, #4194304	@ 0x400000
 80028e8:	623b      	str	r3, [r7, #32]
  dmaDefaultConf.TxDMABurstLength = ETH_TXDMABURSTLENGTH_32BEAT;
 80028ea:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 80028ee:	61bb      	str	r3, [r7, #24]
  dmaDefaultConf.EnhancedDescriptorFormat = ENABLE;
 80028f0:	2301      	movs	r3, #1
 80028f2:	f887 302d 	strb.w	r3, [r7, #45]	@ 0x2d
  dmaDefaultConf.DescriptorSkipLength = 0x0U;
 80028f6:	2300      	movs	r3, #0
 80028f8:	633b      	str	r3, [r7, #48]	@ 0x30
  dmaDefaultConf.DMAArbitration = ETH_DMAARBITRATION_ROUNDROBIN_RXTX_1_1;
 80028fa:	2300      	movs	r3, #0
 80028fc:	60bb      	str	r3, [r7, #8]

  /* DMA default configuration */
  ETH_SetDMAConfig(heth, &dmaDefaultConf);
 80028fe:	f107 0308 	add.w	r3, r7, #8
 8002902:	4619      	mov	r1, r3
 8002904:	6878      	ldr	r0, [r7, #4]
 8002906:	f7ff ff05 	bl	8002714 <ETH_SetDMAConfig>
}
 800290a:	bf00      	nop
 800290c:	3798      	adds	r7, #152	@ 0x98
 800290e:	46bd      	mov	sp, r7
 8002910:	bd80      	pop	{r7, pc}
	...

08002914 <ETH_MACAddressConfig>:
  *             @arg ETH_MAC_Address3: MAC Address3
  * @param  Addr Pointer to MAC address buffer data (6 bytes)
  * @retval HAL status
  */
static void ETH_MACAddressConfig(ETH_HandleTypeDef *heth, uint32_t MacAddr, uint8_t *Addr)
{
 8002914:	b480      	push	{r7}
 8002916:	b087      	sub	sp, #28
 8002918:	af00      	add	r7, sp, #0
 800291a:	60f8      	str	r0, [r7, #12]
 800291c:	60b9      	str	r1, [r7, #8]
 800291e:	607a      	str	r2, [r7, #4]

  /* Prevent unused argument(s) compilation warning */
  UNUSED(heth);

  /* Calculate the selected MAC address high register */
  tmpreg1 = ((uint32_t)Addr[5U] << 8U) | (uint32_t)Addr[4U];
 8002920:	687b      	ldr	r3, [r7, #4]
 8002922:	3305      	adds	r3, #5
 8002924:	781b      	ldrb	r3, [r3, #0]
 8002926:	021b      	lsls	r3, r3, #8
 8002928:	687a      	ldr	r2, [r7, #4]
 800292a:	3204      	adds	r2, #4
 800292c:	7812      	ldrb	r2, [r2, #0]
 800292e:	4313      	orrs	r3, r2
 8002930:	617b      	str	r3, [r7, #20]
  /* Load the selected MAC address high register */
  (*(__IO uint32_t *)((uint32_t)(ETH_MAC_ADDR_HBASE + MacAddr))) = tmpreg1;
 8002932:	68ba      	ldr	r2, [r7, #8]
 8002934:	4b11      	ldr	r3, [pc, #68]	@ (800297c <ETH_MACAddressConfig+0x68>)
 8002936:	4413      	add	r3, r2
 8002938:	461a      	mov	r2, r3
 800293a:	697b      	ldr	r3, [r7, #20]
 800293c:	6013      	str	r3, [r2, #0]
  /* Calculate the selected MAC address low register */
  tmpreg1 = ((uint32_t)Addr[3U] << 24U) | ((uint32_t)Addr[2U] << 16U) | ((uint32_t)Addr[1U] << 8U) | Addr[0U];
 800293e:	687b      	ldr	r3, [r7, #4]
 8002940:	3303      	adds	r3, #3
 8002942:	781b      	ldrb	r3, [r3, #0]
 8002944:	061a      	lsls	r2, r3, #24
 8002946:	687b      	ldr	r3, [r7, #4]
 8002948:	3302      	adds	r3, #2
 800294a:	781b      	ldrb	r3, [r3, #0]
 800294c:	041b      	lsls	r3, r3, #16
 800294e:	431a      	orrs	r2, r3
 8002950:	687b      	ldr	r3, [r7, #4]
 8002952:	3301      	adds	r3, #1
 8002954:	781b      	ldrb	r3, [r3, #0]
 8002956:	021b      	lsls	r3, r3, #8
 8002958:	4313      	orrs	r3, r2
 800295a:	687a      	ldr	r2, [r7, #4]
 800295c:	7812      	ldrb	r2, [r2, #0]
 800295e:	4313      	orrs	r3, r2
 8002960:	617b      	str	r3, [r7, #20]

  /* Load the selected MAC address low register */
  (*(__IO uint32_t *)((uint32_t)(ETH_MAC_ADDR_LBASE + MacAddr))) = tmpreg1;
 8002962:	68ba      	ldr	r2, [r7, #8]
 8002964:	4b06      	ldr	r3, [pc, #24]	@ (8002980 <ETH_MACAddressConfig+0x6c>)
 8002966:	4413      	add	r3, r2
 8002968:	461a      	mov	r2, r3
 800296a:	697b      	ldr	r3, [r7, #20]
 800296c:	6013      	str	r3, [r2, #0]
}
 800296e:	bf00      	nop
 8002970:	371c      	adds	r7, #28
 8002972:	46bd      	mov	sp, r7
 8002974:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002978:	4770      	bx	lr
 800297a:	bf00      	nop
 800297c:	40028040 	.word	0x40028040
 8002980:	40028044 	.word	0x40028044

08002984 <ETH_DMATxDescListInit>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
static void ETH_DMATxDescListInit(ETH_HandleTypeDef *heth)
{
 8002984:	b480      	push	{r7}
 8002986:	b085      	sub	sp, #20
 8002988:	af00      	add	r7, sp, #0
 800298a:	6078      	str	r0, [r7, #4]
  ETH_DMADescTypeDef *dmatxdesc;
  uint32_t i;

  /* Fill each DMATxDesc descriptor with the right values */
  for (i = 0; i < (uint32_t)ETH_TX_DESC_CNT; i++)
 800298c:	2300      	movs	r3, #0
 800298e:	60fb      	str	r3, [r7, #12]
 8002990:	e03e      	b.n	8002a10 <ETH_DMATxDescListInit+0x8c>
  {
    dmatxdesc = heth->Init.TxDesc + i;
 8002992:	687b      	ldr	r3, [r7, #4]
 8002994:	68d9      	ldr	r1, [r3, #12]
 8002996:	68fa      	ldr	r2, [r7, #12]
 8002998:	4613      	mov	r3, r2
 800299a:	009b      	lsls	r3, r3, #2
 800299c:	4413      	add	r3, r2
 800299e:	00db      	lsls	r3, r3, #3
 80029a0:	440b      	add	r3, r1
 80029a2:	60bb      	str	r3, [r7, #8]

    WRITE_REG(dmatxdesc->DESC0, 0x0U);
 80029a4:	68bb      	ldr	r3, [r7, #8]
 80029a6:	2200      	movs	r2, #0
 80029a8:	601a      	str	r2, [r3, #0]
    WRITE_REG(dmatxdesc->DESC1, 0x0U);
 80029aa:	68bb      	ldr	r3, [r7, #8]
 80029ac:	2200      	movs	r2, #0
 80029ae:	605a      	str	r2, [r3, #4]
    WRITE_REG(dmatxdesc->DESC2, 0x0U);
 80029b0:	68bb      	ldr	r3, [r7, #8]
 80029b2:	2200      	movs	r2, #0
 80029b4:	609a      	str	r2, [r3, #8]
    WRITE_REG(dmatxdesc->DESC3, 0x0U);
 80029b6:	68bb      	ldr	r3, [r7, #8]
 80029b8:	2200      	movs	r2, #0
 80029ba:	60da      	str	r2, [r3, #12]

    WRITE_REG(heth->TxDescList.TxDesc[i], (uint32_t)dmatxdesc);
 80029bc:	68b9      	ldr	r1, [r7, #8]
 80029be:	687b      	ldr	r3, [r7, #4]
 80029c0:	68fa      	ldr	r2, [r7, #12]
 80029c2:	3206      	adds	r2, #6
 80029c4:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

    /* Set Second Address Chained bit */
    SET_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_TCH);
 80029c8:	68bb      	ldr	r3, [r7, #8]
 80029ca:	681b      	ldr	r3, [r3, #0]
 80029cc:	f443 1280 	orr.w	r2, r3, #1048576	@ 0x100000
 80029d0:	68bb      	ldr	r3, [r7, #8]
 80029d2:	601a      	str	r2, [r3, #0]

    if (i < ((uint32_t)ETH_TX_DESC_CNT - 1U))
 80029d4:	68fb      	ldr	r3, [r7, #12]
 80029d6:	2b02      	cmp	r3, #2
 80029d8:	d80c      	bhi.n	80029f4 <ETH_DMATxDescListInit+0x70>
    {
      WRITE_REG(dmatxdesc->DESC3, (uint32_t)(heth->Init.TxDesc + i + 1U));
 80029da:	687b      	ldr	r3, [r7, #4]
 80029dc:	68d9      	ldr	r1, [r3, #12]
 80029de:	68fb      	ldr	r3, [r7, #12]
 80029e0:	1c5a      	adds	r2, r3, #1
 80029e2:	4613      	mov	r3, r2
 80029e4:	009b      	lsls	r3, r3, #2
 80029e6:	4413      	add	r3, r2
 80029e8:	00db      	lsls	r3, r3, #3
 80029ea:	440b      	add	r3, r1
 80029ec:	461a      	mov	r2, r3
 80029ee:	68bb      	ldr	r3, [r7, #8]
 80029f0:	60da      	str	r2, [r3, #12]
 80029f2:	e004      	b.n	80029fe <ETH_DMATxDescListInit+0x7a>
    }
    else
    {
      WRITE_REG(dmatxdesc->DESC3, (uint32_t)(heth->Init.TxDesc));
 80029f4:	687b      	ldr	r3, [r7, #4]
 80029f6:	68db      	ldr	r3, [r3, #12]
 80029f8:	461a      	mov	r2, r3
 80029fa:	68bb      	ldr	r3, [r7, #8]
 80029fc:	60da      	str	r2, [r3, #12]
    }

    /* Set the DMA Tx descriptors checksum insertion */
    SET_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_CHECKSUMTCPUDPICMPFULL);
 80029fe:	68bb      	ldr	r3, [r7, #8]
 8002a00:	681b      	ldr	r3, [r3, #0]
 8002a02:	f443 0240 	orr.w	r2, r3, #12582912	@ 0xc00000
 8002a06:	68bb      	ldr	r3, [r7, #8]
 8002a08:	601a      	str	r2, [r3, #0]
  for (i = 0; i < (uint32_t)ETH_TX_DESC_CNT; i++)
 8002a0a:	68fb      	ldr	r3, [r7, #12]
 8002a0c:	3301      	adds	r3, #1
 8002a0e:	60fb      	str	r3, [r7, #12]
 8002a10:	68fb      	ldr	r3, [r7, #12]
 8002a12:	2b03      	cmp	r3, #3
 8002a14:	d9bd      	bls.n	8002992 <ETH_DMATxDescListInit+0xe>
  }

  heth->TxDescList.CurTxDesc = 0;
 8002a16:	687b      	ldr	r3, [r7, #4]
 8002a18:	2200      	movs	r2, #0
 8002a1a:	629a      	str	r2, [r3, #40]	@ 0x28

  /* Set Transmit Descriptor List Address */
  WRITE_REG(heth->Instance->DMATDLAR, (uint32_t) heth->Init.TxDesc);
 8002a1c:	687b      	ldr	r3, [r7, #4]
 8002a1e:	68da      	ldr	r2, [r3, #12]
 8002a20:	687b      	ldr	r3, [r7, #4]
 8002a22:	681b      	ldr	r3, [r3, #0]
 8002a24:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8002a28:	611a      	str	r2, [r3, #16]
}
 8002a2a:	bf00      	nop
 8002a2c:	3714      	adds	r7, #20
 8002a2e:	46bd      	mov	sp, r7
 8002a30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a34:	4770      	bx	lr

08002a36 <ETH_DMARxDescListInit>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
static void ETH_DMARxDescListInit(ETH_HandleTypeDef *heth)
{
 8002a36:	b480      	push	{r7}
 8002a38:	b085      	sub	sp, #20
 8002a3a:	af00      	add	r7, sp, #0
 8002a3c:	6078      	str	r0, [r7, #4]
  ETH_DMADescTypeDef *dmarxdesc;
  uint32_t i;

  for (i = 0; i < (uint32_t)ETH_RX_DESC_CNT; i++)
 8002a3e:	2300      	movs	r3, #0
 8002a40:	60fb      	str	r3, [r7, #12]
 8002a42:	e048      	b.n	8002ad6 <ETH_DMARxDescListInit+0xa0>
  {
    dmarxdesc =  heth->Init.RxDesc + i;
 8002a44:	687b      	ldr	r3, [r7, #4]
 8002a46:	6919      	ldr	r1, [r3, #16]
 8002a48:	68fa      	ldr	r2, [r7, #12]
 8002a4a:	4613      	mov	r3, r2
 8002a4c:	009b      	lsls	r3, r3, #2
 8002a4e:	4413      	add	r3, r2
 8002a50:	00db      	lsls	r3, r3, #3
 8002a52:	440b      	add	r3, r1
 8002a54:	60bb      	str	r3, [r7, #8]

    WRITE_REG(dmarxdesc->DESC0, 0x0U);
 8002a56:	68bb      	ldr	r3, [r7, #8]
 8002a58:	2200      	movs	r2, #0
 8002a5a:	601a      	str	r2, [r3, #0]
    WRITE_REG(dmarxdesc->DESC1, 0x0U);
 8002a5c:	68bb      	ldr	r3, [r7, #8]
 8002a5e:	2200      	movs	r2, #0
 8002a60:	605a      	str	r2, [r3, #4]
    WRITE_REG(dmarxdesc->DESC2, 0x0U);
 8002a62:	68bb      	ldr	r3, [r7, #8]
 8002a64:	2200      	movs	r2, #0
 8002a66:	609a      	str	r2, [r3, #8]
    WRITE_REG(dmarxdesc->DESC3, 0x0U);
 8002a68:	68bb      	ldr	r3, [r7, #8]
 8002a6a:	2200      	movs	r2, #0
 8002a6c:	60da      	str	r2, [r3, #12]
    WRITE_REG(dmarxdesc->BackupAddr0, 0x0U);
 8002a6e:	68bb      	ldr	r3, [r7, #8]
 8002a70:	2200      	movs	r2, #0
 8002a72:	621a      	str	r2, [r3, #32]
    WRITE_REG(dmarxdesc->BackupAddr1, 0x0U);
 8002a74:	68bb      	ldr	r3, [r7, #8]
 8002a76:	2200      	movs	r2, #0
 8002a78:	625a      	str	r2, [r3, #36]	@ 0x24

    /* Set Own bit of the Rx descriptor Status */
    dmarxdesc->DESC0 = ETH_DMARXDESC_OWN;
 8002a7a:	68bb      	ldr	r3, [r7, #8]
 8002a7c:	f04f 4200 	mov.w	r2, #2147483648	@ 0x80000000
 8002a80:	601a      	str	r2, [r3, #0]

    /* Set Buffer1 size and Second Address Chained bit */
    dmarxdesc->DESC1 = heth->Init.RxBuffLen | ETH_DMARXDESC_RCH;
 8002a82:	687b      	ldr	r3, [r7, #4]
 8002a84:	695b      	ldr	r3, [r3, #20]
 8002a86:	f443 4280 	orr.w	r2, r3, #16384	@ 0x4000
 8002a8a:	68bb      	ldr	r3, [r7, #8]
 8002a8c:	605a      	str	r2, [r3, #4]

    /* Enable Ethernet DMA Rx Descriptor interrupt */
    dmarxdesc->DESC1 &= ~ETH_DMARXDESC_DIC;
 8002a8e:	68bb      	ldr	r3, [r7, #8]
 8002a90:	685b      	ldr	r3, [r3, #4]
 8002a92:	f023 4200 	bic.w	r2, r3, #2147483648	@ 0x80000000
 8002a96:	68bb      	ldr	r3, [r7, #8]
 8002a98:	605a      	str	r2, [r3, #4]
    /* Set Rx descritors addresses */
    WRITE_REG(heth->RxDescList.RxDesc[i], (uint32_t)dmarxdesc);
 8002a9a:	68b9      	ldr	r1, [r7, #8]
 8002a9c:	687b      	ldr	r3, [r7, #4]
 8002a9e:	68fa      	ldr	r2, [r7, #12]
 8002aa0:	3212      	adds	r2, #18
 8002aa2:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

    if (i < ((uint32_t)ETH_RX_DESC_CNT - 1U))
 8002aa6:	68fb      	ldr	r3, [r7, #12]
 8002aa8:	2b02      	cmp	r3, #2
 8002aaa:	d80c      	bhi.n	8002ac6 <ETH_DMARxDescListInit+0x90>
    {
      WRITE_REG(dmarxdesc->DESC3, (uint32_t)(heth->Init.RxDesc + i + 1U));
 8002aac:	687b      	ldr	r3, [r7, #4]
 8002aae:	6919      	ldr	r1, [r3, #16]
 8002ab0:	68fb      	ldr	r3, [r7, #12]
 8002ab2:	1c5a      	adds	r2, r3, #1
 8002ab4:	4613      	mov	r3, r2
 8002ab6:	009b      	lsls	r3, r3, #2
 8002ab8:	4413      	add	r3, r2
 8002aba:	00db      	lsls	r3, r3, #3
 8002abc:	440b      	add	r3, r1
 8002abe:	461a      	mov	r2, r3
 8002ac0:	68bb      	ldr	r3, [r7, #8]
 8002ac2:	60da      	str	r2, [r3, #12]
 8002ac4:	e004      	b.n	8002ad0 <ETH_DMARxDescListInit+0x9a>
    }
    else
    {
      WRITE_REG(dmarxdesc->DESC3, (uint32_t)(heth->Init.RxDesc));
 8002ac6:	687b      	ldr	r3, [r7, #4]
 8002ac8:	691b      	ldr	r3, [r3, #16]
 8002aca:	461a      	mov	r2, r3
 8002acc:	68bb      	ldr	r3, [r7, #8]
 8002ace:	60da      	str	r2, [r3, #12]
  for (i = 0; i < (uint32_t)ETH_RX_DESC_CNT; i++)
 8002ad0:	68fb      	ldr	r3, [r7, #12]
 8002ad2:	3301      	adds	r3, #1
 8002ad4:	60fb      	str	r3, [r7, #12]
 8002ad6:	68fb      	ldr	r3, [r7, #12]
 8002ad8:	2b03      	cmp	r3, #3
 8002ada:	d9b3      	bls.n	8002a44 <ETH_DMARxDescListInit+0xe>
    }
  }

  WRITE_REG(heth->RxDescList.RxDescIdx, 0U);
 8002adc:	687b      	ldr	r3, [r7, #4]
 8002ade:	2200      	movs	r2, #0
 8002ae0:	65da      	str	r2, [r3, #92]	@ 0x5c
  WRITE_REG(heth->RxDescList.RxDescCnt, 0U);
 8002ae2:	687b      	ldr	r3, [r7, #4]
 8002ae4:	2200      	movs	r2, #0
 8002ae6:	661a      	str	r2, [r3, #96]	@ 0x60
  WRITE_REG(heth->RxDescList.RxBuildDescIdx, 0U);
 8002ae8:	687b      	ldr	r3, [r7, #4]
 8002aea:	2200      	movs	r2, #0
 8002aec:	669a      	str	r2, [r3, #104]	@ 0x68
  WRITE_REG(heth->RxDescList.RxBuildDescCnt, 0U);
 8002aee:	687b      	ldr	r3, [r7, #4]
 8002af0:	2200      	movs	r2, #0
 8002af2:	66da      	str	r2, [r3, #108]	@ 0x6c
  WRITE_REG(heth->RxDescList.ItMode, 0U);
 8002af4:	687b      	ldr	r3, [r7, #4]
 8002af6:	2200      	movs	r2, #0
 8002af8:	659a      	str	r2, [r3, #88]	@ 0x58

  /* Set Receive Descriptor List Address */
  WRITE_REG(heth->Instance->DMARDLAR, (uint32_t) heth->Init.RxDesc);
 8002afa:	687b      	ldr	r3, [r7, #4]
 8002afc:	691a      	ldr	r2, [r3, #16]
 8002afe:	687b      	ldr	r3, [r7, #4]
 8002b00:	681b      	ldr	r3, [r3, #0]
 8002b02:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8002b06:	60da      	str	r2, [r3, #12]
}
 8002b08:	bf00      	nop
 8002b0a:	3714      	adds	r7, #20
 8002b0c:	46bd      	mov	sp, r7
 8002b0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b12:	4770      	bx	lr

08002b14 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8002b14:	b480      	push	{r7}
 8002b16:	b089      	sub	sp, #36	@ 0x24
 8002b18:	af00      	add	r7, sp, #0
 8002b1a:	6078      	str	r0, [r7, #4]
 8002b1c:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00;
 8002b1e:	2300      	movs	r3, #0
 8002b20:	61fb      	str	r3, [r7, #28]
  uint32_t ioposition = 0x00;
 8002b22:	2300      	movs	r3, #0
 8002b24:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00;
 8002b26:	2300      	movs	r3, #0
 8002b28:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00;
 8002b2a:	2300      	movs	r3, #0
 8002b2c:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for (position = 0; position < GPIO_NUMBER; position++)
 8002b2e:	2300      	movs	r3, #0
 8002b30:	61fb      	str	r3, [r7, #28]
 8002b32:	e175      	b.n	8002e20 <HAL_GPIO_Init+0x30c>
  {
    /* Get the IO position */
    ioposition = ((uint32_t)0x01) << position;
 8002b34:	2201      	movs	r2, #1
 8002b36:	69fb      	ldr	r3, [r7, #28]
 8002b38:	fa02 f303 	lsl.w	r3, r2, r3
 8002b3c:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8002b3e:	683b      	ldr	r3, [r7, #0]
 8002b40:	681b      	ldr	r3, [r3, #0]
 8002b42:	697a      	ldr	r2, [r7, #20]
 8002b44:	4013      	ands	r3, r2
 8002b46:	613b      	str	r3, [r7, #16]

    if (iocurrent == ioposition)
 8002b48:	693a      	ldr	r2, [r7, #16]
 8002b4a:	697b      	ldr	r3, [r7, #20]
 8002b4c:	429a      	cmp	r2, r3
 8002b4e:	f040 8164 	bne.w	8002e1a <HAL_GPIO_Init+0x306>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8002b52:	683b      	ldr	r3, [r7, #0]
 8002b54:	685b      	ldr	r3, [r3, #4]
 8002b56:	f003 0303 	and.w	r3, r3, #3
 8002b5a:	2b01      	cmp	r3, #1
 8002b5c:	d005      	beq.n	8002b6a <HAL_GPIO_Init+0x56>
 8002b5e:	683b      	ldr	r3, [r7, #0]
 8002b60:	685b      	ldr	r3, [r3, #4]
 8002b62:	f003 0303 	and.w	r3, r3, #3
 8002b66:	2b02      	cmp	r3, #2
 8002b68:	d130      	bne.n	8002bcc <HAL_GPIO_Init+0xb8>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8002b6a:	687b      	ldr	r3, [r7, #4]
 8002b6c:	689b      	ldr	r3, [r3, #8]
 8002b6e:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2));
 8002b70:	69fb      	ldr	r3, [r7, #28]
 8002b72:	005b      	lsls	r3, r3, #1
 8002b74:	2203      	movs	r2, #3
 8002b76:	fa02 f303 	lsl.w	r3, r2, r3
 8002b7a:	43db      	mvns	r3, r3
 8002b7c:	69ba      	ldr	r2, [r7, #24]
 8002b7e:	4013      	ands	r3, r2
 8002b80:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2));
 8002b82:	683b      	ldr	r3, [r7, #0]
 8002b84:	68da      	ldr	r2, [r3, #12]
 8002b86:	69fb      	ldr	r3, [r7, #28]
 8002b88:	005b      	lsls	r3, r3, #1
 8002b8a:	fa02 f303 	lsl.w	r3, r2, r3
 8002b8e:	69ba      	ldr	r2, [r7, #24]
 8002b90:	4313      	orrs	r3, r2
 8002b92:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8002b94:	687b      	ldr	r3, [r7, #4]
 8002b96:	69ba      	ldr	r2, [r7, #24]
 8002b98:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8002b9a:	687b      	ldr	r3, [r7, #4]
 8002b9c:	685b      	ldr	r3, [r3, #4]
 8002b9e:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8002ba0:	2201      	movs	r2, #1
 8002ba2:	69fb      	ldr	r3, [r7, #28]
 8002ba4:	fa02 f303 	lsl.w	r3, r2, r3
 8002ba8:	43db      	mvns	r3, r3
 8002baa:	69ba      	ldr	r2, [r7, #24]
 8002bac:	4013      	ands	r3, r2
 8002bae:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8002bb0:	683b      	ldr	r3, [r7, #0]
 8002bb2:	685b      	ldr	r3, [r3, #4]
 8002bb4:	091b      	lsrs	r3, r3, #4
 8002bb6:	f003 0201 	and.w	r2, r3, #1
 8002bba:	69fb      	ldr	r3, [r7, #28]
 8002bbc:	fa02 f303 	lsl.w	r3, r2, r3
 8002bc0:	69ba      	ldr	r2, [r7, #24]
 8002bc2:	4313      	orrs	r3, r2
 8002bc4:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8002bc6:	687b      	ldr	r3, [r7, #4]
 8002bc8:	69ba      	ldr	r2, [r7, #24]
 8002bca:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8002bcc:	683b      	ldr	r3, [r7, #0]
 8002bce:	685b      	ldr	r3, [r3, #4]
 8002bd0:	f003 0303 	and.w	r3, r3, #3
 8002bd4:	2b03      	cmp	r3, #3
 8002bd6:	d017      	beq.n	8002c08 <HAL_GPIO_Init+0xf4>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8002bd8:	687b      	ldr	r3, [r7, #4]
 8002bda:	68db      	ldr	r3, [r3, #12]
 8002bdc:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2));
 8002bde:	69fb      	ldr	r3, [r7, #28]
 8002be0:	005b      	lsls	r3, r3, #1
 8002be2:	2203      	movs	r2, #3
 8002be4:	fa02 f303 	lsl.w	r3, r2, r3
 8002be8:	43db      	mvns	r3, r3
 8002bea:	69ba      	ldr	r2, [r7, #24]
 8002bec:	4013      	ands	r3, r2
 8002bee:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2));
 8002bf0:	683b      	ldr	r3, [r7, #0]
 8002bf2:	689a      	ldr	r2, [r3, #8]
 8002bf4:	69fb      	ldr	r3, [r7, #28]
 8002bf6:	005b      	lsls	r3, r3, #1
 8002bf8:	fa02 f303 	lsl.w	r3, r2, r3
 8002bfc:	69ba      	ldr	r2, [r7, #24]
 8002bfe:	4313      	orrs	r3, r2
 8002c00:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8002c02:	687b      	ldr	r3, [r7, #4]
 8002c04:	69ba      	ldr	r2, [r7, #24]
 8002c06:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8002c08:	683b      	ldr	r3, [r7, #0]
 8002c0a:	685b      	ldr	r3, [r3, #4]
 8002c0c:	f003 0303 	and.w	r3, r3, #3
 8002c10:	2b02      	cmp	r3, #2
 8002c12:	d123      	bne.n	8002c5c <HAL_GPIO_Init+0x148>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3];
 8002c14:	69fb      	ldr	r3, [r7, #28]
 8002c16:	08da      	lsrs	r2, r3, #3
 8002c18:	687b      	ldr	r3, [r7, #4]
 8002c1a:	3208      	adds	r2, #8
 8002c1c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002c20:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)0xF << ((uint32_t)(position & (uint32_t)0x07) * 4)) ;
 8002c22:	69fb      	ldr	r3, [r7, #28]
 8002c24:	f003 0307 	and.w	r3, r3, #7
 8002c28:	009b      	lsls	r3, r3, #2
 8002c2a:	220f      	movs	r2, #15
 8002c2c:	fa02 f303 	lsl.w	r3, r2, r3
 8002c30:	43db      	mvns	r3, r3
 8002c32:	69ba      	ldr	r2, [r7, #24]
 8002c34:	4013      	ands	r3, r2
 8002c36:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & (uint32_t)0x07) * 4));
 8002c38:	683b      	ldr	r3, [r7, #0]
 8002c3a:	691a      	ldr	r2, [r3, #16]
 8002c3c:	69fb      	ldr	r3, [r7, #28]
 8002c3e:	f003 0307 	and.w	r3, r3, #7
 8002c42:	009b      	lsls	r3, r3, #2
 8002c44:	fa02 f303 	lsl.w	r3, r2, r3
 8002c48:	69ba      	ldr	r2, [r7, #24]
 8002c4a:	4313      	orrs	r3, r2
 8002c4c:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3] = temp;
 8002c4e:	69fb      	ldr	r3, [r7, #28]
 8002c50:	08da      	lsrs	r2, r3, #3
 8002c52:	687b      	ldr	r3, [r7, #4]
 8002c54:	3208      	adds	r2, #8
 8002c56:	69b9      	ldr	r1, [r7, #24]
 8002c58:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8002c5c:	687b      	ldr	r3, [r7, #4]
 8002c5e:	681b      	ldr	r3, [r3, #0]
 8002c60:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2));
 8002c62:	69fb      	ldr	r3, [r7, #28]
 8002c64:	005b      	lsls	r3, r3, #1
 8002c66:	2203      	movs	r2, #3
 8002c68:	fa02 f303 	lsl.w	r3, r2, r3
 8002c6c:	43db      	mvns	r3, r3
 8002c6e:	69ba      	ldr	r2, [r7, #24]
 8002c70:	4013      	ands	r3, r2
 8002c72:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2));
 8002c74:	683b      	ldr	r3, [r7, #0]
 8002c76:	685b      	ldr	r3, [r3, #4]
 8002c78:	f003 0203 	and.w	r2, r3, #3
 8002c7c:	69fb      	ldr	r3, [r7, #28]
 8002c7e:	005b      	lsls	r3, r3, #1
 8002c80:	fa02 f303 	lsl.w	r3, r2, r3
 8002c84:	69ba      	ldr	r2, [r7, #24]
 8002c86:	4313      	orrs	r3, r2
 8002c88:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8002c8a:	687b      	ldr	r3, [r7, #4]
 8002c8c:	69ba      	ldr	r2, [r7, #24]
 8002c8e:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8002c90:	683b      	ldr	r3, [r7, #0]
 8002c92:	685b      	ldr	r3, [r3, #4]
 8002c94:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8002c98:	2b00      	cmp	r3, #0
 8002c9a:	f000 80be 	beq.w	8002e1a <HAL_GPIO_Init+0x306>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002c9e:	4b66      	ldr	r3, [pc, #408]	@ (8002e38 <HAL_GPIO_Init+0x324>)
 8002ca0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002ca2:	4a65      	ldr	r2, [pc, #404]	@ (8002e38 <HAL_GPIO_Init+0x324>)
 8002ca4:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8002ca8:	6453      	str	r3, [r2, #68]	@ 0x44
 8002caa:	4b63      	ldr	r3, [pc, #396]	@ (8002e38 <HAL_GPIO_Init+0x324>)
 8002cac:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002cae:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8002cb2:	60fb      	str	r3, [r7, #12]
 8002cb4:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2];
 8002cb6:	4a61      	ldr	r2, [pc, #388]	@ (8002e3c <HAL_GPIO_Init+0x328>)
 8002cb8:	69fb      	ldr	r3, [r7, #28]
 8002cba:	089b      	lsrs	r3, r3, #2
 8002cbc:	3302      	adds	r3, #2
 8002cbe:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002cc2:	61bb      	str	r3, [r7, #24]
        temp &= ~(((uint32_t)0x0F) << (4 * (position & 0x03)));
 8002cc4:	69fb      	ldr	r3, [r7, #28]
 8002cc6:	f003 0303 	and.w	r3, r3, #3
 8002cca:	009b      	lsls	r3, r3, #2
 8002ccc:	220f      	movs	r2, #15
 8002cce:	fa02 f303 	lsl.w	r3, r2, r3
 8002cd2:	43db      	mvns	r3, r3
 8002cd4:	69ba      	ldr	r2, [r7, #24]
 8002cd6:	4013      	ands	r3, r2
 8002cd8:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03)));
 8002cda:	687b      	ldr	r3, [r7, #4]
 8002cdc:	4a58      	ldr	r2, [pc, #352]	@ (8002e40 <HAL_GPIO_Init+0x32c>)
 8002cde:	4293      	cmp	r3, r2
 8002ce0:	d037      	beq.n	8002d52 <HAL_GPIO_Init+0x23e>
 8002ce2:	687b      	ldr	r3, [r7, #4]
 8002ce4:	4a57      	ldr	r2, [pc, #348]	@ (8002e44 <HAL_GPIO_Init+0x330>)
 8002ce6:	4293      	cmp	r3, r2
 8002ce8:	d031      	beq.n	8002d4e <HAL_GPIO_Init+0x23a>
 8002cea:	687b      	ldr	r3, [r7, #4]
 8002cec:	4a56      	ldr	r2, [pc, #344]	@ (8002e48 <HAL_GPIO_Init+0x334>)
 8002cee:	4293      	cmp	r3, r2
 8002cf0:	d02b      	beq.n	8002d4a <HAL_GPIO_Init+0x236>
 8002cf2:	687b      	ldr	r3, [r7, #4]
 8002cf4:	4a55      	ldr	r2, [pc, #340]	@ (8002e4c <HAL_GPIO_Init+0x338>)
 8002cf6:	4293      	cmp	r3, r2
 8002cf8:	d025      	beq.n	8002d46 <HAL_GPIO_Init+0x232>
 8002cfa:	687b      	ldr	r3, [r7, #4]
 8002cfc:	4a54      	ldr	r2, [pc, #336]	@ (8002e50 <HAL_GPIO_Init+0x33c>)
 8002cfe:	4293      	cmp	r3, r2
 8002d00:	d01f      	beq.n	8002d42 <HAL_GPIO_Init+0x22e>
 8002d02:	687b      	ldr	r3, [r7, #4]
 8002d04:	4a53      	ldr	r2, [pc, #332]	@ (8002e54 <HAL_GPIO_Init+0x340>)
 8002d06:	4293      	cmp	r3, r2
 8002d08:	d019      	beq.n	8002d3e <HAL_GPIO_Init+0x22a>
 8002d0a:	687b      	ldr	r3, [r7, #4]
 8002d0c:	4a52      	ldr	r2, [pc, #328]	@ (8002e58 <HAL_GPIO_Init+0x344>)
 8002d0e:	4293      	cmp	r3, r2
 8002d10:	d013      	beq.n	8002d3a <HAL_GPIO_Init+0x226>
 8002d12:	687b      	ldr	r3, [r7, #4]
 8002d14:	4a51      	ldr	r2, [pc, #324]	@ (8002e5c <HAL_GPIO_Init+0x348>)
 8002d16:	4293      	cmp	r3, r2
 8002d18:	d00d      	beq.n	8002d36 <HAL_GPIO_Init+0x222>
 8002d1a:	687b      	ldr	r3, [r7, #4]
 8002d1c:	4a50      	ldr	r2, [pc, #320]	@ (8002e60 <HAL_GPIO_Init+0x34c>)
 8002d1e:	4293      	cmp	r3, r2
 8002d20:	d007      	beq.n	8002d32 <HAL_GPIO_Init+0x21e>
 8002d22:	687b      	ldr	r3, [r7, #4]
 8002d24:	4a4f      	ldr	r2, [pc, #316]	@ (8002e64 <HAL_GPIO_Init+0x350>)
 8002d26:	4293      	cmp	r3, r2
 8002d28:	d101      	bne.n	8002d2e <HAL_GPIO_Init+0x21a>
 8002d2a:	2309      	movs	r3, #9
 8002d2c:	e012      	b.n	8002d54 <HAL_GPIO_Init+0x240>
 8002d2e:	230a      	movs	r3, #10
 8002d30:	e010      	b.n	8002d54 <HAL_GPIO_Init+0x240>
 8002d32:	2308      	movs	r3, #8
 8002d34:	e00e      	b.n	8002d54 <HAL_GPIO_Init+0x240>
 8002d36:	2307      	movs	r3, #7
 8002d38:	e00c      	b.n	8002d54 <HAL_GPIO_Init+0x240>
 8002d3a:	2306      	movs	r3, #6
 8002d3c:	e00a      	b.n	8002d54 <HAL_GPIO_Init+0x240>
 8002d3e:	2305      	movs	r3, #5
 8002d40:	e008      	b.n	8002d54 <HAL_GPIO_Init+0x240>
 8002d42:	2304      	movs	r3, #4
 8002d44:	e006      	b.n	8002d54 <HAL_GPIO_Init+0x240>
 8002d46:	2303      	movs	r3, #3
 8002d48:	e004      	b.n	8002d54 <HAL_GPIO_Init+0x240>
 8002d4a:	2302      	movs	r3, #2
 8002d4c:	e002      	b.n	8002d54 <HAL_GPIO_Init+0x240>
 8002d4e:	2301      	movs	r3, #1
 8002d50:	e000      	b.n	8002d54 <HAL_GPIO_Init+0x240>
 8002d52:	2300      	movs	r3, #0
 8002d54:	69fa      	ldr	r2, [r7, #28]
 8002d56:	f002 0203 	and.w	r2, r2, #3
 8002d5a:	0092      	lsls	r2, r2, #2
 8002d5c:	4093      	lsls	r3, r2
 8002d5e:	69ba      	ldr	r2, [r7, #24]
 8002d60:	4313      	orrs	r3, r2
 8002d62:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2] = temp;
 8002d64:	4935      	ldr	r1, [pc, #212]	@ (8002e3c <HAL_GPIO_Init+0x328>)
 8002d66:	69fb      	ldr	r3, [r7, #28]
 8002d68:	089b      	lsrs	r3, r3, #2
 8002d6a:	3302      	adds	r3, #2
 8002d6c:	69ba      	ldr	r2, [r7, #24]
 8002d6e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8002d72:	4b3d      	ldr	r3, [pc, #244]	@ (8002e68 <HAL_GPIO_Init+0x354>)
 8002d74:	689b      	ldr	r3, [r3, #8]
 8002d76:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002d78:	693b      	ldr	r3, [r7, #16]
 8002d7a:	43db      	mvns	r3, r3
 8002d7c:	69ba      	ldr	r2, [r7, #24]
 8002d7e:	4013      	ands	r3, r2
 8002d80:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8002d82:	683b      	ldr	r3, [r7, #0]
 8002d84:	685b      	ldr	r3, [r3, #4]
 8002d86:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8002d8a:	2b00      	cmp	r3, #0
 8002d8c:	d003      	beq.n	8002d96 <HAL_GPIO_Init+0x282>
        {
          temp |= iocurrent;
 8002d8e:	69ba      	ldr	r2, [r7, #24]
 8002d90:	693b      	ldr	r3, [r7, #16]
 8002d92:	4313      	orrs	r3, r2
 8002d94:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8002d96:	4a34      	ldr	r2, [pc, #208]	@ (8002e68 <HAL_GPIO_Init+0x354>)
 8002d98:	69bb      	ldr	r3, [r7, #24]
 8002d9a:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8002d9c:	4b32      	ldr	r3, [pc, #200]	@ (8002e68 <HAL_GPIO_Init+0x354>)
 8002d9e:	68db      	ldr	r3, [r3, #12]
 8002da0:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002da2:	693b      	ldr	r3, [r7, #16]
 8002da4:	43db      	mvns	r3, r3
 8002da6:	69ba      	ldr	r2, [r7, #24]
 8002da8:	4013      	ands	r3, r2
 8002daa:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8002dac:	683b      	ldr	r3, [r7, #0]
 8002dae:	685b      	ldr	r3, [r3, #4]
 8002db0:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8002db4:	2b00      	cmp	r3, #0
 8002db6:	d003      	beq.n	8002dc0 <HAL_GPIO_Init+0x2ac>
        {
          temp |= iocurrent;
 8002db8:	69ba      	ldr	r2, [r7, #24]
 8002dba:	693b      	ldr	r3, [r7, #16]
 8002dbc:	4313      	orrs	r3, r2
 8002dbe:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8002dc0:	4a29      	ldr	r2, [pc, #164]	@ (8002e68 <HAL_GPIO_Init+0x354>)
 8002dc2:	69bb      	ldr	r3, [r7, #24]
 8002dc4:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8002dc6:	4b28      	ldr	r3, [pc, #160]	@ (8002e68 <HAL_GPIO_Init+0x354>)
 8002dc8:	685b      	ldr	r3, [r3, #4]
 8002dca:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002dcc:	693b      	ldr	r3, [r7, #16]
 8002dce:	43db      	mvns	r3, r3
 8002dd0:	69ba      	ldr	r2, [r7, #24]
 8002dd2:	4013      	ands	r3, r2
 8002dd4:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8002dd6:	683b      	ldr	r3, [r7, #0]
 8002dd8:	685b      	ldr	r3, [r3, #4]
 8002dda:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002dde:	2b00      	cmp	r3, #0
 8002de0:	d003      	beq.n	8002dea <HAL_GPIO_Init+0x2d6>
        {
          temp |= iocurrent;
 8002de2:	69ba      	ldr	r2, [r7, #24]
 8002de4:	693b      	ldr	r3, [r7, #16]
 8002de6:	4313      	orrs	r3, r2
 8002de8:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8002dea:	4a1f      	ldr	r2, [pc, #124]	@ (8002e68 <HAL_GPIO_Init+0x354>)
 8002dec:	69bb      	ldr	r3, [r7, #24]
 8002dee:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8002df0:	4b1d      	ldr	r3, [pc, #116]	@ (8002e68 <HAL_GPIO_Init+0x354>)
 8002df2:	681b      	ldr	r3, [r3, #0]
 8002df4:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002df6:	693b      	ldr	r3, [r7, #16]
 8002df8:	43db      	mvns	r3, r3
 8002dfa:	69ba      	ldr	r2, [r7, #24]
 8002dfc:	4013      	ands	r3, r2
 8002dfe:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8002e00:	683b      	ldr	r3, [r7, #0]
 8002e02:	685b      	ldr	r3, [r3, #4]
 8002e04:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8002e08:	2b00      	cmp	r3, #0
 8002e0a:	d003      	beq.n	8002e14 <HAL_GPIO_Init+0x300>
        {
          temp |= iocurrent;
 8002e0c:	69ba      	ldr	r2, [r7, #24]
 8002e0e:	693b      	ldr	r3, [r7, #16]
 8002e10:	4313      	orrs	r3, r2
 8002e12:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8002e14:	4a14      	ldr	r2, [pc, #80]	@ (8002e68 <HAL_GPIO_Init+0x354>)
 8002e16:	69bb      	ldr	r3, [r7, #24]
 8002e18:	6013      	str	r3, [r2, #0]
  for (position = 0; position < GPIO_NUMBER; position++)
 8002e1a:	69fb      	ldr	r3, [r7, #28]
 8002e1c:	3301      	adds	r3, #1
 8002e1e:	61fb      	str	r3, [r7, #28]
 8002e20:	69fb      	ldr	r3, [r7, #28]
 8002e22:	2b0f      	cmp	r3, #15
 8002e24:	f67f ae86 	bls.w	8002b34 <HAL_GPIO_Init+0x20>
      }
    }
  }
}
 8002e28:	bf00      	nop
 8002e2a:	bf00      	nop
 8002e2c:	3724      	adds	r7, #36	@ 0x24
 8002e2e:	46bd      	mov	sp, r7
 8002e30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e34:	4770      	bx	lr
 8002e36:	bf00      	nop
 8002e38:	40023800 	.word	0x40023800
 8002e3c:	40013800 	.word	0x40013800
 8002e40:	40020000 	.word	0x40020000
 8002e44:	40020400 	.word	0x40020400
 8002e48:	40020800 	.word	0x40020800
 8002e4c:	40020c00 	.word	0x40020c00
 8002e50:	40021000 	.word	0x40021000
 8002e54:	40021400 	.word	0x40021400
 8002e58:	40021800 	.word	0x40021800
 8002e5c:	40021c00 	.word	0x40021c00
 8002e60:	40022000 	.word	0x40022000
 8002e64:	40022400 	.word	0x40022400
 8002e68:	40013c00 	.word	0x40013c00

08002e6c <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be any combination of GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8002e6c:	b480      	push	{r7}
 8002e6e:	b085      	sub	sp, #20
 8002e70:	af00      	add	r7, sp, #0
 8002e72:	6078      	str	r0, [r7, #4]
 8002e74:	460b      	mov	r3, r1
 8002e76:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8002e78:	687b      	ldr	r3, [r7, #4]
 8002e7a:	691a      	ldr	r2, [r3, #16]
 8002e7c:	887b      	ldrh	r3, [r7, #2]
 8002e7e:	4013      	ands	r3, r2
 8002e80:	2b00      	cmp	r3, #0
 8002e82:	d002      	beq.n	8002e8a <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8002e84:	2301      	movs	r3, #1
 8002e86:	73fb      	strb	r3, [r7, #15]
 8002e88:	e001      	b.n	8002e8e <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8002e8a:	2300      	movs	r3, #0
 8002e8c:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8002e8e:	7bfb      	ldrb	r3, [r7, #15]
}
 8002e90:	4618      	mov	r0, r3
 8002e92:	3714      	adds	r7, #20
 8002e94:	46bd      	mov	sp, r7
 8002e96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e9a:	4770      	bx	lr

08002e9c <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8002e9c:	b480      	push	{r7}
 8002e9e:	b083      	sub	sp, #12
 8002ea0:	af00      	add	r7, sp, #0
 8002ea2:	6078      	str	r0, [r7, #4]
 8002ea4:	460b      	mov	r3, r1
 8002ea6:	807b      	strh	r3, [r7, #2]
 8002ea8:	4613      	mov	r3, r2
 8002eaa:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8002eac:	787b      	ldrb	r3, [r7, #1]
 8002eae:	2b00      	cmp	r3, #0
 8002eb0:	d003      	beq.n	8002eba <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8002eb2:	887a      	ldrh	r2, [r7, #2]
 8002eb4:	687b      	ldr	r3, [r7, #4]
 8002eb6:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16;
  }
}
 8002eb8:	e003      	b.n	8002ec2 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16;
 8002eba:	887b      	ldrh	r3, [r7, #2]
 8002ebc:	041a      	lsls	r2, r3, #16
 8002ebe:	687b      	ldr	r3, [r7, #4]
 8002ec0:	619a      	str	r2, [r3, #24]
}
 8002ec2:	bf00      	nop
 8002ec4:	370c      	adds	r7, #12
 8002ec6:	46bd      	mov	sp, r7
 8002ec8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ecc:	4770      	bx	lr
	...

08002ed0 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8002ed0:	b580      	push	{r7, lr}
 8002ed2:	b082      	sub	sp, #8
 8002ed4:	af00      	add	r7, sp, #0
 8002ed6:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8002ed8:	687b      	ldr	r3, [r7, #4]
 8002eda:	2b00      	cmp	r3, #0
 8002edc:	d101      	bne.n	8002ee2 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8002ede:	2301      	movs	r3, #1
 8002ee0:	e08b      	b.n	8002ffa <HAL_I2C_Init+0x12a>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8002ee2:	687b      	ldr	r3, [r7, #4]
 8002ee4:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8002ee8:	b2db      	uxtb	r3, r3
 8002eea:	2b00      	cmp	r3, #0
 8002eec:	d106      	bne.n	8002efc <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8002eee:	687b      	ldr	r3, [r7, #4]
 8002ef0:	2200      	movs	r2, #0
 8002ef2:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 8002ef6:	6878      	ldr	r0, [r7, #4]
 8002ef8:	f7fe fd08 	bl	800190c <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8002efc:	687b      	ldr	r3, [r7, #4]
 8002efe:	2224      	movs	r2, #36	@ 0x24
 8002f00:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8002f04:	687b      	ldr	r3, [r7, #4]
 8002f06:	681b      	ldr	r3, [r3, #0]
 8002f08:	681a      	ldr	r2, [r3, #0]
 8002f0a:	687b      	ldr	r3, [r7, #4]
 8002f0c:	681b      	ldr	r3, [r3, #0]
 8002f0e:	f022 0201 	bic.w	r2, r2, #1
 8002f12:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 8002f14:	687b      	ldr	r3, [r7, #4]
 8002f16:	685a      	ldr	r2, [r3, #4]
 8002f18:	687b      	ldr	r3, [r7, #4]
 8002f1a:	681b      	ldr	r3, [r3, #0]
 8002f1c:	f022 6270 	bic.w	r2, r2, #251658240	@ 0xf000000
 8002f20:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 8002f22:	687b      	ldr	r3, [r7, #4]
 8002f24:	681b      	ldr	r3, [r3, #0]
 8002f26:	689a      	ldr	r2, [r3, #8]
 8002f28:	687b      	ldr	r3, [r7, #4]
 8002f2a:	681b      	ldr	r3, [r3, #0]
 8002f2c:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 8002f30:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8002f32:	687b      	ldr	r3, [r7, #4]
 8002f34:	68db      	ldr	r3, [r3, #12]
 8002f36:	2b01      	cmp	r3, #1
 8002f38:	d107      	bne.n	8002f4a <HAL_I2C_Init+0x7a>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 8002f3a:	687b      	ldr	r3, [r7, #4]
 8002f3c:	689a      	ldr	r2, [r3, #8]
 8002f3e:	687b      	ldr	r3, [r7, #4]
 8002f40:	681b      	ldr	r3, [r3, #0]
 8002f42:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 8002f46:	609a      	str	r2, [r3, #8]
 8002f48:	e006      	b.n	8002f58 <HAL_I2C_Init+0x88>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 8002f4a:	687b      	ldr	r3, [r7, #4]
 8002f4c:	689a      	ldr	r2, [r3, #8]
 8002f4e:	687b      	ldr	r3, [r7, #4]
 8002f50:	681b      	ldr	r3, [r3, #0]
 8002f52:	f442 4204 	orr.w	r2, r2, #33792	@ 0x8400
 8002f56:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 8002f58:	687b      	ldr	r3, [r7, #4]
 8002f5a:	68db      	ldr	r3, [r3, #12]
 8002f5c:	2b02      	cmp	r3, #2
 8002f5e:	d108      	bne.n	8002f72 <HAL_I2C_Init+0xa2>
  {
    SET_BIT(hi2c->Instance->CR2, I2C_CR2_ADD10);
 8002f60:	687b      	ldr	r3, [r7, #4]
 8002f62:	681b      	ldr	r3, [r3, #0]
 8002f64:	685a      	ldr	r2, [r3, #4]
 8002f66:	687b      	ldr	r3, [r7, #4]
 8002f68:	681b      	ldr	r3, [r3, #0]
 8002f6a:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8002f6e:	605a      	str	r2, [r3, #4]
 8002f70:	e007      	b.n	8002f82 <HAL_I2C_Init+0xb2>
  }
  else
  {
    /* Clear the I2C ADD10 bit */
    CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_ADD10);
 8002f72:	687b      	ldr	r3, [r7, #4]
 8002f74:	681b      	ldr	r3, [r3, #0]
 8002f76:	685a      	ldr	r2, [r3, #4]
 8002f78:	687b      	ldr	r3, [r7, #4]
 8002f7a:	681b      	ldr	r3, [r3, #0]
 8002f7c:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8002f80:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 8002f82:	687b      	ldr	r3, [r7, #4]
 8002f84:	681b      	ldr	r3, [r3, #0]
 8002f86:	6859      	ldr	r1, [r3, #4]
 8002f88:	687b      	ldr	r3, [r7, #4]
 8002f8a:	681a      	ldr	r2, [r3, #0]
 8002f8c:	4b1d      	ldr	r3, [pc, #116]	@ (8003004 <HAL_I2C_Init+0x134>)
 8002f8e:	430b      	orrs	r3, r1
 8002f90:	6053      	str	r3, [r2, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 8002f92:	687b      	ldr	r3, [r7, #4]
 8002f94:	681b      	ldr	r3, [r3, #0]
 8002f96:	68da      	ldr	r2, [r3, #12]
 8002f98:	687b      	ldr	r3, [r7, #4]
 8002f9a:	681b      	ldr	r3, [r3, #0]
 8002f9c:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 8002fa0:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8002fa2:	687b      	ldr	r3, [r7, #4]
 8002fa4:	691a      	ldr	r2, [r3, #16]
 8002fa6:	687b      	ldr	r3, [r7, #4]
 8002fa8:	695b      	ldr	r3, [r3, #20]
 8002faa:	ea42 0103 	orr.w	r1, r2, r3
                          (hi2c->Init.OwnAddress2Masks << 8));
 8002fae:	687b      	ldr	r3, [r7, #4]
 8002fb0:	699b      	ldr	r3, [r3, #24]
 8002fb2:	021a      	lsls	r2, r3, #8
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8002fb4:	687b      	ldr	r3, [r7, #4]
 8002fb6:	681b      	ldr	r3, [r3, #0]
 8002fb8:	430a      	orrs	r2, r1
 8002fba:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 8002fbc:	687b      	ldr	r3, [r7, #4]
 8002fbe:	69d9      	ldr	r1, [r3, #28]
 8002fc0:	687b      	ldr	r3, [r7, #4]
 8002fc2:	6a1a      	ldr	r2, [r3, #32]
 8002fc4:	687b      	ldr	r3, [r7, #4]
 8002fc6:	681b      	ldr	r3, [r3, #0]
 8002fc8:	430a      	orrs	r2, r1
 8002fca:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8002fcc:	687b      	ldr	r3, [r7, #4]
 8002fce:	681b      	ldr	r3, [r3, #0]
 8002fd0:	681a      	ldr	r2, [r3, #0]
 8002fd2:	687b      	ldr	r3, [r7, #4]
 8002fd4:	681b      	ldr	r3, [r3, #0]
 8002fd6:	f042 0201 	orr.w	r2, r2, #1
 8002fda:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8002fdc:	687b      	ldr	r3, [r7, #4]
 8002fde:	2200      	movs	r2, #0
 8002fe0:	645a      	str	r2, [r3, #68]	@ 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 8002fe2:	687b      	ldr	r3, [r7, #4]
 8002fe4:	2220      	movs	r2, #32
 8002fe6:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 8002fea:	687b      	ldr	r3, [r7, #4]
 8002fec:	2200      	movs	r2, #0
 8002fee:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8002ff0:	687b      	ldr	r3, [r7, #4]
 8002ff2:	2200      	movs	r2, #0
 8002ff4:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

  return HAL_OK;
 8002ff8:	2300      	movs	r3, #0
}
 8002ffa:	4618      	mov	r0, r3
 8002ffc:	3708      	adds	r7, #8
 8002ffe:	46bd      	mov	sp, r7
 8003000:	bd80      	pop	{r7, pc}
 8003002:	bf00      	nop
 8003004:	02008000 	.word	0x02008000

08003008 <HAL_I2C_Mem_Write>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress,
                                    uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8003008:	b580      	push	{r7, lr}
 800300a:	b088      	sub	sp, #32
 800300c:	af02      	add	r7, sp, #8
 800300e:	60f8      	str	r0, [r7, #12]
 8003010:	4608      	mov	r0, r1
 8003012:	4611      	mov	r1, r2
 8003014:	461a      	mov	r2, r3
 8003016:	4603      	mov	r3, r0
 8003018:	817b      	strh	r3, [r7, #10]
 800301a:	460b      	mov	r3, r1
 800301c:	813b      	strh	r3, [r7, #8]
 800301e:	4613      	mov	r3, r2
 8003020:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8003022:	68fb      	ldr	r3, [r7, #12]
 8003024:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8003028:	b2db      	uxtb	r3, r3
 800302a:	2b20      	cmp	r3, #32
 800302c:	f040 80f9 	bne.w	8003222 <HAL_I2C_Mem_Write+0x21a>
  {
    if ((pData == NULL) || (Size == 0U))
 8003030:	6a3b      	ldr	r3, [r7, #32]
 8003032:	2b00      	cmp	r3, #0
 8003034:	d002      	beq.n	800303c <HAL_I2C_Mem_Write+0x34>
 8003036:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 8003038:	2b00      	cmp	r3, #0
 800303a:	d105      	bne.n	8003048 <HAL_I2C_Mem_Write+0x40>
    {
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
 800303c:	68fb      	ldr	r3, [r7, #12]
 800303e:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8003042:	645a      	str	r2, [r3, #68]	@ 0x44
      return  HAL_ERROR;
 8003044:	2301      	movs	r3, #1
 8003046:	e0ed      	b.n	8003224 <HAL_I2C_Mem_Write+0x21c>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8003048:	68fb      	ldr	r3, [r7, #12]
 800304a:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 800304e:	2b01      	cmp	r3, #1
 8003050:	d101      	bne.n	8003056 <HAL_I2C_Mem_Write+0x4e>
 8003052:	2302      	movs	r3, #2
 8003054:	e0e6      	b.n	8003224 <HAL_I2C_Mem_Write+0x21c>
 8003056:	68fb      	ldr	r3, [r7, #12]
 8003058:	2201      	movs	r2, #1
 800305a:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 800305e:	f7fe ff19 	bl	8001e94 <HAL_GetTick>
 8003062:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 8003064:	697b      	ldr	r3, [r7, #20]
 8003066:	9300      	str	r3, [sp, #0]
 8003068:	2319      	movs	r3, #25
 800306a:	2201      	movs	r2, #1
 800306c:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 8003070:	68f8      	ldr	r0, [r7, #12]
 8003072:	f000 f955 	bl	8003320 <I2C_WaitOnFlagUntilTimeout>
 8003076:	4603      	mov	r3, r0
 8003078:	2b00      	cmp	r3, #0
 800307a:	d001      	beq.n	8003080 <HAL_I2C_Mem_Write+0x78>
    {
      return HAL_ERROR;
 800307c:	2301      	movs	r3, #1
 800307e:	e0d1      	b.n	8003224 <HAL_I2C_Mem_Write+0x21c>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 8003080:	68fb      	ldr	r3, [r7, #12]
 8003082:	2221      	movs	r2, #33	@ 0x21
 8003084:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8003088:	68fb      	ldr	r3, [r7, #12]
 800308a:	2240      	movs	r2, #64	@ 0x40
 800308c:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8003090:	68fb      	ldr	r3, [r7, #12]
 8003092:	2200      	movs	r2, #0
 8003094:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 8003096:	68fb      	ldr	r3, [r7, #12]
 8003098:	6a3a      	ldr	r2, [r7, #32]
 800309a:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount = Size;
 800309c:	68fb      	ldr	r3, [r7, #12]
 800309e:	8cba      	ldrh	r2, [r7, #36]	@ 0x24
 80030a0:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferISR   = NULL;
 80030a2:	68fb      	ldr	r3, [r7, #12]
 80030a4:	2200      	movs	r2, #0
 80030a6:	635a      	str	r2, [r3, #52]	@ 0x34

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 80030a8:	88f8      	ldrh	r0, [r7, #6]
 80030aa:	893a      	ldrh	r2, [r7, #8]
 80030ac:	8979      	ldrh	r1, [r7, #10]
 80030ae:	697b      	ldr	r3, [r7, #20]
 80030b0:	9301      	str	r3, [sp, #4]
 80030b2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80030b4:	9300      	str	r3, [sp, #0]
 80030b6:	4603      	mov	r3, r0
 80030b8:	68f8      	ldr	r0, [r7, #12]
 80030ba:	f000 f8b9 	bl	8003230 <I2C_RequestMemoryWrite>
 80030be:	4603      	mov	r3, r0
 80030c0:	2b00      	cmp	r3, #0
 80030c2:	d005      	beq.n	80030d0 <HAL_I2C_Mem_Write+0xc8>
    {
      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 80030c4:	68fb      	ldr	r3, [r7, #12]
 80030c6:	2200      	movs	r2, #0
 80030c8:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
      return HAL_ERROR;
 80030cc:	2301      	movs	r3, #1
 80030ce:	e0a9      	b.n	8003224 <HAL_I2C_Mem_Write+0x21c>
    }

    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 80030d0:	68fb      	ldr	r3, [r7, #12]
 80030d2:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80030d4:	b29b      	uxth	r3, r3
 80030d6:	2bff      	cmp	r3, #255	@ 0xff
 80030d8:	d90e      	bls.n	80030f8 <HAL_I2C_Mem_Write+0xf0>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 80030da:	68fb      	ldr	r3, [r7, #12]
 80030dc:	22ff      	movs	r2, #255	@ 0xff
 80030de:	851a      	strh	r2, [r3, #40]	@ 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE, I2C_NO_STARTSTOP);
 80030e0:	68fb      	ldr	r3, [r7, #12]
 80030e2:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80030e4:	b2da      	uxtb	r2, r3
 80030e6:	8979      	ldrh	r1, [r7, #10]
 80030e8:	2300      	movs	r3, #0
 80030ea:	9300      	str	r3, [sp, #0]
 80030ec:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 80030f0:	68f8      	ldr	r0, [r7, #12]
 80030f2:	f000 fad9 	bl	80036a8 <I2C_TransferConfig>
 80030f6:	e00f      	b.n	8003118 <HAL_I2C_Mem_Write+0x110>
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 80030f8:	68fb      	ldr	r3, [r7, #12]
 80030fa:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80030fc:	b29a      	uxth	r2, r3
 80030fe:	68fb      	ldr	r3, [r7, #12]
 8003100:	851a      	strh	r2, [r3, #40]	@ 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
 8003102:	68fb      	ldr	r3, [r7, #12]
 8003104:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003106:	b2da      	uxtb	r2, r3
 8003108:	8979      	ldrh	r1, [r7, #10]
 800310a:	2300      	movs	r3, #0
 800310c:	9300      	str	r3, [sp, #0]
 800310e:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8003112:	68f8      	ldr	r0, [r7, #12]
 8003114:	f000 fac8 	bl	80036a8 <I2C_TransferConfig>
    }

    do
    {
      /* Wait until TXIS flag is set */
      if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8003118:	697a      	ldr	r2, [r7, #20]
 800311a:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 800311c:	68f8      	ldr	r0, [r7, #12]
 800311e:	f000 f958 	bl	80033d2 <I2C_WaitOnTXISFlagUntilTimeout>
 8003122:	4603      	mov	r3, r0
 8003124:	2b00      	cmp	r3, #0
 8003126:	d001      	beq.n	800312c <HAL_I2C_Mem_Write+0x124>
      {
        return HAL_ERROR;
 8003128:	2301      	movs	r3, #1
 800312a:	e07b      	b.n	8003224 <HAL_I2C_Mem_Write+0x21c>
      }

      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 800312c:	68fb      	ldr	r3, [r7, #12]
 800312e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003130:	781a      	ldrb	r2, [r3, #0]
 8003132:	68fb      	ldr	r3, [r7, #12]
 8003134:	681b      	ldr	r3, [r3, #0]
 8003136:	629a      	str	r2, [r3, #40]	@ 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8003138:	68fb      	ldr	r3, [r7, #12]
 800313a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800313c:	1c5a      	adds	r2, r3, #1
 800313e:	68fb      	ldr	r3, [r7, #12]
 8003140:	625a      	str	r2, [r3, #36]	@ 0x24

      hi2c->XferCount--;
 8003142:	68fb      	ldr	r3, [r7, #12]
 8003144:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003146:	b29b      	uxth	r3, r3
 8003148:	3b01      	subs	r3, #1
 800314a:	b29a      	uxth	r2, r3
 800314c:	68fb      	ldr	r3, [r7, #12]
 800314e:	855a      	strh	r2, [r3, #42]	@ 0x2a
      hi2c->XferSize--;
 8003150:	68fb      	ldr	r3, [r7, #12]
 8003152:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003154:	3b01      	subs	r3, #1
 8003156:	b29a      	uxth	r2, r3
 8003158:	68fb      	ldr	r3, [r7, #12]
 800315a:	851a      	strh	r2, [r3, #40]	@ 0x28

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 800315c:	68fb      	ldr	r3, [r7, #12]
 800315e:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003160:	b29b      	uxth	r3, r3
 8003162:	2b00      	cmp	r3, #0
 8003164:	d034      	beq.n	80031d0 <HAL_I2C_Mem_Write+0x1c8>
 8003166:	68fb      	ldr	r3, [r7, #12]
 8003168:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800316a:	2b00      	cmp	r3, #0
 800316c:	d130      	bne.n	80031d0 <HAL_I2C_Mem_Write+0x1c8>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 800316e:	697b      	ldr	r3, [r7, #20]
 8003170:	9300      	str	r3, [sp, #0]
 8003172:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003174:	2200      	movs	r2, #0
 8003176:	2180      	movs	r1, #128	@ 0x80
 8003178:	68f8      	ldr	r0, [r7, #12]
 800317a:	f000 f8d1 	bl	8003320 <I2C_WaitOnFlagUntilTimeout>
 800317e:	4603      	mov	r3, r0
 8003180:	2b00      	cmp	r3, #0
 8003182:	d001      	beq.n	8003188 <HAL_I2C_Mem_Write+0x180>
        {
          return HAL_ERROR;
 8003184:	2301      	movs	r3, #1
 8003186:	e04d      	b.n	8003224 <HAL_I2C_Mem_Write+0x21c>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8003188:	68fb      	ldr	r3, [r7, #12]
 800318a:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800318c:	b29b      	uxth	r3, r3
 800318e:	2bff      	cmp	r3, #255	@ 0xff
 8003190:	d90e      	bls.n	80031b0 <HAL_I2C_Mem_Write+0x1a8>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 8003192:	68fb      	ldr	r3, [r7, #12]
 8003194:	22ff      	movs	r2, #255	@ 0xff
 8003196:	851a      	strh	r2, [r3, #40]	@ 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 8003198:	68fb      	ldr	r3, [r7, #12]
 800319a:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800319c:	b2da      	uxtb	r2, r3
 800319e:	8979      	ldrh	r1, [r7, #10]
 80031a0:	2300      	movs	r3, #0
 80031a2:	9300      	str	r3, [sp, #0]
 80031a4:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 80031a8:	68f8      	ldr	r0, [r7, #12]
 80031aa:	f000 fa7d 	bl	80036a8 <I2C_TransferConfig>
 80031ae:	e00f      	b.n	80031d0 <HAL_I2C_Mem_Write+0x1c8>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 80031b0:	68fb      	ldr	r3, [r7, #12]
 80031b2:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80031b4:	b29a      	uxth	r2, r3
 80031b6:	68fb      	ldr	r3, [r7, #12]
 80031b8:	851a      	strh	r2, [r3, #40]	@ 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 80031ba:	68fb      	ldr	r3, [r7, #12]
 80031bc:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80031be:	b2da      	uxtb	r2, r3
 80031c0:	8979      	ldrh	r1, [r7, #10]
 80031c2:	2300      	movs	r3, #0
 80031c4:	9300      	str	r3, [sp, #0]
 80031c6:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 80031ca:	68f8      	ldr	r0, [r7, #12]
 80031cc:	f000 fa6c 	bl	80036a8 <I2C_TransferConfig>
                             I2C_NO_STARTSTOP);
        }
      }

    } while (hi2c->XferCount > 0U);
 80031d0:	68fb      	ldr	r3, [r7, #12]
 80031d2:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80031d4:	b29b      	uxth	r3, r3
 80031d6:	2b00      	cmp	r3, #0
 80031d8:	d19e      	bne.n	8003118 <HAL_I2C_Mem_Write+0x110>

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is reset */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80031da:	697a      	ldr	r2, [r7, #20]
 80031dc:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 80031de:	68f8      	ldr	r0, [r7, #12]
 80031e0:	f000 f93e 	bl	8003460 <I2C_WaitOnSTOPFlagUntilTimeout>
 80031e4:	4603      	mov	r3, r0
 80031e6:	2b00      	cmp	r3, #0
 80031e8:	d001      	beq.n	80031ee <HAL_I2C_Mem_Write+0x1e6>
    {
      return HAL_ERROR;
 80031ea:	2301      	movs	r3, #1
 80031ec:	e01a      	b.n	8003224 <HAL_I2C_Mem_Write+0x21c>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 80031ee:	68fb      	ldr	r3, [r7, #12]
 80031f0:	681b      	ldr	r3, [r3, #0]
 80031f2:	2220      	movs	r2, #32
 80031f4:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 80031f6:	68fb      	ldr	r3, [r7, #12]
 80031f8:	681b      	ldr	r3, [r3, #0]
 80031fa:	6859      	ldr	r1, [r3, #4]
 80031fc:	68fb      	ldr	r3, [r7, #12]
 80031fe:	681a      	ldr	r2, [r3, #0]
 8003200:	4b0a      	ldr	r3, [pc, #40]	@ (800322c <HAL_I2C_Mem_Write+0x224>)
 8003202:	400b      	ands	r3, r1
 8003204:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 8003206:	68fb      	ldr	r3, [r7, #12]
 8003208:	2220      	movs	r2, #32
 800320a:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 800320e:	68fb      	ldr	r3, [r7, #12]
 8003210:	2200      	movs	r2, #0
 8003212:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003216:	68fb      	ldr	r3, [r7, #12]
 8003218:	2200      	movs	r2, #0
 800321a:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 800321e:	2300      	movs	r3, #0
 8003220:	e000      	b.n	8003224 <HAL_I2C_Mem_Write+0x21c>
  }
  else
  {
    return HAL_BUSY;
 8003222:	2302      	movs	r3, #2
  }
}
 8003224:	4618      	mov	r0, r3
 8003226:	3718      	adds	r7, #24
 8003228:	46bd      	mov	sp, r7
 800322a:	bd80      	pop	{r7, pc}
 800322c:	fe00e800 	.word	0xfe00e800

08003230 <I2C_RequestMemoryWrite>:
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress,
                                                uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout,
                                                uint32_t Tickstart)
{
 8003230:	b580      	push	{r7, lr}
 8003232:	b086      	sub	sp, #24
 8003234:	af02      	add	r7, sp, #8
 8003236:	60f8      	str	r0, [r7, #12]
 8003238:	4608      	mov	r0, r1
 800323a:	4611      	mov	r1, r2
 800323c:	461a      	mov	r2, r3
 800323e:	4603      	mov	r3, r0
 8003240:	817b      	strh	r3, [r7, #10]
 8003242:	460b      	mov	r3, r1
 8003244:	813b      	strh	r3, [r7, #8]
 8003246:	4613      	mov	r3, r2
 8003248:	80fb      	strh	r3, [r7, #6]
  I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_RELOAD_MODE, I2C_GENERATE_START_WRITE);
 800324a:	88fb      	ldrh	r3, [r7, #6]
 800324c:	b2da      	uxtb	r2, r3
 800324e:	8979      	ldrh	r1, [r7, #10]
 8003250:	4b20      	ldr	r3, [pc, #128]	@ (80032d4 <I2C_RequestMemoryWrite+0xa4>)
 8003252:	9300      	str	r3, [sp, #0]
 8003254:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 8003258:	68f8      	ldr	r0, [r7, #12]
 800325a:	f000 fa25 	bl	80036a8 <I2C_TransferConfig>

  /* Wait until TXIS flag is set */
  if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800325e:	69fa      	ldr	r2, [r7, #28]
 8003260:	69b9      	ldr	r1, [r7, #24]
 8003262:	68f8      	ldr	r0, [r7, #12]
 8003264:	f000 f8b5 	bl	80033d2 <I2C_WaitOnTXISFlagUntilTimeout>
 8003268:	4603      	mov	r3, r0
 800326a:	2b00      	cmp	r3, #0
 800326c:	d001      	beq.n	8003272 <I2C_RequestMemoryWrite+0x42>
  {
    return HAL_ERROR;
 800326e:	2301      	movs	r3, #1
 8003270:	e02c      	b.n	80032cc <I2C_RequestMemoryWrite+0x9c>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8003272:	88fb      	ldrh	r3, [r7, #6]
 8003274:	2b01      	cmp	r3, #1
 8003276:	d105      	bne.n	8003284 <I2C_RequestMemoryWrite+0x54>
  {
    /* Send Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8003278:	893b      	ldrh	r3, [r7, #8]
 800327a:	b2da      	uxtb	r2, r3
 800327c:	68fb      	ldr	r3, [r7, #12]
 800327e:	681b      	ldr	r3, [r3, #0]
 8003280:	629a      	str	r2, [r3, #40]	@ 0x28
 8003282:	e015      	b.n	80032b0 <I2C_RequestMemoryWrite+0x80>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress);
 8003284:	893b      	ldrh	r3, [r7, #8]
 8003286:	0a1b      	lsrs	r3, r3, #8
 8003288:	b29b      	uxth	r3, r3
 800328a:	b2da      	uxtb	r2, r3
 800328c:	68fb      	ldr	r3, [r7, #12]
 800328e:	681b      	ldr	r3, [r3, #0]
 8003290:	629a      	str	r2, [r3, #40]	@ 0x28

    /* Wait until TXIS flag is set */
    if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8003292:	69fa      	ldr	r2, [r7, #28]
 8003294:	69b9      	ldr	r1, [r7, #24]
 8003296:	68f8      	ldr	r0, [r7, #12]
 8003298:	f000 f89b 	bl	80033d2 <I2C_WaitOnTXISFlagUntilTimeout>
 800329c:	4603      	mov	r3, r0
 800329e:	2b00      	cmp	r3, #0
 80032a0:	d001      	beq.n	80032a6 <I2C_RequestMemoryWrite+0x76>
    {
      return HAL_ERROR;
 80032a2:	2301      	movs	r3, #1
 80032a4:	e012      	b.n	80032cc <I2C_RequestMemoryWrite+0x9c>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 80032a6:	893b      	ldrh	r3, [r7, #8]
 80032a8:	b2da      	uxtb	r2, r3
 80032aa:	68fb      	ldr	r3, [r7, #12]
 80032ac:	681b      	ldr	r3, [r3, #0]
 80032ae:	629a      	str	r2, [r3, #40]	@ 0x28
  }

  /* Wait until TCR flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, Tickstart) != HAL_OK)
 80032b0:	69fb      	ldr	r3, [r7, #28]
 80032b2:	9300      	str	r3, [sp, #0]
 80032b4:	69bb      	ldr	r3, [r7, #24]
 80032b6:	2200      	movs	r2, #0
 80032b8:	2180      	movs	r1, #128	@ 0x80
 80032ba:	68f8      	ldr	r0, [r7, #12]
 80032bc:	f000 f830 	bl	8003320 <I2C_WaitOnFlagUntilTimeout>
 80032c0:	4603      	mov	r3, r0
 80032c2:	2b00      	cmp	r3, #0
 80032c4:	d001      	beq.n	80032ca <I2C_RequestMemoryWrite+0x9a>
  {
    return HAL_ERROR;
 80032c6:	2301      	movs	r3, #1
 80032c8:	e000      	b.n	80032cc <I2C_RequestMemoryWrite+0x9c>
  }

  return HAL_OK;
 80032ca:	2300      	movs	r3, #0
}
 80032cc:	4618      	mov	r0, r3
 80032ce:	3710      	adds	r7, #16
 80032d0:	46bd      	mov	sp, r7
 80032d2:	bd80      	pop	{r7, pc}
 80032d4:	80002000 	.word	0x80002000

080032d8 <I2C_Flush_TXDR>:
  * @brief  I2C Tx data register flush process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_Flush_TXDR(I2C_HandleTypeDef *hi2c)
{
 80032d8:	b480      	push	{r7}
 80032da:	b083      	sub	sp, #12
 80032dc:	af00      	add	r7, sp, #0
 80032de:	6078      	str	r0, [r7, #4]
  /* If a pending TXIS flag is set */
  /* Write a dummy data in TXDR to clear it */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) != RESET)
 80032e0:	687b      	ldr	r3, [r7, #4]
 80032e2:	681b      	ldr	r3, [r3, #0]
 80032e4:	699b      	ldr	r3, [r3, #24]
 80032e6:	f003 0302 	and.w	r3, r3, #2
 80032ea:	2b02      	cmp	r3, #2
 80032ec:	d103      	bne.n	80032f6 <I2C_Flush_TXDR+0x1e>
  {
    hi2c->Instance->TXDR = 0x00U;
 80032ee:	687b      	ldr	r3, [r7, #4]
 80032f0:	681b      	ldr	r3, [r3, #0]
 80032f2:	2200      	movs	r2, #0
 80032f4:	629a      	str	r2, [r3, #40]	@ 0x28
  }

  /* Flush TX register if not empty */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 80032f6:	687b      	ldr	r3, [r7, #4]
 80032f8:	681b      	ldr	r3, [r3, #0]
 80032fa:	699b      	ldr	r3, [r3, #24]
 80032fc:	f003 0301 	and.w	r3, r3, #1
 8003300:	2b01      	cmp	r3, #1
 8003302:	d007      	beq.n	8003314 <I2C_Flush_TXDR+0x3c>
  {
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_TXE);
 8003304:	687b      	ldr	r3, [r7, #4]
 8003306:	681b      	ldr	r3, [r3, #0]
 8003308:	699a      	ldr	r2, [r3, #24]
 800330a:	687b      	ldr	r3, [r7, #4]
 800330c:	681b      	ldr	r3, [r3, #0]
 800330e:	f042 0201 	orr.w	r2, r2, #1
 8003312:	619a      	str	r2, [r3, #24]
  }
}
 8003314:	bf00      	nop
 8003316:	370c      	adds	r7, #12
 8003318:	46bd      	mov	sp, r7
 800331a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800331e:	4770      	bx	lr

08003320 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status,
                                                    uint32_t Timeout, uint32_t Tickstart)
{
 8003320:	b580      	push	{r7, lr}
 8003322:	b084      	sub	sp, #16
 8003324:	af00      	add	r7, sp, #0
 8003326:	60f8      	str	r0, [r7, #12]
 8003328:	60b9      	str	r1, [r7, #8]
 800332a:	603b      	str	r3, [r7, #0]
 800332c:	4613      	mov	r3, r2
 800332e:	71fb      	strb	r3, [r7, #7]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8003330:	e03b      	b.n	80033aa <I2C_WaitOnFlagUntilTimeout+0x8a>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 8003332:	69ba      	ldr	r2, [r7, #24]
 8003334:	6839      	ldr	r1, [r7, #0]
 8003336:	68f8      	ldr	r0, [r7, #12]
 8003338:	f000 f8d6 	bl	80034e8 <I2C_IsErrorOccurred>
 800333c:	4603      	mov	r3, r0
 800333e:	2b00      	cmp	r3, #0
 8003340:	d001      	beq.n	8003346 <I2C_WaitOnFlagUntilTimeout+0x26>
    {
      return HAL_ERROR;
 8003342:	2301      	movs	r3, #1
 8003344:	e041      	b.n	80033ca <I2C_WaitOnFlagUntilTimeout+0xaa>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003346:	683b      	ldr	r3, [r7, #0]
 8003348:	f1b3 3fff 	cmp.w	r3, #4294967295
 800334c:	d02d      	beq.n	80033aa <I2C_WaitOnFlagUntilTimeout+0x8a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800334e:	f7fe fda1 	bl	8001e94 <HAL_GetTick>
 8003352:	4602      	mov	r2, r0
 8003354:	69bb      	ldr	r3, [r7, #24]
 8003356:	1ad3      	subs	r3, r2, r3
 8003358:	683a      	ldr	r2, [r7, #0]
 800335a:	429a      	cmp	r2, r3
 800335c:	d302      	bcc.n	8003364 <I2C_WaitOnFlagUntilTimeout+0x44>
 800335e:	683b      	ldr	r3, [r7, #0]
 8003360:	2b00      	cmp	r3, #0
 8003362:	d122      	bne.n	80033aa <I2C_WaitOnFlagUntilTimeout+0x8a>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == Status))
 8003364:	68fb      	ldr	r3, [r7, #12]
 8003366:	681b      	ldr	r3, [r3, #0]
 8003368:	699a      	ldr	r2, [r3, #24]
 800336a:	68bb      	ldr	r3, [r7, #8]
 800336c:	4013      	ands	r3, r2
 800336e:	68ba      	ldr	r2, [r7, #8]
 8003370:	429a      	cmp	r2, r3
 8003372:	bf0c      	ite	eq
 8003374:	2301      	moveq	r3, #1
 8003376:	2300      	movne	r3, #0
 8003378:	b2db      	uxtb	r3, r3
 800337a:	461a      	mov	r2, r3
 800337c:	79fb      	ldrb	r3, [r7, #7]
 800337e:	429a      	cmp	r2, r3
 8003380:	d113      	bne.n	80033aa <I2C_WaitOnFlagUntilTimeout+0x8a>
        {
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8003382:	68fb      	ldr	r3, [r7, #12]
 8003384:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003386:	f043 0220 	orr.w	r2, r3, #32
 800338a:	68fb      	ldr	r3, [r7, #12]
 800338c:	645a      	str	r2, [r3, #68]	@ 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 800338e:	68fb      	ldr	r3, [r7, #12]
 8003390:	2220      	movs	r2, #32
 8003392:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8003396:	68fb      	ldr	r3, [r7, #12]
 8003398:	2200      	movs	r2, #0
 800339a:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 800339e:	68fb      	ldr	r3, [r7, #12]
 80033a0:	2200      	movs	r2, #0
 80033a2:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
          return HAL_ERROR;
 80033a6:	2301      	movs	r3, #1
 80033a8:	e00f      	b.n	80033ca <I2C_WaitOnFlagUntilTimeout+0xaa>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 80033aa:	68fb      	ldr	r3, [r7, #12]
 80033ac:	681b      	ldr	r3, [r3, #0]
 80033ae:	699a      	ldr	r2, [r3, #24]
 80033b0:	68bb      	ldr	r3, [r7, #8]
 80033b2:	4013      	ands	r3, r2
 80033b4:	68ba      	ldr	r2, [r7, #8]
 80033b6:	429a      	cmp	r2, r3
 80033b8:	bf0c      	ite	eq
 80033ba:	2301      	moveq	r3, #1
 80033bc:	2300      	movne	r3, #0
 80033be:	b2db      	uxtb	r3, r3
 80033c0:	461a      	mov	r2, r3
 80033c2:	79fb      	ldrb	r3, [r7, #7]
 80033c4:	429a      	cmp	r2, r3
 80033c6:	d0b4      	beq.n	8003332 <I2C_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 80033c8:	2300      	movs	r3, #0
}
 80033ca:	4618      	mov	r0, r3
 80033cc:	3710      	adds	r7, #16
 80033ce:	46bd      	mov	sp, r7
 80033d0:	bd80      	pop	{r7, pc}

080033d2 <I2C_WaitOnTXISFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXISFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 80033d2:	b580      	push	{r7, lr}
 80033d4:	b084      	sub	sp, #16
 80033d6:	af00      	add	r7, sp, #0
 80033d8:	60f8      	str	r0, [r7, #12]
 80033da:	60b9      	str	r1, [r7, #8]
 80033dc:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 80033de:	e033      	b.n	8003448 <I2C_WaitOnTXISFlagUntilTimeout+0x76>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 80033e0:	687a      	ldr	r2, [r7, #4]
 80033e2:	68b9      	ldr	r1, [r7, #8]
 80033e4:	68f8      	ldr	r0, [r7, #12]
 80033e6:	f000 f87f 	bl	80034e8 <I2C_IsErrorOccurred>
 80033ea:	4603      	mov	r3, r0
 80033ec:	2b00      	cmp	r3, #0
 80033ee:	d001      	beq.n	80033f4 <I2C_WaitOnTXISFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 80033f0:	2301      	movs	r3, #1
 80033f2:	e031      	b.n	8003458 <I2C_WaitOnTXISFlagUntilTimeout+0x86>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80033f4:	68bb      	ldr	r3, [r7, #8]
 80033f6:	f1b3 3fff 	cmp.w	r3, #4294967295
 80033fa:	d025      	beq.n	8003448 <I2C_WaitOnTXISFlagUntilTimeout+0x76>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80033fc:	f7fe fd4a 	bl	8001e94 <HAL_GetTick>
 8003400:	4602      	mov	r2, r0
 8003402:	687b      	ldr	r3, [r7, #4]
 8003404:	1ad3      	subs	r3, r2, r3
 8003406:	68ba      	ldr	r2, [r7, #8]
 8003408:	429a      	cmp	r2, r3
 800340a:	d302      	bcc.n	8003412 <I2C_WaitOnTXISFlagUntilTimeout+0x40>
 800340c:	68bb      	ldr	r3, [r7, #8]
 800340e:	2b00      	cmp	r3, #0
 8003410:	d11a      	bne.n	8003448 <I2C_WaitOnTXISFlagUntilTimeout+0x76>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET))
 8003412:	68fb      	ldr	r3, [r7, #12]
 8003414:	681b      	ldr	r3, [r3, #0]
 8003416:	699b      	ldr	r3, [r3, #24]
 8003418:	f003 0302 	and.w	r3, r3, #2
 800341c:	2b02      	cmp	r3, #2
 800341e:	d013      	beq.n	8003448 <I2C_WaitOnTXISFlagUntilTimeout+0x76>
        {
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8003420:	68fb      	ldr	r3, [r7, #12]
 8003422:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003424:	f043 0220 	orr.w	r2, r3, #32
 8003428:	68fb      	ldr	r3, [r7, #12]
 800342a:	645a      	str	r2, [r3, #68]	@ 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 800342c:	68fb      	ldr	r3, [r7, #12]
 800342e:	2220      	movs	r2, #32
 8003430:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8003434:	68fb      	ldr	r3, [r7, #12]
 8003436:	2200      	movs	r2, #0
 8003438:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 800343c:	68fb      	ldr	r3, [r7, #12]
 800343e:	2200      	movs	r2, #0
 8003440:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

          return HAL_ERROR;
 8003444:	2301      	movs	r3, #1
 8003446:	e007      	b.n	8003458 <I2C_WaitOnTXISFlagUntilTimeout+0x86>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 8003448:	68fb      	ldr	r3, [r7, #12]
 800344a:	681b      	ldr	r3, [r3, #0]
 800344c:	699b      	ldr	r3, [r3, #24]
 800344e:	f003 0302 	and.w	r3, r3, #2
 8003452:	2b02      	cmp	r3, #2
 8003454:	d1c4      	bne.n	80033e0 <I2C_WaitOnTXISFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 8003456:	2300      	movs	r3, #0
}
 8003458:	4618      	mov	r0, r3
 800345a:	3710      	adds	r7, #16
 800345c:	46bd      	mov	sp, r7
 800345e:	bd80      	pop	{r7, pc}

08003460 <I2C_WaitOnSTOPFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnSTOPFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 8003460:	b580      	push	{r7, lr}
 8003462:	b084      	sub	sp, #16
 8003464:	af00      	add	r7, sp, #0
 8003466:	60f8      	str	r0, [r7, #12]
 8003468:	60b9      	str	r1, [r7, #8]
 800346a:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 800346c:	e02f      	b.n	80034ce <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 800346e:	687a      	ldr	r2, [r7, #4]
 8003470:	68b9      	ldr	r1, [r7, #8]
 8003472:	68f8      	ldr	r0, [r7, #12]
 8003474:	f000 f838 	bl	80034e8 <I2C_IsErrorOccurred>
 8003478:	4603      	mov	r3, r0
 800347a:	2b00      	cmp	r3, #0
 800347c:	d001      	beq.n	8003482 <I2C_WaitOnSTOPFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 800347e:	2301      	movs	r3, #1
 8003480:	e02d      	b.n	80034de <I2C_WaitOnSTOPFlagUntilTimeout+0x7e>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003482:	f7fe fd07 	bl	8001e94 <HAL_GetTick>
 8003486:	4602      	mov	r2, r0
 8003488:	687b      	ldr	r3, [r7, #4]
 800348a:	1ad3      	subs	r3, r2, r3
 800348c:	68ba      	ldr	r2, [r7, #8]
 800348e:	429a      	cmp	r2, r3
 8003490:	d302      	bcc.n	8003498 <I2C_WaitOnSTOPFlagUntilTimeout+0x38>
 8003492:	68bb      	ldr	r3, [r7, #8]
 8003494:	2b00      	cmp	r3, #0
 8003496:	d11a      	bne.n	80034ce <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
    {
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET))
 8003498:	68fb      	ldr	r3, [r7, #12]
 800349a:	681b      	ldr	r3, [r3, #0]
 800349c:	699b      	ldr	r3, [r3, #24]
 800349e:	f003 0320 	and.w	r3, r3, #32
 80034a2:	2b20      	cmp	r3, #32
 80034a4:	d013      	beq.n	80034ce <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 80034a6:	68fb      	ldr	r3, [r7, #12]
 80034a8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80034aa:	f043 0220 	orr.w	r2, r3, #32
 80034ae:	68fb      	ldr	r3, [r7, #12]
 80034b0:	645a      	str	r2, [r3, #68]	@ 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 80034b2:	68fb      	ldr	r3, [r7, #12]
 80034b4:	2220      	movs	r2, #32
 80034b6:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 80034ba:	68fb      	ldr	r3, [r7, #12]
 80034bc:	2200      	movs	r2, #0
 80034be:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80034c2:	68fb      	ldr	r3, [r7, #12]
 80034c4:	2200      	movs	r2, #0
 80034c6:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

        return HAL_ERROR;
 80034ca:	2301      	movs	r3, #1
 80034cc:	e007      	b.n	80034de <I2C_WaitOnSTOPFlagUntilTimeout+0x7e>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 80034ce:	68fb      	ldr	r3, [r7, #12]
 80034d0:	681b      	ldr	r3, [r3, #0]
 80034d2:	699b      	ldr	r3, [r3, #24]
 80034d4:	f003 0320 	and.w	r3, r3, #32
 80034d8:	2b20      	cmp	r3, #32
 80034da:	d1c8      	bne.n	800346e <I2C_WaitOnSTOPFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 80034dc:	2300      	movs	r3, #0
}
 80034de:	4618      	mov	r0, r3
 80034e0:	3710      	adds	r7, #16
 80034e2:	46bd      	mov	sp, r7
 80034e4:	bd80      	pop	{r7, pc}
	...

080034e8 <I2C_IsErrorOccurred>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsErrorOccurred(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 80034e8:	b580      	push	{r7, lr}
 80034ea:	b08a      	sub	sp, #40	@ 0x28
 80034ec:	af00      	add	r7, sp, #0
 80034ee:	60f8      	str	r0, [r7, #12]
 80034f0:	60b9      	str	r1, [r7, #8]
 80034f2:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80034f4:	2300      	movs	r3, #0
 80034f6:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  uint32_t itflag   = hi2c->Instance->ISR;
 80034fa:	68fb      	ldr	r3, [r7, #12]
 80034fc:	681b      	ldr	r3, [r3, #0]
 80034fe:	699b      	ldr	r3, [r3, #24]
 8003500:	61bb      	str	r3, [r7, #24]
  uint32_t error_code = 0;
 8003502:	2300      	movs	r3, #0
 8003504:	623b      	str	r3, [r7, #32]
  uint32_t tickstart = Tickstart;
 8003506:	687b      	ldr	r3, [r7, #4]
 8003508:	61fb      	str	r3, [r7, #28]
  uint32_t tmp1;
  HAL_I2C_ModeTypeDef tmp2;

  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_AF))
 800350a:	69bb      	ldr	r3, [r7, #24]
 800350c:	f003 0310 	and.w	r3, r3, #16
 8003510:	2b00      	cmp	r3, #0
 8003512:	d068      	beq.n	80035e6 <I2C_IsErrorOccurred+0xfe>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8003514:	68fb      	ldr	r3, [r7, #12]
 8003516:	681b      	ldr	r3, [r3, #0]
 8003518:	2210      	movs	r2, #16
 800351a:	61da      	str	r2, [r3, #28]

    /* Wait until STOP Flag is set or timeout occurred */
    /* AutoEnd should be initiate after AF */
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 800351c:	e049      	b.n	80035b2 <I2C_IsErrorOccurred+0xca>
    {
      /* Check for the Timeout */
      if (Timeout != HAL_MAX_DELAY)
 800351e:	68bb      	ldr	r3, [r7, #8]
 8003520:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003524:	d045      	beq.n	80035b2 <I2C_IsErrorOccurred+0xca>
      {
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 8003526:	f7fe fcb5 	bl	8001e94 <HAL_GetTick>
 800352a:	4602      	mov	r2, r0
 800352c:	69fb      	ldr	r3, [r7, #28]
 800352e:	1ad3      	subs	r3, r2, r3
 8003530:	68ba      	ldr	r2, [r7, #8]
 8003532:	429a      	cmp	r2, r3
 8003534:	d302      	bcc.n	800353c <I2C_IsErrorOccurred+0x54>
 8003536:	68bb      	ldr	r3, [r7, #8]
 8003538:	2b00      	cmp	r3, #0
 800353a:	d13a      	bne.n	80035b2 <I2C_IsErrorOccurred+0xca>
        {
          tmp1 = (uint32_t)(hi2c->Instance->CR2 & I2C_CR2_STOP);
 800353c:	68fb      	ldr	r3, [r7, #12]
 800353e:	681b      	ldr	r3, [r3, #0]
 8003540:	685b      	ldr	r3, [r3, #4]
 8003542:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8003546:	617b      	str	r3, [r7, #20]
          tmp2 = hi2c->Mode;
 8003548:	68fb      	ldr	r3, [r7, #12]
 800354a:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 800354e:	74fb      	strb	r3, [r7, #19]

          /* In case of I2C still busy, try to regenerate a STOP manually */
          if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) != RESET) && \
 8003550:	68fb      	ldr	r3, [r7, #12]
 8003552:	681b      	ldr	r3, [r3, #0]
 8003554:	699b      	ldr	r3, [r3, #24]
 8003556:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 800355a:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 800355e:	d121      	bne.n	80035a4 <I2C_IsErrorOccurred+0xbc>
 8003560:	697b      	ldr	r3, [r7, #20]
 8003562:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8003566:	d01d      	beq.n	80035a4 <I2C_IsErrorOccurred+0xbc>
              (tmp1 != I2C_CR2_STOP) && \
 8003568:	7cfb      	ldrb	r3, [r7, #19]
 800356a:	2b20      	cmp	r3, #32
 800356c:	d01a      	beq.n	80035a4 <I2C_IsErrorOccurred+0xbc>
              (tmp2 != HAL_I2C_MODE_SLAVE))
          {
            /* Generate Stop */
            hi2c->Instance->CR2 |= I2C_CR2_STOP;
 800356e:	68fb      	ldr	r3, [r7, #12]
 8003570:	681b      	ldr	r3, [r3, #0]
 8003572:	685a      	ldr	r2, [r3, #4]
 8003574:	68fb      	ldr	r3, [r7, #12]
 8003576:	681b      	ldr	r3, [r3, #0]
 8003578:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 800357c:	605a      	str	r2, [r3, #4]

            /* Update Tick with new reference */
            tickstart = HAL_GetTick();
 800357e:	f7fe fc89 	bl	8001e94 <HAL_GetTick>
 8003582:	61f8      	str	r0, [r7, #28]
          }

          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8003584:	e00e      	b.n	80035a4 <I2C_IsErrorOccurred+0xbc>
          {
            /* Check for the Timeout */
            if ((HAL_GetTick() - tickstart) > I2C_TIMEOUT_STOPF)
 8003586:	f7fe fc85 	bl	8001e94 <HAL_GetTick>
 800358a:	4602      	mov	r2, r0
 800358c:	69fb      	ldr	r3, [r7, #28]
 800358e:	1ad3      	subs	r3, r2, r3
 8003590:	2b19      	cmp	r3, #25
 8003592:	d907      	bls.n	80035a4 <I2C_IsErrorOccurred+0xbc>
            {
              error_code |= HAL_I2C_ERROR_TIMEOUT;
 8003594:	6a3b      	ldr	r3, [r7, #32]
 8003596:	f043 0320 	orr.w	r3, r3, #32
 800359a:	623b      	str	r3, [r7, #32]

              status = HAL_ERROR;
 800359c:	2301      	movs	r3, #1
 800359e:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27

              break;
 80035a2:	e006      	b.n	80035b2 <I2C_IsErrorOccurred+0xca>
          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 80035a4:	68fb      	ldr	r3, [r7, #12]
 80035a6:	681b      	ldr	r3, [r3, #0]
 80035a8:	699b      	ldr	r3, [r3, #24]
 80035aa:	f003 0320 	and.w	r3, r3, #32
 80035ae:	2b20      	cmp	r3, #32
 80035b0:	d1e9      	bne.n	8003586 <I2C_IsErrorOccurred+0x9e>
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 80035b2:	68fb      	ldr	r3, [r7, #12]
 80035b4:	681b      	ldr	r3, [r3, #0]
 80035b6:	699b      	ldr	r3, [r3, #24]
 80035b8:	f003 0320 	and.w	r3, r3, #32
 80035bc:	2b20      	cmp	r3, #32
 80035be:	d003      	beq.n	80035c8 <I2C_IsErrorOccurred+0xe0>
 80035c0:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 80035c4:	2b00      	cmp	r3, #0
 80035c6:	d0aa      	beq.n	800351e <I2C_IsErrorOccurred+0x36>
        }
      }
    }

    /* In case STOP Flag is detected, clear it */
    if (status == HAL_OK)
 80035c8:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 80035cc:	2b00      	cmp	r3, #0
 80035ce:	d103      	bne.n	80035d8 <I2C_IsErrorOccurred+0xf0>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 80035d0:	68fb      	ldr	r3, [r7, #12]
 80035d2:	681b      	ldr	r3, [r3, #0]
 80035d4:	2220      	movs	r2, #32
 80035d6:	61da      	str	r2, [r3, #28]
    }

    error_code |= HAL_I2C_ERROR_AF;
 80035d8:	6a3b      	ldr	r3, [r7, #32]
 80035da:	f043 0304 	orr.w	r3, r3, #4
 80035de:	623b      	str	r3, [r7, #32]

    status = HAL_ERROR;
 80035e0:	2301      	movs	r3, #1
 80035e2:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  }

  /* Refresh Content of Status register */
  itflag = hi2c->Instance->ISR;
 80035e6:	68fb      	ldr	r3, [r7, #12]
 80035e8:	681b      	ldr	r3, [r3, #0]
 80035ea:	699b      	ldr	r3, [r3, #24]
 80035ec:	61bb      	str	r3, [r7, #24]

  /* Then verify if an additional errors occurs */
  /* Check if a Bus error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_BERR))
 80035ee:	69bb      	ldr	r3, [r7, #24]
 80035f0:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80035f4:	2b00      	cmp	r3, #0
 80035f6:	d00b      	beq.n	8003610 <I2C_IsErrorOccurred+0x128>
  {
    error_code |= HAL_I2C_ERROR_BERR;
 80035f8:	6a3b      	ldr	r3, [r7, #32]
 80035fa:	f043 0301 	orr.w	r3, r3, #1
 80035fe:	623b      	str	r3, [r7, #32]

    /* Clear BERR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_BERR);
 8003600:	68fb      	ldr	r3, [r7, #12]
 8003602:	681b      	ldr	r3, [r3, #0]
 8003604:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8003608:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 800360a:	2301      	movs	r3, #1
 800360c:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  }

  /* Check if an Over-Run/Under-Run error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_OVR))
 8003610:	69bb      	ldr	r3, [r7, #24]
 8003612:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8003616:	2b00      	cmp	r3, #0
 8003618:	d00b      	beq.n	8003632 <I2C_IsErrorOccurred+0x14a>
  {
    error_code |= HAL_I2C_ERROR_OVR;
 800361a:	6a3b      	ldr	r3, [r7, #32]
 800361c:	f043 0308 	orr.w	r3, r3, #8
 8003620:	623b      	str	r3, [r7, #32]

    /* Clear OVR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
 8003622:	68fb      	ldr	r3, [r7, #12]
 8003624:	681b      	ldr	r3, [r3, #0]
 8003626:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 800362a:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 800362c:	2301      	movs	r3, #1
 800362e:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  }

  /* Check if an Arbitration Loss error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_ARLO))
 8003632:	69bb      	ldr	r3, [r7, #24]
 8003634:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8003638:	2b00      	cmp	r3, #0
 800363a:	d00b      	beq.n	8003654 <I2C_IsErrorOccurred+0x16c>
  {
    error_code |= HAL_I2C_ERROR_ARLO;
 800363c:	6a3b      	ldr	r3, [r7, #32]
 800363e:	f043 0302 	orr.w	r3, r3, #2
 8003642:	623b      	str	r3, [r7, #32]

    /* Clear ARLO flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
 8003644:	68fb      	ldr	r3, [r7, #12]
 8003646:	681b      	ldr	r3, [r3, #0]
 8003648:	f44f 7200 	mov.w	r2, #512	@ 0x200
 800364c:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 800364e:	2301      	movs	r3, #1
 8003650:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  }

  if (status != HAL_OK)
 8003654:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8003658:	2b00      	cmp	r3, #0
 800365a:	d01c      	beq.n	8003696 <I2C_IsErrorOccurred+0x1ae>
  {
    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 800365c:	68f8      	ldr	r0, [r7, #12]
 800365e:	f7ff fe3b 	bl	80032d8 <I2C_Flush_TXDR>

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8003662:	68fb      	ldr	r3, [r7, #12]
 8003664:	681b      	ldr	r3, [r3, #0]
 8003666:	6859      	ldr	r1, [r3, #4]
 8003668:	68fb      	ldr	r3, [r7, #12]
 800366a:	681a      	ldr	r2, [r3, #0]
 800366c:	4b0d      	ldr	r3, [pc, #52]	@ (80036a4 <I2C_IsErrorOccurred+0x1bc>)
 800366e:	400b      	ands	r3, r1
 8003670:	6053      	str	r3, [r2, #4]

    hi2c->ErrorCode |= error_code;
 8003672:	68fb      	ldr	r3, [r7, #12]
 8003674:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8003676:	6a3b      	ldr	r3, [r7, #32]
 8003678:	431a      	orrs	r2, r3
 800367a:	68fb      	ldr	r3, [r7, #12]
 800367c:	645a      	str	r2, [r3, #68]	@ 0x44
    hi2c->State = HAL_I2C_STATE_READY;
 800367e:	68fb      	ldr	r3, [r7, #12]
 8003680:	2220      	movs	r2, #32
 8003682:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8003686:	68fb      	ldr	r3, [r7, #12]
 8003688:	2200      	movs	r2, #0
 800368a:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800368e:	68fb      	ldr	r3, [r7, #12]
 8003690:	2200      	movs	r2, #0
 8003692:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
  }

  return status;
 8003696:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
}
 800369a:	4618      	mov	r0, r3
 800369c:	3728      	adds	r7, #40	@ 0x28
 800369e:	46bd      	mov	sp, r7
 80036a0:	bd80      	pop	{r7, pc}
 80036a2:	bf00      	nop
 80036a4:	fe00e800 	.word	0xfe00e800

080036a8 <I2C_TransferConfig>:
  *     @arg @ref I2C_GENERATE_START_WRITE Generate Restart for write request.
  * @retval None
  */
static void I2C_TransferConfig(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t Size, uint32_t Mode,
                               uint32_t Request)
{
 80036a8:	b480      	push	{r7}
 80036aa:	b087      	sub	sp, #28
 80036ac:	af00      	add	r7, sp, #0
 80036ae:	60f8      	str	r0, [r7, #12]
 80036b0:	607b      	str	r3, [r7, #4]
 80036b2:	460b      	mov	r3, r1
 80036b4:	817b      	strh	r3, [r7, #10]
 80036b6:	4613      	mov	r3, r2
 80036b8:	727b      	strb	r3, [r7, #9]
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_TRANSFER_MODE(Mode));
  assert_param(IS_TRANSFER_REQUEST(Request));

  /* Declaration of tmp to prevent undefined behavior of volatile usage */
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 80036ba:	897b      	ldrh	r3, [r7, #10]
 80036bc:	f3c3 0209 	ubfx	r2, r3, #0, #10
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 80036c0:	7a7b      	ldrb	r3, [r7, #9]
 80036c2:	041b      	lsls	r3, r3, #16
 80036c4:	f403 037f 	and.w	r3, r3, #16711680	@ 0xff0000
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 80036c8:	431a      	orrs	r2, r3
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 80036ca:	687b      	ldr	r3, [r7, #4]
 80036cc:	431a      	orrs	r2, r3
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 80036ce:	6a3b      	ldr	r3, [r7, #32]
 80036d0:	4313      	orrs	r3, r2
 80036d2:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 80036d6:	617b      	str	r3, [r7, #20]
                             (uint32_t)Mode | (uint32_t)Request) & (~0x80000000U));

  /* update CR2 register */
  MODIFY_REG(hi2c->Instance->CR2, \
 80036d8:	68fb      	ldr	r3, [r7, #12]
 80036da:	681b      	ldr	r3, [r3, #0]
 80036dc:	685a      	ldr	r2, [r3, #4]
 80036de:	6a3b      	ldr	r3, [r7, #32]
 80036e0:	0d5b      	lsrs	r3, r3, #21
 80036e2:	f403 6180 	and.w	r1, r3, #1024	@ 0x400
 80036e6:	4b08      	ldr	r3, [pc, #32]	@ (8003708 <I2C_TransferConfig+0x60>)
 80036e8:	430b      	orrs	r3, r1
 80036ea:	43db      	mvns	r3, r3
 80036ec:	ea02 0103 	and.w	r1, r2, r3
 80036f0:	68fb      	ldr	r3, [r7, #12]
 80036f2:	681b      	ldr	r3, [r3, #0]
 80036f4:	697a      	ldr	r2, [r7, #20]
 80036f6:	430a      	orrs	r2, r1
 80036f8:	605a      	str	r2, [r3, #4]
             ((I2C_CR2_SADD | I2C_CR2_NBYTES | I2C_CR2_RELOAD | I2C_CR2_AUTOEND | \
               (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) | \
               I2C_CR2_START | I2C_CR2_STOP)), tmp);
}
 80036fa:	bf00      	nop
 80036fc:	371c      	adds	r7, #28
 80036fe:	46bd      	mov	sp, r7
 8003700:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003704:	4770      	bx	lr
 8003706:	bf00      	nop
 8003708:	03ff63ff 	.word	0x03ff63ff

0800370c <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 800370c:	b480      	push	{r7}
 800370e:	b083      	sub	sp, #12
 8003710:	af00      	add	r7, sp, #0
 8003712:	6078      	str	r0, [r7, #4]
 8003714:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8003716:	687b      	ldr	r3, [r7, #4]
 8003718:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800371c:	b2db      	uxtb	r3, r3
 800371e:	2b20      	cmp	r3, #32
 8003720:	d138      	bne.n	8003794 <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8003722:	687b      	ldr	r3, [r7, #4]
 8003724:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8003728:	2b01      	cmp	r3, #1
 800372a:	d101      	bne.n	8003730 <HAL_I2CEx_ConfigAnalogFilter+0x24>
 800372c:	2302      	movs	r3, #2
 800372e:	e032      	b.n	8003796 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 8003730:	687b      	ldr	r3, [r7, #4]
 8003732:	2201      	movs	r2, #1
 8003734:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8003738:	687b      	ldr	r3, [r7, #4]
 800373a:	2224      	movs	r2, #36	@ 0x24
 800373c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8003740:	687b      	ldr	r3, [r7, #4]
 8003742:	681b      	ldr	r3, [r3, #0]
 8003744:	681a      	ldr	r2, [r3, #0]
 8003746:	687b      	ldr	r3, [r7, #4]
 8003748:	681b      	ldr	r3, [r3, #0]
 800374a:	f022 0201 	bic.w	r2, r2, #1
 800374e:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 8003750:	687b      	ldr	r3, [r7, #4]
 8003752:	681b      	ldr	r3, [r3, #0]
 8003754:	681a      	ldr	r2, [r3, #0]
 8003756:	687b      	ldr	r3, [r7, #4]
 8003758:	681b      	ldr	r3, [r3, #0]
 800375a:	f422 5280 	bic.w	r2, r2, #4096	@ 0x1000
 800375e:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 8003760:	687b      	ldr	r3, [r7, #4]
 8003762:	681b      	ldr	r3, [r3, #0]
 8003764:	6819      	ldr	r1, [r3, #0]
 8003766:	687b      	ldr	r3, [r7, #4]
 8003768:	681b      	ldr	r3, [r3, #0]
 800376a:	683a      	ldr	r2, [r7, #0]
 800376c:	430a      	orrs	r2, r1
 800376e:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8003770:	687b      	ldr	r3, [r7, #4]
 8003772:	681b      	ldr	r3, [r3, #0]
 8003774:	681a      	ldr	r2, [r3, #0]
 8003776:	687b      	ldr	r3, [r7, #4]
 8003778:	681b      	ldr	r3, [r3, #0]
 800377a:	f042 0201 	orr.w	r2, r2, #1
 800377e:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8003780:	687b      	ldr	r3, [r7, #4]
 8003782:	2220      	movs	r2, #32
 8003784:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003788:	687b      	ldr	r3, [r7, #4]
 800378a:	2200      	movs	r2, #0
 800378c:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 8003790:	2300      	movs	r3, #0
 8003792:	e000      	b.n	8003796 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 8003794:	2302      	movs	r3, #2
  }
}
 8003796:	4618      	mov	r0, r3
 8003798:	370c      	adds	r7, #12
 800379a:	46bd      	mov	sp, r7
 800379c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80037a0:	4770      	bx	lr

080037a2 <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 80037a2:	b480      	push	{r7}
 80037a4:	b085      	sub	sp, #20
 80037a6:	af00      	add	r7, sp, #0
 80037a8:	6078      	str	r0, [r7, #4]
 80037aa:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80037ac:	687b      	ldr	r3, [r7, #4]
 80037ae:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80037b2:	b2db      	uxtb	r3, r3
 80037b4:	2b20      	cmp	r3, #32
 80037b6:	d139      	bne.n	800382c <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 80037b8:	687b      	ldr	r3, [r7, #4]
 80037ba:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 80037be:	2b01      	cmp	r3, #1
 80037c0:	d101      	bne.n	80037c6 <HAL_I2CEx_ConfigDigitalFilter+0x24>
 80037c2:	2302      	movs	r3, #2
 80037c4:	e033      	b.n	800382e <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 80037c6:	687b      	ldr	r3, [r7, #4]
 80037c8:	2201      	movs	r2, #1
 80037ca:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 80037ce:	687b      	ldr	r3, [r7, #4]
 80037d0:	2224      	movs	r2, #36	@ 0x24
 80037d2:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 80037d6:	687b      	ldr	r3, [r7, #4]
 80037d8:	681b      	ldr	r3, [r3, #0]
 80037da:	681a      	ldr	r2, [r3, #0]
 80037dc:	687b      	ldr	r3, [r7, #4]
 80037de:	681b      	ldr	r3, [r3, #0]
 80037e0:	f022 0201 	bic.w	r2, r2, #1
 80037e4:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 80037e6:	687b      	ldr	r3, [r7, #4]
 80037e8:	681b      	ldr	r3, [r3, #0]
 80037ea:	681b      	ldr	r3, [r3, #0]
 80037ec:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 80037ee:	68fb      	ldr	r3, [r7, #12]
 80037f0:	f423 6370 	bic.w	r3, r3, #3840	@ 0xf00
 80037f4:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 80037f6:	683b      	ldr	r3, [r7, #0]
 80037f8:	021b      	lsls	r3, r3, #8
 80037fa:	68fa      	ldr	r2, [r7, #12]
 80037fc:	4313      	orrs	r3, r2
 80037fe:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 8003800:	687b      	ldr	r3, [r7, #4]
 8003802:	681b      	ldr	r3, [r3, #0]
 8003804:	68fa      	ldr	r2, [r7, #12]
 8003806:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8003808:	687b      	ldr	r3, [r7, #4]
 800380a:	681b      	ldr	r3, [r3, #0]
 800380c:	681a      	ldr	r2, [r3, #0]
 800380e:	687b      	ldr	r3, [r7, #4]
 8003810:	681b      	ldr	r3, [r3, #0]
 8003812:	f042 0201 	orr.w	r2, r2, #1
 8003816:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8003818:	687b      	ldr	r3, [r7, #4]
 800381a:	2220      	movs	r2, #32
 800381c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003820:	687b      	ldr	r3, [r7, #4]
 8003822:	2200      	movs	r2, #0
 8003824:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 8003828:	2300      	movs	r3, #0
 800382a:	e000      	b.n	800382e <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 800382c:	2302      	movs	r3, #2
  }
}
 800382e:	4618      	mov	r0, r3
 8003830:	3714      	adds	r7, #20
 8003832:	46bd      	mov	sp, r7
 8003834:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003838:	4770      	bx	lr

0800383a <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 800383a:	b580      	push	{r7, lr}
 800383c:	b086      	sub	sp, #24
 800383e:	af02      	add	r7, sp, #8
 8003840:	6078      	str	r0, [r7, #4]
  const USB_OTG_GlobalTypeDef *USBx;
#endif /* defined (USB_OTG_FS) */
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 8003842:	687b      	ldr	r3, [r7, #4]
 8003844:	2b00      	cmp	r3, #0
 8003846:	d101      	bne.n	800384c <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 8003848:	2301      	movs	r3, #1
 800384a:	e108      	b.n	8003a5e <HAL_PCD_Init+0x224>

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

#if defined (USB_OTG_FS)
  USBx = hpcd->Instance;
 800384c:	687b      	ldr	r3, [r7, #4]
 800384e:	681b      	ldr	r3, [r3, #0]
 8003850:	60bb      	str	r3, [r7, #8]
#endif /* defined (USB_OTG_FS) */

  if (hpcd->State == HAL_PCD_STATE_RESET)
 8003852:	687b      	ldr	r3, [r7, #4]
 8003854:	f893 3495 	ldrb.w	r3, [r3, #1173]	@ 0x495
 8003858:	b2db      	uxtb	r3, r3
 800385a:	2b00      	cmp	r3, #0
 800385c:	d106      	bne.n	800386c <HAL_PCD_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 800385e:	687b      	ldr	r3, [r7, #4]
 8003860:	2200      	movs	r2, #0
 8003862:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 8003866:	6878      	ldr	r0, [r7, #4]
 8003868:	f7fe f93c 	bl	8001ae4 <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 800386c:	687b      	ldr	r3, [r7, #4]
 800386e:	2203      	movs	r2, #3
 8003870:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495

#if defined (USB_OTG_FS)
  /* Disable DMA mode for FS instance */
  if (USBx == USB_OTG_FS)
 8003874:	68bb      	ldr	r3, [r7, #8]
 8003876:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 800387a:	d102      	bne.n	8003882 <HAL_PCD_Init+0x48>
  {
    hpcd->Init.dma_enable = 0U;
 800387c:	687b      	ldr	r3, [r7, #4]
 800387e:	2200      	movs	r2, #0
 8003880:	719a      	strb	r2, [r3, #6]
  }
#endif /* defined (USB_OTG_FS) */

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 8003882:	687b      	ldr	r3, [r7, #4]
 8003884:	681b      	ldr	r3, [r3, #0]
 8003886:	4618      	mov	r0, r3
 8003888:	f003 fb18 	bl	8006ebc <USB_DisableGlobalInt>

  /*Init the Core (common init.) */
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 800388c:	687b      	ldr	r3, [r7, #4]
 800388e:	6818      	ldr	r0, [r3, #0]
 8003890:	687b      	ldr	r3, [r7, #4]
 8003892:	7c1a      	ldrb	r2, [r3, #16]
 8003894:	f88d 2000 	strb.w	r2, [sp]
 8003898:	3304      	adds	r3, #4
 800389a:	cb0e      	ldmia	r3, {r1, r2, r3}
 800389c:	f003 fab4 	bl	8006e08 <USB_CoreInit>
 80038a0:	4603      	mov	r3, r0
 80038a2:	2b00      	cmp	r3, #0
 80038a4:	d005      	beq.n	80038b2 <HAL_PCD_Init+0x78>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 80038a6:	687b      	ldr	r3, [r7, #4]
 80038a8:	2202      	movs	r2, #2
 80038aa:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495
    return HAL_ERROR;
 80038ae:	2301      	movs	r3, #1
 80038b0:	e0d5      	b.n	8003a5e <HAL_PCD_Init+0x224>
  }

  /* Force Device Mode */
  if (USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE) != HAL_OK)
 80038b2:	687b      	ldr	r3, [r7, #4]
 80038b4:	681b      	ldr	r3, [r3, #0]
 80038b6:	2100      	movs	r1, #0
 80038b8:	4618      	mov	r0, r3
 80038ba:	f003 fb10 	bl	8006ede <USB_SetCurrentMode>
 80038be:	4603      	mov	r3, r0
 80038c0:	2b00      	cmp	r3, #0
 80038c2:	d005      	beq.n	80038d0 <HAL_PCD_Init+0x96>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 80038c4:	687b      	ldr	r3, [r7, #4]
 80038c6:	2202      	movs	r2, #2
 80038c8:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495
    return HAL_ERROR;
 80038cc:	2301      	movs	r3, #1
 80038ce:	e0c6      	b.n	8003a5e <HAL_PCD_Init+0x224>
  }

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80038d0:	2300      	movs	r3, #0
 80038d2:	73fb      	strb	r3, [r7, #15]
 80038d4:	e04a      	b.n	800396c <HAL_PCD_Init+0x132>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 80038d6:	7bfa      	ldrb	r2, [r7, #15]
 80038d8:	6879      	ldr	r1, [r7, #4]
 80038da:	4613      	mov	r3, r2
 80038dc:	00db      	lsls	r3, r3, #3
 80038de:	4413      	add	r3, r2
 80038e0:	009b      	lsls	r3, r3, #2
 80038e2:	440b      	add	r3, r1
 80038e4:	3315      	adds	r3, #21
 80038e6:	2201      	movs	r2, #1
 80038e8:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 80038ea:	7bfa      	ldrb	r2, [r7, #15]
 80038ec:	6879      	ldr	r1, [r7, #4]
 80038ee:	4613      	mov	r3, r2
 80038f0:	00db      	lsls	r3, r3, #3
 80038f2:	4413      	add	r3, r2
 80038f4:	009b      	lsls	r3, r3, #2
 80038f6:	440b      	add	r3, r1
 80038f8:	3314      	adds	r3, #20
 80038fa:	7bfa      	ldrb	r2, [r7, #15]
 80038fc:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].tx_fifo_num = i;
 80038fe:	7bfa      	ldrb	r2, [r7, #15]
 8003900:	7bfb      	ldrb	r3, [r7, #15]
 8003902:	b298      	uxth	r0, r3
 8003904:	6879      	ldr	r1, [r7, #4]
 8003906:	4613      	mov	r3, r2
 8003908:	00db      	lsls	r3, r3, #3
 800390a:	4413      	add	r3, r2
 800390c:	009b      	lsls	r3, r3, #2
 800390e:	440b      	add	r3, r1
 8003910:	332e      	adds	r3, #46	@ 0x2e
 8003912:	4602      	mov	r2, r0
 8003914:	801a      	strh	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 8003916:	7bfa      	ldrb	r2, [r7, #15]
 8003918:	6879      	ldr	r1, [r7, #4]
 800391a:	4613      	mov	r3, r2
 800391c:	00db      	lsls	r3, r3, #3
 800391e:	4413      	add	r3, r2
 8003920:	009b      	lsls	r3, r3, #2
 8003922:	440b      	add	r3, r1
 8003924:	3318      	adds	r3, #24
 8003926:	2200      	movs	r2, #0
 8003928:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 800392a:	7bfa      	ldrb	r2, [r7, #15]
 800392c:	6879      	ldr	r1, [r7, #4]
 800392e:	4613      	mov	r3, r2
 8003930:	00db      	lsls	r3, r3, #3
 8003932:	4413      	add	r3, r2
 8003934:	009b      	lsls	r3, r3, #2
 8003936:	440b      	add	r3, r1
 8003938:	331c      	adds	r3, #28
 800393a:	2200      	movs	r2, #0
 800393c:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 800393e:	7bfa      	ldrb	r2, [r7, #15]
 8003940:	6879      	ldr	r1, [r7, #4]
 8003942:	4613      	mov	r3, r2
 8003944:	00db      	lsls	r3, r3, #3
 8003946:	4413      	add	r3, r2
 8003948:	009b      	lsls	r3, r3, #2
 800394a:	440b      	add	r3, r1
 800394c:	3320      	adds	r3, #32
 800394e:	2200      	movs	r2, #0
 8003950:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 8003952:	7bfa      	ldrb	r2, [r7, #15]
 8003954:	6879      	ldr	r1, [r7, #4]
 8003956:	4613      	mov	r3, r2
 8003958:	00db      	lsls	r3, r3, #3
 800395a:	4413      	add	r3, r2
 800395c:	009b      	lsls	r3, r3, #2
 800395e:	440b      	add	r3, r1
 8003960:	3324      	adds	r3, #36	@ 0x24
 8003962:	2200      	movs	r2, #0
 8003964:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8003966:	7bfb      	ldrb	r3, [r7, #15]
 8003968:	3301      	adds	r3, #1
 800396a:	73fb      	strb	r3, [r7, #15]
 800396c:	687b      	ldr	r3, [r7, #4]
 800396e:	791b      	ldrb	r3, [r3, #4]
 8003970:	7bfa      	ldrb	r2, [r7, #15]
 8003972:	429a      	cmp	r2, r3
 8003974:	d3af      	bcc.n	80038d6 <HAL_PCD_Init+0x9c>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8003976:	2300      	movs	r3, #0
 8003978:	73fb      	strb	r3, [r7, #15]
 800397a:	e044      	b.n	8003a06 <HAL_PCD_Init+0x1cc>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 800397c:	7bfa      	ldrb	r2, [r7, #15]
 800397e:	6879      	ldr	r1, [r7, #4]
 8003980:	4613      	mov	r3, r2
 8003982:	00db      	lsls	r3, r3, #3
 8003984:	4413      	add	r3, r2
 8003986:	009b      	lsls	r3, r3, #2
 8003988:	440b      	add	r3, r1
 800398a:	f203 2355 	addw	r3, r3, #597	@ 0x255
 800398e:	2200      	movs	r2, #0
 8003990:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 8003992:	7bfa      	ldrb	r2, [r7, #15]
 8003994:	6879      	ldr	r1, [r7, #4]
 8003996:	4613      	mov	r3, r2
 8003998:	00db      	lsls	r3, r3, #3
 800399a:	4413      	add	r3, r2
 800399c:	009b      	lsls	r3, r3, #2
 800399e:	440b      	add	r3, r1
 80039a0:	f503 7315 	add.w	r3, r3, #596	@ 0x254
 80039a4:	7bfa      	ldrb	r2, [r7, #15]
 80039a6:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 80039a8:	7bfa      	ldrb	r2, [r7, #15]
 80039aa:	6879      	ldr	r1, [r7, #4]
 80039ac:	4613      	mov	r3, r2
 80039ae:	00db      	lsls	r3, r3, #3
 80039b0:	4413      	add	r3, r2
 80039b2:	009b      	lsls	r3, r3, #2
 80039b4:	440b      	add	r3, r1
 80039b6:	f503 7316 	add.w	r3, r3, #600	@ 0x258
 80039ba:	2200      	movs	r2, #0
 80039bc:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 80039be:	7bfa      	ldrb	r2, [r7, #15]
 80039c0:	6879      	ldr	r1, [r7, #4]
 80039c2:	4613      	mov	r3, r2
 80039c4:	00db      	lsls	r3, r3, #3
 80039c6:	4413      	add	r3, r2
 80039c8:	009b      	lsls	r3, r3, #2
 80039ca:	440b      	add	r3, r1
 80039cc:	f503 7317 	add.w	r3, r3, #604	@ 0x25c
 80039d0:	2200      	movs	r2, #0
 80039d2:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 80039d4:	7bfa      	ldrb	r2, [r7, #15]
 80039d6:	6879      	ldr	r1, [r7, #4]
 80039d8:	4613      	mov	r3, r2
 80039da:	00db      	lsls	r3, r3, #3
 80039dc:	4413      	add	r3, r2
 80039de:	009b      	lsls	r3, r3, #2
 80039e0:	440b      	add	r3, r1
 80039e2:	f503 7318 	add.w	r3, r3, #608	@ 0x260
 80039e6:	2200      	movs	r2, #0
 80039e8:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 80039ea:	7bfa      	ldrb	r2, [r7, #15]
 80039ec:	6879      	ldr	r1, [r7, #4]
 80039ee:	4613      	mov	r3, r2
 80039f0:	00db      	lsls	r3, r3, #3
 80039f2:	4413      	add	r3, r2
 80039f4:	009b      	lsls	r3, r3, #2
 80039f6:	440b      	add	r3, r1
 80039f8:	f503 7319 	add.w	r3, r3, #612	@ 0x264
 80039fc:	2200      	movs	r2, #0
 80039fe:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8003a00:	7bfb      	ldrb	r3, [r7, #15]
 8003a02:	3301      	adds	r3, #1
 8003a04:	73fb      	strb	r3, [r7, #15]
 8003a06:	687b      	ldr	r3, [r7, #4]
 8003a08:	791b      	ldrb	r3, [r3, #4]
 8003a0a:	7bfa      	ldrb	r2, [r7, #15]
 8003a0c:	429a      	cmp	r2, r3
 8003a0e:	d3b5      	bcc.n	800397c <HAL_PCD_Init+0x142>
  }

  /* Init Device */
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8003a10:	687b      	ldr	r3, [r7, #4]
 8003a12:	6818      	ldr	r0, [r3, #0]
 8003a14:	687b      	ldr	r3, [r7, #4]
 8003a16:	7c1a      	ldrb	r2, [r3, #16]
 8003a18:	f88d 2000 	strb.w	r2, [sp]
 8003a1c:	3304      	adds	r3, #4
 8003a1e:	cb0e      	ldmia	r3, {r1, r2, r3}
 8003a20:	f003 faaa 	bl	8006f78 <USB_DevInit>
 8003a24:	4603      	mov	r3, r0
 8003a26:	2b00      	cmp	r3, #0
 8003a28:	d005      	beq.n	8003a36 <HAL_PCD_Init+0x1fc>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8003a2a:	687b      	ldr	r3, [r7, #4]
 8003a2c:	2202      	movs	r2, #2
 8003a2e:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495
    return HAL_ERROR;
 8003a32:	2301      	movs	r3, #1
 8003a34:	e013      	b.n	8003a5e <HAL_PCD_Init+0x224>
  }

  hpcd->USB_Address = 0U;
 8003a36:	687b      	ldr	r3, [r7, #4]
 8003a38:	2200      	movs	r2, #0
 8003a3a:	745a      	strb	r2, [r3, #17]
  hpcd->State = HAL_PCD_STATE_READY;
 8003a3c:	687b      	ldr	r3, [r7, #4]
 8003a3e:	2201      	movs	r2, #1
 8003a40:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495

  /* Activate LPM */
  if (hpcd->Init.lpm_enable == 1U)
 8003a44:	687b      	ldr	r3, [r7, #4]
 8003a46:	7b1b      	ldrb	r3, [r3, #12]
 8003a48:	2b01      	cmp	r3, #1
 8003a4a:	d102      	bne.n	8003a52 <HAL_PCD_Init+0x218>
  {
    (void)HAL_PCDEx_ActivateLPM(hpcd);
 8003a4c:	6878      	ldr	r0, [r7, #4]
 8003a4e:	f000 f80b 	bl	8003a68 <HAL_PCDEx_ActivateLPM>
  }

  (void)USB_DevDisconnect(hpcd->Instance);
 8003a52:	687b      	ldr	r3, [r7, #4]
 8003a54:	681b      	ldr	r3, [r3, #0]
 8003a56:	4618      	mov	r0, r3
 8003a58:	f003 fc65 	bl	8007326 <USB_DevDisconnect>

  return HAL_OK;
 8003a5c:	2300      	movs	r3, #0
}
 8003a5e:	4618      	mov	r0, r3
 8003a60:	3710      	adds	r7, #16
 8003a62:	46bd      	mov	sp, r7
 8003a64:	bd80      	pop	{r7, pc}
	...

08003a68 <HAL_PCDEx_ActivateLPM>:
  * @brief  Activate LPM feature.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_ActivateLPM(PCD_HandleTypeDef *hpcd)
{
 8003a68:	b480      	push	{r7}
 8003a6a:	b085      	sub	sp, #20
 8003a6c:	af00      	add	r7, sp, #0
 8003a6e:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8003a70:	687b      	ldr	r3, [r7, #4]
 8003a72:	681b      	ldr	r3, [r3, #0]
 8003a74:	60fb      	str	r3, [r7, #12]

  hpcd->lpm_active = 1U;
 8003a76:	687b      	ldr	r3, [r7, #4]
 8003a78:	2201      	movs	r2, #1
 8003a7a:	f8c3 24d8 	str.w	r2, [r3, #1240]	@ 0x4d8
  hpcd->LPM_State = LPM_L0;
 8003a7e:	687b      	ldr	r3, [r7, #4]
 8003a80:	2200      	movs	r2, #0
 8003a82:	f883 24cc 	strb.w	r2, [r3, #1228]	@ 0x4cc
  USBx->GINTMSK |= USB_OTG_GINTMSK_LPMINTM;
 8003a86:	68fb      	ldr	r3, [r7, #12]
 8003a88:	699b      	ldr	r3, [r3, #24]
 8003a8a:	f043 6200 	orr.w	r2, r3, #134217728	@ 0x8000000
 8003a8e:	68fb      	ldr	r3, [r7, #12]
 8003a90:	619a      	str	r2, [r3, #24]
  USBx->GLPMCFG |= (USB_OTG_GLPMCFG_LPMEN | USB_OTG_GLPMCFG_LPMACK | USB_OTG_GLPMCFG_ENBESL);
 8003a92:	68fb      	ldr	r3, [r7, #12]
 8003a94:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 8003a96:	4b05      	ldr	r3, [pc, #20]	@ (8003aac <HAL_PCDEx_ActivateLPM+0x44>)
 8003a98:	4313      	orrs	r3, r2
 8003a9a:	68fa      	ldr	r2, [r7, #12]
 8003a9c:	6553      	str	r3, [r2, #84]	@ 0x54

  return HAL_OK;
 8003a9e:	2300      	movs	r3, #0
}
 8003aa0:	4618      	mov	r0, r3
 8003aa2:	3714      	adds	r7, #20
 8003aa4:	46bd      	mov	sp, r7
 8003aa6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003aaa:	4770      	bx	lr
 8003aac:	10000003 	.word	0x10000003

08003ab0 <HAL_PWR_EnableBkUpAccess>:
  * @note If the HSE divided by 2, 3, ..31 is used as the RTC clock, the 
  *         Backup Domain Access should be kept enabled.
  * @retval None
  */
void HAL_PWR_EnableBkUpAccess(void)
{
 8003ab0:	b480      	push	{r7}
 8003ab2:	af00      	add	r7, sp, #0
  /* Enable access to RTC and backup registers */
  SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8003ab4:	4b05      	ldr	r3, [pc, #20]	@ (8003acc <HAL_PWR_EnableBkUpAccess+0x1c>)
 8003ab6:	681b      	ldr	r3, [r3, #0]
 8003ab8:	4a04      	ldr	r2, [pc, #16]	@ (8003acc <HAL_PWR_EnableBkUpAccess+0x1c>)
 8003aba:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8003abe:	6013      	str	r3, [r2, #0]
}
 8003ac0:	bf00      	nop
 8003ac2:	46bd      	mov	sp, r7
 8003ac4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ac8:	4770      	bx	lr
 8003aca:	bf00      	nop
 8003acc:	40007000 	.word	0x40007000

08003ad0 <HAL_PWREx_EnableOverDrive>:
  *         During the Over-drive switch activation, no peripheral clocks should be enabled.   
  *         The peripheral clocks must be enabled once the Over-drive mode is activated.   
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PWREx_EnableOverDrive(void)
{
 8003ad0:	b580      	push	{r7, lr}
 8003ad2:	b082      	sub	sp, #8
 8003ad4:	af00      	add	r7, sp, #0
  uint32_t tickstart = 0;
 8003ad6:	2300      	movs	r3, #0
 8003ad8:	607b      	str	r3, [r7, #4]

  __HAL_RCC_PWR_CLK_ENABLE();
 8003ada:	4b23      	ldr	r3, [pc, #140]	@ (8003b68 <HAL_PWREx_EnableOverDrive+0x98>)
 8003adc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003ade:	4a22      	ldr	r2, [pc, #136]	@ (8003b68 <HAL_PWREx_EnableOverDrive+0x98>)
 8003ae0:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8003ae4:	6413      	str	r3, [r2, #64]	@ 0x40
 8003ae6:	4b20      	ldr	r3, [pc, #128]	@ (8003b68 <HAL_PWREx_EnableOverDrive+0x98>)
 8003ae8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003aea:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8003aee:	603b      	str	r3, [r7, #0]
 8003af0:	683b      	ldr	r3, [r7, #0]
  
  /* Enable the Over-drive to extend the clock frequency to 216 MHz */
  __HAL_PWR_OVERDRIVE_ENABLE();
 8003af2:	4b1e      	ldr	r3, [pc, #120]	@ (8003b6c <HAL_PWREx_EnableOverDrive+0x9c>)
 8003af4:	681b      	ldr	r3, [r3, #0]
 8003af6:	4a1d      	ldr	r2, [pc, #116]	@ (8003b6c <HAL_PWREx_EnableOverDrive+0x9c>)
 8003af8:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8003afc:	6013      	str	r3, [r2, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8003afe:	f7fe f9c9 	bl	8001e94 <HAL_GetTick>
 8003b02:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 8003b04:	e009      	b.n	8003b1a <HAL_PWREx_EnableOverDrive+0x4a>
  {
    if((HAL_GetTick() - tickstart ) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 8003b06:	f7fe f9c5 	bl	8001e94 <HAL_GetTick>
 8003b0a:	4602      	mov	r2, r0
 8003b0c:	687b      	ldr	r3, [r7, #4]
 8003b0e:	1ad3      	subs	r3, r2, r3
 8003b10:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 8003b14:	d901      	bls.n	8003b1a <HAL_PWREx_EnableOverDrive+0x4a>
    {
      return HAL_TIMEOUT;
 8003b16:	2303      	movs	r3, #3
 8003b18:	e022      	b.n	8003b60 <HAL_PWREx_EnableOverDrive+0x90>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 8003b1a:	4b14      	ldr	r3, [pc, #80]	@ (8003b6c <HAL_PWREx_EnableOverDrive+0x9c>)
 8003b1c:	685b      	ldr	r3, [r3, #4]
 8003b1e:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8003b22:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8003b26:	d1ee      	bne.n	8003b06 <HAL_PWREx_EnableOverDrive+0x36>
    }
  }
  
  /* Enable the Over-drive switch */
  __HAL_PWR_OVERDRIVESWITCHING_ENABLE();
 8003b28:	4b10      	ldr	r3, [pc, #64]	@ (8003b6c <HAL_PWREx_EnableOverDrive+0x9c>)
 8003b2a:	681b      	ldr	r3, [r3, #0]
 8003b2c:	4a0f      	ldr	r2, [pc, #60]	@ (8003b6c <HAL_PWREx_EnableOverDrive+0x9c>)
 8003b2e:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8003b32:	6013      	str	r3, [r2, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8003b34:	f7fe f9ae 	bl	8001e94 <HAL_GetTick>
 8003b38:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 8003b3a:	e009      	b.n	8003b50 <HAL_PWREx_EnableOverDrive+0x80>
  {
    if((HAL_GetTick() - tickstart ) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 8003b3c:	f7fe f9aa 	bl	8001e94 <HAL_GetTick>
 8003b40:	4602      	mov	r2, r0
 8003b42:	687b      	ldr	r3, [r7, #4]
 8003b44:	1ad3      	subs	r3, r2, r3
 8003b46:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 8003b4a:	d901      	bls.n	8003b50 <HAL_PWREx_EnableOverDrive+0x80>
    {
      return HAL_TIMEOUT;
 8003b4c:	2303      	movs	r3, #3
 8003b4e:	e007      	b.n	8003b60 <HAL_PWREx_EnableOverDrive+0x90>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 8003b50:	4b06      	ldr	r3, [pc, #24]	@ (8003b6c <HAL_PWREx_EnableOverDrive+0x9c>)
 8003b52:	685b      	ldr	r3, [r3, #4]
 8003b54:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003b58:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8003b5c:	d1ee      	bne.n	8003b3c <HAL_PWREx_EnableOverDrive+0x6c>
    }
  } 
  return HAL_OK;
 8003b5e:	2300      	movs	r3, #0
}
 8003b60:	4618      	mov	r0, r3
 8003b62:	3708      	adds	r7, #8
 8003b64:	46bd      	mov	sp, r7
 8003b66:	bd80      	pop	{r7, pc}
 8003b68:	40023800 	.word	0x40023800
 8003b6c:	40007000 	.word	0x40007000

08003b70 <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8003b70:	b580      	push	{r7, lr}
 8003b72:	b086      	sub	sp, #24
 8003b74:	af00      	add	r7, sp, #0
 8003b76:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  FlagStatus pwrclkchanged = RESET;
 8003b78:	2300      	movs	r3, #0
 8003b7a:	75fb      	strb	r3, [r7, #23]

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8003b7c:	687b      	ldr	r3, [r7, #4]
 8003b7e:	2b00      	cmp	r3, #0
 8003b80:	d101      	bne.n	8003b86 <HAL_RCC_OscConfig+0x16>
  {
    return HAL_ERROR;
 8003b82:	2301      	movs	r3, #1
 8003b84:	e29b      	b.n	80040be <HAL_RCC_OscConfig+0x54e>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8003b86:	687b      	ldr	r3, [r7, #4]
 8003b88:	681b      	ldr	r3, [r3, #0]
 8003b8a:	f003 0301 	and.w	r3, r3, #1
 8003b8e:	2b00      	cmp	r3, #0
 8003b90:	f000 8087 	beq.w	8003ca2 <HAL_RCC_OscConfig+0x132>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL, It can not be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8003b94:	4b96      	ldr	r3, [pc, #600]	@ (8003df0 <HAL_RCC_OscConfig+0x280>)
 8003b96:	689b      	ldr	r3, [r3, #8]
 8003b98:	f003 030c 	and.w	r3, r3, #12
 8003b9c:	2b04      	cmp	r3, #4
 8003b9e:	d00c      	beq.n	8003bba <HAL_RCC_OscConfig+0x4a>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8003ba0:	4b93      	ldr	r3, [pc, #588]	@ (8003df0 <HAL_RCC_OscConfig+0x280>)
 8003ba2:	689b      	ldr	r3, [r3, #8]
 8003ba4:	f003 030c 	and.w	r3, r3, #12
 8003ba8:	2b08      	cmp	r3, #8
 8003baa:	d112      	bne.n	8003bd2 <HAL_RCC_OscConfig+0x62>
 8003bac:	4b90      	ldr	r3, [pc, #576]	@ (8003df0 <HAL_RCC_OscConfig+0x280>)
 8003bae:	685b      	ldr	r3, [r3, #4]
 8003bb0:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8003bb4:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8003bb8:	d10b      	bne.n	8003bd2 <HAL_RCC_OscConfig+0x62>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003bba:	4b8d      	ldr	r3, [pc, #564]	@ (8003df0 <HAL_RCC_OscConfig+0x280>)
 8003bbc:	681b      	ldr	r3, [r3, #0]
 8003bbe:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003bc2:	2b00      	cmp	r3, #0
 8003bc4:	d06c      	beq.n	8003ca0 <HAL_RCC_OscConfig+0x130>
 8003bc6:	687b      	ldr	r3, [r7, #4]
 8003bc8:	685b      	ldr	r3, [r3, #4]
 8003bca:	2b00      	cmp	r3, #0
 8003bcc:	d168      	bne.n	8003ca0 <HAL_RCC_OscConfig+0x130>
      {
        return HAL_ERROR;
 8003bce:	2301      	movs	r3, #1
 8003bd0:	e275      	b.n	80040be <HAL_RCC_OscConfig+0x54e>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8003bd2:	687b      	ldr	r3, [r7, #4]
 8003bd4:	685b      	ldr	r3, [r3, #4]
 8003bd6:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8003bda:	d106      	bne.n	8003bea <HAL_RCC_OscConfig+0x7a>
 8003bdc:	4b84      	ldr	r3, [pc, #528]	@ (8003df0 <HAL_RCC_OscConfig+0x280>)
 8003bde:	681b      	ldr	r3, [r3, #0]
 8003be0:	4a83      	ldr	r2, [pc, #524]	@ (8003df0 <HAL_RCC_OscConfig+0x280>)
 8003be2:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8003be6:	6013      	str	r3, [r2, #0]
 8003be8:	e02e      	b.n	8003c48 <HAL_RCC_OscConfig+0xd8>
 8003bea:	687b      	ldr	r3, [r7, #4]
 8003bec:	685b      	ldr	r3, [r3, #4]
 8003bee:	2b00      	cmp	r3, #0
 8003bf0:	d10c      	bne.n	8003c0c <HAL_RCC_OscConfig+0x9c>
 8003bf2:	4b7f      	ldr	r3, [pc, #508]	@ (8003df0 <HAL_RCC_OscConfig+0x280>)
 8003bf4:	681b      	ldr	r3, [r3, #0]
 8003bf6:	4a7e      	ldr	r2, [pc, #504]	@ (8003df0 <HAL_RCC_OscConfig+0x280>)
 8003bf8:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8003bfc:	6013      	str	r3, [r2, #0]
 8003bfe:	4b7c      	ldr	r3, [pc, #496]	@ (8003df0 <HAL_RCC_OscConfig+0x280>)
 8003c00:	681b      	ldr	r3, [r3, #0]
 8003c02:	4a7b      	ldr	r2, [pc, #492]	@ (8003df0 <HAL_RCC_OscConfig+0x280>)
 8003c04:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8003c08:	6013      	str	r3, [r2, #0]
 8003c0a:	e01d      	b.n	8003c48 <HAL_RCC_OscConfig+0xd8>
 8003c0c:	687b      	ldr	r3, [r7, #4]
 8003c0e:	685b      	ldr	r3, [r3, #4]
 8003c10:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8003c14:	d10c      	bne.n	8003c30 <HAL_RCC_OscConfig+0xc0>
 8003c16:	4b76      	ldr	r3, [pc, #472]	@ (8003df0 <HAL_RCC_OscConfig+0x280>)
 8003c18:	681b      	ldr	r3, [r3, #0]
 8003c1a:	4a75      	ldr	r2, [pc, #468]	@ (8003df0 <HAL_RCC_OscConfig+0x280>)
 8003c1c:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8003c20:	6013      	str	r3, [r2, #0]
 8003c22:	4b73      	ldr	r3, [pc, #460]	@ (8003df0 <HAL_RCC_OscConfig+0x280>)
 8003c24:	681b      	ldr	r3, [r3, #0]
 8003c26:	4a72      	ldr	r2, [pc, #456]	@ (8003df0 <HAL_RCC_OscConfig+0x280>)
 8003c28:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8003c2c:	6013      	str	r3, [r2, #0]
 8003c2e:	e00b      	b.n	8003c48 <HAL_RCC_OscConfig+0xd8>
 8003c30:	4b6f      	ldr	r3, [pc, #444]	@ (8003df0 <HAL_RCC_OscConfig+0x280>)
 8003c32:	681b      	ldr	r3, [r3, #0]
 8003c34:	4a6e      	ldr	r2, [pc, #440]	@ (8003df0 <HAL_RCC_OscConfig+0x280>)
 8003c36:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8003c3a:	6013      	str	r3, [r2, #0]
 8003c3c:	4b6c      	ldr	r3, [pc, #432]	@ (8003df0 <HAL_RCC_OscConfig+0x280>)
 8003c3e:	681b      	ldr	r3, [r3, #0]
 8003c40:	4a6b      	ldr	r2, [pc, #428]	@ (8003df0 <HAL_RCC_OscConfig+0x280>)
 8003c42:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8003c46:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8003c48:	687b      	ldr	r3, [r7, #4]
 8003c4a:	685b      	ldr	r3, [r3, #4]
 8003c4c:	2b00      	cmp	r3, #0
 8003c4e:	d013      	beq.n	8003c78 <HAL_RCC_OscConfig+0x108>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003c50:	f7fe f920 	bl	8001e94 <HAL_GetTick>
 8003c54:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003c56:	e008      	b.n	8003c6a <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8003c58:	f7fe f91c 	bl	8001e94 <HAL_GetTick>
 8003c5c:	4602      	mov	r2, r0
 8003c5e:	693b      	ldr	r3, [r7, #16]
 8003c60:	1ad3      	subs	r3, r2, r3
 8003c62:	2b64      	cmp	r3, #100	@ 0x64
 8003c64:	d901      	bls.n	8003c6a <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8003c66:	2303      	movs	r3, #3
 8003c68:	e229      	b.n	80040be <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003c6a:	4b61      	ldr	r3, [pc, #388]	@ (8003df0 <HAL_RCC_OscConfig+0x280>)
 8003c6c:	681b      	ldr	r3, [r3, #0]
 8003c6e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003c72:	2b00      	cmp	r3, #0
 8003c74:	d0f0      	beq.n	8003c58 <HAL_RCC_OscConfig+0xe8>
 8003c76:	e014      	b.n	8003ca2 <HAL_RCC_OscConfig+0x132>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003c78:	f7fe f90c 	bl	8001e94 <HAL_GetTick>
 8003c7c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8003c7e:	e008      	b.n	8003c92 <HAL_RCC_OscConfig+0x122>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8003c80:	f7fe f908 	bl	8001e94 <HAL_GetTick>
 8003c84:	4602      	mov	r2, r0
 8003c86:	693b      	ldr	r3, [r7, #16]
 8003c88:	1ad3      	subs	r3, r2, r3
 8003c8a:	2b64      	cmp	r3, #100	@ 0x64
 8003c8c:	d901      	bls.n	8003c92 <HAL_RCC_OscConfig+0x122>
          {
            return HAL_TIMEOUT;
 8003c8e:	2303      	movs	r3, #3
 8003c90:	e215      	b.n	80040be <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8003c92:	4b57      	ldr	r3, [pc, #348]	@ (8003df0 <HAL_RCC_OscConfig+0x280>)
 8003c94:	681b      	ldr	r3, [r3, #0]
 8003c96:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003c9a:	2b00      	cmp	r3, #0
 8003c9c:	d1f0      	bne.n	8003c80 <HAL_RCC_OscConfig+0x110>
 8003c9e:	e000      	b.n	8003ca2 <HAL_RCC_OscConfig+0x132>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003ca0:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8003ca2:	687b      	ldr	r3, [r7, #4]
 8003ca4:	681b      	ldr	r3, [r3, #0]
 8003ca6:	f003 0302 	and.w	r3, r3, #2
 8003caa:	2b00      	cmp	r3, #0
 8003cac:	d069      	beq.n	8003d82 <HAL_RCC_OscConfig+0x212>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8003cae:	4b50      	ldr	r3, [pc, #320]	@ (8003df0 <HAL_RCC_OscConfig+0x280>)
 8003cb0:	689b      	ldr	r3, [r3, #8]
 8003cb2:	f003 030c 	and.w	r3, r3, #12
 8003cb6:	2b00      	cmp	r3, #0
 8003cb8:	d00b      	beq.n	8003cd2 <HAL_RCC_OscConfig+0x162>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8003cba:	4b4d      	ldr	r3, [pc, #308]	@ (8003df0 <HAL_RCC_OscConfig+0x280>)
 8003cbc:	689b      	ldr	r3, [r3, #8]
 8003cbe:	f003 030c 	and.w	r3, r3, #12
 8003cc2:	2b08      	cmp	r3, #8
 8003cc4:	d11c      	bne.n	8003d00 <HAL_RCC_OscConfig+0x190>
 8003cc6:	4b4a      	ldr	r3, [pc, #296]	@ (8003df0 <HAL_RCC_OscConfig+0x280>)
 8003cc8:	685b      	ldr	r3, [r3, #4]
 8003cca:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8003cce:	2b00      	cmp	r3, #0
 8003cd0:	d116      	bne.n	8003d00 <HAL_RCC_OscConfig+0x190>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8003cd2:	4b47      	ldr	r3, [pc, #284]	@ (8003df0 <HAL_RCC_OscConfig+0x280>)
 8003cd4:	681b      	ldr	r3, [r3, #0]
 8003cd6:	f003 0302 	and.w	r3, r3, #2
 8003cda:	2b00      	cmp	r3, #0
 8003cdc:	d005      	beq.n	8003cea <HAL_RCC_OscConfig+0x17a>
 8003cde:	687b      	ldr	r3, [r7, #4]
 8003ce0:	68db      	ldr	r3, [r3, #12]
 8003ce2:	2b01      	cmp	r3, #1
 8003ce4:	d001      	beq.n	8003cea <HAL_RCC_OscConfig+0x17a>
      {
        return HAL_ERROR;
 8003ce6:	2301      	movs	r3, #1
 8003ce8:	e1e9      	b.n	80040be <HAL_RCC_OscConfig+0x54e>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003cea:	4b41      	ldr	r3, [pc, #260]	@ (8003df0 <HAL_RCC_OscConfig+0x280>)
 8003cec:	681b      	ldr	r3, [r3, #0]
 8003cee:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8003cf2:	687b      	ldr	r3, [r7, #4]
 8003cf4:	691b      	ldr	r3, [r3, #16]
 8003cf6:	00db      	lsls	r3, r3, #3
 8003cf8:	493d      	ldr	r1, [pc, #244]	@ (8003df0 <HAL_RCC_OscConfig+0x280>)
 8003cfa:	4313      	orrs	r3, r2
 8003cfc:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8003cfe:	e040      	b.n	8003d82 <HAL_RCC_OscConfig+0x212>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 8003d00:	687b      	ldr	r3, [r7, #4]
 8003d02:	68db      	ldr	r3, [r3, #12]
 8003d04:	2b00      	cmp	r3, #0
 8003d06:	d023      	beq.n	8003d50 <HAL_RCC_OscConfig+0x1e0>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8003d08:	4b39      	ldr	r3, [pc, #228]	@ (8003df0 <HAL_RCC_OscConfig+0x280>)
 8003d0a:	681b      	ldr	r3, [r3, #0]
 8003d0c:	4a38      	ldr	r2, [pc, #224]	@ (8003df0 <HAL_RCC_OscConfig+0x280>)
 8003d0e:	f043 0301 	orr.w	r3, r3, #1
 8003d12:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003d14:	f7fe f8be 	bl	8001e94 <HAL_GetTick>
 8003d18:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003d1a:	e008      	b.n	8003d2e <HAL_RCC_OscConfig+0x1be>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8003d1c:	f7fe f8ba 	bl	8001e94 <HAL_GetTick>
 8003d20:	4602      	mov	r2, r0
 8003d22:	693b      	ldr	r3, [r7, #16]
 8003d24:	1ad3      	subs	r3, r2, r3
 8003d26:	2b02      	cmp	r3, #2
 8003d28:	d901      	bls.n	8003d2e <HAL_RCC_OscConfig+0x1be>
          {
            return HAL_TIMEOUT;
 8003d2a:	2303      	movs	r3, #3
 8003d2c:	e1c7      	b.n	80040be <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003d2e:	4b30      	ldr	r3, [pc, #192]	@ (8003df0 <HAL_RCC_OscConfig+0x280>)
 8003d30:	681b      	ldr	r3, [r3, #0]
 8003d32:	f003 0302 	and.w	r3, r3, #2
 8003d36:	2b00      	cmp	r3, #0
 8003d38:	d0f0      	beq.n	8003d1c <HAL_RCC_OscConfig+0x1ac>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003d3a:	4b2d      	ldr	r3, [pc, #180]	@ (8003df0 <HAL_RCC_OscConfig+0x280>)
 8003d3c:	681b      	ldr	r3, [r3, #0]
 8003d3e:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8003d42:	687b      	ldr	r3, [r7, #4]
 8003d44:	691b      	ldr	r3, [r3, #16]
 8003d46:	00db      	lsls	r3, r3, #3
 8003d48:	4929      	ldr	r1, [pc, #164]	@ (8003df0 <HAL_RCC_OscConfig+0x280>)
 8003d4a:	4313      	orrs	r3, r2
 8003d4c:	600b      	str	r3, [r1, #0]
 8003d4e:	e018      	b.n	8003d82 <HAL_RCC_OscConfig+0x212>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8003d50:	4b27      	ldr	r3, [pc, #156]	@ (8003df0 <HAL_RCC_OscConfig+0x280>)
 8003d52:	681b      	ldr	r3, [r3, #0]
 8003d54:	4a26      	ldr	r2, [pc, #152]	@ (8003df0 <HAL_RCC_OscConfig+0x280>)
 8003d56:	f023 0301 	bic.w	r3, r3, #1
 8003d5a:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003d5c:	f7fe f89a 	bl	8001e94 <HAL_GetTick>
 8003d60:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8003d62:	e008      	b.n	8003d76 <HAL_RCC_OscConfig+0x206>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8003d64:	f7fe f896 	bl	8001e94 <HAL_GetTick>
 8003d68:	4602      	mov	r2, r0
 8003d6a:	693b      	ldr	r3, [r7, #16]
 8003d6c:	1ad3      	subs	r3, r2, r3
 8003d6e:	2b02      	cmp	r3, #2
 8003d70:	d901      	bls.n	8003d76 <HAL_RCC_OscConfig+0x206>
          {
            return HAL_TIMEOUT;
 8003d72:	2303      	movs	r3, #3
 8003d74:	e1a3      	b.n	80040be <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8003d76:	4b1e      	ldr	r3, [pc, #120]	@ (8003df0 <HAL_RCC_OscConfig+0x280>)
 8003d78:	681b      	ldr	r3, [r3, #0]
 8003d7a:	f003 0302 	and.w	r3, r3, #2
 8003d7e:	2b00      	cmp	r3, #0
 8003d80:	d1f0      	bne.n	8003d64 <HAL_RCC_OscConfig+0x1f4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8003d82:	687b      	ldr	r3, [r7, #4]
 8003d84:	681b      	ldr	r3, [r3, #0]
 8003d86:	f003 0308 	and.w	r3, r3, #8
 8003d8a:	2b00      	cmp	r3, #0
 8003d8c:	d038      	beq.n	8003e00 <HAL_RCC_OscConfig+0x290>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 8003d8e:	687b      	ldr	r3, [r7, #4]
 8003d90:	695b      	ldr	r3, [r3, #20]
 8003d92:	2b00      	cmp	r3, #0
 8003d94:	d019      	beq.n	8003dca <HAL_RCC_OscConfig+0x25a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8003d96:	4b16      	ldr	r3, [pc, #88]	@ (8003df0 <HAL_RCC_OscConfig+0x280>)
 8003d98:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8003d9a:	4a15      	ldr	r2, [pc, #84]	@ (8003df0 <HAL_RCC_OscConfig+0x280>)
 8003d9c:	f043 0301 	orr.w	r3, r3, #1
 8003da0:	6753      	str	r3, [r2, #116]	@ 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003da2:	f7fe f877 	bl	8001e94 <HAL_GetTick>
 8003da6:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003da8:	e008      	b.n	8003dbc <HAL_RCC_OscConfig+0x24c>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8003daa:	f7fe f873 	bl	8001e94 <HAL_GetTick>
 8003dae:	4602      	mov	r2, r0
 8003db0:	693b      	ldr	r3, [r7, #16]
 8003db2:	1ad3      	subs	r3, r2, r3
 8003db4:	2b02      	cmp	r3, #2
 8003db6:	d901      	bls.n	8003dbc <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8003db8:	2303      	movs	r3, #3
 8003dba:	e180      	b.n	80040be <HAL_RCC_OscConfig+0x54e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003dbc:	4b0c      	ldr	r3, [pc, #48]	@ (8003df0 <HAL_RCC_OscConfig+0x280>)
 8003dbe:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8003dc0:	f003 0302 	and.w	r3, r3, #2
 8003dc4:	2b00      	cmp	r3, #0
 8003dc6:	d0f0      	beq.n	8003daa <HAL_RCC_OscConfig+0x23a>
 8003dc8:	e01a      	b.n	8003e00 <HAL_RCC_OscConfig+0x290>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8003dca:	4b09      	ldr	r3, [pc, #36]	@ (8003df0 <HAL_RCC_OscConfig+0x280>)
 8003dcc:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8003dce:	4a08      	ldr	r2, [pc, #32]	@ (8003df0 <HAL_RCC_OscConfig+0x280>)
 8003dd0:	f023 0301 	bic.w	r3, r3, #1
 8003dd4:	6753      	str	r3, [r2, #116]	@ 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003dd6:	f7fe f85d 	bl	8001e94 <HAL_GetTick>
 8003dda:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003ddc:	e00a      	b.n	8003df4 <HAL_RCC_OscConfig+0x284>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8003dde:	f7fe f859 	bl	8001e94 <HAL_GetTick>
 8003de2:	4602      	mov	r2, r0
 8003de4:	693b      	ldr	r3, [r7, #16]
 8003de6:	1ad3      	subs	r3, r2, r3
 8003de8:	2b02      	cmp	r3, #2
 8003dea:	d903      	bls.n	8003df4 <HAL_RCC_OscConfig+0x284>
        {
          return HAL_TIMEOUT;
 8003dec:	2303      	movs	r3, #3
 8003dee:	e166      	b.n	80040be <HAL_RCC_OscConfig+0x54e>
 8003df0:	40023800 	.word	0x40023800
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003df4:	4b92      	ldr	r3, [pc, #584]	@ (8004040 <HAL_RCC_OscConfig+0x4d0>)
 8003df6:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8003df8:	f003 0302 	and.w	r3, r3, #2
 8003dfc:	2b00      	cmp	r3, #0
 8003dfe:	d1ee      	bne.n	8003dde <HAL_RCC_OscConfig+0x26e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8003e00:	687b      	ldr	r3, [r7, #4]
 8003e02:	681b      	ldr	r3, [r3, #0]
 8003e04:	f003 0304 	and.w	r3, r3, #4
 8003e08:	2b00      	cmp	r3, #0
 8003e0a:	f000 80a4 	beq.w	8003f56 <HAL_RCC_OscConfig+0x3e6>
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8003e0e:	4b8c      	ldr	r3, [pc, #560]	@ (8004040 <HAL_RCC_OscConfig+0x4d0>)
 8003e10:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003e12:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8003e16:	2b00      	cmp	r3, #0
 8003e18:	d10d      	bne.n	8003e36 <HAL_RCC_OscConfig+0x2c6>
    {
      /* Enable Power Clock*/
      __HAL_RCC_PWR_CLK_ENABLE();
 8003e1a:	4b89      	ldr	r3, [pc, #548]	@ (8004040 <HAL_RCC_OscConfig+0x4d0>)
 8003e1c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003e1e:	4a88      	ldr	r2, [pc, #544]	@ (8004040 <HAL_RCC_OscConfig+0x4d0>)
 8003e20:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8003e24:	6413      	str	r3, [r2, #64]	@ 0x40
 8003e26:	4b86      	ldr	r3, [pc, #536]	@ (8004040 <HAL_RCC_OscConfig+0x4d0>)
 8003e28:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003e2a:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8003e2e:	60bb      	str	r3, [r7, #8]
 8003e30:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8003e32:	2301      	movs	r3, #1
 8003e34:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8003e36:	4b83      	ldr	r3, [pc, #524]	@ (8004044 <HAL_RCC_OscConfig+0x4d4>)
 8003e38:	681b      	ldr	r3, [r3, #0]
 8003e3a:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003e3e:	2b00      	cmp	r3, #0
 8003e40:	d118      	bne.n	8003e74 <HAL_RCC_OscConfig+0x304>
    {
      /* Enable write access to Backup domain */
      PWR->CR1 |= PWR_CR1_DBP;
 8003e42:	4b80      	ldr	r3, [pc, #512]	@ (8004044 <HAL_RCC_OscConfig+0x4d4>)
 8003e44:	681b      	ldr	r3, [r3, #0]
 8003e46:	4a7f      	ldr	r2, [pc, #508]	@ (8004044 <HAL_RCC_OscConfig+0x4d4>)
 8003e48:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8003e4c:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8003e4e:	f7fe f821 	bl	8001e94 <HAL_GetTick>
 8003e52:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8003e54:	e008      	b.n	8003e68 <HAL_RCC_OscConfig+0x2f8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003e56:	f7fe f81d 	bl	8001e94 <HAL_GetTick>
 8003e5a:	4602      	mov	r2, r0
 8003e5c:	693b      	ldr	r3, [r7, #16]
 8003e5e:	1ad3      	subs	r3, r2, r3
 8003e60:	2b64      	cmp	r3, #100	@ 0x64
 8003e62:	d901      	bls.n	8003e68 <HAL_RCC_OscConfig+0x2f8>
        {
          return HAL_TIMEOUT;
 8003e64:	2303      	movs	r3, #3
 8003e66:	e12a      	b.n	80040be <HAL_RCC_OscConfig+0x54e>
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8003e68:	4b76      	ldr	r3, [pc, #472]	@ (8004044 <HAL_RCC_OscConfig+0x4d4>)
 8003e6a:	681b      	ldr	r3, [r3, #0]
 8003e6c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003e70:	2b00      	cmp	r3, #0
 8003e72:	d0f0      	beq.n	8003e56 <HAL_RCC_OscConfig+0x2e6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8003e74:	687b      	ldr	r3, [r7, #4]
 8003e76:	689b      	ldr	r3, [r3, #8]
 8003e78:	2b01      	cmp	r3, #1
 8003e7a:	d106      	bne.n	8003e8a <HAL_RCC_OscConfig+0x31a>
 8003e7c:	4b70      	ldr	r3, [pc, #448]	@ (8004040 <HAL_RCC_OscConfig+0x4d0>)
 8003e7e:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003e80:	4a6f      	ldr	r2, [pc, #444]	@ (8004040 <HAL_RCC_OscConfig+0x4d0>)
 8003e82:	f043 0301 	orr.w	r3, r3, #1
 8003e86:	6713      	str	r3, [r2, #112]	@ 0x70
 8003e88:	e02d      	b.n	8003ee6 <HAL_RCC_OscConfig+0x376>
 8003e8a:	687b      	ldr	r3, [r7, #4]
 8003e8c:	689b      	ldr	r3, [r3, #8]
 8003e8e:	2b00      	cmp	r3, #0
 8003e90:	d10c      	bne.n	8003eac <HAL_RCC_OscConfig+0x33c>
 8003e92:	4b6b      	ldr	r3, [pc, #428]	@ (8004040 <HAL_RCC_OscConfig+0x4d0>)
 8003e94:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003e96:	4a6a      	ldr	r2, [pc, #424]	@ (8004040 <HAL_RCC_OscConfig+0x4d0>)
 8003e98:	f023 0301 	bic.w	r3, r3, #1
 8003e9c:	6713      	str	r3, [r2, #112]	@ 0x70
 8003e9e:	4b68      	ldr	r3, [pc, #416]	@ (8004040 <HAL_RCC_OscConfig+0x4d0>)
 8003ea0:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003ea2:	4a67      	ldr	r2, [pc, #412]	@ (8004040 <HAL_RCC_OscConfig+0x4d0>)
 8003ea4:	f023 0304 	bic.w	r3, r3, #4
 8003ea8:	6713      	str	r3, [r2, #112]	@ 0x70
 8003eaa:	e01c      	b.n	8003ee6 <HAL_RCC_OscConfig+0x376>
 8003eac:	687b      	ldr	r3, [r7, #4]
 8003eae:	689b      	ldr	r3, [r3, #8]
 8003eb0:	2b05      	cmp	r3, #5
 8003eb2:	d10c      	bne.n	8003ece <HAL_RCC_OscConfig+0x35e>
 8003eb4:	4b62      	ldr	r3, [pc, #392]	@ (8004040 <HAL_RCC_OscConfig+0x4d0>)
 8003eb6:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003eb8:	4a61      	ldr	r2, [pc, #388]	@ (8004040 <HAL_RCC_OscConfig+0x4d0>)
 8003eba:	f043 0304 	orr.w	r3, r3, #4
 8003ebe:	6713      	str	r3, [r2, #112]	@ 0x70
 8003ec0:	4b5f      	ldr	r3, [pc, #380]	@ (8004040 <HAL_RCC_OscConfig+0x4d0>)
 8003ec2:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003ec4:	4a5e      	ldr	r2, [pc, #376]	@ (8004040 <HAL_RCC_OscConfig+0x4d0>)
 8003ec6:	f043 0301 	orr.w	r3, r3, #1
 8003eca:	6713      	str	r3, [r2, #112]	@ 0x70
 8003ecc:	e00b      	b.n	8003ee6 <HAL_RCC_OscConfig+0x376>
 8003ece:	4b5c      	ldr	r3, [pc, #368]	@ (8004040 <HAL_RCC_OscConfig+0x4d0>)
 8003ed0:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003ed2:	4a5b      	ldr	r2, [pc, #364]	@ (8004040 <HAL_RCC_OscConfig+0x4d0>)
 8003ed4:	f023 0301 	bic.w	r3, r3, #1
 8003ed8:	6713      	str	r3, [r2, #112]	@ 0x70
 8003eda:	4b59      	ldr	r3, [pc, #356]	@ (8004040 <HAL_RCC_OscConfig+0x4d0>)
 8003edc:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003ede:	4a58      	ldr	r2, [pc, #352]	@ (8004040 <HAL_RCC_OscConfig+0x4d0>)
 8003ee0:	f023 0304 	bic.w	r3, r3, #4
 8003ee4:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8003ee6:	687b      	ldr	r3, [r7, #4]
 8003ee8:	689b      	ldr	r3, [r3, #8]
 8003eea:	2b00      	cmp	r3, #0
 8003eec:	d015      	beq.n	8003f1a <HAL_RCC_OscConfig+0x3aa>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003eee:	f7fd ffd1 	bl	8001e94 <HAL_GetTick>
 8003ef2:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003ef4:	e00a      	b.n	8003f0c <HAL_RCC_OscConfig+0x39c>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003ef6:	f7fd ffcd 	bl	8001e94 <HAL_GetTick>
 8003efa:	4602      	mov	r2, r0
 8003efc:	693b      	ldr	r3, [r7, #16]
 8003efe:	1ad3      	subs	r3, r2, r3
 8003f00:	f241 3288 	movw	r2, #5000	@ 0x1388
 8003f04:	4293      	cmp	r3, r2
 8003f06:	d901      	bls.n	8003f0c <HAL_RCC_OscConfig+0x39c>
        {
          return HAL_TIMEOUT;
 8003f08:	2303      	movs	r3, #3
 8003f0a:	e0d8      	b.n	80040be <HAL_RCC_OscConfig+0x54e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003f0c:	4b4c      	ldr	r3, [pc, #304]	@ (8004040 <HAL_RCC_OscConfig+0x4d0>)
 8003f0e:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003f10:	f003 0302 	and.w	r3, r3, #2
 8003f14:	2b00      	cmp	r3, #0
 8003f16:	d0ee      	beq.n	8003ef6 <HAL_RCC_OscConfig+0x386>
 8003f18:	e014      	b.n	8003f44 <HAL_RCC_OscConfig+0x3d4>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003f1a:	f7fd ffbb 	bl	8001e94 <HAL_GetTick>
 8003f1e:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003f20:	e00a      	b.n	8003f38 <HAL_RCC_OscConfig+0x3c8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003f22:	f7fd ffb7 	bl	8001e94 <HAL_GetTick>
 8003f26:	4602      	mov	r2, r0
 8003f28:	693b      	ldr	r3, [r7, #16]
 8003f2a:	1ad3      	subs	r3, r2, r3
 8003f2c:	f241 3288 	movw	r2, #5000	@ 0x1388
 8003f30:	4293      	cmp	r3, r2
 8003f32:	d901      	bls.n	8003f38 <HAL_RCC_OscConfig+0x3c8>
        {
          return HAL_TIMEOUT;
 8003f34:	2303      	movs	r3, #3
 8003f36:	e0c2      	b.n	80040be <HAL_RCC_OscConfig+0x54e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003f38:	4b41      	ldr	r3, [pc, #260]	@ (8004040 <HAL_RCC_OscConfig+0x4d0>)
 8003f3a:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003f3c:	f003 0302 	and.w	r3, r3, #2
 8003f40:	2b00      	cmp	r3, #0
 8003f42:	d1ee      	bne.n	8003f22 <HAL_RCC_OscConfig+0x3b2>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8003f44:	7dfb      	ldrb	r3, [r7, #23]
 8003f46:	2b01      	cmp	r3, #1
 8003f48:	d105      	bne.n	8003f56 <HAL_RCC_OscConfig+0x3e6>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003f4a:	4b3d      	ldr	r3, [pc, #244]	@ (8004040 <HAL_RCC_OscConfig+0x4d0>)
 8003f4c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003f4e:	4a3c      	ldr	r2, [pc, #240]	@ (8004040 <HAL_RCC_OscConfig+0x4d0>)
 8003f50:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8003f54:	6413      	str	r3, [r2, #64]	@ 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8003f56:	687b      	ldr	r3, [r7, #4]
 8003f58:	699b      	ldr	r3, [r3, #24]
 8003f5a:	2b00      	cmp	r3, #0
 8003f5c:	f000 80ae 	beq.w	80040bc <HAL_RCC_OscConfig+0x54c>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8003f60:	4b37      	ldr	r3, [pc, #220]	@ (8004040 <HAL_RCC_OscConfig+0x4d0>)
 8003f62:	689b      	ldr	r3, [r3, #8]
 8003f64:	f003 030c 	and.w	r3, r3, #12
 8003f68:	2b08      	cmp	r3, #8
 8003f6a:	d06d      	beq.n	8004048 <HAL_RCC_OscConfig+0x4d8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8003f6c:	687b      	ldr	r3, [r7, #4]
 8003f6e:	699b      	ldr	r3, [r3, #24]
 8003f70:	2b02      	cmp	r3, #2
 8003f72:	d14b      	bne.n	800400c <HAL_RCC_OscConfig+0x49c>
#if defined (RCC_PLLCFGR_PLLR)
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
#endif

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003f74:	4b32      	ldr	r3, [pc, #200]	@ (8004040 <HAL_RCC_OscConfig+0x4d0>)
 8003f76:	681b      	ldr	r3, [r3, #0]
 8003f78:	4a31      	ldr	r2, [pc, #196]	@ (8004040 <HAL_RCC_OscConfig+0x4d0>)
 8003f7a:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8003f7e:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003f80:	f7fd ff88 	bl	8001e94 <HAL_GetTick>
 8003f84:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003f86:	e008      	b.n	8003f9a <HAL_RCC_OscConfig+0x42a>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003f88:	f7fd ff84 	bl	8001e94 <HAL_GetTick>
 8003f8c:	4602      	mov	r2, r0
 8003f8e:	693b      	ldr	r3, [r7, #16]
 8003f90:	1ad3      	subs	r3, r2, r3
 8003f92:	2b02      	cmp	r3, #2
 8003f94:	d901      	bls.n	8003f9a <HAL_RCC_OscConfig+0x42a>
          {
            return HAL_TIMEOUT;
 8003f96:	2303      	movs	r3, #3
 8003f98:	e091      	b.n	80040be <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003f9a:	4b29      	ldr	r3, [pc, #164]	@ (8004040 <HAL_RCC_OscConfig+0x4d0>)
 8003f9c:	681b      	ldr	r3, [r3, #0]
 8003f9e:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8003fa2:	2b00      	cmp	r3, #0
 8003fa4:	d1f0      	bne.n	8003f88 <HAL_RCC_OscConfig+0x418>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
#if defined (RCC_PLLCFGR_PLLR)
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8003fa6:	687b      	ldr	r3, [r7, #4]
 8003fa8:	69da      	ldr	r2, [r3, #28]
 8003faa:	687b      	ldr	r3, [r7, #4]
 8003fac:	6a1b      	ldr	r3, [r3, #32]
 8003fae:	431a      	orrs	r2, r3
 8003fb0:	687b      	ldr	r3, [r7, #4]
 8003fb2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003fb4:	019b      	lsls	r3, r3, #6
 8003fb6:	431a      	orrs	r2, r3
 8003fb8:	687b      	ldr	r3, [r7, #4]
 8003fba:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003fbc:	085b      	lsrs	r3, r3, #1
 8003fbe:	3b01      	subs	r3, #1
 8003fc0:	041b      	lsls	r3, r3, #16
 8003fc2:	431a      	orrs	r2, r3
 8003fc4:	687b      	ldr	r3, [r7, #4]
 8003fc6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003fc8:	061b      	lsls	r3, r3, #24
 8003fca:	431a      	orrs	r2, r3
 8003fcc:	687b      	ldr	r3, [r7, #4]
 8003fce:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003fd0:	071b      	lsls	r3, r3, #28
 8003fd2:	491b      	ldr	r1, [pc, #108]	@ (8004040 <HAL_RCC_OscConfig+0x4d0>)
 8003fd4:	4313      	orrs	r3, r2
 8003fd6:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ);
#endif

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8003fd8:	4b19      	ldr	r3, [pc, #100]	@ (8004040 <HAL_RCC_OscConfig+0x4d0>)
 8003fda:	681b      	ldr	r3, [r3, #0]
 8003fdc:	4a18      	ldr	r2, [pc, #96]	@ (8004040 <HAL_RCC_OscConfig+0x4d0>)
 8003fde:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8003fe2:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003fe4:	f7fd ff56 	bl	8001e94 <HAL_GetTick>
 8003fe8:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003fea:	e008      	b.n	8003ffe <HAL_RCC_OscConfig+0x48e>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003fec:	f7fd ff52 	bl	8001e94 <HAL_GetTick>
 8003ff0:	4602      	mov	r2, r0
 8003ff2:	693b      	ldr	r3, [r7, #16]
 8003ff4:	1ad3      	subs	r3, r2, r3
 8003ff6:	2b02      	cmp	r3, #2
 8003ff8:	d901      	bls.n	8003ffe <HAL_RCC_OscConfig+0x48e>
          {
            return HAL_TIMEOUT;
 8003ffa:	2303      	movs	r3, #3
 8003ffc:	e05f      	b.n	80040be <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003ffe:	4b10      	ldr	r3, [pc, #64]	@ (8004040 <HAL_RCC_OscConfig+0x4d0>)
 8004000:	681b      	ldr	r3, [r3, #0]
 8004002:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8004006:	2b00      	cmp	r3, #0
 8004008:	d0f0      	beq.n	8003fec <HAL_RCC_OscConfig+0x47c>
 800400a:	e057      	b.n	80040bc <HAL_RCC_OscConfig+0x54c>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800400c:	4b0c      	ldr	r3, [pc, #48]	@ (8004040 <HAL_RCC_OscConfig+0x4d0>)
 800400e:	681b      	ldr	r3, [r3, #0]
 8004010:	4a0b      	ldr	r2, [pc, #44]	@ (8004040 <HAL_RCC_OscConfig+0x4d0>)
 8004012:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8004016:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004018:	f7fd ff3c 	bl	8001e94 <HAL_GetTick>
 800401c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800401e:	e008      	b.n	8004032 <HAL_RCC_OscConfig+0x4c2>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004020:	f7fd ff38 	bl	8001e94 <HAL_GetTick>
 8004024:	4602      	mov	r2, r0
 8004026:	693b      	ldr	r3, [r7, #16]
 8004028:	1ad3      	subs	r3, r2, r3
 800402a:	2b02      	cmp	r3, #2
 800402c:	d901      	bls.n	8004032 <HAL_RCC_OscConfig+0x4c2>
          {
            return HAL_TIMEOUT;
 800402e:	2303      	movs	r3, #3
 8004030:	e045      	b.n	80040be <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004032:	4b03      	ldr	r3, [pc, #12]	@ (8004040 <HAL_RCC_OscConfig+0x4d0>)
 8004034:	681b      	ldr	r3, [r3, #0]
 8004036:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800403a:	2b00      	cmp	r3, #0
 800403c:	d1f0      	bne.n	8004020 <HAL_RCC_OscConfig+0x4b0>
 800403e:	e03d      	b.n	80040bc <HAL_RCC_OscConfig+0x54c>
 8004040:	40023800 	.word	0x40023800
 8004044:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      pll_config = RCC->PLLCFGR;
 8004048:	4b1f      	ldr	r3, [pc, #124]	@ (80040c8 <HAL_RCC_OscConfig+0x558>)
 800404a:	685b      	ldr	r3, [r3, #4]
 800404c:	60fb      	str	r3, [r7, #12]
#if defined (RCC_PLLCFGR_PLLR)
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800404e:	687b      	ldr	r3, [r7, #4]
 8004050:	699b      	ldr	r3, [r3, #24]
 8004052:	2b01      	cmp	r3, #1
 8004054:	d030      	beq.n	80040b8 <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8004056:	68fb      	ldr	r3, [r7, #12]
 8004058:	f403 0280 	and.w	r2, r3, #4194304	@ 0x400000
 800405c:	687b      	ldr	r3, [r7, #4]
 800405e:	69db      	ldr	r3, [r3, #28]
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8004060:	429a      	cmp	r2, r3
 8004062:	d129      	bne.n	80040b8 <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8004064:	68fb      	ldr	r3, [r7, #12]
 8004066:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 800406a:	687b      	ldr	r3, [r7, #4]
 800406c:	6a1b      	ldr	r3, [r3, #32]
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800406e:	429a      	cmp	r2, r3
 8004070:	d122      	bne.n	80040b8 <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8004072:	68fa      	ldr	r2, [r7, #12]
 8004074:	f647 73c0 	movw	r3, #32704	@ 0x7fc0
 8004078:	4013      	ands	r3, r2
 800407a:	687a      	ldr	r2, [r7, #4]
 800407c:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 800407e:	0192      	lsls	r2, r2, #6
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8004080:	4293      	cmp	r3, r2
 8004082:	d119      	bne.n	80040b8 <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
 8004084:	68fb      	ldr	r3, [r7, #12]
 8004086:	f403 3240 	and.w	r2, r3, #196608	@ 0x30000
 800408a:	687b      	ldr	r3, [r7, #4]
 800408c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800408e:	085b      	lsrs	r3, r3, #1
 8004090:	3b01      	subs	r3, #1
 8004092:	041b      	lsls	r3, r3, #16
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8004094:	429a      	cmp	r2, r3
 8004096:	d10f      	bne.n	80040b8 <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 8004098:	68fb      	ldr	r3, [r7, #12]
 800409a:	f003 6270 	and.w	r2, r3, #251658240	@ 0xf000000
 800409e:	687b      	ldr	r3, [r7, #4]
 80040a0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80040a2:	061b      	lsls	r3, r3, #24
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
 80040a4:	429a      	cmp	r2, r3
 80040a6:	d107      	bne.n	80040b8 <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
 80040a8:	68fb      	ldr	r3, [r7, #12]
 80040aa:	f003 42e0 	and.w	r2, r3, #1879048192	@ 0x70000000
 80040ae:	687b      	ldr	r3, [r7, #4]
 80040b0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80040b2:	071b      	lsls	r3, r3, #28
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 80040b4:	429a      	cmp	r2, r3
 80040b6:	d001      	beq.n	80040bc <HAL_RCC_OscConfig+0x54c>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
#endif
      {
        return HAL_ERROR;
 80040b8:	2301      	movs	r3, #1
 80040ba:	e000      	b.n	80040be <HAL_RCC_OscConfig+0x54e>
      }
    }
  }
  return HAL_OK;
 80040bc:	2300      	movs	r3, #0
}
 80040be:	4618      	mov	r0, r3
 80040c0:	3718      	adds	r7, #24
 80040c2:	46bd      	mov	sp, r7
 80040c4:	bd80      	pop	{r7, pc}
 80040c6:	bf00      	nop
 80040c8:	40023800 	.word	0x40023800

080040cc <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80040cc:	b580      	push	{r7, lr}
 80040ce:	b084      	sub	sp, #16
 80040d0:	af00      	add	r7, sp, #0
 80040d2:	6078      	str	r0, [r7, #4]
 80040d4:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0;
 80040d6:	2300      	movs	r3, #0
 80040d8:	60fb      	str	r3, [r7, #12]

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 80040da:	687b      	ldr	r3, [r7, #4]
 80040dc:	2b00      	cmp	r3, #0
 80040de:	d101      	bne.n	80040e4 <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 80040e0:	2301      	movs	r3, #1
 80040e2:	e0d0      	b.n	8004286 <HAL_RCC_ClockConfig+0x1ba>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
     must be correctly programmed according to the frequency of the CPU clock
     (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 80040e4:	4b6a      	ldr	r3, [pc, #424]	@ (8004290 <HAL_RCC_ClockConfig+0x1c4>)
 80040e6:	681b      	ldr	r3, [r3, #0]
 80040e8:	f003 030f 	and.w	r3, r3, #15
 80040ec:	683a      	ldr	r2, [r7, #0]
 80040ee:	429a      	cmp	r2, r3
 80040f0:	d910      	bls.n	8004114 <HAL_RCC_ClockConfig+0x48>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80040f2:	4b67      	ldr	r3, [pc, #412]	@ (8004290 <HAL_RCC_ClockConfig+0x1c4>)
 80040f4:	681b      	ldr	r3, [r3, #0]
 80040f6:	f023 020f 	bic.w	r2, r3, #15
 80040fa:	4965      	ldr	r1, [pc, #404]	@ (8004290 <HAL_RCC_ClockConfig+0x1c4>)
 80040fc:	683b      	ldr	r3, [r7, #0]
 80040fe:	4313      	orrs	r3, r2
 8004100:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8004102:	4b63      	ldr	r3, [pc, #396]	@ (8004290 <HAL_RCC_ClockConfig+0x1c4>)
 8004104:	681b      	ldr	r3, [r3, #0]
 8004106:	f003 030f 	and.w	r3, r3, #15
 800410a:	683a      	ldr	r2, [r7, #0]
 800410c:	429a      	cmp	r2, r3
 800410e:	d001      	beq.n	8004114 <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 8004110:	2301      	movs	r3, #1
 8004112:	e0b8      	b.n	8004286 <HAL_RCC_ClockConfig+0x1ba>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8004114:	687b      	ldr	r3, [r7, #4]
 8004116:	681b      	ldr	r3, [r3, #0]
 8004118:	f003 0302 	and.w	r3, r3, #2
 800411c:	2b00      	cmp	r3, #0
 800411e:	d020      	beq.n	8004162 <HAL_RCC_ClockConfig+0x96>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004120:	687b      	ldr	r3, [r7, #4]
 8004122:	681b      	ldr	r3, [r3, #0]
 8004124:	f003 0304 	and.w	r3, r3, #4
 8004128:	2b00      	cmp	r3, #0
 800412a:	d005      	beq.n	8004138 <HAL_RCC_ClockConfig+0x6c>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 800412c:	4b59      	ldr	r3, [pc, #356]	@ (8004294 <HAL_RCC_ClockConfig+0x1c8>)
 800412e:	689b      	ldr	r3, [r3, #8]
 8004130:	4a58      	ldr	r2, [pc, #352]	@ (8004294 <HAL_RCC_ClockConfig+0x1c8>)
 8004132:	f443 53e0 	orr.w	r3, r3, #7168	@ 0x1c00
 8004136:	6093      	str	r3, [r2, #8]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004138:	687b      	ldr	r3, [r7, #4]
 800413a:	681b      	ldr	r3, [r3, #0]
 800413c:	f003 0308 	and.w	r3, r3, #8
 8004140:	2b00      	cmp	r3, #0
 8004142:	d005      	beq.n	8004150 <HAL_RCC_ClockConfig+0x84>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8004144:	4b53      	ldr	r3, [pc, #332]	@ (8004294 <HAL_RCC_ClockConfig+0x1c8>)
 8004146:	689b      	ldr	r3, [r3, #8]
 8004148:	4a52      	ldr	r2, [pc, #328]	@ (8004294 <HAL_RCC_ClockConfig+0x1c8>)
 800414a:	f443 4360 	orr.w	r3, r3, #57344	@ 0xe000
 800414e:	6093      	str	r3, [r2, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8004150:	4b50      	ldr	r3, [pc, #320]	@ (8004294 <HAL_RCC_ClockConfig+0x1c8>)
 8004152:	689b      	ldr	r3, [r3, #8]
 8004154:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8004158:	687b      	ldr	r3, [r7, #4]
 800415a:	689b      	ldr	r3, [r3, #8]
 800415c:	494d      	ldr	r1, [pc, #308]	@ (8004294 <HAL_RCC_ClockConfig+0x1c8>)
 800415e:	4313      	orrs	r3, r2
 8004160:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8004162:	687b      	ldr	r3, [r7, #4]
 8004164:	681b      	ldr	r3, [r3, #0]
 8004166:	f003 0301 	and.w	r3, r3, #1
 800416a:	2b00      	cmp	r3, #0
 800416c:	d040      	beq.n	80041f0 <HAL_RCC_ClockConfig+0x124>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800416e:	687b      	ldr	r3, [r7, #4]
 8004170:	685b      	ldr	r3, [r3, #4]
 8004172:	2b01      	cmp	r3, #1
 8004174:	d107      	bne.n	8004186 <HAL_RCC_ClockConfig+0xba>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004176:	4b47      	ldr	r3, [pc, #284]	@ (8004294 <HAL_RCC_ClockConfig+0x1c8>)
 8004178:	681b      	ldr	r3, [r3, #0]
 800417a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800417e:	2b00      	cmp	r3, #0
 8004180:	d115      	bne.n	80041ae <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 8004182:	2301      	movs	r3, #1
 8004184:	e07f      	b.n	8004286 <HAL_RCC_ClockConfig+0x1ba>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8004186:	687b      	ldr	r3, [r7, #4]
 8004188:	685b      	ldr	r3, [r3, #4]
 800418a:	2b02      	cmp	r3, #2
 800418c:	d107      	bne.n	800419e <HAL_RCC_ClockConfig+0xd2>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800418e:	4b41      	ldr	r3, [pc, #260]	@ (8004294 <HAL_RCC_ClockConfig+0x1c8>)
 8004190:	681b      	ldr	r3, [r3, #0]
 8004192:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8004196:	2b00      	cmp	r3, #0
 8004198:	d109      	bne.n	80041ae <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 800419a:	2301      	movs	r3, #1
 800419c:	e073      	b.n	8004286 <HAL_RCC_ClockConfig+0x1ba>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800419e:	4b3d      	ldr	r3, [pc, #244]	@ (8004294 <HAL_RCC_ClockConfig+0x1c8>)
 80041a0:	681b      	ldr	r3, [r3, #0]
 80041a2:	f003 0302 	and.w	r3, r3, #2
 80041a6:	2b00      	cmp	r3, #0
 80041a8:	d101      	bne.n	80041ae <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 80041aa:	2301      	movs	r3, #1
 80041ac:	e06b      	b.n	8004286 <HAL_RCC_ClockConfig+0x1ba>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80041ae:	4b39      	ldr	r3, [pc, #228]	@ (8004294 <HAL_RCC_ClockConfig+0x1c8>)
 80041b0:	689b      	ldr	r3, [r3, #8]
 80041b2:	f023 0203 	bic.w	r2, r3, #3
 80041b6:	687b      	ldr	r3, [r7, #4]
 80041b8:	685b      	ldr	r3, [r3, #4]
 80041ba:	4936      	ldr	r1, [pc, #216]	@ (8004294 <HAL_RCC_ClockConfig+0x1c8>)
 80041bc:	4313      	orrs	r3, r2
 80041be:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80041c0:	f7fd fe68 	bl	8001e94 <HAL_GetTick>
 80041c4:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80041c6:	e00a      	b.n	80041de <HAL_RCC_ClockConfig+0x112>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80041c8:	f7fd fe64 	bl	8001e94 <HAL_GetTick>
 80041cc:	4602      	mov	r2, r0
 80041ce:	68fb      	ldr	r3, [r7, #12]
 80041d0:	1ad3      	subs	r3, r2, r3
 80041d2:	f241 3288 	movw	r2, #5000	@ 0x1388
 80041d6:	4293      	cmp	r3, r2
 80041d8:	d901      	bls.n	80041de <HAL_RCC_ClockConfig+0x112>
      {
        return HAL_TIMEOUT;
 80041da:	2303      	movs	r3, #3
 80041dc:	e053      	b.n	8004286 <HAL_RCC_ClockConfig+0x1ba>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80041de:	4b2d      	ldr	r3, [pc, #180]	@ (8004294 <HAL_RCC_ClockConfig+0x1c8>)
 80041e0:	689b      	ldr	r3, [r3, #8]
 80041e2:	f003 020c 	and.w	r2, r3, #12
 80041e6:	687b      	ldr	r3, [r7, #4]
 80041e8:	685b      	ldr	r3, [r3, #4]
 80041ea:	009b      	lsls	r3, r3, #2
 80041ec:	429a      	cmp	r2, r3
 80041ee:	d1eb      	bne.n	80041c8 <HAL_RCC_ClockConfig+0xfc>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 80041f0:	4b27      	ldr	r3, [pc, #156]	@ (8004290 <HAL_RCC_ClockConfig+0x1c4>)
 80041f2:	681b      	ldr	r3, [r3, #0]
 80041f4:	f003 030f 	and.w	r3, r3, #15
 80041f8:	683a      	ldr	r2, [r7, #0]
 80041fa:	429a      	cmp	r2, r3
 80041fc:	d210      	bcs.n	8004220 <HAL_RCC_ClockConfig+0x154>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80041fe:	4b24      	ldr	r3, [pc, #144]	@ (8004290 <HAL_RCC_ClockConfig+0x1c4>)
 8004200:	681b      	ldr	r3, [r3, #0]
 8004202:	f023 020f 	bic.w	r2, r3, #15
 8004206:	4922      	ldr	r1, [pc, #136]	@ (8004290 <HAL_RCC_ClockConfig+0x1c4>)
 8004208:	683b      	ldr	r3, [r7, #0]
 800420a:	4313      	orrs	r3, r2
 800420c:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800420e:	4b20      	ldr	r3, [pc, #128]	@ (8004290 <HAL_RCC_ClockConfig+0x1c4>)
 8004210:	681b      	ldr	r3, [r3, #0]
 8004212:	f003 030f 	and.w	r3, r3, #15
 8004216:	683a      	ldr	r2, [r7, #0]
 8004218:	429a      	cmp	r2, r3
 800421a:	d001      	beq.n	8004220 <HAL_RCC_ClockConfig+0x154>
    {
      return HAL_ERROR;
 800421c:	2301      	movs	r3, #1
 800421e:	e032      	b.n	8004286 <HAL_RCC_ClockConfig+0x1ba>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004220:	687b      	ldr	r3, [r7, #4]
 8004222:	681b      	ldr	r3, [r3, #0]
 8004224:	f003 0304 	and.w	r3, r3, #4
 8004228:	2b00      	cmp	r3, #0
 800422a:	d008      	beq.n	800423e <HAL_RCC_ClockConfig+0x172>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 800422c:	4b19      	ldr	r3, [pc, #100]	@ (8004294 <HAL_RCC_ClockConfig+0x1c8>)
 800422e:	689b      	ldr	r3, [r3, #8]
 8004230:	f423 52e0 	bic.w	r2, r3, #7168	@ 0x1c00
 8004234:	687b      	ldr	r3, [r7, #4]
 8004236:	68db      	ldr	r3, [r3, #12]
 8004238:	4916      	ldr	r1, [pc, #88]	@ (8004294 <HAL_RCC_ClockConfig+0x1c8>)
 800423a:	4313      	orrs	r3, r2
 800423c:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800423e:	687b      	ldr	r3, [r7, #4]
 8004240:	681b      	ldr	r3, [r3, #0]
 8004242:	f003 0308 	and.w	r3, r3, #8
 8004246:	2b00      	cmp	r3, #0
 8004248:	d009      	beq.n	800425e <HAL_RCC_ClockConfig+0x192>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 800424a:	4b12      	ldr	r3, [pc, #72]	@ (8004294 <HAL_RCC_ClockConfig+0x1c8>)
 800424c:	689b      	ldr	r3, [r3, #8]
 800424e:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 8004252:	687b      	ldr	r3, [r7, #4]
 8004254:	691b      	ldr	r3, [r3, #16]
 8004256:	00db      	lsls	r3, r3, #3
 8004258:	490e      	ldr	r1, [pc, #56]	@ (8004294 <HAL_RCC_ClockConfig+0x1c8>)
 800425a:	4313      	orrs	r3, r2
 800425c:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 800425e:	f000 f821 	bl	80042a4 <HAL_RCC_GetSysClockFreq>
 8004262:	4602      	mov	r2, r0
 8004264:	4b0b      	ldr	r3, [pc, #44]	@ (8004294 <HAL_RCC_ClockConfig+0x1c8>)
 8004266:	689b      	ldr	r3, [r3, #8]
 8004268:	091b      	lsrs	r3, r3, #4
 800426a:	f003 030f 	and.w	r3, r3, #15
 800426e:	490a      	ldr	r1, [pc, #40]	@ (8004298 <HAL_RCC_ClockConfig+0x1cc>)
 8004270:	5ccb      	ldrb	r3, [r1, r3]
 8004272:	fa22 f303 	lsr.w	r3, r2, r3
 8004276:	4a09      	ldr	r2, [pc, #36]	@ (800429c <HAL_RCC_ClockConfig+0x1d0>)
 8004278:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 800427a:	4b09      	ldr	r3, [pc, #36]	@ (80042a0 <HAL_RCC_ClockConfig+0x1d4>)
 800427c:	681b      	ldr	r3, [r3, #0]
 800427e:	4618      	mov	r0, r3
 8004280:	f7fd fdc4 	bl	8001e0c <HAL_InitTick>

  return HAL_OK;
 8004284:	2300      	movs	r3, #0
}
 8004286:	4618      	mov	r0, r3
 8004288:	3710      	adds	r7, #16
 800428a:	46bd      	mov	sp, r7
 800428c:	bd80      	pop	{r7, pc}
 800428e:	bf00      	nop
 8004290:	40023c00 	.word	0x40023c00
 8004294:	40023800 	.word	0x40023800
 8004298:	08011830 	.word	0x08011830
 800429c:	20027fac 	.word	0x20027fac
 80042a0:	20027fb0 	.word	0x20027fb0

080042a4 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80042a4:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80042a8:	b094      	sub	sp, #80	@ 0x50
 80042aa:	af00      	add	r7, sp, #0
  uint32_t pllm = 0, pllvco = 0, pllp = 0;
 80042ac:	2300      	movs	r3, #0
 80042ae:	647b      	str	r3, [r7, #68]	@ 0x44
 80042b0:	2300      	movs	r3, #0
 80042b2:	64fb      	str	r3, [r7, #76]	@ 0x4c
 80042b4:	2300      	movs	r3, #0
 80042b6:	643b      	str	r3, [r7, #64]	@ 0x40
  uint32_t sysclockfreq = 0;
 80042b8:	2300      	movs	r3, #0
 80042ba:	64bb      	str	r3, [r7, #72]	@ 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 80042bc:	4b79      	ldr	r3, [pc, #484]	@ (80044a4 <HAL_RCC_GetSysClockFreq+0x200>)
 80042be:	689b      	ldr	r3, [r3, #8]
 80042c0:	f003 030c 	and.w	r3, r3, #12
 80042c4:	2b08      	cmp	r3, #8
 80042c6:	d00d      	beq.n	80042e4 <HAL_RCC_GetSysClockFreq+0x40>
 80042c8:	2b08      	cmp	r3, #8
 80042ca:	f200 80e1 	bhi.w	8004490 <HAL_RCC_GetSysClockFreq+0x1ec>
 80042ce:	2b00      	cmp	r3, #0
 80042d0:	d002      	beq.n	80042d8 <HAL_RCC_GetSysClockFreq+0x34>
 80042d2:	2b04      	cmp	r3, #4
 80042d4:	d003      	beq.n	80042de <HAL_RCC_GetSysClockFreq+0x3a>
 80042d6:	e0db      	b.n	8004490 <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 80042d8:	4b73      	ldr	r3, [pc, #460]	@ (80044a8 <HAL_RCC_GetSysClockFreq+0x204>)
 80042da:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 80042dc:	e0db      	b.n	8004496 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 80042de:	4b73      	ldr	r3, [pc, #460]	@ (80044ac <HAL_RCC_GetSysClockFreq+0x208>)
 80042e0:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 80042e2:	e0d8      	b.n	8004496 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 80042e4:	4b6f      	ldr	r3, [pc, #444]	@ (80044a4 <HAL_RCC_GetSysClockFreq+0x200>)
 80042e6:	685b      	ldr	r3, [r3, #4]
 80042e8:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 80042ec:	647b      	str	r3, [r7, #68]	@ 0x44
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLCFGR_PLLSRC_HSI)
 80042ee:	4b6d      	ldr	r3, [pc, #436]	@ (80044a4 <HAL_RCC_GetSysClockFreq+0x200>)
 80042f0:	685b      	ldr	r3, [r3, #4]
 80042f2:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80042f6:	2b00      	cmp	r3, #0
 80042f8:	d063      	beq.n	80043c2 <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80042fa:	4b6a      	ldr	r3, [pc, #424]	@ (80044a4 <HAL_RCC_GetSysClockFreq+0x200>)
 80042fc:	685b      	ldr	r3, [r3, #4]
 80042fe:	099b      	lsrs	r3, r3, #6
 8004300:	2200      	movs	r2, #0
 8004302:	63bb      	str	r3, [r7, #56]	@ 0x38
 8004304:	63fa      	str	r2, [r7, #60]	@ 0x3c
 8004306:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004308:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800430c:	633b      	str	r3, [r7, #48]	@ 0x30
 800430e:	2300      	movs	r3, #0
 8004310:	637b      	str	r3, [r7, #52]	@ 0x34
 8004312:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	@ 0x30
 8004316:	4622      	mov	r2, r4
 8004318:	462b      	mov	r3, r5
 800431a:	f04f 0000 	mov.w	r0, #0
 800431e:	f04f 0100 	mov.w	r1, #0
 8004322:	0159      	lsls	r1, r3, #5
 8004324:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8004328:	0150      	lsls	r0, r2, #5
 800432a:	4602      	mov	r2, r0
 800432c:	460b      	mov	r3, r1
 800432e:	4621      	mov	r1, r4
 8004330:	1a51      	subs	r1, r2, r1
 8004332:	6139      	str	r1, [r7, #16]
 8004334:	4629      	mov	r1, r5
 8004336:	eb63 0301 	sbc.w	r3, r3, r1
 800433a:	617b      	str	r3, [r7, #20]
 800433c:	f04f 0200 	mov.w	r2, #0
 8004340:	f04f 0300 	mov.w	r3, #0
 8004344:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8004348:	4659      	mov	r1, fp
 800434a:	018b      	lsls	r3, r1, #6
 800434c:	4651      	mov	r1, sl
 800434e:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8004352:	4651      	mov	r1, sl
 8004354:	018a      	lsls	r2, r1, #6
 8004356:	4651      	mov	r1, sl
 8004358:	ebb2 0801 	subs.w	r8, r2, r1
 800435c:	4659      	mov	r1, fp
 800435e:	eb63 0901 	sbc.w	r9, r3, r1
 8004362:	f04f 0200 	mov.w	r2, #0
 8004366:	f04f 0300 	mov.w	r3, #0
 800436a:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 800436e:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8004372:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8004376:	4690      	mov	r8, r2
 8004378:	4699      	mov	r9, r3
 800437a:	4623      	mov	r3, r4
 800437c:	eb18 0303 	adds.w	r3, r8, r3
 8004380:	60bb      	str	r3, [r7, #8]
 8004382:	462b      	mov	r3, r5
 8004384:	eb49 0303 	adc.w	r3, r9, r3
 8004388:	60fb      	str	r3, [r7, #12]
 800438a:	f04f 0200 	mov.w	r2, #0
 800438e:	f04f 0300 	mov.w	r3, #0
 8004392:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 8004396:	4629      	mov	r1, r5
 8004398:	024b      	lsls	r3, r1, #9
 800439a:	4621      	mov	r1, r4
 800439c:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 80043a0:	4621      	mov	r1, r4
 80043a2:	024a      	lsls	r2, r1, #9
 80043a4:	4610      	mov	r0, r2
 80043a6:	4619      	mov	r1, r3
 80043a8:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80043aa:	2200      	movs	r2, #0
 80043ac:	62bb      	str	r3, [r7, #40]	@ 0x28
 80043ae:	62fa      	str	r2, [r7, #44]	@ 0x2c
 80043b0:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 80043b4:	f7fb ff9c 	bl	80002f0 <__aeabi_uldivmod>
 80043b8:	4602      	mov	r2, r0
 80043ba:	460b      	mov	r3, r1
 80043bc:	4613      	mov	r3, r2
 80043be:	64fb      	str	r3, [r7, #76]	@ 0x4c
 80043c0:	e058      	b.n	8004474 <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80043c2:	4b38      	ldr	r3, [pc, #224]	@ (80044a4 <HAL_RCC_GetSysClockFreq+0x200>)
 80043c4:	685b      	ldr	r3, [r3, #4]
 80043c6:	099b      	lsrs	r3, r3, #6
 80043c8:	2200      	movs	r2, #0
 80043ca:	4618      	mov	r0, r3
 80043cc:	4611      	mov	r1, r2
 80043ce:	f3c0 0308 	ubfx	r3, r0, #0, #9
 80043d2:	623b      	str	r3, [r7, #32]
 80043d4:	2300      	movs	r3, #0
 80043d6:	627b      	str	r3, [r7, #36]	@ 0x24
 80043d8:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 80043dc:	4642      	mov	r2, r8
 80043de:	464b      	mov	r3, r9
 80043e0:	f04f 0000 	mov.w	r0, #0
 80043e4:	f04f 0100 	mov.w	r1, #0
 80043e8:	0159      	lsls	r1, r3, #5
 80043ea:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 80043ee:	0150      	lsls	r0, r2, #5
 80043f0:	4602      	mov	r2, r0
 80043f2:	460b      	mov	r3, r1
 80043f4:	4641      	mov	r1, r8
 80043f6:	ebb2 0a01 	subs.w	sl, r2, r1
 80043fa:	4649      	mov	r1, r9
 80043fc:	eb63 0b01 	sbc.w	fp, r3, r1
 8004400:	f04f 0200 	mov.w	r2, #0
 8004404:	f04f 0300 	mov.w	r3, #0
 8004408:	ea4f 138b 	mov.w	r3, fp, lsl #6
 800440c:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 8004410:	ea4f 128a 	mov.w	r2, sl, lsl #6
 8004414:	ebb2 040a 	subs.w	r4, r2, sl
 8004418:	eb63 050b 	sbc.w	r5, r3, fp
 800441c:	f04f 0200 	mov.w	r2, #0
 8004420:	f04f 0300 	mov.w	r3, #0
 8004424:	00eb      	lsls	r3, r5, #3
 8004426:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 800442a:	00e2      	lsls	r2, r4, #3
 800442c:	4614      	mov	r4, r2
 800442e:	461d      	mov	r5, r3
 8004430:	4643      	mov	r3, r8
 8004432:	18e3      	adds	r3, r4, r3
 8004434:	603b      	str	r3, [r7, #0]
 8004436:	464b      	mov	r3, r9
 8004438:	eb45 0303 	adc.w	r3, r5, r3
 800443c:	607b      	str	r3, [r7, #4]
 800443e:	f04f 0200 	mov.w	r2, #0
 8004442:	f04f 0300 	mov.w	r3, #0
 8004446:	e9d7 4500 	ldrd	r4, r5, [r7]
 800444a:	4629      	mov	r1, r5
 800444c:	028b      	lsls	r3, r1, #10
 800444e:	4621      	mov	r1, r4
 8004450:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8004454:	4621      	mov	r1, r4
 8004456:	028a      	lsls	r2, r1, #10
 8004458:	4610      	mov	r0, r2
 800445a:	4619      	mov	r1, r3
 800445c:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800445e:	2200      	movs	r2, #0
 8004460:	61bb      	str	r3, [r7, #24]
 8004462:	61fa      	str	r2, [r7, #28]
 8004464:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8004468:	f7fb ff42 	bl	80002f0 <__aeabi_uldivmod>
 800446c:	4602      	mov	r2, r0
 800446e:	460b      	mov	r3, r1
 8004470:	4613      	mov	r3, r2
 8004472:	64fb      	str	r3, [r7, #76]	@ 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1) * 2);
 8004474:	4b0b      	ldr	r3, [pc, #44]	@ (80044a4 <HAL_RCC_GetSysClockFreq+0x200>)
 8004476:	685b      	ldr	r3, [r3, #4]
 8004478:	0c1b      	lsrs	r3, r3, #16
 800447a:	f003 0303 	and.w	r3, r3, #3
 800447e:	3301      	adds	r3, #1
 8004480:	005b      	lsls	r3, r3, #1
 8004482:	643b      	str	r3, [r7, #64]	@ 0x40

      sysclockfreq = pllvco / pllp;
 8004484:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 8004486:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8004488:	fbb2 f3f3 	udiv	r3, r2, r3
 800448c:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 800448e:	e002      	b.n	8004496 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8004490:	4b05      	ldr	r3, [pc, #20]	@ (80044a8 <HAL_RCC_GetSysClockFreq+0x204>)
 8004492:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 8004494:	bf00      	nop
    }
  }
  return sysclockfreq;
 8004496:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
}
 8004498:	4618      	mov	r0, r3
 800449a:	3750      	adds	r7, #80	@ 0x50
 800449c:	46bd      	mov	sp, r7
 800449e:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80044a2:	bf00      	nop
 80044a4:	40023800 	.word	0x40023800
 80044a8:	00f42400 	.word	0x00f42400
 80044ac:	007a1200 	.word	0x007a1200

080044b0 <HAL_RCC_GetHCLKFreq>:
  *         right HCLK value. Otherwise, any configuration based on this function will be incorrect.
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80044b0:	b480      	push	{r7}
 80044b2:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80044b4:	4b03      	ldr	r3, [pc, #12]	@ (80044c4 <HAL_RCC_GetHCLKFreq+0x14>)
 80044b6:	681b      	ldr	r3, [r3, #0]
}
 80044b8:	4618      	mov	r0, r3
 80044ba:	46bd      	mov	sp, r7
 80044bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80044c0:	4770      	bx	lr
 80044c2:	bf00      	nop
 80044c4:	20027fac 	.word	0x20027fac

080044c8 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80044c8:	b580      	push	{r7, lr}
 80044ca:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 80044cc:	f7ff fff0 	bl	80044b0 <HAL_RCC_GetHCLKFreq>
 80044d0:	4602      	mov	r2, r0
 80044d2:	4b05      	ldr	r3, [pc, #20]	@ (80044e8 <HAL_RCC_GetPCLK1Freq+0x20>)
 80044d4:	689b      	ldr	r3, [r3, #8]
 80044d6:	0a9b      	lsrs	r3, r3, #10
 80044d8:	f003 0307 	and.w	r3, r3, #7
 80044dc:	4903      	ldr	r1, [pc, #12]	@ (80044ec <HAL_RCC_GetPCLK1Freq+0x24>)
 80044de:	5ccb      	ldrb	r3, [r1, r3]
 80044e0:	fa22 f303 	lsr.w	r3, r2, r3
}
 80044e4:	4618      	mov	r0, r3
 80044e6:	bd80      	pop	{r7, pc}
 80044e8:	40023800 	.word	0x40023800
 80044ec:	08011840 	.word	0x08011840

080044f0 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80044f0:	b580      	push	{r7, lr}
 80044f2:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 80044f4:	f7ff ffdc 	bl	80044b0 <HAL_RCC_GetHCLKFreq>
 80044f8:	4602      	mov	r2, r0
 80044fa:	4b05      	ldr	r3, [pc, #20]	@ (8004510 <HAL_RCC_GetPCLK2Freq+0x20>)
 80044fc:	689b      	ldr	r3, [r3, #8]
 80044fe:	0b5b      	lsrs	r3, r3, #13
 8004500:	f003 0307 	and.w	r3, r3, #7
 8004504:	4903      	ldr	r1, [pc, #12]	@ (8004514 <HAL_RCC_GetPCLK2Freq+0x24>)
 8004506:	5ccb      	ldrb	r3, [r1, r3]
 8004508:	fa22 f303 	lsr.w	r3, r2, r3
}
 800450c:	4618      	mov	r0, r3
 800450e:	bd80      	pop	{r7, pc}
 8004510:	40023800 	.word	0x40023800
 8004514:	08011840 	.word	0x08011840

08004518 <HAL_RCCEx_PeriphCLKConfig>:
  *         the backup registers) are set to their reset values.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8004518:	b580      	push	{r7, lr}
 800451a:	b088      	sub	sp, #32
 800451c:	af00      	add	r7, sp, #0
 800451e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0;
 8004520:	2300      	movs	r3, #0
 8004522:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg0 = 0;
 8004524:	2300      	movs	r3, #0
 8004526:	613b      	str	r3, [r7, #16]
  uint32_t tmpreg1 = 0;
 8004528:	2300      	movs	r3, #0
 800452a:	60fb      	str	r3, [r7, #12]
  uint32_t plli2sused = 0;
 800452c:	2300      	movs	r3, #0
 800452e:	61fb      	str	r3, [r7, #28]
  uint32_t pllsaiused = 0;
 8004530:	2300      	movs	r3, #0
 8004532:	61bb      	str	r3, [r7, #24]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*----------------------------------- I2S configuration ----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == (RCC_PERIPHCLK_I2S))
 8004534:	687b      	ldr	r3, [r7, #4]
 8004536:	681b      	ldr	r3, [r3, #0]
 8004538:	f003 0301 	and.w	r3, r3, #1
 800453c:	2b00      	cmp	r3, #0
 800453e:	d012      	beq.n	8004566 <HAL_RCCEx_PeriphCLKConfig+0x4e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));

    /* Configure I2S Clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 8004540:	4b69      	ldr	r3, [pc, #420]	@ (80046e8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004542:	689b      	ldr	r3, [r3, #8]
 8004544:	4a68      	ldr	r2, [pc, #416]	@ (80046e8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004546:	f423 0300 	bic.w	r3, r3, #8388608	@ 0x800000
 800454a:	6093      	str	r3, [r2, #8]
 800454c:	4b66      	ldr	r3, [pc, #408]	@ (80046e8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800454e:	689a      	ldr	r2, [r3, #8]
 8004550:	687b      	ldr	r3, [r7, #4]
 8004552:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8004554:	4964      	ldr	r1, [pc, #400]	@ (80046e8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004556:	4313      	orrs	r3, r2
 8004558:	608b      	str	r3, [r1, #8]

    /* Enable the PLLI2S when it's used as clock source for I2S */
    if(PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLLI2S)
 800455a:	687b      	ldr	r3, [r7, #4]
 800455c:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800455e:	2b00      	cmp	r3, #0
 8004560:	d101      	bne.n	8004566 <HAL_RCCEx_PeriphCLKConfig+0x4e>
    {
      plli2sused = 1;
 8004562:	2301      	movs	r3, #1
 8004564:	61fb      	str	r3, [r7, #28]
    }
  }

  /*------------------------------------ SAI1 configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == (RCC_PERIPHCLK_SAI1))
 8004566:	687b      	ldr	r3, [r7, #4]
 8004568:	681b      	ldr	r3, [r3, #0]
 800456a:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 800456e:	2b00      	cmp	r3, #0
 8004570:	d017      	beq.n	80045a2 <HAL_RCCEx_PeriphCLKConfig+0x8a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLKSOURCE(PeriphClkInit->Sai1ClockSelection));

    /* Configure SAI1 Clock source */
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8004572:	4b5d      	ldr	r3, [pc, #372]	@ (80046e8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004574:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8004578:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 800457c:	687b      	ldr	r3, [r7, #4]
 800457e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004580:	4959      	ldr	r1, [pc, #356]	@ (80046e8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004582:	4313      	orrs	r3, r2
 8004584:	f8c1 308c 	str.w	r3, [r1, #140]	@ 0x8c
    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)
 8004588:	687b      	ldr	r3, [r7, #4]
 800458a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800458c:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8004590:	d101      	bne.n	8004596 <HAL_RCCEx_PeriphCLKConfig+0x7e>
    {
      plli2sused = 1;
 8004592:	2301      	movs	r3, #1
 8004594:	61fb      	str	r3, [r7, #28]
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)
 8004596:	687b      	ldr	r3, [r7, #4]
 8004598:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800459a:	2b00      	cmp	r3, #0
 800459c:	d101      	bne.n	80045a2 <HAL_RCCEx_PeriphCLKConfig+0x8a>
    {
      pllsaiused = 1;
 800459e:	2301      	movs	r3, #1
 80045a0:	61bb      	str	r3, [r7, #24]
    }
  }

  /*------------------------------------ SAI2 configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == (RCC_PERIPHCLK_SAI2))
 80045a2:	687b      	ldr	r3, [r7, #4]
 80045a4:	681b      	ldr	r3, [r3, #0]
 80045a6:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 80045aa:	2b00      	cmp	r3, #0
 80045ac:	d017      	beq.n	80045de <HAL_RCCEx_PeriphCLKConfig+0xc6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLKSOURCE(PeriphClkInit->Sai2ClockSelection));

    /* Configure SAI2 Clock source */
    __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 80045ae:	4b4e      	ldr	r3, [pc, #312]	@ (80046e8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80045b0:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 80045b4:	f423 0240 	bic.w	r2, r3, #12582912	@ 0xc00000
 80045b8:	687b      	ldr	r3, [r7, #4]
 80045ba:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80045bc:	494a      	ldr	r1, [pc, #296]	@ (80046e8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80045be:	4313      	orrs	r3, r2
 80045c0:	f8c1 308c 	str.w	r3, [r1, #140]	@ 0x8c

    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)
 80045c4:	687b      	ldr	r3, [r7, #4]
 80045c6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80045c8:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 80045cc:	d101      	bne.n	80045d2 <HAL_RCCEx_PeriphCLKConfig+0xba>
    {
      plli2sused = 1;
 80045ce:	2301      	movs	r3, #1
 80045d0:	61fb      	str	r3, [r7, #28]
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)
 80045d2:	687b      	ldr	r3, [r7, #4]
 80045d4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80045d6:	2b00      	cmp	r3, #0
 80045d8:	d101      	bne.n	80045de <HAL_RCCEx_PeriphCLKConfig+0xc6>
    {
      pllsaiused = 1;
 80045da:	2301      	movs	r3, #1
 80045dc:	61bb      	str	r3, [r7, #24]
    }
  }

  /*-------------------------------------- SPDIF-RX Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 80045de:	687b      	ldr	r3, [r7, #4]
 80045e0:	681b      	ldr	r3, [r3, #0]
 80045e2:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 80045e6:	2b00      	cmp	r3, #0
 80045e8:	d001      	beq.n	80045ee <HAL_RCCEx_PeriphCLKConfig+0xd6>
  {
      plli2sused = 1;
 80045ea:	2301      	movs	r3, #1
 80045ec:	61fb      	str	r3, [r7, #28]
  }

  /*------------------------------------ RTC configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 80045ee:	687b      	ldr	r3, [r7, #4]
 80045f0:	681b      	ldr	r3, [r3, #0]
 80045f2:	f003 0320 	and.w	r3, r3, #32
 80045f6:	2b00      	cmp	r3, #0
 80045f8:	f000 808b 	beq.w	8004712 <HAL_RCCEx_PeriphCLKConfig+0x1fa>
  {
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 80045fc:	4b3a      	ldr	r3, [pc, #232]	@ (80046e8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80045fe:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004600:	4a39      	ldr	r2, [pc, #228]	@ (80046e8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004602:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8004606:	6413      	str	r3, [r2, #64]	@ 0x40
 8004608:	4b37      	ldr	r3, [pc, #220]	@ (80046e8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800460a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800460c:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8004610:	60bb      	str	r3, [r7, #8]
 8004612:	68bb      	ldr	r3, [r7, #8]

    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 8004614:	4b35      	ldr	r3, [pc, #212]	@ (80046ec <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 8004616:	681b      	ldr	r3, [r3, #0]
 8004618:	4a34      	ldr	r2, [pc, #208]	@ (80046ec <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 800461a:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800461e:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8004620:	f7fd fc38 	bl	8001e94 <HAL_GetTick>
 8004624:	6178      	str	r0, [r7, #20]

    /* Wait for Backup domain Write protection disable */
    while((PWR->CR1 & PWR_CR1_DBP) == RESET)
 8004626:	e008      	b.n	800463a <HAL_RCCEx_PeriphCLKConfig+0x122>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8004628:	f7fd fc34 	bl	8001e94 <HAL_GetTick>
 800462c:	4602      	mov	r2, r0
 800462e:	697b      	ldr	r3, [r7, #20]
 8004630:	1ad3      	subs	r3, r2, r3
 8004632:	2b64      	cmp	r3, #100	@ 0x64
 8004634:	d901      	bls.n	800463a <HAL_RCCEx_PeriphCLKConfig+0x122>
      {
        return HAL_TIMEOUT;
 8004636:	2303      	movs	r3, #3
 8004638:	e38f      	b.n	8004d5a <HAL_RCCEx_PeriphCLKConfig+0x842>
    while((PWR->CR1 & PWR_CR1_DBP) == RESET)
 800463a:	4b2c      	ldr	r3, [pc, #176]	@ (80046ec <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 800463c:	681b      	ldr	r3, [r3, #0]
 800463e:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8004642:	2b00      	cmp	r3, #0
 8004644:	d0f0      	beq.n	8004628 <HAL_RCCEx_PeriphCLKConfig+0x110>
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified */
    tmpreg0 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8004646:	4b28      	ldr	r3, [pc, #160]	@ (80046e8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004648:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800464a:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800464e:	613b      	str	r3, [r7, #16]

    if((tmpreg0 != 0x00000000U) && (tmpreg0 != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8004650:	693b      	ldr	r3, [r7, #16]
 8004652:	2b00      	cmp	r3, #0
 8004654:	d035      	beq.n	80046c2 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
 8004656:	687b      	ldr	r3, [r7, #4]
 8004658:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800465a:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800465e:	693a      	ldr	r2, [r7, #16]
 8004660:	429a      	cmp	r2, r3
 8004662:	d02e      	beq.n	80046c2 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      tmpreg0 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8004664:	4b20      	ldr	r3, [pc, #128]	@ (80046e8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004666:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004668:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 800466c:	613b      	str	r3, [r7, #16]

      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 800466e:	4b1e      	ldr	r3, [pc, #120]	@ (80046e8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004670:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004672:	4a1d      	ldr	r2, [pc, #116]	@ (80046e8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004674:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8004678:	6713      	str	r3, [r2, #112]	@ 0x70
      __HAL_RCC_BACKUPRESET_RELEASE();
 800467a:	4b1b      	ldr	r3, [pc, #108]	@ (80046e8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800467c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800467e:	4a1a      	ldr	r2, [pc, #104]	@ (80046e8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004680:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8004684:	6713      	str	r3, [r2, #112]	@ 0x70

      /* Restore the Content of BDCR register */
      RCC->BDCR = tmpreg0;
 8004686:	4a18      	ldr	r2, [pc, #96]	@ (80046e8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004688:	693b      	ldr	r3, [r7, #16]
 800468a:	6713      	str	r3, [r2, #112]	@ 0x70

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 800468c:	4b16      	ldr	r3, [pc, #88]	@ (80046e8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800468e:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004690:	f003 0301 	and.w	r3, r3, #1
 8004694:	2b01      	cmp	r3, #1
 8004696:	d114      	bne.n	80046c2 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004698:	f7fd fbfc 	bl	8001e94 <HAL_GetTick>
 800469c:	6178      	str	r0, [r7, #20]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800469e:	e00a      	b.n	80046b6 <HAL_RCCEx_PeriphCLKConfig+0x19e>
        {
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80046a0:	f7fd fbf8 	bl	8001e94 <HAL_GetTick>
 80046a4:	4602      	mov	r2, r0
 80046a6:	697b      	ldr	r3, [r7, #20]
 80046a8:	1ad3      	subs	r3, r2, r3
 80046aa:	f241 3288 	movw	r2, #5000	@ 0x1388
 80046ae:	4293      	cmp	r3, r2
 80046b0:	d901      	bls.n	80046b6 <HAL_RCCEx_PeriphCLKConfig+0x19e>
          {
            return HAL_TIMEOUT;
 80046b2:	2303      	movs	r3, #3
 80046b4:	e351      	b.n	8004d5a <HAL_RCCEx_PeriphCLKConfig+0x842>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80046b6:	4b0c      	ldr	r3, [pc, #48]	@ (80046e8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80046b8:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80046ba:	f003 0302 	and.w	r3, r3, #2
 80046be:	2b00      	cmp	r3, #0
 80046c0:	d0ee      	beq.n	80046a0 <HAL_RCCEx_PeriphCLKConfig+0x188>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 80046c2:	687b      	ldr	r3, [r7, #4]
 80046c4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80046c6:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 80046ca:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 80046ce:	d111      	bne.n	80046f4 <HAL_RCCEx_PeriphCLKConfig+0x1dc>
 80046d0:	4b05      	ldr	r3, [pc, #20]	@ (80046e8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80046d2:	689b      	ldr	r3, [r3, #8]
 80046d4:	f423 12f8 	bic.w	r2, r3, #2031616	@ 0x1f0000
 80046d8:	687b      	ldr	r3, [r7, #4]
 80046da:	6b19      	ldr	r1, [r3, #48]	@ 0x30
 80046dc:	4b04      	ldr	r3, [pc, #16]	@ (80046f0 <HAL_RCCEx_PeriphCLKConfig+0x1d8>)
 80046de:	400b      	ands	r3, r1
 80046e0:	4901      	ldr	r1, [pc, #4]	@ (80046e8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80046e2:	4313      	orrs	r3, r2
 80046e4:	608b      	str	r3, [r1, #8]
 80046e6:	e00b      	b.n	8004700 <HAL_RCCEx_PeriphCLKConfig+0x1e8>
 80046e8:	40023800 	.word	0x40023800
 80046ec:	40007000 	.word	0x40007000
 80046f0:	0ffffcff 	.word	0x0ffffcff
 80046f4:	4bac      	ldr	r3, [pc, #688]	@ (80049a8 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80046f6:	689b      	ldr	r3, [r3, #8]
 80046f8:	4aab      	ldr	r2, [pc, #684]	@ (80049a8 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80046fa:	f423 13f8 	bic.w	r3, r3, #2031616	@ 0x1f0000
 80046fe:	6093      	str	r3, [r2, #8]
 8004700:	4ba9      	ldr	r3, [pc, #676]	@ (80049a8 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8004702:	6f1a      	ldr	r2, [r3, #112]	@ 0x70
 8004704:	687b      	ldr	r3, [r7, #4]
 8004706:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004708:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800470c:	49a6      	ldr	r1, [pc, #664]	@ (80049a8 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 800470e:	4313      	orrs	r3, r2
 8004710:	670b      	str	r3, [r1, #112]	@ 0x70
  }

  /*------------------------------------ TIM configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
 8004712:	687b      	ldr	r3, [r7, #4]
 8004714:	681b      	ldr	r3, [r3, #0]
 8004716:	f003 0310 	and.w	r3, r3, #16
 800471a:	2b00      	cmp	r3, #0
 800471c:	d010      	beq.n	8004740 <HAL_RCCEx_PeriphCLKConfig+0x228>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 800471e:	4ba2      	ldr	r3, [pc, #648]	@ (80049a8 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8004720:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8004724:	4aa0      	ldr	r2, [pc, #640]	@ (80049a8 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8004726:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 800472a:	f8c2 308c 	str.w	r3, [r2, #140]	@ 0x8c
 800472e:	4b9e      	ldr	r3, [pc, #632]	@ (80049a8 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8004730:	f8d3 208c 	ldr.w	r2, [r3, #140]	@ 0x8c
 8004734:	687b      	ldr	r3, [r7, #4]
 8004736:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004738:	499b      	ldr	r1, [pc, #620]	@ (80049a8 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 800473a:	4313      	orrs	r3, r2
 800473c:	f8c1 308c 	str.w	r3, [r1, #140]	@ 0x8c
  }

  /*-------------------------------------- I2C1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8004740:	687b      	ldr	r3, [r7, #4]
 8004742:	681b      	ldr	r3, [r3, #0]
 8004744:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8004748:	2b00      	cmp	r3, #0
 800474a:	d00a      	beq.n	8004762 <HAL_RCCEx_PeriphCLKConfig+0x24a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 800474c:	4b96      	ldr	r3, [pc, #600]	@ (80049a8 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 800474e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8004752:	f423 3240 	bic.w	r2, r3, #196608	@ 0x30000
 8004756:	687b      	ldr	r3, [r7, #4]
 8004758:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800475a:	4993      	ldr	r1, [pc, #588]	@ (80049a8 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 800475c:	4313      	orrs	r3, r2
 800475e:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- I2C2 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8004762:	687b      	ldr	r3, [r7, #4]
 8004764:	681b      	ldr	r3, [r3, #0]
 8004766:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 800476a:	2b00      	cmp	r3, #0
 800476c:	d00a      	beq.n	8004784 <HAL_RCCEx_PeriphCLKConfig+0x26c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 800476e:	4b8e      	ldr	r3, [pc, #568]	@ (80049a8 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8004770:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8004774:	f423 2240 	bic.w	r2, r3, #786432	@ 0xc0000
 8004778:	687b      	ldr	r3, [r7, #4]
 800477a:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 800477c:	498a      	ldr	r1, [pc, #552]	@ (80049a8 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 800477e:	4313      	orrs	r3, r2
 8004780:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- I2C3 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8004784:	687b      	ldr	r3, [r7, #4]
 8004786:	681b      	ldr	r3, [r3, #0]
 8004788:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 800478c:	2b00      	cmp	r3, #0
 800478e:	d00a      	beq.n	80047a6 <HAL_RCCEx_PeriphCLKConfig+0x28e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8004790:	4b85      	ldr	r3, [pc, #532]	@ (80049a8 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8004792:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8004796:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 800479a:	687b      	ldr	r3, [r7, #4]
 800479c:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800479e:	4982      	ldr	r1, [pc, #520]	@ (80049a8 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80047a0:	4313      	orrs	r3, r2
 80047a2:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- I2C4 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 80047a6:	687b      	ldr	r3, [r7, #4]
 80047a8:	681b      	ldr	r3, [r3, #0]
 80047aa:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80047ae:	2b00      	cmp	r3, #0
 80047b0:	d00a      	beq.n	80047c8 <HAL_RCCEx_PeriphCLKConfig+0x2b0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    /* Configure the I2C4 clock source */
    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 80047b2:	4b7d      	ldr	r3, [pc, #500]	@ (80049a8 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80047b4:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80047b8:	f423 0240 	bic.w	r2, r3, #12582912	@ 0xc00000
 80047bc:	687b      	ldr	r3, [r7, #4]
 80047be:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80047c0:	4979      	ldr	r1, [pc, #484]	@ (80049a8 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80047c2:	4313      	orrs	r3, r2
 80047c4:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- USART1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 80047c8:	687b      	ldr	r3, [r7, #4]
 80047ca:	681b      	ldr	r3, [r3, #0]
 80047cc:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80047d0:	2b00      	cmp	r3, #0
 80047d2:	d00a      	beq.n	80047ea <HAL_RCCEx_PeriphCLKConfig+0x2d2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 80047d4:	4b74      	ldr	r3, [pc, #464]	@ (80049a8 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80047d6:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80047da:	f023 0203 	bic.w	r2, r3, #3
 80047de:	687b      	ldr	r3, [r7, #4]
 80047e0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80047e2:	4971      	ldr	r1, [pc, #452]	@ (80049a8 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80047e4:	4313      	orrs	r3, r2
 80047e6:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- USART2 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 80047ea:	687b      	ldr	r3, [r7, #4]
 80047ec:	681b      	ldr	r3, [r3, #0]
 80047ee:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80047f2:	2b00      	cmp	r3, #0
 80047f4:	d00a      	beq.n	800480c <HAL_RCCEx_PeriphCLKConfig+0x2f4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 80047f6:	4b6c      	ldr	r3, [pc, #432]	@ (80049a8 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80047f8:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80047fc:	f023 020c 	bic.w	r2, r3, #12
 8004800:	687b      	ldr	r3, [r7, #4]
 8004802:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8004804:	4968      	ldr	r1, [pc, #416]	@ (80049a8 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8004806:	4313      	orrs	r3, r2
 8004808:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- USART3 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 800480c:	687b      	ldr	r3, [r7, #4]
 800480e:	681b      	ldr	r3, [r3, #0]
 8004810:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8004814:	2b00      	cmp	r3, #0
 8004816:	d00a      	beq.n	800482e <HAL_RCCEx_PeriphCLKConfig+0x316>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8004818:	4b63      	ldr	r3, [pc, #396]	@ (80049a8 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 800481a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800481e:	f023 0230 	bic.w	r2, r3, #48	@ 0x30
 8004822:	687b      	ldr	r3, [r7, #4]
 8004824:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8004826:	4960      	ldr	r1, [pc, #384]	@ (80049a8 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8004828:	4313      	orrs	r3, r2
 800482a:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- UART4 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 800482e:	687b      	ldr	r3, [r7, #4]
 8004830:	681b      	ldr	r3, [r3, #0]
 8004832:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8004836:	2b00      	cmp	r3, #0
 8004838:	d00a      	beq.n	8004850 <HAL_RCCEx_PeriphCLKConfig+0x338>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 800483a:	4b5b      	ldr	r3, [pc, #364]	@ (80049a8 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 800483c:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8004840:	f023 02c0 	bic.w	r2, r3, #192	@ 0xc0
 8004844:	687b      	ldr	r3, [r7, #4]
 8004846:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8004848:	4957      	ldr	r1, [pc, #348]	@ (80049a8 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 800484a:	4313      	orrs	r3, r2
 800484c:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- UART5 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 8004850:	687b      	ldr	r3, [r7, #4]
 8004852:	681b      	ldr	r3, [r3, #0]
 8004854:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8004858:	2b00      	cmp	r3, #0
 800485a:	d00a      	beq.n	8004872 <HAL_RCCEx_PeriphCLKConfig+0x35a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 800485c:	4b52      	ldr	r3, [pc, #328]	@ (80049a8 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 800485e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8004862:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 8004866:	687b      	ldr	r3, [r7, #4]
 8004868:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800486a:	494f      	ldr	r1, [pc, #316]	@ (80049a8 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 800486c:	4313      	orrs	r3, r2
 800486e:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- USART6 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART6) == RCC_PERIPHCLK_USART6)
 8004872:	687b      	ldr	r3, [r7, #4]
 8004874:	681b      	ldr	r3, [r3, #0]
 8004876:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 800487a:	2b00      	cmp	r3, #0
 800487c:	d00a      	beq.n	8004894 <HAL_RCCEx_PeriphCLKConfig+0x37c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART6CLKSOURCE(PeriphClkInit->Usart6ClockSelection));

    /* Configure the USART6 clock source */
    __HAL_RCC_USART6_CONFIG(PeriphClkInit->Usart6ClockSelection);
 800487e:	4b4a      	ldr	r3, [pc, #296]	@ (80049a8 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8004880:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8004884:	f423 6240 	bic.w	r2, r3, #3072	@ 0xc00
 8004888:	687b      	ldr	r3, [r7, #4]
 800488a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800488c:	4946      	ldr	r1, [pc, #280]	@ (80049a8 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 800488e:	4313      	orrs	r3, r2
 8004890:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- UART7 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART7) == RCC_PERIPHCLK_UART7)
 8004894:	687b      	ldr	r3, [r7, #4]
 8004896:	681b      	ldr	r3, [r3, #0]
 8004898:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 800489c:	2b00      	cmp	r3, #0
 800489e:	d00a      	beq.n	80048b6 <HAL_RCCEx_PeriphCLKConfig+0x39e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART7CLKSOURCE(PeriphClkInit->Uart7ClockSelection));

    /* Configure the UART7 clock source */
    __HAL_RCC_UART7_CONFIG(PeriphClkInit->Uart7ClockSelection);
 80048a0:	4b41      	ldr	r3, [pc, #260]	@ (80049a8 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80048a2:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80048a6:	f423 5240 	bic.w	r2, r3, #12288	@ 0x3000
 80048aa:	687b      	ldr	r3, [r7, #4]
 80048ac:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80048ae:	493e      	ldr	r1, [pc, #248]	@ (80049a8 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80048b0:	4313      	orrs	r3, r2
 80048b2:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- UART8 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART8) == RCC_PERIPHCLK_UART8)
 80048b6:	687b      	ldr	r3, [r7, #4]
 80048b8:	681b      	ldr	r3, [r3, #0]
 80048ba:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 80048be:	2b00      	cmp	r3, #0
 80048c0:	d00a      	beq.n	80048d8 <HAL_RCCEx_PeriphCLKConfig+0x3c0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART8CLKSOURCE(PeriphClkInit->Uart8ClockSelection));

    /* Configure the UART8 clock source */
    __HAL_RCC_UART8_CONFIG(PeriphClkInit->Uart8ClockSelection);
 80048c2:	4b39      	ldr	r3, [pc, #228]	@ (80049a8 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80048c4:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80048c8:	f423 4240 	bic.w	r2, r3, #49152	@ 0xc000
 80048cc:	687b      	ldr	r3, [r7, #4]
 80048ce:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80048d0:	4935      	ldr	r1, [pc, #212]	@ (80049a8 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80048d2:	4313      	orrs	r3, r2
 80048d4:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*--------------------------------------- CEC Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 80048d8:	687b      	ldr	r3, [r7, #4]
 80048da:	681b      	ldr	r3, [r3, #0]
 80048dc:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80048e0:	2b00      	cmp	r3, #0
 80048e2:	d00a      	beq.n	80048fa <HAL_RCCEx_PeriphCLKConfig+0x3e2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 80048e4:	4b30      	ldr	r3, [pc, #192]	@ (80049a8 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80048e6:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80048ea:	f023 6280 	bic.w	r2, r3, #67108864	@ 0x4000000
 80048ee:	687b      	ldr	r3, [r7, #4]
 80048f0:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 80048f2:	492d      	ldr	r1, [pc, #180]	@ (80049a8 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80048f4:	4313      	orrs	r3, r2
 80048f6:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- CK48 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48)
 80048fa:	687b      	ldr	r3, [r7, #4]
 80048fc:	681b      	ldr	r3, [r3, #0]
 80048fe:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8004902:	2b00      	cmp	r3, #0
 8004904:	d011      	beq.n	800492a <HAL_RCCEx_PeriphCLKConfig+0x412>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLK48SOURCE(PeriphClkInit->Clk48ClockSelection));

    /* Configure the CLK48 source */
    __HAL_RCC_CLK48_CONFIG(PeriphClkInit->Clk48ClockSelection);
 8004906:	4b28      	ldr	r3, [pc, #160]	@ (80049a8 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8004908:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800490c:	f023 6200 	bic.w	r2, r3, #134217728	@ 0x8000000
 8004910:	687b      	ldr	r3, [r7, #4]
 8004912:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8004914:	4924      	ldr	r1, [pc, #144]	@ (80049a8 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8004916:	4313      	orrs	r3, r2
 8004918:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90

    /* Enable the PLLSAI when it's used as clock source for CK48 */
    if(PeriphClkInit->Clk48ClockSelection == RCC_CLK48SOURCE_PLLSAIP)
 800491c:	687b      	ldr	r3, [r7, #4]
 800491e:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8004920:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8004924:	d101      	bne.n	800492a <HAL_RCCEx_PeriphCLKConfig+0x412>
    {
      pllsaiused = 1;
 8004926:	2301      	movs	r3, #1
 8004928:	61bb      	str	r3, [r7, #24]
    }
  }

  /*-------------------------------------- LTDC Configuration -----------------------------------*/
#if defined(STM32F746xx) || defined(STM32F756xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx) || defined (STM32F750xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 800492a:	687b      	ldr	r3, [r7, #4]
 800492c:	681b      	ldr	r3, [r3, #0]
 800492e:	f003 0308 	and.w	r3, r3, #8
 8004932:	2b00      	cmp	r3, #0
 8004934:	d001      	beq.n	800493a <HAL_RCCEx_PeriphCLKConfig+0x422>
  {
    pllsaiused = 1;
 8004936:	2301      	movs	r3, #1
 8004938:	61bb      	str	r3, [r7, #24]
  }
#endif /* STM32F746xx || STM32F756xx || STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx || STM32F750xx */

  /*-------------------------------------- LPTIM1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 800493a:	687b      	ldr	r3, [r7, #4]
 800493c:	681b      	ldr	r3, [r3, #0]
 800493e:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8004942:	2b00      	cmp	r3, #0
 8004944:	d00a      	beq.n	800495c <HAL_RCCEx_PeriphCLKConfig+0x444>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));

    /* Configure the LTPIM1 clock source */
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8004946:	4b18      	ldr	r3, [pc, #96]	@ (80049a8 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8004948:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800494c:	f023 7240 	bic.w	r2, r3, #50331648	@ 0x3000000
 8004950:	687b      	ldr	r3, [r7, #4]
 8004952:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8004954:	4914      	ldr	r1, [pc, #80]	@ (80049a8 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8004956:	4313      	orrs	r3, r2
 8004958:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
   }

  /*------------------------------------- SDMMC1 Configuration ------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == RCC_PERIPHCLK_SDMMC1)
 800495c:	687b      	ldr	r3, [r7, #4]
 800495e:	681b      	ldr	r3, [r3, #0]
 8004960:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8004964:	2b00      	cmp	r3, #0
 8004966:	d00b      	beq.n	8004980 <HAL_RCCEx_PeriphCLKConfig+0x468>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));

    /* Configure the SDMMC1 clock source */
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 8004968:	4b0f      	ldr	r3, [pc, #60]	@ (80049a8 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 800496a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800496e:	f023 5280 	bic.w	r2, r3, #268435456	@ 0x10000000
 8004972:	687b      	ldr	r3, [r7, #4]
 8004974:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8004978:	490b      	ldr	r1, [pc, #44]	@ (80049a8 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 800497a:	4313      	orrs	r3, r2
 800497c:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

#if defined (STM32F765xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx)
  /*------------------------------------- SDMMC2 Configuration ------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC2) == RCC_PERIPHCLK_SDMMC2)
 8004980:	687b      	ldr	r3, [r7, #4]
 8004982:	681b      	ldr	r3, [r3, #0]
 8004984:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 8004988:	2b00      	cmp	r3, #0
 800498a:	d00f      	beq.n	80049ac <HAL_RCCEx_PeriphCLKConfig+0x494>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC2CLKSOURCE(PeriphClkInit->Sdmmc2ClockSelection));

    /* Configure the SDMMC2 clock source */
    __HAL_RCC_SDMMC2_CONFIG(PeriphClkInit->Sdmmc2ClockSelection);
 800498c:	4b06      	ldr	r3, [pc, #24]	@ (80049a8 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 800498e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8004992:	f023 5200 	bic.w	r2, r3, #536870912	@ 0x20000000
 8004996:	687b      	ldr	r3, [r7, #4]
 8004998:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800499c:	4902      	ldr	r1, [pc, #8]	@ (80049a8 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 800499e:	4313      	orrs	r3, r2
 80049a0:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
 80049a4:	e002      	b.n	80049ac <HAL_RCCEx_PeriphCLKConfig+0x494>
 80049a6:	bf00      	nop
 80049a8:	40023800 	.word	0x40023800
  }

  /*------------------------------------- DFSDM1 Configuration -------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 80049ac:	687b      	ldr	r3, [r7, #4]
 80049ae:	681b      	ldr	r3, [r3, #0]
 80049b0:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 80049b4:	2b00      	cmp	r3, #0
 80049b6:	d00b      	beq.n	80049d0 <HAL_RCCEx_PeriphCLKConfig+0x4b8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 80049b8:	4b8a      	ldr	r3, [pc, #552]	@ (8004be4 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 80049ba:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 80049be:	f023 7200 	bic.w	r2, r3, #33554432	@ 0x2000000
 80049c2:	687b      	ldr	r3, [r7, #4]
 80049c4:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80049c8:	4986      	ldr	r1, [pc, #536]	@ (8004be4 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 80049ca:	4313      	orrs	r3, r2
 80049cc:	f8c1 308c 	str.w	r3, [r1, #140]	@ 0x8c
  }

  /*------------------------------------- DFSDM AUDIO Configuration -------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1_AUDIO) == RCC_PERIPHCLK_DFSDM1_AUDIO)
 80049d0:	687b      	ldr	r3, [r7, #4]
 80049d2:	681b      	ldr	r3, [r3, #0]
 80049d4:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80049d8:	2b00      	cmp	r3, #0
 80049da:	d00b      	beq.n	80049f4 <HAL_RCCEx_PeriphCLKConfig+0x4dc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1AUDIOCLKSOURCE(PeriphClkInit->Dfsdm1AudioClockSelection));

    /* Configure the DFSDM interface clock source */
    __HAL_RCC_DFSDM1AUDIO_CONFIG(PeriphClkInit->Dfsdm1AudioClockSelection);
 80049dc:	4b81      	ldr	r3, [pc, #516]	@ (8004be4 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 80049de:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 80049e2:	f023 6280 	bic.w	r2, r3, #67108864	@ 0x4000000
 80049e6:	687b      	ldr	r3, [r7, #4]
 80049e8:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 80049ec:	497d      	ldr	r1, [pc, #500]	@ (8004be4 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 80049ee:	4313      	orrs	r3, r2
 80049f0:	f8c1 308c 	str.w	r3, [r1, #140]	@ 0x8c
  }
#endif /* STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx */

  /*-------------------------------------- PLLI2S Configuration ---------------------------------*/
  /* PLLI2S is configured when a peripheral will use it as source clock : SAI1, SAI2, I2S or SPDIF-RX */
  if((plli2sused == 1) || ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S))
 80049f4:	69fb      	ldr	r3, [r7, #28]
 80049f6:	2b01      	cmp	r3, #1
 80049f8:	d006      	beq.n	8004a08 <HAL_RCCEx_PeriphCLKConfig+0x4f0>
 80049fa:	687b      	ldr	r3, [r7, #4]
 80049fc:	681b      	ldr	r3, [r3, #0]
 80049fe:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8004a02:	2b00      	cmp	r3, #0
 8004a04:	f000 80d6 	beq.w	8004bb4 <HAL_RCCEx_PeriphCLKConfig+0x69c>
  {
    /* Disable the PLLI2S */
    __HAL_RCC_PLLI2S_DISABLE();
 8004a08:	4b76      	ldr	r3, [pc, #472]	@ (8004be4 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8004a0a:	681b      	ldr	r3, [r3, #0]
 8004a0c:	4a75      	ldr	r2, [pc, #468]	@ (8004be4 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8004a0e:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 8004a12:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8004a14:	f7fd fa3e 	bl	8001e94 <HAL_GetTick>
 8004a18:	6178      	str	r0, [r7, #20]

    /* Wait till PLLI2S is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8004a1a:	e008      	b.n	8004a2e <HAL_RCCEx_PeriphCLKConfig+0x516>
    {
      if((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 8004a1c:	f7fd fa3a 	bl	8001e94 <HAL_GetTick>
 8004a20:	4602      	mov	r2, r0
 8004a22:	697b      	ldr	r3, [r7, #20]
 8004a24:	1ad3      	subs	r3, r2, r3
 8004a26:	2b64      	cmp	r3, #100	@ 0x64
 8004a28:	d901      	bls.n	8004a2e <HAL_RCCEx_PeriphCLKConfig+0x516>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8004a2a:	2303      	movs	r3, #3
 8004a2c:	e195      	b.n	8004d5a <HAL_RCCEx_PeriphCLKConfig+0x842>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8004a2e:	4b6d      	ldr	r3, [pc, #436]	@ (8004be4 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8004a30:	681b      	ldr	r3, [r3, #0]
 8004a32:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8004a36:	2b00      	cmp	r3, #0
 8004a38:	d1f0      	bne.n	8004a1c <HAL_RCCEx_PeriphCLKConfig+0x504>

    /* check for common PLLI2S Parameters */
    assert_param(IS_RCC_PLLI2SN_VALUE(PeriphClkInit->PLLI2S.PLLI2SN));

    /*----------------- In Case of PLLI2S is selected as source clock for I2S -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) && (PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLLI2S)))
 8004a3a:	687b      	ldr	r3, [r7, #4]
 8004a3c:	681b      	ldr	r3, [r3, #0]
 8004a3e:	f003 0301 	and.w	r3, r3, #1
 8004a42:	2b00      	cmp	r3, #0
 8004a44:	d021      	beq.n	8004a8a <HAL_RCCEx_PeriphCLKConfig+0x572>
 8004a46:	687b      	ldr	r3, [r7, #4]
 8004a48:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8004a4a:	2b00      	cmp	r3, #0
 8004a4c:	d11d      	bne.n	8004a8a <HAL_RCCEx_PeriphCLKConfig+0x572>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SR_VALUE(PeriphClkInit->PLLI2S.PLLI2SR));

      /* Read PLLI2SP and PLLI2SQ value from PLLI2SCFGR register (this value is not needed for I2S configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos);
 8004a4e:	4b65      	ldr	r3, [pc, #404]	@ (8004be4 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8004a50:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8004a54:	0c1b      	lsrs	r3, r3, #16
 8004a56:	f003 0303 	and.w	r3, r3, #3
 8004a5a:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 8004a5c:	4b61      	ldr	r3, [pc, #388]	@ (8004be4 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8004a5e:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8004a62:	0e1b      	lsrs	r3, r3, #24
 8004a64:	f003 030f 	and.w	r3, r3, #15
 8004a68:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLM) */
      /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , tmpreg0, tmpreg1, PeriphClkInit->PLLI2S.PLLI2SR);
 8004a6a:	687b      	ldr	r3, [r7, #4]
 8004a6c:	685b      	ldr	r3, [r3, #4]
 8004a6e:	019a      	lsls	r2, r3, #6
 8004a70:	693b      	ldr	r3, [r7, #16]
 8004a72:	041b      	lsls	r3, r3, #16
 8004a74:	431a      	orrs	r2, r3
 8004a76:	68fb      	ldr	r3, [r7, #12]
 8004a78:	061b      	lsls	r3, r3, #24
 8004a7a:	431a      	orrs	r2, r3
 8004a7c:	687b      	ldr	r3, [r7, #4]
 8004a7e:	689b      	ldr	r3, [r3, #8]
 8004a80:	071b      	lsls	r3, r3, #28
 8004a82:	4958      	ldr	r1, [pc, #352]	@ (8004be4 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8004a84:	4313      	orrs	r3, r2
 8004a86:	f8c1 3084 	str.w	r3, [r1, #132]	@ 0x84
    }

    /*----------------- In Case of PLLI2S is selected as source clock for SAI -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 8004a8a:	687b      	ldr	r3, [r7, #4]
 8004a8c:	681b      	ldr	r3, [r3, #0]
 8004a8e:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8004a92:	2b00      	cmp	r3, #0
 8004a94:	d004      	beq.n	8004aa0 <HAL_RCCEx_PeriphCLKConfig+0x588>
 8004a96:	687b      	ldr	r3, [r7, #4]
 8004a98:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004a9a:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8004a9e:	d00a      	beq.n	8004ab6 <HAL_RCCEx_PeriphCLKConfig+0x59e>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 8004aa0:	687b      	ldr	r3, [r7, #4]
 8004aa2:	681b      	ldr	r3, [r3, #0]
 8004aa4:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 8004aa8:	2b00      	cmp	r3, #0
 8004aaa:	d02e      	beq.n	8004b0a <HAL_RCCEx_PeriphCLKConfig+0x5f2>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 8004aac:	687b      	ldr	r3, [r7, #4]
 8004aae:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004ab0:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8004ab4:	d129      	bne.n	8004b0a <HAL_RCCEx_PeriphCLKConfig+0x5f2>
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));
      /* Check for PLLI2S/DIVQ parameters */
      assert_param(IS_RCC_PLLI2S_DIVQ_VALUE(PeriphClkInit->PLLI2SDivQ));

      /* Read PLLI2SP and PLLI2SR values from PLLI2SCFGR register (this value is not needed for SAI configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos);
 8004ab6:	4b4b      	ldr	r3, [pc, #300]	@ (8004be4 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8004ab8:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8004abc:	0c1b      	lsrs	r3, r3, #16
 8004abe:	f003 0303 	and.w	r3, r3, #3
 8004ac2:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 8004ac4:	4b47      	ldr	r3, [pc, #284]	@ (8004be4 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8004ac6:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8004aca:	0f1b      	lsrs	r3, r3, #28
 8004acc:	f003 0307 	and.w	r3, r3, #7
 8004ad0:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLI2S_VCO Output = PLLI2S_VCO Input * PLLI2SN */
      /* SAI_CLK(first level) = PLLI2S_VCO Output/PLLI2SQ */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN, tmpreg0, PeriphClkInit->PLLI2S.PLLI2SQ, tmpreg1);
 8004ad2:	687b      	ldr	r3, [r7, #4]
 8004ad4:	685b      	ldr	r3, [r3, #4]
 8004ad6:	019a      	lsls	r2, r3, #6
 8004ad8:	693b      	ldr	r3, [r7, #16]
 8004ada:	041b      	lsls	r3, r3, #16
 8004adc:	431a      	orrs	r2, r3
 8004ade:	687b      	ldr	r3, [r7, #4]
 8004ae0:	68db      	ldr	r3, [r3, #12]
 8004ae2:	061b      	lsls	r3, r3, #24
 8004ae4:	431a      	orrs	r2, r3
 8004ae6:	68fb      	ldr	r3, [r7, #12]
 8004ae8:	071b      	lsls	r3, r3, #28
 8004aea:	493e      	ldr	r1, [pc, #248]	@ (8004be4 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8004aec:	4313      	orrs	r3, r2
 8004aee:	f8c1 3084 	str.w	r3, [r1, #132]	@ 0x84

      /* SAI_CLK_x = SAI_CLK(first level)/PLLI2SDIVQ */
      __HAL_RCC_PLLI2S_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLI2SDivQ);
 8004af2:	4b3c      	ldr	r3, [pc, #240]	@ (8004be4 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8004af4:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8004af8:	f023 021f 	bic.w	r2, r3, #31
 8004afc:	687b      	ldr	r3, [r7, #4]
 8004afe:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004b00:	3b01      	subs	r3, #1
 8004b02:	4938      	ldr	r1, [pc, #224]	@ (8004be4 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8004b04:	4313      	orrs	r3, r2
 8004b06:	f8c1 308c 	str.w	r3, [r1, #140]	@ 0x8c
    }

    /*----------------- In Case of PLLI2S is selected as source clock for SPDIF-RX -------------------*/
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 8004b0a:	687b      	ldr	r3, [r7, #4]
 8004b0c:	681b      	ldr	r3, [r3, #0]
 8004b0e:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8004b12:	2b00      	cmp	r3, #0
 8004b14:	d01d      	beq.n	8004b52 <HAL_RCCEx_PeriphCLKConfig+0x63a>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SP_VALUE(PeriphClkInit->PLLI2S.PLLI2SP));

     /* Read PLLI2SR value from PLLI2SCFGR register (this value is not needed for SPDIF-RX configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 8004b16:	4b33      	ldr	r3, [pc, #204]	@ (8004be4 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8004b18:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8004b1c:	0e1b      	lsrs	r3, r3, #24
 8004b1e:	f003 030f 	and.w	r3, r3, #15
 8004b22:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 8004b24:	4b2f      	ldr	r3, [pc, #188]	@ (8004be4 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8004b26:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8004b2a:	0f1b      	lsrs	r3, r3, #28
 8004b2c:	f003 0307 	and.w	r3, r3, #7
 8004b30:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLM) */
      /* SPDIFCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SP */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, tmpreg0, tmpreg1);
 8004b32:	687b      	ldr	r3, [r7, #4]
 8004b34:	685b      	ldr	r3, [r3, #4]
 8004b36:	019a      	lsls	r2, r3, #6
 8004b38:	687b      	ldr	r3, [r7, #4]
 8004b3a:	691b      	ldr	r3, [r3, #16]
 8004b3c:	041b      	lsls	r3, r3, #16
 8004b3e:	431a      	orrs	r2, r3
 8004b40:	693b      	ldr	r3, [r7, #16]
 8004b42:	061b      	lsls	r3, r3, #24
 8004b44:	431a      	orrs	r2, r3
 8004b46:	68fb      	ldr	r3, [r7, #12]
 8004b48:	071b      	lsls	r3, r3, #28
 8004b4a:	4926      	ldr	r1, [pc, #152]	@ (8004be4 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8004b4c:	4313      	orrs	r3, r2
 8004b4e:	f8c1 3084 	str.w	r3, [r1, #132]	@ 0x84
    }

    /*----------------- In Case of PLLI2S is just selected  -----------------*/
    if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S)
 8004b52:	687b      	ldr	r3, [r7, #4]
 8004b54:	681b      	ldr	r3, [r3, #0]
 8004b56:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8004b5a:	2b00      	cmp	r3, #0
 8004b5c:	d011      	beq.n	8004b82 <HAL_RCCEx_PeriphCLKConfig+0x66a>
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));

      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLI2SM) */
      /* SPDIFRXCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SP */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, PeriphClkInit->PLLI2S.PLLI2SQ, PeriphClkInit->PLLI2S.PLLI2SR);
 8004b5e:	687b      	ldr	r3, [r7, #4]
 8004b60:	685b      	ldr	r3, [r3, #4]
 8004b62:	019a      	lsls	r2, r3, #6
 8004b64:	687b      	ldr	r3, [r7, #4]
 8004b66:	691b      	ldr	r3, [r3, #16]
 8004b68:	041b      	lsls	r3, r3, #16
 8004b6a:	431a      	orrs	r2, r3
 8004b6c:	687b      	ldr	r3, [r7, #4]
 8004b6e:	68db      	ldr	r3, [r3, #12]
 8004b70:	061b      	lsls	r3, r3, #24
 8004b72:	431a      	orrs	r2, r3
 8004b74:	687b      	ldr	r3, [r7, #4]
 8004b76:	689b      	ldr	r3, [r3, #8]
 8004b78:	071b      	lsls	r3, r3, #28
 8004b7a:	491a      	ldr	r1, [pc, #104]	@ (8004be4 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8004b7c:	4313      	orrs	r3, r2
 8004b7e:	f8c1 3084 	str.w	r3, [r1, #132]	@ 0x84
    }

    /* Enable the PLLI2S */
    __HAL_RCC_PLLI2S_ENABLE();
 8004b82:	4b18      	ldr	r3, [pc, #96]	@ (8004be4 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8004b84:	681b      	ldr	r3, [r3, #0]
 8004b86:	4a17      	ldr	r2, [pc, #92]	@ (8004be4 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8004b88:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 8004b8c:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8004b8e:	f7fd f981 	bl	8001e94 <HAL_GetTick>
 8004b92:	6178      	str	r0, [r7, #20]

    /* Wait till PLLI2S is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8004b94:	e008      	b.n	8004ba8 <HAL_RCCEx_PeriphCLKConfig+0x690>
    {
      if((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 8004b96:	f7fd f97d 	bl	8001e94 <HAL_GetTick>
 8004b9a:	4602      	mov	r2, r0
 8004b9c:	697b      	ldr	r3, [r7, #20]
 8004b9e:	1ad3      	subs	r3, r2, r3
 8004ba0:	2b64      	cmp	r3, #100	@ 0x64
 8004ba2:	d901      	bls.n	8004ba8 <HAL_RCCEx_PeriphCLKConfig+0x690>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8004ba4:	2303      	movs	r3, #3
 8004ba6:	e0d8      	b.n	8004d5a <HAL_RCCEx_PeriphCLKConfig+0x842>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8004ba8:	4b0e      	ldr	r3, [pc, #56]	@ (8004be4 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8004baa:	681b      	ldr	r3, [r3, #0]
 8004bac:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8004bb0:	2b00      	cmp	r3, #0
 8004bb2:	d0f0      	beq.n	8004b96 <HAL_RCCEx_PeriphCLKConfig+0x67e>
    }
  }

  /*-------------------------------------- PLLSAI Configuration ---------------------------------*/
  /* PLLSAI is configured when a peripheral will use it as source clock : SAI1, SAI2, LTDC or CK48 */
  if(pllsaiused == 1)
 8004bb4:	69bb      	ldr	r3, [r7, #24]
 8004bb6:	2b01      	cmp	r3, #1
 8004bb8:	f040 80ce 	bne.w	8004d58 <HAL_RCCEx_PeriphCLKConfig+0x840>
  {
    /* Disable PLLSAI Clock */
    __HAL_RCC_PLLSAI_DISABLE();
 8004bbc:	4b09      	ldr	r3, [pc, #36]	@ (8004be4 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8004bbe:	681b      	ldr	r3, [r3, #0]
 8004bc0:	4a08      	ldr	r2, [pc, #32]	@ (8004be4 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8004bc2:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8004bc6:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8004bc8:	f7fd f964 	bl	8001e94 <HAL_GetTick>
 8004bcc:	6178      	str	r0, [r7, #20]

    /* Wait till PLLSAI is disabled */
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 8004bce:	e00b      	b.n	8004be8 <HAL_RCCEx_PeriphCLKConfig+0x6d0>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 8004bd0:	f7fd f960 	bl	8001e94 <HAL_GetTick>
 8004bd4:	4602      	mov	r2, r0
 8004bd6:	697b      	ldr	r3, [r7, #20]
 8004bd8:	1ad3      	subs	r3, r2, r3
 8004bda:	2b64      	cmp	r3, #100	@ 0x64
 8004bdc:	d904      	bls.n	8004be8 <HAL_RCCEx_PeriphCLKConfig+0x6d0>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8004bde:	2303      	movs	r3, #3
 8004be0:	e0bb      	b.n	8004d5a <HAL_RCCEx_PeriphCLKConfig+0x842>
 8004be2:	bf00      	nop
 8004be4:	40023800 	.word	0x40023800
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 8004be8:	4b5e      	ldr	r3, [pc, #376]	@ (8004d64 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8004bea:	681b      	ldr	r3, [r3, #0]
 8004bec:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8004bf0:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8004bf4:	d0ec      	beq.n	8004bd0 <HAL_RCCEx_PeriphCLKConfig+0x6b8>

    /* Check the PLLSAI division factors */
    assert_param(IS_RCC_PLLSAIN_VALUE(PeriphClkInit->PLLSAI.PLLSAIN));

    /*----------------- In Case of PLLSAI is selected as source clock for SAI -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||\
 8004bf6:	687b      	ldr	r3, [r7, #4]
 8004bf8:	681b      	ldr	r3, [r3, #0]
 8004bfa:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8004bfe:	2b00      	cmp	r3, #0
 8004c00:	d003      	beq.n	8004c0a <HAL_RCCEx_PeriphCLKConfig+0x6f2>
 8004c02:	687b      	ldr	r3, [r7, #4]
 8004c04:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004c06:	2b00      	cmp	r3, #0
 8004c08:	d009      	beq.n	8004c1e <HAL_RCCEx_PeriphCLKConfig+0x706>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 8004c0a:	687b      	ldr	r3, [r7, #4]
 8004c0c:	681b      	ldr	r3, [r3, #0]
 8004c0e:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||\
 8004c12:	2b00      	cmp	r3, #0
 8004c14:	d02e      	beq.n	8004c74 <HAL_RCCEx_PeriphCLKConfig+0x75c>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 8004c16:	687b      	ldr	r3, [r7, #4]
 8004c18:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004c1a:	2b00      	cmp	r3, #0
 8004c1c:	d12a      	bne.n	8004c74 <HAL_RCCEx_PeriphCLKConfig+0x75c>
      assert_param(IS_RCC_PLLSAIQ_VALUE(PeriphClkInit->PLLSAI.PLLSAIQ));
      /* check for PLLSAI/DIVQ Parameter */
      assert_param(IS_RCC_PLLSAI_DIVQ_VALUE(PeriphClkInit->PLLSAIDivQ));

      /* Read PLLSAIP value from PLLSAICFGR register (this value is not needed for SAI configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos);
 8004c1e:	4b51      	ldr	r3, [pc, #324]	@ (8004d64 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8004c20:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004c24:	0c1b      	lsrs	r3, r3, #16
 8004c26:	f003 0303 	and.w	r3, r3, #3
 8004c2a:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 8004c2c:	4b4d      	ldr	r3, [pc, #308]	@ (8004d64 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8004c2e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004c32:	0f1b      	lsrs	r3, r3, #28
 8004c34:	f003 0307 	and.w	r3, r3, #7
 8004c38:	60fb      	str	r3, [r7, #12]
      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* SAI_CLK(first level) = PLLSAI_VCO Output/PLLSAIQ */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg0, PeriphClkInit->PLLSAI.PLLSAIQ, tmpreg1);
 8004c3a:	687b      	ldr	r3, [r7, #4]
 8004c3c:	695b      	ldr	r3, [r3, #20]
 8004c3e:	019a      	lsls	r2, r3, #6
 8004c40:	693b      	ldr	r3, [r7, #16]
 8004c42:	041b      	lsls	r3, r3, #16
 8004c44:	431a      	orrs	r2, r3
 8004c46:	687b      	ldr	r3, [r7, #4]
 8004c48:	699b      	ldr	r3, [r3, #24]
 8004c4a:	061b      	lsls	r3, r3, #24
 8004c4c:	431a      	orrs	r2, r3
 8004c4e:	68fb      	ldr	r3, [r7, #12]
 8004c50:	071b      	lsls	r3, r3, #28
 8004c52:	4944      	ldr	r1, [pc, #272]	@ (8004d64 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8004c54:	4313      	orrs	r3, r2
 8004c56:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

      /* SAI_CLK_x = SAI_CLK(first level)/PLLSAIDIVQ */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLSAIDivQ);
 8004c5a:	4b42      	ldr	r3, [pc, #264]	@ (8004d64 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8004c5c:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8004c60:	f423 52f8 	bic.w	r2, r3, #7936	@ 0x1f00
 8004c64:	687b      	ldr	r3, [r7, #4]
 8004c66:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004c68:	3b01      	subs	r3, #1
 8004c6a:	021b      	lsls	r3, r3, #8
 8004c6c:	493d      	ldr	r1, [pc, #244]	@ (8004d64 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8004c6e:	4313      	orrs	r3, r2
 8004c70:	f8c1 308c 	str.w	r3, [r1, #140]	@ 0x8c
    }

    /*----------------- In Case of PLLSAI is selected as source clock for CLK48 -------------------*/
    /* In Case of PLLI2S is selected as source clock for CK48 */
    if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48) && (PeriphClkInit->Clk48ClockSelection == RCC_CLK48SOURCE_PLLSAIP))
 8004c74:	687b      	ldr	r3, [r7, #4]
 8004c76:	681b      	ldr	r3, [r3, #0]
 8004c78:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8004c7c:	2b00      	cmp	r3, #0
 8004c7e:	d022      	beq.n	8004cc6 <HAL_RCCEx_PeriphCLKConfig+0x7ae>
 8004c80:	687b      	ldr	r3, [r7, #4]
 8004c82:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8004c84:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8004c88:	d11d      	bne.n	8004cc6 <HAL_RCCEx_PeriphCLKConfig+0x7ae>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLSAIP_VALUE(PeriphClkInit->PLLSAI.PLLSAIP));
      /* Read PLLSAIQ and PLLSAIR value from PLLSAICFGR register (this value is not needed for CK48 configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 8004c8a:	4b36      	ldr	r3, [pc, #216]	@ (8004d64 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8004c8c:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004c90:	0e1b      	lsrs	r3, r3, #24
 8004c92:	f003 030f 	and.w	r3, r3, #15
 8004c96:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 8004c98:	4b32      	ldr	r3, [pc, #200]	@ (8004d64 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8004c9a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004c9e:	0f1b      	lsrs	r3, r3, #28
 8004ca0:	f003 0307 	and.w	r3, r3, #7
 8004ca4:	60fb      	str	r3, [r7, #12]

      /* Configure the PLLSAI division factors */
      /* PLLSAI_VCO = f(VCO clock) = f(PLLSAI clock input) x (PLLI2SN/PLLM) */
      /* 48CLK = f(PLLSAI clock output) = f(VCO clock) / PLLSAIP */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , PeriphClkInit->PLLSAI.PLLSAIP, tmpreg0, tmpreg1);
 8004ca6:	687b      	ldr	r3, [r7, #4]
 8004ca8:	695b      	ldr	r3, [r3, #20]
 8004caa:	019a      	lsls	r2, r3, #6
 8004cac:	687b      	ldr	r3, [r7, #4]
 8004cae:	6a1b      	ldr	r3, [r3, #32]
 8004cb0:	041b      	lsls	r3, r3, #16
 8004cb2:	431a      	orrs	r2, r3
 8004cb4:	693b      	ldr	r3, [r7, #16]
 8004cb6:	061b      	lsls	r3, r3, #24
 8004cb8:	431a      	orrs	r2, r3
 8004cba:	68fb      	ldr	r3, [r7, #12]
 8004cbc:	071b      	lsls	r3, r3, #28
 8004cbe:	4929      	ldr	r1, [pc, #164]	@ (8004d64 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8004cc0:	4313      	orrs	r3, r2
 8004cc2:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    }

#if defined(STM32F746xx) || defined(STM32F756xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx) || defined (STM32F750xx)
    /*---------------------------- LTDC configuration -------------------------------*/
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == (RCC_PERIPHCLK_LTDC))
 8004cc6:	687b      	ldr	r3, [r7, #4]
 8004cc8:	681b      	ldr	r3, [r3, #0]
 8004cca:	f003 0308 	and.w	r3, r3, #8
 8004cce:	2b00      	cmp	r3, #0
 8004cd0:	d028      	beq.n	8004d24 <HAL_RCCEx_PeriphCLKConfig+0x80c>
    {
      assert_param(IS_RCC_PLLSAIR_VALUE(PeriphClkInit->PLLSAI.PLLSAIR));
      assert_param(IS_RCC_PLLSAI_DIVR_VALUE(PeriphClkInit->PLLSAIDivR));

      /* Read PLLSAIP and PLLSAIQ value from PLLSAICFGR register (these value are not needed for LTDC configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 8004cd2:	4b24      	ldr	r3, [pc, #144]	@ (8004d64 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8004cd4:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004cd8:	0e1b      	lsrs	r3, r3, #24
 8004cda:	f003 030f 	and.w	r3, r3, #15
 8004cde:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos);
 8004ce0:	4b20      	ldr	r3, [pc, #128]	@ (8004d64 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8004ce2:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004ce6:	0c1b      	lsrs	r3, r3, #16
 8004ce8:	f003 0303 	and.w	r3, r3, #3
 8004cec:	60fb      	str	r3, [r7, #12]

      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* LTDC_CLK(first level) = PLLSAI_VCO Output/PLLSAIR */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg1, tmpreg0, PeriphClkInit->PLLSAI.PLLSAIR);
 8004cee:	687b      	ldr	r3, [r7, #4]
 8004cf0:	695b      	ldr	r3, [r3, #20]
 8004cf2:	019a      	lsls	r2, r3, #6
 8004cf4:	68fb      	ldr	r3, [r7, #12]
 8004cf6:	041b      	lsls	r3, r3, #16
 8004cf8:	431a      	orrs	r2, r3
 8004cfa:	693b      	ldr	r3, [r7, #16]
 8004cfc:	061b      	lsls	r3, r3, #24
 8004cfe:	431a      	orrs	r2, r3
 8004d00:	687b      	ldr	r3, [r7, #4]
 8004d02:	69db      	ldr	r3, [r3, #28]
 8004d04:	071b      	lsls	r3, r3, #28
 8004d06:	4917      	ldr	r1, [pc, #92]	@ (8004d64 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8004d08:	4313      	orrs	r3, r2
 8004d0a:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

      /* LTDC_CLK = LTDC_CLK(first level)/PLLSAIDIVR */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVR_CONFIG(PeriphClkInit->PLLSAIDivR);
 8004d0e:	4b15      	ldr	r3, [pc, #84]	@ (8004d64 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8004d10:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8004d14:	f423 3240 	bic.w	r2, r3, #196608	@ 0x30000
 8004d18:	687b      	ldr	r3, [r7, #4]
 8004d1a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004d1c:	4911      	ldr	r1, [pc, #68]	@ (8004d64 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8004d1e:	4313      	orrs	r3, r2
 8004d20:	f8c1 308c 	str.w	r3, [r1, #140]	@ 0x8c
    }
#endif /* STM32F746xx || STM32F756xx || STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx || STM32F750xx  */

    /* Enable PLLSAI Clock */
    __HAL_RCC_PLLSAI_ENABLE();
 8004d24:	4b0f      	ldr	r3, [pc, #60]	@ (8004d64 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8004d26:	681b      	ldr	r3, [r3, #0]
 8004d28:	4a0e      	ldr	r2, [pc, #56]	@ (8004d64 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8004d2a:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8004d2e:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8004d30:	f7fd f8b0 	bl	8001e94 <HAL_GetTick>
 8004d34:	6178      	str	r0, [r7, #20]

    /* Wait till PLLSAI is ready */
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 8004d36:	e008      	b.n	8004d4a <HAL_RCCEx_PeriphCLKConfig+0x832>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 8004d38:	f7fd f8ac 	bl	8001e94 <HAL_GetTick>
 8004d3c:	4602      	mov	r2, r0
 8004d3e:	697b      	ldr	r3, [r7, #20]
 8004d40:	1ad3      	subs	r3, r2, r3
 8004d42:	2b64      	cmp	r3, #100	@ 0x64
 8004d44:	d901      	bls.n	8004d4a <HAL_RCCEx_PeriphCLKConfig+0x832>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8004d46:	2303      	movs	r3, #3
 8004d48:	e007      	b.n	8004d5a <HAL_RCCEx_PeriphCLKConfig+0x842>
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 8004d4a:	4b06      	ldr	r3, [pc, #24]	@ (8004d64 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8004d4c:	681b      	ldr	r3, [r3, #0]
 8004d4e:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8004d52:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8004d56:	d1ef      	bne.n	8004d38 <HAL_RCCEx_PeriphCLKConfig+0x820>
      }
    }
  }
  return HAL_OK;
 8004d58:	2300      	movs	r3, #0
}
 8004d5a:	4618      	mov	r0, r3
 8004d5c:	3720      	adds	r7, #32
 8004d5e:	46bd      	mov	sp, r7
 8004d60:	bd80      	pop	{r7, pc}
 8004d62:	bf00      	nop
 8004d64:	40023800 	.word	0x40023800

08004d68 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8004d68:	b580      	push	{r7, lr}
 8004d6a:	b082      	sub	sp, #8
 8004d6c:	af00      	add	r7, sp, #0
 8004d6e:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8004d70:	687b      	ldr	r3, [r7, #4]
 8004d72:	2b00      	cmp	r3, #0
 8004d74:	d101      	bne.n	8004d7a <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8004d76:	2301      	movs	r3, #1
 8004d78:	e049      	b.n	8004e0e <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8004d7a:	687b      	ldr	r3, [r7, #4]
 8004d7c:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8004d80:	b2db      	uxtb	r3, r3
 8004d82:	2b00      	cmp	r3, #0
 8004d84:	d106      	bne.n	8004d94 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8004d86:	687b      	ldr	r3, [r7, #4]
 8004d88:	2200      	movs	r2, #0
 8004d8a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8004d8e:	6878      	ldr	r0, [r7, #4]
 8004d90:	f7fc fe1a 	bl	80019c8 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004d94:	687b      	ldr	r3, [r7, #4]
 8004d96:	2202      	movs	r2, #2
 8004d98:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8004d9c:	687b      	ldr	r3, [r7, #4]
 8004d9e:	681a      	ldr	r2, [r3, #0]
 8004da0:	687b      	ldr	r3, [r7, #4]
 8004da2:	3304      	adds	r3, #4
 8004da4:	4619      	mov	r1, r3
 8004da6:	4610      	mov	r0, r2
 8004da8:	f000 fae0 	bl	800536c <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8004dac:	687b      	ldr	r3, [r7, #4]
 8004dae:	2201      	movs	r2, #1
 8004db0:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004db4:	687b      	ldr	r3, [r7, #4]
 8004db6:	2201      	movs	r2, #1
 8004db8:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8004dbc:	687b      	ldr	r3, [r7, #4]
 8004dbe:	2201      	movs	r2, #1
 8004dc0:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8004dc4:	687b      	ldr	r3, [r7, #4]
 8004dc6:	2201      	movs	r2, #1
 8004dc8:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8004dcc:	687b      	ldr	r3, [r7, #4]
 8004dce:	2201      	movs	r2, #1
 8004dd0:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 8004dd4:	687b      	ldr	r3, [r7, #4]
 8004dd6:	2201      	movs	r2, #1
 8004dd8:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8004ddc:	687b      	ldr	r3, [r7, #4]
 8004dde:	2201      	movs	r2, #1
 8004de0:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004de4:	687b      	ldr	r3, [r7, #4]
 8004de6:	2201      	movs	r2, #1
 8004de8:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8004dec:	687b      	ldr	r3, [r7, #4]
 8004dee:	2201      	movs	r2, #1
 8004df0:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8004df4:	687b      	ldr	r3, [r7, #4]
 8004df6:	2201      	movs	r2, #1
 8004df8:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
 8004dfc:	687b      	ldr	r3, [r7, #4]
 8004dfe:	2201      	movs	r2, #1
 8004e00:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8004e04:	687b      	ldr	r3, [r7, #4]
 8004e06:	2201      	movs	r2, #1
 8004e08:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8004e0c:	2300      	movs	r3, #0
}
 8004e0e:	4618      	mov	r0, r3
 8004e10:	3708      	adds	r7, #8
 8004e12:	46bd      	mov	sp, r7
 8004e14:	bd80      	pop	{r7, pc}
	...

08004e18 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8004e18:	b480      	push	{r7}
 8004e1a:	b085      	sub	sp, #20
 8004e1c:	af00      	add	r7, sp, #0
 8004e1e:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8004e20:	687b      	ldr	r3, [r7, #4]
 8004e22:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8004e26:	b2db      	uxtb	r3, r3
 8004e28:	2b01      	cmp	r3, #1
 8004e2a:	d001      	beq.n	8004e30 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8004e2c:	2301      	movs	r3, #1
 8004e2e:	e054      	b.n	8004eda <HAL_TIM_Base_Start_IT+0xc2>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004e30:	687b      	ldr	r3, [r7, #4]
 8004e32:	2202      	movs	r2, #2
 8004e34:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8004e38:	687b      	ldr	r3, [r7, #4]
 8004e3a:	681b      	ldr	r3, [r3, #0]
 8004e3c:	68da      	ldr	r2, [r3, #12]
 8004e3e:	687b      	ldr	r3, [r7, #4]
 8004e40:	681b      	ldr	r3, [r3, #0]
 8004e42:	f042 0201 	orr.w	r2, r2, #1
 8004e46:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8004e48:	687b      	ldr	r3, [r7, #4]
 8004e4a:	681b      	ldr	r3, [r3, #0]
 8004e4c:	4a26      	ldr	r2, [pc, #152]	@ (8004ee8 <HAL_TIM_Base_Start_IT+0xd0>)
 8004e4e:	4293      	cmp	r3, r2
 8004e50:	d022      	beq.n	8004e98 <HAL_TIM_Base_Start_IT+0x80>
 8004e52:	687b      	ldr	r3, [r7, #4]
 8004e54:	681b      	ldr	r3, [r3, #0]
 8004e56:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8004e5a:	d01d      	beq.n	8004e98 <HAL_TIM_Base_Start_IT+0x80>
 8004e5c:	687b      	ldr	r3, [r7, #4]
 8004e5e:	681b      	ldr	r3, [r3, #0]
 8004e60:	4a22      	ldr	r2, [pc, #136]	@ (8004eec <HAL_TIM_Base_Start_IT+0xd4>)
 8004e62:	4293      	cmp	r3, r2
 8004e64:	d018      	beq.n	8004e98 <HAL_TIM_Base_Start_IT+0x80>
 8004e66:	687b      	ldr	r3, [r7, #4]
 8004e68:	681b      	ldr	r3, [r3, #0]
 8004e6a:	4a21      	ldr	r2, [pc, #132]	@ (8004ef0 <HAL_TIM_Base_Start_IT+0xd8>)
 8004e6c:	4293      	cmp	r3, r2
 8004e6e:	d013      	beq.n	8004e98 <HAL_TIM_Base_Start_IT+0x80>
 8004e70:	687b      	ldr	r3, [r7, #4]
 8004e72:	681b      	ldr	r3, [r3, #0]
 8004e74:	4a1f      	ldr	r2, [pc, #124]	@ (8004ef4 <HAL_TIM_Base_Start_IT+0xdc>)
 8004e76:	4293      	cmp	r3, r2
 8004e78:	d00e      	beq.n	8004e98 <HAL_TIM_Base_Start_IT+0x80>
 8004e7a:	687b      	ldr	r3, [r7, #4]
 8004e7c:	681b      	ldr	r3, [r3, #0]
 8004e7e:	4a1e      	ldr	r2, [pc, #120]	@ (8004ef8 <HAL_TIM_Base_Start_IT+0xe0>)
 8004e80:	4293      	cmp	r3, r2
 8004e82:	d009      	beq.n	8004e98 <HAL_TIM_Base_Start_IT+0x80>
 8004e84:	687b      	ldr	r3, [r7, #4]
 8004e86:	681b      	ldr	r3, [r3, #0]
 8004e88:	4a1c      	ldr	r2, [pc, #112]	@ (8004efc <HAL_TIM_Base_Start_IT+0xe4>)
 8004e8a:	4293      	cmp	r3, r2
 8004e8c:	d004      	beq.n	8004e98 <HAL_TIM_Base_Start_IT+0x80>
 8004e8e:	687b      	ldr	r3, [r7, #4]
 8004e90:	681b      	ldr	r3, [r3, #0]
 8004e92:	4a1b      	ldr	r2, [pc, #108]	@ (8004f00 <HAL_TIM_Base_Start_IT+0xe8>)
 8004e94:	4293      	cmp	r3, r2
 8004e96:	d115      	bne.n	8004ec4 <HAL_TIM_Base_Start_IT+0xac>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8004e98:	687b      	ldr	r3, [r7, #4]
 8004e9a:	681b      	ldr	r3, [r3, #0]
 8004e9c:	689a      	ldr	r2, [r3, #8]
 8004e9e:	4b19      	ldr	r3, [pc, #100]	@ (8004f04 <HAL_TIM_Base_Start_IT+0xec>)
 8004ea0:	4013      	ands	r3, r2
 8004ea2:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004ea4:	68fb      	ldr	r3, [r7, #12]
 8004ea6:	2b06      	cmp	r3, #6
 8004ea8:	d015      	beq.n	8004ed6 <HAL_TIM_Base_Start_IT+0xbe>
 8004eaa:	68fb      	ldr	r3, [r7, #12]
 8004eac:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8004eb0:	d011      	beq.n	8004ed6 <HAL_TIM_Base_Start_IT+0xbe>
    {
      __HAL_TIM_ENABLE(htim);
 8004eb2:	687b      	ldr	r3, [r7, #4]
 8004eb4:	681b      	ldr	r3, [r3, #0]
 8004eb6:	681a      	ldr	r2, [r3, #0]
 8004eb8:	687b      	ldr	r3, [r7, #4]
 8004eba:	681b      	ldr	r3, [r3, #0]
 8004ebc:	f042 0201 	orr.w	r2, r2, #1
 8004ec0:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004ec2:	e008      	b.n	8004ed6 <HAL_TIM_Base_Start_IT+0xbe>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8004ec4:	687b      	ldr	r3, [r7, #4]
 8004ec6:	681b      	ldr	r3, [r3, #0]
 8004ec8:	681a      	ldr	r2, [r3, #0]
 8004eca:	687b      	ldr	r3, [r7, #4]
 8004ecc:	681b      	ldr	r3, [r3, #0]
 8004ece:	f042 0201 	orr.w	r2, r2, #1
 8004ed2:	601a      	str	r2, [r3, #0]
 8004ed4:	e000      	b.n	8004ed8 <HAL_TIM_Base_Start_IT+0xc0>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004ed6:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8004ed8:	2300      	movs	r3, #0
}
 8004eda:	4618      	mov	r0, r3
 8004edc:	3714      	adds	r7, #20
 8004ede:	46bd      	mov	sp, r7
 8004ee0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ee4:	4770      	bx	lr
 8004ee6:	bf00      	nop
 8004ee8:	40010000 	.word	0x40010000
 8004eec:	40000400 	.word	0x40000400
 8004ef0:	40000800 	.word	0x40000800
 8004ef4:	40000c00 	.word	0x40000c00
 8004ef8:	40010400 	.word	0x40010400
 8004efc:	40014000 	.word	0x40014000
 8004f00:	40001800 	.word	0x40001800
 8004f04:	00010007 	.word	0x00010007

08004f08 <HAL_TIM_Base_Stop_IT>:
  * @brief  Stops the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Stop_IT(TIM_HandleTypeDef *htim)
{
 8004f08:	b480      	push	{r7}
 8004f0a:	b083      	sub	sp, #12
 8004f0c:	af00      	add	r7, sp, #0
 8004f0e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Disable the TIM Update interrupt */
  __HAL_TIM_DISABLE_IT(htim, TIM_IT_UPDATE);
 8004f10:	687b      	ldr	r3, [r7, #4]
 8004f12:	681b      	ldr	r3, [r3, #0]
 8004f14:	68da      	ldr	r2, [r3, #12]
 8004f16:	687b      	ldr	r3, [r7, #4]
 8004f18:	681b      	ldr	r3, [r3, #0]
 8004f1a:	f022 0201 	bic.w	r2, r2, #1
 8004f1e:	60da      	str	r2, [r3, #12]

  /* Disable the Peripheral */
  __HAL_TIM_DISABLE(htim);
 8004f20:	687b      	ldr	r3, [r7, #4]
 8004f22:	681b      	ldr	r3, [r3, #0]
 8004f24:	6a1a      	ldr	r2, [r3, #32]
 8004f26:	f241 1311 	movw	r3, #4369	@ 0x1111
 8004f2a:	4013      	ands	r3, r2
 8004f2c:	2b00      	cmp	r3, #0
 8004f2e:	d10f      	bne.n	8004f50 <HAL_TIM_Base_Stop_IT+0x48>
 8004f30:	687b      	ldr	r3, [r7, #4]
 8004f32:	681b      	ldr	r3, [r3, #0]
 8004f34:	6a1a      	ldr	r2, [r3, #32]
 8004f36:	f240 4344 	movw	r3, #1092	@ 0x444
 8004f3a:	4013      	ands	r3, r2
 8004f3c:	2b00      	cmp	r3, #0
 8004f3e:	d107      	bne.n	8004f50 <HAL_TIM_Base_Stop_IT+0x48>
 8004f40:	687b      	ldr	r3, [r7, #4]
 8004f42:	681b      	ldr	r3, [r3, #0]
 8004f44:	681a      	ldr	r2, [r3, #0]
 8004f46:	687b      	ldr	r3, [r7, #4]
 8004f48:	681b      	ldr	r3, [r3, #0]
 8004f4a:	f022 0201 	bic.w	r2, r2, #1
 8004f4e:	601a      	str	r2, [r3, #0]

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_READY;
 8004f50:	687b      	ldr	r3, [r7, #4]
 8004f52:	2201      	movs	r2, #1
 8004f54:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Return function status */
  return HAL_OK;
 8004f58:	2300      	movs	r3, #0
}
 8004f5a:	4618      	mov	r0, r3
 8004f5c:	370c      	adds	r7, #12
 8004f5e:	46bd      	mov	sp, r7
 8004f60:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f64:	4770      	bx	lr

08004f66 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8004f66:	b580      	push	{r7, lr}
 8004f68:	b084      	sub	sp, #16
 8004f6a:	af00      	add	r7, sp, #0
 8004f6c:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 8004f6e:	687b      	ldr	r3, [r7, #4]
 8004f70:	681b      	ldr	r3, [r3, #0]
 8004f72:	68db      	ldr	r3, [r3, #12]
 8004f74:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 8004f76:	687b      	ldr	r3, [r7, #4]
 8004f78:	681b      	ldr	r3, [r3, #0]
 8004f7a:	691b      	ldr	r3, [r3, #16]
 8004f7c:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 8004f7e:	68bb      	ldr	r3, [r7, #8]
 8004f80:	f003 0302 	and.w	r3, r3, #2
 8004f84:	2b00      	cmp	r3, #0
 8004f86:	d020      	beq.n	8004fca <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 8004f88:	68fb      	ldr	r3, [r7, #12]
 8004f8a:	f003 0302 	and.w	r3, r3, #2
 8004f8e:	2b00      	cmp	r3, #0
 8004f90:	d01b      	beq.n	8004fca <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 8004f92:	687b      	ldr	r3, [r7, #4]
 8004f94:	681b      	ldr	r3, [r3, #0]
 8004f96:	f06f 0202 	mvn.w	r2, #2
 8004f9a:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8004f9c:	687b      	ldr	r3, [r7, #4]
 8004f9e:	2201      	movs	r2, #1
 8004fa0:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8004fa2:	687b      	ldr	r3, [r7, #4]
 8004fa4:	681b      	ldr	r3, [r3, #0]
 8004fa6:	699b      	ldr	r3, [r3, #24]
 8004fa8:	f003 0303 	and.w	r3, r3, #3
 8004fac:	2b00      	cmp	r3, #0
 8004fae:	d003      	beq.n	8004fb8 <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8004fb0:	6878      	ldr	r0, [r7, #4]
 8004fb2:	f000 f9bd 	bl	8005330 <HAL_TIM_IC_CaptureCallback>
 8004fb6:	e005      	b.n	8004fc4 <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8004fb8:	6878      	ldr	r0, [r7, #4]
 8004fba:	f000 f9af 	bl	800531c <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004fbe:	6878      	ldr	r0, [r7, #4]
 8004fc0:	f000 f9c0 	bl	8005344 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004fc4:	687b      	ldr	r3, [r7, #4]
 8004fc6:	2200      	movs	r2, #0
 8004fc8:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 8004fca:	68bb      	ldr	r3, [r7, #8]
 8004fcc:	f003 0304 	and.w	r3, r3, #4
 8004fd0:	2b00      	cmp	r3, #0
 8004fd2:	d020      	beq.n	8005016 <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 8004fd4:	68fb      	ldr	r3, [r7, #12]
 8004fd6:	f003 0304 	and.w	r3, r3, #4
 8004fda:	2b00      	cmp	r3, #0
 8004fdc:	d01b      	beq.n	8005016 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 8004fde:	687b      	ldr	r3, [r7, #4]
 8004fe0:	681b      	ldr	r3, [r3, #0]
 8004fe2:	f06f 0204 	mvn.w	r2, #4
 8004fe6:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8004fe8:	687b      	ldr	r3, [r7, #4]
 8004fea:	2202      	movs	r2, #2
 8004fec:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8004fee:	687b      	ldr	r3, [r7, #4]
 8004ff0:	681b      	ldr	r3, [r3, #0]
 8004ff2:	699b      	ldr	r3, [r3, #24]
 8004ff4:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8004ff8:	2b00      	cmp	r3, #0
 8004ffa:	d003      	beq.n	8005004 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8004ffc:	6878      	ldr	r0, [r7, #4]
 8004ffe:	f000 f997 	bl	8005330 <HAL_TIM_IC_CaptureCallback>
 8005002:	e005      	b.n	8005010 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8005004:	6878      	ldr	r0, [r7, #4]
 8005006:	f000 f989 	bl	800531c <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800500a:	6878      	ldr	r0, [r7, #4]
 800500c:	f000 f99a 	bl	8005344 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005010:	687b      	ldr	r3, [r7, #4]
 8005012:	2200      	movs	r2, #0
 8005014:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 8005016:	68bb      	ldr	r3, [r7, #8]
 8005018:	f003 0308 	and.w	r3, r3, #8
 800501c:	2b00      	cmp	r3, #0
 800501e:	d020      	beq.n	8005062 <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 8005020:	68fb      	ldr	r3, [r7, #12]
 8005022:	f003 0308 	and.w	r3, r3, #8
 8005026:	2b00      	cmp	r3, #0
 8005028:	d01b      	beq.n	8005062 <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 800502a:	687b      	ldr	r3, [r7, #4]
 800502c:	681b      	ldr	r3, [r3, #0]
 800502e:	f06f 0208 	mvn.w	r2, #8
 8005032:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8005034:	687b      	ldr	r3, [r7, #4]
 8005036:	2204      	movs	r2, #4
 8005038:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 800503a:	687b      	ldr	r3, [r7, #4]
 800503c:	681b      	ldr	r3, [r3, #0]
 800503e:	69db      	ldr	r3, [r3, #28]
 8005040:	f003 0303 	and.w	r3, r3, #3
 8005044:	2b00      	cmp	r3, #0
 8005046:	d003      	beq.n	8005050 <HAL_TIM_IRQHandler+0xea>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8005048:	6878      	ldr	r0, [r7, #4]
 800504a:	f000 f971 	bl	8005330 <HAL_TIM_IC_CaptureCallback>
 800504e:	e005      	b.n	800505c <HAL_TIM_IRQHandler+0xf6>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8005050:	6878      	ldr	r0, [r7, #4]
 8005052:	f000 f963 	bl	800531c <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005056:	6878      	ldr	r0, [r7, #4]
 8005058:	f000 f974 	bl	8005344 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800505c:	687b      	ldr	r3, [r7, #4]
 800505e:	2200      	movs	r2, #0
 8005060:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 8005062:	68bb      	ldr	r3, [r7, #8]
 8005064:	f003 0310 	and.w	r3, r3, #16
 8005068:	2b00      	cmp	r3, #0
 800506a:	d020      	beq.n	80050ae <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 800506c:	68fb      	ldr	r3, [r7, #12]
 800506e:	f003 0310 	and.w	r3, r3, #16
 8005072:	2b00      	cmp	r3, #0
 8005074:	d01b      	beq.n	80050ae <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 8005076:	687b      	ldr	r3, [r7, #4]
 8005078:	681b      	ldr	r3, [r3, #0]
 800507a:	f06f 0210 	mvn.w	r2, #16
 800507e:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8005080:	687b      	ldr	r3, [r7, #4]
 8005082:	2208      	movs	r2, #8
 8005084:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8005086:	687b      	ldr	r3, [r7, #4]
 8005088:	681b      	ldr	r3, [r3, #0]
 800508a:	69db      	ldr	r3, [r3, #28]
 800508c:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8005090:	2b00      	cmp	r3, #0
 8005092:	d003      	beq.n	800509c <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8005094:	6878      	ldr	r0, [r7, #4]
 8005096:	f000 f94b 	bl	8005330 <HAL_TIM_IC_CaptureCallback>
 800509a:	e005      	b.n	80050a8 <HAL_TIM_IRQHandler+0x142>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800509c:	6878      	ldr	r0, [r7, #4]
 800509e:	f000 f93d 	bl	800531c <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80050a2:	6878      	ldr	r0, [r7, #4]
 80050a4:	f000 f94e 	bl	8005344 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80050a8:	687b      	ldr	r3, [r7, #4]
 80050aa:	2200      	movs	r2, #0
 80050ac:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 80050ae:	68bb      	ldr	r3, [r7, #8]
 80050b0:	f003 0301 	and.w	r3, r3, #1
 80050b4:	2b00      	cmp	r3, #0
 80050b6:	d00c      	beq.n	80050d2 <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 80050b8:	68fb      	ldr	r3, [r7, #12]
 80050ba:	f003 0301 	and.w	r3, r3, #1
 80050be:	2b00      	cmp	r3, #0
 80050c0:	d007      	beq.n	80050d2 <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 80050c2:	687b      	ldr	r3, [r7, #4]
 80050c4:	681b      	ldr	r3, [r3, #0]
 80050c6:	f06f 0201 	mvn.w	r2, #1
 80050ca:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 80050cc:	6878      	ldr	r0, [r7, #4]
 80050ce:	f000 f91b 	bl	8005308 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK)) || \
 80050d2:	68bb      	ldr	r3, [r7, #8]
 80050d4:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80050d8:	2b00      	cmp	r3, #0
 80050da:	d104      	bne.n	80050e6 <HAL_TIM_IRQHandler+0x180>
      ((itflag & (TIM_FLAG_SYSTEM_BREAK)) == (TIM_FLAG_SYSTEM_BREAK)))
 80050dc:	68bb      	ldr	r3, [r7, #8]
 80050de:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
  if (((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK)) || \
 80050e2:	2b00      	cmp	r3, #0
 80050e4:	d00c      	beq.n	8005100 <HAL_TIM_IRQHandler+0x19a>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 80050e6:	68fb      	ldr	r3, [r7, #12]
 80050e8:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80050ec:	2b00      	cmp	r3, #0
 80050ee:	d007      	beq.n	8005100 <HAL_TIM_IRQHandler+0x19a>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK | TIM_FLAG_SYSTEM_BREAK);
 80050f0:	687b      	ldr	r3, [r7, #4]
 80050f2:	681b      	ldr	r3, [r3, #0]
 80050f4:	f46f 5202 	mvn.w	r2, #8320	@ 0x2080
 80050f8:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 80050fa:	6878      	ldr	r0, [r7, #4]
 80050fc:	f000 fb14 	bl	8005728 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if ((itflag & (TIM_FLAG_BREAK2)) == (TIM_FLAG_BREAK2))
 8005100:	68bb      	ldr	r3, [r7, #8]
 8005102:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8005106:	2b00      	cmp	r3, #0
 8005108:	d00c      	beq.n	8005124 <HAL_TIM_IRQHandler+0x1be>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 800510a:	68fb      	ldr	r3, [r7, #12]
 800510c:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8005110:	2b00      	cmp	r3, #0
 8005112:	d007      	beq.n	8005124 <HAL_TIM_IRQHandler+0x1be>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 8005114:	687b      	ldr	r3, [r7, #4]
 8005116:	681b      	ldr	r3, [r3, #0]
 8005118:	f46f 7280 	mvn.w	r2, #256	@ 0x100
 800511c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 800511e:	6878      	ldr	r0, [r7, #4]
 8005120:	f000 fb0c 	bl	800573c <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 8005124:	68bb      	ldr	r3, [r7, #8]
 8005126:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800512a:	2b00      	cmp	r3, #0
 800512c:	d00c      	beq.n	8005148 <HAL_TIM_IRQHandler+0x1e2>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 800512e:	68fb      	ldr	r3, [r7, #12]
 8005130:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8005134:	2b00      	cmp	r3, #0
 8005136:	d007      	beq.n	8005148 <HAL_TIM_IRQHandler+0x1e2>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 8005138:	687b      	ldr	r3, [r7, #4]
 800513a:	681b      	ldr	r3, [r3, #0]
 800513c:	f06f 0240 	mvn.w	r2, #64	@ 0x40
 8005140:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8005142:	6878      	ldr	r0, [r7, #4]
 8005144:	f000 f908 	bl	8005358 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 8005148:	68bb      	ldr	r3, [r7, #8]
 800514a:	f003 0320 	and.w	r3, r3, #32
 800514e:	2b00      	cmp	r3, #0
 8005150:	d00c      	beq.n	800516c <HAL_TIM_IRQHandler+0x206>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 8005152:	68fb      	ldr	r3, [r7, #12]
 8005154:	f003 0320 	and.w	r3, r3, #32
 8005158:	2b00      	cmp	r3, #0
 800515a:	d007      	beq.n	800516c <HAL_TIM_IRQHandler+0x206>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 800515c:	687b      	ldr	r3, [r7, #4]
 800515e:	681b      	ldr	r3, [r3, #0]
 8005160:	f06f 0220 	mvn.w	r2, #32
 8005164:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8005166:	6878      	ldr	r0, [r7, #4]
 8005168:	f000 fad4 	bl	8005714 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 800516c:	bf00      	nop
 800516e:	3710      	adds	r7, #16
 8005170:	46bd      	mov	sp, r7
 8005172:	bd80      	pop	{r7, pc}

08005174 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8005174:	b580      	push	{r7, lr}
 8005176:	b084      	sub	sp, #16
 8005178:	af00      	add	r7, sp, #0
 800517a:	6078      	str	r0, [r7, #4]
 800517c:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800517e:	2300      	movs	r3, #0
 8005180:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8005182:	687b      	ldr	r3, [r7, #4]
 8005184:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8005188:	2b01      	cmp	r3, #1
 800518a:	d101      	bne.n	8005190 <HAL_TIM_ConfigClockSource+0x1c>
 800518c:	2302      	movs	r3, #2
 800518e:	e0b4      	b.n	80052fa <HAL_TIM_ConfigClockSource+0x186>
 8005190:	687b      	ldr	r3, [r7, #4]
 8005192:	2201      	movs	r2, #1
 8005194:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8005198:	687b      	ldr	r3, [r7, #4]
 800519a:	2202      	movs	r2, #2
 800519c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 80051a0:	687b      	ldr	r3, [r7, #4]
 80051a2:	681b      	ldr	r3, [r3, #0]
 80051a4:	689b      	ldr	r3, [r3, #8]
 80051a6:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 80051a8:	68ba      	ldr	r2, [r7, #8]
 80051aa:	4b56      	ldr	r3, [pc, #344]	@ (8005304 <HAL_TIM_ConfigClockSource+0x190>)
 80051ac:	4013      	ands	r3, r2
 80051ae:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80051b0:	68bb      	ldr	r3, [r7, #8]
 80051b2:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 80051b6:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 80051b8:	687b      	ldr	r3, [r7, #4]
 80051ba:	681b      	ldr	r3, [r3, #0]
 80051bc:	68ba      	ldr	r2, [r7, #8]
 80051be:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 80051c0:	683b      	ldr	r3, [r7, #0]
 80051c2:	681b      	ldr	r3, [r3, #0]
 80051c4:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80051c8:	d03e      	beq.n	8005248 <HAL_TIM_ConfigClockSource+0xd4>
 80051ca:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80051ce:	f200 8087 	bhi.w	80052e0 <HAL_TIM_ConfigClockSource+0x16c>
 80051d2:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80051d6:	f000 8086 	beq.w	80052e6 <HAL_TIM_ConfigClockSource+0x172>
 80051da:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80051de:	d87f      	bhi.n	80052e0 <HAL_TIM_ConfigClockSource+0x16c>
 80051e0:	2b70      	cmp	r3, #112	@ 0x70
 80051e2:	d01a      	beq.n	800521a <HAL_TIM_ConfigClockSource+0xa6>
 80051e4:	2b70      	cmp	r3, #112	@ 0x70
 80051e6:	d87b      	bhi.n	80052e0 <HAL_TIM_ConfigClockSource+0x16c>
 80051e8:	2b60      	cmp	r3, #96	@ 0x60
 80051ea:	d050      	beq.n	800528e <HAL_TIM_ConfigClockSource+0x11a>
 80051ec:	2b60      	cmp	r3, #96	@ 0x60
 80051ee:	d877      	bhi.n	80052e0 <HAL_TIM_ConfigClockSource+0x16c>
 80051f0:	2b50      	cmp	r3, #80	@ 0x50
 80051f2:	d03c      	beq.n	800526e <HAL_TIM_ConfigClockSource+0xfa>
 80051f4:	2b50      	cmp	r3, #80	@ 0x50
 80051f6:	d873      	bhi.n	80052e0 <HAL_TIM_ConfigClockSource+0x16c>
 80051f8:	2b40      	cmp	r3, #64	@ 0x40
 80051fa:	d058      	beq.n	80052ae <HAL_TIM_ConfigClockSource+0x13a>
 80051fc:	2b40      	cmp	r3, #64	@ 0x40
 80051fe:	d86f      	bhi.n	80052e0 <HAL_TIM_ConfigClockSource+0x16c>
 8005200:	2b30      	cmp	r3, #48	@ 0x30
 8005202:	d064      	beq.n	80052ce <HAL_TIM_ConfigClockSource+0x15a>
 8005204:	2b30      	cmp	r3, #48	@ 0x30
 8005206:	d86b      	bhi.n	80052e0 <HAL_TIM_ConfigClockSource+0x16c>
 8005208:	2b20      	cmp	r3, #32
 800520a:	d060      	beq.n	80052ce <HAL_TIM_ConfigClockSource+0x15a>
 800520c:	2b20      	cmp	r3, #32
 800520e:	d867      	bhi.n	80052e0 <HAL_TIM_ConfigClockSource+0x16c>
 8005210:	2b00      	cmp	r3, #0
 8005212:	d05c      	beq.n	80052ce <HAL_TIM_ConfigClockSource+0x15a>
 8005214:	2b10      	cmp	r3, #16
 8005216:	d05a      	beq.n	80052ce <HAL_TIM_ConfigClockSource+0x15a>
 8005218:	e062      	b.n	80052e0 <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 800521a:	687b      	ldr	r3, [r7, #4]
 800521c:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 800521e:	683b      	ldr	r3, [r7, #0]
 8005220:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8005222:	683b      	ldr	r3, [r7, #0]
 8005224:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8005226:	683b      	ldr	r3, [r7, #0]
 8005228:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 800522a:	f000 f9c5 	bl	80055b8 <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 800522e:	687b      	ldr	r3, [r7, #4]
 8005230:	681b      	ldr	r3, [r3, #0]
 8005232:	689b      	ldr	r3, [r3, #8]
 8005234:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8005236:	68bb      	ldr	r3, [r7, #8]
 8005238:	f043 0377 	orr.w	r3, r3, #119	@ 0x77
 800523c:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 800523e:	687b      	ldr	r3, [r7, #4]
 8005240:	681b      	ldr	r3, [r3, #0]
 8005242:	68ba      	ldr	r2, [r7, #8]
 8005244:	609a      	str	r2, [r3, #8]
      break;
 8005246:	e04f      	b.n	80052e8 <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8005248:	687b      	ldr	r3, [r7, #4]
 800524a:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 800524c:	683b      	ldr	r3, [r7, #0]
 800524e:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8005250:	683b      	ldr	r3, [r7, #0]
 8005252:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8005254:	683b      	ldr	r3, [r7, #0]
 8005256:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8005258:	f000 f9ae 	bl	80055b8 <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 800525c:	687b      	ldr	r3, [r7, #4]
 800525e:	681b      	ldr	r3, [r3, #0]
 8005260:	689a      	ldr	r2, [r3, #8]
 8005262:	687b      	ldr	r3, [r7, #4]
 8005264:	681b      	ldr	r3, [r3, #0]
 8005266:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 800526a:	609a      	str	r2, [r3, #8]
      break;
 800526c:	e03c      	b.n	80052e8 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800526e:	687b      	ldr	r3, [r7, #4]
 8005270:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8005272:	683b      	ldr	r3, [r7, #0]
 8005274:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8005276:	683b      	ldr	r3, [r7, #0]
 8005278:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 800527a:	461a      	mov	r2, r3
 800527c:	f000 f922 	bl	80054c4 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8005280:	687b      	ldr	r3, [r7, #4]
 8005282:	681b      	ldr	r3, [r3, #0]
 8005284:	2150      	movs	r1, #80	@ 0x50
 8005286:	4618      	mov	r0, r3
 8005288:	f000 f97b 	bl	8005582 <TIM_ITRx_SetConfig>
      break;
 800528c:	e02c      	b.n	80052e8 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 800528e:	687b      	ldr	r3, [r7, #4]
 8005290:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8005292:	683b      	ldr	r3, [r7, #0]
 8005294:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8005296:	683b      	ldr	r3, [r7, #0]
 8005298:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 800529a:	461a      	mov	r2, r3
 800529c:	f000 f941 	bl	8005522 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 80052a0:	687b      	ldr	r3, [r7, #4]
 80052a2:	681b      	ldr	r3, [r3, #0]
 80052a4:	2160      	movs	r1, #96	@ 0x60
 80052a6:	4618      	mov	r0, r3
 80052a8:	f000 f96b 	bl	8005582 <TIM_ITRx_SetConfig>
      break;
 80052ac:	e01c      	b.n	80052e8 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 80052ae:	687b      	ldr	r3, [r7, #4]
 80052b0:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 80052b2:	683b      	ldr	r3, [r7, #0]
 80052b4:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 80052b6:	683b      	ldr	r3, [r7, #0]
 80052b8:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 80052ba:	461a      	mov	r2, r3
 80052bc:	f000 f902 	bl	80054c4 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 80052c0:	687b      	ldr	r3, [r7, #4]
 80052c2:	681b      	ldr	r3, [r3, #0]
 80052c4:	2140      	movs	r1, #64	@ 0x40
 80052c6:	4618      	mov	r0, r3
 80052c8:	f000 f95b 	bl	8005582 <TIM_ITRx_SetConfig>
      break;
 80052cc:	e00c      	b.n	80052e8 <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 80052ce:	687b      	ldr	r3, [r7, #4]
 80052d0:	681a      	ldr	r2, [r3, #0]
 80052d2:	683b      	ldr	r3, [r7, #0]
 80052d4:	681b      	ldr	r3, [r3, #0]
 80052d6:	4619      	mov	r1, r3
 80052d8:	4610      	mov	r0, r2
 80052da:	f000 f952 	bl	8005582 <TIM_ITRx_SetConfig>
      break;
 80052de:	e003      	b.n	80052e8 <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 80052e0:	2301      	movs	r3, #1
 80052e2:	73fb      	strb	r3, [r7, #15]
      break;
 80052e4:	e000      	b.n	80052e8 <HAL_TIM_ConfigClockSource+0x174>
      break;
 80052e6:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 80052e8:	687b      	ldr	r3, [r7, #4]
 80052ea:	2201      	movs	r2, #1
 80052ec:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 80052f0:	687b      	ldr	r3, [r7, #4]
 80052f2:	2200      	movs	r2, #0
 80052f4:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 80052f8:	7bfb      	ldrb	r3, [r7, #15]
}
 80052fa:	4618      	mov	r0, r3
 80052fc:	3710      	adds	r7, #16
 80052fe:	46bd      	mov	sp, r7
 8005300:	bd80      	pop	{r7, pc}
 8005302:	bf00      	nop
 8005304:	fffeff88 	.word	0xfffeff88

08005308 <HAL_TIM_PeriodElapsedCallback>:
  * @brief  Period elapsed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8005308:	b480      	push	{r7}
 800530a:	b083      	sub	sp, #12
 800530c:	af00      	add	r7, sp, #0
 800530e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PeriodElapsedCallback could be implemented in the user file
   */
}
 8005310:	bf00      	nop
 8005312:	370c      	adds	r7, #12
 8005314:	46bd      	mov	sp, r7
 8005316:	f85d 7b04 	ldr.w	r7, [sp], #4
 800531a:	4770      	bx	lr

0800531c <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 800531c:	b480      	push	{r7}
 800531e:	b083      	sub	sp, #12
 8005320:	af00      	add	r7, sp, #0
 8005322:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8005324:	bf00      	nop
 8005326:	370c      	adds	r7, #12
 8005328:	46bd      	mov	sp, r7
 800532a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800532e:	4770      	bx	lr

08005330 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8005330:	b480      	push	{r7}
 8005332:	b083      	sub	sp, #12
 8005334:	af00      	add	r7, sp, #0
 8005336:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8005338:	bf00      	nop
 800533a:	370c      	adds	r7, #12
 800533c:	46bd      	mov	sp, r7
 800533e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005342:	4770      	bx	lr

08005344 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8005344:	b480      	push	{r7}
 8005346:	b083      	sub	sp, #12
 8005348:	af00      	add	r7, sp, #0
 800534a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 800534c:	bf00      	nop
 800534e:	370c      	adds	r7, #12
 8005350:	46bd      	mov	sp, r7
 8005352:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005356:	4770      	bx	lr

08005358 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8005358:	b480      	push	{r7}
 800535a:	b083      	sub	sp, #12
 800535c:	af00      	add	r7, sp, #0
 800535e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8005360:	bf00      	nop
 8005362:	370c      	adds	r7, #12
 8005364:	46bd      	mov	sp, r7
 8005366:	f85d 7b04 	ldr.w	r7, [sp], #4
 800536a:	4770      	bx	lr

0800536c <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 800536c:	b480      	push	{r7}
 800536e:	b085      	sub	sp, #20
 8005370:	af00      	add	r7, sp, #0
 8005372:	6078      	str	r0, [r7, #4]
 8005374:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8005376:	687b      	ldr	r3, [r7, #4]
 8005378:	681b      	ldr	r3, [r3, #0]
 800537a:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 800537c:	687b      	ldr	r3, [r7, #4]
 800537e:	4a46      	ldr	r2, [pc, #280]	@ (8005498 <TIM_Base_SetConfig+0x12c>)
 8005380:	4293      	cmp	r3, r2
 8005382:	d013      	beq.n	80053ac <TIM_Base_SetConfig+0x40>
 8005384:	687b      	ldr	r3, [r7, #4]
 8005386:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800538a:	d00f      	beq.n	80053ac <TIM_Base_SetConfig+0x40>
 800538c:	687b      	ldr	r3, [r7, #4]
 800538e:	4a43      	ldr	r2, [pc, #268]	@ (800549c <TIM_Base_SetConfig+0x130>)
 8005390:	4293      	cmp	r3, r2
 8005392:	d00b      	beq.n	80053ac <TIM_Base_SetConfig+0x40>
 8005394:	687b      	ldr	r3, [r7, #4]
 8005396:	4a42      	ldr	r2, [pc, #264]	@ (80054a0 <TIM_Base_SetConfig+0x134>)
 8005398:	4293      	cmp	r3, r2
 800539a:	d007      	beq.n	80053ac <TIM_Base_SetConfig+0x40>
 800539c:	687b      	ldr	r3, [r7, #4]
 800539e:	4a41      	ldr	r2, [pc, #260]	@ (80054a4 <TIM_Base_SetConfig+0x138>)
 80053a0:	4293      	cmp	r3, r2
 80053a2:	d003      	beq.n	80053ac <TIM_Base_SetConfig+0x40>
 80053a4:	687b      	ldr	r3, [r7, #4]
 80053a6:	4a40      	ldr	r2, [pc, #256]	@ (80054a8 <TIM_Base_SetConfig+0x13c>)
 80053a8:	4293      	cmp	r3, r2
 80053aa:	d108      	bne.n	80053be <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80053ac:	68fb      	ldr	r3, [r7, #12]
 80053ae:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80053b2:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 80053b4:	683b      	ldr	r3, [r7, #0]
 80053b6:	685b      	ldr	r3, [r3, #4]
 80053b8:	68fa      	ldr	r2, [r7, #12]
 80053ba:	4313      	orrs	r3, r2
 80053bc:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80053be:	687b      	ldr	r3, [r7, #4]
 80053c0:	4a35      	ldr	r2, [pc, #212]	@ (8005498 <TIM_Base_SetConfig+0x12c>)
 80053c2:	4293      	cmp	r3, r2
 80053c4:	d02b      	beq.n	800541e <TIM_Base_SetConfig+0xb2>
 80053c6:	687b      	ldr	r3, [r7, #4]
 80053c8:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80053cc:	d027      	beq.n	800541e <TIM_Base_SetConfig+0xb2>
 80053ce:	687b      	ldr	r3, [r7, #4]
 80053d0:	4a32      	ldr	r2, [pc, #200]	@ (800549c <TIM_Base_SetConfig+0x130>)
 80053d2:	4293      	cmp	r3, r2
 80053d4:	d023      	beq.n	800541e <TIM_Base_SetConfig+0xb2>
 80053d6:	687b      	ldr	r3, [r7, #4]
 80053d8:	4a31      	ldr	r2, [pc, #196]	@ (80054a0 <TIM_Base_SetConfig+0x134>)
 80053da:	4293      	cmp	r3, r2
 80053dc:	d01f      	beq.n	800541e <TIM_Base_SetConfig+0xb2>
 80053de:	687b      	ldr	r3, [r7, #4]
 80053e0:	4a30      	ldr	r2, [pc, #192]	@ (80054a4 <TIM_Base_SetConfig+0x138>)
 80053e2:	4293      	cmp	r3, r2
 80053e4:	d01b      	beq.n	800541e <TIM_Base_SetConfig+0xb2>
 80053e6:	687b      	ldr	r3, [r7, #4]
 80053e8:	4a2f      	ldr	r2, [pc, #188]	@ (80054a8 <TIM_Base_SetConfig+0x13c>)
 80053ea:	4293      	cmp	r3, r2
 80053ec:	d017      	beq.n	800541e <TIM_Base_SetConfig+0xb2>
 80053ee:	687b      	ldr	r3, [r7, #4]
 80053f0:	4a2e      	ldr	r2, [pc, #184]	@ (80054ac <TIM_Base_SetConfig+0x140>)
 80053f2:	4293      	cmp	r3, r2
 80053f4:	d013      	beq.n	800541e <TIM_Base_SetConfig+0xb2>
 80053f6:	687b      	ldr	r3, [r7, #4]
 80053f8:	4a2d      	ldr	r2, [pc, #180]	@ (80054b0 <TIM_Base_SetConfig+0x144>)
 80053fa:	4293      	cmp	r3, r2
 80053fc:	d00f      	beq.n	800541e <TIM_Base_SetConfig+0xb2>
 80053fe:	687b      	ldr	r3, [r7, #4]
 8005400:	4a2c      	ldr	r2, [pc, #176]	@ (80054b4 <TIM_Base_SetConfig+0x148>)
 8005402:	4293      	cmp	r3, r2
 8005404:	d00b      	beq.n	800541e <TIM_Base_SetConfig+0xb2>
 8005406:	687b      	ldr	r3, [r7, #4]
 8005408:	4a2b      	ldr	r2, [pc, #172]	@ (80054b8 <TIM_Base_SetConfig+0x14c>)
 800540a:	4293      	cmp	r3, r2
 800540c:	d007      	beq.n	800541e <TIM_Base_SetConfig+0xb2>
 800540e:	687b      	ldr	r3, [r7, #4]
 8005410:	4a2a      	ldr	r2, [pc, #168]	@ (80054bc <TIM_Base_SetConfig+0x150>)
 8005412:	4293      	cmp	r3, r2
 8005414:	d003      	beq.n	800541e <TIM_Base_SetConfig+0xb2>
 8005416:	687b      	ldr	r3, [r7, #4]
 8005418:	4a29      	ldr	r2, [pc, #164]	@ (80054c0 <TIM_Base_SetConfig+0x154>)
 800541a:	4293      	cmp	r3, r2
 800541c:	d108      	bne.n	8005430 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800541e:	68fb      	ldr	r3, [r7, #12]
 8005420:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8005424:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8005426:	683b      	ldr	r3, [r7, #0]
 8005428:	68db      	ldr	r3, [r3, #12]
 800542a:	68fa      	ldr	r2, [r7, #12]
 800542c:	4313      	orrs	r3, r2
 800542e:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8005430:	68fb      	ldr	r3, [r7, #12]
 8005432:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 8005436:	683b      	ldr	r3, [r7, #0]
 8005438:	695b      	ldr	r3, [r3, #20]
 800543a:	4313      	orrs	r3, r2
 800543c:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800543e:	687b      	ldr	r3, [r7, #4]
 8005440:	68fa      	ldr	r2, [r7, #12]
 8005442:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8005444:	683b      	ldr	r3, [r7, #0]
 8005446:	689a      	ldr	r2, [r3, #8]
 8005448:	687b      	ldr	r3, [r7, #4]
 800544a:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 800544c:	683b      	ldr	r3, [r7, #0]
 800544e:	681a      	ldr	r2, [r3, #0]
 8005450:	687b      	ldr	r3, [r7, #4]
 8005452:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8005454:	687b      	ldr	r3, [r7, #4]
 8005456:	4a10      	ldr	r2, [pc, #64]	@ (8005498 <TIM_Base_SetConfig+0x12c>)
 8005458:	4293      	cmp	r3, r2
 800545a:	d003      	beq.n	8005464 <TIM_Base_SetConfig+0xf8>
 800545c:	687b      	ldr	r3, [r7, #4]
 800545e:	4a12      	ldr	r2, [pc, #72]	@ (80054a8 <TIM_Base_SetConfig+0x13c>)
 8005460:	4293      	cmp	r3, r2
 8005462:	d103      	bne.n	800546c <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8005464:	683b      	ldr	r3, [r7, #0]
 8005466:	691a      	ldr	r2, [r3, #16]
 8005468:	687b      	ldr	r3, [r7, #4]
 800546a:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 800546c:	687b      	ldr	r3, [r7, #4]
 800546e:	2201      	movs	r2, #1
 8005470:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 8005472:	687b      	ldr	r3, [r7, #4]
 8005474:	691b      	ldr	r3, [r3, #16]
 8005476:	f003 0301 	and.w	r3, r3, #1
 800547a:	2b01      	cmp	r3, #1
 800547c:	d105      	bne.n	800548a <TIM_Base_SetConfig+0x11e>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 800547e:	687b      	ldr	r3, [r7, #4]
 8005480:	691b      	ldr	r3, [r3, #16]
 8005482:	f023 0201 	bic.w	r2, r3, #1
 8005486:	687b      	ldr	r3, [r7, #4]
 8005488:	611a      	str	r2, [r3, #16]
  }
}
 800548a:	bf00      	nop
 800548c:	3714      	adds	r7, #20
 800548e:	46bd      	mov	sp, r7
 8005490:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005494:	4770      	bx	lr
 8005496:	bf00      	nop
 8005498:	40010000 	.word	0x40010000
 800549c:	40000400 	.word	0x40000400
 80054a0:	40000800 	.word	0x40000800
 80054a4:	40000c00 	.word	0x40000c00
 80054a8:	40010400 	.word	0x40010400
 80054ac:	40014000 	.word	0x40014000
 80054b0:	40014400 	.word	0x40014400
 80054b4:	40014800 	.word	0x40014800
 80054b8:	40001800 	.word	0x40001800
 80054bc:	40001c00 	.word	0x40001c00
 80054c0:	40002000 	.word	0x40002000

080054c4 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80054c4:	b480      	push	{r7}
 80054c6:	b087      	sub	sp, #28
 80054c8:	af00      	add	r7, sp, #0
 80054ca:	60f8      	str	r0, [r7, #12]
 80054cc:	60b9      	str	r1, [r7, #8]
 80054ce:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 80054d0:	68fb      	ldr	r3, [r7, #12]
 80054d2:	6a1b      	ldr	r3, [r3, #32]
 80054d4:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80054d6:	68fb      	ldr	r3, [r7, #12]
 80054d8:	6a1b      	ldr	r3, [r3, #32]
 80054da:	f023 0201 	bic.w	r2, r3, #1
 80054de:	68fb      	ldr	r3, [r7, #12]
 80054e0:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80054e2:	68fb      	ldr	r3, [r7, #12]
 80054e4:	699b      	ldr	r3, [r3, #24]
 80054e6:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 80054e8:	693b      	ldr	r3, [r7, #16]
 80054ea:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 80054ee:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 80054f0:	687b      	ldr	r3, [r7, #4]
 80054f2:	011b      	lsls	r3, r3, #4
 80054f4:	693a      	ldr	r2, [r7, #16]
 80054f6:	4313      	orrs	r3, r2
 80054f8:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 80054fa:	697b      	ldr	r3, [r7, #20]
 80054fc:	f023 030a 	bic.w	r3, r3, #10
 8005500:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8005502:	697a      	ldr	r2, [r7, #20]
 8005504:	68bb      	ldr	r3, [r7, #8]
 8005506:	4313      	orrs	r3, r2
 8005508:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 800550a:	68fb      	ldr	r3, [r7, #12]
 800550c:	693a      	ldr	r2, [r7, #16]
 800550e:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8005510:	68fb      	ldr	r3, [r7, #12]
 8005512:	697a      	ldr	r2, [r7, #20]
 8005514:	621a      	str	r2, [r3, #32]
}
 8005516:	bf00      	nop
 8005518:	371c      	adds	r7, #28
 800551a:	46bd      	mov	sp, r7
 800551c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005520:	4770      	bx	lr

08005522 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8005522:	b480      	push	{r7}
 8005524:	b087      	sub	sp, #28
 8005526:	af00      	add	r7, sp, #0
 8005528:	60f8      	str	r0, [r7, #12]
 800552a:	60b9      	str	r1, [r7, #8]
 800552c:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 800552e:	68fb      	ldr	r3, [r7, #12]
 8005530:	6a1b      	ldr	r3, [r3, #32]
 8005532:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8005534:	68fb      	ldr	r3, [r7, #12]
 8005536:	6a1b      	ldr	r3, [r3, #32]
 8005538:	f023 0210 	bic.w	r2, r3, #16
 800553c:	68fb      	ldr	r3, [r7, #12]
 800553e:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8005540:	68fb      	ldr	r3, [r7, #12]
 8005542:	699b      	ldr	r3, [r3, #24]
 8005544:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8005546:	693b      	ldr	r3, [r7, #16]
 8005548:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 800554c:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 800554e:	687b      	ldr	r3, [r7, #4]
 8005550:	031b      	lsls	r3, r3, #12
 8005552:	693a      	ldr	r2, [r7, #16]
 8005554:	4313      	orrs	r3, r2
 8005556:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8005558:	697b      	ldr	r3, [r7, #20]
 800555a:	f023 03a0 	bic.w	r3, r3, #160	@ 0xa0
 800555e:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 8005560:	68bb      	ldr	r3, [r7, #8]
 8005562:	011b      	lsls	r3, r3, #4
 8005564:	697a      	ldr	r2, [r7, #20]
 8005566:	4313      	orrs	r3, r2
 8005568:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 800556a:	68fb      	ldr	r3, [r7, #12]
 800556c:	693a      	ldr	r2, [r7, #16]
 800556e:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8005570:	68fb      	ldr	r3, [r7, #12]
 8005572:	697a      	ldr	r2, [r7, #20]
 8005574:	621a      	str	r2, [r3, #32]
}
 8005576:	bf00      	nop
 8005578:	371c      	adds	r7, #28
 800557a:	46bd      	mov	sp, r7
 800557c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005580:	4770      	bx	lr

08005582 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8005582:	b480      	push	{r7}
 8005584:	b085      	sub	sp, #20
 8005586:	af00      	add	r7, sp, #0
 8005588:	6078      	str	r0, [r7, #4]
 800558a:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 800558c:	687b      	ldr	r3, [r7, #4]
 800558e:	689b      	ldr	r3, [r3, #8]
 8005590:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8005592:	68fb      	ldr	r3, [r7, #12]
 8005594:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8005598:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 800559a:	683a      	ldr	r2, [r7, #0]
 800559c:	68fb      	ldr	r3, [r7, #12]
 800559e:	4313      	orrs	r3, r2
 80055a0:	f043 0307 	orr.w	r3, r3, #7
 80055a4:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80055a6:	687b      	ldr	r3, [r7, #4]
 80055a8:	68fa      	ldr	r2, [r7, #12]
 80055aa:	609a      	str	r2, [r3, #8]
}
 80055ac:	bf00      	nop
 80055ae:	3714      	adds	r7, #20
 80055b0:	46bd      	mov	sp, r7
 80055b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80055b6:	4770      	bx	lr

080055b8 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 80055b8:	b480      	push	{r7}
 80055ba:	b087      	sub	sp, #28
 80055bc:	af00      	add	r7, sp, #0
 80055be:	60f8      	str	r0, [r7, #12]
 80055c0:	60b9      	str	r1, [r7, #8]
 80055c2:	607a      	str	r2, [r7, #4]
 80055c4:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 80055c6:	68fb      	ldr	r3, [r7, #12]
 80055c8:	689b      	ldr	r3, [r3, #8]
 80055ca:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80055cc:	697b      	ldr	r3, [r7, #20]
 80055ce:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 80055d2:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 80055d4:	683b      	ldr	r3, [r7, #0]
 80055d6:	021a      	lsls	r2, r3, #8
 80055d8:	687b      	ldr	r3, [r7, #4]
 80055da:	431a      	orrs	r2, r3
 80055dc:	68bb      	ldr	r3, [r7, #8]
 80055de:	4313      	orrs	r3, r2
 80055e0:	697a      	ldr	r2, [r7, #20]
 80055e2:	4313      	orrs	r3, r2
 80055e4:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80055e6:	68fb      	ldr	r3, [r7, #12]
 80055e8:	697a      	ldr	r2, [r7, #20]
 80055ea:	609a      	str	r2, [r3, #8]
}
 80055ec:	bf00      	nop
 80055ee:	371c      	adds	r7, #28
 80055f0:	46bd      	mov	sp, r7
 80055f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80055f6:	4770      	bx	lr

080055f8 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 80055f8:	b480      	push	{r7}
 80055fa:	b085      	sub	sp, #20
 80055fc:	af00      	add	r7, sp, #0
 80055fe:	6078      	str	r0, [r7, #4]
 8005600:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8005602:	687b      	ldr	r3, [r7, #4]
 8005604:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8005608:	2b01      	cmp	r3, #1
 800560a:	d101      	bne.n	8005610 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 800560c:	2302      	movs	r3, #2
 800560e:	e06d      	b.n	80056ec <HAL_TIMEx_MasterConfigSynchronization+0xf4>
 8005610:	687b      	ldr	r3, [r7, #4]
 8005612:	2201      	movs	r2, #1
 8005614:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005618:	687b      	ldr	r3, [r7, #4]
 800561a:	2202      	movs	r2, #2
 800561c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8005620:	687b      	ldr	r3, [r7, #4]
 8005622:	681b      	ldr	r3, [r3, #0]
 8005624:	685b      	ldr	r3, [r3, #4]
 8005626:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8005628:	687b      	ldr	r3, [r7, #4]
 800562a:	681b      	ldr	r3, [r3, #0]
 800562c:	689b      	ldr	r3, [r3, #8]
 800562e:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 8005630:	687b      	ldr	r3, [r7, #4]
 8005632:	681b      	ldr	r3, [r3, #0]
 8005634:	4a30      	ldr	r2, [pc, #192]	@ (80056f8 <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 8005636:	4293      	cmp	r3, r2
 8005638:	d004      	beq.n	8005644 <HAL_TIMEx_MasterConfigSynchronization+0x4c>
 800563a:	687b      	ldr	r3, [r7, #4]
 800563c:	681b      	ldr	r3, [r3, #0]
 800563e:	4a2f      	ldr	r2, [pc, #188]	@ (80056fc <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 8005640:	4293      	cmp	r3, r2
 8005642:	d108      	bne.n	8005656 <HAL_TIMEx_MasterConfigSynchronization+0x5e>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 8005644:	68fb      	ldr	r3, [r7, #12]
 8005646:	f423 0370 	bic.w	r3, r3, #15728640	@ 0xf00000
 800564a:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 800564c:	683b      	ldr	r3, [r7, #0]
 800564e:	685b      	ldr	r3, [r3, #4]
 8005650:	68fa      	ldr	r2, [r7, #12]
 8005652:	4313      	orrs	r3, r2
 8005654:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8005656:	68fb      	ldr	r3, [r7, #12]
 8005658:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800565c:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 800565e:	683b      	ldr	r3, [r7, #0]
 8005660:	681b      	ldr	r3, [r3, #0]
 8005662:	68fa      	ldr	r2, [r7, #12]
 8005664:	4313      	orrs	r3, r2
 8005666:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8005668:	687b      	ldr	r3, [r7, #4]
 800566a:	681b      	ldr	r3, [r3, #0]
 800566c:	68fa      	ldr	r2, [r7, #12]
 800566e:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8005670:	687b      	ldr	r3, [r7, #4]
 8005672:	681b      	ldr	r3, [r3, #0]
 8005674:	4a20      	ldr	r2, [pc, #128]	@ (80056f8 <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 8005676:	4293      	cmp	r3, r2
 8005678:	d022      	beq.n	80056c0 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800567a:	687b      	ldr	r3, [r7, #4]
 800567c:	681b      	ldr	r3, [r3, #0]
 800567e:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8005682:	d01d      	beq.n	80056c0 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8005684:	687b      	ldr	r3, [r7, #4]
 8005686:	681b      	ldr	r3, [r3, #0]
 8005688:	4a1d      	ldr	r2, [pc, #116]	@ (8005700 <HAL_TIMEx_MasterConfigSynchronization+0x108>)
 800568a:	4293      	cmp	r3, r2
 800568c:	d018      	beq.n	80056c0 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800568e:	687b      	ldr	r3, [r7, #4]
 8005690:	681b      	ldr	r3, [r3, #0]
 8005692:	4a1c      	ldr	r2, [pc, #112]	@ (8005704 <HAL_TIMEx_MasterConfigSynchronization+0x10c>)
 8005694:	4293      	cmp	r3, r2
 8005696:	d013      	beq.n	80056c0 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8005698:	687b      	ldr	r3, [r7, #4]
 800569a:	681b      	ldr	r3, [r3, #0]
 800569c:	4a1a      	ldr	r2, [pc, #104]	@ (8005708 <HAL_TIMEx_MasterConfigSynchronization+0x110>)
 800569e:	4293      	cmp	r3, r2
 80056a0:	d00e      	beq.n	80056c0 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 80056a2:	687b      	ldr	r3, [r7, #4]
 80056a4:	681b      	ldr	r3, [r3, #0]
 80056a6:	4a15      	ldr	r2, [pc, #84]	@ (80056fc <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 80056a8:	4293      	cmp	r3, r2
 80056aa:	d009      	beq.n	80056c0 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 80056ac:	687b      	ldr	r3, [r7, #4]
 80056ae:	681b      	ldr	r3, [r3, #0]
 80056b0:	4a16      	ldr	r2, [pc, #88]	@ (800570c <HAL_TIMEx_MasterConfigSynchronization+0x114>)
 80056b2:	4293      	cmp	r3, r2
 80056b4:	d004      	beq.n	80056c0 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 80056b6:	687b      	ldr	r3, [r7, #4]
 80056b8:	681b      	ldr	r3, [r3, #0]
 80056ba:	4a15      	ldr	r2, [pc, #84]	@ (8005710 <HAL_TIMEx_MasterConfigSynchronization+0x118>)
 80056bc:	4293      	cmp	r3, r2
 80056be:	d10c      	bne.n	80056da <HAL_TIMEx_MasterConfigSynchronization+0xe2>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 80056c0:	68bb      	ldr	r3, [r7, #8]
 80056c2:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 80056c6:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 80056c8:	683b      	ldr	r3, [r7, #0]
 80056ca:	689b      	ldr	r3, [r3, #8]
 80056cc:	68ba      	ldr	r2, [r7, #8]
 80056ce:	4313      	orrs	r3, r2
 80056d0:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 80056d2:	687b      	ldr	r3, [r7, #4]
 80056d4:	681b      	ldr	r3, [r3, #0]
 80056d6:	68ba      	ldr	r2, [r7, #8]
 80056d8:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 80056da:	687b      	ldr	r3, [r7, #4]
 80056dc:	2201      	movs	r2, #1
 80056de:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 80056e2:	687b      	ldr	r3, [r7, #4]
 80056e4:	2200      	movs	r2, #0
 80056e6:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 80056ea:	2300      	movs	r3, #0
}
 80056ec:	4618      	mov	r0, r3
 80056ee:	3714      	adds	r7, #20
 80056f0:	46bd      	mov	sp, r7
 80056f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80056f6:	4770      	bx	lr
 80056f8:	40010000 	.word	0x40010000
 80056fc:	40010400 	.word	0x40010400
 8005700:	40000400 	.word	0x40000400
 8005704:	40000800 	.word	0x40000800
 8005708:	40000c00 	.word	0x40000c00
 800570c:	40014000 	.word	0x40014000
 8005710:	40001800 	.word	0x40001800

08005714 <HAL_TIMEx_CommutCallback>:
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8005714:	b480      	push	{r7}
 8005716:	b083      	sub	sp, #12
 8005718:	af00      	add	r7, sp, #0
 800571a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 800571c:	bf00      	nop
 800571e:	370c      	adds	r7, #12
 8005720:	46bd      	mov	sp, r7
 8005722:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005726:	4770      	bx	lr

08005728 <HAL_TIMEx_BreakCallback>:
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8005728:	b480      	push	{r7}
 800572a:	b083      	sub	sp, #12
 800572c:	af00      	add	r7, sp, #0
 800572e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8005730:	bf00      	nop
 8005732:	370c      	adds	r7, #12
 8005734:	46bd      	mov	sp, r7
 8005736:	f85d 7b04 	ldr.w	r7, [sp], #4
 800573a:	4770      	bx	lr

0800573c <HAL_TIMEx_Break2Callback>:
  * @brief  Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 800573c:	b480      	push	{r7}
 800573e:	b083      	sub	sp, #12
 8005740:	af00      	add	r7, sp, #0
 8005742:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 8005744:	bf00      	nop
 8005746:	370c      	adds	r7, #12
 8005748:	46bd      	mov	sp, r7
 800574a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800574e:	4770      	bx	lr

08005750 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8005750:	b580      	push	{r7, lr}
 8005752:	b082      	sub	sp, #8
 8005754:	af00      	add	r7, sp, #0
 8005756:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8005758:	687b      	ldr	r3, [r7, #4]
 800575a:	2b00      	cmp	r3, #0
 800575c:	d101      	bne.n	8005762 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800575e:	2301      	movs	r3, #1
 8005760:	e040      	b.n	80057e4 <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8005762:	687b      	ldr	r3, [r7, #4]
 8005764:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8005766:	2b00      	cmp	r3, #0
 8005768:	d106      	bne.n	8005778 <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800576a:	687b      	ldr	r3, [r7, #4]
 800576c:	2200      	movs	r2, #0
 800576e:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8005772:	6878      	ldr	r0, [r7, #4]
 8005774:	f7fc f94e 	bl	8001a14 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8005778:	687b      	ldr	r3, [r7, #4]
 800577a:	2224      	movs	r2, #36	@ 0x24
 800577c:	67da      	str	r2, [r3, #124]	@ 0x7c

  __HAL_UART_DISABLE(huart);
 800577e:	687b      	ldr	r3, [r7, #4]
 8005780:	681b      	ldr	r3, [r3, #0]
 8005782:	681a      	ldr	r2, [r3, #0]
 8005784:	687b      	ldr	r3, [r7, #4]
 8005786:	681b      	ldr	r3, [r3, #0]
 8005788:	f022 0201 	bic.w	r2, r2, #1
 800578c:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 800578e:	687b      	ldr	r3, [r7, #4]
 8005790:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005792:	2b00      	cmp	r3, #0
 8005794:	d002      	beq.n	800579c <HAL_UART_Init+0x4c>
  {
    UART_AdvFeatureConfig(huart);
 8005796:	6878      	ldr	r0, [r7, #4]
 8005798:	f000 fe6c 	bl	8006474 <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 800579c:	6878      	ldr	r0, [r7, #4]
 800579e:	f000 fc05 	bl	8005fac <UART_SetConfig>
 80057a2:	4603      	mov	r3, r0
 80057a4:	2b01      	cmp	r3, #1
 80057a6:	d101      	bne.n	80057ac <HAL_UART_Init+0x5c>
  {
    return HAL_ERROR;
 80057a8:	2301      	movs	r3, #1
 80057aa:	e01b      	b.n	80057e4 <HAL_UART_Init+0x94>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80057ac:	687b      	ldr	r3, [r7, #4]
 80057ae:	681b      	ldr	r3, [r3, #0]
 80057b0:	685a      	ldr	r2, [r3, #4]
 80057b2:	687b      	ldr	r3, [r7, #4]
 80057b4:	681b      	ldr	r3, [r3, #0]
 80057b6:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 80057ba:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80057bc:	687b      	ldr	r3, [r7, #4]
 80057be:	681b      	ldr	r3, [r3, #0]
 80057c0:	689a      	ldr	r2, [r3, #8]
 80057c2:	687b      	ldr	r3, [r7, #4]
 80057c4:	681b      	ldr	r3, [r3, #0]
 80057c6:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 80057ca:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 80057cc:	687b      	ldr	r3, [r7, #4]
 80057ce:	681b      	ldr	r3, [r3, #0]
 80057d0:	681a      	ldr	r2, [r3, #0]
 80057d2:	687b      	ldr	r3, [r7, #4]
 80057d4:	681b      	ldr	r3, [r3, #0]
 80057d6:	f042 0201 	orr.w	r2, r2, #1
 80057da:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 80057dc:	6878      	ldr	r0, [r7, #4]
 80057de:	f000 feeb 	bl	80065b8 <UART_CheckIdleState>
 80057e2:	4603      	mov	r3, r0
}
 80057e4:	4618      	mov	r0, r3
 80057e6:	3708      	adds	r7, #8
 80057e8:	46bd      	mov	sp, r7
 80057ea:	bd80      	pop	{r7, pc}

080057ec <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80057ec:	b580      	push	{r7, lr}
 80057ee:	b08a      	sub	sp, #40	@ 0x28
 80057f0:	af02      	add	r7, sp, #8
 80057f2:	60f8      	str	r0, [r7, #12]
 80057f4:	60b9      	str	r1, [r7, #8]
 80057f6:	603b      	str	r3, [r7, #0]
 80057f8:	4613      	mov	r3, r2
 80057fa:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 80057fc:	68fb      	ldr	r3, [r7, #12]
 80057fe:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8005800:	2b20      	cmp	r3, #32
 8005802:	d177      	bne.n	80058f4 <HAL_UART_Transmit+0x108>
  {
    if ((pData == NULL) || (Size == 0U))
 8005804:	68bb      	ldr	r3, [r7, #8]
 8005806:	2b00      	cmp	r3, #0
 8005808:	d002      	beq.n	8005810 <HAL_UART_Transmit+0x24>
 800580a:	88fb      	ldrh	r3, [r7, #6]
 800580c:	2b00      	cmp	r3, #0
 800580e:	d101      	bne.n	8005814 <HAL_UART_Transmit+0x28>
    {
      return  HAL_ERROR;
 8005810:	2301      	movs	r3, #1
 8005812:	e070      	b.n	80058f6 <HAL_UART_Transmit+0x10a>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005814:	68fb      	ldr	r3, [r7, #12]
 8005816:	2200      	movs	r2, #0
 8005818:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
    huart->gState = HAL_UART_STATE_BUSY_TX;
 800581c:	68fb      	ldr	r3, [r7, #12]
 800581e:	2221      	movs	r2, #33	@ 0x21
 8005820:	67da      	str	r2, [r3, #124]	@ 0x7c

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8005822:	f7fc fb37 	bl	8001e94 <HAL_GetTick>
 8005826:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 8005828:	68fb      	ldr	r3, [r7, #12]
 800582a:	88fa      	ldrh	r2, [r7, #6]
 800582c:	f8a3 2050 	strh.w	r2, [r3, #80]	@ 0x50
    huart->TxXferCount = Size;
 8005830:	68fb      	ldr	r3, [r7, #12]
 8005832:	88fa      	ldrh	r2, [r7, #6]
 8005834:	f8a3 2052 	strh.w	r2, [r3, #82]	@ 0x52

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8005838:	68fb      	ldr	r3, [r7, #12]
 800583a:	689b      	ldr	r3, [r3, #8]
 800583c:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8005840:	d108      	bne.n	8005854 <HAL_UART_Transmit+0x68>
 8005842:	68fb      	ldr	r3, [r7, #12]
 8005844:	691b      	ldr	r3, [r3, #16]
 8005846:	2b00      	cmp	r3, #0
 8005848:	d104      	bne.n	8005854 <HAL_UART_Transmit+0x68>
    {
      pdata8bits  = NULL;
 800584a:	2300      	movs	r3, #0
 800584c:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 800584e:	68bb      	ldr	r3, [r7, #8]
 8005850:	61bb      	str	r3, [r7, #24]
 8005852:	e003      	b.n	800585c <HAL_UART_Transmit+0x70>
    }
    else
    {
      pdata8bits  = pData;
 8005854:	68bb      	ldr	r3, [r7, #8]
 8005856:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8005858:	2300      	movs	r3, #0
 800585a:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 800585c:	e02f      	b.n	80058be <HAL_UART_Transmit+0xd2>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 800585e:	683b      	ldr	r3, [r7, #0]
 8005860:	9300      	str	r3, [sp, #0]
 8005862:	697b      	ldr	r3, [r7, #20]
 8005864:	2200      	movs	r2, #0
 8005866:	2180      	movs	r1, #128	@ 0x80
 8005868:	68f8      	ldr	r0, [r7, #12]
 800586a:	f000 ff4d 	bl	8006708 <UART_WaitOnFlagUntilTimeout>
 800586e:	4603      	mov	r3, r0
 8005870:	2b00      	cmp	r3, #0
 8005872:	d004      	beq.n	800587e <HAL_UART_Transmit+0x92>
      {

        huart->gState = HAL_UART_STATE_READY;
 8005874:	68fb      	ldr	r3, [r7, #12]
 8005876:	2220      	movs	r2, #32
 8005878:	67da      	str	r2, [r3, #124]	@ 0x7c

        return HAL_TIMEOUT;
 800587a:	2303      	movs	r3, #3
 800587c:	e03b      	b.n	80058f6 <HAL_UART_Transmit+0x10a>
      }
      if (pdata8bits == NULL)
 800587e:	69fb      	ldr	r3, [r7, #28]
 8005880:	2b00      	cmp	r3, #0
 8005882:	d10b      	bne.n	800589c <HAL_UART_Transmit+0xb0>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 8005884:	69bb      	ldr	r3, [r7, #24]
 8005886:	881b      	ldrh	r3, [r3, #0]
 8005888:	461a      	mov	r2, r3
 800588a:	68fb      	ldr	r3, [r7, #12]
 800588c:	681b      	ldr	r3, [r3, #0]
 800588e:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8005892:	629a      	str	r2, [r3, #40]	@ 0x28
        pdata16bits++;
 8005894:	69bb      	ldr	r3, [r7, #24]
 8005896:	3302      	adds	r3, #2
 8005898:	61bb      	str	r3, [r7, #24]
 800589a:	e007      	b.n	80058ac <HAL_UART_Transmit+0xc0>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 800589c:	69fb      	ldr	r3, [r7, #28]
 800589e:	781a      	ldrb	r2, [r3, #0]
 80058a0:	68fb      	ldr	r3, [r7, #12]
 80058a2:	681b      	ldr	r3, [r3, #0]
 80058a4:	629a      	str	r2, [r3, #40]	@ 0x28
        pdata8bits++;
 80058a6:	69fb      	ldr	r3, [r7, #28]
 80058a8:	3301      	adds	r3, #1
 80058aa:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 80058ac:	68fb      	ldr	r3, [r7, #12]
 80058ae:	f8b3 3052 	ldrh.w	r3, [r3, #82]	@ 0x52
 80058b2:	b29b      	uxth	r3, r3
 80058b4:	3b01      	subs	r3, #1
 80058b6:	b29a      	uxth	r2, r3
 80058b8:	68fb      	ldr	r3, [r7, #12]
 80058ba:	f8a3 2052 	strh.w	r2, [r3, #82]	@ 0x52
    while (huart->TxXferCount > 0U)
 80058be:	68fb      	ldr	r3, [r7, #12]
 80058c0:	f8b3 3052 	ldrh.w	r3, [r3, #82]	@ 0x52
 80058c4:	b29b      	uxth	r3, r3
 80058c6:	2b00      	cmp	r3, #0
 80058c8:	d1c9      	bne.n	800585e <HAL_UART_Transmit+0x72>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 80058ca:	683b      	ldr	r3, [r7, #0]
 80058cc:	9300      	str	r3, [sp, #0]
 80058ce:	697b      	ldr	r3, [r7, #20]
 80058d0:	2200      	movs	r2, #0
 80058d2:	2140      	movs	r1, #64	@ 0x40
 80058d4:	68f8      	ldr	r0, [r7, #12]
 80058d6:	f000 ff17 	bl	8006708 <UART_WaitOnFlagUntilTimeout>
 80058da:	4603      	mov	r3, r0
 80058dc:	2b00      	cmp	r3, #0
 80058de:	d004      	beq.n	80058ea <HAL_UART_Transmit+0xfe>
    {
      huart->gState = HAL_UART_STATE_READY;
 80058e0:	68fb      	ldr	r3, [r7, #12]
 80058e2:	2220      	movs	r2, #32
 80058e4:	67da      	str	r2, [r3, #124]	@ 0x7c

      return HAL_TIMEOUT;
 80058e6:	2303      	movs	r3, #3
 80058e8:	e005      	b.n	80058f6 <HAL_UART_Transmit+0x10a>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 80058ea:	68fb      	ldr	r3, [r7, #12]
 80058ec:	2220      	movs	r2, #32
 80058ee:	67da      	str	r2, [r3, #124]	@ 0x7c

    return HAL_OK;
 80058f0:	2300      	movs	r3, #0
 80058f2:	e000      	b.n	80058f6 <HAL_UART_Transmit+0x10a>
  }
  else
  {
    return HAL_BUSY;
 80058f4:	2302      	movs	r3, #2
  }
}
 80058f6:	4618      	mov	r0, r3
 80058f8:	3720      	adds	r7, #32
 80058fa:	46bd      	mov	sp, r7
 80058fc:	bd80      	pop	{r7, pc}

080058fe <HAL_UART_Receive_IT>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 80058fe:	b580      	push	{r7, lr}
 8005900:	b08a      	sub	sp, #40	@ 0x28
 8005902:	af00      	add	r7, sp, #0
 8005904:	60f8      	str	r0, [r7, #12]
 8005906:	60b9      	str	r1, [r7, #8]
 8005908:	4613      	mov	r3, r2
 800590a:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 800590c:	68fb      	ldr	r3, [r7, #12]
 800590e:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8005912:	2b20      	cmp	r3, #32
 8005914:	d132      	bne.n	800597c <HAL_UART_Receive_IT+0x7e>
  {
    if ((pData == NULL) || (Size == 0U))
 8005916:	68bb      	ldr	r3, [r7, #8]
 8005918:	2b00      	cmp	r3, #0
 800591a:	d002      	beq.n	8005922 <HAL_UART_Receive_IT+0x24>
 800591c:	88fb      	ldrh	r3, [r7, #6]
 800591e:	2b00      	cmp	r3, #0
 8005920:	d101      	bne.n	8005926 <HAL_UART_Receive_IT+0x28>
    {
      return HAL_ERROR;
 8005922:	2301      	movs	r3, #1
 8005924:	e02b      	b.n	800597e <HAL_UART_Receive_IT+0x80>
    }

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005926:	68fb      	ldr	r3, [r7, #12]
 8005928:	2200      	movs	r2, #0
 800592a:	661a      	str	r2, [r3, #96]	@ 0x60

    /* Check that USART RTOEN bit is set */
    if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 800592c:	68fb      	ldr	r3, [r7, #12]
 800592e:	681b      	ldr	r3, [r3, #0]
 8005930:	685b      	ldr	r3, [r3, #4]
 8005932:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8005936:	2b00      	cmp	r3, #0
 8005938:	d018      	beq.n	800596c <HAL_UART_Receive_IT+0x6e>
    {
      /* Enable the UART Receiver Timeout Interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 800593a:	68fb      	ldr	r3, [r7, #12]
 800593c:	681b      	ldr	r3, [r3, #0]
 800593e:	617b      	str	r3, [r7, #20]
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005940:	697b      	ldr	r3, [r7, #20]
 8005942:	e853 3f00 	ldrex	r3, [r3]
 8005946:	613b      	str	r3, [r7, #16]
   return(result);
 8005948:	693b      	ldr	r3, [r7, #16]
 800594a:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 800594e:	627b      	str	r3, [r7, #36]	@ 0x24
 8005950:	68fb      	ldr	r3, [r7, #12]
 8005952:	681b      	ldr	r3, [r3, #0]
 8005954:	461a      	mov	r2, r3
 8005956:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005958:	623b      	str	r3, [r7, #32]
 800595a:	61fa      	str	r2, [r7, #28]
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800595c:	69f9      	ldr	r1, [r7, #28]
 800595e:	6a3a      	ldr	r2, [r7, #32]
 8005960:	e841 2300 	strex	r3, r2, [r1]
 8005964:	61bb      	str	r3, [r7, #24]
   return(result);
 8005966:	69bb      	ldr	r3, [r7, #24]
 8005968:	2b00      	cmp	r3, #0
 800596a:	d1e6      	bne.n	800593a <HAL_UART_Receive_IT+0x3c>
    }

    return (UART_Start_Receive_IT(huart, pData, Size));
 800596c:	88fb      	ldrh	r3, [r7, #6]
 800596e:	461a      	mov	r2, r3
 8005970:	68b9      	ldr	r1, [r7, #8]
 8005972:	68f8      	ldr	r0, [r7, #12]
 8005974:	f000 ff36 	bl	80067e4 <UART_Start_Receive_IT>
 8005978:	4603      	mov	r3, r0
 800597a:	e000      	b.n	800597e <HAL_UART_Receive_IT+0x80>
  }
  else
  {
    return HAL_BUSY;
 800597c:	2302      	movs	r3, #2
  }
}
 800597e:	4618      	mov	r0, r3
 8005980:	3728      	adds	r7, #40	@ 0x28
 8005982:	46bd      	mov	sp, r7
 8005984:	bd80      	pop	{r7, pc}
	...

08005988 <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8005988:	b580      	push	{r7, lr}
 800598a:	b0ba      	sub	sp, #232	@ 0xe8
 800598c:	af00      	add	r7, sp, #0
 800598e:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 8005990:	687b      	ldr	r3, [r7, #4]
 8005992:	681b      	ldr	r3, [r3, #0]
 8005994:	69db      	ldr	r3, [r3, #28]
 8005996:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 800599a:	687b      	ldr	r3, [r7, #4]
 800599c:	681b      	ldr	r3, [r3, #0]
 800599e:	681b      	ldr	r3, [r3, #0]
 80059a0:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 80059a4:	687b      	ldr	r3, [r7, #4]
 80059a6:	681b      	ldr	r3, [r3, #0]
 80059a8:	689b      	ldr	r3, [r3, #8]
 80059aa:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 80059ae:	f8d7 20e4 	ldr.w	r2, [r7, #228]	@ 0xe4
 80059b2:	f640 030f 	movw	r3, #2063	@ 0x80f
 80059b6:	4013      	ands	r3, r2
 80059b8:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  if (errorflags == 0U)
 80059bc:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 80059c0:	2b00      	cmp	r3, #0
 80059c2:	d115      	bne.n	80059f0 <HAL_UART_IRQHandler+0x68>
  {
    /* UART in mode Receiver ---------------------------------------------------*/
    if (((isrflags & USART_ISR_RXNE) != 0U)
 80059c4:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80059c8:	f003 0320 	and.w	r3, r3, #32
 80059cc:	2b00      	cmp	r3, #0
 80059ce:	d00f      	beq.n	80059f0 <HAL_UART_IRQHandler+0x68>
        && ((cr1its & USART_CR1_RXNEIE) != 0U))
 80059d0:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80059d4:	f003 0320 	and.w	r3, r3, #32
 80059d8:	2b00      	cmp	r3, #0
 80059da:	d009      	beq.n	80059f0 <HAL_UART_IRQHandler+0x68>
    {
      if (huart->RxISR != NULL)
 80059dc:	687b      	ldr	r3, [r7, #4]
 80059de:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 80059e0:	2b00      	cmp	r3, #0
 80059e2:	f000 82ac 	beq.w	8005f3e <HAL_UART_IRQHandler+0x5b6>
      {
        huart->RxISR(huart);
 80059e6:	687b      	ldr	r3, [r7, #4]
 80059e8:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 80059ea:	6878      	ldr	r0, [r7, #4]
 80059ec:	4798      	blx	r3
      }
      return;
 80059ee:	e2a6      	b.n	8005f3e <HAL_UART_IRQHandler+0x5b6>
    }
  }

  /* If some errors occur */
  if ((errorflags != 0U)
 80059f0:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 80059f4:	2b00      	cmp	r3, #0
 80059f6:	f000 8117 	beq.w	8005c28 <HAL_UART_IRQHandler+0x2a0>
      && (((cr3its & USART_CR3_EIE) != 0U)
 80059fa:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 80059fe:	f003 0301 	and.w	r3, r3, #1
 8005a02:	2b00      	cmp	r3, #0
 8005a04:	d106      	bne.n	8005a14 <HAL_UART_IRQHandler+0x8c>
          || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U)))
 8005a06:	f8d7 20e0 	ldr.w	r2, [r7, #224]	@ 0xe0
 8005a0a:	4b85      	ldr	r3, [pc, #532]	@ (8005c20 <HAL_UART_IRQHandler+0x298>)
 8005a0c:	4013      	ands	r3, r2
 8005a0e:	2b00      	cmp	r3, #0
 8005a10:	f000 810a 	beq.w	8005c28 <HAL_UART_IRQHandler+0x2a0>
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 8005a14:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8005a18:	f003 0301 	and.w	r3, r3, #1
 8005a1c:	2b00      	cmp	r3, #0
 8005a1e:	d011      	beq.n	8005a44 <HAL_UART_IRQHandler+0xbc>
 8005a20:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8005a24:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8005a28:	2b00      	cmp	r3, #0
 8005a2a:	d00b      	beq.n	8005a44 <HAL_UART_IRQHandler+0xbc>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 8005a2c:	687b      	ldr	r3, [r7, #4]
 8005a2e:	681b      	ldr	r3, [r3, #0]
 8005a30:	2201      	movs	r2, #1
 8005a32:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8005a34:	687b      	ldr	r3, [r7, #4]
 8005a36:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8005a3a:	f043 0201 	orr.w	r2, r3, #1
 8005a3e:	687b      	ldr	r3, [r7, #4]
 8005a40:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8005a44:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8005a48:	f003 0302 	and.w	r3, r3, #2
 8005a4c:	2b00      	cmp	r3, #0
 8005a4e:	d011      	beq.n	8005a74 <HAL_UART_IRQHandler+0xec>
 8005a50:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8005a54:	f003 0301 	and.w	r3, r3, #1
 8005a58:	2b00      	cmp	r3, #0
 8005a5a:	d00b      	beq.n	8005a74 <HAL_UART_IRQHandler+0xec>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 8005a5c:	687b      	ldr	r3, [r7, #4]
 8005a5e:	681b      	ldr	r3, [r3, #0]
 8005a60:	2202      	movs	r2, #2
 8005a62:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8005a64:	687b      	ldr	r3, [r7, #4]
 8005a66:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8005a6a:	f043 0204 	orr.w	r2, r3, #4
 8005a6e:	687b      	ldr	r3, [r7, #4]
 8005a70:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8005a74:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8005a78:	f003 0304 	and.w	r3, r3, #4
 8005a7c:	2b00      	cmp	r3, #0
 8005a7e:	d011      	beq.n	8005aa4 <HAL_UART_IRQHandler+0x11c>
 8005a80:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8005a84:	f003 0301 	and.w	r3, r3, #1
 8005a88:	2b00      	cmp	r3, #0
 8005a8a:	d00b      	beq.n	8005aa4 <HAL_UART_IRQHandler+0x11c>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 8005a8c:	687b      	ldr	r3, [r7, #4]
 8005a8e:	681b      	ldr	r3, [r3, #0]
 8005a90:	2204      	movs	r2, #4
 8005a92:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8005a94:	687b      	ldr	r3, [r7, #4]
 8005a96:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8005a9a:	f043 0202 	orr.w	r2, r3, #2
 8005a9e:	687b      	ldr	r3, [r7, #4]
 8005aa0:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
    }

    /* UART Over-Run interrupt occurred -----------------------------------------*/
    if (((isrflags & USART_ISR_ORE) != 0U)
 8005aa4:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8005aa8:	f003 0308 	and.w	r3, r3, #8
 8005aac:	2b00      	cmp	r3, #0
 8005aae:	d017      	beq.n	8005ae0 <HAL_UART_IRQHandler+0x158>
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 8005ab0:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8005ab4:	f003 0320 	and.w	r3, r3, #32
 8005ab8:	2b00      	cmp	r3, #0
 8005aba:	d105      	bne.n	8005ac8 <HAL_UART_IRQHandler+0x140>
            ((cr3its & USART_CR3_EIE) != 0U)))
 8005abc:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8005ac0:	f003 0301 	and.w	r3, r3, #1
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 8005ac4:	2b00      	cmp	r3, #0
 8005ac6:	d00b      	beq.n	8005ae0 <HAL_UART_IRQHandler+0x158>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8005ac8:	687b      	ldr	r3, [r7, #4]
 8005aca:	681b      	ldr	r3, [r3, #0]
 8005acc:	2208      	movs	r2, #8
 8005ace:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8005ad0:	687b      	ldr	r3, [r7, #4]
 8005ad2:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8005ad6:	f043 0208 	orr.w	r2, r3, #8
 8005ada:	687b      	ldr	r3, [r7, #4]
 8005adc:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 8005ae0:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8005ae4:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8005ae8:	2b00      	cmp	r3, #0
 8005aea:	d012      	beq.n	8005b12 <HAL_UART_IRQHandler+0x18a>
 8005aec:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8005af0:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 8005af4:	2b00      	cmp	r3, #0
 8005af6:	d00c      	beq.n	8005b12 <HAL_UART_IRQHandler+0x18a>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8005af8:	687b      	ldr	r3, [r7, #4]
 8005afa:	681b      	ldr	r3, [r3, #0]
 8005afc:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 8005b00:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 8005b02:	687b      	ldr	r3, [r7, #4]
 8005b04:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8005b08:	f043 0220 	orr.w	r2, r3, #32
 8005b0c:	687b      	ldr	r3, [r7, #4]
 8005b0e:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8005b12:	687b      	ldr	r3, [r7, #4]
 8005b14:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8005b18:	2b00      	cmp	r3, #0
 8005b1a:	f000 8212 	beq.w	8005f42 <HAL_UART_IRQHandler+0x5ba>
    {
      /* UART in mode Receiver --------------------------------------------------*/
      if (((isrflags & USART_ISR_RXNE) != 0U)
 8005b1e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8005b22:	f003 0320 	and.w	r3, r3, #32
 8005b26:	2b00      	cmp	r3, #0
 8005b28:	d00d      	beq.n	8005b46 <HAL_UART_IRQHandler+0x1be>
          && ((cr1its & USART_CR1_RXNEIE) != 0U))
 8005b2a:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8005b2e:	f003 0320 	and.w	r3, r3, #32
 8005b32:	2b00      	cmp	r3, #0
 8005b34:	d007      	beq.n	8005b46 <HAL_UART_IRQHandler+0x1be>
      {
        if (huart->RxISR != NULL)
 8005b36:	687b      	ldr	r3, [r7, #4]
 8005b38:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8005b3a:	2b00      	cmp	r3, #0
 8005b3c:	d003      	beq.n	8005b46 <HAL_UART_IRQHandler+0x1be>
        {
          huart->RxISR(huart);
 8005b3e:	687b      	ldr	r3, [r7, #4]
 8005b40:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8005b42:	6878      	ldr	r0, [r7, #4]
 8005b44:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 8005b46:	687b      	ldr	r3, [r7, #4]
 8005b48:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8005b4c:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8005b50:	687b      	ldr	r3, [r7, #4]
 8005b52:	681b      	ldr	r3, [r3, #0]
 8005b54:	689b      	ldr	r3, [r3, #8]
 8005b56:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8005b5a:	2b40      	cmp	r3, #64	@ 0x40
 8005b5c:	d005      	beq.n	8005b6a <HAL_UART_IRQHandler+0x1e2>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 8005b5e:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8005b62:	f003 0328 	and.w	r3, r3, #40	@ 0x28
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8005b66:	2b00      	cmp	r3, #0
 8005b68:	d04f      	beq.n	8005c0a <HAL_UART_IRQHandler+0x282>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8005b6a:	6878      	ldr	r0, [r7, #4]
 8005b6c:	f000 ff00 	bl	8006970 <UART_EndRxTransfer>

        /* Abort the UART DMA Rx channel if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005b70:	687b      	ldr	r3, [r7, #4]
 8005b72:	681b      	ldr	r3, [r3, #0]
 8005b74:	689b      	ldr	r3, [r3, #8]
 8005b76:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8005b7a:	2b40      	cmp	r3, #64	@ 0x40
 8005b7c:	d141      	bne.n	8005c02 <HAL_UART_IRQHandler+0x27a>
        {
          /* Disable the UART DMA Rx request if enabled */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8005b7e:	687b      	ldr	r3, [r7, #4]
 8005b80:	681b      	ldr	r3, [r3, #0]
 8005b82:	3308      	adds	r3, #8
 8005b84:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005b88:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 8005b8c:	e853 3f00 	ldrex	r3, [r3]
 8005b90:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
   return(result);
 8005b94:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 8005b98:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8005b9c:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 8005ba0:	687b      	ldr	r3, [r7, #4]
 8005ba2:	681b      	ldr	r3, [r3, #0]
 8005ba4:	3308      	adds	r3, #8
 8005ba6:	f8d7 20d0 	ldr.w	r2, [r7, #208]	@ 0xd0
 8005baa:	f8c7 20a8 	str.w	r2, [r7, #168]	@ 0xa8
 8005bae:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005bb2:	f8d7 10a4 	ldr.w	r1, [r7, #164]	@ 0xa4
 8005bb6:	f8d7 20a8 	ldr.w	r2, [r7, #168]	@ 0xa8
 8005bba:	e841 2300 	strex	r3, r2, [r1]
 8005bbe:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
   return(result);
 8005bc2:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 8005bc6:	2b00      	cmp	r3, #0
 8005bc8:	d1d9      	bne.n	8005b7e <HAL_UART_IRQHandler+0x1f6>

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 8005bca:	687b      	ldr	r3, [r7, #4]
 8005bcc:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8005bce:	2b00      	cmp	r3, #0
 8005bd0:	d013      	beq.n	8005bfa <HAL_UART_IRQHandler+0x272>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8005bd2:	687b      	ldr	r3, [r7, #4]
 8005bd4:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8005bd6:	4a13      	ldr	r2, [pc, #76]	@ (8005c24 <HAL_UART_IRQHandler+0x29c>)
 8005bd8:	651a      	str	r2, [r3, #80]	@ 0x50

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8005bda:	687b      	ldr	r3, [r7, #4]
 8005bdc:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8005bde:	4618      	mov	r0, r3
 8005be0:	f7fc fc27 	bl	8002432 <HAL_DMA_Abort_IT>
 8005be4:	4603      	mov	r3, r0
 8005be6:	2b00      	cmp	r3, #0
 8005be8:	d017      	beq.n	8005c1a <HAL_UART_IRQHandler+0x292>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8005bea:	687b      	ldr	r3, [r7, #4]
 8005bec:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8005bee:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8005bf0:	687a      	ldr	r2, [r7, #4]
 8005bf2:	6f52      	ldr	r2, [r2, #116]	@ 0x74
 8005bf4:	4610      	mov	r0, r2
 8005bf6:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005bf8:	e00f      	b.n	8005c1a <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8005bfa:	6878      	ldr	r0, [r7, #4]
 8005bfc:	f000 f9b6 	bl	8005f6c <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005c00:	e00b      	b.n	8005c1a <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8005c02:	6878      	ldr	r0, [r7, #4]
 8005c04:	f000 f9b2 	bl	8005f6c <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005c08:	e007      	b.n	8005c1a <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8005c0a:	6878      	ldr	r0, [r7, #4]
 8005c0c:	f000 f9ae 	bl	8005f6c <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005c10:	687b      	ldr	r3, [r7, #4]
 8005c12:	2200      	movs	r2, #0
 8005c14:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
      }
    }
    return;
 8005c18:	e193      	b.n	8005f42 <HAL_UART_IRQHandler+0x5ba>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005c1a:	bf00      	nop
    return;
 8005c1c:	e191      	b.n	8005f42 <HAL_UART_IRQHandler+0x5ba>
 8005c1e:	bf00      	nop
 8005c20:	04000120 	.word	0x04000120
 8005c24:	08006a39 	.word	0x08006a39

  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8005c28:	687b      	ldr	r3, [r7, #4]
 8005c2a:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8005c2c:	2b01      	cmp	r3, #1
 8005c2e:	f040 814c 	bne.w	8005eca <HAL_UART_IRQHandler+0x542>
      && ((isrflags & USART_ISR_IDLE) != 0U)
 8005c32:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8005c36:	f003 0310 	and.w	r3, r3, #16
 8005c3a:	2b00      	cmp	r3, #0
 8005c3c:	f000 8145 	beq.w	8005eca <HAL_UART_IRQHandler+0x542>
      && ((cr1its & USART_ISR_IDLE) != 0U))
 8005c40:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8005c44:	f003 0310 	and.w	r3, r3, #16
 8005c48:	2b00      	cmp	r3, #0
 8005c4a:	f000 813e 	beq.w	8005eca <HAL_UART_IRQHandler+0x542>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8005c4e:	687b      	ldr	r3, [r7, #4]
 8005c50:	681b      	ldr	r3, [r3, #0]
 8005c52:	2210      	movs	r2, #16
 8005c54:	621a      	str	r2, [r3, #32]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005c56:	687b      	ldr	r3, [r7, #4]
 8005c58:	681b      	ldr	r3, [r3, #0]
 8005c5a:	689b      	ldr	r3, [r3, #8]
 8005c5c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8005c60:	2b40      	cmp	r3, #64	@ 0x40
 8005c62:	f040 80b6 	bne.w	8005dd2 <HAL_UART_IRQHandler+0x44a>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8005c66:	687b      	ldr	r3, [r7, #4]
 8005c68:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8005c6a:	681b      	ldr	r3, [r3, #0]
 8005c6c:	685b      	ldr	r3, [r3, #4]
 8005c6e:	f8a7 30be 	strh.w	r3, [r7, #190]	@ 0xbe
      if ((nb_remaining_rx_data > 0U)
 8005c72:	f8b7 30be 	ldrh.w	r3, [r7, #190]	@ 0xbe
 8005c76:	2b00      	cmp	r3, #0
 8005c78:	f000 8165 	beq.w	8005f46 <HAL_UART_IRQHandler+0x5be>
          && (nb_remaining_rx_data < huart->RxXferSize))
 8005c7c:	687b      	ldr	r3, [r7, #4]
 8005c7e:	f8b3 3058 	ldrh.w	r3, [r3, #88]	@ 0x58
 8005c82:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 8005c86:	429a      	cmp	r2, r3
 8005c88:	f080 815d 	bcs.w	8005f46 <HAL_UART_IRQHandler+0x5be>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8005c8c:	687b      	ldr	r3, [r7, #4]
 8005c8e:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 8005c92:	f8a3 205a 	strh.w	r2, [r3, #90]	@ 0x5a

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 8005c96:	687b      	ldr	r3, [r7, #4]
 8005c98:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8005c9a:	69db      	ldr	r3, [r3, #28]
 8005c9c:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8005ca0:	f000 8086 	beq.w	8005db0 <HAL_UART_IRQHandler+0x428>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8005ca4:	687b      	ldr	r3, [r7, #4]
 8005ca6:	681b      	ldr	r3, [r3, #0]
 8005ca8:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005cac:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 8005cb0:	e853 3f00 	ldrex	r3, [r3]
 8005cb4:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
   return(result);
 8005cb8:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 8005cbc:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8005cc0:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 8005cc4:	687b      	ldr	r3, [r7, #4]
 8005cc6:	681b      	ldr	r3, [r3, #0]
 8005cc8:	461a      	mov	r2, r3
 8005cca:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 8005cce:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 8005cd2:	f8c7 2090 	str.w	r2, [r7, #144]	@ 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005cd6:	f8d7 1090 	ldr.w	r1, [r7, #144]	@ 0x90
 8005cda:	f8d7 2094 	ldr.w	r2, [r7, #148]	@ 0x94
 8005cde:	e841 2300 	strex	r3, r2, [r1]
 8005ce2:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
   return(result);
 8005ce6:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8005cea:	2b00      	cmp	r3, #0
 8005cec:	d1da      	bne.n	8005ca4 <HAL_UART_IRQHandler+0x31c>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005cee:	687b      	ldr	r3, [r7, #4]
 8005cf0:	681b      	ldr	r3, [r3, #0]
 8005cf2:	3308      	adds	r3, #8
 8005cf4:	677b      	str	r3, [r7, #116]	@ 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005cf6:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8005cf8:	e853 3f00 	ldrex	r3, [r3]
 8005cfc:	673b      	str	r3, [r7, #112]	@ 0x70
   return(result);
 8005cfe:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8005d00:	f023 0301 	bic.w	r3, r3, #1
 8005d04:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8005d08:	687b      	ldr	r3, [r7, #4]
 8005d0a:	681b      	ldr	r3, [r3, #0]
 8005d0c:	3308      	adds	r3, #8
 8005d0e:	f8d7 20b4 	ldr.w	r2, [r7, #180]	@ 0xb4
 8005d12:	f8c7 2080 	str.w	r2, [r7, #128]	@ 0x80
 8005d16:	67fb      	str	r3, [r7, #124]	@ 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005d18:	6ff9      	ldr	r1, [r7, #124]	@ 0x7c
 8005d1a:	f8d7 2080 	ldr.w	r2, [r7, #128]	@ 0x80
 8005d1e:	e841 2300 	strex	r3, r2, [r1]
 8005d22:	67bb      	str	r3, [r7, #120]	@ 0x78
   return(result);
 8005d24:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8005d26:	2b00      	cmp	r3, #0
 8005d28:	d1e1      	bne.n	8005cee <HAL_UART_IRQHandler+0x366>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8005d2a:	687b      	ldr	r3, [r7, #4]
 8005d2c:	681b      	ldr	r3, [r3, #0]
 8005d2e:	3308      	adds	r3, #8
 8005d30:	663b      	str	r3, [r7, #96]	@ 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005d32:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8005d34:	e853 3f00 	ldrex	r3, [r3]
 8005d38:	65fb      	str	r3, [r7, #92]	@ 0x5c
   return(result);
 8005d3a:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8005d3c:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8005d40:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 8005d44:	687b      	ldr	r3, [r7, #4]
 8005d46:	681b      	ldr	r3, [r3, #0]
 8005d48:	3308      	adds	r3, #8
 8005d4a:	f8d7 20b0 	ldr.w	r2, [r7, #176]	@ 0xb0
 8005d4e:	66fa      	str	r2, [r7, #108]	@ 0x6c
 8005d50:	66bb      	str	r3, [r7, #104]	@ 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005d52:	6eb9      	ldr	r1, [r7, #104]	@ 0x68
 8005d54:	6efa      	ldr	r2, [r7, #108]	@ 0x6c
 8005d56:	e841 2300 	strex	r3, r2, [r1]
 8005d5a:	667b      	str	r3, [r7, #100]	@ 0x64
   return(result);
 8005d5c:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8005d5e:	2b00      	cmp	r3, #0
 8005d60:	d1e3      	bne.n	8005d2a <HAL_UART_IRQHandler+0x3a2>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8005d62:	687b      	ldr	r3, [r7, #4]
 8005d64:	2220      	movs	r2, #32
 8005d66:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005d6a:	687b      	ldr	r3, [r7, #4]
 8005d6c:	2200      	movs	r2, #0
 8005d6e:	661a      	str	r2, [r3, #96]	@ 0x60

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8005d70:	687b      	ldr	r3, [r7, #4]
 8005d72:	681b      	ldr	r3, [r3, #0]
 8005d74:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005d76:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8005d78:	e853 3f00 	ldrex	r3, [r3]
 8005d7c:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 8005d7e:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8005d80:	f023 0310 	bic.w	r3, r3, #16
 8005d84:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 8005d88:	687b      	ldr	r3, [r7, #4]
 8005d8a:	681b      	ldr	r3, [r3, #0]
 8005d8c:	461a      	mov	r2, r3
 8005d8e:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8005d92:	65bb      	str	r3, [r7, #88]	@ 0x58
 8005d94:	657a      	str	r2, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005d96:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 8005d98:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 8005d9a:	e841 2300 	strex	r3, r2, [r1]
 8005d9e:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 8005da0:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8005da2:	2b00      	cmp	r3, #0
 8005da4:	d1e4      	bne.n	8005d70 <HAL_UART_IRQHandler+0x3e8>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8005da6:	687b      	ldr	r3, [r7, #4]
 8005da8:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8005daa:	4618      	mov	r0, r3
 8005dac:	f7fc fad1 	bl	8002352 <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8005db0:	687b      	ldr	r3, [r7, #4]
 8005db2:	2202      	movs	r2, #2
 8005db4:	665a      	str	r2, [r3, #100]	@ 0x64
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8005db6:	687b      	ldr	r3, [r7, #4]
 8005db8:	f8b3 2058 	ldrh.w	r2, [r3, #88]	@ 0x58
 8005dbc:	687b      	ldr	r3, [r7, #4]
 8005dbe:	f8b3 305a 	ldrh.w	r3, [r3, #90]	@ 0x5a
 8005dc2:	b29b      	uxth	r3, r3
 8005dc4:	1ad3      	subs	r3, r2, r3
 8005dc6:	b29b      	uxth	r3, r3
 8005dc8:	4619      	mov	r1, r3
 8005dca:	6878      	ldr	r0, [r7, #4]
 8005dcc:	f000 f8d8 	bl	8005f80 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 8005dd0:	e0b9      	b.n	8005f46 <HAL_UART_IRQHandler+0x5be>
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8005dd2:	687b      	ldr	r3, [r7, #4]
 8005dd4:	f8b3 2058 	ldrh.w	r2, [r3, #88]	@ 0x58
 8005dd8:	687b      	ldr	r3, [r7, #4]
 8005dda:	f8b3 305a 	ldrh.w	r3, [r3, #90]	@ 0x5a
 8005dde:	b29b      	uxth	r3, r3
 8005de0:	1ad3      	subs	r3, r2, r3
 8005de2:	f8a7 30ce 	strh.w	r3, [r7, #206]	@ 0xce
      if ((huart->RxXferCount > 0U)
 8005de6:	687b      	ldr	r3, [r7, #4]
 8005de8:	f8b3 305a 	ldrh.w	r3, [r3, #90]	@ 0x5a
 8005dec:	b29b      	uxth	r3, r3
 8005dee:	2b00      	cmp	r3, #0
 8005df0:	f000 80ab 	beq.w	8005f4a <HAL_UART_IRQHandler+0x5c2>
          && (nb_rx_data > 0U))
 8005df4:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 8005df8:	2b00      	cmp	r3, #0
 8005dfa:	f000 80a6 	beq.w	8005f4a <HAL_UART_IRQHandler+0x5c2>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8005dfe:	687b      	ldr	r3, [r7, #4]
 8005e00:	681b      	ldr	r3, [r3, #0]
 8005e02:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005e04:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005e06:	e853 3f00 	ldrex	r3, [r3]
 8005e0a:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 8005e0c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8005e0e:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8005e12:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 8005e16:	687b      	ldr	r3, [r7, #4]
 8005e18:	681b      	ldr	r3, [r3, #0]
 8005e1a:	461a      	mov	r2, r3
 8005e1c:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 8005e20:	647b      	str	r3, [r7, #68]	@ 0x44
 8005e22:	643a      	str	r2, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005e24:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 8005e26:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8005e28:	e841 2300 	strex	r3, r2, [r1]
 8005e2c:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 8005e2e:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8005e30:	2b00      	cmp	r3, #0
 8005e32:	d1e4      	bne.n	8005dfe <HAL_UART_IRQHandler+0x476>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005e34:	687b      	ldr	r3, [r7, #4]
 8005e36:	681b      	ldr	r3, [r3, #0]
 8005e38:	3308      	adds	r3, #8
 8005e3a:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005e3c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005e3e:	e853 3f00 	ldrex	r3, [r3]
 8005e42:	623b      	str	r3, [r7, #32]
   return(result);
 8005e44:	6a3b      	ldr	r3, [r7, #32]
 8005e46:	f023 0301 	bic.w	r3, r3, #1
 8005e4a:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 8005e4e:	687b      	ldr	r3, [r7, #4]
 8005e50:	681b      	ldr	r3, [r3, #0]
 8005e52:	3308      	adds	r3, #8
 8005e54:	f8d7 20c4 	ldr.w	r2, [r7, #196]	@ 0xc4
 8005e58:	633a      	str	r2, [r7, #48]	@ 0x30
 8005e5a:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005e5c:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8005e5e:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8005e60:	e841 2300 	strex	r3, r2, [r1]
 8005e64:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 8005e66:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005e68:	2b00      	cmp	r3, #0
 8005e6a:	d1e3      	bne.n	8005e34 <HAL_UART_IRQHandler+0x4ac>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8005e6c:	687b      	ldr	r3, [r7, #4]
 8005e6e:	2220      	movs	r2, #32
 8005e70:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005e74:	687b      	ldr	r3, [r7, #4]
 8005e76:	2200      	movs	r2, #0
 8005e78:	661a      	str	r2, [r3, #96]	@ 0x60

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 8005e7a:	687b      	ldr	r3, [r7, #4]
 8005e7c:	2200      	movs	r2, #0
 8005e7e:	669a      	str	r2, [r3, #104]	@ 0x68

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8005e80:	687b      	ldr	r3, [r7, #4]
 8005e82:	681b      	ldr	r3, [r3, #0]
 8005e84:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005e86:	693b      	ldr	r3, [r7, #16]
 8005e88:	e853 3f00 	ldrex	r3, [r3]
 8005e8c:	60fb      	str	r3, [r7, #12]
   return(result);
 8005e8e:	68fb      	ldr	r3, [r7, #12]
 8005e90:	f023 0310 	bic.w	r3, r3, #16
 8005e94:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 8005e98:	687b      	ldr	r3, [r7, #4]
 8005e9a:	681b      	ldr	r3, [r3, #0]
 8005e9c:	461a      	mov	r2, r3
 8005e9e:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 8005ea2:	61fb      	str	r3, [r7, #28]
 8005ea4:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005ea6:	69b9      	ldr	r1, [r7, #24]
 8005ea8:	69fa      	ldr	r2, [r7, #28]
 8005eaa:	e841 2300 	strex	r3, r2, [r1]
 8005eae:	617b      	str	r3, [r7, #20]
   return(result);
 8005eb0:	697b      	ldr	r3, [r7, #20]
 8005eb2:	2b00      	cmp	r3, #0
 8005eb4:	d1e4      	bne.n	8005e80 <HAL_UART_IRQHandler+0x4f8>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8005eb6:	687b      	ldr	r3, [r7, #4]
 8005eb8:	2202      	movs	r2, #2
 8005eba:	665a      	str	r2, [r3, #100]	@ 0x64
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8005ebc:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 8005ec0:	4619      	mov	r1, r3
 8005ec2:	6878      	ldr	r0, [r7, #4]
 8005ec4:	f000 f85c 	bl	8005f80 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 8005ec8:	e03f      	b.n	8005f4a <HAL_UART_IRQHandler+0x5c2>
  }
#if defined(USART_CR1_UESM)
#if defined(USART_CR3_WUFIE)

  /* UART wakeup from Stop mode interrupt occurred ---------------------------*/
  if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
 8005eca:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8005ece:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8005ed2:	2b00      	cmp	r3, #0
 8005ed4:	d00e      	beq.n	8005ef4 <HAL_UART_IRQHandler+0x56c>
 8005ed6:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8005eda:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8005ede:	2b00      	cmp	r3, #0
 8005ee0:	d008      	beq.n	8005ef4 <HAL_UART_IRQHandler+0x56c>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 8005ee2:	687b      	ldr	r3, [r7, #4]
 8005ee4:	681b      	ldr	r3, [r3, #0]
 8005ee6:	f44f 1280 	mov.w	r2, #1048576	@ 0x100000
 8005eea:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Wakeup Callback */
    huart->WakeupCallback(huart);
#else
    /* Call legacy weak Wakeup Callback */
    HAL_UARTEx_WakeupCallback(huart);
 8005eec:	6878      	ldr	r0, [r7, #4]
 8005eee:	f000 f853 	bl	8005f98 <HAL_UARTEx_WakeupCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 8005ef2:	e02d      	b.n	8005f50 <HAL_UART_IRQHandler+0x5c8>
  }
#endif /* USART_CR3_WUFIE */
#endif /* USART_CR1_UESM */

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_ISR_TXE) != 0U)
 8005ef4:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8005ef8:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8005efc:	2b00      	cmp	r3, #0
 8005efe:	d00e      	beq.n	8005f1e <HAL_UART_IRQHandler+0x596>
      && ((cr1its & USART_CR1_TXEIE) != 0U))
 8005f00:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8005f04:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8005f08:	2b00      	cmp	r3, #0
 8005f0a:	d008      	beq.n	8005f1e <HAL_UART_IRQHandler+0x596>
  {
    if (huart->TxISR != NULL)
 8005f0c:	687b      	ldr	r3, [r7, #4]
 8005f0e:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8005f10:	2b00      	cmp	r3, #0
 8005f12:	d01c      	beq.n	8005f4e <HAL_UART_IRQHandler+0x5c6>
    {
      huart->TxISR(huart);
 8005f14:	687b      	ldr	r3, [r7, #4]
 8005f16:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8005f18:	6878      	ldr	r0, [r7, #4]
 8005f1a:	4798      	blx	r3
    }
    return;
 8005f1c:	e017      	b.n	8005f4e <HAL_UART_IRQHandler+0x5c6>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 8005f1e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8005f22:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8005f26:	2b00      	cmp	r3, #0
 8005f28:	d012      	beq.n	8005f50 <HAL_UART_IRQHandler+0x5c8>
 8005f2a:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8005f2e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8005f32:	2b00      	cmp	r3, #0
 8005f34:	d00c      	beq.n	8005f50 <HAL_UART_IRQHandler+0x5c8>
  {
    UART_EndTransmit_IT(huart);
 8005f36:	6878      	ldr	r0, [r7, #4]
 8005f38:	f000 fd94 	bl	8006a64 <UART_EndTransmit_IT>
    return;
 8005f3c:	e008      	b.n	8005f50 <HAL_UART_IRQHandler+0x5c8>
      return;
 8005f3e:	bf00      	nop
 8005f40:	e006      	b.n	8005f50 <HAL_UART_IRQHandler+0x5c8>
    return;
 8005f42:	bf00      	nop
 8005f44:	e004      	b.n	8005f50 <HAL_UART_IRQHandler+0x5c8>
      return;
 8005f46:	bf00      	nop
 8005f48:	e002      	b.n	8005f50 <HAL_UART_IRQHandler+0x5c8>
      return;
 8005f4a:	bf00      	nop
 8005f4c:	e000      	b.n	8005f50 <HAL_UART_IRQHandler+0x5c8>
    return;
 8005f4e:	bf00      	nop
  }

}
 8005f50:	37e8      	adds	r7, #232	@ 0xe8
 8005f52:	46bd      	mov	sp, r7
 8005f54:	bd80      	pop	{r7, pc}
 8005f56:	bf00      	nop

08005f58 <HAL_UART_TxCpltCallback>:
  * @brief Tx Transfer completed callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8005f58:	b480      	push	{r7}
 8005f5a:	b083      	sub	sp, #12
 8005f5c:	af00      	add	r7, sp, #0
 8005f5e:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_TxCpltCallback can be implemented in the user file.
   */
}
 8005f60:	bf00      	nop
 8005f62:	370c      	adds	r7, #12
 8005f64:	46bd      	mov	sp, r7
 8005f66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f6a:	4770      	bx	lr

08005f6c <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8005f6c:	b480      	push	{r7}
 8005f6e:	b083      	sub	sp, #12
 8005f70:	af00      	add	r7, sp, #0
 8005f72:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 8005f74:	bf00      	nop
 8005f76:	370c      	adds	r7, #12
 8005f78:	46bd      	mov	sp, r7
 8005f7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f7e:	4770      	bx	lr

08005f80 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8005f80:	b480      	push	{r7}
 8005f82:	b083      	sub	sp, #12
 8005f84:	af00      	add	r7, sp, #0
 8005f86:	6078      	str	r0, [r7, #4]
 8005f88:	460b      	mov	r3, r1
 8005f8a:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8005f8c:	bf00      	nop
 8005f8e:	370c      	adds	r7, #12
 8005f90:	46bd      	mov	sp, r7
 8005f92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f96:	4770      	bx	lr

08005f98 <HAL_UARTEx_WakeupCallback>:
  * @brief UART wakeup from Stop mode callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_WakeupCallback(UART_HandleTypeDef *huart)
{
 8005f98:	b480      	push	{r7}
 8005f9a:	b083      	sub	sp, #12
 8005f9c:	af00      	add	r7, sp, #0
 8005f9e:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_WakeupCallback can be implemented in the user file.
   */
}
 8005fa0:	bf00      	nop
 8005fa2:	370c      	adds	r7, #12
 8005fa4:	46bd      	mov	sp, r7
 8005fa6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005faa:	4770      	bx	lr

08005fac <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8005fac:	b580      	push	{r7, lr}
 8005fae:	b088      	sub	sp, #32
 8005fb0:	af00      	add	r7, sp, #0
 8005fb2:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8005fb4:	2300      	movs	r3, #0
 8005fb6:	77bb      	strb	r3, [r7, #30]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8005fb8:	687b      	ldr	r3, [r7, #4]
 8005fba:	689a      	ldr	r2, [r3, #8]
 8005fbc:	687b      	ldr	r3, [r7, #4]
 8005fbe:	691b      	ldr	r3, [r3, #16]
 8005fc0:	431a      	orrs	r2, r3
 8005fc2:	687b      	ldr	r3, [r7, #4]
 8005fc4:	695b      	ldr	r3, [r3, #20]
 8005fc6:	431a      	orrs	r2, r3
 8005fc8:	687b      	ldr	r3, [r7, #4]
 8005fca:	69db      	ldr	r3, [r3, #28]
 8005fcc:	4313      	orrs	r3, r2
 8005fce:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8005fd0:	687b      	ldr	r3, [r7, #4]
 8005fd2:	681b      	ldr	r3, [r3, #0]
 8005fd4:	681a      	ldr	r2, [r3, #0]
 8005fd6:	4ba6      	ldr	r3, [pc, #664]	@ (8006270 <UART_SetConfig+0x2c4>)
 8005fd8:	4013      	ands	r3, r2
 8005fda:	687a      	ldr	r2, [r7, #4]
 8005fdc:	6812      	ldr	r2, [r2, #0]
 8005fde:	6979      	ldr	r1, [r7, #20]
 8005fe0:	430b      	orrs	r3, r1
 8005fe2:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8005fe4:	687b      	ldr	r3, [r7, #4]
 8005fe6:	681b      	ldr	r3, [r3, #0]
 8005fe8:	685b      	ldr	r3, [r3, #4]
 8005fea:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 8005fee:	687b      	ldr	r3, [r7, #4]
 8005ff0:	68da      	ldr	r2, [r3, #12]
 8005ff2:	687b      	ldr	r3, [r7, #4]
 8005ff4:	681b      	ldr	r3, [r3, #0]
 8005ff6:	430a      	orrs	r2, r1
 8005ff8:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8005ffa:	687b      	ldr	r3, [r7, #4]
 8005ffc:	699b      	ldr	r3, [r3, #24]
 8005ffe:	617b      	str	r3, [r7, #20]

  tmpreg |= huart->Init.OneBitSampling;
 8006000:	687b      	ldr	r3, [r7, #4]
 8006002:	6a1b      	ldr	r3, [r3, #32]
 8006004:	697a      	ldr	r2, [r7, #20]
 8006006:	4313      	orrs	r3, r2
 8006008:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 800600a:	687b      	ldr	r3, [r7, #4]
 800600c:	681b      	ldr	r3, [r3, #0]
 800600e:	689b      	ldr	r3, [r3, #8]
 8006010:	f423 6130 	bic.w	r1, r3, #2816	@ 0xb00
 8006014:	687b      	ldr	r3, [r7, #4]
 8006016:	681b      	ldr	r3, [r3, #0]
 8006018:	697a      	ldr	r2, [r7, #20]
 800601a:	430a      	orrs	r2, r1
 800601c:	609a      	str	r2, [r3, #8]


  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 800601e:	687b      	ldr	r3, [r7, #4]
 8006020:	681b      	ldr	r3, [r3, #0]
 8006022:	4a94      	ldr	r2, [pc, #592]	@ (8006274 <UART_SetConfig+0x2c8>)
 8006024:	4293      	cmp	r3, r2
 8006026:	d120      	bne.n	800606a <UART_SetConfig+0xbe>
 8006028:	4b93      	ldr	r3, [pc, #588]	@ (8006278 <UART_SetConfig+0x2cc>)
 800602a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800602e:	f003 0303 	and.w	r3, r3, #3
 8006032:	2b03      	cmp	r3, #3
 8006034:	d816      	bhi.n	8006064 <UART_SetConfig+0xb8>
 8006036:	a201      	add	r2, pc, #4	@ (adr r2, 800603c <UART_SetConfig+0x90>)
 8006038:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800603c:	0800604d 	.word	0x0800604d
 8006040:	08006059 	.word	0x08006059
 8006044:	08006053 	.word	0x08006053
 8006048:	0800605f 	.word	0x0800605f
 800604c:	2301      	movs	r3, #1
 800604e:	77fb      	strb	r3, [r7, #31]
 8006050:	e150      	b.n	80062f4 <UART_SetConfig+0x348>
 8006052:	2302      	movs	r3, #2
 8006054:	77fb      	strb	r3, [r7, #31]
 8006056:	e14d      	b.n	80062f4 <UART_SetConfig+0x348>
 8006058:	2304      	movs	r3, #4
 800605a:	77fb      	strb	r3, [r7, #31]
 800605c:	e14a      	b.n	80062f4 <UART_SetConfig+0x348>
 800605e:	2308      	movs	r3, #8
 8006060:	77fb      	strb	r3, [r7, #31]
 8006062:	e147      	b.n	80062f4 <UART_SetConfig+0x348>
 8006064:	2310      	movs	r3, #16
 8006066:	77fb      	strb	r3, [r7, #31]
 8006068:	e144      	b.n	80062f4 <UART_SetConfig+0x348>
 800606a:	687b      	ldr	r3, [r7, #4]
 800606c:	681b      	ldr	r3, [r3, #0]
 800606e:	4a83      	ldr	r2, [pc, #524]	@ (800627c <UART_SetConfig+0x2d0>)
 8006070:	4293      	cmp	r3, r2
 8006072:	d132      	bne.n	80060da <UART_SetConfig+0x12e>
 8006074:	4b80      	ldr	r3, [pc, #512]	@ (8006278 <UART_SetConfig+0x2cc>)
 8006076:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800607a:	f003 030c 	and.w	r3, r3, #12
 800607e:	2b0c      	cmp	r3, #12
 8006080:	d828      	bhi.n	80060d4 <UART_SetConfig+0x128>
 8006082:	a201      	add	r2, pc, #4	@ (adr r2, 8006088 <UART_SetConfig+0xdc>)
 8006084:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006088:	080060bd 	.word	0x080060bd
 800608c:	080060d5 	.word	0x080060d5
 8006090:	080060d5 	.word	0x080060d5
 8006094:	080060d5 	.word	0x080060d5
 8006098:	080060c9 	.word	0x080060c9
 800609c:	080060d5 	.word	0x080060d5
 80060a0:	080060d5 	.word	0x080060d5
 80060a4:	080060d5 	.word	0x080060d5
 80060a8:	080060c3 	.word	0x080060c3
 80060ac:	080060d5 	.word	0x080060d5
 80060b0:	080060d5 	.word	0x080060d5
 80060b4:	080060d5 	.word	0x080060d5
 80060b8:	080060cf 	.word	0x080060cf
 80060bc:	2300      	movs	r3, #0
 80060be:	77fb      	strb	r3, [r7, #31]
 80060c0:	e118      	b.n	80062f4 <UART_SetConfig+0x348>
 80060c2:	2302      	movs	r3, #2
 80060c4:	77fb      	strb	r3, [r7, #31]
 80060c6:	e115      	b.n	80062f4 <UART_SetConfig+0x348>
 80060c8:	2304      	movs	r3, #4
 80060ca:	77fb      	strb	r3, [r7, #31]
 80060cc:	e112      	b.n	80062f4 <UART_SetConfig+0x348>
 80060ce:	2308      	movs	r3, #8
 80060d0:	77fb      	strb	r3, [r7, #31]
 80060d2:	e10f      	b.n	80062f4 <UART_SetConfig+0x348>
 80060d4:	2310      	movs	r3, #16
 80060d6:	77fb      	strb	r3, [r7, #31]
 80060d8:	e10c      	b.n	80062f4 <UART_SetConfig+0x348>
 80060da:	687b      	ldr	r3, [r7, #4]
 80060dc:	681b      	ldr	r3, [r3, #0]
 80060de:	4a68      	ldr	r2, [pc, #416]	@ (8006280 <UART_SetConfig+0x2d4>)
 80060e0:	4293      	cmp	r3, r2
 80060e2:	d120      	bne.n	8006126 <UART_SetConfig+0x17a>
 80060e4:	4b64      	ldr	r3, [pc, #400]	@ (8006278 <UART_SetConfig+0x2cc>)
 80060e6:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80060ea:	f003 0330 	and.w	r3, r3, #48	@ 0x30
 80060ee:	2b30      	cmp	r3, #48	@ 0x30
 80060f0:	d013      	beq.n	800611a <UART_SetConfig+0x16e>
 80060f2:	2b30      	cmp	r3, #48	@ 0x30
 80060f4:	d814      	bhi.n	8006120 <UART_SetConfig+0x174>
 80060f6:	2b20      	cmp	r3, #32
 80060f8:	d009      	beq.n	800610e <UART_SetConfig+0x162>
 80060fa:	2b20      	cmp	r3, #32
 80060fc:	d810      	bhi.n	8006120 <UART_SetConfig+0x174>
 80060fe:	2b00      	cmp	r3, #0
 8006100:	d002      	beq.n	8006108 <UART_SetConfig+0x15c>
 8006102:	2b10      	cmp	r3, #16
 8006104:	d006      	beq.n	8006114 <UART_SetConfig+0x168>
 8006106:	e00b      	b.n	8006120 <UART_SetConfig+0x174>
 8006108:	2300      	movs	r3, #0
 800610a:	77fb      	strb	r3, [r7, #31]
 800610c:	e0f2      	b.n	80062f4 <UART_SetConfig+0x348>
 800610e:	2302      	movs	r3, #2
 8006110:	77fb      	strb	r3, [r7, #31]
 8006112:	e0ef      	b.n	80062f4 <UART_SetConfig+0x348>
 8006114:	2304      	movs	r3, #4
 8006116:	77fb      	strb	r3, [r7, #31]
 8006118:	e0ec      	b.n	80062f4 <UART_SetConfig+0x348>
 800611a:	2308      	movs	r3, #8
 800611c:	77fb      	strb	r3, [r7, #31]
 800611e:	e0e9      	b.n	80062f4 <UART_SetConfig+0x348>
 8006120:	2310      	movs	r3, #16
 8006122:	77fb      	strb	r3, [r7, #31]
 8006124:	e0e6      	b.n	80062f4 <UART_SetConfig+0x348>
 8006126:	687b      	ldr	r3, [r7, #4]
 8006128:	681b      	ldr	r3, [r3, #0]
 800612a:	4a56      	ldr	r2, [pc, #344]	@ (8006284 <UART_SetConfig+0x2d8>)
 800612c:	4293      	cmp	r3, r2
 800612e:	d120      	bne.n	8006172 <UART_SetConfig+0x1c6>
 8006130:	4b51      	ldr	r3, [pc, #324]	@ (8006278 <UART_SetConfig+0x2cc>)
 8006132:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8006136:	f003 03c0 	and.w	r3, r3, #192	@ 0xc0
 800613a:	2bc0      	cmp	r3, #192	@ 0xc0
 800613c:	d013      	beq.n	8006166 <UART_SetConfig+0x1ba>
 800613e:	2bc0      	cmp	r3, #192	@ 0xc0
 8006140:	d814      	bhi.n	800616c <UART_SetConfig+0x1c0>
 8006142:	2b80      	cmp	r3, #128	@ 0x80
 8006144:	d009      	beq.n	800615a <UART_SetConfig+0x1ae>
 8006146:	2b80      	cmp	r3, #128	@ 0x80
 8006148:	d810      	bhi.n	800616c <UART_SetConfig+0x1c0>
 800614a:	2b00      	cmp	r3, #0
 800614c:	d002      	beq.n	8006154 <UART_SetConfig+0x1a8>
 800614e:	2b40      	cmp	r3, #64	@ 0x40
 8006150:	d006      	beq.n	8006160 <UART_SetConfig+0x1b4>
 8006152:	e00b      	b.n	800616c <UART_SetConfig+0x1c0>
 8006154:	2300      	movs	r3, #0
 8006156:	77fb      	strb	r3, [r7, #31]
 8006158:	e0cc      	b.n	80062f4 <UART_SetConfig+0x348>
 800615a:	2302      	movs	r3, #2
 800615c:	77fb      	strb	r3, [r7, #31]
 800615e:	e0c9      	b.n	80062f4 <UART_SetConfig+0x348>
 8006160:	2304      	movs	r3, #4
 8006162:	77fb      	strb	r3, [r7, #31]
 8006164:	e0c6      	b.n	80062f4 <UART_SetConfig+0x348>
 8006166:	2308      	movs	r3, #8
 8006168:	77fb      	strb	r3, [r7, #31]
 800616a:	e0c3      	b.n	80062f4 <UART_SetConfig+0x348>
 800616c:	2310      	movs	r3, #16
 800616e:	77fb      	strb	r3, [r7, #31]
 8006170:	e0c0      	b.n	80062f4 <UART_SetConfig+0x348>
 8006172:	687b      	ldr	r3, [r7, #4]
 8006174:	681b      	ldr	r3, [r3, #0]
 8006176:	4a44      	ldr	r2, [pc, #272]	@ (8006288 <UART_SetConfig+0x2dc>)
 8006178:	4293      	cmp	r3, r2
 800617a:	d125      	bne.n	80061c8 <UART_SetConfig+0x21c>
 800617c:	4b3e      	ldr	r3, [pc, #248]	@ (8006278 <UART_SetConfig+0x2cc>)
 800617e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8006182:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8006186:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 800618a:	d017      	beq.n	80061bc <UART_SetConfig+0x210>
 800618c:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8006190:	d817      	bhi.n	80061c2 <UART_SetConfig+0x216>
 8006192:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8006196:	d00b      	beq.n	80061b0 <UART_SetConfig+0x204>
 8006198:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800619c:	d811      	bhi.n	80061c2 <UART_SetConfig+0x216>
 800619e:	2b00      	cmp	r3, #0
 80061a0:	d003      	beq.n	80061aa <UART_SetConfig+0x1fe>
 80061a2:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80061a6:	d006      	beq.n	80061b6 <UART_SetConfig+0x20a>
 80061a8:	e00b      	b.n	80061c2 <UART_SetConfig+0x216>
 80061aa:	2300      	movs	r3, #0
 80061ac:	77fb      	strb	r3, [r7, #31]
 80061ae:	e0a1      	b.n	80062f4 <UART_SetConfig+0x348>
 80061b0:	2302      	movs	r3, #2
 80061b2:	77fb      	strb	r3, [r7, #31]
 80061b4:	e09e      	b.n	80062f4 <UART_SetConfig+0x348>
 80061b6:	2304      	movs	r3, #4
 80061b8:	77fb      	strb	r3, [r7, #31]
 80061ba:	e09b      	b.n	80062f4 <UART_SetConfig+0x348>
 80061bc:	2308      	movs	r3, #8
 80061be:	77fb      	strb	r3, [r7, #31]
 80061c0:	e098      	b.n	80062f4 <UART_SetConfig+0x348>
 80061c2:	2310      	movs	r3, #16
 80061c4:	77fb      	strb	r3, [r7, #31]
 80061c6:	e095      	b.n	80062f4 <UART_SetConfig+0x348>
 80061c8:	687b      	ldr	r3, [r7, #4]
 80061ca:	681b      	ldr	r3, [r3, #0]
 80061cc:	4a2f      	ldr	r2, [pc, #188]	@ (800628c <UART_SetConfig+0x2e0>)
 80061ce:	4293      	cmp	r3, r2
 80061d0:	d125      	bne.n	800621e <UART_SetConfig+0x272>
 80061d2:	4b29      	ldr	r3, [pc, #164]	@ (8006278 <UART_SetConfig+0x2cc>)
 80061d4:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80061d8:	f403 6340 	and.w	r3, r3, #3072	@ 0xc00
 80061dc:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 80061e0:	d017      	beq.n	8006212 <UART_SetConfig+0x266>
 80061e2:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 80061e6:	d817      	bhi.n	8006218 <UART_SetConfig+0x26c>
 80061e8:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 80061ec:	d00b      	beq.n	8006206 <UART_SetConfig+0x25a>
 80061ee:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 80061f2:	d811      	bhi.n	8006218 <UART_SetConfig+0x26c>
 80061f4:	2b00      	cmp	r3, #0
 80061f6:	d003      	beq.n	8006200 <UART_SetConfig+0x254>
 80061f8:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80061fc:	d006      	beq.n	800620c <UART_SetConfig+0x260>
 80061fe:	e00b      	b.n	8006218 <UART_SetConfig+0x26c>
 8006200:	2301      	movs	r3, #1
 8006202:	77fb      	strb	r3, [r7, #31]
 8006204:	e076      	b.n	80062f4 <UART_SetConfig+0x348>
 8006206:	2302      	movs	r3, #2
 8006208:	77fb      	strb	r3, [r7, #31]
 800620a:	e073      	b.n	80062f4 <UART_SetConfig+0x348>
 800620c:	2304      	movs	r3, #4
 800620e:	77fb      	strb	r3, [r7, #31]
 8006210:	e070      	b.n	80062f4 <UART_SetConfig+0x348>
 8006212:	2308      	movs	r3, #8
 8006214:	77fb      	strb	r3, [r7, #31]
 8006216:	e06d      	b.n	80062f4 <UART_SetConfig+0x348>
 8006218:	2310      	movs	r3, #16
 800621a:	77fb      	strb	r3, [r7, #31]
 800621c:	e06a      	b.n	80062f4 <UART_SetConfig+0x348>
 800621e:	687b      	ldr	r3, [r7, #4]
 8006220:	681b      	ldr	r3, [r3, #0]
 8006222:	4a1b      	ldr	r2, [pc, #108]	@ (8006290 <UART_SetConfig+0x2e4>)
 8006224:	4293      	cmp	r3, r2
 8006226:	d138      	bne.n	800629a <UART_SetConfig+0x2ee>
 8006228:	4b13      	ldr	r3, [pc, #76]	@ (8006278 <UART_SetConfig+0x2cc>)
 800622a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800622e:	f403 5340 	and.w	r3, r3, #12288	@ 0x3000
 8006232:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 8006236:	d017      	beq.n	8006268 <UART_SetConfig+0x2bc>
 8006238:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 800623c:	d82a      	bhi.n	8006294 <UART_SetConfig+0x2e8>
 800623e:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8006242:	d00b      	beq.n	800625c <UART_SetConfig+0x2b0>
 8006244:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8006248:	d824      	bhi.n	8006294 <UART_SetConfig+0x2e8>
 800624a:	2b00      	cmp	r3, #0
 800624c:	d003      	beq.n	8006256 <UART_SetConfig+0x2aa>
 800624e:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8006252:	d006      	beq.n	8006262 <UART_SetConfig+0x2b6>
 8006254:	e01e      	b.n	8006294 <UART_SetConfig+0x2e8>
 8006256:	2300      	movs	r3, #0
 8006258:	77fb      	strb	r3, [r7, #31]
 800625a:	e04b      	b.n	80062f4 <UART_SetConfig+0x348>
 800625c:	2302      	movs	r3, #2
 800625e:	77fb      	strb	r3, [r7, #31]
 8006260:	e048      	b.n	80062f4 <UART_SetConfig+0x348>
 8006262:	2304      	movs	r3, #4
 8006264:	77fb      	strb	r3, [r7, #31]
 8006266:	e045      	b.n	80062f4 <UART_SetConfig+0x348>
 8006268:	2308      	movs	r3, #8
 800626a:	77fb      	strb	r3, [r7, #31]
 800626c:	e042      	b.n	80062f4 <UART_SetConfig+0x348>
 800626e:	bf00      	nop
 8006270:	efff69f3 	.word	0xefff69f3
 8006274:	40011000 	.word	0x40011000
 8006278:	40023800 	.word	0x40023800
 800627c:	40004400 	.word	0x40004400
 8006280:	40004800 	.word	0x40004800
 8006284:	40004c00 	.word	0x40004c00
 8006288:	40005000 	.word	0x40005000
 800628c:	40011400 	.word	0x40011400
 8006290:	40007800 	.word	0x40007800
 8006294:	2310      	movs	r3, #16
 8006296:	77fb      	strb	r3, [r7, #31]
 8006298:	e02c      	b.n	80062f4 <UART_SetConfig+0x348>
 800629a:	687b      	ldr	r3, [r7, #4]
 800629c:	681b      	ldr	r3, [r3, #0]
 800629e:	4a72      	ldr	r2, [pc, #456]	@ (8006468 <UART_SetConfig+0x4bc>)
 80062a0:	4293      	cmp	r3, r2
 80062a2:	d125      	bne.n	80062f0 <UART_SetConfig+0x344>
 80062a4:	4b71      	ldr	r3, [pc, #452]	@ (800646c <UART_SetConfig+0x4c0>)
 80062a6:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80062aa:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 80062ae:	f5b3 4f40 	cmp.w	r3, #49152	@ 0xc000
 80062b2:	d017      	beq.n	80062e4 <UART_SetConfig+0x338>
 80062b4:	f5b3 4f40 	cmp.w	r3, #49152	@ 0xc000
 80062b8:	d817      	bhi.n	80062ea <UART_SetConfig+0x33e>
 80062ba:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 80062be:	d00b      	beq.n	80062d8 <UART_SetConfig+0x32c>
 80062c0:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 80062c4:	d811      	bhi.n	80062ea <UART_SetConfig+0x33e>
 80062c6:	2b00      	cmp	r3, #0
 80062c8:	d003      	beq.n	80062d2 <UART_SetConfig+0x326>
 80062ca:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 80062ce:	d006      	beq.n	80062de <UART_SetConfig+0x332>
 80062d0:	e00b      	b.n	80062ea <UART_SetConfig+0x33e>
 80062d2:	2300      	movs	r3, #0
 80062d4:	77fb      	strb	r3, [r7, #31]
 80062d6:	e00d      	b.n	80062f4 <UART_SetConfig+0x348>
 80062d8:	2302      	movs	r3, #2
 80062da:	77fb      	strb	r3, [r7, #31]
 80062dc:	e00a      	b.n	80062f4 <UART_SetConfig+0x348>
 80062de:	2304      	movs	r3, #4
 80062e0:	77fb      	strb	r3, [r7, #31]
 80062e2:	e007      	b.n	80062f4 <UART_SetConfig+0x348>
 80062e4:	2308      	movs	r3, #8
 80062e6:	77fb      	strb	r3, [r7, #31]
 80062e8:	e004      	b.n	80062f4 <UART_SetConfig+0x348>
 80062ea:	2310      	movs	r3, #16
 80062ec:	77fb      	strb	r3, [r7, #31]
 80062ee:	e001      	b.n	80062f4 <UART_SetConfig+0x348>
 80062f0:	2310      	movs	r3, #16
 80062f2:	77fb      	strb	r3, [r7, #31]

  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80062f4:	687b      	ldr	r3, [r7, #4]
 80062f6:	69db      	ldr	r3, [r3, #28]
 80062f8:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 80062fc:	d15b      	bne.n	80063b6 <UART_SetConfig+0x40a>
  {
    switch (clocksource)
 80062fe:	7ffb      	ldrb	r3, [r7, #31]
 8006300:	2b08      	cmp	r3, #8
 8006302:	d828      	bhi.n	8006356 <UART_SetConfig+0x3aa>
 8006304:	a201      	add	r2, pc, #4	@ (adr r2, 800630c <UART_SetConfig+0x360>)
 8006306:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800630a:	bf00      	nop
 800630c:	08006331 	.word	0x08006331
 8006310:	08006339 	.word	0x08006339
 8006314:	08006341 	.word	0x08006341
 8006318:	08006357 	.word	0x08006357
 800631c:	08006347 	.word	0x08006347
 8006320:	08006357 	.word	0x08006357
 8006324:	08006357 	.word	0x08006357
 8006328:	08006357 	.word	0x08006357
 800632c:	0800634f 	.word	0x0800634f
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8006330:	f7fe f8ca 	bl	80044c8 <HAL_RCC_GetPCLK1Freq>
 8006334:	61b8      	str	r0, [r7, #24]
        break;
 8006336:	e013      	b.n	8006360 <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8006338:	f7fe f8da 	bl	80044f0 <HAL_RCC_GetPCLK2Freq>
 800633c:	61b8      	str	r0, [r7, #24]
        break;
 800633e:	e00f      	b.n	8006360 <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8006340:	4b4b      	ldr	r3, [pc, #300]	@ (8006470 <UART_SetConfig+0x4c4>)
 8006342:	61bb      	str	r3, [r7, #24]
        break;
 8006344:	e00c      	b.n	8006360 <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8006346:	f7fd ffad 	bl	80042a4 <HAL_RCC_GetSysClockFreq>
 800634a:	61b8      	str	r0, [r7, #24]
        break;
 800634c:	e008      	b.n	8006360 <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800634e:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8006352:	61bb      	str	r3, [r7, #24]
        break;
 8006354:	e004      	b.n	8006360 <UART_SetConfig+0x3b4>
      default:
        pclk = 0U;
 8006356:	2300      	movs	r3, #0
 8006358:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 800635a:	2301      	movs	r3, #1
 800635c:	77bb      	strb	r3, [r7, #30]
        break;
 800635e:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8006360:	69bb      	ldr	r3, [r7, #24]
 8006362:	2b00      	cmp	r3, #0
 8006364:	d074      	beq.n	8006450 <UART_SetConfig+0x4a4>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 8006366:	69bb      	ldr	r3, [r7, #24]
 8006368:	005a      	lsls	r2, r3, #1
 800636a:	687b      	ldr	r3, [r7, #4]
 800636c:	685b      	ldr	r3, [r3, #4]
 800636e:	085b      	lsrs	r3, r3, #1
 8006370:	441a      	add	r2, r3
 8006372:	687b      	ldr	r3, [r7, #4]
 8006374:	685b      	ldr	r3, [r3, #4]
 8006376:	fbb2 f3f3 	udiv	r3, r2, r3
 800637a:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800637c:	693b      	ldr	r3, [r7, #16]
 800637e:	2b0f      	cmp	r3, #15
 8006380:	d916      	bls.n	80063b0 <UART_SetConfig+0x404>
 8006382:	693b      	ldr	r3, [r7, #16]
 8006384:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8006388:	d212      	bcs.n	80063b0 <UART_SetConfig+0x404>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 800638a:	693b      	ldr	r3, [r7, #16]
 800638c:	b29b      	uxth	r3, r3
 800638e:	f023 030f 	bic.w	r3, r3, #15
 8006392:	81fb      	strh	r3, [r7, #14]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8006394:	693b      	ldr	r3, [r7, #16]
 8006396:	085b      	lsrs	r3, r3, #1
 8006398:	b29b      	uxth	r3, r3
 800639a:	f003 0307 	and.w	r3, r3, #7
 800639e:	b29a      	uxth	r2, r3
 80063a0:	89fb      	ldrh	r3, [r7, #14]
 80063a2:	4313      	orrs	r3, r2
 80063a4:	81fb      	strh	r3, [r7, #14]
        huart->Instance->BRR = brrtemp;
 80063a6:	687b      	ldr	r3, [r7, #4]
 80063a8:	681b      	ldr	r3, [r3, #0]
 80063aa:	89fa      	ldrh	r2, [r7, #14]
 80063ac:	60da      	str	r2, [r3, #12]
 80063ae:	e04f      	b.n	8006450 <UART_SetConfig+0x4a4>
      }
      else
      {
        ret = HAL_ERROR;
 80063b0:	2301      	movs	r3, #1
 80063b2:	77bb      	strb	r3, [r7, #30]
 80063b4:	e04c      	b.n	8006450 <UART_SetConfig+0x4a4>
      }
    }
  }
  else
  {
    switch (clocksource)
 80063b6:	7ffb      	ldrb	r3, [r7, #31]
 80063b8:	2b08      	cmp	r3, #8
 80063ba:	d828      	bhi.n	800640e <UART_SetConfig+0x462>
 80063bc:	a201      	add	r2, pc, #4	@ (adr r2, 80063c4 <UART_SetConfig+0x418>)
 80063be:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80063c2:	bf00      	nop
 80063c4:	080063e9 	.word	0x080063e9
 80063c8:	080063f1 	.word	0x080063f1
 80063cc:	080063f9 	.word	0x080063f9
 80063d0:	0800640f 	.word	0x0800640f
 80063d4:	080063ff 	.word	0x080063ff
 80063d8:	0800640f 	.word	0x0800640f
 80063dc:	0800640f 	.word	0x0800640f
 80063e0:	0800640f 	.word	0x0800640f
 80063e4:	08006407 	.word	0x08006407
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80063e8:	f7fe f86e 	bl	80044c8 <HAL_RCC_GetPCLK1Freq>
 80063ec:	61b8      	str	r0, [r7, #24]
        break;
 80063ee:	e013      	b.n	8006418 <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 80063f0:	f7fe f87e 	bl	80044f0 <HAL_RCC_GetPCLK2Freq>
 80063f4:	61b8      	str	r0, [r7, #24]
        break;
 80063f6:	e00f      	b.n	8006418 <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 80063f8:	4b1d      	ldr	r3, [pc, #116]	@ (8006470 <UART_SetConfig+0x4c4>)
 80063fa:	61bb      	str	r3, [r7, #24]
        break;
 80063fc:	e00c      	b.n	8006418 <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80063fe:	f7fd ff51 	bl	80042a4 <HAL_RCC_GetSysClockFreq>
 8006402:	61b8      	str	r0, [r7, #24]
        break;
 8006404:	e008      	b.n	8006418 <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8006406:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800640a:	61bb      	str	r3, [r7, #24]
        break;
 800640c:	e004      	b.n	8006418 <UART_SetConfig+0x46c>
      default:
        pclk = 0U;
 800640e:	2300      	movs	r3, #0
 8006410:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 8006412:	2301      	movs	r3, #1
 8006414:	77bb      	strb	r3, [r7, #30]
        break;
 8006416:	bf00      	nop
    }

    if (pclk != 0U)
 8006418:	69bb      	ldr	r3, [r7, #24]
 800641a:	2b00      	cmp	r3, #0
 800641c:	d018      	beq.n	8006450 <UART_SetConfig+0x4a4>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 800641e:	687b      	ldr	r3, [r7, #4]
 8006420:	685b      	ldr	r3, [r3, #4]
 8006422:	085a      	lsrs	r2, r3, #1
 8006424:	69bb      	ldr	r3, [r7, #24]
 8006426:	441a      	add	r2, r3
 8006428:	687b      	ldr	r3, [r7, #4]
 800642a:	685b      	ldr	r3, [r3, #4]
 800642c:	fbb2 f3f3 	udiv	r3, r2, r3
 8006430:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8006432:	693b      	ldr	r3, [r7, #16]
 8006434:	2b0f      	cmp	r3, #15
 8006436:	d909      	bls.n	800644c <UART_SetConfig+0x4a0>
 8006438:	693b      	ldr	r3, [r7, #16]
 800643a:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800643e:	d205      	bcs.n	800644c <UART_SetConfig+0x4a0>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 8006440:	693b      	ldr	r3, [r7, #16]
 8006442:	b29a      	uxth	r2, r3
 8006444:	687b      	ldr	r3, [r7, #4]
 8006446:	681b      	ldr	r3, [r3, #0]
 8006448:	60da      	str	r2, [r3, #12]
 800644a:	e001      	b.n	8006450 <UART_SetConfig+0x4a4>
      }
      else
      {
        ret = HAL_ERROR;
 800644c:	2301      	movs	r3, #1
 800644e:	77bb      	strb	r3, [r7, #30]
    }
  }


  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8006450:	687b      	ldr	r3, [r7, #4]
 8006452:	2200      	movs	r2, #0
 8006454:	669a      	str	r2, [r3, #104]	@ 0x68
  huart->TxISR = NULL;
 8006456:	687b      	ldr	r3, [r7, #4]
 8006458:	2200      	movs	r2, #0
 800645a:	66da      	str	r2, [r3, #108]	@ 0x6c

  return ret;
 800645c:	7fbb      	ldrb	r3, [r7, #30]
}
 800645e:	4618      	mov	r0, r3
 8006460:	3720      	adds	r7, #32
 8006462:	46bd      	mov	sp, r7
 8006464:	bd80      	pop	{r7, pc}
 8006466:	bf00      	nop
 8006468:	40007c00 	.word	0x40007c00
 800646c:	40023800 	.word	0x40023800
 8006470:	00f42400 	.word	0x00f42400

08006474 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8006474:	b480      	push	{r7}
 8006476:	b083      	sub	sp, #12
 8006478:	af00      	add	r7, sp, #0
 800647a:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 800647c:	687b      	ldr	r3, [r7, #4]
 800647e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006480:	f003 0308 	and.w	r3, r3, #8
 8006484:	2b00      	cmp	r3, #0
 8006486:	d00a      	beq.n	800649e <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8006488:	687b      	ldr	r3, [r7, #4]
 800648a:	681b      	ldr	r3, [r3, #0]
 800648c:	685b      	ldr	r3, [r3, #4]
 800648e:	f423 4100 	bic.w	r1, r3, #32768	@ 0x8000
 8006492:	687b      	ldr	r3, [r7, #4]
 8006494:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8006496:	687b      	ldr	r3, [r7, #4]
 8006498:	681b      	ldr	r3, [r3, #0]
 800649a:	430a      	orrs	r2, r1
 800649c:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 800649e:	687b      	ldr	r3, [r7, #4]
 80064a0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80064a2:	f003 0301 	and.w	r3, r3, #1
 80064a6:	2b00      	cmp	r3, #0
 80064a8:	d00a      	beq.n	80064c0 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 80064aa:	687b      	ldr	r3, [r7, #4]
 80064ac:	681b      	ldr	r3, [r3, #0]
 80064ae:	685b      	ldr	r3, [r3, #4]
 80064b0:	f423 3100 	bic.w	r1, r3, #131072	@ 0x20000
 80064b4:	687b      	ldr	r3, [r7, #4]
 80064b6:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 80064b8:	687b      	ldr	r3, [r7, #4]
 80064ba:	681b      	ldr	r3, [r3, #0]
 80064bc:	430a      	orrs	r2, r1
 80064be:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 80064c0:	687b      	ldr	r3, [r7, #4]
 80064c2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80064c4:	f003 0302 	and.w	r3, r3, #2
 80064c8:	2b00      	cmp	r3, #0
 80064ca:	d00a      	beq.n	80064e2 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 80064cc:	687b      	ldr	r3, [r7, #4]
 80064ce:	681b      	ldr	r3, [r3, #0]
 80064d0:	685b      	ldr	r3, [r3, #4]
 80064d2:	f423 3180 	bic.w	r1, r3, #65536	@ 0x10000
 80064d6:	687b      	ldr	r3, [r7, #4]
 80064d8:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80064da:	687b      	ldr	r3, [r7, #4]
 80064dc:	681b      	ldr	r3, [r3, #0]
 80064de:	430a      	orrs	r2, r1
 80064e0:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 80064e2:	687b      	ldr	r3, [r7, #4]
 80064e4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80064e6:	f003 0304 	and.w	r3, r3, #4
 80064ea:	2b00      	cmp	r3, #0
 80064ec:	d00a      	beq.n	8006504 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 80064ee:	687b      	ldr	r3, [r7, #4]
 80064f0:	681b      	ldr	r3, [r3, #0]
 80064f2:	685b      	ldr	r3, [r3, #4]
 80064f4:	f423 2180 	bic.w	r1, r3, #262144	@ 0x40000
 80064f8:	687b      	ldr	r3, [r7, #4]
 80064fa:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 80064fc:	687b      	ldr	r3, [r7, #4]
 80064fe:	681b      	ldr	r3, [r3, #0]
 8006500:	430a      	orrs	r2, r1
 8006502:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8006504:	687b      	ldr	r3, [r7, #4]
 8006506:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006508:	f003 0310 	and.w	r3, r3, #16
 800650c:	2b00      	cmp	r3, #0
 800650e:	d00a      	beq.n	8006526 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8006510:	687b      	ldr	r3, [r7, #4]
 8006512:	681b      	ldr	r3, [r3, #0]
 8006514:	689b      	ldr	r3, [r3, #8]
 8006516:	f423 5180 	bic.w	r1, r3, #4096	@ 0x1000
 800651a:	687b      	ldr	r3, [r7, #4]
 800651c:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800651e:	687b      	ldr	r3, [r7, #4]
 8006520:	681b      	ldr	r3, [r3, #0]
 8006522:	430a      	orrs	r2, r1
 8006524:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8006526:	687b      	ldr	r3, [r7, #4]
 8006528:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800652a:	f003 0320 	and.w	r3, r3, #32
 800652e:	2b00      	cmp	r3, #0
 8006530:	d00a      	beq.n	8006548 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8006532:	687b      	ldr	r3, [r7, #4]
 8006534:	681b      	ldr	r3, [r3, #0]
 8006536:	689b      	ldr	r3, [r3, #8]
 8006538:	f423 5100 	bic.w	r1, r3, #8192	@ 0x2000
 800653c:	687b      	ldr	r3, [r7, #4]
 800653e:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8006540:	687b      	ldr	r3, [r7, #4]
 8006542:	681b      	ldr	r3, [r3, #0]
 8006544:	430a      	orrs	r2, r1
 8006546:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8006548:	687b      	ldr	r3, [r7, #4]
 800654a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800654c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8006550:	2b00      	cmp	r3, #0
 8006552:	d01a      	beq.n	800658a <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8006554:	687b      	ldr	r3, [r7, #4]
 8006556:	681b      	ldr	r3, [r3, #0]
 8006558:	685b      	ldr	r3, [r3, #4]
 800655a:	f423 1180 	bic.w	r1, r3, #1048576	@ 0x100000
 800655e:	687b      	ldr	r3, [r7, #4]
 8006560:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8006562:	687b      	ldr	r3, [r7, #4]
 8006564:	681b      	ldr	r3, [r3, #0]
 8006566:	430a      	orrs	r2, r1
 8006568:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 800656a:	687b      	ldr	r3, [r7, #4]
 800656c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800656e:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8006572:	d10a      	bne.n	800658a <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8006574:	687b      	ldr	r3, [r7, #4]
 8006576:	681b      	ldr	r3, [r3, #0]
 8006578:	685b      	ldr	r3, [r3, #4]
 800657a:	f423 01c0 	bic.w	r1, r3, #6291456	@ 0x600000
 800657e:	687b      	ldr	r3, [r7, #4]
 8006580:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8006582:	687b      	ldr	r3, [r7, #4]
 8006584:	681b      	ldr	r3, [r3, #0]
 8006586:	430a      	orrs	r2, r1
 8006588:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 800658a:	687b      	ldr	r3, [r7, #4]
 800658c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800658e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8006592:	2b00      	cmp	r3, #0
 8006594:	d00a      	beq.n	80065ac <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8006596:	687b      	ldr	r3, [r7, #4]
 8006598:	681b      	ldr	r3, [r3, #0]
 800659a:	685b      	ldr	r3, [r3, #4]
 800659c:	f423 2100 	bic.w	r1, r3, #524288	@ 0x80000
 80065a0:	687b      	ldr	r3, [r7, #4]
 80065a2:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 80065a4:	687b      	ldr	r3, [r7, #4]
 80065a6:	681b      	ldr	r3, [r3, #0]
 80065a8:	430a      	orrs	r2, r1
 80065aa:	605a      	str	r2, [r3, #4]
  }
}
 80065ac:	bf00      	nop
 80065ae:	370c      	adds	r7, #12
 80065b0:	46bd      	mov	sp, r7
 80065b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80065b6:	4770      	bx	lr

080065b8 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 80065b8:	b580      	push	{r7, lr}
 80065ba:	b098      	sub	sp, #96	@ 0x60
 80065bc:	af02      	add	r7, sp, #8
 80065be:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80065c0:	687b      	ldr	r3, [r7, #4]
 80065c2:	2200      	movs	r2, #0
 80065c4:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 80065c8:	f7fb fc64 	bl	8001e94 <HAL_GetTick>
 80065cc:	6578      	str	r0, [r7, #84]	@ 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 80065ce:	687b      	ldr	r3, [r7, #4]
 80065d0:	681b      	ldr	r3, [r3, #0]
 80065d2:	681b      	ldr	r3, [r3, #0]
 80065d4:	f003 0308 	and.w	r3, r3, #8
 80065d8:	2b08      	cmp	r3, #8
 80065da:	d12e      	bne.n	800663a <UART_CheckIdleState+0x82>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80065dc:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 80065e0:	9300      	str	r3, [sp, #0]
 80065e2:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80065e4:	2200      	movs	r2, #0
 80065e6:	f44f 1100 	mov.w	r1, #2097152	@ 0x200000
 80065ea:	6878      	ldr	r0, [r7, #4]
 80065ec:	f000 f88c 	bl	8006708 <UART_WaitOnFlagUntilTimeout>
 80065f0:	4603      	mov	r3, r0
 80065f2:	2b00      	cmp	r3, #0
 80065f4:	d021      	beq.n	800663a <UART_CheckIdleState+0x82>
    {
      /* Disable TXE interrupt for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE));
 80065f6:	687b      	ldr	r3, [r7, #4]
 80065f8:	681b      	ldr	r3, [r3, #0]
 80065fa:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80065fc:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80065fe:	e853 3f00 	ldrex	r3, [r3]
 8006602:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 8006604:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8006606:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 800660a:	653b      	str	r3, [r7, #80]	@ 0x50
 800660c:	687b      	ldr	r3, [r7, #4]
 800660e:	681b      	ldr	r3, [r3, #0]
 8006610:	461a      	mov	r2, r3
 8006612:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8006614:	647b      	str	r3, [r7, #68]	@ 0x44
 8006616:	643a      	str	r2, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006618:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 800661a:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 800661c:	e841 2300 	strex	r3, r2, [r1]
 8006620:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 8006622:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8006624:	2b00      	cmp	r3, #0
 8006626:	d1e6      	bne.n	80065f6 <UART_CheckIdleState+0x3e>

      huart->gState = HAL_UART_STATE_READY;
 8006628:	687b      	ldr	r3, [r7, #4]
 800662a:	2220      	movs	r2, #32
 800662c:	67da      	str	r2, [r3, #124]	@ 0x7c

      __HAL_UNLOCK(huart);
 800662e:	687b      	ldr	r3, [r7, #4]
 8006630:	2200      	movs	r2, #0
 8006632:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8006636:	2303      	movs	r3, #3
 8006638:	e062      	b.n	8006700 <UART_CheckIdleState+0x148>
    }
  }
#if defined(USART_ISR_REACK)

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 800663a:	687b      	ldr	r3, [r7, #4]
 800663c:	681b      	ldr	r3, [r3, #0]
 800663e:	681b      	ldr	r3, [r3, #0]
 8006640:	f003 0304 	and.w	r3, r3, #4
 8006644:	2b04      	cmp	r3, #4
 8006646:	d149      	bne.n	80066dc <UART_CheckIdleState+0x124>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8006648:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 800664c:	9300      	str	r3, [sp, #0]
 800664e:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8006650:	2200      	movs	r2, #0
 8006652:	f44f 0180 	mov.w	r1, #4194304	@ 0x400000
 8006656:	6878      	ldr	r0, [r7, #4]
 8006658:	f000 f856 	bl	8006708 <UART_WaitOnFlagUntilTimeout>
 800665c:	4603      	mov	r3, r0
 800665e:	2b00      	cmp	r3, #0
 8006660:	d03c      	beq.n	80066dc <UART_CheckIdleState+0x124>
    {
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8006662:	687b      	ldr	r3, [r7, #4]
 8006664:	681b      	ldr	r3, [r3, #0]
 8006666:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006668:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800666a:	e853 3f00 	ldrex	r3, [r3]
 800666e:	623b      	str	r3, [r7, #32]
   return(result);
 8006670:	6a3b      	ldr	r3, [r7, #32]
 8006672:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8006676:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8006678:	687b      	ldr	r3, [r7, #4]
 800667a:	681b      	ldr	r3, [r3, #0]
 800667c:	461a      	mov	r2, r3
 800667e:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8006680:	633b      	str	r3, [r7, #48]	@ 0x30
 8006682:	62fa      	str	r2, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006684:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8006686:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8006688:	e841 2300 	strex	r3, r2, [r1]
 800668c:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 800668e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006690:	2b00      	cmp	r3, #0
 8006692:	d1e6      	bne.n	8006662 <UART_CheckIdleState+0xaa>
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006694:	687b      	ldr	r3, [r7, #4]
 8006696:	681b      	ldr	r3, [r3, #0]
 8006698:	3308      	adds	r3, #8
 800669a:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800669c:	693b      	ldr	r3, [r7, #16]
 800669e:	e853 3f00 	ldrex	r3, [r3]
 80066a2:	60fb      	str	r3, [r7, #12]
   return(result);
 80066a4:	68fb      	ldr	r3, [r7, #12]
 80066a6:	f023 0301 	bic.w	r3, r3, #1
 80066aa:	64bb      	str	r3, [r7, #72]	@ 0x48
 80066ac:	687b      	ldr	r3, [r7, #4]
 80066ae:	681b      	ldr	r3, [r3, #0]
 80066b0:	3308      	adds	r3, #8
 80066b2:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 80066b4:	61fa      	str	r2, [r7, #28]
 80066b6:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80066b8:	69b9      	ldr	r1, [r7, #24]
 80066ba:	69fa      	ldr	r2, [r7, #28]
 80066bc:	e841 2300 	strex	r3, r2, [r1]
 80066c0:	617b      	str	r3, [r7, #20]
   return(result);
 80066c2:	697b      	ldr	r3, [r7, #20]
 80066c4:	2b00      	cmp	r3, #0
 80066c6:	d1e5      	bne.n	8006694 <UART_CheckIdleState+0xdc>

      huart->RxState = HAL_UART_STATE_READY;
 80066c8:	687b      	ldr	r3, [r7, #4]
 80066ca:	2220      	movs	r2, #32
 80066cc:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80

      __HAL_UNLOCK(huart);
 80066d0:	687b      	ldr	r3, [r7, #4]
 80066d2:	2200      	movs	r2, #0
 80066d4:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

      /* Timeout occurred */
      return HAL_TIMEOUT;
 80066d8:	2303      	movs	r3, #3
 80066da:	e011      	b.n	8006700 <UART_CheckIdleState+0x148>
    }
  }
#endif /* USART_ISR_REACK */

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 80066dc:	687b      	ldr	r3, [r7, #4]
 80066de:	2220      	movs	r2, #32
 80066e0:	67da      	str	r2, [r3, #124]	@ 0x7c
  huart->RxState = HAL_UART_STATE_READY;
 80066e2:	687b      	ldr	r3, [r7, #4]
 80066e4:	2220      	movs	r2, #32
 80066e6:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80066ea:	687b      	ldr	r3, [r7, #4]
 80066ec:	2200      	movs	r2, #0
 80066ee:	661a      	str	r2, [r3, #96]	@ 0x60
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 80066f0:	687b      	ldr	r3, [r7, #4]
 80066f2:	2200      	movs	r2, #0
 80066f4:	665a      	str	r2, [r3, #100]	@ 0x64

  __HAL_UNLOCK(huart);
 80066f6:	687b      	ldr	r3, [r7, #4]
 80066f8:	2200      	movs	r2, #0
 80066fa:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

  return HAL_OK;
 80066fe:	2300      	movs	r3, #0
}
 8006700:	4618      	mov	r0, r3
 8006702:	3758      	adds	r7, #88	@ 0x58
 8006704:	46bd      	mov	sp, r7
 8006706:	bd80      	pop	{r7, pc}

08006708 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8006708:	b580      	push	{r7, lr}
 800670a:	b084      	sub	sp, #16
 800670c:	af00      	add	r7, sp, #0
 800670e:	60f8      	str	r0, [r7, #12]
 8006710:	60b9      	str	r1, [r7, #8]
 8006712:	603b      	str	r3, [r7, #0]
 8006714:	4613      	mov	r3, r2
 8006716:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8006718:	e04f      	b.n	80067ba <UART_WaitOnFlagUntilTimeout+0xb2>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800671a:	69bb      	ldr	r3, [r7, #24]
 800671c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006720:	d04b      	beq.n	80067ba <UART_WaitOnFlagUntilTimeout+0xb2>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8006722:	f7fb fbb7 	bl	8001e94 <HAL_GetTick>
 8006726:	4602      	mov	r2, r0
 8006728:	683b      	ldr	r3, [r7, #0]
 800672a:	1ad3      	subs	r3, r2, r3
 800672c:	69ba      	ldr	r2, [r7, #24]
 800672e:	429a      	cmp	r2, r3
 8006730:	d302      	bcc.n	8006738 <UART_WaitOnFlagUntilTimeout+0x30>
 8006732:	69bb      	ldr	r3, [r7, #24]
 8006734:	2b00      	cmp	r3, #0
 8006736:	d101      	bne.n	800673c <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 8006738:	2303      	movs	r3, #3
 800673a:	e04e      	b.n	80067da <UART_WaitOnFlagUntilTimeout+0xd2>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 800673c:	68fb      	ldr	r3, [r7, #12]
 800673e:	681b      	ldr	r3, [r3, #0]
 8006740:	681b      	ldr	r3, [r3, #0]
 8006742:	f003 0304 	and.w	r3, r3, #4
 8006746:	2b00      	cmp	r3, #0
 8006748:	d037      	beq.n	80067ba <UART_WaitOnFlagUntilTimeout+0xb2>
 800674a:	68bb      	ldr	r3, [r7, #8]
 800674c:	2b80      	cmp	r3, #128	@ 0x80
 800674e:	d034      	beq.n	80067ba <UART_WaitOnFlagUntilTimeout+0xb2>
 8006750:	68bb      	ldr	r3, [r7, #8]
 8006752:	2b40      	cmp	r3, #64	@ 0x40
 8006754:	d031      	beq.n	80067ba <UART_WaitOnFlagUntilTimeout+0xb2>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 8006756:	68fb      	ldr	r3, [r7, #12]
 8006758:	681b      	ldr	r3, [r3, #0]
 800675a:	69db      	ldr	r3, [r3, #28]
 800675c:	f003 0308 	and.w	r3, r3, #8
 8006760:	2b08      	cmp	r3, #8
 8006762:	d110      	bne.n	8006786 <UART_WaitOnFlagUntilTimeout+0x7e>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8006764:	68fb      	ldr	r3, [r7, #12]
 8006766:	681b      	ldr	r3, [r3, #0]
 8006768:	2208      	movs	r2, #8
 800676a:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 800676c:	68f8      	ldr	r0, [r7, #12]
 800676e:	f000 f8ff 	bl	8006970 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 8006772:	68fb      	ldr	r3, [r7, #12]
 8006774:	2208      	movs	r2, #8
 8006776:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800677a:	68fb      	ldr	r3, [r7, #12]
 800677c:	2200      	movs	r2, #0
 800677e:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

          return HAL_ERROR;
 8006782:	2301      	movs	r3, #1
 8006784:	e029      	b.n	80067da <UART_WaitOnFlagUntilTimeout+0xd2>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8006786:	68fb      	ldr	r3, [r7, #12]
 8006788:	681b      	ldr	r3, [r3, #0]
 800678a:	69db      	ldr	r3, [r3, #28]
 800678c:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8006790:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8006794:	d111      	bne.n	80067ba <UART_WaitOnFlagUntilTimeout+0xb2>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8006796:	68fb      	ldr	r3, [r7, #12]
 8006798:	681b      	ldr	r3, [r3, #0]
 800679a:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 800679e:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 80067a0:	68f8      	ldr	r0, [r7, #12]
 80067a2:	f000 f8e5 	bl	8006970 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 80067a6:	68fb      	ldr	r3, [r7, #12]
 80067a8:	2220      	movs	r2, #32
 80067aa:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 80067ae:	68fb      	ldr	r3, [r7, #12]
 80067b0:	2200      	movs	r2, #0
 80067b2:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

          return HAL_TIMEOUT;
 80067b6:	2303      	movs	r3, #3
 80067b8:	e00f      	b.n	80067da <UART_WaitOnFlagUntilTimeout+0xd2>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80067ba:	68fb      	ldr	r3, [r7, #12]
 80067bc:	681b      	ldr	r3, [r3, #0]
 80067be:	69da      	ldr	r2, [r3, #28]
 80067c0:	68bb      	ldr	r3, [r7, #8]
 80067c2:	4013      	ands	r3, r2
 80067c4:	68ba      	ldr	r2, [r7, #8]
 80067c6:	429a      	cmp	r2, r3
 80067c8:	bf0c      	ite	eq
 80067ca:	2301      	moveq	r3, #1
 80067cc:	2300      	movne	r3, #0
 80067ce:	b2db      	uxtb	r3, r3
 80067d0:	461a      	mov	r2, r3
 80067d2:	79fb      	ldrb	r3, [r7, #7]
 80067d4:	429a      	cmp	r2, r3
 80067d6:	d0a0      	beq.n	800671a <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 80067d8:	2300      	movs	r3, #0
}
 80067da:	4618      	mov	r0, r3
 80067dc:	3710      	adds	r7, #16
 80067de:	46bd      	mov	sp, r7
 80067e0:	bd80      	pop	{r7, pc}
	...

080067e4 <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 80067e4:	b480      	push	{r7}
 80067e6:	b097      	sub	sp, #92	@ 0x5c
 80067e8:	af00      	add	r7, sp, #0
 80067ea:	60f8      	str	r0, [r7, #12]
 80067ec:	60b9      	str	r1, [r7, #8]
 80067ee:	4613      	mov	r3, r2
 80067f0:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr  = pData;
 80067f2:	68fb      	ldr	r3, [r7, #12]
 80067f4:	68ba      	ldr	r2, [r7, #8]
 80067f6:	655a      	str	r2, [r3, #84]	@ 0x54
  huart->RxXferSize  = Size;
 80067f8:	68fb      	ldr	r3, [r7, #12]
 80067fa:	88fa      	ldrh	r2, [r7, #6]
 80067fc:	f8a3 2058 	strh.w	r2, [r3, #88]	@ 0x58
  huart->RxXferCount = Size;
 8006800:	68fb      	ldr	r3, [r7, #12]
 8006802:	88fa      	ldrh	r2, [r7, #6]
 8006804:	f8a3 205a 	strh.w	r2, [r3, #90]	@ 0x5a
  huart->RxISR       = NULL;
 8006808:	68fb      	ldr	r3, [r7, #12]
 800680a:	2200      	movs	r2, #0
 800680c:	669a      	str	r2, [r3, #104]	@ 0x68

  /* Computation of UART mask to apply to RDR register */
  UART_MASK_COMPUTATION(huart);
 800680e:	68fb      	ldr	r3, [r7, #12]
 8006810:	689b      	ldr	r3, [r3, #8]
 8006812:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8006816:	d10e      	bne.n	8006836 <UART_Start_Receive_IT+0x52>
 8006818:	68fb      	ldr	r3, [r7, #12]
 800681a:	691b      	ldr	r3, [r3, #16]
 800681c:	2b00      	cmp	r3, #0
 800681e:	d105      	bne.n	800682c <UART_Start_Receive_IT+0x48>
 8006820:	68fb      	ldr	r3, [r7, #12]
 8006822:	f240 12ff 	movw	r2, #511	@ 0x1ff
 8006826:	f8a3 205c 	strh.w	r2, [r3, #92]	@ 0x5c
 800682a:	e02d      	b.n	8006888 <UART_Start_Receive_IT+0xa4>
 800682c:	68fb      	ldr	r3, [r7, #12]
 800682e:	22ff      	movs	r2, #255	@ 0xff
 8006830:	f8a3 205c 	strh.w	r2, [r3, #92]	@ 0x5c
 8006834:	e028      	b.n	8006888 <UART_Start_Receive_IT+0xa4>
 8006836:	68fb      	ldr	r3, [r7, #12]
 8006838:	689b      	ldr	r3, [r3, #8]
 800683a:	2b00      	cmp	r3, #0
 800683c:	d10d      	bne.n	800685a <UART_Start_Receive_IT+0x76>
 800683e:	68fb      	ldr	r3, [r7, #12]
 8006840:	691b      	ldr	r3, [r3, #16]
 8006842:	2b00      	cmp	r3, #0
 8006844:	d104      	bne.n	8006850 <UART_Start_Receive_IT+0x6c>
 8006846:	68fb      	ldr	r3, [r7, #12]
 8006848:	22ff      	movs	r2, #255	@ 0xff
 800684a:	f8a3 205c 	strh.w	r2, [r3, #92]	@ 0x5c
 800684e:	e01b      	b.n	8006888 <UART_Start_Receive_IT+0xa4>
 8006850:	68fb      	ldr	r3, [r7, #12]
 8006852:	227f      	movs	r2, #127	@ 0x7f
 8006854:	f8a3 205c 	strh.w	r2, [r3, #92]	@ 0x5c
 8006858:	e016      	b.n	8006888 <UART_Start_Receive_IT+0xa4>
 800685a:	68fb      	ldr	r3, [r7, #12]
 800685c:	689b      	ldr	r3, [r3, #8]
 800685e:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8006862:	d10d      	bne.n	8006880 <UART_Start_Receive_IT+0x9c>
 8006864:	68fb      	ldr	r3, [r7, #12]
 8006866:	691b      	ldr	r3, [r3, #16]
 8006868:	2b00      	cmp	r3, #0
 800686a:	d104      	bne.n	8006876 <UART_Start_Receive_IT+0x92>
 800686c:	68fb      	ldr	r3, [r7, #12]
 800686e:	227f      	movs	r2, #127	@ 0x7f
 8006870:	f8a3 205c 	strh.w	r2, [r3, #92]	@ 0x5c
 8006874:	e008      	b.n	8006888 <UART_Start_Receive_IT+0xa4>
 8006876:	68fb      	ldr	r3, [r7, #12]
 8006878:	223f      	movs	r2, #63	@ 0x3f
 800687a:	f8a3 205c 	strh.w	r2, [r3, #92]	@ 0x5c
 800687e:	e003      	b.n	8006888 <UART_Start_Receive_IT+0xa4>
 8006880:	68fb      	ldr	r3, [r7, #12]
 8006882:	2200      	movs	r2, #0
 8006884:	f8a3 205c 	strh.w	r2, [r3, #92]	@ 0x5c

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8006888:	68fb      	ldr	r3, [r7, #12]
 800688a:	2200      	movs	r2, #0
 800688c:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 8006890:	68fb      	ldr	r3, [r7, #12]
 8006892:	2222      	movs	r2, #34	@ 0x22
 8006894:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006898:	68fb      	ldr	r3, [r7, #12]
 800689a:	681b      	ldr	r3, [r3, #0]
 800689c:	3308      	adds	r3, #8
 800689e:	63fb      	str	r3, [r7, #60]	@ 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80068a0:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80068a2:	e853 3f00 	ldrex	r3, [r3]
 80068a6:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 80068a8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80068aa:	f043 0301 	orr.w	r3, r3, #1
 80068ae:	657b      	str	r3, [r7, #84]	@ 0x54
 80068b0:	68fb      	ldr	r3, [r7, #12]
 80068b2:	681b      	ldr	r3, [r3, #0]
 80068b4:	3308      	adds	r3, #8
 80068b6:	6d7a      	ldr	r2, [r7, #84]	@ 0x54
 80068b8:	64ba      	str	r2, [r7, #72]	@ 0x48
 80068ba:	647b      	str	r3, [r7, #68]	@ 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80068bc:	6c79      	ldr	r1, [r7, #68]	@ 0x44
 80068be:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 80068c0:	e841 2300 	strex	r3, r2, [r1]
 80068c4:	643b      	str	r3, [r7, #64]	@ 0x40
   return(result);
 80068c6:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80068c8:	2b00      	cmp	r3, #0
 80068ca:	d1e5      	bne.n	8006898 <UART_Start_Receive_IT+0xb4>

  /* Set the Rx ISR function pointer according to the data word length */
  if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80068cc:	68fb      	ldr	r3, [r7, #12]
 80068ce:	689b      	ldr	r3, [r3, #8]
 80068d0:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80068d4:	d107      	bne.n	80068e6 <UART_Start_Receive_IT+0x102>
 80068d6:	68fb      	ldr	r3, [r7, #12]
 80068d8:	691b      	ldr	r3, [r3, #16]
 80068da:	2b00      	cmp	r3, #0
 80068dc:	d103      	bne.n	80068e6 <UART_Start_Receive_IT+0x102>
  {
    huart->RxISR = UART_RxISR_16BIT;
 80068de:	68fb      	ldr	r3, [r7, #12]
 80068e0:	4a21      	ldr	r2, [pc, #132]	@ (8006968 <UART_Start_Receive_IT+0x184>)
 80068e2:	669a      	str	r2, [r3, #104]	@ 0x68
 80068e4:	e002      	b.n	80068ec <UART_Start_Receive_IT+0x108>
  }
  else
  {
    huart->RxISR = UART_RxISR_8BIT;
 80068e6:	68fb      	ldr	r3, [r7, #12]
 80068e8:	4a20      	ldr	r2, [pc, #128]	@ (800696c <UART_Start_Receive_IT+0x188>)
 80068ea:	669a      	str	r2, [r3, #104]	@ 0x68
  }

  /* Enable the UART Parity Error interrupt and Data Register Not Empty interrupt */
  if (huart->Init.Parity != UART_PARITY_NONE)
 80068ec:	68fb      	ldr	r3, [r7, #12]
 80068ee:	691b      	ldr	r3, [r3, #16]
 80068f0:	2b00      	cmp	r3, #0
 80068f2:	d019      	beq.n	8006928 <UART_Start_Receive_IT+0x144>
  {
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE | USART_CR1_RXNEIE);
 80068f4:	68fb      	ldr	r3, [r7, #12]
 80068f6:	681b      	ldr	r3, [r3, #0]
 80068f8:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80068fa:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80068fc:	e853 3f00 	ldrex	r3, [r3]
 8006900:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8006902:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006904:	f443 7390 	orr.w	r3, r3, #288	@ 0x120
 8006908:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800690a:	68fb      	ldr	r3, [r7, #12]
 800690c:	681b      	ldr	r3, [r3, #0]
 800690e:	461a      	mov	r2, r3
 8006910:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8006912:	637b      	str	r3, [r7, #52]	@ 0x34
 8006914:	633a      	str	r2, [r7, #48]	@ 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006916:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 8006918:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 800691a:	e841 2300 	strex	r3, r2, [r1]
 800691e:	62fb      	str	r3, [r7, #44]	@ 0x2c
   return(result);
 8006920:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006922:	2b00      	cmp	r3, #0
 8006924:	d1e6      	bne.n	80068f4 <UART_Start_Receive_IT+0x110>
 8006926:	e018      	b.n	800695a <UART_Start_Receive_IT+0x176>
  }
  else
  {
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE);
 8006928:	68fb      	ldr	r3, [r7, #12]
 800692a:	681b      	ldr	r3, [r3, #0]
 800692c:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800692e:	697b      	ldr	r3, [r7, #20]
 8006930:	e853 3f00 	ldrex	r3, [r3]
 8006934:	613b      	str	r3, [r7, #16]
   return(result);
 8006936:	693b      	ldr	r3, [r7, #16]
 8006938:	f043 0320 	orr.w	r3, r3, #32
 800693c:	653b      	str	r3, [r7, #80]	@ 0x50
 800693e:	68fb      	ldr	r3, [r7, #12]
 8006940:	681b      	ldr	r3, [r3, #0]
 8006942:	461a      	mov	r2, r3
 8006944:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8006946:	623b      	str	r3, [r7, #32]
 8006948:	61fa      	str	r2, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800694a:	69f9      	ldr	r1, [r7, #28]
 800694c:	6a3a      	ldr	r2, [r7, #32]
 800694e:	e841 2300 	strex	r3, r2, [r1]
 8006952:	61bb      	str	r3, [r7, #24]
   return(result);
 8006954:	69bb      	ldr	r3, [r7, #24]
 8006956:	2b00      	cmp	r3, #0
 8006958:	d1e6      	bne.n	8006928 <UART_Start_Receive_IT+0x144>
  }
  return HAL_OK;
 800695a:	2300      	movs	r3, #0
}
 800695c:	4618      	mov	r0, r3
 800695e:	375c      	adds	r7, #92	@ 0x5c
 8006960:	46bd      	mov	sp, r7
 8006962:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006966:	4770      	bx	lr
 8006968:	08006c61 	.word	0x08006c61
 800696c:	08006ab9 	.word	0x08006ab9

08006970 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8006970:	b480      	push	{r7}
 8006972:	b095      	sub	sp, #84	@ 0x54
 8006974:	af00      	add	r7, sp, #0
 8006976:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8006978:	687b      	ldr	r3, [r7, #4]
 800697a:	681b      	ldr	r3, [r3, #0]
 800697c:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800697e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8006980:	e853 3f00 	ldrex	r3, [r3]
 8006984:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 8006986:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006988:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 800698c:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800698e:	687b      	ldr	r3, [r7, #4]
 8006990:	681b      	ldr	r3, [r3, #0]
 8006992:	461a      	mov	r2, r3
 8006994:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8006996:	643b      	str	r3, [r7, #64]	@ 0x40
 8006998:	63fa      	str	r2, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800699a:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 800699c:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 800699e:	e841 2300 	strex	r3, r2, [r1]
 80069a2:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 80069a4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80069a6:	2b00      	cmp	r3, #0
 80069a8:	d1e6      	bne.n	8006978 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80069aa:	687b      	ldr	r3, [r7, #4]
 80069ac:	681b      	ldr	r3, [r3, #0]
 80069ae:	3308      	adds	r3, #8
 80069b0:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80069b2:	6a3b      	ldr	r3, [r7, #32]
 80069b4:	e853 3f00 	ldrex	r3, [r3]
 80069b8:	61fb      	str	r3, [r7, #28]
   return(result);
 80069ba:	69fb      	ldr	r3, [r7, #28]
 80069bc:	f023 0301 	bic.w	r3, r3, #1
 80069c0:	64bb      	str	r3, [r7, #72]	@ 0x48
 80069c2:	687b      	ldr	r3, [r7, #4]
 80069c4:	681b      	ldr	r3, [r3, #0]
 80069c6:	3308      	adds	r3, #8
 80069c8:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 80069ca:	62fa      	str	r2, [r7, #44]	@ 0x2c
 80069cc:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80069ce:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 80069d0:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 80069d2:	e841 2300 	strex	r3, r2, [r1]
 80069d6:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 80069d8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80069da:	2b00      	cmp	r3, #0
 80069dc:	d1e5      	bne.n	80069aa <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80069de:	687b      	ldr	r3, [r7, #4]
 80069e0:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80069e2:	2b01      	cmp	r3, #1
 80069e4:	d118      	bne.n	8006a18 <UART_EndRxTransfer+0xa8>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80069e6:	687b      	ldr	r3, [r7, #4]
 80069e8:	681b      	ldr	r3, [r3, #0]
 80069ea:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80069ec:	68fb      	ldr	r3, [r7, #12]
 80069ee:	e853 3f00 	ldrex	r3, [r3]
 80069f2:	60bb      	str	r3, [r7, #8]
   return(result);
 80069f4:	68bb      	ldr	r3, [r7, #8]
 80069f6:	f023 0310 	bic.w	r3, r3, #16
 80069fa:	647b      	str	r3, [r7, #68]	@ 0x44
 80069fc:	687b      	ldr	r3, [r7, #4]
 80069fe:	681b      	ldr	r3, [r3, #0]
 8006a00:	461a      	mov	r2, r3
 8006a02:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8006a04:	61bb      	str	r3, [r7, #24]
 8006a06:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006a08:	6979      	ldr	r1, [r7, #20]
 8006a0a:	69ba      	ldr	r2, [r7, #24]
 8006a0c:	e841 2300 	strex	r3, r2, [r1]
 8006a10:	613b      	str	r3, [r7, #16]
   return(result);
 8006a12:	693b      	ldr	r3, [r7, #16]
 8006a14:	2b00      	cmp	r3, #0
 8006a16:	d1e6      	bne.n	80069e6 <UART_EndRxTransfer+0x76>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8006a18:	687b      	ldr	r3, [r7, #4]
 8006a1a:	2220      	movs	r2, #32
 8006a1c:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006a20:	687b      	ldr	r3, [r7, #4]
 8006a22:	2200      	movs	r2, #0
 8006a24:	661a      	str	r2, [r3, #96]	@ 0x60

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 8006a26:	687b      	ldr	r3, [r7, #4]
 8006a28:	2200      	movs	r2, #0
 8006a2a:	669a      	str	r2, [r3, #104]	@ 0x68
}
 8006a2c:	bf00      	nop
 8006a2e:	3754      	adds	r7, #84	@ 0x54
 8006a30:	46bd      	mov	sp, r7
 8006a32:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006a36:	4770      	bx	lr

08006a38 <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8006a38:	b580      	push	{r7, lr}
 8006a3a:	b084      	sub	sp, #16
 8006a3c:	af00      	add	r7, sp, #0
 8006a3e:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8006a40:	687b      	ldr	r3, [r7, #4]
 8006a42:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006a44:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 8006a46:	68fb      	ldr	r3, [r7, #12]
 8006a48:	2200      	movs	r2, #0
 8006a4a:	f8a3 205a 	strh.w	r2, [r3, #90]	@ 0x5a
  huart->TxXferCount = 0U;
 8006a4e:	68fb      	ldr	r3, [r7, #12]
 8006a50:	2200      	movs	r2, #0
 8006a52:	f8a3 2052 	strh.w	r2, [r3, #82]	@ 0x52
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8006a56:	68f8      	ldr	r0, [r7, #12]
 8006a58:	f7ff fa88 	bl	8005f6c <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8006a5c:	bf00      	nop
 8006a5e:	3710      	adds	r7, #16
 8006a60:	46bd      	mov	sp, r7
 8006a62:	bd80      	pop	{r7, pc}

08006a64 <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8006a64:	b580      	push	{r7, lr}
 8006a66:	b088      	sub	sp, #32
 8006a68:	af00      	add	r7, sp, #0
 8006a6a:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8006a6c:	687b      	ldr	r3, [r7, #4]
 8006a6e:	681b      	ldr	r3, [r3, #0]
 8006a70:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006a72:	68fb      	ldr	r3, [r7, #12]
 8006a74:	e853 3f00 	ldrex	r3, [r3]
 8006a78:	60bb      	str	r3, [r7, #8]
   return(result);
 8006a7a:	68bb      	ldr	r3, [r7, #8]
 8006a7c:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8006a80:	61fb      	str	r3, [r7, #28]
 8006a82:	687b      	ldr	r3, [r7, #4]
 8006a84:	681b      	ldr	r3, [r3, #0]
 8006a86:	461a      	mov	r2, r3
 8006a88:	69fb      	ldr	r3, [r7, #28]
 8006a8a:	61bb      	str	r3, [r7, #24]
 8006a8c:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006a8e:	6979      	ldr	r1, [r7, #20]
 8006a90:	69ba      	ldr	r2, [r7, #24]
 8006a92:	e841 2300 	strex	r3, r2, [r1]
 8006a96:	613b      	str	r3, [r7, #16]
   return(result);
 8006a98:	693b      	ldr	r3, [r7, #16]
 8006a9a:	2b00      	cmp	r3, #0
 8006a9c:	d1e6      	bne.n	8006a6c <UART_EndTransmit_IT+0x8>

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8006a9e:	687b      	ldr	r3, [r7, #4]
 8006aa0:	2220      	movs	r2, #32
 8006aa2:	67da      	str	r2, [r3, #124]	@ 0x7c

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 8006aa4:	687b      	ldr	r3, [r7, #4]
 8006aa6:	2200      	movs	r2, #0
 8006aa8:	66da      	str	r2, [r3, #108]	@ 0x6c
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8006aaa:	6878      	ldr	r0, [r7, #4]
 8006aac:	f7ff fa54 	bl	8005f58 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8006ab0:	bf00      	nop
 8006ab2:	3720      	adds	r7, #32
 8006ab4:	46bd      	mov	sp, r7
 8006ab6:	bd80      	pop	{r7, pc}

08006ab8 <UART_RxISR_8BIT>:
  * @brief RX interrupt handler for 7 or 8 bits data word length .
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_8BIT(UART_HandleTypeDef *huart)
{
 8006ab8:	b580      	push	{r7, lr}
 8006aba:	b09c      	sub	sp, #112	@ 0x70
 8006abc:	af00      	add	r7, sp, #0
 8006abe:	6078      	str	r0, [r7, #4]
  uint16_t uhMask = huart->Mask;
 8006ac0:	687b      	ldr	r3, [r7, #4]
 8006ac2:	f8b3 305c 	ldrh.w	r3, [r3, #92]	@ 0x5c
 8006ac6:	f8a7 306e 	strh.w	r3, [r7, #110]	@ 0x6e
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8006aca:	687b      	ldr	r3, [r7, #4]
 8006acc:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8006ad0:	2b22      	cmp	r3, #34	@ 0x22
 8006ad2:	f040 80b9 	bne.w	8006c48 <UART_RxISR_8BIT+0x190>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 8006ad6:	687b      	ldr	r3, [r7, #4]
 8006ad8:	681b      	ldr	r3, [r3, #0]
 8006ada:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006adc:	f8a7 306c 	strh.w	r3, [r7, #108]	@ 0x6c
    *huart->pRxBuffPtr = (uint8_t)(uhdata & (uint8_t)uhMask);
 8006ae0:	f8b7 306c 	ldrh.w	r3, [r7, #108]	@ 0x6c
 8006ae4:	b2d9      	uxtb	r1, r3
 8006ae6:	f8b7 306e 	ldrh.w	r3, [r7, #110]	@ 0x6e
 8006aea:	b2da      	uxtb	r2, r3
 8006aec:	687b      	ldr	r3, [r7, #4]
 8006aee:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8006af0:	400a      	ands	r2, r1
 8006af2:	b2d2      	uxtb	r2, r2
 8006af4:	701a      	strb	r2, [r3, #0]
    huart->pRxBuffPtr++;
 8006af6:	687b      	ldr	r3, [r7, #4]
 8006af8:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8006afa:	1c5a      	adds	r2, r3, #1
 8006afc:	687b      	ldr	r3, [r7, #4]
 8006afe:	655a      	str	r2, [r3, #84]	@ 0x54
    huart->RxXferCount--;
 8006b00:	687b      	ldr	r3, [r7, #4]
 8006b02:	f8b3 305a 	ldrh.w	r3, [r3, #90]	@ 0x5a
 8006b06:	b29b      	uxth	r3, r3
 8006b08:	3b01      	subs	r3, #1
 8006b0a:	b29a      	uxth	r2, r3
 8006b0c:	687b      	ldr	r3, [r7, #4]
 8006b0e:	f8a3 205a 	strh.w	r2, [r3, #90]	@ 0x5a

    if (huart->RxXferCount == 0U)
 8006b12:	687b      	ldr	r3, [r7, #4]
 8006b14:	f8b3 305a 	ldrh.w	r3, [r3, #90]	@ 0x5a
 8006b18:	b29b      	uxth	r3, r3
 8006b1a:	2b00      	cmp	r3, #0
 8006b1c:	f040 809c 	bne.w	8006c58 <UART_RxISR_8BIT+0x1a0>
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupts */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8006b20:	687b      	ldr	r3, [r7, #4]
 8006b22:	681b      	ldr	r3, [r3, #0]
 8006b24:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006b26:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8006b28:	e853 3f00 	ldrex	r3, [r3]
 8006b2c:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 8006b2e:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8006b30:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8006b34:	66bb      	str	r3, [r7, #104]	@ 0x68
 8006b36:	687b      	ldr	r3, [r7, #4]
 8006b38:	681b      	ldr	r3, [r3, #0]
 8006b3a:	461a      	mov	r2, r3
 8006b3c:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8006b3e:	65bb      	str	r3, [r7, #88]	@ 0x58
 8006b40:	657a      	str	r2, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006b42:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 8006b44:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 8006b46:	e841 2300 	strex	r3, r2, [r1]
 8006b4a:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 8006b4c:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8006b4e:	2b00      	cmp	r3, #0
 8006b50:	d1e6      	bne.n	8006b20 <UART_RxISR_8BIT+0x68>

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006b52:	687b      	ldr	r3, [r7, #4]
 8006b54:	681b      	ldr	r3, [r3, #0]
 8006b56:	3308      	adds	r3, #8
 8006b58:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006b5a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006b5c:	e853 3f00 	ldrex	r3, [r3]
 8006b60:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 8006b62:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8006b64:	f023 0301 	bic.w	r3, r3, #1
 8006b68:	667b      	str	r3, [r7, #100]	@ 0x64
 8006b6a:	687b      	ldr	r3, [r7, #4]
 8006b6c:	681b      	ldr	r3, [r3, #0]
 8006b6e:	3308      	adds	r3, #8
 8006b70:	6e7a      	ldr	r2, [r7, #100]	@ 0x64
 8006b72:	647a      	str	r2, [r7, #68]	@ 0x44
 8006b74:	643b      	str	r3, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006b76:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 8006b78:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8006b7a:	e841 2300 	strex	r3, r2, [r1]
 8006b7e:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 8006b80:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8006b82:	2b00      	cmp	r3, #0
 8006b84:	d1e5      	bne.n	8006b52 <UART_RxISR_8BIT+0x9a>

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8006b86:	687b      	ldr	r3, [r7, #4]
 8006b88:	2220      	movs	r2, #32
 8006b8a:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 8006b8e:	687b      	ldr	r3, [r7, #4]
 8006b90:	2200      	movs	r2, #0
 8006b92:	669a      	str	r2, [r3, #104]	@ 0x68

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 8006b94:	687b      	ldr	r3, [r7, #4]
 8006b96:	2200      	movs	r2, #0
 8006b98:	665a      	str	r2, [r3, #100]	@ 0x64

      /* Check that USART RTOEN bit is set */
      if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 8006b9a:	687b      	ldr	r3, [r7, #4]
 8006b9c:	681b      	ldr	r3, [r3, #0]
 8006b9e:	685b      	ldr	r3, [r3, #4]
 8006ba0:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8006ba4:	2b00      	cmp	r3, #0
 8006ba6:	d018      	beq.n	8006bda <UART_RxISR_8BIT+0x122>
      {
        /* Enable the UART Receiver Timeout Interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 8006ba8:	687b      	ldr	r3, [r7, #4]
 8006baa:	681b      	ldr	r3, [r3, #0]
 8006bac:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006bae:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006bb0:	e853 3f00 	ldrex	r3, [r3]
 8006bb4:	623b      	str	r3, [r7, #32]
   return(result);
 8006bb6:	6a3b      	ldr	r3, [r7, #32]
 8006bb8:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 8006bbc:	663b      	str	r3, [r7, #96]	@ 0x60
 8006bbe:	687b      	ldr	r3, [r7, #4]
 8006bc0:	681b      	ldr	r3, [r3, #0]
 8006bc2:	461a      	mov	r2, r3
 8006bc4:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8006bc6:	633b      	str	r3, [r7, #48]	@ 0x30
 8006bc8:	62fa      	str	r2, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006bca:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8006bcc:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8006bce:	e841 2300 	strex	r3, r2, [r1]
 8006bd2:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 8006bd4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006bd6:	2b00      	cmp	r3, #0
 8006bd8:	d1e6      	bne.n	8006ba8 <UART_RxISR_8BIT+0xf0>
      }

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8006bda:	687b      	ldr	r3, [r7, #4]
 8006bdc:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8006bde:	2b01      	cmp	r3, #1
 8006be0:	d12e      	bne.n	8006c40 <UART_RxISR_8BIT+0x188>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006be2:	687b      	ldr	r3, [r7, #4]
 8006be4:	2200      	movs	r2, #0
 8006be6:	661a      	str	r2, [r3, #96]	@ 0x60

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8006be8:	687b      	ldr	r3, [r7, #4]
 8006bea:	681b      	ldr	r3, [r3, #0]
 8006bec:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006bee:	693b      	ldr	r3, [r7, #16]
 8006bf0:	e853 3f00 	ldrex	r3, [r3]
 8006bf4:	60fb      	str	r3, [r7, #12]
   return(result);
 8006bf6:	68fb      	ldr	r3, [r7, #12]
 8006bf8:	f023 0310 	bic.w	r3, r3, #16
 8006bfc:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8006bfe:	687b      	ldr	r3, [r7, #4]
 8006c00:	681b      	ldr	r3, [r3, #0]
 8006c02:	461a      	mov	r2, r3
 8006c04:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8006c06:	61fb      	str	r3, [r7, #28]
 8006c08:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006c0a:	69b9      	ldr	r1, [r7, #24]
 8006c0c:	69fa      	ldr	r2, [r7, #28]
 8006c0e:	e841 2300 	strex	r3, r2, [r1]
 8006c12:	617b      	str	r3, [r7, #20]
   return(result);
 8006c14:	697b      	ldr	r3, [r7, #20]
 8006c16:	2b00      	cmp	r3, #0
 8006c18:	d1e6      	bne.n	8006be8 <UART_RxISR_8BIT+0x130>

        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 8006c1a:	687b      	ldr	r3, [r7, #4]
 8006c1c:	681b      	ldr	r3, [r3, #0]
 8006c1e:	69db      	ldr	r3, [r3, #28]
 8006c20:	f003 0310 	and.w	r3, r3, #16
 8006c24:	2b10      	cmp	r3, #16
 8006c26:	d103      	bne.n	8006c30 <UART_RxISR_8BIT+0x178>
        {
          /* Clear IDLE Flag */
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8006c28:	687b      	ldr	r3, [r7, #4]
 8006c2a:	681b      	ldr	r3, [r3, #0]
 8006c2c:	2210      	movs	r2, #16
 8006c2e:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8006c30:	687b      	ldr	r3, [r7, #4]
 8006c32:	f8b3 3058 	ldrh.w	r3, [r3, #88]	@ 0x58
 8006c36:	4619      	mov	r1, r3
 8006c38:	6878      	ldr	r0, [r7, #4]
 8006c3a:	f7ff f9a1 	bl	8005f80 <HAL_UARTEx_RxEventCallback>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 8006c3e:	e00b      	b.n	8006c58 <UART_RxISR_8BIT+0x1a0>
        HAL_UART_RxCpltCallback(huart);
 8006c40:	6878      	ldr	r0, [r7, #4]
 8006c42:	f7fa f863 	bl	8000d0c <HAL_UART_RxCpltCallback>
}
 8006c46:	e007      	b.n	8006c58 <UART_RxISR_8BIT+0x1a0>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 8006c48:	687b      	ldr	r3, [r7, #4]
 8006c4a:	681b      	ldr	r3, [r3, #0]
 8006c4c:	699a      	ldr	r2, [r3, #24]
 8006c4e:	687b      	ldr	r3, [r7, #4]
 8006c50:	681b      	ldr	r3, [r3, #0]
 8006c52:	f042 0208 	orr.w	r2, r2, #8
 8006c56:	619a      	str	r2, [r3, #24]
}
 8006c58:	bf00      	nop
 8006c5a:	3770      	adds	r7, #112	@ 0x70
 8006c5c:	46bd      	mov	sp, r7
 8006c5e:	bd80      	pop	{r7, pc}

08006c60 <UART_RxISR_16BIT>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_16BIT(UART_HandleTypeDef *huart)
{
 8006c60:	b580      	push	{r7, lr}
 8006c62:	b09c      	sub	sp, #112	@ 0x70
 8006c64:	af00      	add	r7, sp, #0
 8006c66:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;
  uint16_t uhMask = huart->Mask;
 8006c68:	687b      	ldr	r3, [r7, #4]
 8006c6a:	f8b3 305c 	ldrh.w	r3, [r3, #92]	@ 0x5c
 8006c6e:	f8a7 306e 	strh.w	r3, [r7, #110]	@ 0x6e
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8006c72:	687b      	ldr	r3, [r7, #4]
 8006c74:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8006c78:	2b22      	cmp	r3, #34	@ 0x22
 8006c7a:	f040 80b9 	bne.w	8006df0 <UART_RxISR_16BIT+0x190>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 8006c7e:	687b      	ldr	r3, [r7, #4]
 8006c80:	681b      	ldr	r3, [r3, #0]
 8006c82:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006c84:	f8a7 306c 	strh.w	r3, [r7, #108]	@ 0x6c
    tmp = (uint16_t *) huart->pRxBuffPtr ;
 8006c88:	687b      	ldr	r3, [r7, #4]
 8006c8a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8006c8c:	66bb      	str	r3, [r7, #104]	@ 0x68
    *tmp = (uint16_t)(uhdata & uhMask);
 8006c8e:	f8b7 206c 	ldrh.w	r2, [r7, #108]	@ 0x6c
 8006c92:	f8b7 306e 	ldrh.w	r3, [r7, #110]	@ 0x6e
 8006c96:	4013      	ands	r3, r2
 8006c98:	b29a      	uxth	r2, r3
 8006c9a:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8006c9c:	801a      	strh	r2, [r3, #0]
    huart->pRxBuffPtr += 2U;
 8006c9e:	687b      	ldr	r3, [r7, #4]
 8006ca0:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8006ca2:	1c9a      	adds	r2, r3, #2
 8006ca4:	687b      	ldr	r3, [r7, #4]
 8006ca6:	655a      	str	r2, [r3, #84]	@ 0x54
    huart->RxXferCount--;
 8006ca8:	687b      	ldr	r3, [r7, #4]
 8006caa:	f8b3 305a 	ldrh.w	r3, [r3, #90]	@ 0x5a
 8006cae:	b29b      	uxth	r3, r3
 8006cb0:	3b01      	subs	r3, #1
 8006cb2:	b29a      	uxth	r2, r3
 8006cb4:	687b      	ldr	r3, [r7, #4]
 8006cb6:	f8a3 205a 	strh.w	r2, [r3, #90]	@ 0x5a

    if (huart->RxXferCount == 0U)
 8006cba:	687b      	ldr	r3, [r7, #4]
 8006cbc:	f8b3 305a 	ldrh.w	r3, [r3, #90]	@ 0x5a
 8006cc0:	b29b      	uxth	r3, r3
 8006cc2:	2b00      	cmp	r3, #0
 8006cc4:	f040 809c 	bne.w	8006e00 <UART_RxISR_16BIT+0x1a0>
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupt*/
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8006cc8:	687b      	ldr	r3, [r7, #4]
 8006cca:	681b      	ldr	r3, [r3, #0]
 8006ccc:	64bb      	str	r3, [r7, #72]	@ 0x48
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006cce:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8006cd0:	e853 3f00 	ldrex	r3, [r3]
 8006cd4:	647b      	str	r3, [r7, #68]	@ 0x44
   return(result);
 8006cd6:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8006cd8:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8006cdc:	667b      	str	r3, [r7, #100]	@ 0x64
 8006cde:	687b      	ldr	r3, [r7, #4]
 8006ce0:	681b      	ldr	r3, [r3, #0]
 8006ce2:	461a      	mov	r2, r3
 8006ce4:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8006ce6:	657b      	str	r3, [r7, #84]	@ 0x54
 8006ce8:	653a      	str	r2, [r7, #80]	@ 0x50
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006cea:	6d39      	ldr	r1, [r7, #80]	@ 0x50
 8006cec:	6d7a      	ldr	r2, [r7, #84]	@ 0x54
 8006cee:	e841 2300 	strex	r3, r2, [r1]
 8006cf2:	64fb      	str	r3, [r7, #76]	@ 0x4c
   return(result);
 8006cf4:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8006cf6:	2b00      	cmp	r3, #0
 8006cf8:	d1e6      	bne.n	8006cc8 <UART_RxISR_16BIT+0x68>

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006cfa:	687b      	ldr	r3, [r7, #4]
 8006cfc:	681b      	ldr	r3, [r3, #0]
 8006cfe:	3308      	adds	r3, #8
 8006d00:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006d02:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8006d04:	e853 3f00 	ldrex	r3, [r3]
 8006d08:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 8006d0a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006d0c:	f023 0301 	bic.w	r3, r3, #1
 8006d10:	663b      	str	r3, [r7, #96]	@ 0x60
 8006d12:	687b      	ldr	r3, [r7, #4]
 8006d14:	681b      	ldr	r3, [r3, #0]
 8006d16:	3308      	adds	r3, #8
 8006d18:	6e3a      	ldr	r2, [r7, #96]	@ 0x60
 8006d1a:	643a      	str	r2, [r7, #64]	@ 0x40
 8006d1c:	63fb      	str	r3, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006d1e:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 8006d20:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8006d22:	e841 2300 	strex	r3, r2, [r1]
 8006d26:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 8006d28:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006d2a:	2b00      	cmp	r3, #0
 8006d2c:	d1e5      	bne.n	8006cfa <UART_RxISR_16BIT+0x9a>

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8006d2e:	687b      	ldr	r3, [r7, #4]
 8006d30:	2220      	movs	r2, #32
 8006d32:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 8006d36:	687b      	ldr	r3, [r7, #4]
 8006d38:	2200      	movs	r2, #0
 8006d3a:	669a      	str	r2, [r3, #104]	@ 0x68

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 8006d3c:	687b      	ldr	r3, [r7, #4]
 8006d3e:	2200      	movs	r2, #0
 8006d40:	665a      	str	r2, [r3, #100]	@ 0x64

      /* Check that USART RTOEN bit is set */
      if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 8006d42:	687b      	ldr	r3, [r7, #4]
 8006d44:	681b      	ldr	r3, [r3, #0]
 8006d46:	685b      	ldr	r3, [r3, #4]
 8006d48:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8006d4c:	2b00      	cmp	r3, #0
 8006d4e:	d018      	beq.n	8006d82 <UART_RxISR_16BIT+0x122>
      {
        /* Enable the UART Receiver Timeout Interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 8006d50:	687b      	ldr	r3, [r7, #4]
 8006d52:	681b      	ldr	r3, [r3, #0]
 8006d54:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006d56:	6a3b      	ldr	r3, [r7, #32]
 8006d58:	e853 3f00 	ldrex	r3, [r3]
 8006d5c:	61fb      	str	r3, [r7, #28]
   return(result);
 8006d5e:	69fb      	ldr	r3, [r7, #28]
 8006d60:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 8006d64:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8006d66:	687b      	ldr	r3, [r7, #4]
 8006d68:	681b      	ldr	r3, [r3, #0]
 8006d6a:	461a      	mov	r2, r3
 8006d6c:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8006d6e:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8006d70:	62ba      	str	r2, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006d72:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8006d74:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8006d76:	e841 2300 	strex	r3, r2, [r1]
 8006d7a:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8006d7c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006d7e:	2b00      	cmp	r3, #0
 8006d80:	d1e6      	bne.n	8006d50 <UART_RxISR_16BIT+0xf0>
      }

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8006d82:	687b      	ldr	r3, [r7, #4]
 8006d84:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8006d86:	2b01      	cmp	r3, #1
 8006d88:	d12e      	bne.n	8006de8 <UART_RxISR_16BIT+0x188>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006d8a:	687b      	ldr	r3, [r7, #4]
 8006d8c:	2200      	movs	r2, #0
 8006d8e:	661a      	str	r2, [r3, #96]	@ 0x60

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8006d90:	687b      	ldr	r3, [r7, #4]
 8006d92:	681b      	ldr	r3, [r3, #0]
 8006d94:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006d96:	68fb      	ldr	r3, [r7, #12]
 8006d98:	e853 3f00 	ldrex	r3, [r3]
 8006d9c:	60bb      	str	r3, [r7, #8]
   return(result);
 8006d9e:	68bb      	ldr	r3, [r7, #8]
 8006da0:	f023 0310 	bic.w	r3, r3, #16
 8006da4:	65bb      	str	r3, [r7, #88]	@ 0x58
 8006da6:	687b      	ldr	r3, [r7, #4]
 8006da8:	681b      	ldr	r3, [r3, #0]
 8006daa:	461a      	mov	r2, r3
 8006dac:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8006dae:	61bb      	str	r3, [r7, #24]
 8006db0:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006db2:	6979      	ldr	r1, [r7, #20]
 8006db4:	69ba      	ldr	r2, [r7, #24]
 8006db6:	e841 2300 	strex	r3, r2, [r1]
 8006dba:	613b      	str	r3, [r7, #16]
   return(result);
 8006dbc:	693b      	ldr	r3, [r7, #16]
 8006dbe:	2b00      	cmp	r3, #0
 8006dc0:	d1e6      	bne.n	8006d90 <UART_RxISR_16BIT+0x130>

        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 8006dc2:	687b      	ldr	r3, [r7, #4]
 8006dc4:	681b      	ldr	r3, [r3, #0]
 8006dc6:	69db      	ldr	r3, [r3, #28]
 8006dc8:	f003 0310 	and.w	r3, r3, #16
 8006dcc:	2b10      	cmp	r3, #16
 8006dce:	d103      	bne.n	8006dd8 <UART_RxISR_16BIT+0x178>
        {
          /* Clear IDLE Flag */
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8006dd0:	687b      	ldr	r3, [r7, #4]
 8006dd2:	681b      	ldr	r3, [r3, #0]
 8006dd4:	2210      	movs	r2, #16
 8006dd6:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8006dd8:	687b      	ldr	r3, [r7, #4]
 8006dda:	f8b3 3058 	ldrh.w	r3, [r3, #88]	@ 0x58
 8006dde:	4619      	mov	r1, r3
 8006de0:	6878      	ldr	r0, [r7, #4]
 8006de2:	f7ff f8cd 	bl	8005f80 <HAL_UARTEx_RxEventCallback>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 8006de6:	e00b      	b.n	8006e00 <UART_RxISR_16BIT+0x1a0>
        HAL_UART_RxCpltCallback(huart);
 8006de8:	6878      	ldr	r0, [r7, #4]
 8006dea:	f7f9 ff8f 	bl	8000d0c <HAL_UART_RxCpltCallback>
}
 8006dee:	e007      	b.n	8006e00 <UART_RxISR_16BIT+0x1a0>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 8006df0:	687b      	ldr	r3, [r7, #4]
 8006df2:	681b      	ldr	r3, [r3, #0]
 8006df4:	699a      	ldr	r2, [r3, #24]
 8006df6:	687b      	ldr	r3, [r7, #4]
 8006df8:	681b      	ldr	r3, [r3, #0]
 8006dfa:	f042 0208 	orr.w	r2, r2, #8
 8006dfe:	619a      	str	r2, [r3, #24]
}
 8006e00:	bf00      	nop
 8006e02:	3770      	adds	r7, #112	@ 0x70
 8006e04:	46bd      	mov	sp, r7
 8006e06:	bd80      	pop	{r7, pc}

08006e08 <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8006e08:	b084      	sub	sp, #16
 8006e0a:	b580      	push	{r7, lr}
 8006e0c:	b084      	sub	sp, #16
 8006e0e:	af00      	add	r7, sp, #0
 8006e10:	6078      	str	r0, [r7, #4]
 8006e12:	f107 001c 	add.w	r0, r7, #28
 8006e16:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 8006e1a:	f897 3021 	ldrb.w	r3, [r7, #33]	@ 0x21
 8006e1e:	2b01      	cmp	r3, #1
 8006e20:	d121      	bne.n	8006e66 <USB_CoreInit+0x5e>
  {
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 8006e22:	687b      	ldr	r3, [r7, #4]
 8006e24:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006e26:	f423 3280 	bic.w	r2, r3, #65536	@ 0x10000
 8006e2a:	687b      	ldr	r3, [r7, #4]
 8006e2c:	639a      	str	r2, [r3, #56]	@ 0x38

    /* Init The ULPI Interface */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_TSDPS | USB_OTG_GUSBCFG_ULPIFSLS | USB_OTG_GUSBCFG_PHYSEL);
 8006e2e:	687b      	ldr	r3, [r7, #4]
 8006e30:	68da      	ldr	r2, [r3, #12]
 8006e32:	4b21      	ldr	r3, [pc, #132]	@ (8006eb8 <USB_CoreInit+0xb0>)
 8006e34:	4013      	ands	r3, r2
 8006e36:	687a      	ldr	r2, [r7, #4]
 8006e38:	60d3      	str	r3, [r2, #12]
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPI_UTMI_SEL;
#endif /* defined(STM32F722xx) || defined(STM32F723xx) || defined(STM32F730xx) ||
          defined(STM32F732xx) || defined(STM32F733xx) */

    /* Select vbus source */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_ULPIEVBUSD | USB_OTG_GUSBCFG_ULPIEVBUSI);
 8006e3a:	687b      	ldr	r3, [r7, #4]
 8006e3c:	68db      	ldr	r3, [r3, #12]
 8006e3e:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 8006e42:	687b      	ldr	r3, [r7, #4]
 8006e44:	60da      	str	r2, [r3, #12]
    if (cfg.use_external_vbus == 1U)
 8006e46:	f897 3028 	ldrb.w	r3, [r7, #40]	@ 0x28
 8006e4a:	2b01      	cmp	r3, #1
 8006e4c:	d105      	bne.n	8006e5a <USB_CoreInit+0x52>
    {
      USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPIEVBUSD;
 8006e4e:	687b      	ldr	r3, [r7, #4]
 8006e50:	68db      	ldr	r3, [r3, #12]
 8006e52:	f443 1280 	orr.w	r2, r3, #1048576	@ 0x100000
 8006e56:	687b      	ldr	r3, [r7, #4]
 8006e58:	60da      	str	r2, [r3, #12]
    }

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 8006e5a:	6878      	ldr	r0, [r7, #4]
 8006e5c:	f000 fa92 	bl	8007384 <USB_CoreReset>
 8006e60:	4603      	mov	r3, r0
 8006e62:	73fb      	strb	r3, [r7, #15]
 8006e64:	e010      	b.n	8006e88 <USB_CoreInit+0x80>
#endif /* defined(STM32F722xx) || defined(STM32F723xx) || defined(STM32F730xx) ||
          defined(STM32F732xx) || defined(STM32F733xx) */
  else /* FS interface (embedded Phy) */
  {
    /* Select FS Embedded PHY */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 8006e66:	687b      	ldr	r3, [r7, #4]
 8006e68:	68db      	ldr	r3, [r3, #12]
 8006e6a:	f043 0240 	orr.w	r2, r3, #64	@ 0x40
 8006e6e:	687b      	ldr	r3, [r7, #4]
 8006e70:	60da      	str	r2, [r3, #12]

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 8006e72:	6878      	ldr	r0, [r7, #4]
 8006e74:	f000 fa86 	bl	8007384 <USB_CoreReset>
 8006e78:	4603      	mov	r3, r0
 8006e7a:	73fb      	strb	r3, [r7, #15]

    /* Activate the USB Transceiver */
    USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 8006e7c:	687b      	ldr	r3, [r7, #4]
 8006e7e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006e80:	f443 3280 	orr.w	r2, r3, #65536	@ 0x10000
 8006e84:	687b      	ldr	r3, [r7, #4]
 8006e86:	639a      	str	r2, [r3, #56]	@ 0x38
  }

  if (cfg.dma_enable == 1U)
 8006e88:	7fbb      	ldrb	r3, [r7, #30]
 8006e8a:	2b01      	cmp	r3, #1
 8006e8c:	d10b      	bne.n	8006ea6 <USB_CoreInit+0x9e>
  {
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_HBSTLEN_2;
 8006e8e:	687b      	ldr	r3, [r7, #4]
 8006e90:	689b      	ldr	r3, [r3, #8]
 8006e92:	f043 0206 	orr.w	r2, r3, #6
 8006e96:	687b      	ldr	r3, [r7, #4]
 8006e98:	609a      	str	r2, [r3, #8]
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_DMAEN;
 8006e9a:	687b      	ldr	r3, [r7, #4]
 8006e9c:	689b      	ldr	r3, [r3, #8]
 8006e9e:	f043 0220 	orr.w	r2, r3, #32
 8006ea2:	687b      	ldr	r3, [r7, #4]
 8006ea4:	609a      	str	r2, [r3, #8]
  }

  return ret;
 8006ea6:	7bfb      	ldrb	r3, [r7, #15]
}
 8006ea8:	4618      	mov	r0, r3
 8006eaa:	3710      	adds	r7, #16
 8006eac:	46bd      	mov	sp, r7
 8006eae:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8006eb2:	b004      	add	sp, #16
 8006eb4:	4770      	bx	lr
 8006eb6:	bf00      	nop
 8006eb8:	ffbdffbf 	.word	0xffbdffbf

08006ebc <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 8006ebc:	b480      	push	{r7}
 8006ebe:	b083      	sub	sp, #12
 8006ec0:	af00      	add	r7, sp, #0
 8006ec2:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 8006ec4:	687b      	ldr	r3, [r7, #4]
 8006ec6:	689b      	ldr	r3, [r3, #8]
 8006ec8:	f023 0201 	bic.w	r2, r3, #1
 8006ecc:	687b      	ldr	r3, [r7, #4]
 8006ece:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 8006ed0:	2300      	movs	r3, #0
}
 8006ed2:	4618      	mov	r0, r3
 8006ed4:	370c      	adds	r7, #12
 8006ed6:	46bd      	mov	sp, r7
 8006ed8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006edc:	4770      	bx	lr

08006ede <USB_SetCurrentMode>:
  *            @arg USB_DEVICE_MODE Peripheral mode
  *            @arg USB_HOST_MODE Host mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_OTG_ModeTypeDef mode)
{
 8006ede:	b580      	push	{r7, lr}
 8006ee0:	b084      	sub	sp, #16
 8006ee2:	af00      	add	r7, sp, #0
 8006ee4:	6078      	str	r0, [r7, #4]
 8006ee6:	460b      	mov	r3, r1
 8006ee8:	70fb      	strb	r3, [r7, #3]
  uint32_t ms = 0U;
 8006eea:	2300      	movs	r3, #0
 8006eec:	60fb      	str	r3, [r7, #12]

  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 8006eee:	687b      	ldr	r3, [r7, #4]
 8006ef0:	68db      	ldr	r3, [r3, #12]
 8006ef2:	f023 42c0 	bic.w	r2, r3, #1610612736	@ 0x60000000
 8006ef6:	687b      	ldr	r3, [r7, #4]
 8006ef8:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 8006efa:	78fb      	ldrb	r3, [r7, #3]
 8006efc:	2b01      	cmp	r3, #1
 8006efe:	d115      	bne.n	8006f2c <USB_SetCurrentMode+0x4e>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 8006f00:	687b      	ldr	r3, [r7, #4]
 8006f02:	68db      	ldr	r3, [r3, #12]
 8006f04:	f043 5200 	orr.w	r2, r3, #536870912	@ 0x20000000
 8006f08:	687b      	ldr	r3, [r7, #4]
 8006f0a:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(10U);
 8006f0c:	200a      	movs	r0, #10
 8006f0e:	f7fa ffcd 	bl	8001eac <HAL_Delay>
      ms += 10U;
 8006f12:	68fb      	ldr	r3, [r7, #12]
 8006f14:	330a      	adds	r3, #10
 8006f16:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_HOST_MODE) && (ms < HAL_USB_CURRENT_MODE_MAX_DELAY_MS));
 8006f18:	6878      	ldr	r0, [r7, #4]
 8006f1a:	f000 fa25 	bl	8007368 <USB_GetMode>
 8006f1e:	4603      	mov	r3, r0
 8006f20:	2b01      	cmp	r3, #1
 8006f22:	d01e      	beq.n	8006f62 <USB_SetCurrentMode+0x84>
 8006f24:	68fb      	ldr	r3, [r7, #12]
 8006f26:	2bc7      	cmp	r3, #199	@ 0xc7
 8006f28:	d9f0      	bls.n	8006f0c <USB_SetCurrentMode+0x2e>
 8006f2a:	e01a      	b.n	8006f62 <USB_SetCurrentMode+0x84>
  }
  else if (mode == USB_DEVICE_MODE)
 8006f2c:	78fb      	ldrb	r3, [r7, #3]
 8006f2e:	2b00      	cmp	r3, #0
 8006f30:	d115      	bne.n	8006f5e <USB_SetCurrentMode+0x80>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 8006f32:	687b      	ldr	r3, [r7, #4]
 8006f34:	68db      	ldr	r3, [r3, #12]
 8006f36:	f043 4280 	orr.w	r2, r3, #1073741824	@ 0x40000000
 8006f3a:	687b      	ldr	r3, [r7, #4]
 8006f3c:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(10U);
 8006f3e:	200a      	movs	r0, #10
 8006f40:	f7fa ffb4 	bl	8001eac <HAL_Delay>
      ms += 10U;
 8006f44:	68fb      	ldr	r3, [r7, #12]
 8006f46:	330a      	adds	r3, #10
 8006f48:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_DEVICE_MODE) && (ms < HAL_USB_CURRENT_MODE_MAX_DELAY_MS));
 8006f4a:	6878      	ldr	r0, [r7, #4]
 8006f4c:	f000 fa0c 	bl	8007368 <USB_GetMode>
 8006f50:	4603      	mov	r3, r0
 8006f52:	2b00      	cmp	r3, #0
 8006f54:	d005      	beq.n	8006f62 <USB_SetCurrentMode+0x84>
 8006f56:	68fb      	ldr	r3, [r7, #12]
 8006f58:	2bc7      	cmp	r3, #199	@ 0xc7
 8006f5a:	d9f0      	bls.n	8006f3e <USB_SetCurrentMode+0x60>
 8006f5c:	e001      	b.n	8006f62 <USB_SetCurrentMode+0x84>
  }
  else
  {
    return HAL_ERROR;
 8006f5e:	2301      	movs	r3, #1
 8006f60:	e005      	b.n	8006f6e <USB_SetCurrentMode+0x90>
  }

  if (ms == HAL_USB_CURRENT_MODE_MAX_DELAY_MS)
 8006f62:	68fb      	ldr	r3, [r7, #12]
 8006f64:	2bc8      	cmp	r3, #200	@ 0xc8
 8006f66:	d101      	bne.n	8006f6c <USB_SetCurrentMode+0x8e>
  {
    return HAL_ERROR;
 8006f68:	2301      	movs	r3, #1
 8006f6a:	e000      	b.n	8006f6e <USB_SetCurrentMode+0x90>
  }

  return HAL_OK;
 8006f6c:	2300      	movs	r3, #0
}
 8006f6e:	4618      	mov	r0, r3
 8006f70:	3710      	adds	r7, #16
 8006f72:	46bd      	mov	sp, r7
 8006f74:	bd80      	pop	{r7, pc}
	...

08006f78 <USB_DevInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8006f78:	b084      	sub	sp, #16
 8006f7a:	b580      	push	{r7, lr}
 8006f7c:	b086      	sub	sp, #24
 8006f7e:	af00      	add	r7, sp, #0
 8006f80:	6078      	str	r0, [r7, #4]
 8006f82:	f107 0024 	add.w	r0, r7, #36	@ 0x24
 8006f86:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret = HAL_OK;
 8006f8a:	2300      	movs	r3, #0
 8006f8c:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006f8e:	687b      	ldr	r3, [r7, #4]
 8006f90:	60fb      	str	r3, [r7, #12]
  uint32_t i;

  for (i = 0U; i < 15U; i++)
 8006f92:	2300      	movs	r3, #0
 8006f94:	613b      	str	r3, [r7, #16]
 8006f96:	e009      	b.n	8006fac <USB_DevInit+0x34>
  {
    USBx->DIEPTXF[i] = 0U;
 8006f98:	687a      	ldr	r2, [r7, #4]
 8006f9a:	693b      	ldr	r3, [r7, #16]
 8006f9c:	3340      	adds	r3, #64	@ 0x40
 8006f9e:	009b      	lsls	r3, r3, #2
 8006fa0:	4413      	add	r3, r2
 8006fa2:	2200      	movs	r2, #0
 8006fa4:	605a      	str	r2, [r3, #4]
  for (i = 0U; i < 15U; i++)
 8006fa6:	693b      	ldr	r3, [r7, #16]
 8006fa8:	3301      	adds	r3, #1
 8006faa:	613b      	str	r3, [r7, #16]
 8006fac:	693b      	ldr	r3, [r7, #16]
 8006fae:	2b0e      	cmp	r3, #14
 8006fb0:	d9f2      	bls.n	8006f98 <USB_DevInit+0x20>
  }

  /* VBUS Sensing setup */
  if (cfg.vbus_sensing_enable == 0U)
 8006fb2:	f897 302e 	ldrb.w	r3, [r7, #46]	@ 0x2e
 8006fb6:	2b00      	cmp	r3, #0
 8006fb8:	d11c      	bne.n	8006ff4 <USB_DevInit+0x7c>
  {
    USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 8006fba:	68fb      	ldr	r3, [r7, #12]
 8006fbc:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8006fc0:	685b      	ldr	r3, [r3, #4]
 8006fc2:	68fa      	ldr	r2, [r7, #12]
 8006fc4:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8006fc8:	f043 0302 	orr.w	r3, r3, #2
 8006fcc:	6053      	str	r3, [r2, #4]

    /* Deactivate VBUS Sensing B */
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBDEN;
 8006fce:	687b      	ldr	r3, [r7, #4]
 8006fd0:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006fd2:	f423 1200 	bic.w	r2, r3, #2097152	@ 0x200000
 8006fd6:	687b      	ldr	r3, [r7, #4]
 8006fd8:	639a      	str	r2, [r3, #56]	@ 0x38

    /* B-peripheral session valid override enable */
    USBx->GOTGCTL |= USB_OTG_GOTGCTL_BVALOEN;
 8006fda:	687b      	ldr	r3, [r7, #4]
 8006fdc:	681b      	ldr	r3, [r3, #0]
 8006fde:	f043 0240 	orr.w	r2, r3, #64	@ 0x40
 8006fe2:	687b      	ldr	r3, [r7, #4]
 8006fe4:	601a      	str	r2, [r3, #0]
    USBx->GOTGCTL |= USB_OTG_GOTGCTL_BVALOVAL;
 8006fe6:	687b      	ldr	r3, [r7, #4]
 8006fe8:	681b      	ldr	r3, [r3, #0]
 8006fea:	f043 0280 	orr.w	r2, r3, #128	@ 0x80
 8006fee:	687b      	ldr	r3, [r7, #4]
 8006ff0:	601a      	str	r2, [r3, #0]
 8006ff2:	e005      	b.n	8007000 <USB_DevInit+0x88>
  }
  else
  {
    /* Enable HW VBUS sensing */
    USBx->GCCFG |= USB_OTG_GCCFG_VBDEN;
 8006ff4:	687b      	ldr	r3, [r7, #4]
 8006ff6:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006ff8:	f443 1200 	orr.w	r2, r3, #2097152	@ 0x200000
 8006ffc:	687b      	ldr	r3, [r7, #4]
 8006ffe:	639a      	str	r2, [r3, #56]	@ 0x38
  }

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 8007000:	68fb      	ldr	r3, [r7, #12]
 8007002:	f503 6360 	add.w	r3, r3, #3584	@ 0xe00
 8007006:	461a      	mov	r2, r3
 8007008:	2300      	movs	r3, #0
 800700a:	6013      	str	r3, [r2, #0]

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 800700c:	f897 3029 	ldrb.w	r3, [r7, #41]	@ 0x29
 8007010:	2b01      	cmp	r3, #1
 8007012:	d10d      	bne.n	8007030 <USB_DevInit+0xb8>
  {
    if (cfg.speed == USBD_HS_SPEED)
 8007014:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8007018:	2b00      	cmp	r3, #0
 800701a:	d104      	bne.n	8007026 <USB_DevInit+0xae>
    {
      /* Set Core speed to High speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH);
 800701c:	2100      	movs	r1, #0
 800701e:	6878      	ldr	r0, [r7, #4]
 8007020:	f000 f968 	bl	80072f4 <USB_SetDevSpeed>
 8007024:	e008      	b.n	8007038 <USB_DevInit+0xc0>
    }
    else
    {
      /* Set Core speed to Full speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH_IN_FULL);
 8007026:	2101      	movs	r1, #1
 8007028:	6878      	ldr	r0, [r7, #4]
 800702a:	f000 f963 	bl	80072f4 <USB_SetDevSpeed>
 800702e:	e003      	b.n	8007038 <USB_DevInit+0xc0>
#endif /* defined(STM32F722xx) || defined(STM32F723xx) || defined(STM32F730xx) ||
          defined(STM32F732xx) || defined(STM32F733xx) */
  else
  {
    /* Set Core speed to Full speed mode */
    (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_FULL);
 8007030:	2103      	movs	r1, #3
 8007032:	6878      	ldr	r0, [r7, #4]
 8007034:	f000 f95e 	bl	80072f4 <USB_SetDevSpeed>
  }

  /* Flush the FIFOs */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 8007038:	2110      	movs	r1, #16
 800703a:	6878      	ldr	r0, [r7, #4]
 800703c:	f000 f8fa 	bl	8007234 <USB_FlushTxFifo>
 8007040:	4603      	mov	r3, r0
 8007042:	2b00      	cmp	r3, #0
 8007044:	d001      	beq.n	800704a <USB_DevInit+0xd2>
  {
    ret = HAL_ERROR;
 8007046:	2301      	movs	r3, #1
 8007048:	75fb      	strb	r3, [r7, #23]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 800704a:	6878      	ldr	r0, [r7, #4]
 800704c:	f000 f924 	bl	8007298 <USB_FlushRxFifo>
 8007050:	4603      	mov	r3, r0
 8007052:	2b00      	cmp	r3, #0
 8007054:	d001      	beq.n	800705a <USB_DevInit+0xe2>
  {
    ret = HAL_ERROR;
 8007056:	2301      	movs	r3, #1
 8007058:	75fb      	strb	r3, [r7, #23]
  }

  /* Clear all pending Device Interrupts */
  USBx_DEVICE->DIEPMSK = 0U;
 800705a:	68fb      	ldr	r3, [r7, #12]
 800705c:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8007060:	461a      	mov	r2, r3
 8007062:	2300      	movs	r3, #0
 8007064:	6113      	str	r3, [r2, #16]
  USBx_DEVICE->DOEPMSK = 0U;
 8007066:	68fb      	ldr	r3, [r7, #12]
 8007068:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800706c:	461a      	mov	r2, r3
 800706e:	2300      	movs	r3, #0
 8007070:	6153      	str	r3, [r2, #20]
  USBx_DEVICE->DAINTMSK = 0U;
 8007072:	68fb      	ldr	r3, [r7, #12]
 8007074:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8007078:	461a      	mov	r2, r3
 800707a:	2300      	movs	r3, #0
 800707c:	61d3      	str	r3, [r2, #28]

  for (i = 0U; i < cfg.dev_endpoints; i++)
 800707e:	2300      	movs	r3, #0
 8007080:	613b      	str	r3, [r7, #16]
 8007082:	e043      	b.n	800710c <USB_DevInit+0x194>
  {
    if ((USBx_INEP(i)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 8007084:	693b      	ldr	r3, [r7, #16]
 8007086:	015a      	lsls	r2, r3, #5
 8007088:	68fb      	ldr	r3, [r7, #12]
 800708a:	4413      	add	r3, r2
 800708c:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8007090:	681b      	ldr	r3, [r3, #0]
 8007092:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 8007096:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 800709a:	d118      	bne.n	80070ce <USB_DevInit+0x156>
    {
      if (i == 0U)
 800709c:	693b      	ldr	r3, [r7, #16]
 800709e:	2b00      	cmp	r3, #0
 80070a0:	d10a      	bne.n	80070b8 <USB_DevInit+0x140>
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_SNAK;
 80070a2:	693b      	ldr	r3, [r7, #16]
 80070a4:	015a      	lsls	r2, r3, #5
 80070a6:	68fb      	ldr	r3, [r7, #12]
 80070a8:	4413      	add	r3, r2
 80070aa:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80070ae:	461a      	mov	r2, r3
 80070b0:	f04f 6300 	mov.w	r3, #134217728	@ 0x8000000
 80070b4:	6013      	str	r3, [r2, #0]
 80070b6:	e013      	b.n	80070e0 <USB_DevInit+0x168>
      }
      else
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_EPDIS | USB_OTG_DIEPCTL_SNAK;
 80070b8:	693b      	ldr	r3, [r7, #16]
 80070ba:	015a      	lsls	r2, r3, #5
 80070bc:	68fb      	ldr	r3, [r7, #12]
 80070be:	4413      	add	r3, r2
 80070c0:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80070c4:	461a      	mov	r2, r3
 80070c6:	f04f 4390 	mov.w	r3, #1207959552	@ 0x48000000
 80070ca:	6013      	str	r3, [r2, #0]
 80070cc:	e008      	b.n	80070e0 <USB_DevInit+0x168>
      }
    }
    else
    {
      USBx_INEP(i)->DIEPCTL = 0U;
 80070ce:	693b      	ldr	r3, [r7, #16]
 80070d0:	015a      	lsls	r2, r3, #5
 80070d2:	68fb      	ldr	r3, [r7, #12]
 80070d4:	4413      	add	r3, r2
 80070d6:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80070da:	461a      	mov	r2, r3
 80070dc:	2300      	movs	r3, #0
 80070de:	6013      	str	r3, [r2, #0]
    }

    USBx_INEP(i)->DIEPTSIZ = 0U;
 80070e0:	693b      	ldr	r3, [r7, #16]
 80070e2:	015a      	lsls	r2, r3, #5
 80070e4:	68fb      	ldr	r3, [r7, #12]
 80070e6:	4413      	add	r3, r2
 80070e8:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80070ec:	461a      	mov	r2, r3
 80070ee:	2300      	movs	r3, #0
 80070f0:	6113      	str	r3, [r2, #16]
    USBx_INEP(i)->DIEPINT  = 0xFB7FU;
 80070f2:	693b      	ldr	r3, [r7, #16]
 80070f4:	015a      	lsls	r2, r3, #5
 80070f6:	68fb      	ldr	r3, [r7, #12]
 80070f8:	4413      	add	r3, r2
 80070fa:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80070fe:	461a      	mov	r2, r3
 8007100:	f64f 337f 	movw	r3, #64383	@ 0xfb7f
 8007104:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 8007106:	693b      	ldr	r3, [r7, #16]
 8007108:	3301      	adds	r3, #1
 800710a:	613b      	str	r3, [r7, #16]
 800710c:	f897 3024 	ldrb.w	r3, [r7, #36]	@ 0x24
 8007110:	461a      	mov	r2, r3
 8007112:	693b      	ldr	r3, [r7, #16]
 8007114:	4293      	cmp	r3, r2
 8007116:	d3b5      	bcc.n	8007084 <USB_DevInit+0x10c>
  }

  for (i = 0U; i < cfg.dev_endpoints; i++)
 8007118:	2300      	movs	r3, #0
 800711a:	613b      	str	r3, [r7, #16]
 800711c:	e043      	b.n	80071a6 <USB_DevInit+0x22e>
  {
    if ((USBx_OUTEP(i)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 800711e:	693b      	ldr	r3, [r7, #16]
 8007120:	015a      	lsls	r2, r3, #5
 8007122:	68fb      	ldr	r3, [r7, #12]
 8007124:	4413      	add	r3, r2
 8007126:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800712a:	681b      	ldr	r3, [r3, #0]
 800712c:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 8007130:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8007134:	d118      	bne.n	8007168 <USB_DevInit+0x1f0>
    {
      if (i == 0U)
 8007136:	693b      	ldr	r3, [r7, #16]
 8007138:	2b00      	cmp	r3, #0
 800713a:	d10a      	bne.n	8007152 <USB_DevInit+0x1da>
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_SNAK;
 800713c:	693b      	ldr	r3, [r7, #16]
 800713e:	015a      	lsls	r2, r3, #5
 8007140:	68fb      	ldr	r3, [r7, #12]
 8007142:	4413      	add	r3, r2
 8007144:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8007148:	461a      	mov	r2, r3
 800714a:	f04f 6300 	mov.w	r3, #134217728	@ 0x8000000
 800714e:	6013      	str	r3, [r2, #0]
 8007150:	e013      	b.n	800717a <USB_DevInit+0x202>
      }
      else
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_EPDIS | USB_OTG_DOEPCTL_SNAK;
 8007152:	693b      	ldr	r3, [r7, #16]
 8007154:	015a      	lsls	r2, r3, #5
 8007156:	68fb      	ldr	r3, [r7, #12]
 8007158:	4413      	add	r3, r2
 800715a:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800715e:	461a      	mov	r2, r3
 8007160:	f04f 4390 	mov.w	r3, #1207959552	@ 0x48000000
 8007164:	6013      	str	r3, [r2, #0]
 8007166:	e008      	b.n	800717a <USB_DevInit+0x202>
      }
    }
    else
    {
      USBx_OUTEP(i)->DOEPCTL = 0U;
 8007168:	693b      	ldr	r3, [r7, #16]
 800716a:	015a      	lsls	r2, r3, #5
 800716c:	68fb      	ldr	r3, [r7, #12]
 800716e:	4413      	add	r3, r2
 8007170:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8007174:	461a      	mov	r2, r3
 8007176:	2300      	movs	r3, #0
 8007178:	6013      	str	r3, [r2, #0]
    }

    USBx_OUTEP(i)->DOEPTSIZ = 0U;
 800717a:	693b      	ldr	r3, [r7, #16]
 800717c:	015a      	lsls	r2, r3, #5
 800717e:	68fb      	ldr	r3, [r7, #12]
 8007180:	4413      	add	r3, r2
 8007182:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8007186:	461a      	mov	r2, r3
 8007188:	2300      	movs	r3, #0
 800718a:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(i)->DOEPINT  = 0xFB7FU;
 800718c:	693b      	ldr	r3, [r7, #16]
 800718e:	015a      	lsls	r2, r3, #5
 8007190:	68fb      	ldr	r3, [r7, #12]
 8007192:	4413      	add	r3, r2
 8007194:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8007198:	461a      	mov	r2, r3
 800719a:	f64f 337f 	movw	r3, #64383	@ 0xfb7f
 800719e:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 80071a0:	693b      	ldr	r3, [r7, #16]
 80071a2:	3301      	adds	r3, #1
 80071a4:	613b      	str	r3, [r7, #16]
 80071a6:	f897 3024 	ldrb.w	r3, [r7, #36]	@ 0x24
 80071aa:	461a      	mov	r2, r3
 80071ac:	693b      	ldr	r3, [r7, #16]
 80071ae:	4293      	cmp	r3, r2
 80071b0:	d3b5      	bcc.n	800711e <USB_DevInit+0x1a6>
  }

  USBx_DEVICE->DIEPMSK &= ~(USB_OTG_DIEPMSK_TXFURM);
 80071b2:	68fb      	ldr	r3, [r7, #12]
 80071b4:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80071b8:	691b      	ldr	r3, [r3, #16]
 80071ba:	68fa      	ldr	r2, [r7, #12]
 80071bc:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 80071c0:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 80071c4:	6113      	str	r3, [r2, #16]

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 80071c6:	687b      	ldr	r3, [r7, #4]
 80071c8:	2200      	movs	r2, #0
 80071ca:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = 0xBFFFFFFFU;
 80071cc:	687b      	ldr	r3, [r7, #4]
 80071ce:	f06f 4280 	mvn.w	r2, #1073741824	@ 0x40000000
 80071d2:	615a      	str	r2, [r3, #20]

  /* Enable the common interrupts */
  if (cfg.dma_enable == 0U)
 80071d4:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 80071d8:	2b00      	cmp	r3, #0
 80071da:	d105      	bne.n	80071e8 <USB_DevInit+0x270>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 80071dc:	687b      	ldr	r3, [r7, #4]
 80071de:	699b      	ldr	r3, [r3, #24]
 80071e0:	f043 0210 	orr.w	r2, r3, #16
 80071e4:	687b      	ldr	r3, [r7, #4]
 80071e6:	619a      	str	r2, [r3, #24]
  }

  /* Enable interrupts matching to the Device mode ONLY */
  USBx->GINTMSK |= USB_OTG_GINTMSK_USBSUSPM | USB_OTG_GINTMSK_USBRST |
 80071e8:	687b      	ldr	r3, [r7, #4]
 80071ea:	699a      	ldr	r2, [r3, #24]
 80071ec:	4b0f      	ldr	r3, [pc, #60]	@ (800722c <USB_DevInit+0x2b4>)
 80071ee:	4313      	orrs	r3, r2
 80071f0:	687a      	ldr	r2, [r7, #4]
 80071f2:	6193      	str	r3, [r2, #24]
                   USB_OTG_GINTMSK_ENUMDNEM | USB_OTG_GINTMSK_IEPINT |
                   USB_OTG_GINTMSK_OEPINT   | USB_OTG_GINTMSK_IISOIXFRM |
                   USB_OTG_GINTMSK_PXFRM_IISOOXFRM | USB_OTG_GINTMSK_WUIM;

  if (cfg.Sof_enable != 0U)
 80071f4:	f897 302a 	ldrb.w	r3, [r7, #42]	@ 0x2a
 80071f8:	2b00      	cmp	r3, #0
 80071fa:	d005      	beq.n	8007208 <USB_DevInit+0x290>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_SOFM;
 80071fc:	687b      	ldr	r3, [r7, #4]
 80071fe:	699b      	ldr	r3, [r3, #24]
 8007200:	f043 0208 	orr.w	r2, r3, #8
 8007204:	687b      	ldr	r3, [r7, #4]
 8007206:	619a      	str	r2, [r3, #24]
  }

  if (cfg.vbus_sensing_enable == 1U)
 8007208:	f897 302e 	ldrb.w	r3, [r7, #46]	@ 0x2e
 800720c:	2b01      	cmp	r3, #1
 800720e:	d105      	bne.n	800721c <USB_DevInit+0x2a4>
  {
    USBx->GINTMSK |= (USB_OTG_GINTMSK_SRQIM | USB_OTG_GINTMSK_OTGINT);
 8007210:	687b      	ldr	r3, [r7, #4]
 8007212:	699a      	ldr	r2, [r3, #24]
 8007214:	4b06      	ldr	r3, [pc, #24]	@ (8007230 <USB_DevInit+0x2b8>)
 8007216:	4313      	orrs	r3, r2
 8007218:	687a      	ldr	r2, [r7, #4]
 800721a:	6193      	str	r3, [r2, #24]
  }

  return ret;
 800721c:	7dfb      	ldrb	r3, [r7, #23]
}
 800721e:	4618      	mov	r0, r3
 8007220:	3718      	adds	r7, #24
 8007222:	46bd      	mov	sp, r7
 8007224:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8007228:	b004      	add	sp, #16
 800722a:	4770      	bx	lr
 800722c:	803c3800 	.word	0x803c3800
 8007230:	40000004 	.word	0x40000004

08007234 <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 8007234:	b480      	push	{r7}
 8007236:	b085      	sub	sp, #20
 8007238:	af00      	add	r7, sp, #0
 800723a:	6078      	str	r0, [r7, #4]
 800723c:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 800723e:	2300      	movs	r3, #0
 8007240:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8007242:	68fb      	ldr	r3, [r7, #12]
 8007244:	3301      	adds	r3, #1
 8007246:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 8007248:	68fb      	ldr	r3, [r7, #12]
 800724a:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 800724e:	d901      	bls.n	8007254 <USB_FlushTxFifo+0x20>
    {
      return HAL_TIMEOUT;
 8007250:	2303      	movs	r3, #3
 8007252:	e01b      	b.n	800728c <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8007254:	687b      	ldr	r3, [r7, #4]
 8007256:	691b      	ldr	r3, [r3, #16]
 8007258:	2b00      	cmp	r3, #0
 800725a:	daf2      	bge.n	8007242 <USB_FlushTxFifo+0xe>

  /* Flush TX Fifo */
  count = 0U;
 800725c:	2300      	movs	r3, #0
 800725e:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 8007260:	683b      	ldr	r3, [r7, #0]
 8007262:	019b      	lsls	r3, r3, #6
 8007264:	f043 0220 	orr.w	r2, r3, #32
 8007268:	687b      	ldr	r3, [r7, #4]
 800726a:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 800726c:	68fb      	ldr	r3, [r7, #12]
 800726e:	3301      	adds	r3, #1
 8007270:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 8007272:	68fb      	ldr	r3, [r7, #12]
 8007274:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 8007278:	d901      	bls.n	800727e <USB_FlushTxFifo+0x4a>
    {
      return HAL_TIMEOUT;
 800727a:	2303      	movs	r3, #3
 800727c:	e006      	b.n	800728c <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 800727e:	687b      	ldr	r3, [r7, #4]
 8007280:	691b      	ldr	r3, [r3, #16]
 8007282:	f003 0320 	and.w	r3, r3, #32
 8007286:	2b20      	cmp	r3, #32
 8007288:	d0f0      	beq.n	800726c <USB_FlushTxFifo+0x38>

  return HAL_OK;
 800728a:	2300      	movs	r3, #0
}
 800728c:	4618      	mov	r0, r3
 800728e:	3714      	adds	r7, #20
 8007290:	46bd      	mov	sp, r7
 8007292:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007296:	4770      	bx	lr

08007298 <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo  Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 8007298:	b480      	push	{r7}
 800729a:	b085      	sub	sp, #20
 800729c:	af00      	add	r7, sp, #0
 800729e:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 80072a0:	2300      	movs	r3, #0
 80072a2:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 80072a4:	68fb      	ldr	r3, [r7, #12]
 80072a6:	3301      	adds	r3, #1
 80072a8:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 80072aa:	68fb      	ldr	r3, [r7, #12]
 80072ac:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 80072b0:	d901      	bls.n	80072b6 <USB_FlushRxFifo+0x1e>
    {
      return HAL_TIMEOUT;
 80072b2:	2303      	movs	r3, #3
 80072b4:	e018      	b.n	80072e8 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 80072b6:	687b      	ldr	r3, [r7, #4]
 80072b8:	691b      	ldr	r3, [r3, #16]
 80072ba:	2b00      	cmp	r3, #0
 80072bc:	daf2      	bge.n	80072a4 <USB_FlushRxFifo+0xc>

  /* Flush RX Fifo */
  count = 0U;
 80072be:	2300      	movs	r3, #0
 80072c0:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 80072c2:	687b      	ldr	r3, [r7, #4]
 80072c4:	2210      	movs	r2, #16
 80072c6:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 80072c8:	68fb      	ldr	r3, [r7, #12]
 80072ca:	3301      	adds	r3, #1
 80072cc:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 80072ce:	68fb      	ldr	r3, [r7, #12]
 80072d0:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 80072d4:	d901      	bls.n	80072da <USB_FlushRxFifo+0x42>
    {
      return HAL_TIMEOUT;
 80072d6:	2303      	movs	r3, #3
 80072d8:	e006      	b.n	80072e8 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 80072da:	687b      	ldr	r3, [r7, #4]
 80072dc:	691b      	ldr	r3, [r3, #16]
 80072de:	f003 0310 	and.w	r3, r3, #16
 80072e2:	2b10      	cmp	r3, #16
 80072e4:	d0f0      	beq.n	80072c8 <USB_FlushRxFifo+0x30>

  return HAL_OK;
 80072e6:	2300      	movs	r3, #0
}
 80072e8:	4618      	mov	r0, r3
 80072ea:	3714      	adds	r7, #20
 80072ec:	46bd      	mov	sp, r7
 80072ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80072f2:	4770      	bx	lr

080072f4 <USB_SetDevSpeed>:
  *            @arg USB_OTG_SPEED_HIGH_IN_FULL: High speed core in Full Speed mode
  *            @arg USB_OTG_SPEED_FULL: Full speed mode
  * @retval  Hal status
  */
HAL_StatusTypeDef USB_SetDevSpeed(const USB_OTG_GlobalTypeDef *USBx, uint8_t speed)
{
 80072f4:	b480      	push	{r7}
 80072f6:	b085      	sub	sp, #20
 80072f8:	af00      	add	r7, sp, #0
 80072fa:	6078      	str	r0, [r7, #4]
 80072fc:	460b      	mov	r3, r1
 80072fe:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8007300:	687b      	ldr	r3, [r7, #4]
 8007302:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG |= speed;
 8007304:	68fb      	ldr	r3, [r7, #12]
 8007306:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800730a:	681a      	ldr	r2, [r3, #0]
 800730c:	78fb      	ldrb	r3, [r7, #3]
 800730e:	68f9      	ldr	r1, [r7, #12]
 8007310:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 8007314:	4313      	orrs	r3, r2
 8007316:	600b      	str	r3, [r1, #0]
  return HAL_OK;
 8007318:	2300      	movs	r3, #0
}
 800731a:	4618      	mov	r0, r3
 800731c:	3714      	adds	r7, #20
 800731e:	46bd      	mov	sp, r7
 8007320:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007324:	4770      	bx	lr

08007326 <USB_DevDisconnect>:
  * @brief  USB_DevDisconnect : Disconnect the USB device by disabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevDisconnect(const USB_OTG_GlobalTypeDef *USBx)
{
 8007326:	b480      	push	{r7}
 8007328:	b085      	sub	sp, #20
 800732a:	af00      	add	r7, sp, #0
 800732c:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800732e:	687b      	ldr	r3, [r7, #4]
 8007330:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 8007332:	68fb      	ldr	r3, [r7, #12]
 8007334:	f503 6360 	add.w	r3, r3, #3584	@ 0xe00
 8007338:	681b      	ldr	r3, [r3, #0]
 800733a:	68fa      	ldr	r2, [r7, #12]
 800733c:	f502 6260 	add.w	r2, r2, #3584	@ 0xe00
 8007340:	f023 0303 	bic.w	r3, r3, #3
 8007344:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 8007346:	68fb      	ldr	r3, [r7, #12]
 8007348:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800734c:	685b      	ldr	r3, [r3, #4]
 800734e:	68fa      	ldr	r2, [r7, #12]
 8007350:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8007354:	f043 0302 	orr.w	r3, r3, #2
 8007358:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 800735a:	2300      	movs	r3, #0
}
 800735c:	4618      	mov	r0, r3
 800735e:	3714      	adds	r7, #20
 8007360:	46bd      	mov	sp, r7
 8007362:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007366:	4770      	bx	lr

08007368 <USB_GetMode>:
  *          This parameter can be one of these values:
  *           0 : Host
  *           1 : Device
  */
uint32_t USB_GetMode(const USB_OTG_GlobalTypeDef *USBx)
{
 8007368:	b480      	push	{r7}
 800736a:	b083      	sub	sp, #12
 800736c:	af00      	add	r7, sp, #0
 800736e:	6078      	str	r0, [r7, #4]
  return ((USBx->GINTSTS) & 0x1U);
 8007370:	687b      	ldr	r3, [r7, #4]
 8007372:	695b      	ldr	r3, [r3, #20]
 8007374:	f003 0301 	and.w	r3, r3, #1
}
 8007378:	4618      	mov	r0, r3
 800737a:	370c      	adds	r7, #12
 800737c:	46bd      	mov	sp, r7
 800737e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007382:	4770      	bx	lr

08007384 <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 8007384:	b480      	push	{r7}
 8007386:	b085      	sub	sp, #20
 8007388:	af00      	add	r7, sp, #0
 800738a:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 800738c:	2300      	movs	r3, #0
 800738e:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8007390:	68fb      	ldr	r3, [r7, #12]
 8007392:	3301      	adds	r3, #1
 8007394:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 8007396:	68fb      	ldr	r3, [r7, #12]
 8007398:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 800739c:	d901      	bls.n	80073a2 <USB_CoreReset+0x1e>
    {
      return HAL_TIMEOUT;
 800739e:	2303      	movs	r3, #3
 80073a0:	e01b      	b.n	80073da <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 80073a2:	687b      	ldr	r3, [r7, #4]
 80073a4:	691b      	ldr	r3, [r3, #16]
 80073a6:	2b00      	cmp	r3, #0
 80073a8:	daf2      	bge.n	8007390 <USB_CoreReset+0xc>

  /* Core Soft Reset */
  count = 0U;
 80073aa:	2300      	movs	r3, #0
 80073ac:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 80073ae:	687b      	ldr	r3, [r7, #4]
 80073b0:	691b      	ldr	r3, [r3, #16]
 80073b2:	f043 0201 	orr.w	r2, r3, #1
 80073b6:	687b      	ldr	r3, [r7, #4]
 80073b8:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 80073ba:	68fb      	ldr	r3, [r7, #12]
 80073bc:	3301      	adds	r3, #1
 80073be:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 80073c0:	68fb      	ldr	r3, [r7, #12]
 80073c2:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 80073c6:	d901      	bls.n	80073cc <USB_CoreReset+0x48>
    {
      return HAL_TIMEOUT;
 80073c8:	2303      	movs	r3, #3
 80073ca:	e006      	b.n	80073da <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 80073cc:	687b      	ldr	r3, [r7, #4]
 80073ce:	691b      	ldr	r3, [r3, #16]
 80073d0:	f003 0301 	and.w	r3, r3, #1
 80073d4:	2b01      	cmp	r3, #1
 80073d6:	d0f0      	beq.n	80073ba <USB_CoreReset+0x36>

  return HAL_OK;
 80073d8:	2300      	movs	r3, #0
}
 80073da:	4618      	mov	r0, r3
 80073dc:	3714      	adds	r7, #20
 80073de:	46bd      	mov	sp, r7
 80073e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80073e4:	4770      	bx	lr

080073e6 <SVC_Setup>:
#endif /* SysTick */

/*
  Setup SVC to reset value.
*/
__STATIC_INLINE void SVC_Setup (void) {
 80073e6:	b480      	push	{r7}
 80073e8:	af00      	add	r7, sp, #0
  * The issue was logged under:https://github.com/ARM-software/CMSIS-FreeRTOS/issues/35
  * until it is correctly fixed, the code below is commented
  */
/*    NVIC_SetPriority (SVCall_IRQn, 0U); */
#endif
}
 80073ea:	bf00      	nop
 80073ec:	46bd      	mov	sp, r7
 80073ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80073f2:	4770      	bx	lr

080073f4 <osKernelInitialize>:

/*---------------------------------------------------------------------------*/

osStatus_t osKernelInitialize (void) {
 80073f4:	b480      	push	{r7}
 80073f6:	b085      	sub	sp, #20
 80073f8:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 80073fa:	f3ef 8305 	mrs	r3, IPSR
 80073fe:	60bb      	str	r3, [r7, #8]
  return(result);
 8007400:	68bb      	ldr	r3, [r7, #8]
  osStatus_t stat;

  if (IS_IRQ()) {
 8007402:	2b00      	cmp	r3, #0
 8007404:	d10f      	bne.n	8007426 <osKernelInitialize+0x32>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8007406:	f3ef 8310 	mrs	r3, PRIMASK
 800740a:	607b      	str	r3, [r7, #4]
  return(result);
 800740c:	687b      	ldr	r3, [r7, #4]
 800740e:	2b00      	cmp	r3, #0
 8007410:	d105      	bne.n	800741e <osKernelInitialize+0x2a>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 8007412:	f3ef 8311 	mrs	r3, BASEPRI
 8007416:	603b      	str	r3, [r7, #0]
  return(result);
 8007418:	683b      	ldr	r3, [r7, #0]
 800741a:	2b00      	cmp	r3, #0
 800741c:	d007      	beq.n	800742e <osKernelInitialize+0x3a>
 800741e:	4b0e      	ldr	r3, [pc, #56]	@ (8007458 <osKernelInitialize+0x64>)
 8007420:	681b      	ldr	r3, [r3, #0]
 8007422:	2b02      	cmp	r3, #2
 8007424:	d103      	bne.n	800742e <osKernelInitialize+0x3a>
    stat = osErrorISR;
 8007426:	f06f 0305 	mvn.w	r3, #5
 800742a:	60fb      	str	r3, [r7, #12]
 800742c:	e00c      	b.n	8007448 <osKernelInitialize+0x54>
  }
  else {
    if (KernelState == osKernelInactive) {
 800742e:	4b0a      	ldr	r3, [pc, #40]	@ (8007458 <osKernelInitialize+0x64>)
 8007430:	681b      	ldr	r3, [r3, #0]
 8007432:	2b00      	cmp	r3, #0
 8007434:	d105      	bne.n	8007442 <osKernelInitialize+0x4e>
      #if defined(USE_FREERTOS_HEAP_5) && (HEAP_5_REGION_SETUP == 1)
        vPortDefineHeapRegions (configHEAP_5_REGIONS);
      #endif
      KernelState = osKernelReady;
 8007436:	4b08      	ldr	r3, [pc, #32]	@ (8007458 <osKernelInitialize+0x64>)
 8007438:	2201      	movs	r2, #1
 800743a:	601a      	str	r2, [r3, #0]
      stat = osOK;
 800743c:	2300      	movs	r3, #0
 800743e:	60fb      	str	r3, [r7, #12]
 8007440:	e002      	b.n	8007448 <osKernelInitialize+0x54>
    } else {
      stat = osError;
 8007442:	f04f 33ff 	mov.w	r3, #4294967295
 8007446:	60fb      	str	r3, [r7, #12]
    }
  }

  return (stat);
 8007448:	68fb      	ldr	r3, [r7, #12]
}
 800744a:	4618      	mov	r0, r3
 800744c:	3714      	adds	r7, #20
 800744e:	46bd      	mov	sp, r7
 8007450:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007454:	4770      	bx	lr
 8007456:	bf00      	nop
 8007458:	200299f4 	.word	0x200299f4

0800745c <osKernelStart>:
  }

  return (state);
}

osStatus_t osKernelStart (void) {
 800745c:	b580      	push	{r7, lr}
 800745e:	b084      	sub	sp, #16
 8007460:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8007462:	f3ef 8305 	mrs	r3, IPSR
 8007466:	60bb      	str	r3, [r7, #8]
  return(result);
 8007468:	68bb      	ldr	r3, [r7, #8]
  osStatus_t stat;

  if (IS_IRQ()) {
 800746a:	2b00      	cmp	r3, #0
 800746c:	d10f      	bne.n	800748e <osKernelStart+0x32>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800746e:	f3ef 8310 	mrs	r3, PRIMASK
 8007472:	607b      	str	r3, [r7, #4]
  return(result);
 8007474:	687b      	ldr	r3, [r7, #4]
 8007476:	2b00      	cmp	r3, #0
 8007478:	d105      	bne.n	8007486 <osKernelStart+0x2a>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 800747a:	f3ef 8311 	mrs	r3, BASEPRI
 800747e:	603b      	str	r3, [r7, #0]
  return(result);
 8007480:	683b      	ldr	r3, [r7, #0]
 8007482:	2b00      	cmp	r3, #0
 8007484:	d007      	beq.n	8007496 <osKernelStart+0x3a>
 8007486:	4b0f      	ldr	r3, [pc, #60]	@ (80074c4 <osKernelStart+0x68>)
 8007488:	681b      	ldr	r3, [r3, #0]
 800748a:	2b02      	cmp	r3, #2
 800748c:	d103      	bne.n	8007496 <osKernelStart+0x3a>
    stat = osErrorISR;
 800748e:	f06f 0305 	mvn.w	r3, #5
 8007492:	60fb      	str	r3, [r7, #12]
 8007494:	e010      	b.n	80074b8 <osKernelStart+0x5c>
  }
  else {
    if (KernelState == osKernelReady) {
 8007496:	4b0b      	ldr	r3, [pc, #44]	@ (80074c4 <osKernelStart+0x68>)
 8007498:	681b      	ldr	r3, [r3, #0]
 800749a:	2b01      	cmp	r3, #1
 800749c:	d109      	bne.n	80074b2 <osKernelStart+0x56>
      /* Ensure SVC priority is at the reset value */
      SVC_Setup();
 800749e:	f7ff ffa2 	bl	80073e6 <SVC_Setup>
      /* Change state to enable IRQ masking check */
      KernelState = osKernelRunning;
 80074a2:	4b08      	ldr	r3, [pc, #32]	@ (80074c4 <osKernelStart+0x68>)
 80074a4:	2202      	movs	r2, #2
 80074a6:	601a      	str	r2, [r3, #0]
      /* Start the kernel scheduler */
      vTaskStartScheduler();
 80074a8:	f001 f90e 	bl	80086c8 <vTaskStartScheduler>
      stat = osOK;
 80074ac:	2300      	movs	r3, #0
 80074ae:	60fb      	str	r3, [r7, #12]
 80074b0:	e002      	b.n	80074b8 <osKernelStart+0x5c>
    } else {
      stat = osError;
 80074b2:	f04f 33ff 	mov.w	r3, #4294967295
 80074b6:	60fb      	str	r3, [r7, #12]
    }
  }

  return (stat);
 80074b8:	68fb      	ldr	r3, [r7, #12]
}
 80074ba:	4618      	mov	r0, r3
 80074bc:	3710      	adds	r7, #16
 80074be:	46bd      	mov	sp, r7
 80074c0:	bd80      	pop	{r7, pc}
 80074c2:	bf00      	nop
 80074c4:	200299f4 	.word	0x200299f4

080074c8 <osThreadNew>:
  return (configCPU_CLOCK_HZ);
}

/*---------------------------------------------------------------------------*/

osThreadId_t osThreadNew (osThreadFunc_t func, void *argument, const osThreadAttr_t *attr) {
 80074c8:	b580      	push	{r7, lr}
 80074ca:	b090      	sub	sp, #64	@ 0x40
 80074cc:	af04      	add	r7, sp, #16
 80074ce:	60f8      	str	r0, [r7, #12]
 80074d0:	60b9      	str	r1, [r7, #8]
 80074d2:	607a      	str	r2, [r7, #4]
  uint32_t stack;
  TaskHandle_t hTask;
  UBaseType_t prio;
  int32_t mem;

  hTask = NULL;
 80074d4:	2300      	movs	r3, #0
 80074d6:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 80074d8:	f3ef 8305 	mrs	r3, IPSR
 80074dc:	61fb      	str	r3, [r7, #28]
  return(result);
 80074de:	69fb      	ldr	r3, [r7, #28]

  if (!IS_IRQ() && (func != NULL)) {
 80074e0:	2b00      	cmp	r3, #0
 80074e2:	f040 808f 	bne.w	8007604 <osThreadNew+0x13c>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80074e6:	f3ef 8310 	mrs	r3, PRIMASK
 80074ea:	61bb      	str	r3, [r7, #24]
  return(result);
 80074ec:	69bb      	ldr	r3, [r7, #24]
 80074ee:	2b00      	cmp	r3, #0
 80074f0:	d105      	bne.n	80074fe <osThreadNew+0x36>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 80074f2:	f3ef 8311 	mrs	r3, BASEPRI
 80074f6:	617b      	str	r3, [r7, #20]
  return(result);
 80074f8:	697b      	ldr	r3, [r7, #20]
 80074fa:	2b00      	cmp	r3, #0
 80074fc:	d003      	beq.n	8007506 <osThreadNew+0x3e>
 80074fe:	4b44      	ldr	r3, [pc, #272]	@ (8007610 <osThreadNew+0x148>)
 8007500:	681b      	ldr	r3, [r3, #0]
 8007502:	2b02      	cmp	r3, #2
 8007504:	d07e      	beq.n	8007604 <osThreadNew+0x13c>
 8007506:	68fb      	ldr	r3, [r7, #12]
 8007508:	2b00      	cmp	r3, #0
 800750a:	d07b      	beq.n	8007604 <osThreadNew+0x13c>
    stack = configMINIMAL_STACK_SIZE;
 800750c:	2380      	movs	r3, #128	@ 0x80
 800750e:	62bb      	str	r3, [r7, #40]	@ 0x28
    prio  = (UBaseType_t)osPriorityNormal;
 8007510:	2318      	movs	r3, #24
 8007512:	627b      	str	r3, [r7, #36]	@ 0x24

    name = NULL;
 8007514:	2300      	movs	r3, #0
 8007516:	62fb      	str	r3, [r7, #44]	@ 0x2c
    mem  = -1;
 8007518:	f04f 33ff 	mov.w	r3, #4294967295
 800751c:	623b      	str	r3, [r7, #32]

    if (attr != NULL) {
 800751e:	687b      	ldr	r3, [r7, #4]
 8007520:	2b00      	cmp	r3, #0
 8007522:	d045      	beq.n	80075b0 <osThreadNew+0xe8>
      if (attr->name != NULL) {
 8007524:	687b      	ldr	r3, [r7, #4]
 8007526:	681b      	ldr	r3, [r3, #0]
 8007528:	2b00      	cmp	r3, #0
 800752a:	d002      	beq.n	8007532 <osThreadNew+0x6a>
        name = attr->name;
 800752c:	687b      	ldr	r3, [r7, #4]
 800752e:	681b      	ldr	r3, [r3, #0]
 8007530:	62fb      	str	r3, [r7, #44]	@ 0x2c
      }
      if (attr->priority != osPriorityNone) {
 8007532:	687b      	ldr	r3, [r7, #4]
 8007534:	699b      	ldr	r3, [r3, #24]
 8007536:	2b00      	cmp	r3, #0
 8007538:	d002      	beq.n	8007540 <osThreadNew+0x78>
        prio = (UBaseType_t)attr->priority;
 800753a:	687b      	ldr	r3, [r7, #4]
 800753c:	699b      	ldr	r3, [r3, #24]
 800753e:	627b      	str	r3, [r7, #36]	@ 0x24
      }

      if ((prio < osPriorityIdle) || (prio > osPriorityISR) || ((attr->attr_bits & osThreadJoinable) == osThreadJoinable)) {
 8007540:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007542:	2b00      	cmp	r3, #0
 8007544:	d008      	beq.n	8007558 <osThreadNew+0x90>
 8007546:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007548:	2b38      	cmp	r3, #56	@ 0x38
 800754a:	d805      	bhi.n	8007558 <osThreadNew+0x90>
 800754c:	687b      	ldr	r3, [r7, #4]
 800754e:	685b      	ldr	r3, [r3, #4]
 8007550:	f003 0301 	and.w	r3, r3, #1
 8007554:	2b00      	cmp	r3, #0
 8007556:	d001      	beq.n	800755c <osThreadNew+0x94>
        return (NULL);
 8007558:	2300      	movs	r3, #0
 800755a:	e054      	b.n	8007606 <osThreadNew+0x13e>
      }

      if (attr->stack_size > 0U) {
 800755c:	687b      	ldr	r3, [r7, #4]
 800755e:	695b      	ldr	r3, [r3, #20]
 8007560:	2b00      	cmp	r3, #0
 8007562:	d003      	beq.n	800756c <osThreadNew+0xa4>
        /* In FreeRTOS stack is not in bytes, but in sizeof(StackType_t) which is 4 on ARM ports.       */
        /* Stack size should be therefore 4 byte aligned in order to avoid division caused side effects */
        stack = attr->stack_size / sizeof(StackType_t);
 8007564:	687b      	ldr	r3, [r7, #4]
 8007566:	695b      	ldr	r3, [r3, #20]
 8007568:	089b      	lsrs	r3, r3, #2
 800756a:	62bb      	str	r3, [r7, #40]	@ 0x28
      }

      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 800756c:	687b      	ldr	r3, [r7, #4]
 800756e:	689b      	ldr	r3, [r3, #8]
 8007570:	2b00      	cmp	r3, #0
 8007572:	d00e      	beq.n	8007592 <osThreadNew+0xca>
 8007574:	687b      	ldr	r3, [r7, #4]
 8007576:	68db      	ldr	r3, [r3, #12]
 8007578:	2b5b      	cmp	r3, #91	@ 0x5b
 800757a:	d90a      	bls.n	8007592 <osThreadNew+0xca>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 800757c:	687b      	ldr	r3, [r7, #4]
 800757e:	691b      	ldr	r3, [r3, #16]
      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 8007580:	2b00      	cmp	r3, #0
 8007582:	d006      	beq.n	8007592 <osThreadNew+0xca>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 8007584:	687b      	ldr	r3, [r7, #4]
 8007586:	695b      	ldr	r3, [r3, #20]
 8007588:	2b00      	cmp	r3, #0
 800758a:	d002      	beq.n	8007592 <osThreadNew+0xca>
        mem = 1;
 800758c:	2301      	movs	r3, #1
 800758e:	623b      	str	r3, [r7, #32]
 8007590:	e010      	b.n	80075b4 <osThreadNew+0xec>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) && (attr->stack_mem == NULL)) {
 8007592:	687b      	ldr	r3, [r7, #4]
 8007594:	689b      	ldr	r3, [r3, #8]
 8007596:	2b00      	cmp	r3, #0
 8007598:	d10c      	bne.n	80075b4 <osThreadNew+0xec>
 800759a:	687b      	ldr	r3, [r7, #4]
 800759c:	68db      	ldr	r3, [r3, #12]
 800759e:	2b00      	cmp	r3, #0
 80075a0:	d108      	bne.n	80075b4 <osThreadNew+0xec>
 80075a2:	687b      	ldr	r3, [r7, #4]
 80075a4:	691b      	ldr	r3, [r3, #16]
 80075a6:	2b00      	cmp	r3, #0
 80075a8:	d104      	bne.n	80075b4 <osThreadNew+0xec>
          mem = 0;
 80075aa:	2300      	movs	r3, #0
 80075ac:	623b      	str	r3, [r7, #32]
 80075ae:	e001      	b.n	80075b4 <osThreadNew+0xec>
        }
      }
    }
    else {
      mem = 0;
 80075b0:	2300      	movs	r3, #0
 80075b2:	623b      	str	r3, [r7, #32]
    }

    if (mem == 1) {
 80075b4:	6a3b      	ldr	r3, [r7, #32]
 80075b6:	2b01      	cmp	r3, #1
 80075b8:	d110      	bne.n	80075dc <osThreadNew+0x114>
      hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 80075ba:	687b      	ldr	r3, [r7, #4]
 80075bc:	691b      	ldr	r3, [r3, #16]
                                                                                    (StaticTask_t *)attr->cb_mem);
 80075be:	687a      	ldr	r2, [r7, #4]
 80075c0:	6892      	ldr	r2, [r2, #8]
      hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 80075c2:	9202      	str	r2, [sp, #8]
 80075c4:	9301      	str	r3, [sp, #4]
 80075c6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80075c8:	9300      	str	r3, [sp, #0]
 80075ca:	68bb      	ldr	r3, [r7, #8]
 80075cc:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 80075ce:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 80075d0:	68f8      	ldr	r0, [r7, #12]
 80075d2:	f000 fe93 	bl	80082fc <xTaskCreateStatic>
 80075d6:	4603      	mov	r3, r0
 80075d8:	613b      	str	r3, [r7, #16]
 80075da:	e013      	b.n	8007604 <osThreadNew+0x13c>
    }
    else {
      if (mem == 0) {
 80075dc:	6a3b      	ldr	r3, [r7, #32]
 80075de:	2b00      	cmp	r3, #0
 80075e0:	d110      	bne.n	8007604 <osThreadNew+0x13c>
        if (xTaskCreate ((TaskFunction_t)func, name, (uint16_t)stack, argument, prio, &hTask) != pdPASS) {
 80075e2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80075e4:	b29a      	uxth	r2, r3
 80075e6:	f107 0310 	add.w	r3, r7, #16
 80075ea:	9301      	str	r3, [sp, #4]
 80075ec:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80075ee:	9300      	str	r3, [sp, #0]
 80075f0:	68bb      	ldr	r3, [r7, #8]
 80075f2:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 80075f4:	68f8      	ldr	r0, [r7, #12]
 80075f6:	f000 fee7 	bl	80083c8 <xTaskCreate>
 80075fa:	4603      	mov	r3, r0
 80075fc:	2b01      	cmp	r3, #1
 80075fe:	d001      	beq.n	8007604 <osThreadNew+0x13c>
          hTask = NULL;
 8007600:	2300      	movs	r3, #0
 8007602:	613b      	str	r3, [r7, #16]
        }
      }
    }
  }

  return ((osThreadId_t)hTask);
 8007604:	693b      	ldr	r3, [r7, #16]
}
 8007606:	4618      	mov	r0, r3
 8007608:	3730      	adds	r7, #48	@ 0x30
 800760a:	46bd      	mov	sp, r7
 800760c:	bd80      	pop	{r7, pc}
 800760e:	bf00      	nop
 8007610:	200299f4 	.word	0x200299f4

08007614 <osDelay>:

  /* Return flags before clearing */
  return (rflags);
}

osStatus_t osDelay (uint32_t ticks) {
 8007614:	b580      	push	{r7, lr}
 8007616:	b086      	sub	sp, #24
 8007618:	af00      	add	r7, sp, #0
 800761a:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800761c:	f3ef 8305 	mrs	r3, IPSR
 8007620:	613b      	str	r3, [r7, #16]
  return(result);
 8007622:	693b      	ldr	r3, [r7, #16]
  osStatus_t stat;

  if (IS_IRQ()) {
 8007624:	2b00      	cmp	r3, #0
 8007626:	d10f      	bne.n	8007648 <osDelay+0x34>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8007628:	f3ef 8310 	mrs	r3, PRIMASK
 800762c:	60fb      	str	r3, [r7, #12]
  return(result);
 800762e:	68fb      	ldr	r3, [r7, #12]
 8007630:	2b00      	cmp	r3, #0
 8007632:	d105      	bne.n	8007640 <osDelay+0x2c>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 8007634:	f3ef 8311 	mrs	r3, BASEPRI
 8007638:	60bb      	str	r3, [r7, #8]
  return(result);
 800763a:	68bb      	ldr	r3, [r7, #8]
 800763c:	2b00      	cmp	r3, #0
 800763e:	d007      	beq.n	8007650 <osDelay+0x3c>
 8007640:	4b0a      	ldr	r3, [pc, #40]	@ (800766c <osDelay+0x58>)
 8007642:	681b      	ldr	r3, [r3, #0]
 8007644:	2b02      	cmp	r3, #2
 8007646:	d103      	bne.n	8007650 <osDelay+0x3c>
    stat = osErrorISR;
 8007648:	f06f 0305 	mvn.w	r3, #5
 800764c:	617b      	str	r3, [r7, #20]
 800764e:	e007      	b.n	8007660 <osDelay+0x4c>
  }
  else {
    stat = osOK;
 8007650:	2300      	movs	r3, #0
 8007652:	617b      	str	r3, [r7, #20]

    if (ticks != 0U) {
 8007654:	687b      	ldr	r3, [r7, #4]
 8007656:	2b00      	cmp	r3, #0
 8007658:	d002      	beq.n	8007660 <osDelay+0x4c>
      vTaskDelay(ticks);
 800765a:	6878      	ldr	r0, [r7, #4]
 800765c:	f000 fffc 	bl	8008658 <vTaskDelay>
    }
  }

  return (stat);
 8007660:	697b      	ldr	r3, [r7, #20]
}
 8007662:	4618      	mov	r0, r3
 8007664:	3718      	adds	r7, #24
 8007666:	46bd      	mov	sp, r7
 8007668:	bd80      	pop	{r7, pc}
 800766a:	bf00      	nop
 800766c:	200299f4 	.word	0x200299f4

08007670 <vApplicationGetIdleTaskMemory>:

/*
  vApplicationGetIdleTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
void vApplicationGetIdleTaskMemory (StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize) {
 8007670:	b480      	push	{r7}
 8007672:	b085      	sub	sp, #20
 8007674:	af00      	add	r7, sp, #0
 8007676:	60f8      	str	r0, [r7, #12]
 8007678:	60b9      	str	r1, [r7, #8]
 800767a:	607a      	str	r2, [r7, #4]
  *ppxIdleTaskTCBBuffer   = &Idle_TCB;
 800767c:	68fb      	ldr	r3, [r7, #12]
 800767e:	4a07      	ldr	r2, [pc, #28]	@ (800769c <vApplicationGetIdleTaskMemory+0x2c>)
 8007680:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &Idle_Stack[0];
 8007682:	68bb      	ldr	r3, [r7, #8]
 8007684:	4a06      	ldr	r2, [pc, #24]	@ (80076a0 <vApplicationGetIdleTaskMemory+0x30>)
 8007686:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize   = (uint32_t)configMINIMAL_STACK_SIZE;
 8007688:	687b      	ldr	r3, [r7, #4]
 800768a:	2280      	movs	r2, #128	@ 0x80
 800768c:	601a      	str	r2, [r3, #0]
}
 800768e:	bf00      	nop
 8007690:	3714      	adds	r7, #20
 8007692:	46bd      	mov	sp, r7
 8007694:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007698:	4770      	bx	lr
 800769a:	bf00      	nop
 800769c:	200299f8 	.word	0x200299f8
 80076a0:	20029a54 	.word	0x20029a54

080076a4 <vApplicationGetTimerTaskMemory>:

/*
  vApplicationGetTimerTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
void vApplicationGetTimerTaskMemory (StaticTask_t **ppxTimerTaskTCBBuffer, StackType_t **ppxTimerTaskStackBuffer, uint32_t *pulTimerTaskStackSize) {
 80076a4:	b480      	push	{r7}
 80076a6:	b085      	sub	sp, #20
 80076a8:	af00      	add	r7, sp, #0
 80076aa:	60f8      	str	r0, [r7, #12]
 80076ac:	60b9      	str	r1, [r7, #8]
 80076ae:	607a      	str	r2, [r7, #4]
  *ppxTimerTaskTCBBuffer   = &Timer_TCB;
 80076b0:	68fb      	ldr	r3, [r7, #12]
 80076b2:	4a07      	ldr	r2, [pc, #28]	@ (80076d0 <vApplicationGetTimerTaskMemory+0x2c>)
 80076b4:	601a      	str	r2, [r3, #0]
  *ppxTimerTaskStackBuffer = &Timer_Stack[0];
 80076b6:	68bb      	ldr	r3, [r7, #8]
 80076b8:	4a06      	ldr	r2, [pc, #24]	@ (80076d4 <vApplicationGetTimerTaskMemory+0x30>)
 80076ba:	601a      	str	r2, [r3, #0]
  *pulTimerTaskStackSize   = (uint32_t)configTIMER_TASK_STACK_DEPTH;
 80076bc:	687b      	ldr	r3, [r7, #4]
 80076be:	f44f 7280 	mov.w	r2, #256	@ 0x100
 80076c2:	601a      	str	r2, [r3, #0]
}
 80076c4:	bf00      	nop
 80076c6:	3714      	adds	r7, #20
 80076c8:	46bd      	mov	sp, r7
 80076ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80076ce:	4770      	bx	lr
 80076d0:	20029c54 	.word	0x20029c54
 80076d4:	20029cb0 	.word	0x20029cb0

080076d8 <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 80076d8:	b480      	push	{r7}
 80076da:	b083      	sub	sp, #12
 80076dc:	af00      	add	r7, sp, #0
 80076de:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80076e0:	687b      	ldr	r3, [r7, #4]
 80076e2:	f103 0208 	add.w	r2, r3, #8
 80076e6:	687b      	ldr	r3, [r7, #4]
 80076e8:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 80076ea:	687b      	ldr	r3, [r7, #4]
 80076ec:	f04f 32ff 	mov.w	r2, #4294967295
 80076f0:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80076f2:	687b      	ldr	r3, [r7, #4]
 80076f4:	f103 0208 	add.w	r2, r3, #8
 80076f8:	687b      	ldr	r3, [r7, #4]
 80076fa:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80076fc:	687b      	ldr	r3, [r7, #4]
 80076fe:	f103 0208 	add.w	r2, r3, #8
 8007702:	687b      	ldr	r3, [r7, #4]
 8007704:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 8007706:	687b      	ldr	r3, [r7, #4]
 8007708:	2200      	movs	r2, #0
 800770a:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 800770c:	bf00      	nop
 800770e:	370c      	adds	r7, #12
 8007710:	46bd      	mov	sp, r7
 8007712:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007716:	4770      	bx	lr

08007718 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 8007718:	b480      	push	{r7}
 800771a:	b083      	sub	sp, #12
 800771c:	af00      	add	r7, sp, #0
 800771e:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 8007720:	687b      	ldr	r3, [r7, #4]
 8007722:	2200      	movs	r2, #0
 8007724:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 8007726:	bf00      	nop
 8007728:	370c      	adds	r7, #12
 800772a:	46bd      	mov	sp, r7
 800772c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007730:	4770      	bx	lr

08007732 <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8007732:	b480      	push	{r7}
 8007734:	b085      	sub	sp, #20
 8007736:	af00      	add	r7, sp, #0
 8007738:	6078      	str	r0, [r7, #4]
 800773a:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 800773c:	687b      	ldr	r3, [r7, #4]
 800773e:	685b      	ldr	r3, [r3, #4]
 8007740:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 8007742:	683b      	ldr	r3, [r7, #0]
 8007744:	68fa      	ldr	r2, [r7, #12]
 8007746:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 8007748:	68fb      	ldr	r3, [r7, #12]
 800774a:	689a      	ldr	r2, [r3, #8]
 800774c:	683b      	ldr	r3, [r7, #0]
 800774e:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 8007750:	68fb      	ldr	r3, [r7, #12]
 8007752:	689b      	ldr	r3, [r3, #8]
 8007754:	683a      	ldr	r2, [r7, #0]
 8007756:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 8007758:	68fb      	ldr	r3, [r7, #12]
 800775a:	683a      	ldr	r2, [r7, #0]
 800775c:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 800775e:	683b      	ldr	r3, [r7, #0]
 8007760:	687a      	ldr	r2, [r7, #4]
 8007762:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8007764:	687b      	ldr	r3, [r7, #4]
 8007766:	681b      	ldr	r3, [r3, #0]
 8007768:	1c5a      	adds	r2, r3, #1
 800776a:	687b      	ldr	r3, [r7, #4]
 800776c:	601a      	str	r2, [r3, #0]
}
 800776e:	bf00      	nop
 8007770:	3714      	adds	r7, #20
 8007772:	46bd      	mov	sp, r7
 8007774:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007778:	4770      	bx	lr

0800777a <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 800777a:	b480      	push	{r7}
 800777c:	b085      	sub	sp, #20
 800777e:	af00      	add	r7, sp, #0
 8007780:	6078      	str	r0, [r7, #4]
 8007782:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 8007784:	683b      	ldr	r3, [r7, #0]
 8007786:	681b      	ldr	r3, [r3, #0]
 8007788:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 800778a:	68bb      	ldr	r3, [r7, #8]
 800778c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007790:	d103      	bne.n	800779a <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 8007792:	687b      	ldr	r3, [r7, #4]
 8007794:	691b      	ldr	r3, [r3, #16]
 8007796:	60fb      	str	r3, [r7, #12]
 8007798:	e00c      	b.n	80077b4 <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 800779a:	687b      	ldr	r3, [r7, #4]
 800779c:	3308      	adds	r3, #8
 800779e:	60fb      	str	r3, [r7, #12]
 80077a0:	e002      	b.n	80077a8 <vListInsert+0x2e>
 80077a2:	68fb      	ldr	r3, [r7, #12]
 80077a4:	685b      	ldr	r3, [r3, #4]
 80077a6:	60fb      	str	r3, [r7, #12]
 80077a8:	68fb      	ldr	r3, [r7, #12]
 80077aa:	685b      	ldr	r3, [r3, #4]
 80077ac:	681b      	ldr	r3, [r3, #0]
 80077ae:	68ba      	ldr	r2, [r7, #8]
 80077b0:	429a      	cmp	r2, r3
 80077b2:	d2f6      	bcs.n	80077a2 <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 80077b4:	68fb      	ldr	r3, [r7, #12]
 80077b6:	685a      	ldr	r2, [r3, #4]
 80077b8:	683b      	ldr	r3, [r7, #0]
 80077ba:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 80077bc:	683b      	ldr	r3, [r7, #0]
 80077be:	685b      	ldr	r3, [r3, #4]
 80077c0:	683a      	ldr	r2, [r7, #0]
 80077c2:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 80077c4:	683b      	ldr	r3, [r7, #0]
 80077c6:	68fa      	ldr	r2, [r7, #12]
 80077c8:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 80077ca:	68fb      	ldr	r3, [r7, #12]
 80077cc:	683a      	ldr	r2, [r7, #0]
 80077ce:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 80077d0:	683b      	ldr	r3, [r7, #0]
 80077d2:	687a      	ldr	r2, [r7, #4]
 80077d4:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 80077d6:	687b      	ldr	r3, [r7, #4]
 80077d8:	681b      	ldr	r3, [r3, #0]
 80077da:	1c5a      	adds	r2, r3, #1
 80077dc:	687b      	ldr	r3, [r7, #4]
 80077de:	601a      	str	r2, [r3, #0]
}
 80077e0:	bf00      	nop
 80077e2:	3714      	adds	r7, #20
 80077e4:	46bd      	mov	sp, r7
 80077e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80077ea:	4770      	bx	lr

080077ec <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 80077ec:	b480      	push	{r7}
 80077ee:	b085      	sub	sp, #20
 80077f0:	af00      	add	r7, sp, #0
 80077f2:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 80077f4:	687b      	ldr	r3, [r7, #4]
 80077f6:	691b      	ldr	r3, [r3, #16]
 80077f8:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 80077fa:	687b      	ldr	r3, [r7, #4]
 80077fc:	685b      	ldr	r3, [r3, #4]
 80077fe:	687a      	ldr	r2, [r7, #4]
 8007800:	6892      	ldr	r2, [r2, #8]
 8007802:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 8007804:	687b      	ldr	r3, [r7, #4]
 8007806:	689b      	ldr	r3, [r3, #8]
 8007808:	687a      	ldr	r2, [r7, #4]
 800780a:	6852      	ldr	r2, [r2, #4]
 800780c:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 800780e:	68fb      	ldr	r3, [r7, #12]
 8007810:	685b      	ldr	r3, [r3, #4]
 8007812:	687a      	ldr	r2, [r7, #4]
 8007814:	429a      	cmp	r2, r3
 8007816:	d103      	bne.n	8007820 <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 8007818:	687b      	ldr	r3, [r7, #4]
 800781a:	689a      	ldr	r2, [r3, #8]
 800781c:	68fb      	ldr	r3, [r7, #12]
 800781e:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 8007820:	687b      	ldr	r3, [r7, #4]
 8007822:	2200      	movs	r2, #0
 8007824:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 8007826:	68fb      	ldr	r3, [r7, #12]
 8007828:	681b      	ldr	r3, [r3, #0]
 800782a:	1e5a      	subs	r2, r3, #1
 800782c:	68fb      	ldr	r3, [r7, #12]
 800782e:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 8007830:	68fb      	ldr	r3, [r7, #12]
 8007832:	681b      	ldr	r3, [r3, #0]
}
 8007834:	4618      	mov	r0, r3
 8007836:	3714      	adds	r7, #20
 8007838:	46bd      	mov	sp, r7
 800783a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800783e:	4770      	bx	lr

08007840 <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 8007840:	b580      	push	{r7, lr}
 8007842:	b084      	sub	sp, #16
 8007844:	af00      	add	r7, sp, #0
 8007846:	6078      	str	r0, [r7, #4]
 8007848:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = xQueue;
 800784a:	687b      	ldr	r3, [r7, #4]
 800784c:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 800784e:	68fb      	ldr	r3, [r7, #12]
 8007850:	2b00      	cmp	r3, #0
 8007852:	d10d      	bne.n	8007870 <xQueueGenericReset+0x30>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 8007854:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007858:	b672      	cpsid	i
 800785a:	f383 8811 	msr	BASEPRI, r3
 800785e:	f3bf 8f6f 	isb	sy
 8007862:	f3bf 8f4f 	dsb	sy
 8007866:	b662      	cpsie	i
 8007868:	60bb      	str	r3, [r7, #8]
		"	isb														\n" \
		"	dsb														\n" \
		"	cpsie i													\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 800786a:	bf00      	nop
 800786c:	bf00      	nop
 800786e:	e7fd      	b.n	800786c <xQueueGenericReset+0x2c>

	taskENTER_CRITICAL();
 8007870:	f002 f8ec 	bl	8009a4c <vPortEnterCritical>
	{
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8007874:	68fb      	ldr	r3, [r7, #12]
 8007876:	681a      	ldr	r2, [r3, #0]
 8007878:	68fb      	ldr	r3, [r7, #12]
 800787a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800787c:	68f9      	ldr	r1, [r7, #12]
 800787e:	6c09      	ldr	r1, [r1, #64]	@ 0x40
 8007880:	fb01 f303 	mul.w	r3, r1, r3
 8007884:	441a      	add	r2, r3
 8007886:	68fb      	ldr	r3, [r7, #12]
 8007888:	609a      	str	r2, [r3, #8]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 800788a:	68fb      	ldr	r3, [r7, #12]
 800788c:	2200      	movs	r2, #0
 800788e:	639a      	str	r2, [r3, #56]	@ 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 8007890:	68fb      	ldr	r3, [r7, #12]
 8007892:	681a      	ldr	r2, [r3, #0]
 8007894:	68fb      	ldr	r3, [r7, #12]
 8007896:	605a      	str	r2, [r3, #4]
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8007898:	68fb      	ldr	r3, [r7, #12]
 800789a:	681a      	ldr	r2, [r3, #0]
 800789c:	68fb      	ldr	r3, [r7, #12]
 800789e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80078a0:	3b01      	subs	r3, #1
 80078a2:	68f9      	ldr	r1, [r7, #12]
 80078a4:	6c09      	ldr	r1, [r1, #64]	@ 0x40
 80078a6:	fb01 f303 	mul.w	r3, r1, r3
 80078aa:	441a      	add	r2, r3
 80078ac:	68fb      	ldr	r3, [r7, #12]
 80078ae:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 80078b0:	68fb      	ldr	r3, [r7, #12]
 80078b2:	22ff      	movs	r2, #255	@ 0xff
 80078b4:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 80078b8:	68fb      	ldr	r3, [r7, #12]
 80078ba:	22ff      	movs	r2, #255	@ 0xff
 80078bc:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

		if( xNewQueue == pdFALSE )
 80078c0:	683b      	ldr	r3, [r7, #0]
 80078c2:	2b00      	cmp	r3, #0
 80078c4:	d114      	bne.n	80078f0 <xQueueGenericReset+0xb0>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 80078c6:	68fb      	ldr	r3, [r7, #12]
 80078c8:	691b      	ldr	r3, [r3, #16]
 80078ca:	2b00      	cmp	r3, #0
 80078cc:	d01a      	beq.n	8007904 <xQueueGenericReset+0xc4>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 80078ce:	68fb      	ldr	r3, [r7, #12]
 80078d0:	3310      	adds	r3, #16
 80078d2:	4618      	mov	r0, r3
 80078d4:	f001 f994 	bl	8008c00 <xTaskRemoveFromEventList>
 80078d8:	4603      	mov	r3, r0
 80078da:	2b00      	cmp	r3, #0
 80078dc:	d012      	beq.n	8007904 <xQueueGenericReset+0xc4>
				{
					queueYIELD_IF_USING_PREEMPTION();
 80078de:	4b0d      	ldr	r3, [pc, #52]	@ (8007914 <xQueueGenericReset+0xd4>)
 80078e0:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80078e4:	601a      	str	r2, [r3, #0]
 80078e6:	f3bf 8f4f 	dsb	sy
 80078ea:	f3bf 8f6f 	isb	sy
 80078ee:	e009      	b.n	8007904 <xQueueGenericReset+0xc4>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 80078f0:	68fb      	ldr	r3, [r7, #12]
 80078f2:	3310      	adds	r3, #16
 80078f4:	4618      	mov	r0, r3
 80078f6:	f7ff feef 	bl	80076d8 <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 80078fa:	68fb      	ldr	r3, [r7, #12]
 80078fc:	3324      	adds	r3, #36	@ 0x24
 80078fe:	4618      	mov	r0, r3
 8007900:	f7ff feea 	bl	80076d8 <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 8007904:	f002 f8d8 	bl	8009ab8 <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 8007908:	2301      	movs	r3, #1
}
 800790a:	4618      	mov	r0, r3
 800790c:	3710      	adds	r7, #16
 800790e:	46bd      	mov	sp, r7
 8007910:	bd80      	pop	{r7, pc}
 8007912:	bf00      	nop
 8007914:	e000ed04 	.word	0xe000ed04

08007918 <xQueueGenericCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreateStatic( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, StaticQueue_t *pxStaticQueue, const uint8_t ucQueueType )
	{
 8007918:	b580      	push	{r7, lr}
 800791a:	b08e      	sub	sp, #56	@ 0x38
 800791c:	af02      	add	r7, sp, #8
 800791e:	60f8      	str	r0, [r7, #12]
 8007920:	60b9      	str	r1, [r7, #8]
 8007922:	607a      	str	r2, [r7, #4]
 8007924:	603b      	str	r3, [r7, #0]
	Queue_t *pxNewQueue;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 8007926:	68fb      	ldr	r3, [r7, #12]
 8007928:	2b00      	cmp	r3, #0
 800792a:	d10d      	bne.n	8007948 <xQueueGenericCreateStatic+0x30>
	__asm volatile
 800792c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007930:	b672      	cpsid	i
 8007932:	f383 8811 	msr	BASEPRI, r3
 8007936:	f3bf 8f6f 	isb	sy
 800793a:	f3bf 8f4f 	dsb	sy
 800793e:	b662      	cpsie	i
 8007940:	62bb      	str	r3, [r7, #40]	@ 0x28
}
 8007942:	bf00      	nop
 8007944:	bf00      	nop
 8007946:	e7fd      	b.n	8007944 <xQueueGenericCreateStatic+0x2c>

		/* The StaticQueue_t structure and the queue storage area must be
		supplied. */
		configASSERT( pxStaticQueue != NULL );
 8007948:	683b      	ldr	r3, [r7, #0]
 800794a:	2b00      	cmp	r3, #0
 800794c:	d10d      	bne.n	800796a <xQueueGenericCreateStatic+0x52>
	__asm volatile
 800794e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007952:	b672      	cpsid	i
 8007954:	f383 8811 	msr	BASEPRI, r3
 8007958:	f3bf 8f6f 	isb	sy
 800795c:	f3bf 8f4f 	dsb	sy
 8007960:	b662      	cpsie	i
 8007962:	627b      	str	r3, [r7, #36]	@ 0x24
}
 8007964:	bf00      	nop
 8007966:	bf00      	nop
 8007968:	e7fd      	b.n	8007966 <xQueueGenericCreateStatic+0x4e>

		/* A queue storage area should be provided if the item size is not 0, and
		should not be provided if the item size is 0. */
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 800796a:	687b      	ldr	r3, [r7, #4]
 800796c:	2b00      	cmp	r3, #0
 800796e:	d002      	beq.n	8007976 <xQueueGenericCreateStatic+0x5e>
 8007970:	68bb      	ldr	r3, [r7, #8]
 8007972:	2b00      	cmp	r3, #0
 8007974:	d001      	beq.n	800797a <xQueueGenericCreateStatic+0x62>
 8007976:	2301      	movs	r3, #1
 8007978:	e000      	b.n	800797c <xQueueGenericCreateStatic+0x64>
 800797a:	2300      	movs	r3, #0
 800797c:	2b00      	cmp	r3, #0
 800797e:	d10d      	bne.n	800799c <xQueueGenericCreateStatic+0x84>
	__asm volatile
 8007980:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007984:	b672      	cpsid	i
 8007986:	f383 8811 	msr	BASEPRI, r3
 800798a:	f3bf 8f6f 	isb	sy
 800798e:	f3bf 8f4f 	dsb	sy
 8007992:	b662      	cpsie	i
 8007994:	623b      	str	r3, [r7, #32]
}
 8007996:	bf00      	nop
 8007998:	bf00      	nop
 800799a:	e7fd      	b.n	8007998 <xQueueGenericCreateStatic+0x80>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 800799c:	687b      	ldr	r3, [r7, #4]
 800799e:	2b00      	cmp	r3, #0
 80079a0:	d102      	bne.n	80079a8 <xQueueGenericCreateStatic+0x90>
 80079a2:	68bb      	ldr	r3, [r7, #8]
 80079a4:	2b00      	cmp	r3, #0
 80079a6:	d101      	bne.n	80079ac <xQueueGenericCreateStatic+0x94>
 80079a8:	2301      	movs	r3, #1
 80079aa:	e000      	b.n	80079ae <xQueueGenericCreateStatic+0x96>
 80079ac:	2300      	movs	r3, #0
 80079ae:	2b00      	cmp	r3, #0
 80079b0:	d10d      	bne.n	80079ce <xQueueGenericCreateStatic+0xb6>
	__asm volatile
 80079b2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80079b6:	b672      	cpsid	i
 80079b8:	f383 8811 	msr	BASEPRI, r3
 80079bc:	f3bf 8f6f 	isb	sy
 80079c0:	f3bf 8f4f 	dsb	sy
 80079c4:	b662      	cpsie	i
 80079c6:	61fb      	str	r3, [r7, #28]
}
 80079c8:	bf00      	nop
 80079ca:	bf00      	nop
 80079cc:	e7fd      	b.n	80079ca <xQueueGenericCreateStatic+0xb2>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticQueue_t or StaticSemaphore_t equals the size of
			the real queue and semaphore structures. */
			volatile size_t xSize = sizeof( StaticQueue_t );
 80079ce:	2350      	movs	r3, #80	@ 0x50
 80079d0:	617b      	str	r3, [r7, #20]
			configASSERT( xSize == sizeof( Queue_t ) );
 80079d2:	697b      	ldr	r3, [r7, #20]
 80079d4:	2b50      	cmp	r3, #80	@ 0x50
 80079d6:	d00d      	beq.n	80079f4 <xQueueGenericCreateStatic+0xdc>
	__asm volatile
 80079d8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80079dc:	b672      	cpsid	i
 80079de:	f383 8811 	msr	BASEPRI, r3
 80079e2:	f3bf 8f6f 	isb	sy
 80079e6:	f3bf 8f4f 	dsb	sy
 80079ea:	b662      	cpsie	i
 80079ec:	61bb      	str	r3, [r7, #24]
}
 80079ee:	bf00      	nop
 80079f0:	bf00      	nop
 80079f2:	e7fd      	b.n	80079f0 <xQueueGenericCreateStatic+0xd8>
			( void ) xSize; /* Keeps lint quiet when configASSERT() is not defined. */
 80079f4:	697b      	ldr	r3, [r7, #20]
		#endif /* configASSERT_DEFINED */

		/* The address of a statically allocated queue was passed in, use it.
		The address of a statically allocated storage area was also passed in
		but is already set. */
		pxNewQueue = ( Queue_t * ) pxStaticQueue; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 80079f6:	683b      	ldr	r3, [r7, #0]
 80079f8:	62fb      	str	r3, [r7, #44]	@ 0x2c

		if( pxNewQueue != NULL )
 80079fa:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80079fc:	2b00      	cmp	r3, #0
 80079fe:	d00d      	beq.n	8007a1c <xQueueGenericCreateStatic+0x104>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Queues can be allocated wither statically or dynamically, so
				note this queue was allocated statically in case the queue is
				later deleted. */
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 8007a00:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8007a02:	2201      	movs	r2, #1
 8007a04:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 8007a08:	f897 2038 	ldrb.w	r2, [r7, #56]	@ 0x38
 8007a0c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8007a0e:	9300      	str	r3, [sp, #0]
 8007a10:	4613      	mov	r3, r2
 8007a12:	687a      	ldr	r2, [r7, #4]
 8007a14:	68b9      	ldr	r1, [r7, #8]
 8007a16:	68f8      	ldr	r0, [r7, #12]
 8007a18:	f000 f848 	bl	8007aac <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 8007a1c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
	}
 8007a1e:	4618      	mov	r0, r3
 8007a20:	3730      	adds	r7, #48	@ 0x30
 8007a22:	46bd      	mov	sp, r7
 8007a24:	bd80      	pop	{r7, pc}

08007a26 <xQueueGenericCreate>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreate( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, const uint8_t ucQueueType )
	{
 8007a26:	b580      	push	{r7, lr}
 8007a28:	b08a      	sub	sp, #40	@ 0x28
 8007a2a:	af02      	add	r7, sp, #8
 8007a2c:	60f8      	str	r0, [r7, #12]
 8007a2e:	60b9      	str	r1, [r7, #8]
 8007a30:	4613      	mov	r3, r2
 8007a32:	71fb      	strb	r3, [r7, #7]
	Queue_t *pxNewQueue;
	size_t xQueueSizeInBytes;
	uint8_t *pucQueueStorage;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 8007a34:	68fb      	ldr	r3, [r7, #12]
 8007a36:	2b00      	cmp	r3, #0
 8007a38:	d10d      	bne.n	8007a56 <xQueueGenericCreate+0x30>
	__asm volatile
 8007a3a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007a3e:	b672      	cpsid	i
 8007a40:	f383 8811 	msr	BASEPRI, r3
 8007a44:	f3bf 8f6f 	isb	sy
 8007a48:	f3bf 8f4f 	dsb	sy
 8007a4c:	b662      	cpsie	i
 8007a4e:	613b      	str	r3, [r7, #16]
}
 8007a50:	bf00      	nop
 8007a52:	bf00      	nop
 8007a54:	e7fd      	b.n	8007a52 <xQueueGenericCreate+0x2c>

		if( uxItemSize == ( UBaseType_t ) 0 )
 8007a56:	68bb      	ldr	r3, [r7, #8]
 8007a58:	2b00      	cmp	r3, #0
 8007a5a:	d102      	bne.n	8007a62 <xQueueGenericCreate+0x3c>
		{
			/* There is not going to be a queue storage area. */
			xQueueSizeInBytes = ( size_t ) 0;
 8007a5c:	2300      	movs	r3, #0
 8007a5e:	61fb      	str	r3, [r7, #28]
 8007a60:	e004      	b.n	8007a6c <xQueueGenericCreate+0x46>
		}
		else
		{
			/* Allocate enough space to hold the maximum number of items that
			can be in the queue at any time. */
			xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8007a62:	68fb      	ldr	r3, [r7, #12]
 8007a64:	68ba      	ldr	r2, [r7, #8]
 8007a66:	fb02 f303 	mul.w	r3, r2, r3
 8007a6a:	61fb      	str	r3, [r7, #28]
		alignment requirements of the Queue_t structure - which in this case
		is an int8_t *.  Therefore, whenever the stack alignment requirements
		are greater than or equal to the pointer to char requirements the cast
		is safe.  In other cases alignment requirements are not strict (one or
		two bytes). */
		pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes ); /*lint !e9087 !e9079 see comment above. */
 8007a6c:	69fb      	ldr	r3, [r7, #28]
 8007a6e:	3350      	adds	r3, #80	@ 0x50
 8007a70:	4618      	mov	r0, r3
 8007a72:	f002 f919 	bl	8009ca8 <pvPortMalloc>
 8007a76:	61b8      	str	r0, [r7, #24]

		if( pxNewQueue != NULL )
 8007a78:	69bb      	ldr	r3, [r7, #24]
 8007a7a:	2b00      	cmp	r3, #0
 8007a7c:	d011      	beq.n	8007aa2 <xQueueGenericCreate+0x7c>
		{
			/* Jump past the queue structure to find the location of the queue
			storage area. */
			pucQueueStorage = ( uint8_t * ) pxNewQueue;
 8007a7e:	69bb      	ldr	r3, [r7, #24]
 8007a80:	617b      	str	r3, [r7, #20]
			pucQueueStorage += sizeof( Queue_t ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8007a82:	697b      	ldr	r3, [r7, #20]
 8007a84:	3350      	adds	r3, #80	@ 0x50
 8007a86:	617b      	str	r3, [r7, #20]
			#if( configSUPPORT_STATIC_ALLOCATION == 1 )
			{
				/* Queues can be created either statically or dynamically, so
				note this task was created dynamically in case it is later
				deleted. */
				pxNewQueue->ucStaticallyAllocated = pdFALSE;
 8007a88:	69bb      	ldr	r3, [r7, #24]
 8007a8a:	2200      	movs	r2, #0
 8007a8c:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 8007a90:	79fa      	ldrb	r2, [r7, #7]
 8007a92:	69bb      	ldr	r3, [r7, #24]
 8007a94:	9300      	str	r3, [sp, #0]
 8007a96:	4613      	mov	r3, r2
 8007a98:	697a      	ldr	r2, [r7, #20]
 8007a9a:	68b9      	ldr	r1, [r7, #8]
 8007a9c:	68f8      	ldr	r0, [r7, #12]
 8007a9e:	f000 f805 	bl	8007aac <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 8007aa2:	69bb      	ldr	r3, [r7, #24]
	}
 8007aa4:	4618      	mov	r0, r3
 8007aa6:	3720      	adds	r7, #32
 8007aa8:	46bd      	mov	sp, r7
 8007aaa:	bd80      	pop	{r7, pc}

08007aac <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 8007aac:	b580      	push	{r7, lr}
 8007aae:	b084      	sub	sp, #16
 8007ab0:	af00      	add	r7, sp, #0
 8007ab2:	60f8      	str	r0, [r7, #12]
 8007ab4:	60b9      	str	r1, [r7, #8]
 8007ab6:	607a      	str	r2, [r7, #4]
 8007ab8:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 8007aba:	68bb      	ldr	r3, [r7, #8]
 8007abc:	2b00      	cmp	r3, #0
 8007abe:	d103      	bne.n	8007ac8 <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 8007ac0:	69bb      	ldr	r3, [r7, #24]
 8007ac2:	69ba      	ldr	r2, [r7, #24]
 8007ac4:	601a      	str	r2, [r3, #0]
 8007ac6:	e002      	b.n	8007ace <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 8007ac8:	69bb      	ldr	r3, [r7, #24]
 8007aca:	687a      	ldr	r2, [r7, #4]
 8007acc:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 8007ace:	69bb      	ldr	r3, [r7, #24]
 8007ad0:	68fa      	ldr	r2, [r7, #12]
 8007ad2:	63da      	str	r2, [r3, #60]	@ 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 8007ad4:	69bb      	ldr	r3, [r7, #24]
 8007ad6:	68ba      	ldr	r2, [r7, #8]
 8007ad8:	641a      	str	r2, [r3, #64]	@ 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 8007ada:	2101      	movs	r1, #1
 8007adc:	69b8      	ldr	r0, [r7, #24]
 8007ade:	f7ff feaf 	bl	8007840 <xQueueGenericReset>

	#if ( configUSE_TRACE_FACILITY == 1 )
	{
		pxNewQueue->ucQueueType = ucQueueType;
 8007ae2:	69bb      	ldr	r3, [r7, #24]
 8007ae4:	78fa      	ldrb	r2, [r7, #3]
 8007ae6:	f883 204c 	strb.w	r2, [r3, #76]	@ 0x4c
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 8007aea:	bf00      	nop
 8007aec:	3710      	adds	r7, #16
 8007aee:	46bd      	mov	sp, r7
 8007af0:	bd80      	pop	{r7, pc}
	...

08007af4 <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 8007af4:	b580      	push	{r7, lr}
 8007af6:	b08e      	sub	sp, #56	@ 0x38
 8007af8:	af00      	add	r7, sp, #0
 8007afa:	60f8      	str	r0, [r7, #12]
 8007afc:	60b9      	str	r1, [r7, #8]
 8007afe:	607a      	str	r2, [r7, #4]
 8007b00:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 8007b02:	2300      	movs	r3, #0
 8007b04:	637b      	str	r3, [r7, #52]	@ 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 8007b06:	68fb      	ldr	r3, [r7, #12]
 8007b08:	633b      	str	r3, [r7, #48]	@ 0x30

	configASSERT( pxQueue );
 8007b0a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007b0c:	2b00      	cmp	r3, #0
 8007b0e:	d10d      	bne.n	8007b2c <xQueueGenericSend+0x38>
	__asm volatile
 8007b10:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007b14:	b672      	cpsid	i
 8007b16:	f383 8811 	msr	BASEPRI, r3
 8007b1a:	f3bf 8f6f 	isb	sy
 8007b1e:	f3bf 8f4f 	dsb	sy
 8007b22:	b662      	cpsie	i
 8007b24:	62bb      	str	r3, [r7, #40]	@ 0x28
}
 8007b26:	bf00      	nop
 8007b28:	bf00      	nop
 8007b2a:	e7fd      	b.n	8007b28 <xQueueGenericSend+0x34>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8007b2c:	68bb      	ldr	r3, [r7, #8]
 8007b2e:	2b00      	cmp	r3, #0
 8007b30:	d103      	bne.n	8007b3a <xQueueGenericSend+0x46>
 8007b32:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007b34:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8007b36:	2b00      	cmp	r3, #0
 8007b38:	d101      	bne.n	8007b3e <xQueueGenericSend+0x4a>
 8007b3a:	2301      	movs	r3, #1
 8007b3c:	e000      	b.n	8007b40 <xQueueGenericSend+0x4c>
 8007b3e:	2300      	movs	r3, #0
 8007b40:	2b00      	cmp	r3, #0
 8007b42:	d10d      	bne.n	8007b60 <xQueueGenericSend+0x6c>
	__asm volatile
 8007b44:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007b48:	b672      	cpsid	i
 8007b4a:	f383 8811 	msr	BASEPRI, r3
 8007b4e:	f3bf 8f6f 	isb	sy
 8007b52:	f3bf 8f4f 	dsb	sy
 8007b56:	b662      	cpsie	i
 8007b58:	627b      	str	r3, [r7, #36]	@ 0x24
}
 8007b5a:	bf00      	nop
 8007b5c:	bf00      	nop
 8007b5e:	e7fd      	b.n	8007b5c <xQueueGenericSend+0x68>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8007b60:	683b      	ldr	r3, [r7, #0]
 8007b62:	2b02      	cmp	r3, #2
 8007b64:	d103      	bne.n	8007b6e <xQueueGenericSend+0x7a>
 8007b66:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007b68:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8007b6a:	2b01      	cmp	r3, #1
 8007b6c:	d101      	bne.n	8007b72 <xQueueGenericSend+0x7e>
 8007b6e:	2301      	movs	r3, #1
 8007b70:	e000      	b.n	8007b74 <xQueueGenericSend+0x80>
 8007b72:	2300      	movs	r3, #0
 8007b74:	2b00      	cmp	r3, #0
 8007b76:	d10d      	bne.n	8007b94 <xQueueGenericSend+0xa0>
	__asm volatile
 8007b78:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007b7c:	b672      	cpsid	i
 8007b7e:	f383 8811 	msr	BASEPRI, r3
 8007b82:	f3bf 8f6f 	isb	sy
 8007b86:	f3bf 8f4f 	dsb	sy
 8007b8a:	b662      	cpsie	i
 8007b8c:	623b      	str	r3, [r7, #32]
}
 8007b8e:	bf00      	nop
 8007b90:	bf00      	nop
 8007b92:	e7fd      	b.n	8007b90 <xQueueGenericSend+0x9c>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8007b94:	f001 f9fc 	bl	8008f90 <xTaskGetSchedulerState>
 8007b98:	4603      	mov	r3, r0
 8007b9a:	2b00      	cmp	r3, #0
 8007b9c:	d102      	bne.n	8007ba4 <xQueueGenericSend+0xb0>
 8007b9e:	687b      	ldr	r3, [r7, #4]
 8007ba0:	2b00      	cmp	r3, #0
 8007ba2:	d101      	bne.n	8007ba8 <xQueueGenericSend+0xb4>
 8007ba4:	2301      	movs	r3, #1
 8007ba6:	e000      	b.n	8007baa <xQueueGenericSend+0xb6>
 8007ba8:	2300      	movs	r3, #0
 8007baa:	2b00      	cmp	r3, #0
 8007bac:	d10d      	bne.n	8007bca <xQueueGenericSend+0xd6>
	__asm volatile
 8007bae:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007bb2:	b672      	cpsid	i
 8007bb4:	f383 8811 	msr	BASEPRI, r3
 8007bb8:	f3bf 8f6f 	isb	sy
 8007bbc:	f3bf 8f4f 	dsb	sy
 8007bc0:	b662      	cpsie	i
 8007bc2:	61fb      	str	r3, [r7, #28]
}
 8007bc4:	bf00      	nop
 8007bc6:	bf00      	nop
 8007bc8:	e7fd      	b.n	8007bc6 <xQueueGenericSend+0xd2>
	/*lint -save -e904 This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8007bca:	f001 ff3f 	bl	8009a4c <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8007bce:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007bd0:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8007bd2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007bd4:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8007bd6:	429a      	cmp	r2, r3
 8007bd8:	d302      	bcc.n	8007be0 <xQueueGenericSend+0xec>
 8007bda:	683b      	ldr	r3, [r7, #0]
 8007bdc:	2b02      	cmp	r3, #2
 8007bde:	d129      	bne.n	8007c34 <xQueueGenericSend+0x140>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8007be0:	683a      	ldr	r2, [r7, #0]
 8007be2:	68b9      	ldr	r1, [r7, #8]
 8007be4:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8007be6:	f000 fa1b 	bl	8008020 <prvCopyDataToQueue>
 8007bea:	62f8      	str	r0, [r7, #44]	@ 0x2c

					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8007bec:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007bee:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007bf0:	2b00      	cmp	r3, #0
 8007bf2:	d010      	beq.n	8007c16 <xQueueGenericSend+0x122>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8007bf4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007bf6:	3324      	adds	r3, #36	@ 0x24
 8007bf8:	4618      	mov	r0, r3
 8007bfa:	f001 f801 	bl	8008c00 <xTaskRemoveFromEventList>
 8007bfe:	4603      	mov	r3, r0
 8007c00:	2b00      	cmp	r3, #0
 8007c02:	d013      	beq.n	8007c2c <xQueueGenericSend+0x138>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 8007c04:	4b3f      	ldr	r3, [pc, #252]	@ (8007d04 <xQueueGenericSend+0x210>)
 8007c06:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8007c0a:	601a      	str	r2, [r3, #0]
 8007c0c:	f3bf 8f4f 	dsb	sy
 8007c10:	f3bf 8f6f 	isb	sy
 8007c14:	e00a      	b.n	8007c2c <xQueueGenericSend+0x138>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 8007c16:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8007c18:	2b00      	cmp	r3, #0
 8007c1a:	d007      	beq.n	8007c2c <xQueueGenericSend+0x138>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 8007c1c:	4b39      	ldr	r3, [pc, #228]	@ (8007d04 <xQueueGenericSend+0x210>)
 8007c1e:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8007c22:	601a      	str	r2, [r3, #0]
 8007c24:	f3bf 8f4f 	dsb	sy
 8007c28:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 8007c2c:	f001 ff44 	bl	8009ab8 <vPortExitCritical>
				return pdPASS;
 8007c30:	2301      	movs	r3, #1
 8007c32:	e063      	b.n	8007cfc <xQueueGenericSend+0x208>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8007c34:	687b      	ldr	r3, [r7, #4]
 8007c36:	2b00      	cmp	r3, #0
 8007c38:	d103      	bne.n	8007c42 <xQueueGenericSend+0x14e>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 8007c3a:	f001 ff3d 	bl	8009ab8 <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 8007c3e:	2300      	movs	r3, #0
 8007c40:	e05c      	b.n	8007cfc <xQueueGenericSend+0x208>
				}
				else if( xEntryTimeSet == pdFALSE )
 8007c42:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8007c44:	2b00      	cmp	r3, #0
 8007c46:	d106      	bne.n	8007c56 <xQueueGenericSend+0x162>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8007c48:	f107 0314 	add.w	r3, r7, #20
 8007c4c:	4618      	mov	r0, r3
 8007c4e:	f001 f83d 	bl	8008ccc <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8007c52:	2301      	movs	r3, #1
 8007c54:	637b      	str	r3, [r7, #52]	@ 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8007c56:	f001 ff2f 	bl	8009ab8 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 8007c5a:	f000 fda1 	bl	80087a0 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8007c5e:	f001 fef5 	bl	8009a4c <vPortEnterCritical>
 8007c62:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007c64:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 8007c68:	b25b      	sxtb	r3, r3
 8007c6a:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007c6e:	d103      	bne.n	8007c78 <xQueueGenericSend+0x184>
 8007c70:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007c72:	2200      	movs	r2, #0
 8007c74:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8007c78:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007c7a:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8007c7e:	b25b      	sxtb	r3, r3
 8007c80:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007c84:	d103      	bne.n	8007c8e <xQueueGenericSend+0x19a>
 8007c86:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007c88:	2200      	movs	r2, #0
 8007c8a:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8007c8e:	f001 ff13 	bl	8009ab8 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8007c92:	1d3a      	adds	r2, r7, #4
 8007c94:	f107 0314 	add.w	r3, r7, #20
 8007c98:	4611      	mov	r1, r2
 8007c9a:	4618      	mov	r0, r3
 8007c9c:	f001 f82c 	bl	8008cf8 <xTaskCheckForTimeOut>
 8007ca0:	4603      	mov	r3, r0
 8007ca2:	2b00      	cmp	r3, #0
 8007ca4:	d124      	bne.n	8007cf0 <xQueueGenericSend+0x1fc>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 8007ca6:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8007ca8:	f000 fab2 	bl	8008210 <prvIsQueueFull>
 8007cac:	4603      	mov	r3, r0
 8007cae:	2b00      	cmp	r3, #0
 8007cb0:	d018      	beq.n	8007ce4 <xQueueGenericSend+0x1f0>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 8007cb2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007cb4:	3310      	adds	r3, #16
 8007cb6:	687a      	ldr	r2, [r7, #4]
 8007cb8:	4611      	mov	r1, r2
 8007cba:	4618      	mov	r0, r3
 8007cbc:	f000 ff4a 	bl	8008b54 <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 8007cc0:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8007cc2:	f000 fa3d 	bl	8008140 <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 8007cc6:	f000 fd79 	bl	80087bc <xTaskResumeAll>
 8007cca:	4603      	mov	r3, r0
 8007ccc:	2b00      	cmp	r3, #0
 8007cce:	f47f af7c 	bne.w	8007bca <xQueueGenericSend+0xd6>
				{
					portYIELD_WITHIN_API();
 8007cd2:	4b0c      	ldr	r3, [pc, #48]	@ (8007d04 <xQueueGenericSend+0x210>)
 8007cd4:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8007cd8:	601a      	str	r2, [r3, #0]
 8007cda:	f3bf 8f4f 	dsb	sy
 8007cde:	f3bf 8f6f 	isb	sy
 8007ce2:	e772      	b.n	8007bca <xQueueGenericSend+0xd6>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 8007ce4:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8007ce6:	f000 fa2b 	bl	8008140 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8007cea:	f000 fd67 	bl	80087bc <xTaskResumeAll>
 8007cee:	e76c      	b.n	8007bca <xQueueGenericSend+0xd6>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 8007cf0:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8007cf2:	f000 fa25 	bl	8008140 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8007cf6:	f000 fd61 	bl	80087bc <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 8007cfa:	2300      	movs	r3, #0
		}
	} /*lint -restore */
}
 8007cfc:	4618      	mov	r0, r3
 8007cfe:	3738      	adds	r7, #56	@ 0x38
 8007d00:	46bd      	mov	sp, r7
 8007d02:	bd80      	pop	{r7, pc}
 8007d04:	e000ed04 	.word	0xe000ed04

08007d08 <xQueueGenericSendFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue, const void * const pvItemToQueue, BaseType_t * const pxHigherPriorityTaskWoken, const BaseType_t xCopyPosition )
{
 8007d08:	b580      	push	{r7, lr}
 8007d0a:	b08e      	sub	sp, #56	@ 0x38
 8007d0c:	af00      	add	r7, sp, #0
 8007d0e:	60f8      	str	r0, [r7, #12]
 8007d10:	60b9      	str	r1, [r7, #8]
 8007d12:	607a      	str	r2, [r7, #4]
 8007d14:	603b      	str	r3, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 8007d16:	68fb      	ldr	r3, [r7, #12]
 8007d18:	633b      	str	r3, [r7, #48]	@ 0x30

	configASSERT( pxQueue );
 8007d1a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007d1c:	2b00      	cmp	r3, #0
 8007d1e:	d10d      	bne.n	8007d3c <xQueueGenericSendFromISR+0x34>
	__asm volatile
 8007d20:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007d24:	b672      	cpsid	i
 8007d26:	f383 8811 	msr	BASEPRI, r3
 8007d2a:	f3bf 8f6f 	isb	sy
 8007d2e:	f3bf 8f4f 	dsb	sy
 8007d32:	b662      	cpsie	i
 8007d34:	627b      	str	r3, [r7, #36]	@ 0x24
}
 8007d36:	bf00      	nop
 8007d38:	bf00      	nop
 8007d3a:	e7fd      	b.n	8007d38 <xQueueGenericSendFromISR+0x30>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8007d3c:	68bb      	ldr	r3, [r7, #8]
 8007d3e:	2b00      	cmp	r3, #0
 8007d40:	d103      	bne.n	8007d4a <xQueueGenericSendFromISR+0x42>
 8007d42:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007d44:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8007d46:	2b00      	cmp	r3, #0
 8007d48:	d101      	bne.n	8007d4e <xQueueGenericSendFromISR+0x46>
 8007d4a:	2301      	movs	r3, #1
 8007d4c:	e000      	b.n	8007d50 <xQueueGenericSendFromISR+0x48>
 8007d4e:	2300      	movs	r3, #0
 8007d50:	2b00      	cmp	r3, #0
 8007d52:	d10d      	bne.n	8007d70 <xQueueGenericSendFromISR+0x68>
	__asm volatile
 8007d54:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007d58:	b672      	cpsid	i
 8007d5a:	f383 8811 	msr	BASEPRI, r3
 8007d5e:	f3bf 8f6f 	isb	sy
 8007d62:	f3bf 8f4f 	dsb	sy
 8007d66:	b662      	cpsie	i
 8007d68:	623b      	str	r3, [r7, #32]
}
 8007d6a:	bf00      	nop
 8007d6c:	bf00      	nop
 8007d6e:	e7fd      	b.n	8007d6c <xQueueGenericSendFromISR+0x64>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8007d70:	683b      	ldr	r3, [r7, #0]
 8007d72:	2b02      	cmp	r3, #2
 8007d74:	d103      	bne.n	8007d7e <xQueueGenericSendFromISR+0x76>
 8007d76:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007d78:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8007d7a:	2b01      	cmp	r3, #1
 8007d7c:	d101      	bne.n	8007d82 <xQueueGenericSendFromISR+0x7a>
 8007d7e:	2301      	movs	r3, #1
 8007d80:	e000      	b.n	8007d84 <xQueueGenericSendFromISR+0x7c>
 8007d82:	2300      	movs	r3, #0
 8007d84:	2b00      	cmp	r3, #0
 8007d86:	d10d      	bne.n	8007da4 <xQueueGenericSendFromISR+0x9c>
	__asm volatile
 8007d88:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007d8c:	b672      	cpsid	i
 8007d8e:	f383 8811 	msr	BASEPRI, r3
 8007d92:	f3bf 8f6f 	isb	sy
 8007d96:	f3bf 8f4f 	dsb	sy
 8007d9a:	b662      	cpsie	i
 8007d9c:	61fb      	str	r3, [r7, #28]
}
 8007d9e:	bf00      	nop
 8007da0:	bf00      	nop
 8007da2:	e7fd      	b.n	8007da0 <xQueueGenericSendFromISR+0x98>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8007da4:	f001 ff3a 	bl	8009c1c <vPortValidateInterruptPriority>

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 8007da8:	f3ef 8211 	mrs	r2, BASEPRI
 8007dac:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007db0:	b672      	cpsid	i
 8007db2:	f383 8811 	msr	BASEPRI, r3
 8007db6:	f3bf 8f6f 	isb	sy
 8007dba:	f3bf 8f4f 	dsb	sy
 8007dbe:	b662      	cpsie	i
 8007dc0:	61ba      	str	r2, [r7, #24]
 8007dc2:	617b      	str	r3, [r7, #20]
		:"=r" (ulOriginalBASEPRI), "=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);

	/* This return will not be reached but is necessary to prevent compiler
	warnings. */
	return ulOriginalBASEPRI;
 8007dc4:	69bb      	ldr	r3, [r7, #24]
	/* Similar to xQueueGenericSend, except without blocking if there is no room
	in the queue.  Also don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 8007dc6:	62fb      	str	r3, [r7, #44]	@ 0x2c
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8007dc8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007dca:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8007dcc:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007dce:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8007dd0:	429a      	cmp	r2, r3
 8007dd2:	d302      	bcc.n	8007dda <xQueueGenericSendFromISR+0xd2>
 8007dd4:	683b      	ldr	r3, [r7, #0]
 8007dd6:	2b02      	cmp	r3, #2
 8007dd8:	d12c      	bne.n	8007e34 <xQueueGenericSendFromISR+0x12c>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 8007dda:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007ddc:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8007de0:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
			/* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
			semaphore or mutex.  That means prvCopyDataToQueue() cannot result
			in a task disinheriting a priority and prvCopyDataToQueue() can be
			called here even though the disinherit function does not check if
			the scheduler is suspended before accessing the ready lists. */
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8007de4:	683a      	ldr	r2, [r7, #0]
 8007de6:	68b9      	ldr	r1, [r7, #8]
 8007de8:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8007dea:	f000 f919 	bl	8008020 <prvCopyDataToQueue>

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 8007dee:	f997 302b 	ldrsb.w	r3, [r7, #43]	@ 0x2b
 8007df2:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007df6:	d112      	bne.n	8007e1e <xQueueGenericSendFromISR+0x116>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8007df8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007dfa:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007dfc:	2b00      	cmp	r3, #0
 8007dfe:	d016      	beq.n	8007e2e <xQueueGenericSendFromISR+0x126>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8007e00:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007e02:	3324      	adds	r3, #36	@ 0x24
 8007e04:	4618      	mov	r0, r3
 8007e06:	f000 fefb 	bl	8008c00 <xTaskRemoveFromEventList>
 8007e0a:	4603      	mov	r3, r0
 8007e0c:	2b00      	cmp	r3, #0
 8007e0e:	d00e      	beq.n	8007e2e <xQueueGenericSendFromISR+0x126>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 8007e10:	687b      	ldr	r3, [r7, #4]
 8007e12:	2b00      	cmp	r3, #0
 8007e14:	d00b      	beq.n	8007e2e <xQueueGenericSendFromISR+0x126>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 8007e16:	687b      	ldr	r3, [r7, #4]
 8007e18:	2201      	movs	r2, #1
 8007e1a:	601a      	str	r2, [r3, #0]
 8007e1c:	e007      	b.n	8007e2e <xQueueGenericSendFromISR+0x126>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 8007e1e:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
 8007e22:	3301      	adds	r3, #1
 8007e24:	b2db      	uxtb	r3, r3
 8007e26:	b25a      	sxtb	r2, r3
 8007e28:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007e2a:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
			}

			xReturn = pdPASS;
 8007e2e:	2301      	movs	r3, #1
 8007e30:	637b      	str	r3, [r7, #52]	@ 0x34
		{
 8007e32:	e001      	b.n	8007e38 <xQueueGenericSendFromISR+0x130>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 8007e34:	2300      	movs	r3, #0
 8007e36:	637b      	str	r3, [r7, #52]	@ 0x34
 8007e38:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8007e3a:	613b      	str	r3, [r7, #16]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 8007e3c:	693b      	ldr	r3, [r7, #16]
 8007e3e:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 8007e42:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 8007e44:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
}
 8007e46:	4618      	mov	r0, r3
 8007e48:	3738      	adds	r7, #56	@ 0x38
 8007e4a:	46bd      	mov	sp, r7
 8007e4c:	bd80      	pop	{r7, pc}
	...

08007e50 <xQueueReceive>:
	return xReturn;
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
 8007e50:	b580      	push	{r7, lr}
 8007e52:	b08c      	sub	sp, #48	@ 0x30
 8007e54:	af00      	add	r7, sp, #0
 8007e56:	60f8      	str	r0, [r7, #12]
 8007e58:	60b9      	str	r1, [r7, #8]
 8007e5a:	607a      	str	r2, [r7, #4]
BaseType_t xEntryTimeSet = pdFALSE;
 8007e5c:	2300      	movs	r3, #0
 8007e5e:	62fb      	str	r3, [r7, #44]	@ 0x2c
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 8007e60:	68fb      	ldr	r3, [r7, #12]
 8007e62:	62bb      	str	r3, [r7, #40]	@ 0x28

	/* Check the pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 8007e64:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007e66:	2b00      	cmp	r3, #0
 8007e68:	d10d      	bne.n	8007e86 <xQueueReceive+0x36>
	__asm volatile
 8007e6a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007e6e:	b672      	cpsid	i
 8007e70:	f383 8811 	msr	BASEPRI, r3
 8007e74:	f3bf 8f6f 	isb	sy
 8007e78:	f3bf 8f4f 	dsb	sy
 8007e7c:	b662      	cpsie	i
 8007e7e:	623b      	str	r3, [r7, #32]
}
 8007e80:	bf00      	nop
 8007e82:	bf00      	nop
 8007e84:	e7fd      	b.n	8007e82 <xQueueReceive+0x32>

	/* The buffer into which data is received can only be NULL if the data size
	is zero (so no data is copied into the buffer. */
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8007e86:	68bb      	ldr	r3, [r7, #8]
 8007e88:	2b00      	cmp	r3, #0
 8007e8a:	d103      	bne.n	8007e94 <xQueueReceive+0x44>
 8007e8c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007e8e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8007e90:	2b00      	cmp	r3, #0
 8007e92:	d101      	bne.n	8007e98 <xQueueReceive+0x48>
 8007e94:	2301      	movs	r3, #1
 8007e96:	e000      	b.n	8007e9a <xQueueReceive+0x4a>
 8007e98:	2300      	movs	r3, #0
 8007e9a:	2b00      	cmp	r3, #0
 8007e9c:	d10d      	bne.n	8007eba <xQueueReceive+0x6a>
	__asm volatile
 8007e9e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007ea2:	b672      	cpsid	i
 8007ea4:	f383 8811 	msr	BASEPRI, r3
 8007ea8:	f3bf 8f6f 	isb	sy
 8007eac:	f3bf 8f4f 	dsb	sy
 8007eb0:	b662      	cpsie	i
 8007eb2:	61fb      	str	r3, [r7, #28]
}
 8007eb4:	bf00      	nop
 8007eb6:	bf00      	nop
 8007eb8:	e7fd      	b.n	8007eb6 <xQueueReceive+0x66>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8007eba:	f001 f869 	bl	8008f90 <xTaskGetSchedulerState>
 8007ebe:	4603      	mov	r3, r0
 8007ec0:	2b00      	cmp	r3, #0
 8007ec2:	d102      	bne.n	8007eca <xQueueReceive+0x7a>
 8007ec4:	687b      	ldr	r3, [r7, #4]
 8007ec6:	2b00      	cmp	r3, #0
 8007ec8:	d101      	bne.n	8007ece <xQueueReceive+0x7e>
 8007eca:	2301      	movs	r3, #1
 8007ecc:	e000      	b.n	8007ed0 <xQueueReceive+0x80>
 8007ece:	2300      	movs	r3, #0
 8007ed0:	2b00      	cmp	r3, #0
 8007ed2:	d10d      	bne.n	8007ef0 <xQueueReceive+0xa0>
	__asm volatile
 8007ed4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007ed8:	b672      	cpsid	i
 8007eda:	f383 8811 	msr	BASEPRI, r3
 8007ede:	f3bf 8f6f 	isb	sy
 8007ee2:	f3bf 8f4f 	dsb	sy
 8007ee6:	b662      	cpsie	i
 8007ee8:	61bb      	str	r3, [r7, #24]
}
 8007eea:	bf00      	nop
 8007eec:	bf00      	nop
 8007eee:	e7fd      	b.n	8007eec <xQueueReceive+0x9c>
	/*lint -save -e904  This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8007ef0:	f001 fdac 	bl	8009a4c <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8007ef4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007ef6:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8007ef8:	627b      	str	r3, [r7, #36]	@ 0x24

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8007efa:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007efc:	2b00      	cmp	r3, #0
 8007efe:	d01f      	beq.n	8007f40 <xQueueReceive+0xf0>
			{
				/* Data available, remove one item. */
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 8007f00:	68b9      	ldr	r1, [r7, #8]
 8007f02:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8007f04:	f000 f8f6 	bl	80080f4 <prvCopyDataFromQueue>
				traceQUEUE_RECEIVE( pxQueue );
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 8007f08:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007f0a:	1e5a      	subs	r2, r3, #1
 8007f0c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007f0e:	639a      	str	r2, [r3, #56]	@ 0x38

				/* There is now space in the queue, were any tasks waiting to
				post to the queue?  If so, unblock the highest priority waiting
				task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8007f10:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007f12:	691b      	ldr	r3, [r3, #16]
 8007f14:	2b00      	cmp	r3, #0
 8007f16:	d00f      	beq.n	8007f38 <xQueueReceive+0xe8>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8007f18:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007f1a:	3310      	adds	r3, #16
 8007f1c:	4618      	mov	r0, r3
 8007f1e:	f000 fe6f 	bl	8008c00 <xTaskRemoveFromEventList>
 8007f22:	4603      	mov	r3, r0
 8007f24:	2b00      	cmp	r3, #0
 8007f26:	d007      	beq.n	8007f38 <xQueueReceive+0xe8>
					{
						queueYIELD_IF_USING_PREEMPTION();
 8007f28:	4b3c      	ldr	r3, [pc, #240]	@ (800801c <xQueueReceive+0x1cc>)
 8007f2a:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8007f2e:	601a      	str	r2, [r3, #0]
 8007f30:	f3bf 8f4f 	dsb	sy
 8007f34:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 8007f38:	f001 fdbe 	bl	8009ab8 <vPortExitCritical>
				return pdPASS;
 8007f3c:	2301      	movs	r3, #1
 8007f3e:	e069      	b.n	8008014 <xQueueReceive+0x1c4>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8007f40:	687b      	ldr	r3, [r7, #4]
 8007f42:	2b00      	cmp	r3, #0
 8007f44:	d103      	bne.n	8007f4e <xQueueReceive+0xfe>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 8007f46:	f001 fdb7 	bl	8009ab8 <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 8007f4a:	2300      	movs	r3, #0
 8007f4c:	e062      	b.n	8008014 <xQueueReceive+0x1c4>
				}
				else if( xEntryTimeSet == pdFALSE )
 8007f4e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8007f50:	2b00      	cmp	r3, #0
 8007f52:	d106      	bne.n	8007f62 <xQueueReceive+0x112>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8007f54:	f107 0310 	add.w	r3, r7, #16
 8007f58:	4618      	mov	r0, r3
 8007f5a:	f000 feb7 	bl	8008ccc <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8007f5e:	2301      	movs	r3, #1
 8007f60:	62fb      	str	r3, [r7, #44]	@ 0x2c
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8007f62:	f001 fda9 	bl	8009ab8 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 8007f66:	f000 fc1b 	bl	80087a0 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8007f6a:	f001 fd6f 	bl	8009a4c <vPortEnterCritical>
 8007f6e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007f70:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 8007f74:	b25b      	sxtb	r3, r3
 8007f76:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007f7a:	d103      	bne.n	8007f84 <xQueueReceive+0x134>
 8007f7c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007f7e:	2200      	movs	r2, #0
 8007f80:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8007f84:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007f86:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8007f8a:	b25b      	sxtb	r3, r3
 8007f8c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007f90:	d103      	bne.n	8007f9a <xQueueReceive+0x14a>
 8007f92:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007f94:	2200      	movs	r2, #0
 8007f96:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8007f9a:	f001 fd8d 	bl	8009ab8 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8007f9e:	1d3a      	adds	r2, r7, #4
 8007fa0:	f107 0310 	add.w	r3, r7, #16
 8007fa4:	4611      	mov	r1, r2
 8007fa6:	4618      	mov	r0, r3
 8007fa8:	f000 fea6 	bl	8008cf8 <xTaskCheckForTimeOut>
 8007fac:	4603      	mov	r3, r0
 8007fae:	2b00      	cmp	r3, #0
 8007fb0:	d123      	bne.n	8007ffa <xQueueReceive+0x1aa>
		{
			/* The timeout has not expired.  If the queue is still empty place
			the task on the list of tasks waiting to receive from the queue. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8007fb2:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8007fb4:	f000 f916 	bl	80081e4 <prvIsQueueEmpty>
 8007fb8:	4603      	mov	r3, r0
 8007fba:	2b00      	cmp	r3, #0
 8007fbc:	d017      	beq.n	8007fee <xQueueReceive+0x19e>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 8007fbe:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007fc0:	3324      	adds	r3, #36	@ 0x24
 8007fc2:	687a      	ldr	r2, [r7, #4]
 8007fc4:	4611      	mov	r1, r2
 8007fc6:	4618      	mov	r0, r3
 8007fc8:	f000 fdc4 	bl	8008b54 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 8007fcc:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8007fce:	f000 f8b7 	bl	8008140 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 8007fd2:	f000 fbf3 	bl	80087bc <xTaskResumeAll>
 8007fd6:	4603      	mov	r3, r0
 8007fd8:	2b00      	cmp	r3, #0
 8007fda:	d189      	bne.n	8007ef0 <xQueueReceive+0xa0>
				{
					portYIELD_WITHIN_API();
 8007fdc:	4b0f      	ldr	r3, [pc, #60]	@ (800801c <xQueueReceive+0x1cc>)
 8007fde:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8007fe2:	601a      	str	r2, [r3, #0]
 8007fe4:	f3bf 8f4f 	dsb	sy
 8007fe8:	f3bf 8f6f 	isb	sy
 8007fec:	e780      	b.n	8007ef0 <xQueueReceive+0xa0>
			}
			else
			{
				/* The queue contains data again.  Loop back to try and read the
				data. */
				prvUnlockQueue( pxQueue );
 8007fee:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8007ff0:	f000 f8a6 	bl	8008140 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8007ff4:	f000 fbe2 	bl	80087bc <xTaskResumeAll>
 8007ff8:	e77a      	b.n	8007ef0 <xQueueReceive+0xa0>
		}
		else
		{
			/* Timed out.  If there is no data in the queue exit, otherwise loop
			back and attempt to read the data. */
			prvUnlockQueue( pxQueue );
 8007ffa:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8007ffc:	f000 f8a0 	bl	8008140 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8008000:	f000 fbdc 	bl	80087bc <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8008004:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8008006:	f000 f8ed 	bl	80081e4 <prvIsQueueEmpty>
 800800a:	4603      	mov	r3, r0
 800800c:	2b00      	cmp	r3, #0
 800800e:	f43f af6f 	beq.w	8007ef0 <xQueueReceive+0xa0>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 8008012:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 8008014:	4618      	mov	r0, r3
 8008016:	3730      	adds	r7, #48	@ 0x30
 8008018:	46bd      	mov	sp, r7
 800801a:	bd80      	pop	{r7, pc}
 800801c:	e000ed04 	.word	0xe000ed04

08008020 <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 8008020:	b580      	push	{r7, lr}
 8008022:	b086      	sub	sp, #24
 8008024:	af00      	add	r7, sp, #0
 8008026:	60f8      	str	r0, [r7, #12]
 8008028:	60b9      	str	r1, [r7, #8]
 800802a:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 800802c:	2300      	movs	r3, #0
 800802e:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8008030:	68fb      	ldr	r3, [r7, #12]
 8008032:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8008034:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 8008036:	68fb      	ldr	r3, [r7, #12]
 8008038:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800803a:	2b00      	cmp	r3, #0
 800803c:	d10d      	bne.n	800805a <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 800803e:	68fb      	ldr	r3, [r7, #12]
 8008040:	681b      	ldr	r3, [r3, #0]
 8008042:	2b00      	cmp	r3, #0
 8008044:	d14d      	bne.n	80080e2 <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 8008046:	68fb      	ldr	r3, [r7, #12]
 8008048:	689b      	ldr	r3, [r3, #8]
 800804a:	4618      	mov	r0, r3
 800804c:	f000 ffbe 	bl	8008fcc <xTaskPriorityDisinherit>
 8008050:	6178      	str	r0, [r7, #20]
				pxQueue->u.xSemaphore.xMutexHolder = NULL;
 8008052:	68fb      	ldr	r3, [r7, #12]
 8008054:	2200      	movs	r2, #0
 8008056:	609a      	str	r2, [r3, #8]
 8008058:	e043      	b.n	80080e2 <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 800805a:	687b      	ldr	r3, [r7, #4]
 800805c:	2b00      	cmp	r3, #0
 800805e:	d119      	bne.n	8008094 <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8008060:	68fb      	ldr	r3, [r7, #12]
 8008062:	6858      	ldr	r0, [r3, #4]
 8008064:	68fb      	ldr	r3, [r7, #12]
 8008066:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8008068:	461a      	mov	r2, r3
 800806a:	68b9      	ldr	r1, [r7, #8]
 800806c:	f007 ffdb 	bl	8010026 <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8008070:	68fb      	ldr	r3, [r7, #12]
 8008072:	685a      	ldr	r2, [r3, #4]
 8008074:	68fb      	ldr	r3, [r7, #12]
 8008076:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8008078:	441a      	add	r2, r3
 800807a:	68fb      	ldr	r3, [r7, #12]
 800807c:	605a      	str	r2, [r3, #4]
		if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 800807e:	68fb      	ldr	r3, [r7, #12]
 8008080:	685a      	ldr	r2, [r3, #4]
 8008082:	68fb      	ldr	r3, [r7, #12]
 8008084:	689b      	ldr	r3, [r3, #8]
 8008086:	429a      	cmp	r2, r3
 8008088:	d32b      	bcc.n	80080e2 <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 800808a:	68fb      	ldr	r3, [r7, #12]
 800808c:	681a      	ldr	r2, [r3, #0]
 800808e:	68fb      	ldr	r3, [r7, #12]
 8008090:	605a      	str	r2, [r3, #4]
 8008092:	e026      	b.n	80080e2 <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 8008094:	68fb      	ldr	r3, [r7, #12]
 8008096:	68d8      	ldr	r0, [r3, #12]
 8008098:	68fb      	ldr	r3, [r7, #12]
 800809a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800809c:	461a      	mov	r2, r3
 800809e:	68b9      	ldr	r1, [r7, #8]
 80080a0:	f007 ffc1 	bl	8010026 <memcpy>
		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 80080a4:	68fb      	ldr	r3, [r7, #12]
 80080a6:	68da      	ldr	r2, [r3, #12]
 80080a8:	68fb      	ldr	r3, [r7, #12]
 80080aa:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80080ac:	425b      	negs	r3, r3
 80080ae:	441a      	add	r2, r3
 80080b0:	68fb      	ldr	r3, [r7, #12]
 80080b2:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 80080b4:	68fb      	ldr	r3, [r7, #12]
 80080b6:	68da      	ldr	r2, [r3, #12]
 80080b8:	68fb      	ldr	r3, [r7, #12]
 80080ba:	681b      	ldr	r3, [r3, #0]
 80080bc:	429a      	cmp	r2, r3
 80080be:	d207      	bcs.n	80080d0 <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 80080c0:	68fb      	ldr	r3, [r7, #12]
 80080c2:	689a      	ldr	r2, [r3, #8]
 80080c4:	68fb      	ldr	r3, [r7, #12]
 80080c6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80080c8:	425b      	negs	r3, r3
 80080ca:	441a      	add	r2, r3
 80080cc:	68fb      	ldr	r3, [r7, #12]
 80080ce:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 80080d0:	687b      	ldr	r3, [r7, #4]
 80080d2:	2b02      	cmp	r3, #2
 80080d4:	d105      	bne.n	80080e2 <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 80080d6:	693b      	ldr	r3, [r7, #16]
 80080d8:	2b00      	cmp	r3, #0
 80080da:	d002      	beq.n	80080e2 <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 80080dc:	693b      	ldr	r3, [r7, #16]
 80080de:	3b01      	subs	r3, #1
 80080e0:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 80080e2:	693b      	ldr	r3, [r7, #16]
 80080e4:	1c5a      	adds	r2, r3, #1
 80080e6:	68fb      	ldr	r3, [r7, #12]
 80080e8:	639a      	str	r2, [r3, #56]	@ 0x38

	return xReturn;
 80080ea:	697b      	ldr	r3, [r7, #20]
}
 80080ec:	4618      	mov	r0, r3
 80080ee:	3718      	adds	r7, #24
 80080f0:	46bd      	mov	sp, r7
 80080f2:	bd80      	pop	{r7, pc}

080080f4 <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 80080f4:	b580      	push	{r7, lr}
 80080f6:	b082      	sub	sp, #8
 80080f8:	af00      	add	r7, sp, #0
 80080fa:	6078      	str	r0, [r7, #4]
 80080fc:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 80080fe:	687b      	ldr	r3, [r7, #4]
 8008100:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8008102:	2b00      	cmp	r3, #0
 8008104:	d018      	beq.n	8008138 <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8008106:	687b      	ldr	r3, [r7, #4]
 8008108:	68da      	ldr	r2, [r3, #12]
 800810a:	687b      	ldr	r3, [r7, #4]
 800810c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800810e:	441a      	add	r2, r3
 8008110:	687b      	ldr	r3, [r7, #4]
 8008112:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 8008114:	687b      	ldr	r3, [r7, #4]
 8008116:	68da      	ldr	r2, [r3, #12]
 8008118:	687b      	ldr	r3, [r7, #4]
 800811a:	689b      	ldr	r3, [r3, #8]
 800811c:	429a      	cmp	r2, r3
 800811e:	d303      	bcc.n	8008128 <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 8008120:	687b      	ldr	r3, [r7, #4]
 8008122:	681a      	ldr	r2, [r3, #0]
 8008124:	687b      	ldr	r3, [r7, #4]
 8008126:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8008128:	687b      	ldr	r3, [r7, #4]
 800812a:	68d9      	ldr	r1, [r3, #12]
 800812c:	687b      	ldr	r3, [r7, #4]
 800812e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8008130:	461a      	mov	r2, r3
 8008132:	6838      	ldr	r0, [r7, #0]
 8008134:	f007 ff77 	bl	8010026 <memcpy>
	}
}
 8008138:	bf00      	nop
 800813a:	3708      	adds	r7, #8
 800813c:	46bd      	mov	sp, r7
 800813e:	bd80      	pop	{r7, pc}

08008140 <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 8008140:	b580      	push	{r7, lr}
 8008142:	b084      	sub	sp, #16
 8008144:	af00      	add	r7, sp, #0
 8008146:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 8008148:	f001 fc80 	bl	8009a4c <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 800814c:	687b      	ldr	r3, [r7, #4]
 800814e:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8008152:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8008154:	e011      	b.n	800817a <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8008156:	687b      	ldr	r3, [r7, #4]
 8008158:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800815a:	2b00      	cmp	r3, #0
 800815c:	d012      	beq.n	8008184 <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800815e:	687b      	ldr	r3, [r7, #4]
 8008160:	3324      	adds	r3, #36	@ 0x24
 8008162:	4618      	mov	r0, r3
 8008164:	f000 fd4c 	bl	8008c00 <xTaskRemoveFromEventList>
 8008168:	4603      	mov	r3, r0
 800816a:	2b00      	cmp	r3, #0
 800816c:	d001      	beq.n	8008172 <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 800816e:	f000 fe2b 	bl	8008dc8 <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 8008172:	7bfb      	ldrb	r3, [r7, #15]
 8008174:	3b01      	subs	r3, #1
 8008176:	b2db      	uxtb	r3, r3
 8008178:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 800817a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800817e:	2b00      	cmp	r3, #0
 8008180:	dce9      	bgt.n	8008156 <prvUnlockQueue+0x16>
 8008182:	e000      	b.n	8008186 <prvUnlockQueue+0x46>
					break;
 8008184:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 8008186:	687b      	ldr	r3, [r7, #4]
 8008188:	22ff      	movs	r2, #255	@ 0xff
 800818a:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
	}
	taskEXIT_CRITICAL();
 800818e:	f001 fc93 	bl	8009ab8 <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 8008192:	f001 fc5b 	bl	8009a4c <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 8008196:	687b      	ldr	r3, [r7, #4]
 8008198:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 800819c:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 800819e:	e011      	b.n	80081c4 <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 80081a0:	687b      	ldr	r3, [r7, #4]
 80081a2:	691b      	ldr	r3, [r3, #16]
 80081a4:	2b00      	cmp	r3, #0
 80081a6:	d012      	beq.n	80081ce <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 80081a8:	687b      	ldr	r3, [r7, #4]
 80081aa:	3310      	adds	r3, #16
 80081ac:	4618      	mov	r0, r3
 80081ae:	f000 fd27 	bl	8008c00 <xTaskRemoveFromEventList>
 80081b2:	4603      	mov	r3, r0
 80081b4:	2b00      	cmp	r3, #0
 80081b6:	d001      	beq.n	80081bc <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 80081b8:	f000 fe06 	bl	8008dc8 <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 80081bc:	7bbb      	ldrb	r3, [r7, #14]
 80081be:	3b01      	subs	r3, #1
 80081c0:	b2db      	uxtb	r3, r3
 80081c2:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 80081c4:	f997 300e 	ldrsb.w	r3, [r7, #14]
 80081c8:	2b00      	cmp	r3, #0
 80081ca:	dce9      	bgt.n	80081a0 <prvUnlockQueue+0x60>
 80081cc:	e000      	b.n	80081d0 <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 80081ce:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 80081d0:	687b      	ldr	r3, [r7, #4]
 80081d2:	22ff      	movs	r2, #255	@ 0xff
 80081d4:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
	}
	taskEXIT_CRITICAL();
 80081d8:	f001 fc6e 	bl	8009ab8 <vPortExitCritical>
}
 80081dc:	bf00      	nop
 80081de:	3710      	adds	r7, #16
 80081e0:	46bd      	mov	sp, r7
 80081e2:	bd80      	pop	{r7, pc}

080081e4 <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 80081e4:	b580      	push	{r7, lr}
 80081e6:	b084      	sub	sp, #16
 80081e8:	af00      	add	r7, sp, #0
 80081ea:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 80081ec:	f001 fc2e 	bl	8009a4c <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 80081f0:	687b      	ldr	r3, [r7, #4]
 80081f2:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80081f4:	2b00      	cmp	r3, #0
 80081f6:	d102      	bne.n	80081fe <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 80081f8:	2301      	movs	r3, #1
 80081fa:	60fb      	str	r3, [r7, #12]
 80081fc:	e001      	b.n	8008202 <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 80081fe:	2300      	movs	r3, #0
 8008200:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 8008202:	f001 fc59 	bl	8009ab8 <vPortExitCritical>

	return xReturn;
 8008206:	68fb      	ldr	r3, [r7, #12]
}
 8008208:	4618      	mov	r0, r3
 800820a:	3710      	adds	r7, #16
 800820c:	46bd      	mov	sp, r7
 800820e:	bd80      	pop	{r7, pc}

08008210 <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 8008210:	b580      	push	{r7, lr}
 8008212:	b084      	sub	sp, #16
 8008214:	af00      	add	r7, sp, #0
 8008216:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8008218:	f001 fc18 	bl	8009a4c <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 800821c:	687b      	ldr	r3, [r7, #4]
 800821e:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8008220:	687b      	ldr	r3, [r7, #4]
 8008222:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8008224:	429a      	cmp	r2, r3
 8008226:	d102      	bne.n	800822e <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 8008228:	2301      	movs	r3, #1
 800822a:	60fb      	str	r3, [r7, #12]
 800822c:	e001      	b.n	8008232 <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 800822e:	2300      	movs	r3, #0
 8008230:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 8008232:	f001 fc41 	bl	8009ab8 <vPortExitCritical>

	return xReturn;
 8008236:	68fb      	ldr	r3, [r7, #12]
}
 8008238:	4618      	mov	r0, r3
 800823a:	3710      	adds	r7, #16
 800823c:	46bd      	mov	sp, r7
 800823e:	bd80      	pop	{r7, pc}

08008240 <vQueueAddToRegistry>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueAddToRegistry( QueueHandle_t xQueue, const char *pcQueueName ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
	{
 8008240:	b480      	push	{r7}
 8008242:	b085      	sub	sp, #20
 8008244:	af00      	add	r7, sp, #0
 8008246:	6078      	str	r0, [r7, #4]
 8008248:	6039      	str	r1, [r7, #0]
	UBaseType_t ux;

		/* See if there is an empty space in the registry.  A NULL name denotes
		a free slot. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 800824a:	2300      	movs	r3, #0
 800824c:	60fb      	str	r3, [r7, #12]
 800824e:	e014      	b.n	800827a <vQueueAddToRegistry+0x3a>
		{
			if( xQueueRegistry[ ux ].pcQueueName == NULL )
 8008250:	4a0f      	ldr	r2, [pc, #60]	@ (8008290 <vQueueAddToRegistry+0x50>)
 8008252:	68fb      	ldr	r3, [r7, #12]
 8008254:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 8008258:	2b00      	cmp	r3, #0
 800825a:	d10b      	bne.n	8008274 <vQueueAddToRegistry+0x34>
			{
				/* Store the information on this queue. */
				xQueueRegistry[ ux ].pcQueueName = pcQueueName;
 800825c:	490c      	ldr	r1, [pc, #48]	@ (8008290 <vQueueAddToRegistry+0x50>)
 800825e:	68fb      	ldr	r3, [r7, #12]
 8008260:	683a      	ldr	r2, [r7, #0]
 8008262:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
				xQueueRegistry[ ux ].xHandle = xQueue;
 8008266:	4a0a      	ldr	r2, [pc, #40]	@ (8008290 <vQueueAddToRegistry+0x50>)
 8008268:	68fb      	ldr	r3, [r7, #12]
 800826a:	00db      	lsls	r3, r3, #3
 800826c:	4413      	add	r3, r2
 800826e:	687a      	ldr	r2, [r7, #4]
 8008270:	605a      	str	r2, [r3, #4]

				traceQUEUE_REGISTRY_ADD( xQueue, pcQueueName );
				break;
 8008272:	e006      	b.n	8008282 <vQueueAddToRegistry+0x42>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8008274:	68fb      	ldr	r3, [r7, #12]
 8008276:	3301      	adds	r3, #1
 8008278:	60fb      	str	r3, [r7, #12]
 800827a:	68fb      	ldr	r3, [r7, #12]
 800827c:	2b07      	cmp	r3, #7
 800827e:	d9e7      	bls.n	8008250 <vQueueAddToRegistry+0x10>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
 8008280:	bf00      	nop
 8008282:	bf00      	nop
 8008284:	3714      	adds	r7, #20
 8008286:	46bd      	mov	sp, r7
 8008288:	f85d 7b04 	ldr.w	r7, [sp], #4
 800828c:	4770      	bx	lr
 800828e:	bf00      	nop
 8008290:	2002a0b0 	.word	0x2002a0b0

08008294 <vQueueWaitForMessageRestricted>:
/*-----------------------------------------------------------*/

#if ( configUSE_TIMERS == 1 )

	void vQueueWaitForMessageRestricted( QueueHandle_t xQueue, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 8008294:	b580      	push	{r7, lr}
 8008296:	b086      	sub	sp, #24
 8008298:	af00      	add	r7, sp, #0
 800829a:	60f8      	str	r0, [r7, #12]
 800829c:	60b9      	str	r1, [r7, #8]
 800829e:	607a      	str	r2, [r7, #4]
	Queue_t * const pxQueue = xQueue;
 80082a0:	68fb      	ldr	r3, [r7, #12]
 80082a2:	617b      	str	r3, [r7, #20]
		will not actually cause the task to block, just place it on a blocked
		list.  It will not block until the scheduler is unlocked - at which
		time a yield will be performed.  If an item is added to the queue while
		the queue is locked, and the calling task blocks on the queue, then the
		calling task will be immediately unblocked when the queue is unlocked. */
		prvLockQueue( pxQueue );
 80082a4:	f001 fbd2 	bl	8009a4c <vPortEnterCritical>
 80082a8:	697b      	ldr	r3, [r7, #20]
 80082aa:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 80082ae:	b25b      	sxtb	r3, r3
 80082b0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80082b4:	d103      	bne.n	80082be <vQueueWaitForMessageRestricted+0x2a>
 80082b6:	697b      	ldr	r3, [r7, #20]
 80082b8:	2200      	movs	r2, #0
 80082ba:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 80082be:	697b      	ldr	r3, [r7, #20]
 80082c0:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 80082c4:	b25b      	sxtb	r3, r3
 80082c6:	f1b3 3fff 	cmp.w	r3, #4294967295
 80082ca:	d103      	bne.n	80082d4 <vQueueWaitForMessageRestricted+0x40>
 80082cc:	697b      	ldr	r3, [r7, #20]
 80082ce:	2200      	movs	r2, #0
 80082d0:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 80082d4:	f001 fbf0 	bl	8009ab8 <vPortExitCritical>
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
 80082d8:	697b      	ldr	r3, [r7, #20]
 80082da:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80082dc:	2b00      	cmp	r3, #0
 80082de:	d106      	bne.n	80082ee <vQueueWaitForMessageRestricted+0x5a>
		{
			/* There is nothing in the queue, block for the specified period. */
			vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
 80082e0:	697b      	ldr	r3, [r7, #20]
 80082e2:	3324      	adds	r3, #36	@ 0x24
 80082e4:	687a      	ldr	r2, [r7, #4]
 80082e6:	68b9      	ldr	r1, [r7, #8]
 80082e8:	4618      	mov	r0, r3
 80082ea:	f000 fc5b 	bl	8008ba4 <vTaskPlaceOnEventListRestricted>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		prvUnlockQueue( pxQueue );
 80082ee:	6978      	ldr	r0, [r7, #20]
 80082f0:	f7ff ff26 	bl	8008140 <prvUnlockQueue>
	}
 80082f4:	bf00      	nop
 80082f6:	3718      	adds	r7, #24
 80082f8:	46bd      	mov	sp, r7
 80082fa:	bd80      	pop	{r7, pc}

080082fc <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 80082fc:	b580      	push	{r7, lr}
 80082fe:	b08e      	sub	sp, #56	@ 0x38
 8008300:	af04      	add	r7, sp, #16
 8008302:	60f8      	str	r0, [r7, #12]
 8008304:	60b9      	str	r1, [r7, #8]
 8008306:	607a      	str	r2, [r7, #4]
 8008308:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 800830a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800830c:	2b00      	cmp	r3, #0
 800830e:	d10d      	bne.n	800832c <xTaskCreateStatic+0x30>
	__asm volatile
 8008310:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008314:	b672      	cpsid	i
 8008316:	f383 8811 	msr	BASEPRI, r3
 800831a:	f3bf 8f6f 	isb	sy
 800831e:	f3bf 8f4f 	dsb	sy
 8008322:	b662      	cpsie	i
 8008324:	623b      	str	r3, [r7, #32]
}
 8008326:	bf00      	nop
 8008328:	bf00      	nop
 800832a:	e7fd      	b.n	8008328 <xTaskCreateStatic+0x2c>
		configASSERT( pxTaskBuffer != NULL );
 800832c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800832e:	2b00      	cmp	r3, #0
 8008330:	d10d      	bne.n	800834e <xTaskCreateStatic+0x52>
	__asm volatile
 8008332:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008336:	b672      	cpsid	i
 8008338:	f383 8811 	msr	BASEPRI, r3
 800833c:	f3bf 8f6f 	isb	sy
 8008340:	f3bf 8f4f 	dsb	sy
 8008344:	b662      	cpsie	i
 8008346:	61fb      	str	r3, [r7, #28]
}
 8008348:	bf00      	nop
 800834a:	bf00      	nop
 800834c:	e7fd      	b.n	800834a <xTaskCreateStatic+0x4e>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 800834e:	235c      	movs	r3, #92	@ 0x5c
 8008350:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 8008352:	693b      	ldr	r3, [r7, #16]
 8008354:	2b5c      	cmp	r3, #92	@ 0x5c
 8008356:	d00d      	beq.n	8008374 <xTaskCreateStatic+0x78>
	__asm volatile
 8008358:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800835c:	b672      	cpsid	i
 800835e:	f383 8811 	msr	BASEPRI, r3
 8008362:	f3bf 8f6f 	isb	sy
 8008366:	f3bf 8f4f 	dsb	sy
 800836a:	b662      	cpsie	i
 800836c:	61bb      	str	r3, [r7, #24]
}
 800836e:	bf00      	nop
 8008370:	bf00      	nop
 8008372:	e7fd      	b.n	8008370 <xTaskCreateStatic+0x74>
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 8008374:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 8008376:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008378:	2b00      	cmp	r3, #0
 800837a:	d01e      	beq.n	80083ba <xTaskCreateStatic+0xbe>
 800837c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800837e:	2b00      	cmp	r3, #0
 8008380:	d01b      	beq.n	80083ba <xTaskCreateStatic+0xbe>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8008382:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008384:	627b      	str	r3, [r7, #36]	@ 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 8008386:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008388:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 800838a:	631a      	str	r2, [r3, #48]	@ 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 800838c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800838e:	2202      	movs	r2, #2
 8008390:	f883 2059 	strb.w	r2, [r3, #89]	@ 0x59
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 8008394:	2300      	movs	r3, #0
 8008396:	9303      	str	r3, [sp, #12]
 8008398:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800839a:	9302      	str	r3, [sp, #8]
 800839c:	f107 0314 	add.w	r3, r7, #20
 80083a0:	9301      	str	r3, [sp, #4]
 80083a2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80083a4:	9300      	str	r3, [sp, #0]
 80083a6:	683b      	ldr	r3, [r7, #0]
 80083a8:	687a      	ldr	r2, [r7, #4]
 80083aa:	68b9      	ldr	r1, [r7, #8]
 80083ac:	68f8      	ldr	r0, [r7, #12]
 80083ae:	f000 f850 	bl	8008452 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 80083b2:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 80083b4:	f000 f8e0 	bl	8008578 <prvAddNewTaskToReadyList>
 80083b8:	e001      	b.n	80083be <xTaskCreateStatic+0xc2>
		}
		else
		{
			xReturn = NULL;
 80083ba:	2300      	movs	r3, #0
 80083bc:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 80083be:	697b      	ldr	r3, [r7, #20]
	}
 80083c0:	4618      	mov	r0, r3
 80083c2:	3728      	adds	r7, #40	@ 0x28
 80083c4:	46bd      	mov	sp, r7
 80083c6:	bd80      	pop	{r7, pc}

080083c8 <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 80083c8:	b580      	push	{r7, lr}
 80083ca:	b08c      	sub	sp, #48	@ 0x30
 80083cc:	af04      	add	r7, sp, #16
 80083ce:	60f8      	str	r0, [r7, #12]
 80083d0:	60b9      	str	r1, [r7, #8]
 80083d2:	603b      	str	r3, [r7, #0]
 80083d4:	4613      	mov	r3, r2
 80083d6:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 80083d8:	88fb      	ldrh	r3, [r7, #6]
 80083da:	009b      	lsls	r3, r3, #2
 80083dc:	4618      	mov	r0, r3
 80083de:	f001 fc63 	bl	8009ca8 <pvPortMalloc>
 80083e2:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 80083e4:	697b      	ldr	r3, [r7, #20]
 80083e6:	2b00      	cmp	r3, #0
 80083e8:	d00e      	beq.n	8008408 <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 80083ea:	205c      	movs	r0, #92	@ 0x5c
 80083ec:	f001 fc5c 	bl	8009ca8 <pvPortMalloc>
 80083f0:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 80083f2:	69fb      	ldr	r3, [r7, #28]
 80083f4:	2b00      	cmp	r3, #0
 80083f6:	d003      	beq.n	8008400 <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 80083f8:	69fb      	ldr	r3, [r7, #28]
 80083fa:	697a      	ldr	r2, [r7, #20]
 80083fc:	631a      	str	r2, [r3, #48]	@ 0x30
 80083fe:	e005      	b.n	800840c <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 8008400:	6978      	ldr	r0, [r7, #20]
 8008402:	f001 fd1f 	bl	8009e44 <vPortFree>
 8008406:	e001      	b.n	800840c <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 8008408:	2300      	movs	r3, #0
 800840a:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 800840c:	69fb      	ldr	r3, [r7, #28]
 800840e:	2b00      	cmp	r3, #0
 8008410:	d017      	beq.n	8008442 <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e9029 !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 8008412:	69fb      	ldr	r3, [r7, #28]
 8008414:	2200      	movs	r2, #0
 8008416:	f883 2059 	strb.w	r2, [r3, #89]	@ 0x59
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 800841a:	88fa      	ldrh	r2, [r7, #6]
 800841c:	2300      	movs	r3, #0
 800841e:	9303      	str	r3, [sp, #12]
 8008420:	69fb      	ldr	r3, [r7, #28]
 8008422:	9302      	str	r3, [sp, #8]
 8008424:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8008426:	9301      	str	r3, [sp, #4]
 8008428:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800842a:	9300      	str	r3, [sp, #0]
 800842c:	683b      	ldr	r3, [r7, #0]
 800842e:	68b9      	ldr	r1, [r7, #8]
 8008430:	68f8      	ldr	r0, [r7, #12]
 8008432:	f000 f80e 	bl	8008452 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8008436:	69f8      	ldr	r0, [r7, #28]
 8008438:	f000 f89e 	bl	8008578 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 800843c:	2301      	movs	r3, #1
 800843e:	61bb      	str	r3, [r7, #24]
 8008440:	e002      	b.n	8008448 <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 8008442:	f04f 33ff 	mov.w	r3, #4294967295
 8008446:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 8008448:	69bb      	ldr	r3, [r7, #24]
	}
 800844a:	4618      	mov	r0, r3
 800844c:	3720      	adds	r7, #32
 800844e:	46bd      	mov	sp, r7
 8008450:	bd80      	pop	{r7, pc}

08008452 <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 8008452:	b580      	push	{r7, lr}
 8008454:	b088      	sub	sp, #32
 8008456:	af00      	add	r7, sp, #0
 8008458:	60f8      	str	r0, [r7, #12]
 800845a:	60b9      	str	r1, [r7, #8]
 800845c:	607a      	str	r2, [r7, #4]
 800845e:	603b      	str	r3, [r7, #0]

	/* Avoid dependency on memset() if it is not required. */
	#if( tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1 )
	{
		/* Fill the stack with a known value to assist debugging. */
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 8008460:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008462:	6b18      	ldr	r0, [r3, #48]	@ 0x30
 8008464:	687b      	ldr	r3, [r7, #4]
 8008466:	009b      	lsls	r3, r3, #2
 8008468:	461a      	mov	r2, r3
 800846a:	21a5      	movs	r1, #165	@ 0xa5
 800846c:	f007 fd4f 	bl	800ff0e <memset>
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 8008470:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008472:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8008474:	6879      	ldr	r1, [r7, #4]
 8008476:	f06f 4340 	mvn.w	r3, #3221225472	@ 0xc0000000
 800847a:	440b      	add	r3, r1
 800847c:	009b      	lsls	r3, r3, #2
 800847e:	4413      	add	r3, r2
 8008480:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 8008482:	69bb      	ldr	r3, [r7, #24]
 8008484:	f023 0307 	bic.w	r3, r3, #7
 8008488:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 800848a:	69bb      	ldr	r3, [r7, #24]
 800848c:	f003 0307 	and.w	r3, r3, #7
 8008490:	2b00      	cmp	r3, #0
 8008492:	d00d      	beq.n	80084b0 <prvInitialiseNewTask+0x5e>
	__asm volatile
 8008494:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008498:	b672      	cpsid	i
 800849a:	f383 8811 	msr	BASEPRI, r3
 800849e:	f3bf 8f6f 	isb	sy
 80084a2:	f3bf 8f4f 	dsb	sy
 80084a6:	b662      	cpsie	i
 80084a8:	617b      	str	r3, [r7, #20]
}
 80084aa:	bf00      	nop
 80084ac:	bf00      	nop
 80084ae:	e7fd      	b.n	80084ac <prvInitialiseNewTask+0x5a>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 80084b0:	68bb      	ldr	r3, [r7, #8]
 80084b2:	2b00      	cmp	r3, #0
 80084b4:	d01f      	beq.n	80084f6 <prvInitialiseNewTask+0xa4>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 80084b6:	2300      	movs	r3, #0
 80084b8:	61fb      	str	r3, [r7, #28]
 80084ba:	e012      	b.n	80084e2 <prvInitialiseNewTask+0x90>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 80084bc:	68ba      	ldr	r2, [r7, #8]
 80084be:	69fb      	ldr	r3, [r7, #28]
 80084c0:	4413      	add	r3, r2
 80084c2:	7819      	ldrb	r1, [r3, #0]
 80084c4:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80084c6:	69fb      	ldr	r3, [r7, #28]
 80084c8:	4413      	add	r3, r2
 80084ca:	3334      	adds	r3, #52	@ 0x34
 80084cc:	460a      	mov	r2, r1
 80084ce:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 80084d0:	68ba      	ldr	r2, [r7, #8]
 80084d2:	69fb      	ldr	r3, [r7, #28]
 80084d4:	4413      	add	r3, r2
 80084d6:	781b      	ldrb	r3, [r3, #0]
 80084d8:	2b00      	cmp	r3, #0
 80084da:	d006      	beq.n	80084ea <prvInitialiseNewTask+0x98>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 80084dc:	69fb      	ldr	r3, [r7, #28]
 80084de:	3301      	adds	r3, #1
 80084e0:	61fb      	str	r3, [r7, #28]
 80084e2:	69fb      	ldr	r3, [r7, #28]
 80084e4:	2b0f      	cmp	r3, #15
 80084e6:	d9e9      	bls.n	80084bc <prvInitialiseNewTask+0x6a>
 80084e8:	e000      	b.n	80084ec <prvInitialiseNewTask+0x9a>
			{
				break;
 80084ea:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 80084ec:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80084ee:	2200      	movs	r2, #0
 80084f0:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 80084f4:	e003      	b.n	80084fe <prvInitialiseNewTask+0xac>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 80084f6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80084f8:	2200      	movs	r2, #0
 80084fa:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 80084fe:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008500:	2b37      	cmp	r3, #55	@ 0x37
 8008502:	d901      	bls.n	8008508 <prvInitialiseNewTask+0xb6>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 8008504:	2337      	movs	r3, #55	@ 0x37
 8008506:	62bb      	str	r3, [r7, #40]	@ 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 8008508:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800850a:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 800850c:	62da      	str	r2, [r3, #44]	@ 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 800850e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008510:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8008512:	64da      	str	r2, [r3, #76]	@ 0x4c
		pxNewTCB->uxMutexesHeld = 0;
 8008514:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008516:	2200      	movs	r2, #0
 8008518:	651a      	str	r2, [r3, #80]	@ 0x50
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 800851a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800851c:	3304      	adds	r3, #4
 800851e:	4618      	mov	r0, r3
 8008520:	f7ff f8fa 	bl	8007718 <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 8008524:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008526:	3318      	adds	r3, #24
 8008528:	4618      	mov	r0, r3
 800852a:	f7ff f8f5 	bl	8007718 <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 800852e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008530:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8008532:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8008534:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008536:	f1c3 0238 	rsb	r2, r3, #56	@ 0x38
 800853a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800853c:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 800853e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008540:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8008542:	625a      	str	r2, [r3, #36]	@ 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 8008544:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008546:	2200      	movs	r2, #0
 8008548:	655a      	str	r2, [r3, #84]	@ 0x54
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 800854a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800854c:	2200      	movs	r2, #0
 800854e:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 8008552:	683a      	ldr	r2, [r7, #0]
 8008554:	68f9      	ldr	r1, [r7, #12]
 8008556:	69b8      	ldr	r0, [r7, #24]
 8008558:	f001 f968 	bl	800982c <pxPortInitialiseStack>
 800855c:	4602      	mov	r2, r0
 800855e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008560:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 8008562:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8008564:	2b00      	cmp	r3, #0
 8008566:	d002      	beq.n	800856e <prvInitialiseNewTask+0x11c>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 8008568:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800856a:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800856c:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800856e:	bf00      	nop
 8008570:	3720      	adds	r7, #32
 8008572:	46bd      	mov	sp, r7
 8008574:	bd80      	pop	{r7, pc}
	...

08008578 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 8008578:	b580      	push	{r7, lr}
 800857a:	b082      	sub	sp, #8
 800857c:	af00      	add	r7, sp, #0
 800857e:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 8008580:	f001 fa64 	bl	8009a4c <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 8008584:	4b2d      	ldr	r3, [pc, #180]	@ (800863c <prvAddNewTaskToReadyList+0xc4>)
 8008586:	681b      	ldr	r3, [r3, #0]
 8008588:	3301      	adds	r3, #1
 800858a:	4a2c      	ldr	r2, [pc, #176]	@ (800863c <prvAddNewTaskToReadyList+0xc4>)
 800858c:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 800858e:	4b2c      	ldr	r3, [pc, #176]	@ (8008640 <prvAddNewTaskToReadyList+0xc8>)
 8008590:	681b      	ldr	r3, [r3, #0]
 8008592:	2b00      	cmp	r3, #0
 8008594:	d109      	bne.n	80085aa <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 8008596:	4a2a      	ldr	r2, [pc, #168]	@ (8008640 <prvAddNewTaskToReadyList+0xc8>)
 8008598:	687b      	ldr	r3, [r7, #4]
 800859a:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 800859c:	4b27      	ldr	r3, [pc, #156]	@ (800863c <prvAddNewTaskToReadyList+0xc4>)
 800859e:	681b      	ldr	r3, [r3, #0]
 80085a0:	2b01      	cmp	r3, #1
 80085a2:	d110      	bne.n	80085c6 <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 80085a4:	f000 fc34 	bl	8008e10 <prvInitialiseTaskLists>
 80085a8:	e00d      	b.n	80085c6 <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 80085aa:	4b26      	ldr	r3, [pc, #152]	@ (8008644 <prvAddNewTaskToReadyList+0xcc>)
 80085ac:	681b      	ldr	r3, [r3, #0]
 80085ae:	2b00      	cmp	r3, #0
 80085b0:	d109      	bne.n	80085c6 <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 80085b2:	4b23      	ldr	r3, [pc, #140]	@ (8008640 <prvAddNewTaskToReadyList+0xc8>)
 80085b4:	681b      	ldr	r3, [r3, #0]
 80085b6:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80085b8:	687b      	ldr	r3, [r7, #4]
 80085ba:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80085bc:	429a      	cmp	r2, r3
 80085be:	d802      	bhi.n	80085c6 <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 80085c0:	4a1f      	ldr	r2, [pc, #124]	@ (8008640 <prvAddNewTaskToReadyList+0xc8>)
 80085c2:	687b      	ldr	r3, [r7, #4]
 80085c4:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 80085c6:	4b20      	ldr	r3, [pc, #128]	@ (8008648 <prvAddNewTaskToReadyList+0xd0>)
 80085c8:	681b      	ldr	r3, [r3, #0]
 80085ca:	3301      	adds	r3, #1
 80085cc:	4a1e      	ldr	r2, [pc, #120]	@ (8008648 <prvAddNewTaskToReadyList+0xd0>)
 80085ce:	6013      	str	r3, [r2, #0]

		#if ( configUSE_TRACE_FACILITY == 1 )
		{
			/* Add a counter into the TCB for tracing only. */
			pxNewTCB->uxTCBNumber = uxTaskNumber;
 80085d0:	4b1d      	ldr	r3, [pc, #116]	@ (8008648 <prvAddNewTaskToReadyList+0xd0>)
 80085d2:	681a      	ldr	r2, [r3, #0]
 80085d4:	687b      	ldr	r3, [r7, #4]
 80085d6:	645a      	str	r2, [r3, #68]	@ 0x44
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 80085d8:	687b      	ldr	r3, [r7, #4]
 80085da:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80085dc:	4b1b      	ldr	r3, [pc, #108]	@ (800864c <prvAddNewTaskToReadyList+0xd4>)
 80085de:	681b      	ldr	r3, [r3, #0]
 80085e0:	429a      	cmp	r2, r3
 80085e2:	d903      	bls.n	80085ec <prvAddNewTaskToReadyList+0x74>
 80085e4:	687b      	ldr	r3, [r7, #4]
 80085e6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80085e8:	4a18      	ldr	r2, [pc, #96]	@ (800864c <prvAddNewTaskToReadyList+0xd4>)
 80085ea:	6013      	str	r3, [r2, #0]
 80085ec:	687b      	ldr	r3, [r7, #4]
 80085ee:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80085f0:	4613      	mov	r3, r2
 80085f2:	009b      	lsls	r3, r3, #2
 80085f4:	4413      	add	r3, r2
 80085f6:	009b      	lsls	r3, r3, #2
 80085f8:	4a15      	ldr	r2, [pc, #84]	@ (8008650 <prvAddNewTaskToReadyList+0xd8>)
 80085fa:	441a      	add	r2, r3
 80085fc:	687b      	ldr	r3, [r7, #4]
 80085fe:	3304      	adds	r3, #4
 8008600:	4619      	mov	r1, r3
 8008602:	4610      	mov	r0, r2
 8008604:	f7ff f895 	bl	8007732 <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 8008608:	f001 fa56 	bl	8009ab8 <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 800860c:	4b0d      	ldr	r3, [pc, #52]	@ (8008644 <prvAddNewTaskToReadyList+0xcc>)
 800860e:	681b      	ldr	r3, [r3, #0]
 8008610:	2b00      	cmp	r3, #0
 8008612:	d00e      	beq.n	8008632 <prvAddNewTaskToReadyList+0xba>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 8008614:	4b0a      	ldr	r3, [pc, #40]	@ (8008640 <prvAddNewTaskToReadyList+0xc8>)
 8008616:	681b      	ldr	r3, [r3, #0]
 8008618:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800861a:	687b      	ldr	r3, [r7, #4]
 800861c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800861e:	429a      	cmp	r2, r3
 8008620:	d207      	bcs.n	8008632 <prvAddNewTaskToReadyList+0xba>
		{
			taskYIELD_IF_USING_PREEMPTION();
 8008622:	4b0c      	ldr	r3, [pc, #48]	@ (8008654 <prvAddNewTaskToReadyList+0xdc>)
 8008624:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8008628:	601a      	str	r2, [r3, #0]
 800862a:	f3bf 8f4f 	dsb	sy
 800862e:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8008632:	bf00      	nop
 8008634:	3708      	adds	r7, #8
 8008636:	46bd      	mov	sp, r7
 8008638:	bd80      	pop	{r7, pc}
 800863a:	bf00      	nop
 800863c:	2002a5c4 	.word	0x2002a5c4
 8008640:	2002a0f0 	.word	0x2002a0f0
 8008644:	2002a5d0 	.word	0x2002a5d0
 8008648:	2002a5e0 	.word	0x2002a5e0
 800864c:	2002a5cc 	.word	0x2002a5cc
 8008650:	2002a0f4 	.word	0x2002a0f4
 8008654:	e000ed04 	.word	0xe000ed04

08008658 <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 8008658:	b580      	push	{r7, lr}
 800865a:	b084      	sub	sp, #16
 800865c:	af00      	add	r7, sp, #0
 800865e:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 8008660:	2300      	movs	r3, #0
 8008662:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 8008664:	687b      	ldr	r3, [r7, #4]
 8008666:	2b00      	cmp	r3, #0
 8008668:	d01a      	beq.n	80086a0 <vTaskDelay+0x48>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 800866a:	4b15      	ldr	r3, [pc, #84]	@ (80086c0 <vTaskDelay+0x68>)
 800866c:	681b      	ldr	r3, [r3, #0]
 800866e:	2b00      	cmp	r3, #0
 8008670:	d00d      	beq.n	800868e <vTaskDelay+0x36>
	__asm volatile
 8008672:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008676:	b672      	cpsid	i
 8008678:	f383 8811 	msr	BASEPRI, r3
 800867c:	f3bf 8f6f 	isb	sy
 8008680:	f3bf 8f4f 	dsb	sy
 8008684:	b662      	cpsie	i
 8008686:	60bb      	str	r3, [r7, #8]
}
 8008688:	bf00      	nop
 800868a:	bf00      	nop
 800868c:	e7fd      	b.n	800868a <vTaskDelay+0x32>
			vTaskSuspendAll();
 800868e:	f000 f887 	bl	80087a0 <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 8008692:	2100      	movs	r1, #0
 8008694:	6878      	ldr	r0, [r7, #4]
 8008696:	f000 fd0d 	bl	80090b4 <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 800869a:	f000 f88f 	bl	80087bc <xTaskResumeAll>
 800869e:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 80086a0:	68fb      	ldr	r3, [r7, #12]
 80086a2:	2b00      	cmp	r3, #0
 80086a4:	d107      	bne.n	80086b6 <vTaskDelay+0x5e>
		{
			portYIELD_WITHIN_API();
 80086a6:	4b07      	ldr	r3, [pc, #28]	@ (80086c4 <vTaskDelay+0x6c>)
 80086a8:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80086ac:	601a      	str	r2, [r3, #0]
 80086ae:	f3bf 8f4f 	dsb	sy
 80086b2:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 80086b6:	bf00      	nop
 80086b8:	3710      	adds	r7, #16
 80086ba:	46bd      	mov	sp, r7
 80086bc:	bd80      	pop	{r7, pc}
 80086be:	bf00      	nop
 80086c0:	2002a5ec 	.word	0x2002a5ec
 80086c4:	e000ed04 	.word	0xe000ed04

080086c8 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 80086c8:	b580      	push	{r7, lr}
 80086ca:	b08a      	sub	sp, #40	@ 0x28
 80086cc:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 80086ce:	2300      	movs	r3, #0
 80086d0:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 80086d2:	2300      	movs	r3, #0
 80086d4:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 80086d6:	463a      	mov	r2, r7
 80086d8:	1d39      	adds	r1, r7, #4
 80086da:	f107 0308 	add.w	r3, r7, #8
 80086de:	4618      	mov	r0, r3
 80086e0:	f7fe ffc6 	bl	8007670 <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 80086e4:	6839      	ldr	r1, [r7, #0]
 80086e6:	687b      	ldr	r3, [r7, #4]
 80086e8:	68ba      	ldr	r2, [r7, #8]
 80086ea:	9202      	str	r2, [sp, #8]
 80086ec:	9301      	str	r3, [sp, #4]
 80086ee:	2300      	movs	r3, #0
 80086f0:	9300      	str	r3, [sp, #0]
 80086f2:	2300      	movs	r3, #0
 80086f4:	460a      	mov	r2, r1
 80086f6:	4924      	ldr	r1, [pc, #144]	@ (8008788 <vTaskStartScheduler+0xc0>)
 80086f8:	4824      	ldr	r0, [pc, #144]	@ (800878c <vTaskStartScheduler+0xc4>)
 80086fa:	f7ff fdff 	bl	80082fc <xTaskCreateStatic>
 80086fe:	4603      	mov	r3, r0
 8008700:	4a23      	ldr	r2, [pc, #140]	@ (8008790 <vTaskStartScheduler+0xc8>)
 8008702:	6013      	str	r3, [r2, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												portPRIVILEGE_BIT, /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_PRIORITY is zero. */
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 8008704:	4b22      	ldr	r3, [pc, #136]	@ (8008790 <vTaskStartScheduler+0xc8>)
 8008706:	681b      	ldr	r3, [r3, #0]
 8008708:	2b00      	cmp	r3, #0
 800870a:	d002      	beq.n	8008712 <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 800870c:	2301      	movs	r3, #1
 800870e:	617b      	str	r3, [r7, #20]
 8008710:	e001      	b.n	8008716 <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 8008712:	2300      	movs	r3, #0
 8008714:	617b      	str	r3, [r7, #20]
	}
	#endif /* configSUPPORT_STATIC_ALLOCATION */

	#if ( configUSE_TIMERS == 1 )
	{
		if( xReturn == pdPASS )
 8008716:	697b      	ldr	r3, [r7, #20]
 8008718:	2b01      	cmp	r3, #1
 800871a:	d102      	bne.n	8008722 <vTaskStartScheduler+0x5a>
		{
			xReturn = xTimerCreateTimerTask();
 800871c:	f000 fd1e 	bl	800915c <xTimerCreateTimerTask>
 8008720:	6178      	str	r0, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 8008722:	697b      	ldr	r3, [r7, #20]
 8008724:	2b01      	cmp	r3, #1
 8008726:	d118      	bne.n	800875a <vTaskStartScheduler+0x92>
	__asm volatile
 8008728:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800872c:	b672      	cpsid	i
 800872e:	f383 8811 	msr	BASEPRI, r3
 8008732:	f3bf 8f6f 	isb	sy
 8008736:	f3bf 8f4f 	dsb	sy
 800873a:	b662      	cpsie	i
 800873c:	613b      	str	r3, [r7, #16]
}
 800873e:	bf00      	nop
			structure specific to the task that will run first. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 8008740:	4b14      	ldr	r3, [pc, #80]	@ (8008794 <vTaskStartScheduler+0xcc>)
 8008742:	f04f 32ff 	mov.w	r2, #4294967295
 8008746:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 8008748:	4b13      	ldr	r3, [pc, #76]	@ (8008798 <vTaskStartScheduler+0xd0>)
 800874a:	2201      	movs	r2, #1
 800874c:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 800874e:	4b13      	ldr	r3, [pc, #76]	@ (800879c <vTaskStartScheduler+0xd4>)
 8008750:	2200      	movs	r2, #0
 8008752:	601a      	str	r2, [r3, #0]

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 8008754:	f001 f8fc 	bl	8009950 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 8008758:	e011      	b.n	800877e <vTaskStartScheduler+0xb6>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 800875a:	697b      	ldr	r3, [r7, #20]
 800875c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008760:	d10d      	bne.n	800877e <vTaskStartScheduler+0xb6>
	__asm volatile
 8008762:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008766:	b672      	cpsid	i
 8008768:	f383 8811 	msr	BASEPRI, r3
 800876c:	f3bf 8f6f 	isb	sy
 8008770:	f3bf 8f4f 	dsb	sy
 8008774:	b662      	cpsie	i
 8008776:	60fb      	str	r3, [r7, #12]
}
 8008778:	bf00      	nop
 800877a:	bf00      	nop
 800877c:	e7fd      	b.n	800877a <vTaskStartScheduler+0xb2>
}
 800877e:	bf00      	nop
 8008780:	3718      	adds	r7, #24
 8008782:	46bd      	mov	sp, r7
 8008784:	bd80      	pop	{r7, pc}
 8008786:	bf00      	nop
 8008788:	08010f18 	.word	0x08010f18
 800878c:	08008de1 	.word	0x08008de1
 8008790:	2002a5e8 	.word	0x2002a5e8
 8008794:	2002a5e4 	.word	0x2002a5e4
 8008798:	2002a5d0 	.word	0x2002a5d0
 800879c:	2002a5c8 	.word	0x2002a5c8

080087a0 <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 80087a0:	b480      	push	{r7}
 80087a2:	af00      	add	r7, sp, #0
	/* A critical section is not required as the variable is of type
	BaseType_t.  Please read Richard Barry's reply in the following link to a
	post in the FreeRTOS support forum before reporting this as a bug! -
	http://goo.gl/wu4acr */
	++uxSchedulerSuspended;
 80087a4:	4b04      	ldr	r3, [pc, #16]	@ (80087b8 <vTaskSuspendAll+0x18>)
 80087a6:	681b      	ldr	r3, [r3, #0]
 80087a8:	3301      	adds	r3, #1
 80087aa:	4a03      	ldr	r2, [pc, #12]	@ (80087b8 <vTaskSuspendAll+0x18>)
 80087ac:	6013      	str	r3, [r2, #0]
	portMEMORY_BARRIER();
}
 80087ae:	bf00      	nop
 80087b0:	46bd      	mov	sp, r7
 80087b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80087b6:	4770      	bx	lr
 80087b8:	2002a5ec 	.word	0x2002a5ec

080087bc <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 80087bc:	b580      	push	{r7, lr}
 80087be:	b084      	sub	sp, #16
 80087c0:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 80087c2:	2300      	movs	r3, #0
 80087c4:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 80087c6:	2300      	movs	r3, #0
 80087c8:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 80087ca:	4b43      	ldr	r3, [pc, #268]	@ (80088d8 <xTaskResumeAll+0x11c>)
 80087cc:	681b      	ldr	r3, [r3, #0]
 80087ce:	2b00      	cmp	r3, #0
 80087d0:	d10d      	bne.n	80087ee <xTaskResumeAll+0x32>
	__asm volatile
 80087d2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80087d6:	b672      	cpsid	i
 80087d8:	f383 8811 	msr	BASEPRI, r3
 80087dc:	f3bf 8f6f 	isb	sy
 80087e0:	f3bf 8f4f 	dsb	sy
 80087e4:	b662      	cpsie	i
 80087e6:	603b      	str	r3, [r7, #0]
}
 80087e8:	bf00      	nop
 80087ea:	bf00      	nop
 80087ec:	e7fd      	b.n	80087ea <xTaskResumeAll+0x2e>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 80087ee:	f001 f92d 	bl	8009a4c <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 80087f2:	4b39      	ldr	r3, [pc, #228]	@ (80088d8 <xTaskResumeAll+0x11c>)
 80087f4:	681b      	ldr	r3, [r3, #0]
 80087f6:	3b01      	subs	r3, #1
 80087f8:	4a37      	ldr	r2, [pc, #220]	@ (80088d8 <xTaskResumeAll+0x11c>)
 80087fa:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80087fc:	4b36      	ldr	r3, [pc, #216]	@ (80088d8 <xTaskResumeAll+0x11c>)
 80087fe:	681b      	ldr	r3, [r3, #0]
 8008800:	2b00      	cmp	r3, #0
 8008802:	d162      	bne.n	80088ca <xTaskResumeAll+0x10e>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 8008804:	4b35      	ldr	r3, [pc, #212]	@ (80088dc <xTaskResumeAll+0x120>)
 8008806:	681b      	ldr	r3, [r3, #0]
 8008808:	2b00      	cmp	r3, #0
 800880a:	d05e      	beq.n	80088ca <xTaskResumeAll+0x10e>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 800880c:	e02f      	b.n	800886e <xTaskResumeAll+0xb2>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800880e:	4b34      	ldr	r3, [pc, #208]	@ (80088e0 <xTaskResumeAll+0x124>)
 8008810:	68db      	ldr	r3, [r3, #12]
 8008812:	68db      	ldr	r3, [r3, #12]
 8008814:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8008816:	68fb      	ldr	r3, [r7, #12]
 8008818:	3318      	adds	r3, #24
 800881a:	4618      	mov	r0, r3
 800881c:	f7fe ffe6 	bl	80077ec <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8008820:	68fb      	ldr	r3, [r7, #12]
 8008822:	3304      	adds	r3, #4
 8008824:	4618      	mov	r0, r3
 8008826:	f7fe ffe1 	bl	80077ec <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 800882a:	68fb      	ldr	r3, [r7, #12]
 800882c:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800882e:	4b2d      	ldr	r3, [pc, #180]	@ (80088e4 <xTaskResumeAll+0x128>)
 8008830:	681b      	ldr	r3, [r3, #0]
 8008832:	429a      	cmp	r2, r3
 8008834:	d903      	bls.n	800883e <xTaskResumeAll+0x82>
 8008836:	68fb      	ldr	r3, [r7, #12]
 8008838:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800883a:	4a2a      	ldr	r2, [pc, #168]	@ (80088e4 <xTaskResumeAll+0x128>)
 800883c:	6013      	str	r3, [r2, #0]
 800883e:	68fb      	ldr	r3, [r7, #12]
 8008840:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8008842:	4613      	mov	r3, r2
 8008844:	009b      	lsls	r3, r3, #2
 8008846:	4413      	add	r3, r2
 8008848:	009b      	lsls	r3, r3, #2
 800884a:	4a27      	ldr	r2, [pc, #156]	@ (80088e8 <xTaskResumeAll+0x12c>)
 800884c:	441a      	add	r2, r3
 800884e:	68fb      	ldr	r3, [r7, #12]
 8008850:	3304      	adds	r3, #4
 8008852:	4619      	mov	r1, r3
 8008854:	4610      	mov	r0, r2
 8008856:	f7fe ff6c 	bl	8007732 <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 800885a:	68fb      	ldr	r3, [r7, #12]
 800885c:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800885e:	4b23      	ldr	r3, [pc, #140]	@ (80088ec <xTaskResumeAll+0x130>)
 8008860:	681b      	ldr	r3, [r3, #0]
 8008862:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8008864:	429a      	cmp	r2, r3
 8008866:	d302      	bcc.n	800886e <xTaskResumeAll+0xb2>
					{
						xYieldPending = pdTRUE;
 8008868:	4b21      	ldr	r3, [pc, #132]	@ (80088f0 <xTaskResumeAll+0x134>)
 800886a:	2201      	movs	r2, #1
 800886c:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 800886e:	4b1c      	ldr	r3, [pc, #112]	@ (80088e0 <xTaskResumeAll+0x124>)
 8008870:	681b      	ldr	r3, [r3, #0]
 8008872:	2b00      	cmp	r3, #0
 8008874:	d1cb      	bne.n	800880e <xTaskResumeAll+0x52>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 8008876:	68fb      	ldr	r3, [r7, #12]
 8008878:	2b00      	cmp	r3, #0
 800887a:	d001      	beq.n	8008880 <xTaskResumeAll+0xc4>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 800887c:	f000 fb68 	bl	8008f50 <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					UBaseType_t uxPendedCounts = uxPendedTicks; /* Non-volatile copy. */
 8008880:	4b1c      	ldr	r3, [pc, #112]	@ (80088f4 <xTaskResumeAll+0x138>)
 8008882:	681b      	ldr	r3, [r3, #0]
 8008884:	607b      	str	r3, [r7, #4]

					if( uxPendedCounts > ( UBaseType_t ) 0U )
 8008886:	687b      	ldr	r3, [r7, #4]
 8008888:	2b00      	cmp	r3, #0
 800888a:	d010      	beq.n	80088ae <xTaskResumeAll+0xf2>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 800888c:	f000 f846 	bl	800891c <xTaskIncrementTick>
 8008890:	4603      	mov	r3, r0
 8008892:	2b00      	cmp	r3, #0
 8008894:	d002      	beq.n	800889c <xTaskResumeAll+0xe0>
							{
								xYieldPending = pdTRUE;
 8008896:	4b16      	ldr	r3, [pc, #88]	@ (80088f0 <xTaskResumeAll+0x134>)
 8008898:	2201      	movs	r2, #1
 800889a:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--uxPendedCounts;
 800889c:	687b      	ldr	r3, [r7, #4]
 800889e:	3b01      	subs	r3, #1
 80088a0:	607b      	str	r3, [r7, #4]
						} while( uxPendedCounts > ( UBaseType_t ) 0U );
 80088a2:	687b      	ldr	r3, [r7, #4]
 80088a4:	2b00      	cmp	r3, #0
 80088a6:	d1f1      	bne.n	800888c <xTaskResumeAll+0xd0>

						uxPendedTicks = 0;
 80088a8:	4b12      	ldr	r3, [pc, #72]	@ (80088f4 <xTaskResumeAll+0x138>)
 80088aa:	2200      	movs	r2, #0
 80088ac:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 80088ae:	4b10      	ldr	r3, [pc, #64]	@ (80088f0 <xTaskResumeAll+0x134>)
 80088b0:	681b      	ldr	r3, [r3, #0]
 80088b2:	2b00      	cmp	r3, #0
 80088b4:	d009      	beq.n	80088ca <xTaskResumeAll+0x10e>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 80088b6:	2301      	movs	r3, #1
 80088b8:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 80088ba:	4b0f      	ldr	r3, [pc, #60]	@ (80088f8 <xTaskResumeAll+0x13c>)
 80088bc:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80088c0:	601a      	str	r2, [r3, #0]
 80088c2:	f3bf 8f4f 	dsb	sy
 80088c6:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 80088ca:	f001 f8f5 	bl	8009ab8 <vPortExitCritical>

	return xAlreadyYielded;
 80088ce:	68bb      	ldr	r3, [r7, #8]
}
 80088d0:	4618      	mov	r0, r3
 80088d2:	3710      	adds	r7, #16
 80088d4:	46bd      	mov	sp, r7
 80088d6:	bd80      	pop	{r7, pc}
 80088d8:	2002a5ec 	.word	0x2002a5ec
 80088dc:	2002a5c4 	.word	0x2002a5c4
 80088e0:	2002a584 	.word	0x2002a584
 80088e4:	2002a5cc 	.word	0x2002a5cc
 80088e8:	2002a0f4 	.word	0x2002a0f4
 80088ec:	2002a0f0 	.word	0x2002a0f0
 80088f0:	2002a5d8 	.word	0x2002a5d8
 80088f4:	2002a5d4 	.word	0x2002a5d4
 80088f8:	e000ed04 	.word	0xe000ed04

080088fc <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 80088fc:	b480      	push	{r7}
 80088fe:	b083      	sub	sp, #12
 8008900:	af00      	add	r7, sp, #0
TickType_t xTicks;

	/* Critical section required if running on a 16 bit processor. */
	portTICK_TYPE_ENTER_CRITICAL();
	{
		xTicks = xTickCount;
 8008902:	4b05      	ldr	r3, [pc, #20]	@ (8008918 <xTaskGetTickCount+0x1c>)
 8008904:	681b      	ldr	r3, [r3, #0]
 8008906:	607b      	str	r3, [r7, #4]
	}
	portTICK_TYPE_EXIT_CRITICAL();

	return xTicks;
 8008908:	687b      	ldr	r3, [r7, #4]
}
 800890a:	4618      	mov	r0, r3
 800890c:	370c      	adds	r7, #12
 800890e:	46bd      	mov	sp, r7
 8008910:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008914:	4770      	bx	lr
 8008916:	bf00      	nop
 8008918:	2002a5c8 	.word	0x2002a5c8

0800891c <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 800891c:	b580      	push	{r7, lr}
 800891e:	b086      	sub	sp, #24
 8008920:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 8008922:	2300      	movs	r3, #0
 8008924:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8008926:	4b50      	ldr	r3, [pc, #320]	@ (8008a68 <xTaskIncrementTick+0x14c>)
 8008928:	681b      	ldr	r3, [r3, #0]
 800892a:	2b00      	cmp	r3, #0
 800892c:	f040 808c 	bne.w	8008a48 <xTaskIncrementTick+0x12c>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 8008930:	4b4e      	ldr	r3, [pc, #312]	@ (8008a6c <xTaskIncrementTick+0x150>)
 8008932:	681b      	ldr	r3, [r3, #0]
 8008934:	3301      	adds	r3, #1
 8008936:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 8008938:	4a4c      	ldr	r2, [pc, #304]	@ (8008a6c <xTaskIncrementTick+0x150>)
 800893a:	693b      	ldr	r3, [r7, #16]
 800893c:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 800893e:	693b      	ldr	r3, [r7, #16]
 8008940:	2b00      	cmp	r3, #0
 8008942:	d123      	bne.n	800898c <xTaskIncrementTick+0x70>
		{
			taskSWITCH_DELAYED_LISTS();
 8008944:	4b4a      	ldr	r3, [pc, #296]	@ (8008a70 <xTaskIncrementTick+0x154>)
 8008946:	681b      	ldr	r3, [r3, #0]
 8008948:	681b      	ldr	r3, [r3, #0]
 800894a:	2b00      	cmp	r3, #0
 800894c:	d00d      	beq.n	800896a <xTaskIncrementTick+0x4e>
	__asm volatile
 800894e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008952:	b672      	cpsid	i
 8008954:	f383 8811 	msr	BASEPRI, r3
 8008958:	f3bf 8f6f 	isb	sy
 800895c:	f3bf 8f4f 	dsb	sy
 8008960:	b662      	cpsie	i
 8008962:	603b      	str	r3, [r7, #0]
}
 8008964:	bf00      	nop
 8008966:	bf00      	nop
 8008968:	e7fd      	b.n	8008966 <xTaskIncrementTick+0x4a>
 800896a:	4b41      	ldr	r3, [pc, #260]	@ (8008a70 <xTaskIncrementTick+0x154>)
 800896c:	681b      	ldr	r3, [r3, #0]
 800896e:	60fb      	str	r3, [r7, #12]
 8008970:	4b40      	ldr	r3, [pc, #256]	@ (8008a74 <xTaskIncrementTick+0x158>)
 8008972:	681b      	ldr	r3, [r3, #0]
 8008974:	4a3e      	ldr	r2, [pc, #248]	@ (8008a70 <xTaskIncrementTick+0x154>)
 8008976:	6013      	str	r3, [r2, #0]
 8008978:	4a3e      	ldr	r2, [pc, #248]	@ (8008a74 <xTaskIncrementTick+0x158>)
 800897a:	68fb      	ldr	r3, [r7, #12]
 800897c:	6013      	str	r3, [r2, #0]
 800897e:	4b3e      	ldr	r3, [pc, #248]	@ (8008a78 <xTaskIncrementTick+0x15c>)
 8008980:	681b      	ldr	r3, [r3, #0]
 8008982:	3301      	adds	r3, #1
 8008984:	4a3c      	ldr	r2, [pc, #240]	@ (8008a78 <xTaskIncrementTick+0x15c>)
 8008986:	6013      	str	r3, [r2, #0]
 8008988:	f000 fae2 	bl	8008f50 <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 800898c:	4b3b      	ldr	r3, [pc, #236]	@ (8008a7c <xTaskIncrementTick+0x160>)
 800898e:	681b      	ldr	r3, [r3, #0]
 8008990:	693a      	ldr	r2, [r7, #16]
 8008992:	429a      	cmp	r2, r3
 8008994:	d349      	bcc.n	8008a2a <xTaskIncrementTick+0x10e>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8008996:	4b36      	ldr	r3, [pc, #216]	@ (8008a70 <xTaskIncrementTick+0x154>)
 8008998:	681b      	ldr	r3, [r3, #0]
 800899a:	681b      	ldr	r3, [r3, #0]
 800899c:	2b00      	cmp	r3, #0
 800899e:	d104      	bne.n	80089aa <xTaskIncrementTick+0x8e>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80089a0:	4b36      	ldr	r3, [pc, #216]	@ (8008a7c <xTaskIncrementTick+0x160>)
 80089a2:	f04f 32ff 	mov.w	r2, #4294967295
 80089a6:	601a      	str	r2, [r3, #0]
					break;
 80089a8:	e03f      	b.n	8008a2a <xTaskIncrementTick+0x10e>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80089aa:	4b31      	ldr	r3, [pc, #196]	@ (8008a70 <xTaskIncrementTick+0x154>)
 80089ac:	681b      	ldr	r3, [r3, #0]
 80089ae:	68db      	ldr	r3, [r3, #12]
 80089b0:	68db      	ldr	r3, [r3, #12]
 80089b2:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 80089b4:	68bb      	ldr	r3, [r7, #8]
 80089b6:	685b      	ldr	r3, [r3, #4]
 80089b8:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 80089ba:	693a      	ldr	r2, [r7, #16]
 80089bc:	687b      	ldr	r3, [r7, #4]
 80089be:	429a      	cmp	r2, r3
 80089c0:	d203      	bcs.n	80089ca <xTaskIncrementTick+0xae>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 80089c2:	4a2e      	ldr	r2, [pc, #184]	@ (8008a7c <xTaskIncrementTick+0x160>)
 80089c4:	687b      	ldr	r3, [r7, #4]
 80089c6:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 80089c8:	e02f      	b.n	8008a2a <xTaskIncrementTick+0x10e>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 80089ca:	68bb      	ldr	r3, [r7, #8]
 80089cc:	3304      	adds	r3, #4
 80089ce:	4618      	mov	r0, r3
 80089d0:	f7fe ff0c 	bl	80077ec <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 80089d4:	68bb      	ldr	r3, [r7, #8]
 80089d6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80089d8:	2b00      	cmp	r3, #0
 80089da:	d004      	beq.n	80089e6 <xTaskIncrementTick+0xca>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 80089dc:	68bb      	ldr	r3, [r7, #8]
 80089de:	3318      	adds	r3, #24
 80089e0:	4618      	mov	r0, r3
 80089e2:	f7fe ff03 	bl	80077ec <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 80089e6:	68bb      	ldr	r3, [r7, #8]
 80089e8:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80089ea:	4b25      	ldr	r3, [pc, #148]	@ (8008a80 <xTaskIncrementTick+0x164>)
 80089ec:	681b      	ldr	r3, [r3, #0]
 80089ee:	429a      	cmp	r2, r3
 80089f0:	d903      	bls.n	80089fa <xTaskIncrementTick+0xde>
 80089f2:	68bb      	ldr	r3, [r7, #8]
 80089f4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80089f6:	4a22      	ldr	r2, [pc, #136]	@ (8008a80 <xTaskIncrementTick+0x164>)
 80089f8:	6013      	str	r3, [r2, #0]
 80089fa:	68bb      	ldr	r3, [r7, #8]
 80089fc:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80089fe:	4613      	mov	r3, r2
 8008a00:	009b      	lsls	r3, r3, #2
 8008a02:	4413      	add	r3, r2
 8008a04:	009b      	lsls	r3, r3, #2
 8008a06:	4a1f      	ldr	r2, [pc, #124]	@ (8008a84 <xTaskIncrementTick+0x168>)
 8008a08:	441a      	add	r2, r3
 8008a0a:	68bb      	ldr	r3, [r7, #8]
 8008a0c:	3304      	adds	r3, #4
 8008a0e:	4619      	mov	r1, r3
 8008a10:	4610      	mov	r0, r2
 8008a12:	f7fe fe8e 	bl	8007732 <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8008a16:	68bb      	ldr	r3, [r7, #8]
 8008a18:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8008a1a:	4b1b      	ldr	r3, [pc, #108]	@ (8008a88 <xTaskIncrementTick+0x16c>)
 8008a1c:	681b      	ldr	r3, [r3, #0]
 8008a1e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8008a20:	429a      	cmp	r2, r3
 8008a22:	d3b8      	bcc.n	8008996 <xTaskIncrementTick+0x7a>
						{
							xSwitchRequired = pdTRUE;
 8008a24:	2301      	movs	r3, #1
 8008a26:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8008a28:	e7b5      	b.n	8008996 <xTaskIncrementTick+0x7a>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 8008a2a:	4b17      	ldr	r3, [pc, #92]	@ (8008a88 <xTaskIncrementTick+0x16c>)
 8008a2c:	681b      	ldr	r3, [r3, #0]
 8008a2e:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8008a30:	4914      	ldr	r1, [pc, #80]	@ (8008a84 <xTaskIncrementTick+0x168>)
 8008a32:	4613      	mov	r3, r2
 8008a34:	009b      	lsls	r3, r3, #2
 8008a36:	4413      	add	r3, r2
 8008a38:	009b      	lsls	r3, r3, #2
 8008a3a:	440b      	add	r3, r1
 8008a3c:	681b      	ldr	r3, [r3, #0]
 8008a3e:	2b01      	cmp	r3, #1
 8008a40:	d907      	bls.n	8008a52 <xTaskIncrementTick+0x136>
			{
				xSwitchRequired = pdTRUE;
 8008a42:	2301      	movs	r3, #1
 8008a44:	617b      	str	r3, [r7, #20]
 8008a46:	e004      	b.n	8008a52 <xTaskIncrementTick+0x136>
		}
		#endif /* configUSE_TICK_HOOK */
	}
	else
	{
		++uxPendedTicks;
 8008a48:	4b10      	ldr	r3, [pc, #64]	@ (8008a8c <xTaskIncrementTick+0x170>)
 8008a4a:	681b      	ldr	r3, [r3, #0]
 8008a4c:	3301      	adds	r3, #1
 8008a4e:	4a0f      	ldr	r2, [pc, #60]	@ (8008a8c <xTaskIncrementTick+0x170>)
 8008a50:	6013      	str	r3, [r2, #0]
		#endif
	}

	#if ( configUSE_PREEMPTION == 1 )
	{
		if( xYieldPending != pdFALSE )
 8008a52:	4b0f      	ldr	r3, [pc, #60]	@ (8008a90 <xTaskIncrementTick+0x174>)
 8008a54:	681b      	ldr	r3, [r3, #0]
 8008a56:	2b00      	cmp	r3, #0
 8008a58:	d001      	beq.n	8008a5e <xTaskIncrementTick+0x142>
		{
			xSwitchRequired = pdTRUE;
 8008a5a:	2301      	movs	r3, #1
 8008a5c:	617b      	str	r3, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_PREEMPTION */

	return xSwitchRequired;
 8008a5e:	697b      	ldr	r3, [r7, #20]
}
 8008a60:	4618      	mov	r0, r3
 8008a62:	3718      	adds	r7, #24
 8008a64:	46bd      	mov	sp, r7
 8008a66:	bd80      	pop	{r7, pc}
 8008a68:	2002a5ec 	.word	0x2002a5ec
 8008a6c:	2002a5c8 	.word	0x2002a5c8
 8008a70:	2002a57c 	.word	0x2002a57c
 8008a74:	2002a580 	.word	0x2002a580
 8008a78:	2002a5dc 	.word	0x2002a5dc
 8008a7c:	2002a5e4 	.word	0x2002a5e4
 8008a80:	2002a5cc 	.word	0x2002a5cc
 8008a84:	2002a0f4 	.word	0x2002a0f4
 8008a88:	2002a0f0 	.word	0x2002a0f0
 8008a8c:	2002a5d4 	.word	0x2002a5d4
 8008a90:	2002a5d8 	.word	0x2002a5d8

08008a94 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 8008a94:	b480      	push	{r7}
 8008a96:	b085      	sub	sp, #20
 8008a98:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 8008a9a:	4b29      	ldr	r3, [pc, #164]	@ (8008b40 <vTaskSwitchContext+0xac>)
 8008a9c:	681b      	ldr	r3, [r3, #0]
 8008a9e:	2b00      	cmp	r3, #0
 8008aa0:	d003      	beq.n	8008aaa <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 8008aa2:	4b28      	ldr	r3, [pc, #160]	@ (8008b44 <vTaskSwitchContext+0xb0>)
 8008aa4:	2201      	movs	r2, #1
 8008aa6:	601a      	str	r2, [r3, #0]
			structure specific to this task. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 8008aa8:	e044      	b.n	8008b34 <vTaskSwitchContext+0xa0>
		xYieldPending = pdFALSE;
 8008aaa:	4b26      	ldr	r3, [pc, #152]	@ (8008b44 <vTaskSwitchContext+0xb0>)
 8008aac:	2200      	movs	r2, #0
 8008aae:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8008ab0:	4b25      	ldr	r3, [pc, #148]	@ (8008b48 <vTaskSwitchContext+0xb4>)
 8008ab2:	681b      	ldr	r3, [r3, #0]
 8008ab4:	60fb      	str	r3, [r7, #12]
 8008ab6:	e013      	b.n	8008ae0 <vTaskSwitchContext+0x4c>
 8008ab8:	68fb      	ldr	r3, [r7, #12]
 8008aba:	2b00      	cmp	r3, #0
 8008abc:	d10d      	bne.n	8008ada <vTaskSwitchContext+0x46>
	__asm volatile
 8008abe:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008ac2:	b672      	cpsid	i
 8008ac4:	f383 8811 	msr	BASEPRI, r3
 8008ac8:	f3bf 8f6f 	isb	sy
 8008acc:	f3bf 8f4f 	dsb	sy
 8008ad0:	b662      	cpsie	i
 8008ad2:	607b      	str	r3, [r7, #4]
}
 8008ad4:	bf00      	nop
 8008ad6:	bf00      	nop
 8008ad8:	e7fd      	b.n	8008ad6 <vTaskSwitchContext+0x42>
 8008ada:	68fb      	ldr	r3, [r7, #12]
 8008adc:	3b01      	subs	r3, #1
 8008ade:	60fb      	str	r3, [r7, #12]
 8008ae0:	491a      	ldr	r1, [pc, #104]	@ (8008b4c <vTaskSwitchContext+0xb8>)
 8008ae2:	68fa      	ldr	r2, [r7, #12]
 8008ae4:	4613      	mov	r3, r2
 8008ae6:	009b      	lsls	r3, r3, #2
 8008ae8:	4413      	add	r3, r2
 8008aea:	009b      	lsls	r3, r3, #2
 8008aec:	440b      	add	r3, r1
 8008aee:	681b      	ldr	r3, [r3, #0]
 8008af0:	2b00      	cmp	r3, #0
 8008af2:	d0e1      	beq.n	8008ab8 <vTaskSwitchContext+0x24>
 8008af4:	68fa      	ldr	r2, [r7, #12]
 8008af6:	4613      	mov	r3, r2
 8008af8:	009b      	lsls	r3, r3, #2
 8008afa:	4413      	add	r3, r2
 8008afc:	009b      	lsls	r3, r3, #2
 8008afe:	4a13      	ldr	r2, [pc, #76]	@ (8008b4c <vTaskSwitchContext+0xb8>)
 8008b00:	4413      	add	r3, r2
 8008b02:	60bb      	str	r3, [r7, #8]
 8008b04:	68bb      	ldr	r3, [r7, #8]
 8008b06:	685b      	ldr	r3, [r3, #4]
 8008b08:	685a      	ldr	r2, [r3, #4]
 8008b0a:	68bb      	ldr	r3, [r7, #8]
 8008b0c:	605a      	str	r2, [r3, #4]
 8008b0e:	68bb      	ldr	r3, [r7, #8]
 8008b10:	685a      	ldr	r2, [r3, #4]
 8008b12:	68bb      	ldr	r3, [r7, #8]
 8008b14:	3308      	adds	r3, #8
 8008b16:	429a      	cmp	r2, r3
 8008b18:	d104      	bne.n	8008b24 <vTaskSwitchContext+0x90>
 8008b1a:	68bb      	ldr	r3, [r7, #8]
 8008b1c:	685b      	ldr	r3, [r3, #4]
 8008b1e:	685a      	ldr	r2, [r3, #4]
 8008b20:	68bb      	ldr	r3, [r7, #8]
 8008b22:	605a      	str	r2, [r3, #4]
 8008b24:	68bb      	ldr	r3, [r7, #8]
 8008b26:	685b      	ldr	r3, [r3, #4]
 8008b28:	68db      	ldr	r3, [r3, #12]
 8008b2a:	4a09      	ldr	r2, [pc, #36]	@ (8008b50 <vTaskSwitchContext+0xbc>)
 8008b2c:	6013      	str	r3, [r2, #0]
 8008b2e:	4a06      	ldr	r2, [pc, #24]	@ (8008b48 <vTaskSwitchContext+0xb4>)
 8008b30:	68fb      	ldr	r3, [r7, #12]
 8008b32:	6013      	str	r3, [r2, #0]
}
 8008b34:	bf00      	nop
 8008b36:	3714      	adds	r7, #20
 8008b38:	46bd      	mov	sp, r7
 8008b3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008b3e:	4770      	bx	lr
 8008b40:	2002a5ec 	.word	0x2002a5ec
 8008b44:	2002a5d8 	.word	0x2002a5d8
 8008b48:	2002a5cc 	.word	0x2002a5cc
 8008b4c:	2002a0f4 	.word	0x2002a0f4
 8008b50:	2002a0f0 	.word	0x2002a0f0

08008b54 <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 8008b54:	b580      	push	{r7, lr}
 8008b56:	b084      	sub	sp, #16
 8008b58:	af00      	add	r7, sp, #0
 8008b5a:	6078      	str	r0, [r7, #4]
 8008b5c:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 8008b5e:	687b      	ldr	r3, [r7, #4]
 8008b60:	2b00      	cmp	r3, #0
 8008b62:	d10d      	bne.n	8008b80 <vTaskPlaceOnEventList+0x2c>
	__asm volatile
 8008b64:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008b68:	b672      	cpsid	i
 8008b6a:	f383 8811 	msr	BASEPRI, r3
 8008b6e:	f3bf 8f6f 	isb	sy
 8008b72:	f3bf 8f4f 	dsb	sy
 8008b76:	b662      	cpsie	i
 8008b78:	60fb      	str	r3, [r7, #12]
}
 8008b7a:	bf00      	nop
 8008b7c:	bf00      	nop
 8008b7e:	e7fd      	b.n	8008b7c <vTaskPlaceOnEventList+0x28>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8008b80:	4b07      	ldr	r3, [pc, #28]	@ (8008ba0 <vTaskPlaceOnEventList+0x4c>)
 8008b82:	681b      	ldr	r3, [r3, #0]
 8008b84:	3318      	adds	r3, #24
 8008b86:	4619      	mov	r1, r3
 8008b88:	6878      	ldr	r0, [r7, #4]
 8008b8a:	f7fe fdf6 	bl	800777a <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 8008b8e:	2101      	movs	r1, #1
 8008b90:	6838      	ldr	r0, [r7, #0]
 8008b92:	f000 fa8f 	bl	80090b4 <prvAddCurrentTaskToDelayedList>
}
 8008b96:	bf00      	nop
 8008b98:	3710      	adds	r7, #16
 8008b9a:	46bd      	mov	sp, r7
 8008b9c:	bd80      	pop	{r7, pc}
 8008b9e:	bf00      	nop
 8008ba0:	2002a0f0 	.word	0x2002a0f0

08008ba4 <vTaskPlaceOnEventListRestricted>:
/*-----------------------------------------------------------*/

#if( configUSE_TIMERS == 1 )

	void vTaskPlaceOnEventListRestricted( List_t * const pxEventList, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 8008ba4:	b580      	push	{r7, lr}
 8008ba6:	b086      	sub	sp, #24
 8008ba8:	af00      	add	r7, sp, #0
 8008baa:	60f8      	str	r0, [r7, #12]
 8008bac:	60b9      	str	r1, [r7, #8]
 8008bae:	607a      	str	r2, [r7, #4]
		configASSERT( pxEventList );
 8008bb0:	68fb      	ldr	r3, [r7, #12]
 8008bb2:	2b00      	cmp	r3, #0
 8008bb4:	d10d      	bne.n	8008bd2 <vTaskPlaceOnEventListRestricted+0x2e>
	__asm volatile
 8008bb6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008bba:	b672      	cpsid	i
 8008bbc:	f383 8811 	msr	BASEPRI, r3
 8008bc0:	f3bf 8f6f 	isb	sy
 8008bc4:	f3bf 8f4f 	dsb	sy
 8008bc8:	b662      	cpsie	i
 8008bca:	617b      	str	r3, [r7, #20]
}
 8008bcc:	bf00      	nop
 8008bce:	bf00      	nop
 8008bd0:	e7fd      	b.n	8008bce <vTaskPlaceOnEventListRestricted+0x2a>

		/* Place the event list item of the TCB in the appropriate event list.
		In this case it is assume that this is the only task that is going to
		be waiting on this event list, so the faster vListInsertEnd() function
		can be used in place of vListInsert. */
		vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8008bd2:	4b0a      	ldr	r3, [pc, #40]	@ (8008bfc <vTaskPlaceOnEventListRestricted+0x58>)
 8008bd4:	681b      	ldr	r3, [r3, #0]
 8008bd6:	3318      	adds	r3, #24
 8008bd8:	4619      	mov	r1, r3
 8008bda:	68f8      	ldr	r0, [r7, #12]
 8008bdc:	f7fe fda9 	bl	8007732 <vListInsertEnd>

		/* If the task should block indefinitely then set the block time to a
		value that will be recognised as an indefinite delay inside the
		prvAddCurrentTaskToDelayedList() function. */
		if( xWaitIndefinitely != pdFALSE )
 8008be0:	687b      	ldr	r3, [r7, #4]
 8008be2:	2b00      	cmp	r3, #0
 8008be4:	d002      	beq.n	8008bec <vTaskPlaceOnEventListRestricted+0x48>
		{
			xTicksToWait = portMAX_DELAY;
 8008be6:	f04f 33ff 	mov.w	r3, #4294967295
 8008bea:	60bb      	str	r3, [r7, #8]
		}

		traceTASK_DELAY_UNTIL( ( xTickCount + xTicksToWait ) );
		prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 8008bec:	6879      	ldr	r1, [r7, #4]
 8008bee:	68b8      	ldr	r0, [r7, #8]
 8008bf0:	f000 fa60 	bl	80090b4 <prvAddCurrentTaskToDelayedList>
	}
 8008bf4:	bf00      	nop
 8008bf6:	3718      	adds	r7, #24
 8008bf8:	46bd      	mov	sp, r7
 8008bfa:	bd80      	pop	{r7, pc}
 8008bfc:	2002a0f0 	.word	0x2002a0f0

08008c00 <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 8008c00:	b580      	push	{r7, lr}
 8008c02:	b086      	sub	sp, #24
 8008c04:	af00      	add	r7, sp, #0
 8008c06:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8008c08:	687b      	ldr	r3, [r7, #4]
 8008c0a:	68db      	ldr	r3, [r3, #12]
 8008c0c:	68db      	ldr	r3, [r3, #12]
 8008c0e:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 8008c10:	693b      	ldr	r3, [r7, #16]
 8008c12:	2b00      	cmp	r3, #0
 8008c14:	d10d      	bne.n	8008c32 <xTaskRemoveFromEventList+0x32>
	__asm volatile
 8008c16:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008c1a:	b672      	cpsid	i
 8008c1c:	f383 8811 	msr	BASEPRI, r3
 8008c20:	f3bf 8f6f 	isb	sy
 8008c24:	f3bf 8f4f 	dsb	sy
 8008c28:	b662      	cpsie	i
 8008c2a:	60fb      	str	r3, [r7, #12]
}
 8008c2c:	bf00      	nop
 8008c2e:	bf00      	nop
 8008c30:	e7fd      	b.n	8008c2e <xTaskRemoveFromEventList+0x2e>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 8008c32:	693b      	ldr	r3, [r7, #16]
 8008c34:	3318      	adds	r3, #24
 8008c36:	4618      	mov	r0, r3
 8008c38:	f7fe fdd8 	bl	80077ec <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8008c3c:	4b1d      	ldr	r3, [pc, #116]	@ (8008cb4 <xTaskRemoveFromEventList+0xb4>)
 8008c3e:	681b      	ldr	r3, [r3, #0]
 8008c40:	2b00      	cmp	r3, #0
 8008c42:	d11d      	bne.n	8008c80 <xTaskRemoveFromEventList+0x80>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 8008c44:	693b      	ldr	r3, [r7, #16]
 8008c46:	3304      	adds	r3, #4
 8008c48:	4618      	mov	r0, r3
 8008c4a:	f7fe fdcf 	bl	80077ec <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 8008c4e:	693b      	ldr	r3, [r7, #16]
 8008c50:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8008c52:	4b19      	ldr	r3, [pc, #100]	@ (8008cb8 <xTaskRemoveFromEventList+0xb8>)
 8008c54:	681b      	ldr	r3, [r3, #0]
 8008c56:	429a      	cmp	r2, r3
 8008c58:	d903      	bls.n	8008c62 <xTaskRemoveFromEventList+0x62>
 8008c5a:	693b      	ldr	r3, [r7, #16]
 8008c5c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8008c5e:	4a16      	ldr	r2, [pc, #88]	@ (8008cb8 <xTaskRemoveFromEventList+0xb8>)
 8008c60:	6013      	str	r3, [r2, #0]
 8008c62:	693b      	ldr	r3, [r7, #16]
 8008c64:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8008c66:	4613      	mov	r3, r2
 8008c68:	009b      	lsls	r3, r3, #2
 8008c6a:	4413      	add	r3, r2
 8008c6c:	009b      	lsls	r3, r3, #2
 8008c6e:	4a13      	ldr	r2, [pc, #76]	@ (8008cbc <xTaskRemoveFromEventList+0xbc>)
 8008c70:	441a      	add	r2, r3
 8008c72:	693b      	ldr	r3, [r7, #16]
 8008c74:	3304      	adds	r3, #4
 8008c76:	4619      	mov	r1, r3
 8008c78:	4610      	mov	r0, r2
 8008c7a:	f7fe fd5a 	bl	8007732 <vListInsertEnd>
 8008c7e:	e005      	b.n	8008c8c <xTaskRemoveFromEventList+0x8c>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 8008c80:	693b      	ldr	r3, [r7, #16]
 8008c82:	3318      	adds	r3, #24
 8008c84:	4619      	mov	r1, r3
 8008c86:	480e      	ldr	r0, [pc, #56]	@ (8008cc0 <xTaskRemoveFromEventList+0xc0>)
 8008c88:	f7fe fd53 	bl	8007732 <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 8008c8c:	693b      	ldr	r3, [r7, #16]
 8008c8e:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8008c90:	4b0c      	ldr	r3, [pc, #48]	@ (8008cc4 <xTaskRemoveFromEventList+0xc4>)
 8008c92:	681b      	ldr	r3, [r3, #0]
 8008c94:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8008c96:	429a      	cmp	r2, r3
 8008c98:	d905      	bls.n	8008ca6 <xTaskRemoveFromEventList+0xa6>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 8008c9a:	2301      	movs	r3, #1
 8008c9c:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 8008c9e:	4b0a      	ldr	r3, [pc, #40]	@ (8008cc8 <xTaskRemoveFromEventList+0xc8>)
 8008ca0:	2201      	movs	r2, #1
 8008ca2:	601a      	str	r2, [r3, #0]
 8008ca4:	e001      	b.n	8008caa <xTaskRemoveFromEventList+0xaa>
	}
	else
	{
		xReturn = pdFALSE;
 8008ca6:	2300      	movs	r3, #0
 8008ca8:	617b      	str	r3, [r7, #20]
	}

	return xReturn;
 8008caa:	697b      	ldr	r3, [r7, #20]
}
 8008cac:	4618      	mov	r0, r3
 8008cae:	3718      	adds	r7, #24
 8008cb0:	46bd      	mov	sp, r7
 8008cb2:	bd80      	pop	{r7, pc}
 8008cb4:	2002a5ec 	.word	0x2002a5ec
 8008cb8:	2002a5cc 	.word	0x2002a5cc
 8008cbc:	2002a0f4 	.word	0x2002a0f4
 8008cc0:	2002a584 	.word	0x2002a584
 8008cc4:	2002a0f0 	.word	0x2002a0f0
 8008cc8:	2002a5d8 	.word	0x2002a5d8

08008ccc <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 8008ccc:	b480      	push	{r7}
 8008cce:	b083      	sub	sp, #12
 8008cd0:	af00      	add	r7, sp, #0
 8008cd2:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 8008cd4:	4b06      	ldr	r3, [pc, #24]	@ (8008cf0 <vTaskInternalSetTimeOutState+0x24>)
 8008cd6:	681a      	ldr	r2, [r3, #0]
 8008cd8:	687b      	ldr	r3, [r7, #4]
 8008cda:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 8008cdc:	4b05      	ldr	r3, [pc, #20]	@ (8008cf4 <vTaskInternalSetTimeOutState+0x28>)
 8008cde:	681a      	ldr	r2, [r3, #0]
 8008ce0:	687b      	ldr	r3, [r7, #4]
 8008ce2:	605a      	str	r2, [r3, #4]
}
 8008ce4:	bf00      	nop
 8008ce6:	370c      	adds	r7, #12
 8008ce8:	46bd      	mov	sp, r7
 8008cea:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008cee:	4770      	bx	lr
 8008cf0:	2002a5dc 	.word	0x2002a5dc
 8008cf4:	2002a5c8 	.word	0x2002a5c8

08008cf8 <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 8008cf8:	b580      	push	{r7, lr}
 8008cfa:	b088      	sub	sp, #32
 8008cfc:	af00      	add	r7, sp, #0
 8008cfe:	6078      	str	r0, [r7, #4]
 8008d00:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 8008d02:	687b      	ldr	r3, [r7, #4]
 8008d04:	2b00      	cmp	r3, #0
 8008d06:	d10d      	bne.n	8008d24 <xTaskCheckForTimeOut+0x2c>
	__asm volatile
 8008d08:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008d0c:	b672      	cpsid	i
 8008d0e:	f383 8811 	msr	BASEPRI, r3
 8008d12:	f3bf 8f6f 	isb	sy
 8008d16:	f3bf 8f4f 	dsb	sy
 8008d1a:	b662      	cpsie	i
 8008d1c:	613b      	str	r3, [r7, #16]
}
 8008d1e:	bf00      	nop
 8008d20:	bf00      	nop
 8008d22:	e7fd      	b.n	8008d20 <xTaskCheckForTimeOut+0x28>
	configASSERT( pxTicksToWait );
 8008d24:	683b      	ldr	r3, [r7, #0]
 8008d26:	2b00      	cmp	r3, #0
 8008d28:	d10d      	bne.n	8008d46 <xTaskCheckForTimeOut+0x4e>
	__asm volatile
 8008d2a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008d2e:	b672      	cpsid	i
 8008d30:	f383 8811 	msr	BASEPRI, r3
 8008d34:	f3bf 8f6f 	isb	sy
 8008d38:	f3bf 8f4f 	dsb	sy
 8008d3c:	b662      	cpsie	i
 8008d3e:	60fb      	str	r3, [r7, #12]
}
 8008d40:	bf00      	nop
 8008d42:	bf00      	nop
 8008d44:	e7fd      	b.n	8008d42 <xTaskCheckForTimeOut+0x4a>

	taskENTER_CRITICAL();
 8008d46:	f000 fe81 	bl	8009a4c <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 8008d4a:	4b1d      	ldr	r3, [pc, #116]	@ (8008dc0 <xTaskCheckForTimeOut+0xc8>)
 8008d4c:	681b      	ldr	r3, [r3, #0]
 8008d4e:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 8008d50:	687b      	ldr	r3, [r7, #4]
 8008d52:	685b      	ldr	r3, [r3, #4]
 8008d54:	69ba      	ldr	r2, [r7, #24]
 8008d56:	1ad3      	subs	r3, r2, r3
 8008d58:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 8008d5a:	683b      	ldr	r3, [r7, #0]
 8008d5c:	681b      	ldr	r3, [r3, #0]
 8008d5e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008d62:	d102      	bne.n	8008d6a <xTaskCheckForTimeOut+0x72>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 8008d64:	2300      	movs	r3, #0
 8008d66:	61fb      	str	r3, [r7, #28]
 8008d68:	e023      	b.n	8008db2 <xTaskCheckForTimeOut+0xba>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 8008d6a:	687b      	ldr	r3, [r7, #4]
 8008d6c:	681a      	ldr	r2, [r3, #0]
 8008d6e:	4b15      	ldr	r3, [pc, #84]	@ (8008dc4 <xTaskCheckForTimeOut+0xcc>)
 8008d70:	681b      	ldr	r3, [r3, #0]
 8008d72:	429a      	cmp	r2, r3
 8008d74:	d007      	beq.n	8008d86 <xTaskCheckForTimeOut+0x8e>
 8008d76:	687b      	ldr	r3, [r7, #4]
 8008d78:	685b      	ldr	r3, [r3, #4]
 8008d7a:	69ba      	ldr	r2, [r7, #24]
 8008d7c:	429a      	cmp	r2, r3
 8008d7e:	d302      	bcc.n	8008d86 <xTaskCheckForTimeOut+0x8e>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 8008d80:	2301      	movs	r3, #1
 8008d82:	61fb      	str	r3, [r7, #28]
 8008d84:	e015      	b.n	8008db2 <xTaskCheckForTimeOut+0xba>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 8008d86:	683b      	ldr	r3, [r7, #0]
 8008d88:	681b      	ldr	r3, [r3, #0]
 8008d8a:	697a      	ldr	r2, [r7, #20]
 8008d8c:	429a      	cmp	r2, r3
 8008d8e:	d20b      	bcs.n	8008da8 <xTaskCheckForTimeOut+0xb0>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 8008d90:	683b      	ldr	r3, [r7, #0]
 8008d92:	681a      	ldr	r2, [r3, #0]
 8008d94:	697b      	ldr	r3, [r7, #20]
 8008d96:	1ad2      	subs	r2, r2, r3
 8008d98:	683b      	ldr	r3, [r7, #0]
 8008d9a:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 8008d9c:	6878      	ldr	r0, [r7, #4]
 8008d9e:	f7ff ff95 	bl	8008ccc <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 8008da2:	2300      	movs	r3, #0
 8008da4:	61fb      	str	r3, [r7, #28]
 8008da6:	e004      	b.n	8008db2 <xTaskCheckForTimeOut+0xba>
		}
		else
		{
			*pxTicksToWait = 0;
 8008da8:	683b      	ldr	r3, [r7, #0]
 8008daa:	2200      	movs	r2, #0
 8008dac:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 8008dae:	2301      	movs	r3, #1
 8008db0:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 8008db2:	f000 fe81 	bl	8009ab8 <vPortExitCritical>

	return xReturn;
 8008db6:	69fb      	ldr	r3, [r7, #28]
}
 8008db8:	4618      	mov	r0, r3
 8008dba:	3720      	adds	r7, #32
 8008dbc:	46bd      	mov	sp, r7
 8008dbe:	bd80      	pop	{r7, pc}
 8008dc0:	2002a5c8 	.word	0x2002a5c8
 8008dc4:	2002a5dc 	.word	0x2002a5dc

08008dc8 <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 8008dc8:	b480      	push	{r7}
 8008dca:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 8008dcc:	4b03      	ldr	r3, [pc, #12]	@ (8008ddc <vTaskMissedYield+0x14>)
 8008dce:	2201      	movs	r2, #1
 8008dd0:	601a      	str	r2, [r3, #0]
}
 8008dd2:	bf00      	nop
 8008dd4:	46bd      	mov	sp, r7
 8008dd6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008dda:	4770      	bx	lr
 8008ddc:	2002a5d8 	.word	0x2002a5d8

08008de0 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 8008de0:	b580      	push	{r7, lr}
 8008de2:	b082      	sub	sp, #8
 8008de4:	af00      	add	r7, sp, #0
 8008de6:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 8008de8:	f000 f852 	bl	8008e90 <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 8008dec:	4b06      	ldr	r3, [pc, #24]	@ (8008e08 <prvIdleTask+0x28>)
 8008dee:	681b      	ldr	r3, [r3, #0]
 8008df0:	2b01      	cmp	r3, #1
 8008df2:	d9f9      	bls.n	8008de8 <prvIdleTask+0x8>
			{
				taskYIELD();
 8008df4:	4b05      	ldr	r3, [pc, #20]	@ (8008e0c <prvIdleTask+0x2c>)
 8008df6:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8008dfa:	601a      	str	r2, [r3, #0]
 8008dfc:	f3bf 8f4f 	dsb	sy
 8008e00:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 8008e04:	e7f0      	b.n	8008de8 <prvIdleTask+0x8>
 8008e06:	bf00      	nop
 8008e08:	2002a0f4 	.word	0x2002a0f4
 8008e0c:	e000ed04 	.word	0xe000ed04

08008e10 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 8008e10:	b580      	push	{r7, lr}
 8008e12:	b082      	sub	sp, #8
 8008e14:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8008e16:	2300      	movs	r3, #0
 8008e18:	607b      	str	r3, [r7, #4]
 8008e1a:	e00c      	b.n	8008e36 <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 8008e1c:	687a      	ldr	r2, [r7, #4]
 8008e1e:	4613      	mov	r3, r2
 8008e20:	009b      	lsls	r3, r3, #2
 8008e22:	4413      	add	r3, r2
 8008e24:	009b      	lsls	r3, r3, #2
 8008e26:	4a12      	ldr	r2, [pc, #72]	@ (8008e70 <prvInitialiseTaskLists+0x60>)
 8008e28:	4413      	add	r3, r2
 8008e2a:	4618      	mov	r0, r3
 8008e2c:	f7fe fc54 	bl	80076d8 <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8008e30:	687b      	ldr	r3, [r7, #4]
 8008e32:	3301      	adds	r3, #1
 8008e34:	607b      	str	r3, [r7, #4]
 8008e36:	687b      	ldr	r3, [r7, #4]
 8008e38:	2b37      	cmp	r3, #55	@ 0x37
 8008e3a:	d9ef      	bls.n	8008e1c <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 8008e3c:	480d      	ldr	r0, [pc, #52]	@ (8008e74 <prvInitialiseTaskLists+0x64>)
 8008e3e:	f7fe fc4b 	bl	80076d8 <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 8008e42:	480d      	ldr	r0, [pc, #52]	@ (8008e78 <prvInitialiseTaskLists+0x68>)
 8008e44:	f7fe fc48 	bl	80076d8 <vListInitialise>
	vListInitialise( &xPendingReadyList );
 8008e48:	480c      	ldr	r0, [pc, #48]	@ (8008e7c <prvInitialiseTaskLists+0x6c>)
 8008e4a:	f7fe fc45 	bl	80076d8 <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 8008e4e:	480c      	ldr	r0, [pc, #48]	@ (8008e80 <prvInitialiseTaskLists+0x70>)
 8008e50:	f7fe fc42 	bl	80076d8 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 8008e54:	480b      	ldr	r0, [pc, #44]	@ (8008e84 <prvInitialiseTaskLists+0x74>)
 8008e56:	f7fe fc3f 	bl	80076d8 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 8008e5a:	4b0b      	ldr	r3, [pc, #44]	@ (8008e88 <prvInitialiseTaskLists+0x78>)
 8008e5c:	4a05      	ldr	r2, [pc, #20]	@ (8008e74 <prvInitialiseTaskLists+0x64>)
 8008e5e:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 8008e60:	4b0a      	ldr	r3, [pc, #40]	@ (8008e8c <prvInitialiseTaskLists+0x7c>)
 8008e62:	4a05      	ldr	r2, [pc, #20]	@ (8008e78 <prvInitialiseTaskLists+0x68>)
 8008e64:	601a      	str	r2, [r3, #0]
}
 8008e66:	bf00      	nop
 8008e68:	3708      	adds	r7, #8
 8008e6a:	46bd      	mov	sp, r7
 8008e6c:	bd80      	pop	{r7, pc}
 8008e6e:	bf00      	nop
 8008e70:	2002a0f4 	.word	0x2002a0f4
 8008e74:	2002a554 	.word	0x2002a554
 8008e78:	2002a568 	.word	0x2002a568
 8008e7c:	2002a584 	.word	0x2002a584
 8008e80:	2002a598 	.word	0x2002a598
 8008e84:	2002a5b0 	.word	0x2002a5b0
 8008e88:	2002a57c 	.word	0x2002a57c
 8008e8c:	2002a580 	.word	0x2002a580

08008e90 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 8008e90:	b580      	push	{r7, lr}
 8008e92:	b082      	sub	sp, #8
 8008e94:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8008e96:	e019      	b.n	8008ecc <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 8008e98:	f000 fdd8 	bl	8009a4c <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8008e9c:	4b10      	ldr	r3, [pc, #64]	@ (8008ee0 <prvCheckTasksWaitingTermination+0x50>)
 8008e9e:	68db      	ldr	r3, [r3, #12]
 8008ea0:	68db      	ldr	r3, [r3, #12]
 8008ea2:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8008ea4:	687b      	ldr	r3, [r7, #4]
 8008ea6:	3304      	adds	r3, #4
 8008ea8:	4618      	mov	r0, r3
 8008eaa:	f7fe fc9f 	bl	80077ec <uxListRemove>
				--uxCurrentNumberOfTasks;
 8008eae:	4b0d      	ldr	r3, [pc, #52]	@ (8008ee4 <prvCheckTasksWaitingTermination+0x54>)
 8008eb0:	681b      	ldr	r3, [r3, #0]
 8008eb2:	3b01      	subs	r3, #1
 8008eb4:	4a0b      	ldr	r2, [pc, #44]	@ (8008ee4 <prvCheckTasksWaitingTermination+0x54>)
 8008eb6:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 8008eb8:	4b0b      	ldr	r3, [pc, #44]	@ (8008ee8 <prvCheckTasksWaitingTermination+0x58>)
 8008eba:	681b      	ldr	r3, [r3, #0]
 8008ebc:	3b01      	subs	r3, #1
 8008ebe:	4a0a      	ldr	r2, [pc, #40]	@ (8008ee8 <prvCheckTasksWaitingTermination+0x58>)
 8008ec0:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 8008ec2:	f000 fdf9 	bl	8009ab8 <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 8008ec6:	6878      	ldr	r0, [r7, #4]
 8008ec8:	f000 f810 	bl	8008eec <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8008ecc:	4b06      	ldr	r3, [pc, #24]	@ (8008ee8 <prvCheckTasksWaitingTermination+0x58>)
 8008ece:	681b      	ldr	r3, [r3, #0]
 8008ed0:	2b00      	cmp	r3, #0
 8008ed2:	d1e1      	bne.n	8008e98 <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 8008ed4:	bf00      	nop
 8008ed6:	bf00      	nop
 8008ed8:	3708      	adds	r7, #8
 8008eda:	46bd      	mov	sp, r7
 8008edc:	bd80      	pop	{r7, pc}
 8008ede:	bf00      	nop
 8008ee0:	2002a598 	.word	0x2002a598
 8008ee4:	2002a5c4 	.word	0x2002a5c4
 8008ee8:	2002a5ac 	.word	0x2002a5ac

08008eec <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 8008eec:	b580      	push	{r7, lr}
 8008eee:	b084      	sub	sp, #16
 8008ef0:	af00      	add	r7, sp, #0
 8008ef2:	6078      	str	r0, [r7, #4]
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 8008ef4:	687b      	ldr	r3, [r7, #4]
 8008ef6:	f893 3059 	ldrb.w	r3, [r3, #89]	@ 0x59
 8008efa:	2b00      	cmp	r3, #0
 8008efc:	d108      	bne.n	8008f10 <prvDeleteTCB+0x24>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 8008efe:	687b      	ldr	r3, [r7, #4]
 8008f00:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8008f02:	4618      	mov	r0, r3
 8008f04:	f000 ff9e 	bl	8009e44 <vPortFree>
				vPortFree( pxTCB );
 8008f08:	6878      	ldr	r0, [r7, #4]
 8008f0a:	f000 ff9b 	bl	8009e44 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 8008f0e:	e01b      	b.n	8008f48 <prvDeleteTCB+0x5c>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 8008f10:	687b      	ldr	r3, [r7, #4]
 8008f12:	f893 3059 	ldrb.w	r3, [r3, #89]	@ 0x59
 8008f16:	2b01      	cmp	r3, #1
 8008f18:	d103      	bne.n	8008f22 <prvDeleteTCB+0x36>
				vPortFree( pxTCB );
 8008f1a:	6878      	ldr	r0, [r7, #4]
 8008f1c:	f000 ff92 	bl	8009e44 <vPortFree>
	}
 8008f20:	e012      	b.n	8008f48 <prvDeleteTCB+0x5c>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 8008f22:	687b      	ldr	r3, [r7, #4]
 8008f24:	f893 3059 	ldrb.w	r3, [r3, #89]	@ 0x59
 8008f28:	2b02      	cmp	r3, #2
 8008f2a:	d00d      	beq.n	8008f48 <prvDeleteTCB+0x5c>
	__asm volatile
 8008f2c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008f30:	b672      	cpsid	i
 8008f32:	f383 8811 	msr	BASEPRI, r3
 8008f36:	f3bf 8f6f 	isb	sy
 8008f3a:	f3bf 8f4f 	dsb	sy
 8008f3e:	b662      	cpsie	i
 8008f40:	60fb      	str	r3, [r7, #12]
}
 8008f42:	bf00      	nop
 8008f44:	bf00      	nop
 8008f46:	e7fd      	b.n	8008f44 <prvDeleteTCB+0x58>
	}
 8008f48:	bf00      	nop
 8008f4a:	3710      	adds	r7, #16
 8008f4c:	46bd      	mov	sp, r7
 8008f4e:	bd80      	pop	{r7, pc}

08008f50 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 8008f50:	b480      	push	{r7}
 8008f52:	b083      	sub	sp, #12
 8008f54:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8008f56:	4b0c      	ldr	r3, [pc, #48]	@ (8008f88 <prvResetNextTaskUnblockTime+0x38>)
 8008f58:	681b      	ldr	r3, [r3, #0]
 8008f5a:	681b      	ldr	r3, [r3, #0]
 8008f5c:	2b00      	cmp	r3, #0
 8008f5e:	d104      	bne.n	8008f6a <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 8008f60:	4b0a      	ldr	r3, [pc, #40]	@ (8008f8c <prvResetNextTaskUnblockTime+0x3c>)
 8008f62:	f04f 32ff 	mov.w	r2, #4294967295
 8008f66:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 8008f68:	e008      	b.n	8008f7c <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8008f6a:	4b07      	ldr	r3, [pc, #28]	@ (8008f88 <prvResetNextTaskUnblockTime+0x38>)
 8008f6c:	681b      	ldr	r3, [r3, #0]
 8008f6e:	68db      	ldr	r3, [r3, #12]
 8008f70:	68db      	ldr	r3, [r3, #12]
 8008f72:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 8008f74:	687b      	ldr	r3, [r7, #4]
 8008f76:	685b      	ldr	r3, [r3, #4]
 8008f78:	4a04      	ldr	r2, [pc, #16]	@ (8008f8c <prvResetNextTaskUnblockTime+0x3c>)
 8008f7a:	6013      	str	r3, [r2, #0]
}
 8008f7c:	bf00      	nop
 8008f7e:	370c      	adds	r7, #12
 8008f80:	46bd      	mov	sp, r7
 8008f82:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008f86:	4770      	bx	lr
 8008f88:	2002a57c 	.word	0x2002a57c
 8008f8c:	2002a5e4 	.word	0x2002a5e4

08008f90 <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 8008f90:	b480      	push	{r7}
 8008f92:	b083      	sub	sp, #12
 8008f94:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 8008f96:	4b0b      	ldr	r3, [pc, #44]	@ (8008fc4 <xTaskGetSchedulerState+0x34>)
 8008f98:	681b      	ldr	r3, [r3, #0]
 8008f9a:	2b00      	cmp	r3, #0
 8008f9c:	d102      	bne.n	8008fa4 <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 8008f9e:	2301      	movs	r3, #1
 8008fa0:	607b      	str	r3, [r7, #4]
 8008fa2:	e008      	b.n	8008fb6 <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8008fa4:	4b08      	ldr	r3, [pc, #32]	@ (8008fc8 <xTaskGetSchedulerState+0x38>)
 8008fa6:	681b      	ldr	r3, [r3, #0]
 8008fa8:	2b00      	cmp	r3, #0
 8008faa:	d102      	bne.n	8008fb2 <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 8008fac:	2302      	movs	r3, #2
 8008fae:	607b      	str	r3, [r7, #4]
 8008fb0:	e001      	b.n	8008fb6 <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 8008fb2:	2300      	movs	r3, #0
 8008fb4:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 8008fb6:	687b      	ldr	r3, [r7, #4]
	}
 8008fb8:	4618      	mov	r0, r3
 8008fba:	370c      	adds	r7, #12
 8008fbc:	46bd      	mov	sp, r7
 8008fbe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008fc2:	4770      	bx	lr
 8008fc4:	2002a5d0 	.word	0x2002a5d0
 8008fc8:	2002a5ec 	.word	0x2002a5ec

08008fcc <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 8008fcc:	b580      	push	{r7, lr}
 8008fce:	b086      	sub	sp, #24
 8008fd0:	af00      	add	r7, sp, #0
 8008fd2:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = pxMutexHolder;
 8008fd4:	687b      	ldr	r3, [r7, #4]
 8008fd6:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 8008fd8:	2300      	movs	r3, #0
 8008fda:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 8008fdc:	687b      	ldr	r3, [r7, #4]
 8008fde:	2b00      	cmp	r3, #0
 8008fe0:	d05c      	beq.n	800909c <xTaskPriorityDisinherit+0xd0>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 8008fe2:	4b31      	ldr	r3, [pc, #196]	@ (80090a8 <xTaskPriorityDisinherit+0xdc>)
 8008fe4:	681b      	ldr	r3, [r3, #0]
 8008fe6:	693a      	ldr	r2, [r7, #16]
 8008fe8:	429a      	cmp	r2, r3
 8008fea:	d00d      	beq.n	8009008 <xTaskPriorityDisinherit+0x3c>
	__asm volatile
 8008fec:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008ff0:	b672      	cpsid	i
 8008ff2:	f383 8811 	msr	BASEPRI, r3
 8008ff6:	f3bf 8f6f 	isb	sy
 8008ffa:	f3bf 8f4f 	dsb	sy
 8008ffe:	b662      	cpsie	i
 8009000:	60fb      	str	r3, [r7, #12]
}
 8009002:	bf00      	nop
 8009004:	bf00      	nop
 8009006:	e7fd      	b.n	8009004 <xTaskPriorityDisinherit+0x38>
			configASSERT( pxTCB->uxMutexesHeld );
 8009008:	693b      	ldr	r3, [r7, #16]
 800900a:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800900c:	2b00      	cmp	r3, #0
 800900e:	d10d      	bne.n	800902c <xTaskPriorityDisinherit+0x60>
	__asm volatile
 8009010:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8009014:	b672      	cpsid	i
 8009016:	f383 8811 	msr	BASEPRI, r3
 800901a:	f3bf 8f6f 	isb	sy
 800901e:	f3bf 8f4f 	dsb	sy
 8009022:	b662      	cpsie	i
 8009024:	60bb      	str	r3, [r7, #8]
}
 8009026:	bf00      	nop
 8009028:	bf00      	nop
 800902a:	e7fd      	b.n	8009028 <xTaskPriorityDisinherit+0x5c>
			( pxTCB->uxMutexesHeld )--;
 800902c:	693b      	ldr	r3, [r7, #16]
 800902e:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8009030:	1e5a      	subs	r2, r3, #1
 8009032:	693b      	ldr	r3, [r7, #16]
 8009034:	651a      	str	r2, [r3, #80]	@ 0x50

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 8009036:	693b      	ldr	r3, [r7, #16]
 8009038:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800903a:	693b      	ldr	r3, [r7, #16]
 800903c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800903e:	429a      	cmp	r2, r3
 8009040:	d02c      	beq.n	800909c <xTaskPriorityDisinherit+0xd0>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 8009042:	693b      	ldr	r3, [r7, #16]
 8009044:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8009046:	2b00      	cmp	r3, #0
 8009048:	d128      	bne.n	800909c <xTaskPriorityDisinherit+0xd0>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800904a:	693b      	ldr	r3, [r7, #16]
 800904c:	3304      	adds	r3, #4
 800904e:	4618      	mov	r0, r3
 8009050:	f7fe fbcc 	bl	80077ec <uxListRemove>
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 8009054:	693b      	ldr	r3, [r7, #16]
 8009056:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 8009058:	693b      	ldr	r3, [r7, #16]
 800905a:	62da      	str	r2, [r3, #44]	@ 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800905c:	693b      	ldr	r3, [r7, #16]
 800905e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8009060:	f1c3 0238 	rsb	r2, r3, #56	@ 0x38
 8009064:	693b      	ldr	r3, [r7, #16]
 8009066:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 8009068:	693b      	ldr	r3, [r7, #16]
 800906a:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800906c:	4b0f      	ldr	r3, [pc, #60]	@ (80090ac <xTaskPriorityDisinherit+0xe0>)
 800906e:	681b      	ldr	r3, [r3, #0]
 8009070:	429a      	cmp	r2, r3
 8009072:	d903      	bls.n	800907c <xTaskPriorityDisinherit+0xb0>
 8009074:	693b      	ldr	r3, [r7, #16]
 8009076:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8009078:	4a0c      	ldr	r2, [pc, #48]	@ (80090ac <xTaskPriorityDisinherit+0xe0>)
 800907a:	6013      	str	r3, [r2, #0]
 800907c:	693b      	ldr	r3, [r7, #16]
 800907e:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8009080:	4613      	mov	r3, r2
 8009082:	009b      	lsls	r3, r3, #2
 8009084:	4413      	add	r3, r2
 8009086:	009b      	lsls	r3, r3, #2
 8009088:	4a09      	ldr	r2, [pc, #36]	@ (80090b0 <xTaskPriorityDisinherit+0xe4>)
 800908a:	441a      	add	r2, r3
 800908c:	693b      	ldr	r3, [r7, #16]
 800908e:	3304      	adds	r3, #4
 8009090:	4619      	mov	r1, r3
 8009092:	4610      	mov	r0, r2
 8009094:	f7fe fb4d 	bl	8007732 <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 8009098:	2301      	movs	r3, #1
 800909a:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 800909c:	697b      	ldr	r3, [r7, #20]
	}
 800909e:	4618      	mov	r0, r3
 80090a0:	3718      	adds	r7, #24
 80090a2:	46bd      	mov	sp, r7
 80090a4:	bd80      	pop	{r7, pc}
 80090a6:	bf00      	nop
 80090a8:	2002a0f0 	.word	0x2002a0f0
 80090ac:	2002a5cc 	.word	0x2002a5cc
 80090b0:	2002a0f4 	.word	0x2002a0f4

080090b4 <prvAddCurrentTaskToDelayedList>:
	}
#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 80090b4:	b580      	push	{r7, lr}
 80090b6:	b084      	sub	sp, #16
 80090b8:	af00      	add	r7, sp, #0
 80090ba:	6078      	str	r0, [r7, #4]
 80090bc:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 80090be:	4b21      	ldr	r3, [pc, #132]	@ (8009144 <prvAddCurrentTaskToDelayedList+0x90>)
 80090c0:	681b      	ldr	r3, [r3, #0]
 80090c2:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 80090c4:	4b20      	ldr	r3, [pc, #128]	@ (8009148 <prvAddCurrentTaskToDelayedList+0x94>)
 80090c6:	681b      	ldr	r3, [r3, #0]
 80090c8:	3304      	adds	r3, #4
 80090ca:	4618      	mov	r0, r3
 80090cc:	f7fe fb8e 	bl	80077ec <uxListRemove>
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 80090d0:	687b      	ldr	r3, [r7, #4]
 80090d2:	f1b3 3fff 	cmp.w	r3, #4294967295
 80090d6:	d10a      	bne.n	80090ee <prvAddCurrentTaskToDelayedList+0x3a>
 80090d8:	683b      	ldr	r3, [r7, #0]
 80090da:	2b00      	cmp	r3, #0
 80090dc:	d007      	beq.n	80090ee <prvAddCurrentTaskToDelayedList+0x3a>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 80090de:	4b1a      	ldr	r3, [pc, #104]	@ (8009148 <prvAddCurrentTaskToDelayedList+0x94>)
 80090e0:	681b      	ldr	r3, [r3, #0]
 80090e2:	3304      	adds	r3, #4
 80090e4:	4619      	mov	r1, r3
 80090e6:	4819      	ldr	r0, [pc, #100]	@ (800914c <prvAddCurrentTaskToDelayedList+0x98>)
 80090e8:	f7fe fb23 	bl	8007732 <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 80090ec:	e026      	b.n	800913c <prvAddCurrentTaskToDelayedList+0x88>
			xTimeToWake = xConstTickCount + xTicksToWait;
 80090ee:	68fa      	ldr	r2, [r7, #12]
 80090f0:	687b      	ldr	r3, [r7, #4]
 80090f2:	4413      	add	r3, r2
 80090f4:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 80090f6:	4b14      	ldr	r3, [pc, #80]	@ (8009148 <prvAddCurrentTaskToDelayedList+0x94>)
 80090f8:	681b      	ldr	r3, [r3, #0]
 80090fa:	68ba      	ldr	r2, [r7, #8]
 80090fc:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 80090fe:	68ba      	ldr	r2, [r7, #8]
 8009100:	68fb      	ldr	r3, [r7, #12]
 8009102:	429a      	cmp	r2, r3
 8009104:	d209      	bcs.n	800911a <prvAddCurrentTaskToDelayedList+0x66>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8009106:	4b12      	ldr	r3, [pc, #72]	@ (8009150 <prvAddCurrentTaskToDelayedList+0x9c>)
 8009108:	681a      	ldr	r2, [r3, #0]
 800910a:	4b0f      	ldr	r3, [pc, #60]	@ (8009148 <prvAddCurrentTaskToDelayedList+0x94>)
 800910c:	681b      	ldr	r3, [r3, #0]
 800910e:	3304      	adds	r3, #4
 8009110:	4619      	mov	r1, r3
 8009112:	4610      	mov	r0, r2
 8009114:	f7fe fb31 	bl	800777a <vListInsert>
}
 8009118:	e010      	b.n	800913c <prvAddCurrentTaskToDelayedList+0x88>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800911a:	4b0e      	ldr	r3, [pc, #56]	@ (8009154 <prvAddCurrentTaskToDelayedList+0xa0>)
 800911c:	681a      	ldr	r2, [r3, #0]
 800911e:	4b0a      	ldr	r3, [pc, #40]	@ (8009148 <prvAddCurrentTaskToDelayedList+0x94>)
 8009120:	681b      	ldr	r3, [r3, #0]
 8009122:	3304      	adds	r3, #4
 8009124:	4619      	mov	r1, r3
 8009126:	4610      	mov	r0, r2
 8009128:	f7fe fb27 	bl	800777a <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 800912c:	4b0a      	ldr	r3, [pc, #40]	@ (8009158 <prvAddCurrentTaskToDelayedList+0xa4>)
 800912e:	681b      	ldr	r3, [r3, #0]
 8009130:	68ba      	ldr	r2, [r7, #8]
 8009132:	429a      	cmp	r2, r3
 8009134:	d202      	bcs.n	800913c <prvAddCurrentTaskToDelayedList+0x88>
					xNextTaskUnblockTime = xTimeToWake;
 8009136:	4a08      	ldr	r2, [pc, #32]	@ (8009158 <prvAddCurrentTaskToDelayedList+0xa4>)
 8009138:	68bb      	ldr	r3, [r7, #8]
 800913a:	6013      	str	r3, [r2, #0]
}
 800913c:	bf00      	nop
 800913e:	3710      	adds	r7, #16
 8009140:	46bd      	mov	sp, r7
 8009142:	bd80      	pop	{r7, pc}
 8009144:	2002a5c8 	.word	0x2002a5c8
 8009148:	2002a0f0 	.word	0x2002a0f0
 800914c:	2002a5b0 	.word	0x2002a5b0
 8009150:	2002a580 	.word	0x2002a580
 8009154:	2002a57c 	.word	0x2002a57c
 8009158:	2002a5e4 	.word	0x2002a5e4

0800915c <xTimerCreateTimerTask>:
									TimerCallbackFunction_t pxCallbackFunction,
									Timer_t *pxNewTimer ) PRIVILEGED_FUNCTION;
/*-----------------------------------------------------------*/

BaseType_t xTimerCreateTimerTask( void )
{
 800915c:	b580      	push	{r7, lr}
 800915e:	b08a      	sub	sp, #40	@ 0x28
 8009160:	af04      	add	r7, sp, #16
BaseType_t xReturn = pdFAIL;
 8009162:	2300      	movs	r3, #0
 8009164:	617b      	str	r3, [r7, #20]

	/* This function is called when the scheduler is started if
	configUSE_TIMERS is set to 1.  Check that the infrastructure used by the
	timer service task has been created/initialised.  If timers have already
	been created then the initialisation will already have been performed. */
	prvCheckForValidListAndQueue();
 8009166:	f000 fb21 	bl	80097ac <prvCheckForValidListAndQueue>

	if( xTimerQueue != NULL )
 800916a:	4b1e      	ldr	r3, [pc, #120]	@ (80091e4 <xTimerCreateTimerTask+0x88>)
 800916c:	681b      	ldr	r3, [r3, #0]
 800916e:	2b00      	cmp	r3, #0
 8009170:	d021      	beq.n	80091b6 <xTimerCreateTimerTask+0x5a>
	{
		#if( configSUPPORT_STATIC_ALLOCATION == 1 )
		{
			StaticTask_t *pxTimerTaskTCBBuffer = NULL;
 8009172:	2300      	movs	r3, #0
 8009174:	60fb      	str	r3, [r7, #12]
			StackType_t *pxTimerTaskStackBuffer = NULL;
 8009176:	2300      	movs	r3, #0
 8009178:	60bb      	str	r3, [r7, #8]
			uint32_t ulTimerTaskStackSize;

			vApplicationGetTimerTaskMemory( &pxTimerTaskTCBBuffer, &pxTimerTaskStackBuffer, &ulTimerTaskStackSize );
 800917a:	1d3a      	adds	r2, r7, #4
 800917c:	f107 0108 	add.w	r1, r7, #8
 8009180:	f107 030c 	add.w	r3, r7, #12
 8009184:	4618      	mov	r0, r3
 8009186:	f7fe fa8d 	bl	80076a4 <vApplicationGetTimerTaskMemory>
			xTimerTaskHandle = xTaskCreateStatic(	prvTimerTask,
 800918a:	6879      	ldr	r1, [r7, #4]
 800918c:	68bb      	ldr	r3, [r7, #8]
 800918e:	68fa      	ldr	r2, [r7, #12]
 8009190:	9202      	str	r2, [sp, #8]
 8009192:	9301      	str	r3, [sp, #4]
 8009194:	2302      	movs	r3, #2
 8009196:	9300      	str	r3, [sp, #0]
 8009198:	2300      	movs	r3, #0
 800919a:	460a      	mov	r2, r1
 800919c:	4912      	ldr	r1, [pc, #72]	@ (80091e8 <xTimerCreateTimerTask+0x8c>)
 800919e:	4813      	ldr	r0, [pc, #76]	@ (80091ec <xTimerCreateTimerTask+0x90>)
 80091a0:	f7ff f8ac 	bl	80082fc <xTaskCreateStatic>
 80091a4:	4603      	mov	r3, r0
 80091a6:	4a12      	ldr	r2, [pc, #72]	@ (80091f0 <xTimerCreateTimerTask+0x94>)
 80091a8:	6013      	str	r3, [r2, #0]
													NULL,
													( ( UBaseType_t ) configTIMER_TASK_PRIORITY ) | portPRIVILEGE_BIT,
													pxTimerTaskStackBuffer,
													pxTimerTaskTCBBuffer );

			if( xTimerTaskHandle != NULL )
 80091aa:	4b11      	ldr	r3, [pc, #68]	@ (80091f0 <xTimerCreateTimerTask+0x94>)
 80091ac:	681b      	ldr	r3, [r3, #0]
 80091ae:	2b00      	cmp	r3, #0
 80091b0:	d001      	beq.n	80091b6 <xTimerCreateTimerTask+0x5a>
			{
				xReturn = pdPASS;
 80091b2:	2301      	movs	r3, #1
 80091b4:	617b      	str	r3, [r7, #20]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	configASSERT( xReturn );
 80091b6:	697b      	ldr	r3, [r7, #20]
 80091b8:	2b00      	cmp	r3, #0
 80091ba:	d10d      	bne.n	80091d8 <xTimerCreateTimerTask+0x7c>
	__asm volatile
 80091bc:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80091c0:	b672      	cpsid	i
 80091c2:	f383 8811 	msr	BASEPRI, r3
 80091c6:	f3bf 8f6f 	isb	sy
 80091ca:	f3bf 8f4f 	dsb	sy
 80091ce:	b662      	cpsie	i
 80091d0:	613b      	str	r3, [r7, #16]
}
 80091d2:	bf00      	nop
 80091d4:	bf00      	nop
 80091d6:	e7fd      	b.n	80091d4 <xTimerCreateTimerTask+0x78>
	return xReturn;
 80091d8:	697b      	ldr	r3, [r7, #20]
}
 80091da:	4618      	mov	r0, r3
 80091dc:	3718      	adds	r7, #24
 80091de:	46bd      	mov	sp, r7
 80091e0:	bd80      	pop	{r7, pc}
 80091e2:	bf00      	nop
 80091e4:	2002a620 	.word	0x2002a620
 80091e8:	08010f20 	.word	0x08010f20
 80091ec:	08009335 	.word	0x08009335
 80091f0:	2002a624 	.word	0x2002a624

080091f4 <xTimerGenericCommand>:
	}
}
/*-----------------------------------------------------------*/

BaseType_t xTimerGenericCommand( TimerHandle_t xTimer, const BaseType_t xCommandID, const TickType_t xOptionalValue, BaseType_t * const pxHigherPriorityTaskWoken, const TickType_t xTicksToWait )
{
 80091f4:	b580      	push	{r7, lr}
 80091f6:	b08a      	sub	sp, #40	@ 0x28
 80091f8:	af00      	add	r7, sp, #0
 80091fa:	60f8      	str	r0, [r7, #12]
 80091fc:	60b9      	str	r1, [r7, #8]
 80091fe:	607a      	str	r2, [r7, #4]
 8009200:	603b      	str	r3, [r7, #0]
BaseType_t xReturn = pdFAIL;
 8009202:	2300      	movs	r3, #0
 8009204:	627b      	str	r3, [r7, #36]	@ 0x24
DaemonTaskMessage_t xMessage;

	configASSERT( xTimer );
 8009206:	68fb      	ldr	r3, [r7, #12]
 8009208:	2b00      	cmp	r3, #0
 800920a:	d10d      	bne.n	8009228 <xTimerGenericCommand+0x34>
	__asm volatile
 800920c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8009210:	b672      	cpsid	i
 8009212:	f383 8811 	msr	BASEPRI, r3
 8009216:	f3bf 8f6f 	isb	sy
 800921a:	f3bf 8f4f 	dsb	sy
 800921e:	b662      	cpsie	i
 8009220:	623b      	str	r3, [r7, #32]
}
 8009222:	bf00      	nop
 8009224:	bf00      	nop
 8009226:	e7fd      	b.n	8009224 <xTimerGenericCommand+0x30>

	/* Send a message to the timer service task to perform a particular action
	on a particular timer definition. */
	if( xTimerQueue != NULL )
 8009228:	4b19      	ldr	r3, [pc, #100]	@ (8009290 <xTimerGenericCommand+0x9c>)
 800922a:	681b      	ldr	r3, [r3, #0]
 800922c:	2b00      	cmp	r3, #0
 800922e:	d02a      	beq.n	8009286 <xTimerGenericCommand+0x92>
	{
		/* Send a command to the timer service task to start the xTimer timer. */
		xMessage.xMessageID = xCommandID;
 8009230:	68bb      	ldr	r3, [r7, #8]
 8009232:	613b      	str	r3, [r7, #16]
		xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
 8009234:	687b      	ldr	r3, [r7, #4]
 8009236:	617b      	str	r3, [r7, #20]
		xMessage.u.xTimerParameters.pxTimer = xTimer;
 8009238:	68fb      	ldr	r3, [r7, #12]
 800923a:	61bb      	str	r3, [r7, #24]

		if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
 800923c:	68bb      	ldr	r3, [r7, #8]
 800923e:	2b05      	cmp	r3, #5
 8009240:	dc18      	bgt.n	8009274 <xTimerGenericCommand+0x80>
		{
			if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
 8009242:	f7ff fea5 	bl	8008f90 <xTaskGetSchedulerState>
 8009246:	4603      	mov	r3, r0
 8009248:	2b02      	cmp	r3, #2
 800924a:	d109      	bne.n	8009260 <xTimerGenericCommand+0x6c>
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
 800924c:	4b10      	ldr	r3, [pc, #64]	@ (8009290 <xTimerGenericCommand+0x9c>)
 800924e:	6818      	ldr	r0, [r3, #0]
 8009250:	f107 0110 	add.w	r1, r7, #16
 8009254:	2300      	movs	r3, #0
 8009256:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8009258:	f7fe fc4c 	bl	8007af4 <xQueueGenericSend>
 800925c:	6278      	str	r0, [r7, #36]	@ 0x24
 800925e:	e012      	b.n	8009286 <xTimerGenericCommand+0x92>
			}
			else
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
 8009260:	4b0b      	ldr	r3, [pc, #44]	@ (8009290 <xTimerGenericCommand+0x9c>)
 8009262:	6818      	ldr	r0, [r3, #0]
 8009264:	f107 0110 	add.w	r1, r7, #16
 8009268:	2300      	movs	r3, #0
 800926a:	2200      	movs	r2, #0
 800926c:	f7fe fc42 	bl	8007af4 <xQueueGenericSend>
 8009270:	6278      	str	r0, [r7, #36]	@ 0x24
 8009272:	e008      	b.n	8009286 <xTimerGenericCommand+0x92>
			}
		}
		else
		{
			xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
 8009274:	4b06      	ldr	r3, [pc, #24]	@ (8009290 <xTimerGenericCommand+0x9c>)
 8009276:	6818      	ldr	r0, [r3, #0]
 8009278:	f107 0110 	add.w	r1, r7, #16
 800927c:	2300      	movs	r3, #0
 800927e:	683a      	ldr	r2, [r7, #0]
 8009280:	f7fe fd42 	bl	8007d08 <xQueueGenericSendFromISR>
 8009284:	6278      	str	r0, [r7, #36]	@ 0x24
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	return xReturn;
 8009286:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
}
 8009288:	4618      	mov	r0, r3
 800928a:	3728      	adds	r7, #40	@ 0x28
 800928c:	46bd      	mov	sp, r7
 800928e:	bd80      	pop	{r7, pc}
 8009290:	2002a620 	.word	0x2002a620

08009294 <prvProcessExpiredTimer>:
	return pxTimer->pcTimerName;
}
/*-----------------------------------------------------------*/

static void prvProcessExpiredTimer( const TickType_t xNextExpireTime, const TickType_t xTimeNow )
{
 8009294:	b580      	push	{r7, lr}
 8009296:	b088      	sub	sp, #32
 8009298:	af02      	add	r7, sp, #8
 800929a:	6078      	str	r0, [r7, #4]
 800929c:	6039      	str	r1, [r7, #0]
BaseType_t xResult;
Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800929e:	4b24      	ldr	r3, [pc, #144]	@ (8009330 <prvProcessExpiredTimer+0x9c>)
 80092a0:	681b      	ldr	r3, [r3, #0]
 80092a2:	68db      	ldr	r3, [r3, #12]
 80092a4:	68db      	ldr	r3, [r3, #12]
 80092a6:	617b      	str	r3, [r7, #20]

	/* Remove the timer from the list of active timers.  A check has already
	been performed to ensure the list is not empty. */
	( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 80092a8:	697b      	ldr	r3, [r7, #20]
 80092aa:	3304      	adds	r3, #4
 80092ac:	4618      	mov	r0, r3
 80092ae:	f7fe fa9d 	bl	80077ec <uxListRemove>
	traceTIMER_EXPIRED( pxTimer );

	/* If the timer is an auto reload timer then calculate the next
	expiry time and re-insert the timer in the list of active timers. */
	if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 80092b2:	697b      	ldr	r3, [r7, #20]
 80092b4:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 80092b8:	f003 0304 	and.w	r3, r3, #4
 80092bc:	2b00      	cmp	r3, #0
 80092be:	d025      	beq.n	800930c <prvProcessExpiredTimer+0x78>
	{
		/* The timer is inserted into a list using a time relative to anything
		other than the current time.  It will therefore be inserted into the
		correct list relative to the time this task thinks it is now. */
		if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) != pdFALSE )
 80092c0:	697b      	ldr	r3, [r7, #20]
 80092c2:	699a      	ldr	r2, [r3, #24]
 80092c4:	687b      	ldr	r3, [r7, #4]
 80092c6:	18d1      	adds	r1, r2, r3
 80092c8:	687b      	ldr	r3, [r7, #4]
 80092ca:	683a      	ldr	r2, [r7, #0]
 80092cc:	6978      	ldr	r0, [r7, #20]
 80092ce:	f000 f8d7 	bl	8009480 <prvInsertTimerInActiveList>
 80092d2:	4603      	mov	r3, r0
 80092d4:	2b00      	cmp	r3, #0
 80092d6:	d022      	beq.n	800931e <prvProcessExpiredTimer+0x8a>
		{
			/* The timer expired before it was added to the active timer
			list.  Reload it now.  */
			xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 80092d8:	2300      	movs	r3, #0
 80092da:	9300      	str	r3, [sp, #0]
 80092dc:	2300      	movs	r3, #0
 80092de:	687a      	ldr	r2, [r7, #4]
 80092e0:	2100      	movs	r1, #0
 80092e2:	6978      	ldr	r0, [r7, #20]
 80092e4:	f7ff ff86 	bl	80091f4 <xTimerGenericCommand>
 80092e8:	6138      	str	r0, [r7, #16]
			configASSERT( xResult );
 80092ea:	693b      	ldr	r3, [r7, #16]
 80092ec:	2b00      	cmp	r3, #0
 80092ee:	d116      	bne.n	800931e <prvProcessExpiredTimer+0x8a>
	__asm volatile
 80092f0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80092f4:	b672      	cpsid	i
 80092f6:	f383 8811 	msr	BASEPRI, r3
 80092fa:	f3bf 8f6f 	isb	sy
 80092fe:	f3bf 8f4f 	dsb	sy
 8009302:	b662      	cpsie	i
 8009304:	60fb      	str	r3, [r7, #12]
}
 8009306:	bf00      	nop
 8009308:	bf00      	nop
 800930a:	e7fd      	b.n	8009308 <prvProcessExpiredTimer+0x74>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 800930c:	697b      	ldr	r3, [r7, #20]
 800930e:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8009312:	f023 0301 	bic.w	r3, r3, #1
 8009316:	b2da      	uxtb	r2, r3
 8009318:	697b      	ldr	r3, [r7, #20]
 800931a:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
		mtCOVERAGE_TEST_MARKER();
	}

	/* Call the timer callback. */
	pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800931e:	697b      	ldr	r3, [r7, #20]
 8009320:	6a1b      	ldr	r3, [r3, #32]
 8009322:	6978      	ldr	r0, [r7, #20]
 8009324:	4798      	blx	r3
}
 8009326:	bf00      	nop
 8009328:	3718      	adds	r7, #24
 800932a:	46bd      	mov	sp, r7
 800932c:	bd80      	pop	{r7, pc}
 800932e:	bf00      	nop
 8009330:	2002a618 	.word	0x2002a618

08009334 <prvTimerTask>:
/*-----------------------------------------------------------*/

static portTASK_FUNCTION( prvTimerTask, pvParameters )
{
 8009334:	b580      	push	{r7, lr}
 8009336:	b084      	sub	sp, #16
 8009338:	af00      	add	r7, sp, #0
 800933a:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* Query the timers list to see if it contains any timers, and if so,
		obtain the time at which the next timer will expire. */
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 800933c:	f107 0308 	add.w	r3, r7, #8
 8009340:	4618      	mov	r0, r3
 8009342:	f000 f859 	bl	80093f8 <prvGetNextExpireTime>
 8009346:	60f8      	str	r0, [r7, #12]

		/* If a timer has expired, process it.  Otherwise, block this task
		until either a timer does expire, or a command is received. */
		prvProcessTimerOrBlockTask( xNextExpireTime, xListWasEmpty );
 8009348:	68bb      	ldr	r3, [r7, #8]
 800934a:	4619      	mov	r1, r3
 800934c:	68f8      	ldr	r0, [r7, #12]
 800934e:	f000 f805 	bl	800935c <prvProcessTimerOrBlockTask>

		/* Empty the command queue. */
		prvProcessReceivedCommands();
 8009352:	f000 f8d7 	bl	8009504 <prvProcessReceivedCommands>
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 8009356:	bf00      	nop
 8009358:	e7f0      	b.n	800933c <prvTimerTask+0x8>
	...

0800935c <prvProcessTimerOrBlockTask>:
	}
}
/*-----------------------------------------------------------*/

static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime, BaseType_t xListWasEmpty )
{
 800935c:	b580      	push	{r7, lr}
 800935e:	b084      	sub	sp, #16
 8009360:	af00      	add	r7, sp, #0
 8009362:	6078      	str	r0, [r7, #4]
 8009364:	6039      	str	r1, [r7, #0]
TickType_t xTimeNow;
BaseType_t xTimerListsWereSwitched;

	vTaskSuspendAll();
 8009366:	f7ff fa1b 	bl	80087a0 <vTaskSuspendAll>
		/* Obtain the time now to make an assessment as to whether the timer
		has expired or not.  If obtaining the time causes the lists to switch
		then don't process this timer as any timers that remained in the list
		when the lists were switched will have been processed within the
		prvSampleTimeNow() function. */
		xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 800936a:	f107 0308 	add.w	r3, r7, #8
 800936e:	4618      	mov	r0, r3
 8009370:	f000 f866 	bl	8009440 <prvSampleTimeNow>
 8009374:	60f8      	str	r0, [r7, #12]
		if( xTimerListsWereSwitched == pdFALSE )
 8009376:	68bb      	ldr	r3, [r7, #8]
 8009378:	2b00      	cmp	r3, #0
 800937a:	d130      	bne.n	80093de <prvProcessTimerOrBlockTask+0x82>
		{
			/* The tick count has not overflowed, has the timer expired? */
			if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 800937c:	683b      	ldr	r3, [r7, #0]
 800937e:	2b00      	cmp	r3, #0
 8009380:	d10a      	bne.n	8009398 <prvProcessTimerOrBlockTask+0x3c>
 8009382:	687a      	ldr	r2, [r7, #4]
 8009384:	68fb      	ldr	r3, [r7, #12]
 8009386:	429a      	cmp	r2, r3
 8009388:	d806      	bhi.n	8009398 <prvProcessTimerOrBlockTask+0x3c>
			{
				( void ) xTaskResumeAll();
 800938a:	f7ff fa17 	bl	80087bc <xTaskResumeAll>
				prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
 800938e:	68f9      	ldr	r1, [r7, #12]
 8009390:	6878      	ldr	r0, [r7, #4]
 8009392:	f7ff ff7f 	bl	8009294 <prvProcessExpiredTimer>
		else
		{
			( void ) xTaskResumeAll();
		}
	}
}
 8009396:	e024      	b.n	80093e2 <prvProcessTimerOrBlockTask+0x86>
				if( xListWasEmpty != pdFALSE )
 8009398:	683b      	ldr	r3, [r7, #0]
 800939a:	2b00      	cmp	r3, #0
 800939c:	d008      	beq.n	80093b0 <prvProcessTimerOrBlockTask+0x54>
					xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 800939e:	4b13      	ldr	r3, [pc, #76]	@ (80093ec <prvProcessTimerOrBlockTask+0x90>)
 80093a0:	681b      	ldr	r3, [r3, #0]
 80093a2:	681b      	ldr	r3, [r3, #0]
 80093a4:	2b00      	cmp	r3, #0
 80093a6:	d101      	bne.n	80093ac <prvProcessTimerOrBlockTask+0x50>
 80093a8:	2301      	movs	r3, #1
 80093aa:	e000      	b.n	80093ae <prvProcessTimerOrBlockTask+0x52>
 80093ac:	2300      	movs	r3, #0
 80093ae:	603b      	str	r3, [r7, #0]
				vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 80093b0:	4b0f      	ldr	r3, [pc, #60]	@ (80093f0 <prvProcessTimerOrBlockTask+0x94>)
 80093b2:	6818      	ldr	r0, [r3, #0]
 80093b4:	687a      	ldr	r2, [r7, #4]
 80093b6:	68fb      	ldr	r3, [r7, #12]
 80093b8:	1ad3      	subs	r3, r2, r3
 80093ba:	683a      	ldr	r2, [r7, #0]
 80093bc:	4619      	mov	r1, r3
 80093be:	f7fe ff69 	bl	8008294 <vQueueWaitForMessageRestricted>
				if( xTaskResumeAll() == pdFALSE )
 80093c2:	f7ff f9fb 	bl	80087bc <xTaskResumeAll>
 80093c6:	4603      	mov	r3, r0
 80093c8:	2b00      	cmp	r3, #0
 80093ca:	d10a      	bne.n	80093e2 <prvProcessTimerOrBlockTask+0x86>
					portYIELD_WITHIN_API();
 80093cc:	4b09      	ldr	r3, [pc, #36]	@ (80093f4 <prvProcessTimerOrBlockTask+0x98>)
 80093ce:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80093d2:	601a      	str	r2, [r3, #0]
 80093d4:	f3bf 8f4f 	dsb	sy
 80093d8:	f3bf 8f6f 	isb	sy
}
 80093dc:	e001      	b.n	80093e2 <prvProcessTimerOrBlockTask+0x86>
			( void ) xTaskResumeAll();
 80093de:	f7ff f9ed 	bl	80087bc <xTaskResumeAll>
}
 80093e2:	bf00      	nop
 80093e4:	3710      	adds	r7, #16
 80093e6:	46bd      	mov	sp, r7
 80093e8:	bd80      	pop	{r7, pc}
 80093ea:	bf00      	nop
 80093ec:	2002a61c 	.word	0x2002a61c
 80093f0:	2002a620 	.word	0x2002a620
 80093f4:	e000ed04 	.word	0xe000ed04

080093f8 <prvGetNextExpireTime>:
/*-----------------------------------------------------------*/

static TickType_t prvGetNextExpireTime( BaseType_t * const pxListWasEmpty )
{
 80093f8:	b480      	push	{r7}
 80093fa:	b085      	sub	sp, #20
 80093fc:	af00      	add	r7, sp, #0
 80093fe:	6078      	str	r0, [r7, #4]
	the timer with the nearest expiry time will expire.  If there are no
	active timers then just set the next expire time to 0.  That will cause
	this task to unblock when the tick count overflows, at which point the
	timer lists will be switched and the next expiry time can be
	re-assessed.  */
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 8009400:	4b0e      	ldr	r3, [pc, #56]	@ (800943c <prvGetNextExpireTime+0x44>)
 8009402:	681b      	ldr	r3, [r3, #0]
 8009404:	681b      	ldr	r3, [r3, #0]
 8009406:	2b00      	cmp	r3, #0
 8009408:	d101      	bne.n	800940e <prvGetNextExpireTime+0x16>
 800940a:	2201      	movs	r2, #1
 800940c:	e000      	b.n	8009410 <prvGetNextExpireTime+0x18>
 800940e:	2200      	movs	r2, #0
 8009410:	687b      	ldr	r3, [r7, #4]
 8009412:	601a      	str	r2, [r3, #0]
	if( *pxListWasEmpty == pdFALSE )
 8009414:	687b      	ldr	r3, [r7, #4]
 8009416:	681b      	ldr	r3, [r3, #0]
 8009418:	2b00      	cmp	r3, #0
 800941a:	d105      	bne.n	8009428 <prvGetNextExpireTime+0x30>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 800941c:	4b07      	ldr	r3, [pc, #28]	@ (800943c <prvGetNextExpireTime+0x44>)
 800941e:	681b      	ldr	r3, [r3, #0]
 8009420:	68db      	ldr	r3, [r3, #12]
 8009422:	681b      	ldr	r3, [r3, #0]
 8009424:	60fb      	str	r3, [r7, #12]
 8009426:	e001      	b.n	800942c <prvGetNextExpireTime+0x34>
	}
	else
	{
		/* Ensure the task unblocks when the tick count rolls over. */
		xNextExpireTime = ( TickType_t ) 0U;
 8009428:	2300      	movs	r3, #0
 800942a:	60fb      	str	r3, [r7, #12]
	}

	return xNextExpireTime;
 800942c:	68fb      	ldr	r3, [r7, #12]
}
 800942e:	4618      	mov	r0, r3
 8009430:	3714      	adds	r7, #20
 8009432:	46bd      	mov	sp, r7
 8009434:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009438:	4770      	bx	lr
 800943a:	bf00      	nop
 800943c:	2002a618 	.word	0x2002a618

08009440 <prvSampleTimeNow>:
/*-----------------------------------------------------------*/

static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
{
 8009440:	b580      	push	{r7, lr}
 8009442:	b084      	sub	sp, #16
 8009444:	af00      	add	r7, sp, #0
 8009446:	6078      	str	r0, [r7, #4]
TickType_t xTimeNow;
PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U; /*lint !e956 Variable is only accessible to one task. */

	xTimeNow = xTaskGetTickCount();
 8009448:	f7ff fa58 	bl	80088fc <xTaskGetTickCount>
 800944c:	60f8      	str	r0, [r7, #12]

	if( xTimeNow < xLastTime )
 800944e:	4b0b      	ldr	r3, [pc, #44]	@ (800947c <prvSampleTimeNow+0x3c>)
 8009450:	681b      	ldr	r3, [r3, #0]
 8009452:	68fa      	ldr	r2, [r7, #12]
 8009454:	429a      	cmp	r2, r3
 8009456:	d205      	bcs.n	8009464 <prvSampleTimeNow+0x24>
	{
		prvSwitchTimerLists();
 8009458:	f000 f940 	bl	80096dc <prvSwitchTimerLists>
		*pxTimerListsWereSwitched = pdTRUE;
 800945c:	687b      	ldr	r3, [r7, #4]
 800945e:	2201      	movs	r2, #1
 8009460:	601a      	str	r2, [r3, #0]
 8009462:	e002      	b.n	800946a <prvSampleTimeNow+0x2a>
	}
	else
	{
		*pxTimerListsWereSwitched = pdFALSE;
 8009464:	687b      	ldr	r3, [r7, #4]
 8009466:	2200      	movs	r2, #0
 8009468:	601a      	str	r2, [r3, #0]
	}

	xLastTime = xTimeNow;
 800946a:	4a04      	ldr	r2, [pc, #16]	@ (800947c <prvSampleTimeNow+0x3c>)
 800946c:	68fb      	ldr	r3, [r7, #12]
 800946e:	6013      	str	r3, [r2, #0]

	return xTimeNow;
 8009470:	68fb      	ldr	r3, [r7, #12]
}
 8009472:	4618      	mov	r0, r3
 8009474:	3710      	adds	r7, #16
 8009476:	46bd      	mov	sp, r7
 8009478:	bd80      	pop	{r7, pc}
 800947a:	bf00      	nop
 800947c:	2002a628 	.word	0x2002a628

08009480 <prvInsertTimerInActiveList>:
/*-----------------------------------------------------------*/

static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer, const TickType_t xNextExpiryTime, const TickType_t xTimeNow, const TickType_t xCommandTime )
{
 8009480:	b580      	push	{r7, lr}
 8009482:	b086      	sub	sp, #24
 8009484:	af00      	add	r7, sp, #0
 8009486:	60f8      	str	r0, [r7, #12]
 8009488:	60b9      	str	r1, [r7, #8]
 800948a:	607a      	str	r2, [r7, #4]
 800948c:	603b      	str	r3, [r7, #0]
BaseType_t xProcessTimerNow = pdFALSE;
 800948e:	2300      	movs	r3, #0
 8009490:	617b      	str	r3, [r7, #20]

	listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 8009492:	68fb      	ldr	r3, [r7, #12]
 8009494:	68ba      	ldr	r2, [r7, #8]
 8009496:	605a      	str	r2, [r3, #4]
	listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 8009498:	68fb      	ldr	r3, [r7, #12]
 800949a:	68fa      	ldr	r2, [r7, #12]
 800949c:	611a      	str	r2, [r3, #16]

	if( xNextExpiryTime <= xTimeNow )
 800949e:	68ba      	ldr	r2, [r7, #8]
 80094a0:	687b      	ldr	r3, [r7, #4]
 80094a2:	429a      	cmp	r2, r3
 80094a4:	d812      	bhi.n	80094cc <prvInsertTimerInActiveList+0x4c>
	{
		/* Has the expiry time elapsed between the command to start/reset a
		timer was issued, and the time the command was processed? */
		if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80094a6:	687a      	ldr	r2, [r7, #4]
 80094a8:	683b      	ldr	r3, [r7, #0]
 80094aa:	1ad2      	subs	r2, r2, r3
 80094ac:	68fb      	ldr	r3, [r7, #12]
 80094ae:	699b      	ldr	r3, [r3, #24]
 80094b0:	429a      	cmp	r2, r3
 80094b2:	d302      	bcc.n	80094ba <prvInsertTimerInActiveList+0x3a>
		{
			/* The time between a command being issued and the command being
			processed actually exceeds the timers period.  */
			xProcessTimerNow = pdTRUE;
 80094b4:	2301      	movs	r3, #1
 80094b6:	617b      	str	r3, [r7, #20]
 80094b8:	e01b      	b.n	80094f2 <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 80094ba:	4b10      	ldr	r3, [pc, #64]	@ (80094fc <prvInsertTimerInActiveList+0x7c>)
 80094bc:	681a      	ldr	r2, [r3, #0]
 80094be:	68fb      	ldr	r3, [r7, #12]
 80094c0:	3304      	adds	r3, #4
 80094c2:	4619      	mov	r1, r3
 80094c4:	4610      	mov	r0, r2
 80094c6:	f7fe f958 	bl	800777a <vListInsert>
 80094ca:	e012      	b.n	80094f2 <prvInsertTimerInActiveList+0x72>
		}
	}
	else
	{
		if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 80094cc:	687a      	ldr	r2, [r7, #4]
 80094ce:	683b      	ldr	r3, [r7, #0]
 80094d0:	429a      	cmp	r2, r3
 80094d2:	d206      	bcs.n	80094e2 <prvInsertTimerInActiveList+0x62>
 80094d4:	68ba      	ldr	r2, [r7, #8]
 80094d6:	683b      	ldr	r3, [r7, #0]
 80094d8:	429a      	cmp	r2, r3
 80094da:	d302      	bcc.n	80094e2 <prvInsertTimerInActiveList+0x62>
		{
			/* If, since the command was issued, the tick count has overflowed
			but the expiry time has not, then the timer must have already passed
			its expiry time and should be processed immediately. */
			xProcessTimerNow = pdTRUE;
 80094dc:	2301      	movs	r3, #1
 80094de:	617b      	str	r3, [r7, #20]
 80094e0:	e007      	b.n	80094f2 <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 80094e2:	4b07      	ldr	r3, [pc, #28]	@ (8009500 <prvInsertTimerInActiveList+0x80>)
 80094e4:	681a      	ldr	r2, [r3, #0]
 80094e6:	68fb      	ldr	r3, [r7, #12]
 80094e8:	3304      	adds	r3, #4
 80094ea:	4619      	mov	r1, r3
 80094ec:	4610      	mov	r0, r2
 80094ee:	f7fe f944 	bl	800777a <vListInsert>
		}
	}

	return xProcessTimerNow;
 80094f2:	697b      	ldr	r3, [r7, #20]
}
 80094f4:	4618      	mov	r0, r3
 80094f6:	3718      	adds	r7, #24
 80094f8:	46bd      	mov	sp, r7
 80094fa:	bd80      	pop	{r7, pc}
 80094fc:	2002a61c 	.word	0x2002a61c
 8009500:	2002a618 	.word	0x2002a618

08009504 <prvProcessReceivedCommands>:
/*-----------------------------------------------------------*/

static void	prvProcessReceivedCommands( void )
{
 8009504:	b580      	push	{r7, lr}
 8009506:	b08e      	sub	sp, #56	@ 0x38
 8009508:	af02      	add	r7, sp, #8
DaemonTaskMessage_t xMessage;
Timer_t *pxTimer;
BaseType_t xTimerListsWereSwitched, xResult;
TickType_t xTimeNow;

	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 800950a:	e0d4      	b.n	80096b6 <prvProcessReceivedCommands+0x1b2>
	{
		#if ( INCLUDE_xTimerPendFunctionCall == 1 )
		{
			/* Negative commands are pended function calls rather than timer
			commands. */
			if( xMessage.xMessageID < ( BaseType_t ) 0 )
 800950c:	687b      	ldr	r3, [r7, #4]
 800950e:	2b00      	cmp	r3, #0
 8009510:	da1b      	bge.n	800954a <prvProcessReceivedCommands+0x46>
			{
				const CallbackParameters_t * const pxCallback = &( xMessage.u.xCallbackParameters );
 8009512:	1d3b      	adds	r3, r7, #4
 8009514:	3304      	adds	r3, #4
 8009516:	62fb      	str	r3, [r7, #44]	@ 0x2c

				/* The timer uses the xCallbackParameters member to request a
				callback be executed.  Check the callback is not NULL. */
				configASSERT( pxCallback );
 8009518:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800951a:	2b00      	cmp	r3, #0
 800951c:	d10d      	bne.n	800953a <prvProcessReceivedCommands+0x36>
	__asm volatile
 800951e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8009522:	b672      	cpsid	i
 8009524:	f383 8811 	msr	BASEPRI, r3
 8009528:	f3bf 8f6f 	isb	sy
 800952c:	f3bf 8f4f 	dsb	sy
 8009530:	b662      	cpsie	i
 8009532:	61fb      	str	r3, [r7, #28]
}
 8009534:	bf00      	nop
 8009536:	bf00      	nop
 8009538:	e7fd      	b.n	8009536 <prvProcessReceivedCommands+0x32>

				/* Call the function. */
				pxCallback->pxCallbackFunction( pxCallback->pvParameter1, pxCallback->ulParameter2 );
 800953a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800953c:	681b      	ldr	r3, [r3, #0]
 800953e:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8009540:	6850      	ldr	r0, [r2, #4]
 8009542:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8009544:	6892      	ldr	r2, [r2, #8]
 8009546:	4611      	mov	r1, r2
 8009548:	4798      	blx	r3
		}
		#endif /* INCLUDE_xTimerPendFunctionCall */

		/* Commands that are positive are timer commands rather than pended
		function calls. */
		if( xMessage.xMessageID >= ( BaseType_t ) 0 )
 800954a:	687b      	ldr	r3, [r7, #4]
 800954c:	2b00      	cmp	r3, #0
 800954e:	f2c0 80b2 	blt.w	80096b6 <prvProcessReceivedCommands+0x1b2>
		{
			/* The messages uses the xTimerParameters member to work on a
			software timer. */
			pxTimer = xMessage.u.xTimerParameters.pxTimer;
 8009552:	68fb      	ldr	r3, [r7, #12]
 8009554:	62bb      	str	r3, [r7, #40]	@ 0x28

			if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
 8009556:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009558:	695b      	ldr	r3, [r3, #20]
 800955a:	2b00      	cmp	r3, #0
 800955c:	d004      	beq.n	8009568 <prvProcessReceivedCommands+0x64>
			{
				/* The timer is in a list, remove it. */
				( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 800955e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009560:	3304      	adds	r3, #4
 8009562:	4618      	mov	r0, r3
 8009564:	f7fe f942 	bl	80077ec <uxListRemove>
			it must be present in the function call.  prvSampleTimeNow() must be
			called after the message is received from xTimerQueue so there is no
			possibility of a higher priority task adding a message to the message
			queue with a time that is ahead of the timer daemon task (because it
			pre-empted the timer daemon task after the xTimeNow value was set). */
			xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 8009568:	463b      	mov	r3, r7
 800956a:	4618      	mov	r0, r3
 800956c:	f7ff ff68 	bl	8009440 <prvSampleTimeNow>
 8009570:	6278      	str	r0, [r7, #36]	@ 0x24

			switch( xMessage.xMessageID )
 8009572:	687b      	ldr	r3, [r7, #4]
 8009574:	2b09      	cmp	r3, #9
 8009576:	f200 809b 	bhi.w	80096b0 <prvProcessReceivedCommands+0x1ac>
 800957a:	a201      	add	r2, pc, #4	@ (adr r2, 8009580 <prvProcessReceivedCommands+0x7c>)
 800957c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009580:	080095a9 	.word	0x080095a9
 8009584:	080095a9 	.word	0x080095a9
 8009588:	080095a9 	.word	0x080095a9
 800958c:	08009623 	.word	0x08009623
 8009590:	08009637 	.word	0x08009637
 8009594:	08009687 	.word	0x08009687
 8009598:	080095a9 	.word	0x080095a9
 800959c:	080095a9 	.word	0x080095a9
 80095a0:	08009623 	.word	0x08009623
 80095a4:	08009637 	.word	0x08009637
				case tmrCOMMAND_START_FROM_ISR :
				case tmrCOMMAND_RESET :
				case tmrCOMMAND_RESET_FROM_ISR :
				case tmrCOMMAND_START_DONT_TRACE :
					/* Start or restart a timer. */
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 80095a8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80095aa:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 80095ae:	f043 0301 	orr.w	r3, r3, #1
 80095b2:	b2da      	uxtb	r2, r3
 80095b4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80095b6:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
					if( prvInsertTimerInActiveList( pxTimer,  xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 80095ba:	68ba      	ldr	r2, [r7, #8]
 80095bc:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80095be:	699b      	ldr	r3, [r3, #24]
 80095c0:	18d1      	adds	r1, r2, r3
 80095c2:	68bb      	ldr	r3, [r7, #8]
 80095c4:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80095c6:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 80095c8:	f7ff ff5a 	bl	8009480 <prvInsertTimerInActiveList>
 80095cc:	4603      	mov	r3, r0
 80095ce:	2b00      	cmp	r3, #0
 80095d0:	d070      	beq.n	80096b4 <prvProcessReceivedCommands+0x1b0>
					{
						/* The timer expired before it was added to the active
						timer list.  Process it now. */
						pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 80095d2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80095d4:	6a1b      	ldr	r3, [r3, #32]
 80095d6:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 80095d8:	4798      	blx	r3
						traceTIMER_EXPIRED( pxTimer );

						if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 80095da:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80095dc:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 80095e0:	f003 0304 	and.w	r3, r3, #4
 80095e4:	2b00      	cmp	r3, #0
 80095e6:	d065      	beq.n	80096b4 <prvProcessReceivedCommands+0x1b0>
						{
							xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
 80095e8:	68ba      	ldr	r2, [r7, #8]
 80095ea:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80095ec:	699b      	ldr	r3, [r3, #24]
 80095ee:	441a      	add	r2, r3
 80095f0:	2300      	movs	r3, #0
 80095f2:	9300      	str	r3, [sp, #0]
 80095f4:	2300      	movs	r3, #0
 80095f6:	2100      	movs	r1, #0
 80095f8:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 80095fa:	f7ff fdfb 	bl	80091f4 <xTimerGenericCommand>
 80095fe:	6238      	str	r0, [r7, #32]
							configASSERT( xResult );
 8009600:	6a3b      	ldr	r3, [r7, #32]
 8009602:	2b00      	cmp	r3, #0
 8009604:	d156      	bne.n	80096b4 <prvProcessReceivedCommands+0x1b0>
	__asm volatile
 8009606:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800960a:	b672      	cpsid	i
 800960c:	f383 8811 	msr	BASEPRI, r3
 8009610:	f3bf 8f6f 	isb	sy
 8009614:	f3bf 8f4f 	dsb	sy
 8009618:	b662      	cpsie	i
 800961a:	61bb      	str	r3, [r7, #24]
}
 800961c:	bf00      	nop
 800961e:	bf00      	nop
 8009620:	e7fd      	b.n	800961e <prvProcessReceivedCommands+0x11a>
					break;

				case tmrCOMMAND_STOP :
				case tmrCOMMAND_STOP_FROM_ISR :
					/* The timer has already been removed from the active list. */
					pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8009622:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009624:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8009628:	f023 0301 	bic.w	r3, r3, #1
 800962c:	b2da      	uxtb	r2, r3
 800962e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009630:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
					break;
 8009634:	e03f      	b.n	80096b6 <prvProcessReceivedCommands+0x1b2>

				case tmrCOMMAND_CHANGE_PERIOD :
				case tmrCOMMAND_CHANGE_PERIOD_FROM_ISR :
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 8009636:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009638:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 800963c:	f043 0301 	orr.w	r3, r3, #1
 8009640:	b2da      	uxtb	r2, r3
 8009642:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009644:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
					pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 8009648:	68ba      	ldr	r2, [r7, #8]
 800964a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800964c:	619a      	str	r2, [r3, #24]
					configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 800964e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009650:	699b      	ldr	r3, [r3, #24]
 8009652:	2b00      	cmp	r3, #0
 8009654:	d10d      	bne.n	8009672 <prvProcessReceivedCommands+0x16e>
	__asm volatile
 8009656:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800965a:	b672      	cpsid	i
 800965c:	f383 8811 	msr	BASEPRI, r3
 8009660:	f3bf 8f6f 	isb	sy
 8009664:	f3bf 8f4f 	dsb	sy
 8009668:	b662      	cpsie	i
 800966a:	617b      	str	r3, [r7, #20]
}
 800966c:	bf00      	nop
 800966e:	bf00      	nop
 8009670:	e7fd      	b.n	800966e <prvProcessReceivedCommands+0x16a>
					be longer or shorter than the old one.  The command time is
					therefore set to the current time, and as the period cannot
					be zero the next expiry time can only be in the future,
					meaning (unlike for the xTimerStart() case above) there is
					no fail case that needs to be handled here. */
					( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
 8009672:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009674:	699a      	ldr	r2, [r3, #24]
 8009676:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009678:	18d1      	adds	r1, r2, r3
 800967a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800967c:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800967e:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8009680:	f7ff fefe 	bl	8009480 <prvInsertTimerInActiveList>
					break;
 8009684:	e017      	b.n	80096b6 <prvProcessReceivedCommands+0x1b2>
					#if ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
					{
						/* The timer has already been removed from the active list,
						just free up the memory if the memory was dynamically
						allocated. */
						if( ( pxTimer->ucStatus & tmrSTATUS_IS_STATICALLY_ALLOCATED ) == ( uint8_t ) 0 )
 8009686:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009688:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 800968c:	f003 0302 	and.w	r3, r3, #2
 8009690:	2b00      	cmp	r3, #0
 8009692:	d103      	bne.n	800969c <prvProcessReceivedCommands+0x198>
						{
							vPortFree( pxTimer );
 8009694:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8009696:	f000 fbd5 	bl	8009e44 <vPortFree>
						no need to free the memory - just mark the timer as
						"not active". */
						pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
					}
					#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
					break;
 800969a:	e00c      	b.n	80096b6 <prvProcessReceivedCommands+0x1b2>
							pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 800969c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800969e:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 80096a2:	f023 0301 	bic.w	r3, r3, #1
 80096a6:	b2da      	uxtb	r2, r3
 80096a8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80096aa:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
					break;
 80096ae:	e002      	b.n	80096b6 <prvProcessReceivedCommands+0x1b2>

				default	:
					/* Don't expect to get here. */
					break;
 80096b0:	bf00      	nop
 80096b2:	e000      	b.n	80096b6 <prvProcessReceivedCommands+0x1b2>
					break;
 80096b4:	bf00      	nop
	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 80096b6:	4b08      	ldr	r3, [pc, #32]	@ (80096d8 <prvProcessReceivedCommands+0x1d4>)
 80096b8:	681b      	ldr	r3, [r3, #0]
 80096ba:	1d39      	adds	r1, r7, #4
 80096bc:	2200      	movs	r2, #0
 80096be:	4618      	mov	r0, r3
 80096c0:	f7fe fbc6 	bl	8007e50 <xQueueReceive>
 80096c4:	4603      	mov	r3, r0
 80096c6:	2b00      	cmp	r3, #0
 80096c8:	f47f af20 	bne.w	800950c <prvProcessReceivedCommands+0x8>
			}
		}
	}
}
 80096cc:	bf00      	nop
 80096ce:	bf00      	nop
 80096d0:	3730      	adds	r7, #48	@ 0x30
 80096d2:	46bd      	mov	sp, r7
 80096d4:	bd80      	pop	{r7, pc}
 80096d6:	bf00      	nop
 80096d8:	2002a620 	.word	0x2002a620

080096dc <prvSwitchTimerLists>:
/*-----------------------------------------------------------*/

static void prvSwitchTimerLists( void )
{
 80096dc:	b580      	push	{r7, lr}
 80096de:	b088      	sub	sp, #32
 80096e0:	af02      	add	r7, sp, #8

	/* The tick count has overflowed.  The timer lists must be switched.
	If there are any timers still referenced from the current timer list
	then they must have expired and should be processed before the lists
	are switched. */
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 80096e2:	e04b      	b.n	800977c <prvSwitchTimerLists+0xa0>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 80096e4:	4b2f      	ldr	r3, [pc, #188]	@ (80097a4 <prvSwitchTimerLists+0xc8>)
 80096e6:	681b      	ldr	r3, [r3, #0]
 80096e8:	68db      	ldr	r3, [r3, #12]
 80096ea:	681b      	ldr	r3, [r3, #0]
 80096ec:	613b      	str	r3, [r7, #16]

		/* Remove the timer from the list. */
		pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80096ee:	4b2d      	ldr	r3, [pc, #180]	@ (80097a4 <prvSwitchTimerLists+0xc8>)
 80096f0:	681b      	ldr	r3, [r3, #0]
 80096f2:	68db      	ldr	r3, [r3, #12]
 80096f4:	68db      	ldr	r3, [r3, #12]
 80096f6:	60fb      	str	r3, [r7, #12]
		( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 80096f8:	68fb      	ldr	r3, [r7, #12]
 80096fa:	3304      	adds	r3, #4
 80096fc:	4618      	mov	r0, r3
 80096fe:	f7fe f875 	bl	80077ec <uxListRemove>
		traceTIMER_EXPIRED( pxTimer );

		/* Execute its callback, then send a command to restart the timer if
		it is an auto-reload timer.  It cannot be restarted here as the lists
		have not yet been switched. */
		pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8009702:	68fb      	ldr	r3, [r7, #12]
 8009704:	6a1b      	ldr	r3, [r3, #32]
 8009706:	68f8      	ldr	r0, [r7, #12]
 8009708:	4798      	blx	r3

		if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 800970a:	68fb      	ldr	r3, [r7, #12]
 800970c:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8009710:	f003 0304 	and.w	r3, r3, #4
 8009714:	2b00      	cmp	r3, #0
 8009716:	d031      	beq.n	800977c <prvSwitchTimerLists+0xa0>
			the timer going into the same timer list then it has already expired
			and the timer should be re-inserted into the current list so it is
			processed again within this loop.  Otherwise a command should be sent
			to restart the timer to ensure it is only inserted into a list after
			the lists have been swapped. */
			xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
 8009718:	68fb      	ldr	r3, [r7, #12]
 800971a:	699b      	ldr	r3, [r3, #24]
 800971c:	693a      	ldr	r2, [r7, #16]
 800971e:	4413      	add	r3, r2
 8009720:	60bb      	str	r3, [r7, #8]
			if( xReloadTime > xNextExpireTime )
 8009722:	68ba      	ldr	r2, [r7, #8]
 8009724:	693b      	ldr	r3, [r7, #16]
 8009726:	429a      	cmp	r2, r3
 8009728:	d90e      	bls.n	8009748 <prvSwitchTimerLists+0x6c>
			{
				listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
 800972a:	68fb      	ldr	r3, [r7, #12]
 800972c:	68ba      	ldr	r2, [r7, #8]
 800972e:	605a      	str	r2, [r3, #4]
				listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 8009730:	68fb      	ldr	r3, [r7, #12]
 8009732:	68fa      	ldr	r2, [r7, #12]
 8009734:	611a      	str	r2, [r3, #16]
				vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 8009736:	4b1b      	ldr	r3, [pc, #108]	@ (80097a4 <prvSwitchTimerLists+0xc8>)
 8009738:	681a      	ldr	r2, [r3, #0]
 800973a:	68fb      	ldr	r3, [r7, #12]
 800973c:	3304      	adds	r3, #4
 800973e:	4619      	mov	r1, r3
 8009740:	4610      	mov	r0, r2
 8009742:	f7fe f81a 	bl	800777a <vListInsert>
 8009746:	e019      	b.n	800977c <prvSwitchTimerLists+0xa0>
			}
			else
			{
				xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 8009748:	2300      	movs	r3, #0
 800974a:	9300      	str	r3, [sp, #0]
 800974c:	2300      	movs	r3, #0
 800974e:	693a      	ldr	r2, [r7, #16]
 8009750:	2100      	movs	r1, #0
 8009752:	68f8      	ldr	r0, [r7, #12]
 8009754:	f7ff fd4e 	bl	80091f4 <xTimerGenericCommand>
 8009758:	6078      	str	r0, [r7, #4]
				configASSERT( xResult );
 800975a:	687b      	ldr	r3, [r7, #4]
 800975c:	2b00      	cmp	r3, #0
 800975e:	d10d      	bne.n	800977c <prvSwitchTimerLists+0xa0>
	__asm volatile
 8009760:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8009764:	b672      	cpsid	i
 8009766:	f383 8811 	msr	BASEPRI, r3
 800976a:	f3bf 8f6f 	isb	sy
 800976e:	f3bf 8f4f 	dsb	sy
 8009772:	b662      	cpsie	i
 8009774:	603b      	str	r3, [r7, #0]
}
 8009776:	bf00      	nop
 8009778:	bf00      	nop
 800977a:	e7fd      	b.n	8009778 <prvSwitchTimerLists+0x9c>
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 800977c:	4b09      	ldr	r3, [pc, #36]	@ (80097a4 <prvSwitchTimerLists+0xc8>)
 800977e:	681b      	ldr	r3, [r3, #0]
 8009780:	681b      	ldr	r3, [r3, #0]
 8009782:	2b00      	cmp	r3, #0
 8009784:	d1ae      	bne.n	80096e4 <prvSwitchTimerLists+0x8>
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxTemp = pxCurrentTimerList;
 8009786:	4b07      	ldr	r3, [pc, #28]	@ (80097a4 <prvSwitchTimerLists+0xc8>)
 8009788:	681b      	ldr	r3, [r3, #0]
 800978a:	617b      	str	r3, [r7, #20]
	pxCurrentTimerList = pxOverflowTimerList;
 800978c:	4b06      	ldr	r3, [pc, #24]	@ (80097a8 <prvSwitchTimerLists+0xcc>)
 800978e:	681b      	ldr	r3, [r3, #0]
 8009790:	4a04      	ldr	r2, [pc, #16]	@ (80097a4 <prvSwitchTimerLists+0xc8>)
 8009792:	6013      	str	r3, [r2, #0]
	pxOverflowTimerList = pxTemp;
 8009794:	4a04      	ldr	r2, [pc, #16]	@ (80097a8 <prvSwitchTimerLists+0xcc>)
 8009796:	697b      	ldr	r3, [r7, #20]
 8009798:	6013      	str	r3, [r2, #0]
}
 800979a:	bf00      	nop
 800979c:	3718      	adds	r7, #24
 800979e:	46bd      	mov	sp, r7
 80097a0:	bd80      	pop	{r7, pc}
 80097a2:	bf00      	nop
 80097a4:	2002a618 	.word	0x2002a618
 80097a8:	2002a61c 	.word	0x2002a61c

080097ac <prvCheckForValidListAndQueue>:
/*-----------------------------------------------------------*/

static void prvCheckForValidListAndQueue( void )
{
 80097ac:	b580      	push	{r7, lr}
 80097ae:	b082      	sub	sp, #8
 80097b0:	af02      	add	r7, sp, #8
	/* Check that the list from which active timers are referenced, and the
	queue used to communicate with the timer service, have been
	initialised. */
	taskENTER_CRITICAL();
 80097b2:	f000 f94b 	bl	8009a4c <vPortEnterCritical>
	{
		if( xTimerQueue == NULL )
 80097b6:	4b15      	ldr	r3, [pc, #84]	@ (800980c <prvCheckForValidListAndQueue+0x60>)
 80097b8:	681b      	ldr	r3, [r3, #0]
 80097ba:	2b00      	cmp	r3, #0
 80097bc:	d120      	bne.n	8009800 <prvCheckForValidListAndQueue+0x54>
		{
			vListInitialise( &xActiveTimerList1 );
 80097be:	4814      	ldr	r0, [pc, #80]	@ (8009810 <prvCheckForValidListAndQueue+0x64>)
 80097c0:	f7fd ff8a 	bl	80076d8 <vListInitialise>
			vListInitialise( &xActiveTimerList2 );
 80097c4:	4813      	ldr	r0, [pc, #76]	@ (8009814 <prvCheckForValidListAndQueue+0x68>)
 80097c6:	f7fd ff87 	bl	80076d8 <vListInitialise>
			pxCurrentTimerList = &xActiveTimerList1;
 80097ca:	4b13      	ldr	r3, [pc, #76]	@ (8009818 <prvCheckForValidListAndQueue+0x6c>)
 80097cc:	4a10      	ldr	r2, [pc, #64]	@ (8009810 <prvCheckForValidListAndQueue+0x64>)
 80097ce:	601a      	str	r2, [r3, #0]
			pxOverflowTimerList = &xActiveTimerList2;
 80097d0:	4b12      	ldr	r3, [pc, #72]	@ (800981c <prvCheckForValidListAndQueue+0x70>)
 80097d2:	4a10      	ldr	r2, [pc, #64]	@ (8009814 <prvCheckForValidListAndQueue+0x68>)
 80097d4:	601a      	str	r2, [r3, #0]
				/* The timer queue is allocated statically in case
				configSUPPORT_DYNAMIC_ALLOCATION is 0. */
				static StaticQueue_t xStaticTimerQueue; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */
				static uint8_t ucStaticTimerQueueStorage[ ( size_t ) configTIMER_QUEUE_LENGTH * sizeof( DaemonTaskMessage_t ) ]; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */

				xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
 80097d6:	2300      	movs	r3, #0
 80097d8:	9300      	str	r3, [sp, #0]
 80097da:	4b11      	ldr	r3, [pc, #68]	@ (8009820 <prvCheckForValidListAndQueue+0x74>)
 80097dc:	4a11      	ldr	r2, [pc, #68]	@ (8009824 <prvCheckForValidListAndQueue+0x78>)
 80097de:	2110      	movs	r1, #16
 80097e0:	200a      	movs	r0, #10
 80097e2:	f7fe f899 	bl	8007918 <xQueueGenericCreateStatic>
 80097e6:	4603      	mov	r3, r0
 80097e8:	4a08      	ldr	r2, [pc, #32]	@ (800980c <prvCheckForValidListAndQueue+0x60>)
 80097ea:	6013      	str	r3, [r2, #0]
			}
			#endif

			#if ( configQUEUE_REGISTRY_SIZE > 0 )
			{
				if( xTimerQueue != NULL )
 80097ec:	4b07      	ldr	r3, [pc, #28]	@ (800980c <prvCheckForValidListAndQueue+0x60>)
 80097ee:	681b      	ldr	r3, [r3, #0]
 80097f0:	2b00      	cmp	r3, #0
 80097f2:	d005      	beq.n	8009800 <prvCheckForValidListAndQueue+0x54>
				{
					vQueueAddToRegistry( xTimerQueue, "TmrQ" );
 80097f4:	4b05      	ldr	r3, [pc, #20]	@ (800980c <prvCheckForValidListAndQueue+0x60>)
 80097f6:	681b      	ldr	r3, [r3, #0]
 80097f8:	490b      	ldr	r1, [pc, #44]	@ (8009828 <prvCheckForValidListAndQueue+0x7c>)
 80097fa:	4618      	mov	r0, r3
 80097fc:	f7fe fd20 	bl	8008240 <vQueueAddToRegistry>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8009800:	f000 f95a 	bl	8009ab8 <vPortExitCritical>
}
 8009804:	bf00      	nop
 8009806:	46bd      	mov	sp, r7
 8009808:	bd80      	pop	{r7, pc}
 800980a:	bf00      	nop
 800980c:	2002a620 	.word	0x2002a620
 8009810:	2002a5f0 	.word	0x2002a5f0
 8009814:	2002a604 	.word	0x2002a604
 8009818:	2002a618 	.word	0x2002a618
 800981c:	2002a61c 	.word	0x2002a61c
 8009820:	2002a6cc 	.word	0x2002a6cc
 8009824:	2002a62c 	.word	0x2002a62c
 8009828:	08010f28 	.word	0x08010f28

0800982c <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 800982c:	b480      	push	{r7}
 800982e:	b085      	sub	sp, #20
 8009830:	af00      	add	r7, sp, #0
 8009832:	60f8      	str	r0, [r7, #12]
 8009834:	60b9      	str	r1, [r7, #8]
 8009836:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 8009838:	68fb      	ldr	r3, [r7, #12]
 800983a:	3b04      	subs	r3, #4
 800983c:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 800983e:	68fb      	ldr	r3, [r7, #12]
 8009840:	f04f 7280 	mov.w	r2, #16777216	@ 0x1000000
 8009844:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8009846:	68fb      	ldr	r3, [r7, #12]
 8009848:	3b04      	subs	r3, #4
 800984a:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 800984c:	68bb      	ldr	r3, [r7, #8]
 800984e:	f023 0201 	bic.w	r2, r3, #1
 8009852:	68fb      	ldr	r3, [r7, #12]
 8009854:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8009856:	68fb      	ldr	r3, [r7, #12]
 8009858:	3b04      	subs	r3, #4
 800985a:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 800985c:	4a0c      	ldr	r2, [pc, #48]	@ (8009890 <pxPortInitialiseStack+0x64>)
 800985e:	68fb      	ldr	r3, [r7, #12]
 8009860:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 8009862:	68fb      	ldr	r3, [r7, #12]
 8009864:	3b14      	subs	r3, #20
 8009866:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 8009868:	687a      	ldr	r2, [r7, #4]
 800986a:	68fb      	ldr	r3, [r7, #12]
 800986c:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 800986e:	68fb      	ldr	r3, [r7, #12]
 8009870:	3b04      	subs	r3, #4
 8009872:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 8009874:	68fb      	ldr	r3, [r7, #12]
 8009876:	f06f 0202 	mvn.w	r2, #2
 800987a:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 800987c:	68fb      	ldr	r3, [r7, #12]
 800987e:	3b20      	subs	r3, #32
 8009880:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 8009882:	68fb      	ldr	r3, [r7, #12]
}
 8009884:	4618      	mov	r0, r3
 8009886:	3714      	adds	r7, #20
 8009888:	46bd      	mov	sp, r7
 800988a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800988e:	4770      	bx	lr
 8009890:	08009895 	.word	0x08009895

08009894 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 8009894:	b480      	push	{r7}
 8009896:	b085      	sub	sp, #20
 8009898:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 800989a:	2300      	movs	r3, #0
 800989c:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 800989e:	4b15      	ldr	r3, [pc, #84]	@ (80098f4 <prvTaskExitError+0x60>)
 80098a0:	681b      	ldr	r3, [r3, #0]
 80098a2:	f1b3 3fff 	cmp.w	r3, #4294967295
 80098a6:	d00d      	beq.n	80098c4 <prvTaskExitError+0x30>
	__asm volatile
 80098a8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80098ac:	b672      	cpsid	i
 80098ae:	f383 8811 	msr	BASEPRI, r3
 80098b2:	f3bf 8f6f 	isb	sy
 80098b6:	f3bf 8f4f 	dsb	sy
 80098ba:	b662      	cpsie	i
 80098bc:	60fb      	str	r3, [r7, #12]
}
 80098be:	bf00      	nop
 80098c0:	bf00      	nop
 80098c2:	e7fd      	b.n	80098c0 <prvTaskExitError+0x2c>
	__asm volatile
 80098c4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80098c8:	b672      	cpsid	i
 80098ca:	f383 8811 	msr	BASEPRI, r3
 80098ce:	f3bf 8f6f 	isb	sy
 80098d2:	f3bf 8f4f 	dsb	sy
 80098d6:	b662      	cpsie	i
 80098d8:	60bb      	str	r3, [r7, #8]
}
 80098da:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 80098dc:	bf00      	nop
 80098de:	687b      	ldr	r3, [r7, #4]
 80098e0:	2b00      	cmp	r3, #0
 80098e2:	d0fc      	beq.n	80098de <prvTaskExitError+0x4a>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 80098e4:	bf00      	nop
 80098e6:	bf00      	nop
 80098e8:	3714      	adds	r7, #20
 80098ea:	46bd      	mov	sp, r7
 80098ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80098f0:	4770      	bx	lr
 80098f2:	bf00      	nop
 80098f4:	20027fb8 	.word	0x20027fb8
	...

08009900 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 8009900:	4b07      	ldr	r3, [pc, #28]	@ (8009920 <pxCurrentTCBConst2>)
 8009902:	6819      	ldr	r1, [r3, #0]
 8009904:	6808      	ldr	r0, [r1, #0]
 8009906:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800990a:	f380 8809 	msr	PSP, r0
 800990e:	f3bf 8f6f 	isb	sy
 8009912:	f04f 0000 	mov.w	r0, #0
 8009916:	f380 8811 	msr	BASEPRI, r0
 800991a:	4770      	bx	lr
 800991c:	f3af 8000 	nop.w

08009920 <pxCurrentTCBConst2>:
 8009920:	2002a0f0 	.word	0x2002a0f0
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 8009924:	bf00      	nop
 8009926:	bf00      	nop

08009928 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 8009928:	4808      	ldr	r0, [pc, #32]	@ (800994c <prvPortStartFirstTask+0x24>)
 800992a:	6800      	ldr	r0, [r0, #0]
 800992c:	6800      	ldr	r0, [r0, #0]
 800992e:	f380 8808 	msr	MSP, r0
 8009932:	f04f 0000 	mov.w	r0, #0
 8009936:	f380 8814 	msr	CONTROL, r0
 800993a:	b662      	cpsie	i
 800993c:	b661      	cpsie	f
 800993e:	f3bf 8f4f 	dsb	sy
 8009942:	f3bf 8f6f 	isb	sy
 8009946:	df00      	svc	0
 8009948:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 800994a:	bf00      	nop
 800994c:	e000ed08 	.word	0xe000ed08

08009950 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 8009950:	b580      	push	{r7, lr}
 8009952:	b084      	sub	sp, #16
 8009954:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 8009956:	4b37      	ldr	r3, [pc, #220]	@ (8009a34 <xPortStartScheduler+0xe4>)
 8009958:	60fb      	str	r3, [r7, #12]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 800995a:	68fb      	ldr	r3, [r7, #12]
 800995c:	781b      	ldrb	r3, [r3, #0]
 800995e:	b2db      	uxtb	r3, r3
 8009960:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 8009962:	68fb      	ldr	r3, [r7, #12]
 8009964:	22ff      	movs	r2, #255	@ 0xff
 8009966:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 8009968:	68fb      	ldr	r3, [r7, #12]
 800996a:	781b      	ldrb	r3, [r3, #0]
 800996c:	b2db      	uxtb	r3, r3
 800996e:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 8009970:	78fb      	ldrb	r3, [r7, #3]
 8009972:	b2db      	uxtb	r3, r3
 8009974:	f003 0350 	and.w	r3, r3, #80	@ 0x50
 8009978:	b2da      	uxtb	r2, r3
 800997a:	4b2f      	ldr	r3, [pc, #188]	@ (8009a38 <xPortStartScheduler+0xe8>)
 800997c:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 800997e:	4b2f      	ldr	r3, [pc, #188]	@ (8009a3c <xPortStartScheduler+0xec>)
 8009980:	2207      	movs	r2, #7
 8009982:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8009984:	e009      	b.n	800999a <xPortStartScheduler+0x4a>
		{
			ulMaxPRIGROUPValue--;
 8009986:	4b2d      	ldr	r3, [pc, #180]	@ (8009a3c <xPortStartScheduler+0xec>)
 8009988:	681b      	ldr	r3, [r3, #0]
 800998a:	3b01      	subs	r3, #1
 800998c:	4a2b      	ldr	r2, [pc, #172]	@ (8009a3c <xPortStartScheduler+0xec>)
 800998e:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 8009990:	78fb      	ldrb	r3, [r7, #3]
 8009992:	b2db      	uxtb	r3, r3
 8009994:	005b      	lsls	r3, r3, #1
 8009996:	b2db      	uxtb	r3, r3
 8009998:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800999a:	78fb      	ldrb	r3, [r7, #3]
 800999c:	b2db      	uxtb	r3, r3
 800999e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80099a2:	2b80      	cmp	r3, #128	@ 0x80
 80099a4:	d0ef      	beq.n	8009986 <xPortStartScheduler+0x36>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 80099a6:	4b25      	ldr	r3, [pc, #148]	@ (8009a3c <xPortStartScheduler+0xec>)
 80099a8:	681b      	ldr	r3, [r3, #0]
 80099aa:	f1c3 0307 	rsb	r3, r3, #7
 80099ae:	2b04      	cmp	r3, #4
 80099b0:	d00d      	beq.n	80099ce <xPortStartScheduler+0x7e>
	__asm volatile
 80099b2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80099b6:	b672      	cpsid	i
 80099b8:	f383 8811 	msr	BASEPRI, r3
 80099bc:	f3bf 8f6f 	isb	sy
 80099c0:	f3bf 8f4f 	dsb	sy
 80099c4:	b662      	cpsie	i
 80099c6:	60bb      	str	r3, [r7, #8]
}
 80099c8:	bf00      	nop
 80099ca:	bf00      	nop
 80099cc:	e7fd      	b.n	80099ca <xPortStartScheduler+0x7a>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 80099ce:	4b1b      	ldr	r3, [pc, #108]	@ (8009a3c <xPortStartScheduler+0xec>)
 80099d0:	681b      	ldr	r3, [r3, #0]
 80099d2:	021b      	lsls	r3, r3, #8
 80099d4:	4a19      	ldr	r2, [pc, #100]	@ (8009a3c <xPortStartScheduler+0xec>)
 80099d6:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 80099d8:	4b18      	ldr	r3, [pc, #96]	@ (8009a3c <xPortStartScheduler+0xec>)
 80099da:	681b      	ldr	r3, [r3, #0]
 80099dc:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
 80099e0:	4a16      	ldr	r2, [pc, #88]	@ (8009a3c <xPortStartScheduler+0xec>)
 80099e2:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 80099e4:	687b      	ldr	r3, [r7, #4]
 80099e6:	b2da      	uxtb	r2, r3
 80099e8:	68fb      	ldr	r3, [r7, #12]
 80099ea:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 80099ec:	4b14      	ldr	r3, [pc, #80]	@ (8009a40 <xPortStartScheduler+0xf0>)
 80099ee:	681b      	ldr	r3, [r3, #0]
 80099f0:	4a13      	ldr	r2, [pc, #76]	@ (8009a40 <xPortStartScheduler+0xf0>)
 80099f2:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 80099f6:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 80099f8:	4b11      	ldr	r3, [pc, #68]	@ (8009a40 <xPortStartScheduler+0xf0>)
 80099fa:	681b      	ldr	r3, [r3, #0]
 80099fc:	4a10      	ldr	r2, [pc, #64]	@ (8009a40 <xPortStartScheduler+0xf0>)
 80099fe:	f043 4370 	orr.w	r3, r3, #4026531840	@ 0xf0000000
 8009a02:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 8009a04:	f000 f8dc 	bl	8009bc0 <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 8009a08:	4b0e      	ldr	r3, [pc, #56]	@ (8009a44 <xPortStartScheduler+0xf4>)
 8009a0a:	2200      	movs	r2, #0
 8009a0c:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 8009a0e:	f000 f8fb 	bl	8009c08 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 8009a12:	4b0d      	ldr	r3, [pc, #52]	@ (8009a48 <xPortStartScheduler+0xf8>)
 8009a14:	681b      	ldr	r3, [r3, #0]
 8009a16:	4a0c      	ldr	r2, [pc, #48]	@ (8009a48 <xPortStartScheduler+0xf8>)
 8009a18:	f043 4340 	orr.w	r3, r3, #3221225472	@ 0xc0000000
 8009a1c:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 8009a1e:	f7ff ff83 	bl	8009928 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 8009a22:	f7ff f837 	bl	8008a94 <vTaskSwitchContext>
	prvTaskExitError();
 8009a26:	f7ff ff35 	bl	8009894 <prvTaskExitError>

	/* Should not get here! */
	return 0;
 8009a2a:	2300      	movs	r3, #0
}
 8009a2c:	4618      	mov	r0, r3
 8009a2e:	3710      	adds	r7, #16
 8009a30:	46bd      	mov	sp, r7
 8009a32:	bd80      	pop	{r7, pc}
 8009a34:	e000e400 	.word	0xe000e400
 8009a38:	2002a71c 	.word	0x2002a71c
 8009a3c:	2002a720 	.word	0x2002a720
 8009a40:	e000ed20 	.word	0xe000ed20
 8009a44:	20027fb8 	.word	0x20027fb8
 8009a48:	e000ef34 	.word	0xe000ef34

08009a4c <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 8009a4c:	b480      	push	{r7}
 8009a4e:	b083      	sub	sp, #12
 8009a50:	af00      	add	r7, sp, #0
	__asm volatile
 8009a52:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8009a56:	b672      	cpsid	i
 8009a58:	f383 8811 	msr	BASEPRI, r3
 8009a5c:	f3bf 8f6f 	isb	sy
 8009a60:	f3bf 8f4f 	dsb	sy
 8009a64:	b662      	cpsie	i
 8009a66:	607b      	str	r3, [r7, #4]
}
 8009a68:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 8009a6a:	4b11      	ldr	r3, [pc, #68]	@ (8009ab0 <vPortEnterCritical+0x64>)
 8009a6c:	681b      	ldr	r3, [r3, #0]
 8009a6e:	3301      	adds	r3, #1
 8009a70:	4a0f      	ldr	r2, [pc, #60]	@ (8009ab0 <vPortEnterCritical+0x64>)
 8009a72:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 8009a74:	4b0e      	ldr	r3, [pc, #56]	@ (8009ab0 <vPortEnterCritical+0x64>)
 8009a76:	681b      	ldr	r3, [r3, #0]
 8009a78:	2b01      	cmp	r3, #1
 8009a7a:	d112      	bne.n	8009aa2 <vPortEnterCritical+0x56>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 8009a7c:	4b0d      	ldr	r3, [pc, #52]	@ (8009ab4 <vPortEnterCritical+0x68>)
 8009a7e:	681b      	ldr	r3, [r3, #0]
 8009a80:	b2db      	uxtb	r3, r3
 8009a82:	2b00      	cmp	r3, #0
 8009a84:	d00d      	beq.n	8009aa2 <vPortEnterCritical+0x56>
	__asm volatile
 8009a86:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8009a8a:	b672      	cpsid	i
 8009a8c:	f383 8811 	msr	BASEPRI, r3
 8009a90:	f3bf 8f6f 	isb	sy
 8009a94:	f3bf 8f4f 	dsb	sy
 8009a98:	b662      	cpsie	i
 8009a9a:	603b      	str	r3, [r7, #0]
}
 8009a9c:	bf00      	nop
 8009a9e:	bf00      	nop
 8009aa0:	e7fd      	b.n	8009a9e <vPortEnterCritical+0x52>
	}
}
 8009aa2:	bf00      	nop
 8009aa4:	370c      	adds	r7, #12
 8009aa6:	46bd      	mov	sp, r7
 8009aa8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009aac:	4770      	bx	lr
 8009aae:	bf00      	nop
 8009ab0:	20027fb8 	.word	0x20027fb8
 8009ab4:	e000ed04 	.word	0xe000ed04

08009ab8 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 8009ab8:	b480      	push	{r7}
 8009aba:	b083      	sub	sp, #12
 8009abc:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 8009abe:	4b13      	ldr	r3, [pc, #76]	@ (8009b0c <vPortExitCritical+0x54>)
 8009ac0:	681b      	ldr	r3, [r3, #0]
 8009ac2:	2b00      	cmp	r3, #0
 8009ac4:	d10d      	bne.n	8009ae2 <vPortExitCritical+0x2a>
	__asm volatile
 8009ac6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8009aca:	b672      	cpsid	i
 8009acc:	f383 8811 	msr	BASEPRI, r3
 8009ad0:	f3bf 8f6f 	isb	sy
 8009ad4:	f3bf 8f4f 	dsb	sy
 8009ad8:	b662      	cpsie	i
 8009ada:	607b      	str	r3, [r7, #4]
}
 8009adc:	bf00      	nop
 8009ade:	bf00      	nop
 8009ae0:	e7fd      	b.n	8009ade <vPortExitCritical+0x26>
	uxCriticalNesting--;
 8009ae2:	4b0a      	ldr	r3, [pc, #40]	@ (8009b0c <vPortExitCritical+0x54>)
 8009ae4:	681b      	ldr	r3, [r3, #0]
 8009ae6:	3b01      	subs	r3, #1
 8009ae8:	4a08      	ldr	r2, [pc, #32]	@ (8009b0c <vPortExitCritical+0x54>)
 8009aea:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 8009aec:	4b07      	ldr	r3, [pc, #28]	@ (8009b0c <vPortExitCritical+0x54>)
 8009aee:	681b      	ldr	r3, [r3, #0]
 8009af0:	2b00      	cmp	r3, #0
 8009af2:	d105      	bne.n	8009b00 <vPortExitCritical+0x48>
 8009af4:	2300      	movs	r3, #0
 8009af6:	603b      	str	r3, [r7, #0]
	__asm volatile
 8009af8:	683b      	ldr	r3, [r7, #0]
 8009afa:	f383 8811 	msr	BASEPRI, r3
}
 8009afe:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 8009b00:	bf00      	nop
 8009b02:	370c      	adds	r7, #12
 8009b04:	46bd      	mov	sp, r7
 8009b06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009b0a:	4770      	bx	lr
 8009b0c:	20027fb8 	.word	0x20027fb8

08009b10 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 8009b10:	f3ef 8009 	mrs	r0, PSP
 8009b14:	f3bf 8f6f 	isb	sy
 8009b18:	4b15      	ldr	r3, [pc, #84]	@ (8009b70 <pxCurrentTCBConst>)
 8009b1a:	681a      	ldr	r2, [r3, #0]
 8009b1c:	f01e 0f10 	tst.w	lr, #16
 8009b20:	bf08      	it	eq
 8009b22:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 8009b26:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009b2a:	6010      	str	r0, [r2, #0]
 8009b2c:	e92d 0009 	stmdb	sp!, {r0, r3}
 8009b30:	f04f 0050 	mov.w	r0, #80	@ 0x50
 8009b34:	b672      	cpsid	i
 8009b36:	f380 8811 	msr	BASEPRI, r0
 8009b3a:	f3bf 8f4f 	dsb	sy
 8009b3e:	f3bf 8f6f 	isb	sy
 8009b42:	b662      	cpsie	i
 8009b44:	f7fe ffa6 	bl	8008a94 <vTaskSwitchContext>
 8009b48:	f04f 0000 	mov.w	r0, #0
 8009b4c:	f380 8811 	msr	BASEPRI, r0
 8009b50:	bc09      	pop	{r0, r3}
 8009b52:	6819      	ldr	r1, [r3, #0]
 8009b54:	6808      	ldr	r0, [r1, #0]
 8009b56:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009b5a:	f01e 0f10 	tst.w	lr, #16
 8009b5e:	bf08      	it	eq
 8009b60:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 8009b64:	f380 8809 	msr	PSP, r0
 8009b68:	f3bf 8f6f 	isb	sy
 8009b6c:	4770      	bx	lr
 8009b6e:	bf00      	nop

08009b70 <pxCurrentTCBConst>:
 8009b70:	2002a0f0 	.word	0x2002a0f0
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 8009b74:	bf00      	nop
 8009b76:	bf00      	nop

08009b78 <xPortSysTickHandler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 8009b78:	b580      	push	{r7, lr}
 8009b7a:	b082      	sub	sp, #8
 8009b7c:	af00      	add	r7, sp, #0
	__asm volatile
 8009b7e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8009b82:	b672      	cpsid	i
 8009b84:	f383 8811 	msr	BASEPRI, r3
 8009b88:	f3bf 8f6f 	isb	sy
 8009b8c:	f3bf 8f4f 	dsb	sy
 8009b90:	b662      	cpsie	i
 8009b92:	607b      	str	r3, [r7, #4]
}
 8009b94:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 8009b96:	f7fe fec1 	bl	800891c <xTaskIncrementTick>
 8009b9a:	4603      	mov	r3, r0
 8009b9c:	2b00      	cmp	r3, #0
 8009b9e:	d003      	beq.n	8009ba8 <xPortSysTickHandler+0x30>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 8009ba0:	4b06      	ldr	r3, [pc, #24]	@ (8009bbc <xPortSysTickHandler+0x44>)
 8009ba2:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8009ba6:	601a      	str	r2, [r3, #0]
 8009ba8:	2300      	movs	r3, #0
 8009baa:	603b      	str	r3, [r7, #0]
	__asm volatile
 8009bac:	683b      	ldr	r3, [r7, #0]
 8009bae:	f383 8811 	msr	BASEPRI, r3
}
 8009bb2:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 8009bb4:	bf00      	nop
 8009bb6:	3708      	adds	r7, #8
 8009bb8:	46bd      	mov	sp, r7
 8009bba:	bd80      	pop	{r7, pc}
 8009bbc:	e000ed04 	.word	0xe000ed04

08009bc0 <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 8009bc0:	b480      	push	{r7}
 8009bc2:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 8009bc4:	4b0b      	ldr	r3, [pc, #44]	@ (8009bf4 <vPortSetupTimerInterrupt+0x34>)
 8009bc6:	2200      	movs	r2, #0
 8009bc8:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 8009bca:	4b0b      	ldr	r3, [pc, #44]	@ (8009bf8 <vPortSetupTimerInterrupt+0x38>)
 8009bcc:	2200      	movs	r2, #0
 8009bce:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 8009bd0:	4b0a      	ldr	r3, [pc, #40]	@ (8009bfc <vPortSetupTimerInterrupt+0x3c>)
 8009bd2:	681b      	ldr	r3, [r3, #0]
 8009bd4:	4a0a      	ldr	r2, [pc, #40]	@ (8009c00 <vPortSetupTimerInterrupt+0x40>)
 8009bd6:	fba2 2303 	umull	r2, r3, r2, r3
 8009bda:	099b      	lsrs	r3, r3, #6
 8009bdc:	4a09      	ldr	r2, [pc, #36]	@ (8009c04 <vPortSetupTimerInterrupt+0x44>)
 8009bde:	3b01      	subs	r3, #1
 8009be0:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 8009be2:	4b04      	ldr	r3, [pc, #16]	@ (8009bf4 <vPortSetupTimerInterrupt+0x34>)
 8009be4:	2207      	movs	r2, #7
 8009be6:	601a      	str	r2, [r3, #0]
}
 8009be8:	bf00      	nop
 8009bea:	46bd      	mov	sp, r7
 8009bec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009bf0:	4770      	bx	lr
 8009bf2:	bf00      	nop
 8009bf4:	e000e010 	.word	0xe000e010
 8009bf8:	e000e018 	.word	0xe000e018
 8009bfc:	20027fac 	.word	0x20027fac
 8009c00:	10624dd3 	.word	0x10624dd3
 8009c04:	e000e014 	.word	0xe000e014

08009c08 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 8009c08:	f8df 000c 	ldr.w	r0, [pc, #12]	@ 8009c18 <vPortEnableVFP+0x10>
 8009c0c:	6801      	ldr	r1, [r0, #0]
 8009c0e:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 8009c12:	6001      	str	r1, [r0, #0]
 8009c14:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 8009c16:	bf00      	nop
 8009c18:	e000ed88 	.word	0xe000ed88

08009c1c <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 8009c1c:	b480      	push	{r7}
 8009c1e:	b085      	sub	sp, #20
 8009c20:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 8009c22:	f3ef 8305 	mrs	r3, IPSR
 8009c26:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 8009c28:	68fb      	ldr	r3, [r7, #12]
 8009c2a:	2b0f      	cmp	r3, #15
 8009c2c:	d917      	bls.n	8009c5e <vPortValidateInterruptPriority+0x42>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 8009c2e:	4a1a      	ldr	r2, [pc, #104]	@ (8009c98 <vPortValidateInterruptPriority+0x7c>)
 8009c30:	68fb      	ldr	r3, [r7, #12]
 8009c32:	4413      	add	r3, r2
 8009c34:	781b      	ldrb	r3, [r3, #0]
 8009c36:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 8009c38:	4b18      	ldr	r3, [pc, #96]	@ (8009c9c <vPortValidateInterruptPriority+0x80>)
 8009c3a:	781b      	ldrb	r3, [r3, #0]
 8009c3c:	7afa      	ldrb	r2, [r7, #11]
 8009c3e:	429a      	cmp	r2, r3
 8009c40:	d20d      	bcs.n	8009c5e <vPortValidateInterruptPriority+0x42>
	__asm volatile
 8009c42:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8009c46:	b672      	cpsid	i
 8009c48:	f383 8811 	msr	BASEPRI, r3
 8009c4c:	f3bf 8f6f 	isb	sy
 8009c50:	f3bf 8f4f 	dsb	sy
 8009c54:	b662      	cpsie	i
 8009c56:	607b      	str	r3, [r7, #4]
}
 8009c58:	bf00      	nop
 8009c5a:	bf00      	nop
 8009c5c:	e7fd      	b.n	8009c5a <vPortValidateInterruptPriority+0x3e>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 8009c5e:	4b10      	ldr	r3, [pc, #64]	@ (8009ca0 <vPortValidateInterruptPriority+0x84>)
 8009c60:	681b      	ldr	r3, [r3, #0]
 8009c62:	f403 62e0 	and.w	r2, r3, #1792	@ 0x700
 8009c66:	4b0f      	ldr	r3, [pc, #60]	@ (8009ca4 <vPortValidateInterruptPriority+0x88>)
 8009c68:	681b      	ldr	r3, [r3, #0]
 8009c6a:	429a      	cmp	r2, r3
 8009c6c:	d90d      	bls.n	8009c8a <vPortValidateInterruptPriority+0x6e>
	__asm volatile
 8009c6e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8009c72:	b672      	cpsid	i
 8009c74:	f383 8811 	msr	BASEPRI, r3
 8009c78:	f3bf 8f6f 	isb	sy
 8009c7c:	f3bf 8f4f 	dsb	sy
 8009c80:	b662      	cpsie	i
 8009c82:	603b      	str	r3, [r7, #0]
}
 8009c84:	bf00      	nop
 8009c86:	bf00      	nop
 8009c88:	e7fd      	b.n	8009c86 <vPortValidateInterruptPriority+0x6a>
	}
 8009c8a:	bf00      	nop
 8009c8c:	3714      	adds	r7, #20
 8009c8e:	46bd      	mov	sp, r7
 8009c90:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009c94:	4770      	bx	lr
 8009c96:	bf00      	nop
 8009c98:	e000e3f0 	.word	0xe000e3f0
 8009c9c:	2002a71c 	.word	0x2002a71c
 8009ca0:	e000ed0c 	.word	0xe000ed0c
 8009ca4:	2002a720 	.word	0x2002a720

08009ca8 <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 8009ca8:	b580      	push	{r7, lr}
 8009caa:	b08a      	sub	sp, #40	@ 0x28
 8009cac:	af00      	add	r7, sp, #0
 8009cae:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 8009cb0:	2300      	movs	r3, #0
 8009cb2:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 8009cb4:	f7fe fd74 	bl	80087a0 <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 8009cb8:	4b5d      	ldr	r3, [pc, #372]	@ (8009e30 <pvPortMalloc+0x188>)
 8009cba:	681b      	ldr	r3, [r3, #0]
 8009cbc:	2b00      	cmp	r3, #0
 8009cbe:	d101      	bne.n	8009cc4 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 8009cc0:	f000 f920 	bl	8009f04 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 8009cc4:	4b5b      	ldr	r3, [pc, #364]	@ (8009e34 <pvPortMalloc+0x18c>)
 8009cc6:	681a      	ldr	r2, [r3, #0]
 8009cc8:	687b      	ldr	r3, [r7, #4]
 8009cca:	4013      	ands	r3, r2
 8009ccc:	2b00      	cmp	r3, #0
 8009cce:	f040 8094 	bne.w	8009dfa <pvPortMalloc+0x152>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 8009cd2:	687b      	ldr	r3, [r7, #4]
 8009cd4:	2b00      	cmp	r3, #0
 8009cd6:	d020      	beq.n	8009d1a <pvPortMalloc+0x72>
			{
				xWantedSize += xHeapStructSize;
 8009cd8:	2208      	movs	r2, #8
 8009cda:	687b      	ldr	r3, [r7, #4]
 8009cdc:	4413      	add	r3, r2
 8009cde:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 8009ce0:	687b      	ldr	r3, [r7, #4]
 8009ce2:	f003 0307 	and.w	r3, r3, #7
 8009ce6:	2b00      	cmp	r3, #0
 8009ce8:	d017      	beq.n	8009d1a <pvPortMalloc+0x72>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 8009cea:	687b      	ldr	r3, [r7, #4]
 8009cec:	f023 0307 	bic.w	r3, r3, #7
 8009cf0:	3308      	adds	r3, #8
 8009cf2:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 8009cf4:	687b      	ldr	r3, [r7, #4]
 8009cf6:	f003 0307 	and.w	r3, r3, #7
 8009cfa:	2b00      	cmp	r3, #0
 8009cfc:	d00d      	beq.n	8009d1a <pvPortMalloc+0x72>
	__asm volatile
 8009cfe:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8009d02:	b672      	cpsid	i
 8009d04:	f383 8811 	msr	BASEPRI, r3
 8009d08:	f3bf 8f6f 	isb	sy
 8009d0c:	f3bf 8f4f 	dsb	sy
 8009d10:	b662      	cpsie	i
 8009d12:	617b      	str	r3, [r7, #20]
}
 8009d14:	bf00      	nop
 8009d16:	bf00      	nop
 8009d18:	e7fd      	b.n	8009d16 <pvPortMalloc+0x6e>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 8009d1a:	687b      	ldr	r3, [r7, #4]
 8009d1c:	2b00      	cmp	r3, #0
 8009d1e:	d06c      	beq.n	8009dfa <pvPortMalloc+0x152>
 8009d20:	4b45      	ldr	r3, [pc, #276]	@ (8009e38 <pvPortMalloc+0x190>)
 8009d22:	681b      	ldr	r3, [r3, #0]
 8009d24:	687a      	ldr	r2, [r7, #4]
 8009d26:	429a      	cmp	r2, r3
 8009d28:	d867      	bhi.n	8009dfa <pvPortMalloc+0x152>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 8009d2a:	4b44      	ldr	r3, [pc, #272]	@ (8009e3c <pvPortMalloc+0x194>)
 8009d2c:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 8009d2e:	4b43      	ldr	r3, [pc, #268]	@ (8009e3c <pvPortMalloc+0x194>)
 8009d30:	681b      	ldr	r3, [r3, #0]
 8009d32:	627b      	str	r3, [r7, #36]	@ 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8009d34:	e004      	b.n	8009d40 <pvPortMalloc+0x98>
				{
					pxPreviousBlock = pxBlock;
 8009d36:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009d38:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 8009d3a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009d3c:	681b      	ldr	r3, [r3, #0]
 8009d3e:	627b      	str	r3, [r7, #36]	@ 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8009d40:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009d42:	685b      	ldr	r3, [r3, #4]
 8009d44:	687a      	ldr	r2, [r7, #4]
 8009d46:	429a      	cmp	r2, r3
 8009d48:	d903      	bls.n	8009d52 <pvPortMalloc+0xaa>
 8009d4a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009d4c:	681b      	ldr	r3, [r3, #0]
 8009d4e:	2b00      	cmp	r3, #0
 8009d50:	d1f1      	bne.n	8009d36 <pvPortMalloc+0x8e>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 8009d52:	4b37      	ldr	r3, [pc, #220]	@ (8009e30 <pvPortMalloc+0x188>)
 8009d54:	681b      	ldr	r3, [r3, #0]
 8009d56:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8009d58:	429a      	cmp	r2, r3
 8009d5a:	d04e      	beq.n	8009dfa <pvPortMalloc+0x152>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 8009d5c:	6a3b      	ldr	r3, [r7, #32]
 8009d5e:	681b      	ldr	r3, [r3, #0]
 8009d60:	2208      	movs	r2, #8
 8009d62:	4413      	add	r3, r2
 8009d64:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 8009d66:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009d68:	681a      	ldr	r2, [r3, #0]
 8009d6a:	6a3b      	ldr	r3, [r7, #32]
 8009d6c:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 8009d6e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009d70:	685a      	ldr	r2, [r3, #4]
 8009d72:	687b      	ldr	r3, [r7, #4]
 8009d74:	1ad2      	subs	r2, r2, r3
 8009d76:	2308      	movs	r3, #8
 8009d78:	005b      	lsls	r3, r3, #1
 8009d7a:	429a      	cmp	r2, r3
 8009d7c:	d922      	bls.n	8009dc4 <pvPortMalloc+0x11c>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 8009d7e:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8009d80:	687b      	ldr	r3, [r7, #4]
 8009d82:	4413      	add	r3, r2
 8009d84:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 8009d86:	69bb      	ldr	r3, [r7, #24]
 8009d88:	f003 0307 	and.w	r3, r3, #7
 8009d8c:	2b00      	cmp	r3, #0
 8009d8e:	d00d      	beq.n	8009dac <pvPortMalloc+0x104>
	__asm volatile
 8009d90:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8009d94:	b672      	cpsid	i
 8009d96:	f383 8811 	msr	BASEPRI, r3
 8009d9a:	f3bf 8f6f 	isb	sy
 8009d9e:	f3bf 8f4f 	dsb	sy
 8009da2:	b662      	cpsie	i
 8009da4:	613b      	str	r3, [r7, #16]
}
 8009da6:	bf00      	nop
 8009da8:	bf00      	nop
 8009daa:	e7fd      	b.n	8009da8 <pvPortMalloc+0x100>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 8009dac:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009dae:	685a      	ldr	r2, [r3, #4]
 8009db0:	687b      	ldr	r3, [r7, #4]
 8009db2:	1ad2      	subs	r2, r2, r3
 8009db4:	69bb      	ldr	r3, [r7, #24]
 8009db6:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 8009db8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009dba:	687a      	ldr	r2, [r7, #4]
 8009dbc:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 8009dbe:	69b8      	ldr	r0, [r7, #24]
 8009dc0:	f000 f902 	bl	8009fc8 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 8009dc4:	4b1c      	ldr	r3, [pc, #112]	@ (8009e38 <pvPortMalloc+0x190>)
 8009dc6:	681a      	ldr	r2, [r3, #0]
 8009dc8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009dca:	685b      	ldr	r3, [r3, #4]
 8009dcc:	1ad3      	subs	r3, r2, r3
 8009dce:	4a1a      	ldr	r2, [pc, #104]	@ (8009e38 <pvPortMalloc+0x190>)
 8009dd0:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 8009dd2:	4b19      	ldr	r3, [pc, #100]	@ (8009e38 <pvPortMalloc+0x190>)
 8009dd4:	681a      	ldr	r2, [r3, #0]
 8009dd6:	4b1a      	ldr	r3, [pc, #104]	@ (8009e40 <pvPortMalloc+0x198>)
 8009dd8:	681b      	ldr	r3, [r3, #0]
 8009dda:	429a      	cmp	r2, r3
 8009ddc:	d203      	bcs.n	8009de6 <pvPortMalloc+0x13e>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 8009dde:	4b16      	ldr	r3, [pc, #88]	@ (8009e38 <pvPortMalloc+0x190>)
 8009de0:	681b      	ldr	r3, [r3, #0]
 8009de2:	4a17      	ldr	r2, [pc, #92]	@ (8009e40 <pvPortMalloc+0x198>)
 8009de4:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 8009de6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009de8:	685a      	ldr	r2, [r3, #4]
 8009dea:	4b12      	ldr	r3, [pc, #72]	@ (8009e34 <pvPortMalloc+0x18c>)
 8009dec:	681b      	ldr	r3, [r3, #0]
 8009dee:	431a      	orrs	r2, r3
 8009df0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009df2:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 8009df4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009df6:	2200      	movs	r2, #0
 8009df8:	601a      	str	r2, [r3, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 8009dfa:	f7fe fcdf 	bl	80087bc <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 8009dfe:	69fb      	ldr	r3, [r7, #28]
 8009e00:	f003 0307 	and.w	r3, r3, #7
 8009e04:	2b00      	cmp	r3, #0
 8009e06:	d00d      	beq.n	8009e24 <pvPortMalloc+0x17c>
	__asm volatile
 8009e08:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8009e0c:	b672      	cpsid	i
 8009e0e:	f383 8811 	msr	BASEPRI, r3
 8009e12:	f3bf 8f6f 	isb	sy
 8009e16:	f3bf 8f4f 	dsb	sy
 8009e1a:	b662      	cpsie	i
 8009e1c:	60fb      	str	r3, [r7, #12]
}
 8009e1e:	bf00      	nop
 8009e20:	bf00      	nop
 8009e22:	e7fd      	b.n	8009e20 <pvPortMalloc+0x178>
	return pvReturn;
 8009e24:	69fb      	ldr	r3, [r7, #28]
}
 8009e26:	4618      	mov	r0, r3
 8009e28:	3728      	adds	r7, #40	@ 0x28
 8009e2a:	46bd      	mov	sp, r7
 8009e2c:	bd80      	pop	{r7, pc}
 8009e2e:	bf00      	nop
 8009e30:	2002e32c 	.word	0x2002e32c
 8009e34:	2002e338 	.word	0x2002e338
 8009e38:	2002e330 	.word	0x2002e330
 8009e3c:	2002e324 	.word	0x2002e324
 8009e40:	2002e334 	.word	0x2002e334

08009e44 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 8009e44:	b580      	push	{r7, lr}
 8009e46:	b086      	sub	sp, #24
 8009e48:	af00      	add	r7, sp, #0
 8009e4a:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 8009e4c:	687b      	ldr	r3, [r7, #4]
 8009e4e:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 8009e50:	687b      	ldr	r3, [r7, #4]
 8009e52:	2b00      	cmp	r3, #0
 8009e54:	d04e      	beq.n	8009ef4 <vPortFree+0xb0>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 8009e56:	2308      	movs	r3, #8
 8009e58:	425b      	negs	r3, r3
 8009e5a:	697a      	ldr	r2, [r7, #20]
 8009e5c:	4413      	add	r3, r2
 8009e5e:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 8009e60:	697b      	ldr	r3, [r7, #20]
 8009e62:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 8009e64:	693b      	ldr	r3, [r7, #16]
 8009e66:	685a      	ldr	r2, [r3, #4]
 8009e68:	4b24      	ldr	r3, [pc, #144]	@ (8009efc <vPortFree+0xb8>)
 8009e6a:	681b      	ldr	r3, [r3, #0]
 8009e6c:	4013      	ands	r3, r2
 8009e6e:	2b00      	cmp	r3, #0
 8009e70:	d10d      	bne.n	8009e8e <vPortFree+0x4a>
	__asm volatile
 8009e72:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8009e76:	b672      	cpsid	i
 8009e78:	f383 8811 	msr	BASEPRI, r3
 8009e7c:	f3bf 8f6f 	isb	sy
 8009e80:	f3bf 8f4f 	dsb	sy
 8009e84:	b662      	cpsie	i
 8009e86:	60fb      	str	r3, [r7, #12]
}
 8009e88:	bf00      	nop
 8009e8a:	bf00      	nop
 8009e8c:	e7fd      	b.n	8009e8a <vPortFree+0x46>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 8009e8e:	693b      	ldr	r3, [r7, #16]
 8009e90:	681b      	ldr	r3, [r3, #0]
 8009e92:	2b00      	cmp	r3, #0
 8009e94:	d00d      	beq.n	8009eb2 <vPortFree+0x6e>
	__asm volatile
 8009e96:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8009e9a:	b672      	cpsid	i
 8009e9c:	f383 8811 	msr	BASEPRI, r3
 8009ea0:	f3bf 8f6f 	isb	sy
 8009ea4:	f3bf 8f4f 	dsb	sy
 8009ea8:	b662      	cpsie	i
 8009eaa:	60bb      	str	r3, [r7, #8]
}
 8009eac:	bf00      	nop
 8009eae:	bf00      	nop
 8009eb0:	e7fd      	b.n	8009eae <vPortFree+0x6a>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 8009eb2:	693b      	ldr	r3, [r7, #16]
 8009eb4:	685a      	ldr	r2, [r3, #4]
 8009eb6:	4b11      	ldr	r3, [pc, #68]	@ (8009efc <vPortFree+0xb8>)
 8009eb8:	681b      	ldr	r3, [r3, #0]
 8009eba:	4013      	ands	r3, r2
 8009ebc:	2b00      	cmp	r3, #0
 8009ebe:	d019      	beq.n	8009ef4 <vPortFree+0xb0>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 8009ec0:	693b      	ldr	r3, [r7, #16]
 8009ec2:	681b      	ldr	r3, [r3, #0]
 8009ec4:	2b00      	cmp	r3, #0
 8009ec6:	d115      	bne.n	8009ef4 <vPortFree+0xb0>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 8009ec8:	693b      	ldr	r3, [r7, #16]
 8009eca:	685a      	ldr	r2, [r3, #4]
 8009ecc:	4b0b      	ldr	r3, [pc, #44]	@ (8009efc <vPortFree+0xb8>)
 8009ece:	681b      	ldr	r3, [r3, #0]
 8009ed0:	43db      	mvns	r3, r3
 8009ed2:	401a      	ands	r2, r3
 8009ed4:	693b      	ldr	r3, [r7, #16]
 8009ed6:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 8009ed8:	f7fe fc62 	bl	80087a0 <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 8009edc:	693b      	ldr	r3, [r7, #16]
 8009ede:	685a      	ldr	r2, [r3, #4]
 8009ee0:	4b07      	ldr	r3, [pc, #28]	@ (8009f00 <vPortFree+0xbc>)
 8009ee2:	681b      	ldr	r3, [r3, #0]
 8009ee4:	4413      	add	r3, r2
 8009ee6:	4a06      	ldr	r2, [pc, #24]	@ (8009f00 <vPortFree+0xbc>)
 8009ee8:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 8009eea:	6938      	ldr	r0, [r7, #16]
 8009eec:	f000 f86c 	bl	8009fc8 <prvInsertBlockIntoFreeList>
				}
				( void ) xTaskResumeAll();
 8009ef0:	f7fe fc64 	bl	80087bc <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 8009ef4:	bf00      	nop
 8009ef6:	3718      	adds	r7, #24
 8009ef8:	46bd      	mov	sp, r7
 8009efa:	bd80      	pop	{r7, pc}
 8009efc:	2002e338 	.word	0x2002e338
 8009f00:	2002e330 	.word	0x2002e330

08009f04 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 8009f04:	b480      	push	{r7}
 8009f06:	b085      	sub	sp, #20
 8009f08:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 8009f0a:	f44f 5370 	mov.w	r3, #15360	@ 0x3c00
 8009f0e:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 8009f10:	4b27      	ldr	r3, [pc, #156]	@ (8009fb0 <prvHeapInit+0xac>)
 8009f12:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 8009f14:	68fb      	ldr	r3, [r7, #12]
 8009f16:	f003 0307 	and.w	r3, r3, #7
 8009f1a:	2b00      	cmp	r3, #0
 8009f1c:	d00c      	beq.n	8009f38 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 8009f1e:	68fb      	ldr	r3, [r7, #12]
 8009f20:	3307      	adds	r3, #7
 8009f22:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8009f24:	68fb      	ldr	r3, [r7, #12]
 8009f26:	f023 0307 	bic.w	r3, r3, #7
 8009f2a:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 8009f2c:	68ba      	ldr	r2, [r7, #8]
 8009f2e:	68fb      	ldr	r3, [r7, #12]
 8009f30:	1ad3      	subs	r3, r2, r3
 8009f32:	4a1f      	ldr	r2, [pc, #124]	@ (8009fb0 <prvHeapInit+0xac>)
 8009f34:	4413      	add	r3, r2
 8009f36:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 8009f38:	68fb      	ldr	r3, [r7, #12]
 8009f3a:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 8009f3c:	4a1d      	ldr	r2, [pc, #116]	@ (8009fb4 <prvHeapInit+0xb0>)
 8009f3e:	687b      	ldr	r3, [r7, #4]
 8009f40:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 8009f42:	4b1c      	ldr	r3, [pc, #112]	@ (8009fb4 <prvHeapInit+0xb0>)
 8009f44:	2200      	movs	r2, #0
 8009f46:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 8009f48:	687b      	ldr	r3, [r7, #4]
 8009f4a:	68ba      	ldr	r2, [r7, #8]
 8009f4c:	4413      	add	r3, r2
 8009f4e:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 8009f50:	2208      	movs	r2, #8
 8009f52:	68fb      	ldr	r3, [r7, #12]
 8009f54:	1a9b      	subs	r3, r3, r2
 8009f56:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8009f58:	68fb      	ldr	r3, [r7, #12]
 8009f5a:	f023 0307 	bic.w	r3, r3, #7
 8009f5e:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 8009f60:	68fb      	ldr	r3, [r7, #12]
 8009f62:	4a15      	ldr	r2, [pc, #84]	@ (8009fb8 <prvHeapInit+0xb4>)
 8009f64:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 8009f66:	4b14      	ldr	r3, [pc, #80]	@ (8009fb8 <prvHeapInit+0xb4>)
 8009f68:	681b      	ldr	r3, [r3, #0]
 8009f6a:	2200      	movs	r2, #0
 8009f6c:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 8009f6e:	4b12      	ldr	r3, [pc, #72]	@ (8009fb8 <prvHeapInit+0xb4>)
 8009f70:	681b      	ldr	r3, [r3, #0]
 8009f72:	2200      	movs	r2, #0
 8009f74:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 8009f76:	687b      	ldr	r3, [r7, #4]
 8009f78:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 8009f7a:	683b      	ldr	r3, [r7, #0]
 8009f7c:	68fa      	ldr	r2, [r7, #12]
 8009f7e:	1ad2      	subs	r2, r2, r3
 8009f80:	683b      	ldr	r3, [r7, #0]
 8009f82:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 8009f84:	4b0c      	ldr	r3, [pc, #48]	@ (8009fb8 <prvHeapInit+0xb4>)
 8009f86:	681a      	ldr	r2, [r3, #0]
 8009f88:	683b      	ldr	r3, [r7, #0]
 8009f8a:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8009f8c:	683b      	ldr	r3, [r7, #0]
 8009f8e:	685b      	ldr	r3, [r3, #4]
 8009f90:	4a0a      	ldr	r2, [pc, #40]	@ (8009fbc <prvHeapInit+0xb8>)
 8009f92:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8009f94:	683b      	ldr	r3, [r7, #0]
 8009f96:	685b      	ldr	r3, [r3, #4]
 8009f98:	4a09      	ldr	r2, [pc, #36]	@ (8009fc0 <prvHeapInit+0xbc>)
 8009f9a:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 8009f9c:	4b09      	ldr	r3, [pc, #36]	@ (8009fc4 <prvHeapInit+0xc0>)
 8009f9e:	f04f 4200 	mov.w	r2, #2147483648	@ 0x80000000
 8009fa2:	601a      	str	r2, [r3, #0]
}
 8009fa4:	bf00      	nop
 8009fa6:	3714      	adds	r7, #20
 8009fa8:	46bd      	mov	sp, r7
 8009faa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009fae:	4770      	bx	lr
 8009fb0:	2002a724 	.word	0x2002a724
 8009fb4:	2002e324 	.word	0x2002e324
 8009fb8:	2002e32c 	.word	0x2002e32c
 8009fbc:	2002e334 	.word	0x2002e334
 8009fc0:	2002e330 	.word	0x2002e330
 8009fc4:	2002e338 	.word	0x2002e338

08009fc8 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 8009fc8:	b480      	push	{r7}
 8009fca:	b085      	sub	sp, #20
 8009fcc:	af00      	add	r7, sp, #0
 8009fce:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 8009fd0:	4b28      	ldr	r3, [pc, #160]	@ (800a074 <prvInsertBlockIntoFreeList+0xac>)
 8009fd2:	60fb      	str	r3, [r7, #12]
 8009fd4:	e002      	b.n	8009fdc <prvInsertBlockIntoFreeList+0x14>
 8009fd6:	68fb      	ldr	r3, [r7, #12]
 8009fd8:	681b      	ldr	r3, [r3, #0]
 8009fda:	60fb      	str	r3, [r7, #12]
 8009fdc:	68fb      	ldr	r3, [r7, #12]
 8009fde:	681b      	ldr	r3, [r3, #0]
 8009fe0:	687a      	ldr	r2, [r7, #4]
 8009fe2:	429a      	cmp	r2, r3
 8009fe4:	d8f7      	bhi.n	8009fd6 <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 8009fe6:	68fb      	ldr	r3, [r7, #12]
 8009fe8:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 8009fea:	68fb      	ldr	r3, [r7, #12]
 8009fec:	685b      	ldr	r3, [r3, #4]
 8009fee:	68ba      	ldr	r2, [r7, #8]
 8009ff0:	4413      	add	r3, r2
 8009ff2:	687a      	ldr	r2, [r7, #4]
 8009ff4:	429a      	cmp	r2, r3
 8009ff6:	d108      	bne.n	800a00a <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 8009ff8:	68fb      	ldr	r3, [r7, #12]
 8009ffa:	685a      	ldr	r2, [r3, #4]
 8009ffc:	687b      	ldr	r3, [r7, #4]
 8009ffe:	685b      	ldr	r3, [r3, #4]
 800a000:	441a      	add	r2, r3
 800a002:	68fb      	ldr	r3, [r7, #12]
 800a004:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 800a006:	68fb      	ldr	r3, [r7, #12]
 800a008:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 800a00a:	687b      	ldr	r3, [r7, #4]
 800a00c:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 800a00e:	687b      	ldr	r3, [r7, #4]
 800a010:	685b      	ldr	r3, [r3, #4]
 800a012:	68ba      	ldr	r2, [r7, #8]
 800a014:	441a      	add	r2, r3
 800a016:	68fb      	ldr	r3, [r7, #12]
 800a018:	681b      	ldr	r3, [r3, #0]
 800a01a:	429a      	cmp	r2, r3
 800a01c:	d118      	bne.n	800a050 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 800a01e:	68fb      	ldr	r3, [r7, #12]
 800a020:	681a      	ldr	r2, [r3, #0]
 800a022:	4b15      	ldr	r3, [pc, #84]	@ (800a078 <prvInsertBlockIntoFreeList+0xb0>)
 800a024:	681b      	ldr	r3, [r3, #0]
 800a026:	429a      	cmp	r2, r3
 800a028:	d00d      	beq.n	800a046 <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 800a02a:	687b      	ldr	r3, [r7, #4]
 800a02c:	685a      	ldr	r2, [r3, #4]
 800a02e:	68fb      	ldr	r3, [r7, #12]
 800a030:	681b      	ldr	r3, [r3, #0]
 800a032:	685b      	ldr	r3, [r3, #4]
 800a034:	441a      	add	r2, r3
 800a036:	687b      	ldr	r3, [r7, #4]
 800a038:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 800a03a:	68fb      	ldr	r3, [r7, #12]
 800a03c:	681b      	ldr	r3, [r3, #0]
 800a03e:	681a      	ldr	r2, [r3, #0]
 800a040:	687b      	ldr	r3, [r7, #4]
 800a042:	601a      	str	r2, [r3, #0]
 800a044:	e008      	b.n	800a058 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 800a046:	4b0c      	ldr	r3, [pc, #48]	@ (800a078 <prvInsertBlockIntoFreeList+0xb0>)
 800a048:	681a      	ldr	r2, [r3, #0]
 800a04a:	687b      	ldr	r3, [r7, #4]
 800a04c:	601a      	str	r2, [r3, #0]
 800a04e:	e003      	b.n	800a058 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 800a050:	68fb      	ldr	r3, [r7, #12]
 800a052:	681a      	ldr	r2, [r3, #0]
 800a054:	687b      	ldr	r3, [r7, #4]
 800a056:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 800a058:	68fa      	ldr	r2, [r7, #12]
 800a05a:	687b      	ldr	r3, [r7, #4]
 800a05c:	429a      	cmp	r2, r3
 800a05e:	d002      	beq.n	800a066 <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 800a060:	68fb      	ldr	r3, [r7, #12]
 800a062:	687a      	ldr	r2, [r7, #4]
 800a064:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800a066:	bf00      	nop
 800a068:	3714      	adds	r7, #20
 800a06a:	46bd      	mov	sp, r7
 800a06c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a070:	4770      	bx	lr
 800a072:	bf00      	nop
 800a074:	2002e324 	.word	0x2002e324
 800a078:	2002e32c 	.word	0x2002e32c

0800a07c <ai_log_err>:

static ai_buffer* ai_input;
static ai_buffer* ai_output;

static void ai_log_err(const ai_error err, const char *fct)
{
 800a07c:	b580      	push	{r7, lr}
 800a07e:	b082      	sub	sp, #8
 800a080:	af00      	add	r7, sp, #0
 800a082:	6078      	str	r0, [r7, #4]
 800a084:	6039      	str	r1, [r7, #0]
  /* USER CODE BEGIN log */
  if (fct)
 800a086:	683b      	ldr	r3, [r7, #0]
 800a088:	2b00      	cmp	r3, #0
 800a08a:	d009      	beq.n	800a0a0 <ai_log_err+0x24>
    printf("TEMPLATE - Error (%s) - type=0x%02x code=0x%02x\r\n", fct,
        err.type, err.code);
 800a08c:	793b      	ldrb	r3, [r7, #4]
    printf("TEMPLATE - Error (%s) - type=0x%02x code=0x%02x\r\n", fct,
 800a08e:	461a      	mov	r2, r3
        err.type, err.code);
 800a090:	687b      	ldr	r3, [r7, #4]
 800a092:	f3c3 2317 	ubfx	r3, r3, #8, #24
    printf("TEMPLATE - Error (%s) - type=0x%02x code=0x%02x\r\n", fct,
 800a096:	6839      	ldr	r1, [r7, #0]
 800a098:	4807      	ldr	r0, [pc, #28]	@ (800a0b8 <ai_log_err+0x3c>)
 800a09a:	f005 fec3 	bl	800fe24 <iprintf>
 800a09e:	e009      	b.n	800a0b4 <ai_log_err+0x38>
  else
    printf("TEMPLATE - Error - type=0x%02x code=0x%02x\r\n", err.type, err.code);
 800a0a0:	793b      	ldrb	r3, [r7, #4]
 800a0a2:	4619      	mov	r1, r3
 800a0a4:	687b      	ldr	r3, [r7, #4]
 800a0a6:	f3c3 2317 	ubfx	r3, r3, #8, #24
 800a0aa:	461a      	mov	r2, r3
 800a0ac:	4803      	ldr	r0, [pc, #12]	@ (800a0bc <ai_log_err+0x40>)
 800a0ae:	f005 feb9 	bl	800fe24 <iprintf>

  do {} while (1);
 800a0b2:	bf00      	nop
 800a0b4:	bf00      	nop
 800a0b6:	e7fd      	b.n	800a0b4 <ai_log_err+0x38>
 800a0b8:	08010f30 	.word	0x08010f30
 800a0bc:	08010f64 	.word	0x08010f64

0800a0c0 <ai_boostrap>:
  /* USER CODE END log */
}

static int ai_boostrap(ai_handle *act_addr)
{
 800a0c0:	b580      	push	{r7, lr}
 800a0c2:	b086      	sub	sp, #24
 800a0c4:	af00      	add	r7, sp, #0
 800a0c6:	6078      	str	r0, [r7, #4]
  ai_error err;

  /* Create and initialize an instance of the model */
  err = ai_network_create_and_init(&network, act_addr, NULL);
 800a0c8:	2200      	movs	r2, #0
 800a0ca:	6879      	ldr	r1, [r7, #4]
 800a0cc:	4828      	ldr	r0, [pc, #160]	@ (800a170 <ai_boostrap+0xb0>)
 800a0ce:	f000 fae7 	bl	800a6a0 <ai_network_create_and_init>
 800a0d2:	4603      	mov	r3, r0
 800a0d4:	60fb      	str	r3, [r7, #12]
  if (err.type != AI_ERROR_NONE) {
 800a0d6:	7b3b      	ldrb	r3, [r7, #12]
 800a0d8:	2b00      	cmp	r3, #0
 800a0da:	d006      	beq.n	800a0ea <ai_boostrap+0x2a>
    ai_log_err(err, "ai_network_create_and_init");
 800a0dc:	4925      	ldr	r1, [pc, #148]	@ (800a174 <ai_boostrap+0xb4>)
 800a0de:	68f8      	ldr	r0, [r7, #12]
 800a0e0:	f7ff ffcc 	bl	800a07c <ai_log_err>
    return -1;
 800a0e4:	f04f 33ff 	mov.w	r3, #4294967295
 800a0e8:	e03e      	b.n	800a168 <ai_boostrap+0xa8>
  }

  ai_input = ai_network_inputs_get(network, NULL);
 800a0ea:	4b21      	ldr	r3, [pc, #132]	@ (800a170 <ai_boostrap+0xb0>)
 800a0ec:	681b      	ldr	r3, [r3, #0]
 800a0ee:	2100      	movs	r1, #0
 800a0f0:	4618      	mov	r0, r3
 800a0f2:	f000 fb53 	bl	800a79c <ai_network_inputs_get>
 800a0f6:	4603      	mov	r3, r0
 800a0f8:	4a1f      	ldr	r2, [pc, #124]	@ (800a178 <ai_boostrap+0xb8>)
 800a0fa:	6013      	str	r3, [r2, #0]
  ai_output = ai_network_outputs_get(network, NULL);
 800a0fc:	4b1c      	ldr	r3, [pc, #112]	@ (800a170 <ai_boostrap+0xb0>)
 800a0fe:	681b      	ldr	r3, [r3, #0]
 800a100:	2100      	movs	r1, #0
 800a102:	4618      	mov	r0, r3
 800a104:	f000 fb64 	bl	800a7d0 <ai_network_outputs_get>
 800a108:	4603      	mov	r3, r0
 800a10a:	4a1c      	ldr	r2, [pc, #112]	@ (800a17c <ai_boostrap+0xbc>)
 800a10c:	6013      	str	r3, [r2, #0]

#if defined(AI_NETWORK_INPUTS_IN_ACTIVATIONS)
  /*  In the case where "--allocate-inputs" option is used, memory buffer can be
   *  used from the activations buffer. This is not mandatory.
   */
  for (int idx=0; idx < AI_NETWORK_IN_NUM; idx++) {
 800a10e:	2300      	movs	r3, #0
 800a110:	617b      	str	r3, [r7, #20]
 800a112:	e00f      	b.n	800a134 <ai_boostrap+0x74>
	data_ins[idx] = ai_input[idx].data;
 800a114:	4b18      	ldr	r3, [pc, #96]	@ (800a178 <ai_boostrap+0xb8>)
 800a116:	6819      	ldr	r1, [r3, #0]
 800a118:	697a      	ldr	r2, [r7, #20]
 800a11a:	4613      	mov	r3, r2
 800a11c:	00db      	lsls	r3, r3, #3
 800a11e:	1a9b      	subs	r3, r3, r2
 800a120:	009b      	lsls	r3, r3, #2
 800a122:	440b      	add	r3, r1
 800a124:	685a      	ldr	r2, [r3, #4]
 800a126:	4916      	ldr	r1, [pc, #88]	@ (800a180 <ai_boostrap+0xc0>)
 800a128:	697b      	ldr	r3, [r7, #20]
 800a12a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  for (int idx=0; idx < AI_NETWORK_IN_NUM; idx++) {
 800a12e:	697b      	ldr	r3, [r7, #20]
 800a130:	3301      	adds	r3, #1
 800a132:	617b      	str	r3, [r7, #20]
 800a134:	697b      	ldr	r3, [r7, #20]
 800a136:	2b00      	cmp	r3, #0
 800a138:	ddec      	ble.n	800a114 <ai_boostrap+0x54>

#if defined(AI_NETWORK_OUTPUTS_IN_ACTIVATIONS)
  /*  In the case where "--allocate-outputs" option is used, memory buffer can be
   *  used from the activations buffer. This is no mandatory.
   */
  for (int idx=0; idx < AI_NETWORK_OUT_NUM; idx++) {
 800a13a:	2300      	movs	r3, #0
 800a13c:	613b      	str	r3, [r7, #16]
 800a13e:	e00f      	b.n	800a160 <ai_boostrap+0xa0>
	data_outs[idx] = ai_output[idx].data;
 800a140:	4b0e      	ldr	r3, [pc, #56]	@ (800a17c <ai_boostrap+0xbc>)
 800a142:	6819      	ldr	r1, [r3, #0]
 800a144:	693a      	ldr	r2, [r7, #16]
 800a146:	4613      	mov	r3, r2
 800a148:	00db      	lsls	r3, r3, #3
 800a14a:	1a9b      	subs	r3, r3, r2
 800a14c:	009b      	lsls	r3, r3, #2
 800a14e:	440b      	add	r3, r1
 800a150:	685a      	ldr	r2, [r3, #4]
 800a152:	490c      	ldr	r1, [pc, #48]	@ (800a184 <ai_boostrap+0xc4>)
 800a154:	693b      	ldr	r3, [r7, #16]
 800a156:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  for (int idx=0; idx < AI_NETWORK_OUT_NUM; idx++) {
 800a15a:	693b      	ldr	r3, [r7, #16]
 800a15c:	3301      	adds	r3, #1
 800a15e:	613b      	str	r3, [r7, #16]
 800a160:	693b      	ldr	r3, [r7, #16]
 800a162:	2b00      	cmp	r3, #0
 800a164:	ddec      	ble.n	800a140 <ai_boostrap+0x80>
  for (int idx=0; idx < AI_NETWORK_OUT_NUM; idx++) {
	ai_output[idx].data = data_outs[idx];
  }
#endif

  return 0;
 800a166:	2300      	movs	r3, #0
}
 800a168:	4618      	mov	r0, r3
 800a16a:	3718      	adds	r7, #24
 800a16c:	46bd      	mov	sp, r7
 800a16e:	bd80      	pop	{r7, pc}
 800a170:	20030120 	.word	0x20030120
 800a174:	08010f94 	.word	0x08010f94
 800a178:	20030124 	.word	0x20030124
 800a17c:	20030128 	.word	0x20030128
 800a180:	2002e33c 	.word	0x2002e33c
 800a184:	2002e340 	.word	0x2002e340

0800a188 <ai_run>:

static int ai_run(void)
{
 800a188:	b580      	push	{r7, lr}
 800a18a:	b082      	sub	sp, #8
 800a18c:	af00      	add	r7, sp, #0
  ai_i32 batch;

  batch = ai_network_run(network, ai_input, ai_output);
 800a18e:	4b0f      	ldr	r3, [pc, #60]	@ (800a1cc <ai_run+0x44>)
 800a190:	681b      	ldr	r3, [r3, #0]
 800a192:	4a0f      	ldr	r2, [pc, #60]	@ (800a1d0 <ai_run+0x48>)
 800a194:	6811      	ldr	r1, [r2, #0]
 800a196:	4a0f      	ldr	r2, [pc, #60]	@ (800a1d4 <ai_run+0x4c>)
 800a198:	6812      	ldr	r2, [r2, #0]
 800a19a:	4618      	mov	r0, r3
 800a19c:	f000 fb6e 	bl	800a87c <ai_network_run>
 800a1a0:	6078      	str	r0, [r7, #4]
  if (batch != 1) {
 800a1a2:	687b      	ldr	r3, [r7, #4]
 800a1a4:	2b01      	cmp	r3, #1
 800a1a6:	d00c      	beq.n	800a1c2 <ai_run+0x3a>
    ai_log_err(ai_network_get_error(network),
 800a1a8:	4b08      	ldr	r3, [pc, #32]	@ (800a1cc <ai_run+0x44>)
 800a1aa:	681b      	ldr	r3, [r3, #0]
 800a1ac:	4618      	mov	r0, r3
 800a1ae:	f000 fa55 	bl	800a65c <ai_network_get_error>
 800a1b2:	4603      	mov	r3, r0
 800a1b4:	4908      	ldr	r1, [pc, #32]	@ (800a1d8 <ai_run+0x50>)
 800a1b6:	4618      	mov	r0, r3
 800a1b8:	f7ff ff60 	bl	800a07c <ai_log_err>
        "ai_network_run");
    return -1;
 800a1bc:	f04f 33ff 	mov.w	r3, #4294967295
 800a1c0:	e000      	b.n	800a1c4 <ai_run+0x3c>
  }

  return 0;
 800a1c2:	2300      	movs	r3, #0
}
 800a1c4:	4618      	mov	r0, r3
 800a1c6:	3708      	adds	r7, #8
 800a1c8:	46bd      	mov	sp, r7
 800a1ca:	bd80      	pop	{r7, pc}
 800a1cc:	20030120 	.word	0x20030120
 800a1d0:	20030124 	.word	0x20030124
 800a1d4:	20030128 	.word	0x20030128
 800a1d8:	08010fb0 	.word	0x08010fb0

0800a1dc <acquire_and_process_data>:
extern int8_t image_buffer[28 * 28];
extern uint8_t player_guess;
extern  UART_HandleTypeDef huart3;

int acquire_and_process_data(ai_i8* data[])
{
 800a1dc:	b580      	push	{r7, lr}
 800a1de:	b084      	sub	sp, #16
 800a1e0:	af00      	add	r7, sp, #0
 800a1e2:	6078      	str	r0, [r7, #4]

	  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_0, 1);
 800a1e4:	2201      	movs	r2, #1
 800a1e6:	2101      	movs	r1, #1
 800a1e8:	4810      	ldr	r0, [pc, #64]	@ (800a22c <acquire_and_process_data+0x50>)
 800a1ea:	f7f8 fe57 	bl	8002e9c <HAL_GPIO_WritePin>


	  for (int i = 0; i < 28 * 28; i++) {
 800a1ee:	2300      	movs	r3, #0
 800a1f0:	60fb      	str	r3, [r7, #12]
 800a1f2:	e00c      	b.n	800a20e <acquire_and_process_data+0x32>

	     ((int8_t**)data)[0][i] = (int8_t)image_buffer[i];
 800a1f4:	687b      	ldr	r3, [r7, #4]
 800a1f6:	681a      	ldr	r2, [r3, #0]
 800a1f8:	68fb      	ldr	r3, [r7, #12]
 800a1fa:	4413      	add	r3, r2
 800a1fc:	490c      	ldr	r1, [pc, #48]	@ (800a230 <acquire_and_process_data+0x54>)
 800a1fe:	68fa      	ldr	r2, [r7, #12]
 800a200:	440a      	add	r2, r1
 800a202:	f992 2000 	ldrsb.w	r2, [r2]
 800a206:	701a      	strb	r2, [r3, #0]
	  for (int i = 0; i < 28 * 28; i++) {
 800a208:	68fb      	ldr	r3, [r7, #12]
 800a20a:	3301      	adds	r3, #1
 800a20c:	60fb      	str	r3, [r7, #12]
 800a20e:	68fb      	ldr	r3, [r7, #12]
 800a210:	f5b3 7f44 	cmp.w	r3, #784	@ 0x310
 800a214:	dbee      	blt.n	800a1f4 <acquire_and_process_data+0x18>

	  }

	  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_0, 0);
 800a216:	2200      	movs	r2, #0
 800a218:	2101      	movs	r1, #1
 800a21a:	4804      	ldr	r0, [pc, #16]	@ (800a22c <acquire_and_process_data+0x50>)
 800a21c:	f7f8 fe3e 	bl	8002e9c <HAL_GPIO_WritePin>

  return 0;
 800a220:	2300      	movs	r3, #0
}
 800a222:	4618      	mov	r0, r3
 800a224:	3710      	adds	r7, #16
 800a226:	46bd      	mov	sp, r7
 800a228:	bd80      	pop	{r7, pc}
 800a22a:	bf00      	nop
 800a22c:	40020400 	.word	0x40020400
 800a230:	20028ba8 	.word	0x20028ba8

0800a234 <post_process>:

int post_process(ai_i8* data[])
{
 800a234:	b580      	push	{r7, lr}
 800a236:	b08a      	sub	sp, #40	@ 0x28
 800a238:	af00      	add	r7, sp, #0
 800a23a:	6078      	str	r0, [r7, #4]

	HAL_GPIO_WritePin(GPIOB, GPIO_PIN_7, 1);
 800a23c:	2201      	movs	r2, #1
 800a23e:	2180      	movs	r1, #128	@ 0x80
 800a240:	4825      	ldr	r0, [pc, #148]	@ (800a2d8 <post_process+0xa4>)
 800a242:	f7f8 fe2b 	bl	8002e9c <HAL_GPIO_WritePin>

		    int8_t *output = data[0];
 800a246:	687b      	ldr	r3, [r7, #4]
 800a248:	681b      	ldr	r3, [r3, #0]
 800a24a:	61bb      	str	r3, [r7, #24]
		    float output_zero_point = -128.0f;
 800a24c:	f04f 4343 	mov.w	r3, #3271557120	@ 0xc3000000
 800a250:	617b      	str	r3, [r7, #20]
		    float output_scale = 0.00390625f;
 800a252:	f04f 536e 	mov.w	r3, #998244352	@ 0x3b800000
 800a256:	613b      	str	r3, [r7, #16]

		    float max_prob = -128.0f;
 800a258:	f04f 4343 	mov.w	r3, #3271557120	@ 0xc3000000
 800a25c:	627b      	str	r3, [r7, #36]	@ 0x24
		    int predicted_class = -1;
 800a25e:	f04f 33ff 	mov.w	r3, #4294967295
 800a262:	623b      	str	r3, [r7, #32]

		    for (int i = 0; i < 10; i++) {
 800a264:	2300      	movs	r3, #0
 800a266:	61fb      	str	r3, [r7, #28]
 800a268:	e022      	b.n	800a2b0 <post_process+0x7c>
		        float output_float = ((float)output[i] - output_zero_point) * output_scale;
 800a26a:	69fb      	ldr	r3, [r7, #28]
 800a26c:	69ba      	ldr	r2, [r7, #24]
 800a26e:	4413      	add	r3, r2
 800a270:	f993 3000 	ldrsb.w	r3, [r3]
 800a274:	ee07 3a90 	vmov	s15, r3
 800a278:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 800a27c:	edd7 7a05 	vldr	s15, [r7, #20]
 800a280:	ee77 7a67 	vsub.f32	s15, s14, s15
 800a284:	ed97 7a04 	vldr	s14, [r7, #16]
 800a288:	ee67 7a27 	vmul.f32	s15, s14, s15
 800a28c:	edc7 7a02 	vstr	s15, [r7, #8]

		        	if (output_float > max_prob) {
 800a290:	ed97 7a02 	vldr	s14, [r7, #8]
 800a294:	edd7 7a09 	vldr	s15, [r7, #36]	@ 0x24
 800a298:	eeb4 7ae7 	vcmpe.f32	s14, s15
 800a29c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800a2a0:	dd03      	ble.n	800a2aa <post_process+0x76>
		        	max_prob = output_float;
 800a2a2:	68bb      	ldr	r3, [r7, #8]
 800a2a4:	627b      	str	r3, [r7, #36]	@ 0x24
		            predicted_class = i;
 800a2a6:	69fb      	ldr	r3, [r7, #28]
 800a2a8:	623b      	str	r3, [r7, #32]
		    for (int i = 0; i < 10; i++) {
 800a2aa:	69fb      	ldr	r3, [r7, #28]
 800a2ac:	3301      	adds	r3, #1
 800a2ae:	61fb      	str	r3, [r7, #28]
 800a2b0:	69fb      	ldr	r3, [r7, #28]
 800a2b2:	2b09      	cmp	r3, #9
 800a2b4:	ddd9      	ble.n	800a26a <post_process+0x36>
		        	}

		    }

		    uint8_t send_data = (uint8_t)predicted_class;
 800a2b6:	6a3b      	ldr	r3, [r7, #32]
 800a2b8:	73fb      	strb	r3, [r7, #15]
		    player_guess = (uint8_t)predicted_class;
 800a2ba:	6a3b      	ldr	r3, [r7, #32]
 800a2bc:	b2da      	uxtb	r2, r3
 800a2be:	4b07      	ldr	r3, [pc, #28]	@ (800a2dc <post_process+0xa8>)
 800a2c0:	701a      	strb	r2, [r3, #0]

	//	    xQueueSend(xQueue_DigitResult, &predicted_class, portMAX_DELAY);
	//	    player_guess = predicted_class;


		    HAL_GPIO_WritePin(GPIOB, GPIO_PIN_7, 0);
 800a2c2:	2200      	movs	r2, #0
 800a2c4:	2180      	movs	r1, #128	@ 0x80
 800a2c6:	4804      	ldr	r0, [pc, #16]	@ (800a2d8 <post_process+0xa4>)
 800a2c8:	f7f8 fde8 	bl	8002e9c <HAL_GPIO_WritePin>
 return 0;
 800a2cc:	2300      	movs	r3, #0
}
 800a2ce:	4618      	mov	r0, r3
 800a2d0:	3728      	adds	r7, #40	@ 0x28
 800a2d2:	46bd      	mov	sp, r7
 800a2d4:	bd80      	pop	{r7, pc}
 800a2d6:	bf00      	nop
 800a2d8:	40020400 	.word	0x40020400
 800a2dc:	20000000 	.word	0x20000000

0800a2e0 <MX_X_CUBE_AI_Init>:
/* USER CODE END 2 */

/* Entry points --------------------------------------------------------------*/

void MX_X_CUBE_AI_Init(void)
{
 800a2e0:	b580      	push	{r7, lr}
 800a2e2:	af00      	add	r7, sp, #0
    /* USER CODE BEGIN 5 */
  //printf("\r\nTEMPLATE - initialization\r\n");

  ai_boostrap(data_activations0);
 800a2e4:	4802      	ldr	r0, [pc, #8]	@ (800a2f0 <MX_X_CUBE_AI_Init+0x10>)
 800a2e6:	f7ff feeb 	bl	800a0c0 <ai_boostrap>
    /* USER CODE END 5 */
}
 800a2ea:	bf00      	nop
 800a2ec:	bd80      	pop	{r7, pc}
 800a2ee:	bf00      	nop
 800a2f0:	20027fbc 	.word	0x20027fbc

0800a2f4 <MX_X_CUBE_AI_Process>:

void MX_X_CUBE_AI_Process(void)
{
 800a2f4:	b580      	push	{r7, lr}
 800a2f6:	b082      	sub	sp, #8
 800a2f8:	af00      	add	r7, sp, #0
    /* USER CODE BEGIN 6 */
  int res = -1;
 800a2fa:	f04f 33ff 	mov.w	r3, #4294967295
 800a2fe:	607b      	str	r3, [r7, #4]

  //printf("TEMPLATE - run - main loop\r\n");

  if (network) {
 800a300:	4b13      	ldr	r3, [pc, #76]	@ (800a350 <MX_X_CUBE_AI_Process+0x5c>)
 800a302:	681b      	ldr	r3, [r3, #0]
 800a304:	2b00      	cmp	r3, #0
 800a306:	d010      	beq.n	800a32a <MX_X_CUBE_AI_Process+0x36>

//    do {
      /* 1 - acquire and pre-process input data */
      res = acquire_and_process_data(data_ins);
 800a308:	4812      	ldr	r0, [pc, #72]	@ (800a354 <MX_X_CUBE_AI_Process+0x60>)
 800a30a:	f7ff ff67 	bl	800a1dc <acquire_and_process_data>
 800a30e:	6078      	str	r0, [r7, #4]
      /* 2 - process the data - call inference engine */
      if (res == 0)
 800a310:	687b      	ldr	r3, [r7, #4]
 800a312:	2b00      	cmp	r3, #0
 800a314:	d102      	bne.n	800a31c <MX_X_CUBE_AI_Process+0x28>
        res = ai_run();
 800a316:	f7ff ff37 	bl	800a188 <ai_run>
 800a31a:	6078      	str	r0, [r7, #4]
      /* 3- post-process the predictions */
      if (res == 0)
 800a31c:	687b      	ldr	r3, [r7, #4]
 800a31e:	2b00      	cmp	r3, #0
 800a320:	d103      	bne.n	800a32a <MX_X_CUBE_AI_Process+0x36>
        res = post_process(data_outs);
 800a322:	480d      	ldr	r0, [pc, #52]	@ (800a358 <MX_X_CUBE_AI_Process+0x64>)
 800a324:	f7ff ff86 	bl	800a234 <post_process>
 800a328:	6078      	str	r0, [r7, #4]
//    } while (res==0);
  }

  if (res) {
 800a32a:	687b      	ldr	r3, [r7, #4]
 800a32c:	2b00      	cmp	r3, #0
 800a32e:	d00a      	beq.n	800a346 <MX_X_CUBE_AI_Process+0x52>
    ai_error err = {AI_ERROR_INVALID_STATE, AI_ERROR_CODE_NETWORK};
 800a330:	2311      	movs	r3, #17
 800a332:	703b      	strb	r3, [r7, #0]
 800a334:	683b      	ldr	r3, [r7, #0]
 800a336:	2210      	movs	r2, #16
 800a338:	f362 231f 	bfi	r3, r2, #8, #24
 800a33c:	603b      	str	r3, [r7, #0]
    ai_log_err(err, "Process has FAILED");
 800a33e:	4907      	ldr	r1, [pc, #28]	@ (800a35c <MX_X_CUBE_AI_Process+0x68>)
 800a340:	6838      	ldr	r0, [r7, #0]
 800a342:	f7ff fe9b 	bl	800a07c <ai_log_err>
  }
    /* USER CODE END 6 */
}
 800a346:	bf00      	nop
 800a348:	3708      	adds	r7, #8
 800a34a:	46bd      	mov	sp, r7
 800a34c:	bd80      	pop	{r7, pc}
 800a34e:	bf00      	nop
 800a350:	20030120 	.word	0x20030120
 800a354:	2002e33c 	.word	0x2002e33c
 800a358:	2002e340 	.word	0x2002e340
 800a35c:	08010fc0 	.word	0x08010fc0

0800a360 <network_configure_activations>:

/******************************************************************************/
AI_DECLARE_STATIC
ai_bool network_configure_activations(
  ai_network* net_ctx, const ai_network_params* params)
{
 800a360:	b580      	push	{r7, lr}
 800a362:	b082      	sub	sp, #8
 800a364:	af00      	add	r7, sp, #0
 800a366:	6078      	str	r0, [r7, #4]
 800a368:	6039      	str	r1, [r7, #0]
  AI_ASSERT(net_ctx)

  if (ai_platform_get_activations_map(g_network_activations_map, 1, params)) {
 800a36a:	683a      	ldr	r2, [r7, #0]
 800a36c:	2101      	movs	r1, #1
 800a36e:	4850      	ldr	r0, [pc, #320]	@ (800a4b0 <network_configure_activations+0x150>)
 800a370:	f000 fb62 	bl	800aa38 <ai_platform_get_activations_map>
 800a374:	4603      	mov	r3, r0
 800a376:	2b00      	cmp	r3, #0
 800a378:	f000 8090 	beq.w	800a49c <network_configure_activations+0x13c>
    /* Updating activations (byte) offsets */
    
    serving_default_input_layer0_output_array.data = AI_PTR(g_network_activations_map[0] + 640);
 800a37c:	4b4c      	ldr	r3, [pc, #304]	@ (800a4b0 <network_configure_activations+0x150>)
 800a37e:	681b      	ldr	r3, [r3, #0]
 800a380:	f503 7320 	add.w	r3, r3, #640	@ 0x280
 800a384:	4a4b      	ldr	r2, [pc, #300]	@ (800a4b4 <network_configure_activations+0x154>)
 800a386:	6093      	str	r3, [r2, #8]
    serving_default_input_layer0_output_array.data_start = AI_PTR(g_network_activations_map[0] + 640);
 800a388:	4b49      	ldr	r3, [pc, #292]	@ (800a4b0 <network_configure_activations+0x150>)
 800a38a:	681b      	ldr	r3, [r3, #0]
 800a38c:	f503 7320 	add.w	r3, r3, #640	@ 0x280
 800a390:	4a48      	ldr	r2, [pc, #288]	@ (800a4b4 <network_configure_activations+0x154>)
 800a392:	60d3      	str	r3, [r2, #12]
    conv2d_0_scratch0_array.data = AI_PTR(g_network_activations_map[0] + 1424);
 800a394:	4b46      	ldr	r3, [pc, #280]	@ (800a4b0 <network_configure_activations+0x150>)
 800a396:	681b      	ldr	r3, [r3, #0]
 800a398:	f503 63b2 	add.w	r3, r3, #1424	@ 0x590
 800a39c:	4a46      	ldr	r2, [pc, #280]	@ (800a4b8 <network_configure_activations+0x158>)
 800a39e:	6093      	str	r3, [r2, #8]
    conv2d_0_scratch0_array.data_start = AI_PTR(g_network_activations_map[0] + 1424);
 800a3a0:	4b43      	ldr	r3, [pc, #268]	@ (800a4b0 <network_configure_activations+0x150>)
 800a3a2:	681b      	ldr	r3, [r3, #0]
 800a3a4:	f503 63b2 	add.w	r3, r3, #1424	@ 0x590
 800a3a8:	4a43      	ldr	r2, [pc, #268]	@ (800a4b8 <network_configure_activations+0x158>)
 800a3aa:	60d3      	str	r3, [r2, #12]
    conv2d_0_scratch1_array.data = AI_PTR(g_network_activations_map[0] + 2036);
 800a3ac:	4b40      	ldr	r3, [pc, #256]	@ (800a4b0 <network_configure_activations+0x150>)
 800a3ae:	681b      	ldr	r3, [r3, #0]
 800a3b0:	f203 73f4 	addw	r3, r3, #2036	@ 0x7f4
 800a3b4:	4a41      	ldr	r2, [pc, #260]	@ (800a4bc <network_configure_activations+0x15c>)
 800a3b6:	6093      	str	r3, [r2, #8]
    conv2d_0_scratch1_array.data_start = AI_PTR(g_network_activations_map[0] + 2036);
 800a3b8:	4b3d      	ldr	r3, [pc, #244]	@ (800a4b0 <network_configure_activations+0x150>)
 800a3ba:	681b      	ldr	r3, [r3, #0]
 800a3bc:	f203 73f4 	addw	r3, r3, #2036	@ 0x7f4
 800a3c0:	4a3e      	ldr	r2, [pc, #248]	@ (800a4bc <network_configure_activations+0x15c>)
 800a3c2:	60d3      	str	r3, [r2, #12]
    conv2d_0_output_array.data = AI_PTR(g_network_activations_map[0] + 64);
 800a3c4:	4b3a      	ldr	r3, [pc, #232]	@ (800a4b0 <network_configure_activations+0x150>)
 800a3c6:	681b      	ldr	r3, [r3, #0]
 800a3c8:	3340      	adds	r3, #64	@ 0x40
 800a3ca:	4a3d      	ldr	r2, [pc, #244]	@ (800a4c0 <network_configure_activations+0x160>)
 800a3cc:	6093      	str	r3, [r2, #8]
    conv2d_0_output_array.data_start = AI_PTR(g_network_activations_map[0] + 64);
 800a3ce:	4b38      	ldr	r3, [pc, #224]	@ (800a4b0 <network_configure_activations+0x150>)
 800a3d0:	681b      	ldr	r3, [r3, #0]
 800a3d2:	3340      	adds	r3, #64	@ 0x40
 800a3d4:	4a3a      	ldr	r2, [pc, #232]	@ (800a4c0 <network_configure_activations+0x160>)
 800a3d6:	60d3      	str	r3, [r2, #12]
    conv2d_2_scratch0_array.data = AI_PTR(g_network_activations_map[0] + 1216);
 800a3d8:	4b35      	ldr	r3, [pc, #212]	@ (800a4b0 <network_configure_activations+0x150>)
 800a3da:	681b      	ldr	r3, [r3, #0]
 800a3dc:	f503 6398 	add.w	r3, r3, #1216	@ 0x4c0
 800a3e0:	4a38      	ldr	r2, [pc, #224]	@ (800a4c4 <network_configure_activations+0x164>)
 800a3e2:	6093      	str	r3, [r2, #8]
    conv2d_2_scratch0_array.data_start = AI_PTR(g_network_activations_map[0] + 1216);
 800a3e4:	4b32      	ldr	r3, [pc, #200]	@ (800a4b0 <network_configure_activations+0x150>)
 800a3e6:	681b      	ldr	r3, [r3, #0]
 800a3e8:	f503 6398 	add.w	r3, r3, #1216	@ 0x4c0
 800a3ec:	4a35      	ldr	r2, [pc, #212]	@ (800a4c4 <network_configure_activations+0x164>)
 800a3ee:	60d3      	str	r3, [r2, #12]
    conv2d_2_scratch1_array.data = AI_PTR(g_network_activations_map[0] + 7360);
 800a3f0:	4b2f      	ldr	r3, [pc, #188]	@ (800a4b0 <network_configure_activations+0x150>)
 800a3f2:	681b      	ldr	r3, [r3, #0]
 800a3f4:	f503 53e6 	add.w	r3, r3, #7360	@ 0x1cc0
 800a3f8:	4a33      	ldr	r2, [pc, #204]	@ (800a4c8 <network_configure_activations+0x168>)
 800a3fa:	6093      	str	r3, [r2, #8]
    conv2d_2_scratch1_array.data_start = AI_PTR(g_network_activations_map[0] + 7360);
 800a3fc:	4b2c      	ldr	r3, [pc, #176]	@ (800a4b0 <network_configure_activations+0x150>)
 800a3fe:	681b      	ldr	r3, [r3, #0]
 800a400:	f503 53e6 	add.w	r3, r3, #7360	@ 0x1cc0
 800a404:	4a30      	ldr	r2, [pc, #192]	@ (800a4c8 <network_configure_activations+0x168>)
 800a406:	60d3      	str	r3, [r2, #12]
    conv2d_2_output_array.data = AI_PTR(g_network_activations_map[0] + 0);
 800a408:	4b29      	ldr	r3, [pc, #164]	@ (800a4b0 <network_configure_activations+0x150>)
 800a40a:	681b      	ldr	r3, [r3, #0]
 800a40c:	4a2f      	ldr	r2, [pc, #188]	@ (800a4cc <network_configure_activations+0x16c>)
 800a40e:	6093      	str	r3, [r2, #8]
    conv2d_2_output_array.data_start = AI_PTR(g_network_activations_map[0] + 0);
 800a410:	4b27      	ldr	r3, [pc, #156]	@ (800a4b0 <network_configure_activations+0x150>)
 800a412:	681b      	ldr	r3, [r3, #0]
 800a414:	4a2d      	ldr	r2, [pc, #180]	@ (800a4cc <network_configure_activations+0x16c>)
 800a416:	60d3      	str	r3, [r2, #12]
    gemm_5_scratch0_array.data = AI_PTR(g_network_activations_map[0] + 256);
 800a418:	4b25      	ldr	r3, [pc, #148]	@ (800a4b0 <network_configure_activations+0x150>)
 800a41a:	681b      	ldr	r3, [r3, #0]
 800a41c:	f503 7380 	add.w	r3, r3, #256	@ 0x100
 800a420:	4a2b      	ldr	r2, [pc, #172]	@ (800a4d0 <network_configure_activations+0x170>)
 800a422:	6093      	str	r3, [r2, #8]
    gemm_5_scratch0_array.data_start = AI_PTR(g_network_activations_map[0] + 256);
 800a424:	4b22      	ldr	r3, [pc, #136]	@ (800a4b0 <network_configure_activations+0x150>)
 800a426:	681b      	ldr	r3, [r3, #0]
 800a428:	f503 7380 	add.w	r3, r3, #256	@ 0x100
 800a42c:	4a28      	ldr	r2, [pc, #160]	@ (800a4d0 <network_configure_activations+0x170>)
 800a42e:	60d3      	str	r3, [r2, #12]
    gemm_5_output_array.data = AI_PTR(g_network_activations_map[0] + 2048);
 800a430:	4b1f      	ldr	r3, [pc, #124]	@ (800a4b0 <network_configure_activations+0x150>)
 800a432:	681b      	ldr	r3, [r3, #0]
 800a434:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800a438:	4a26      	ldr	r2, [pc, #152]	@ (800a4d4 <network_configure_activations+0x174>)
 800a43a:	6093      	str	r3, [r2, #8]
    gemm_5_output_array.data_start = AI_PTR(g_network_activations_map[0] + 2048);
 800a43c:	4b1c      	ldr	r3, [pc, #112]	@ (800a4b0 <network_configure_activations+0x150>)
 800a43e:	681b      	ldr	r3, [r3, #0]
 800a440:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800a444:	4a23      	ldr	r2, [pc, #140]	@ (800a4d4 <network_configure_activations+0x174>)
 800a446:	60d3      	str	r3, [r2, #12]
    gemm_6_scratch0_array.data = AI_PTR(g_network_activations_map[0] + 0);
 800a448:	4b19      	ldr	r3, [pc, #100]	@ (800a4b0 <network_configure_activations+0x150>)
 800a44a:	681b      	ldr	r3, [r3, #0]
 800a44c:	4a22      	ldr	r2, [pc, #136]	@ (800a4d8 <network_configure_activations+0x178>)
 800a44e:	6093      	str	r3, [r2, #8]
    gemm_6_scratch0_array.data_start = AI_PTR(g_network_activations_map[0] + 0);
 800a450:	4b17      	ldr	r3, [pc, #92]	@ (800a4b0 <network_configure_activations+0x150>)
 800a452:	681b      	ldr	r3, [r3, #0]
 800a454:	4a20      	ldr	r2, [pc, #128]	@ (800a4d8 <network_configure_activations+0x178>)
 800a456:	60d3      	str	r3, [r2, #12]
    gemm_6_output_array.data = AI_PTR(g_network_activations_map[0] + 356);
 800a458:	4b15      	ldr	r3, [pc, #84]	@ (800a4b0 <network_configure_activations+0x150>)
 800a45a:	681b      	ldr	r3, [r3, #0]
 800a45c:	f503 73b2 	add.w	r3, r3, #356	@ 0x164
 800a460:	4a1e      	ldr	r2, [pc, #120]	@ (800a4dc <network_configure_activations+0x17c>)
 800a462:	6093      	str	r3, [r2, #8]
    gemm_6_output_array.data_start = AI_PTR(g_network_activations_map[0] + 356);
 800a464:	4b12      	ldr	r3, [pc, #72]	@ (800a4b0 <network_configure_activations+0x150>)
 800a466:	681b      	ldr	r3, [r3, #0]
 800a468:	f503 73b2 	add.w	r3, r3, #356	@ 0x164
 800a46c:	4a1b      	ldr	r2, [pc, #108]	@ (800a4dc <network_configure_activations+0x17c>)
 800a46e:	60d3      	str	r3, [r2, #12]
    nl_7_scratch0_array.data = AI_PTR(g_network_activations_map[0] + 368);
 800a470:	4b0f      	ldr	r3, [pc, #60]	@ (800a4b0 <network_configure_activations+0x150>)
 800a472:	681b      	ldr	r3, [r3, #0]
 800a474:	f503 73b8 	add.w	r3, r3, #368	@ 0x170
 800a478:	4a19      	ldr	r2, [pc, #100]	@ (800a4e0 <network_configure_activations+0x180>)
 800a47a:	6093      	str	r3, [r2, #8]
    nl_7_scratch0_array.data_start = AI_PTR(g_network_activations_map[0] + 368);
 800a47c:	4b0c      	ldr	r3, [pc, #48]	@ (800a4b0 <network_configure_activations+0x150>)
 800a47e:	681b      	ldr	r3, [r3, #0]
 800a480:	f503 73b8 	add.w	r3, r3, #368	@ 0x170
 800a484:	4a16      	ldr	r2, [pc, #88]	@ (800a4e0 <network_configure_activations+0x180>)
 800a486:	60d3      	str	r3, [r2, #12]
    nl_7_output_array.data = AI_PTR(g_network_activations_map[0] + 0);
 800a488:	4b09      	ldr	r3, [pc, #36]	@ (800a4b0 <network_configure_activations+0x150>)
 800a48a:	681b      	ldr	r3, [r3, #0]
 800a48c:	4a15      	ldr	r2, [pc, #84]	@ (800a4e4 <network_configure_activations+0x184>)
 800a48e:	6093      	str	r3, [r2, #8]
    nl_7_output_array.data_start = AI_PTR(g_network_activations_map[0] + 0);
 800a490:	4b07      	ldr	r3, [pc, #28]	@ (800a4b0 <network_configure_activations+0x150>)
 800a492:	681b      	ldr	r3, [r3, #0]
 800a494:	4a13      	ldr	r2, [pc, #76]	@ (800a4e4 <network_configure_activations+0x184>)
 800a496:	60d3      	str	r3, [r2, #12]
    return true;
 800a498:	2301      	movs	r3, #1
 800a49a:	e005      	b.n	800a4a8 <network_configure_activations+0x148>
  }
  AI_ERROR_TRAP(net_ctx, INIT_FAILED, NETWORK_ACTIVATIONS);
 800a49c:	2213      	movs	r2, #19
 800a49e:	2130      	movs	r1, #48	@ 0x30
 800a4a0:	6878      	ldr	r0, [r7, #4]
 800a4a2:	f000 fb47 	bl	800ab34 <ai_platform_network_set_error>
  return false;
 800a4a6:	2300      	movs	r3, #0
}
 800a4a8:	4618      	mov	r0, r3
 800a4aa:	3708      	adds	r7, #8
 800a4ac:	46bd      	mov	sp, r7
 800a4ae:	bd80      	pop	{r7, pc}
 800a4b0:	2003012c 	.word	0x2003012c
 800a4b4:	20027fc0 	.word	0x20027fc0
 800a4b8:	200280a0 	.word	0x200280a0
 800a4bc:	200280b0 	.word	0x200280b0
 800a4c0:	20027fd0 	.word	0x20027fd0
 800a4c4:	200280c0 	.word	0x200280c0
 800a4c8:	200280d0 	.word	0x200280d0
 800a4cc:	20027fe0 	.word	0x20027fe0
 800a4d0:	200280e0 	.word	0x200280e0
 800a4d4:	20027ff0 	.word	0x20027ff0
 800a4d8:	200280f0 	.word	0x200280f0
 800a4dc:	20028000 	.word	0x20028000
 800a4e0:	20028100 	.word	0x20028100
 800a4e4:	20028010 	.word	0x20028010

0800a4e8 <network_configure_weights>:

/******************************************************************************/
AI_DECLARE_STATIC
ai_bool network_configure_weights(
  ai_network* net_ctx, const ai_network_params* params)
{
 800a4e8:	b580      	push	{r7, lr}
 800a4ea:	b082      	sub	sp, #8
 800a4ec:	af00      	add	r7, sp, #0
 800a4ee:	6078      	str	r0, [r7, #4]
 800a4f0:	6039      	str	r1, [r7, #0]
  AI_ASSERT(net_ctx)

  if (ai_platform_get_weights_map(g_network_weights_map, 1, params)) {
 800a4f2:	683a      	ldr	r2, [r7, #0]
 800a4f4:	2101      	movs	r1, #1
 800a4f6:	4850      	ldr	r0, [pc, #320]	@ (800a638 <network_configure_weights+0x150>)
 800a4f8:	f000 fa46 	bl	800a988 <ai_platform_get_weights_map>
 800a4fc:	4603      	mov	r3, r0
 800a4fe:	2b00      	cmp	r3, #0
 800a500:	f000 8090 	beq.w	800a624 <network_configure_weights+0x13c>
    /* Updating weights (byte) offsets */
    
    conv2d_0_weights_array.format |= AI_FMT_FLAG_CONST;
 800a504:	4b4d      	ldr	r3, [pc, #308]	@ (800a63c <network_configure_weights+0x154>)
 800a506:	681b      	ldr	r3, [r3, #0]
 800a508:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 800a50c:	4a4b      	ldr	r2, [pc, #300]	@ (800a63c <network_configure_weights+0x154>)
 800a50e:	6013      	str	r3, [r2, #0]
    conv2d_0_weights_array.data = AI_PTR(g_network_weights_map[0] + 0);
 800a510:	4b49      	ldr	r3, [pc, #292]	@ (800a638 <network_configure_weights+0x150>)
 800a512:	681b      	ldr	r3, [r3, #0]
 800a514:	4a49      	ldr	r2, [pc, #292]	@ (800a63c <network_configure_weights+0x154>)
 800a516:	6093      	str	r3, [r2, #8]
    conv2d_0_weights_array.data_start = AI_PTR(g_network_weights_map[0] + 0);
 800a518:	4b47      	ldr	r3, [pc, #284]	@ (800a638 <network_configure_weights+0x150>)
 800a51a:	681b      	ldr	r3, [r3, #0]
 800a51c:	4a47      	ldr	r2, [pc, #284]	@ (800a63c <network_configure_weights+0x154>)
 800a51e:	60d3      	str	r3, [r2, #12]
    conv2d_0_bias_array.format |= AI_FMT_FLAG_CONST;
 800a520:	4b47      	ldr	r3, [pc, #284]	@ (800a640 <network_configure_weights+0x158>)
 800a522:	681b      	ldr	r3, [r3, #0]
 800a524:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 800a528:	4a45      	ldr	r2, [pc, #276]	@ (800a640 <network_configure_weights+0x158>)
 800a52a:	6013      	str	r3, [r2, #0]
    conv2d_0_bias_array.data = AI_PTR(g_network_weights_map[0] + 200);
 800a52c:	4b42      	ldr	r3, [pc, #264]	@ (800a638 <network_configure_weights+0x150>)
 800a52e:	681b      	ldr	r3, [r3, #0]
 800a530:	33c8      	adds	r3, #200	@ 0xc8
 800a532:	4a43      	ldr	r2, [pc, #268]	@ (800a640 <network_configure_weights+0x158>)
 800a534:	6093      	str	r3, [r2, #8]
    conv2d_0_bias_array.data_start = AI_PTR(g_network_weights_map[0] + 200);
 800a536:	4b40      	ldr	r3, [pc, #256]	@ (800a638 <network_configure_weights+0x150>)
 800a538:	681b      	ldr	r3, [r3, #0]
 800a53a:	33c8      	adds	r3, #200	@ 0xc8
 800a53c:	4a40      	ldr	r2, [pc, #256]	@ (800a640 <network_configure_weights+0x158>)
 800a53e:	60d3      	str	r3, [r2, #12]
    conv2d_2_weights_array.format |= AI_FMT_FLAG_CONST;
 800a540:	4b40      	ldr	r3, [pc, #256]	@ (800a644 <network_configure_weights+0x15c>)
 800a542:	681b      	ldr	r3, [r3, #0]
 800a544:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 800a548:	4a3e      	ldr	r2, [pc, #248]	@ (800a644 <network_configure_weights+0x15c>)
 800a54a:	6013      	str	r3, [r2, #0]
    conv2d_2_weights_array.data = AI_PTR(g_network_weights_map[0] + 232);
 800a54c:	4b3a      	ldr	r3, [pc, #232]	@ (800a638 <network_configure_weights+0x150>)
 800a54e:	681b      	ldr	r3, [r3, #0]
 800a550:	33e8      	adds	r3, #232	@ 0xe8
 800a552:	4a3c      	ldr	r2, [pc, #240]	@ (800a644 <network_configure_weights+0x15c>)
 800a554:	6093      	str	r3, [r2, #8]
    conv2d_2_weights_array.data_start = AI_PTR(g_network_weights_map[0] + 232);
 800a556:	4b38      	ldr	r3, [pc, #224]	@ (800a638 <network_configure_weights+0x150>)
 800a558:	681b      	ldr	r3, [r3, #0]
 800a55a:	33e8      	adds	r3, #232	@ 0xe8
 800a55c:	4a39      	ldr	r2, [pc, #228]	@ (800a644 <network_configure_weights+0x15c>)
 800a55e:	60d3      	str	r3, [r2, #12]
    conv2d_2_bias_array.format |= AI_FMT_FLAG_CONST;
 800a560:	4b39      	ldr	r3, [pc, #228]	@ (800a648 <network_configure_weights+0x160>)
 800a562:	681b      	ldr	r3, [r3, #0]
 800a564:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 800a568:	4a37      	ldr	r2, [pc, #220]	@ (800a648 <network_configure_weights+0x160>)
 800a56a:	6013      	str	r3, [r2, #0]
    conv2d_2_bias_array.data = AI_PTR(g_network_weights_map[0] + 3432);
 800a56c:	4b32      	ldr	r3, [pc, #200]	@ (800a638 <network_configure_weights+0x150>)
 800a56e:	681b      	ldr	r3, [r3, #0]
 800a570:	f603 5368 	addw	r3, r3, #3432	@ 0xd68
 800a574:	4a34      	ldr	r2, [pc, #208]	@ (800a648 <network_configure_weights+0x160>)
 800a576:	6093      	str	r3, [r2, #8]
    conv2d_2_bias_array.data_start = AI_PTR(g_network_weights_map[0] + 3432);
 800a578:	4b2f      	ldr	r3, [pc, #188]	@ (800a638 <network_configure_weights+0x150>)
 800a57a:	681b      	ldr	r3, [r3, #0]
 800a57c:	f603 5368 	addw	r3, r3, #3432	@ 0xd68
 800a580:	4a31      	ldr	r2, [pc, #196]	@ (800a648 <network_configure_weights+0x160>)
 800a582:	60d3      	str	r3, [r2, #12]
    gemm_5_weights_array.format |= AI_FMT_FLAG_CONST;
 800a584:	4b31      	ldr	r3, [pc, #196]	@ (800a64c <network_configure_weights+0x164>)
 800a586:	681b      	ldr	r3, [r3, #0]
 800a588:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 800a58c:	4a2f      	ldr	r2, [pc, #188]	@ (800a64c <network_configure_weights+0x164>)
 800a58e:	6013      	str	r3, [r2, #0]
    gemm_5_weights_array.data = AI_PTR(g_network_weights_map[0] + 3496);
 800a590:	4b29      	ldr	r3, [pc, #164]	@ (800a638 <network_configure_weights+0x150>)
 800a592:	681b      	ldr	r3, [r3, #0]
 800a594:	f603 53a8 	addw	r3, r3, #3496	@ 0xda8
 800a598:	4a2c      	ldr	r2, [pc, #176]	@ (800a64c <network_configure_weights+0x164>)
 800a59a:	6093      	str	r3, [r2, #8]
    gemm_5_weights_array.data_start = AI_PTR(g_network_weights_map[0] + 3496);
 800a59c:	4b26      	ldr	r3, [pc, #152]	@ (800a638 <network_configure_weights+0x150>)
 800a59e:	681b      	ldr	r3, [r3, #0]
 800a5a0:	f603 53a8 	addw	r3, r3, #3496	@ 0xda8
 800a5a4:	4a29      	ldr	r2, [pc, #164]	@ (800a64c <network_configure_weights+0x164>)
 800a5a6:	60d3      	str	r3, [r2, #12]
    gemm_5_bias_array.format |= AI_FMT_FLAG_CONST;
 800a5a8:	4b29      	ldr	r3, [pc, #164]	@ (800a650 <network_configure_weights+0x168>)
 800a5aa:	681b      	ldr	r3, [r3, #0]
 800a5ac:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 800a5b0:	4a27      	ldr	r2, [pc, #156]	@ (800a650 <network_configure_weights+0x168>)
 800a5b2:	6013      	str	r3, [r2, #0]
    gemm_5_bias_array.data = AI_PTR(g_network_weights_map[0] + 36264);
 800a5b4:	4b20      	ldr	r3, [pc, #128]	@ (800a638 <network_configure_weights+0x150>)
 800a5b6:	681a      	ldr	r2, [r3, #0]
 800a5b8:	f648 53a8 	movw	r3, #36264	@ 0x8da8
 800a5bc:	4413      	add	r3, r2
 800a5be:	4a24      	ldr	r2, [pc, #144]	@ (800a650 <network_configure_weights+0x168>)
 800a5c0:	6093      	str	r3, [r2, #8]
    gemm_5_bias_array.data_start = AI_PTR(g_network_weights_map[0] + 36264);
 800a5c2:	4b1d      	ldr	r3, [pc, #116]	@ (800a638 <network_configure_weights+0x150>)
 800a5c4:	681a      	ldr	r2, [r3, #0]
 800a5c6:	f648 53a8 	movw	r3, #36264	@ 0x8da8
 800a5ca:	4413      	add	r3, r2
 800a5cc:	4a20      	ldr	r2, [pc, #128]	@ (800a650 <network_configure_weights+0x168>)
 800a5ce:	60d3      	str	r3, [r2, #12]
    gemm_6_weights_array.format |= AI_FMT_FLAG_CONST;
 800a5d0:	4b20      	ldr	r3, [pc, #128]	@ (800a654 <network_configure_weights+0x16c>)
 800a5d2:	681b      	ldr	r3, [r3, #0]
 800a5d4:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 800a5d8:	4a1e      	ldr	r2, [pc, #120]	@ (800a654 <network_configure_weights+0x16c>)
 800a5da:	6013      	str	r3, [r2, #0]
    gemm_6_weights_array.data = AI_PTR(g_network_weights_map[0] + 36776);
 800a5dc:	4b16      	ldr	r3, [pc, #88]	@ (800a638 <network_configure_weights+0x150>)
 800a5de:	681a      	ldr	r2, [r3, #0]
 800a5e0:	f648 73a8 	movw	r3, #36776	@ 0x8fa8
 800a5e4:	4413      	add	r3, r2
 800a5e6:	4a1b      	ldr	r2, [pc, #108]	@ (800a654 <network_configure_weights+0x16c>)
 800a5e8:	6093      	str	r3, [r2, #8]
    gemm_6_weights_array.data_start = AI_PTR(g_network_weights_map[0] + 36776);
 800a5ea:	4b13      	ldr	r3, [pc, #76]	@ (800a638 <network_configure_weights+0x150>)
 800a5ec:	681a      	ldr	r2, [r3, #0]
 800a5ee:	f648 73a8 	movw	r3, #36776	@ 0x8fa8
 800a5f2:	4413      	add	r3, r2
 800a5f4:	4a17      	ldr	r2, [pc, #92]	@ (800a654 <network_configure_weights+0x16c>)
 800a5f6:	60d3      	str	r3, [r2, #12]
    gemm_6_bias_array.format |= AI_FMT_FLAG_CONST;
 800a5f8:	4b17      	ldr	r3, [pc, #92]	@ (800a658 <network_configure_weights+0x170>)
 800a5fa:	681b      	ldr	r3, [r3, #0]
 800a5fc:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 800a600:	4a15      	ldr	r2, [pc, #84]	@ (800a658 <network_configure_weights+0x170>)
 800a602:	6013      	str	r3, [r2, #0]
    gemm_6_bias_array.data = AI_PTR(g_network_weights_map[0] + 38056);
 800a604:	4b0c      	ldr	r3, [pc, #48]	@ (800a638 <network_configure_weights+0x150>)
 800a606:	681a      	ldr	r2, [r3, #0]
 800a608:	f249 43a8 	movw	r3, #38056	@ 0x94a8
 800a60c:	4413      	add	r3, r2
 800a60e:	4a12      	ldr	r2, [pc, #72]	@ (800a658 <network_configure_weights+0x170>)
 800a610:	6093      	str	r3, [r2, #8]
    gemm_6_bias_array.data_start = AI_PTR(g_network_weights_map[0] + 38056);
 800a612:	4b09      	ldr	r3, [pc, #36]	@ (800a638 <network_configure_weights+0x150>)
 800a614:	681a      	ldr	r2, [r3, #0]
 800a616:	f249 43a8 	movw	r3, #38056	@ 0x94a8
 800a61a:	4413      	add	r3, r2
 800a61c:	4a0e      	ldr	r2, [pc, #56]	@ (800a658 <network_configure_weights+0x170>)
 800a61e:	60d3      	str	r3, [r2, #12]
    return true;
 800a620:	2301      	movs	r3, #1
 800a622:	e005      	b.n	800a630 <network_configure_weights+0x148>
  }
  AI_ERROR_TRAP(net_ctx, INIT_FAILED, NETWORK_WEIGHTS);
 800a624:	2212      	movs	r2, #18
 800a626:	2130      	movs	r1, #48	@ 0x30
 800a628:	6878      	ldr	r0, [r7, #4]
 800a62a:	f000 fa83 	bl	800ab34 <ai_platform_network_set_error>
  return false;
 800a62e:	2300      	movs	r3, #0
}
 800a630:	4618      	mov	r0, r3
 800a632:	3708      	adds	r7, #8
 800a634:	46bd      	mov	sp, r7
 800a636:	bd80      	pop	{r7, pc}
 800a638:	20030130 	.word	0x20030130
 800a63c:	20028020 	.word	0x20028020
 800a640:	20028030 	.word	0x20028030
 800a644:	20028040 	.word	0x20028040
 800a648:	20028050 	.word	0x20028050
 800a64c:	20028060 	.word	0x20028060
 800a650:	20028070 	.word	0x20028070
 800a654:	20028080 	.word	0x20028080
 800a658:	20028090 	.word	0x20028090

0800a65c <ai_network_get_error>:
}


AI_API_ENTRY
ai_error ai_network_get_error(ai_handle network)
{
 800a65c:	b580      	push	{r7, lr}
 800a65e:	b082      	sub	sp, #8
 800a660:	af00      	add	r7, sp, #0
 800a662:	6078      	str	r0, [r7, #4]
  return ai_platform_network_get_error(network);
 800a664:	6878      	ldr	r0, [r7, #4]
 800a666:	f000 fa59 	bl	800ab1c <ai_platform_network_get_error>
 800a66a:	4603      	mov	r3, r0
}
 800a66c:	4618      	mov	r0, r3
 800a66e:	3708      	adds	r7, #8
 800a670:	46bd      	mov	sp, r7
 800a672:	bd80      	pop	{r7, pc}

0800a674 <ai_network_create>:


AI_API_ENTRY
ai_error ai_network_create(
  ai_handle* network, const ai_buffer* network_config)
{
 800a674:	b580      	push	{r7, lr}
 800a676:	b084      	sub	sp, #16
 800a678:	af02      	add	r7, sp, #8
 800a67a:	6078      	str	r0, [r7, #4]
 800a67c:	6039      	str	r1, [r7, #0]
  return ai_platform_network_create(
 800a67e:	2300      	movs	r3, #0
 800a680:	9301      	str	r3, [sp, #4]
 800a682:	2305      	movs	r3, #5
 800a684:	9300      	str	r3, [sp, #0]
 800a686:	2301      	movs	r3, #1
 800a688:	4a04      	ldr	r2, [pc, #16]	@ (800a69c <ai_network_create+0x28>)
 800a68a:	6839      	ldr	r1, [r7, #0]
 800a68c:	6878      	ldr	r0, [r7, #4]
 800a68e:	f000 fb45 	bl	800ad1c <ai_platform_network_create>
 800a692:	4603      	mov	r3, r0
    network, network_config, 
    AI_CONTEXT_OBJ(&AI_NET_OBJ_INSTANCE),
    AI_TOOLS_API_VERSION_MAJOR, AI_TOOLS_API_VERSION_MINOR, AI_TOOLS_API_VERSION_MICRO);
}
 800a694:	4618      	mov	r0, r3
 800a696:	3708      	adds	r7, #8
 800a698:	46bd      	mov	sp, r7
 800a69a:	bd80      	pop	{r7, pc}
 800a69c:	20028940 	.word	0x20028940

0800a6a0 <ai_network_create_and_init>:


AI_API_ENTRY
ai_error ai_network_create_and_init(
  ai_handle* network, const ai_handle activations[], const ai_handle weights[])
{
 800a6a0:	b580      	push	{r7, lr}
 800a6a2:	b094      	sub	sp, #80	@ 0x50
 800a6a4:	af00      	add	r7, sp, #0
 800a6a6:	60f8      	str	r0, [r7, #12]
 800a6a8:	60b9      	str	r1, [r7, #8]
 800a6aa:	607a      	str	r2, [r7, #4]
  ai_error err;
  ai_network_params params;

  err = ai_network_create(network, AI_NETWORK_DATA_CONFIG);
 800a6ac:	2100      	movs	r1, #0
 800a6ae:	68f8      	ldr	r0, [r7, #12]
 800a6b0:	f7ff ffe0 	bl	800a674 <ai_network_create>
 800a6b4:	4603      	mov	r3, r0
 800a6b6:	64bb      	str	r3, [r7, #72]	@ 0x48
  if (err.type != AI_ERROR_NONE) {
 800a6b8:	f897 3048 	ldrb.w	r3, [r7, #72]	@ 0x48
 800a6bc:	2b00      	cmp	r3, #0
 800a6be:	d001      	beq.n	800a6c4 <ai_network_create_and_init+0x24>
    return err;
 800a6c0:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800a6c2:	e067      	b.n	800a794 <ai_network_create_and_init+0xf4>
  }
  
  if (ai_network_data_params_get(&params) != true) {
 800a6c4:	f107 0310 	add.w	r3, r7, #16
 800a6c8:	4618      	mov	r0, r3
 800a6ca:	f000 f8e7 	bl	800a89c <ai_network_data_params_get>
 800a6ce:	4603      	mov	r3, r0
 800a6d0:	f083 0301 	eor.w	r3, r3, #1
 800a6d4:	b2db      	uxtb	r3, r3
 800a6d6:	2b00      	cmp	r3, #0
 800a6d8:	d008      	beq.n	800a6ec <ai_network_create_and_init+0x4c>
    err = ai_network_get_error(*network);
 800a6da:	68fb      	ldr	r3, [r7, #12]
 800a6dc:	681b      	ldr	r3, [r3, #0]
 800a6de:	4618      	mov	r0, r3
 800a6e0:	f7ff ffbc 	bl	800a65c <ai_network_get_error>
 800a6e4:	4603      	mov	r3, r0
 800a6e6:	64bb      	str	r3, [r7, #72]	@ 0x48
    return err;
 800a6e8:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800a6ea:	e053      	b.n	800a794 <ai_network_create_and_init+0xf4>
  }
#if defined(AI_NETWORK_DATA_ACTIVATIONS_COUNT)
  /* set the addresses of the activations buffers */
  for (ai_u16 idx=0; activations && idx<params.map_activations.size; idx++) {
 800a6ec:	2300      	movs	r3, #0
 800a6ee:	f8a7 304e 	strh.w	r3, [r7, #78]	@ 0x4e
 800a6f2:	e012      	b.n	800a71a <ai_network_create_and_init+0x7a>
    AI_BUFFER_ARRAY_ITEM_SET_ADDRESS(&params.map_activations, idx, activations[idx]);
 800a6f4:	f8b7 104e 	ldrh.w	r1, [r7, #78]	@ 0x4e
 800a6f8:	f8b7 304e 	ldrh.w	r3, [r7, #78]	@ 0x4e
 800a6fc:	009b      	lsls	r3, r3, #2
 800a6fe:	68ba      	ldr	r2, [r7, #8]
 800a700:	4413      	add	r3, r2
 800a702:	681a      	ldr	r2, [r3, #0]
 800a704:	f107 0310 	add.w	r3, r7, #16
 800a708:	330c      	adds	r3, #12
 800a70a:	4618      	mov	r0, r3
 800a70c:	f000 f92c 	bl	800a968 <ai_buffer_array_item_set_address>
  for (ai_u16 idx=0; activations && idx<params.map_activations.size; idx++) {
 800a710:	f8b7 304e 	ldrh.w	r3, [r7, #78]	@ 0x4e
 800a714:	3301      	adds	r3, #1
 800a716:	f8a7 304e 	strh.w	r3, [r7, #78]	@ 0x4e
 800a71a:	68bb      	ldr	r3, [r7, #8]
 800a71c:	2b00      	cmp	r3, #0
 800a71e:	d004      	beq.n	800a72a <ai_network_create_and_init+0x8a>
 800a720:	8bfb      	ldrh	r3, [r7, #30]
 800a722:	f8b7 204e 	ldrh.w	r2, [r7, #78]	@ 0x4e
 800a726:	429a      	cmp	r2, r3
 800a728:	d3e4      	bcc.n	800a6f4 <ai_network_create_and_init+0x54>
  }
#endif
#if defined(AI_NETWORK_DATA_WEIGHTS_COUNT)
  /* set the addresses of the weight buffers */
  for (ai_u16 idx=0; weights && idx<params.map_weights.size; idx++) {
 800a72a:	2300      	movs	r3, #0
 800a72c:	f8a7 304c 	strh.w	r3, [r7, #76]	@ 0x4c
 800a730:	e012      	b.n	800a758 <ai_network_create_and_init+0xb8>
    AI_BUFFER_ARRAY_ITEM_SET_ADDRESS(&params.map_weights, idx, weights[idx]);
 800a732:	f8b7 104c 	ldrh.w	r1, [r7, #76]	@ 0x4c
 800a736:	f8b7 304c 	ldrh.w	r3, [r7, #76]	@ 0x4c
 800a73a:	009b      	lsls	r3, r3, #2
 800a73c:	687a      	ldr	r2, [r7, #4]
 800a73e:	4413      	add	r3, r2
 800a740:	681a      	ldr	r2, [r3, #0]
 800a742:	f107 0310 	add.w	r3, r7, #16
 800a746:	3304      	adds	r3, #4
 800a748:	4618      	mov	r0, r3
 800a74a:	f000 f90d 	bl	800a968 <ai_buffer_array_item_set_address>
  for (ai_u16 idx=0; weights && idx<params.map_weights.size; idx++) {
 800a74e:	f8b7 304c 	ldrh.w	r3, [r7, #76]	@ 0x4c
 800a752:	3301      	adds	r3, #1
 800a754:	f8a7 304c 	strh.w	r3, [r7, #76]	@ 0x4c
 800a758:	687b      	ldr	r3, [r7, #4]
 800a75a:	2b00      	cmp	r3, #0
 800a75c:	d004      	beq.n	800a768 <ai_network_create_and_init+0xc8>
 800a75e:	8afb      	ldrh	r3, [r7, #22]
 800a760:	f8b7 204c 	ldrh.w	r2, [r7, #76]	@ 0x4c
 800a764:	429a      	cmp	r2, r3
 800a766:	d3e4      	bcc.n	800a732 <ai_network_create_and_init+0x92>
  }
#endif
  if (ai_network_init(*network, &params) != true) {
 800a768:	68fb      	ldr	r3, [r7, #12]
 800a76a:	681b      	ldr	r3, [r3, #0]
 800a76c:	f107 0210 	add.w	r2, r7, #16
 800a770:	4611      	mov	r1, r2
 800a772:	4618      	mov	r0, r3
 800a774:	f000 f846 	bl	800a804 <ai_network_init>
 800a778:	4603      	mov	r3, r0
 800a77a:	f083 0301 	eor.w	r3, r3, #1
 800a77e:	b2db      	uxtb	r3, r3
 800a780:	2b00      	cmp	r3, #0
 800a782:	d006      	beq.n	800a792 <ai_network_create_and_init+0xf2>
    err = ai_network_get_error(*network);
 800a784:	68fb      	ldr	r3, [r7, #12]
 800a786:	681b      	ldr	r3, [r3, #0]
 800a788:	4618      	mov	r0, r3
 800a78a:	f7ff ff67 	bl	800a65c <ai_network_get_error>
 800a78e:	4603      	mov	r3, r0
 800a790:	64bb      	str	r3, [r7, #72]	@ 0x48
  }
  return err;
 800a792:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
}
 800a794:	4618      	mov	r0, r3
 800a796:	3750      	adds	r7, #80	@ 0x50
 800a798:	46bd      	mov	sp, r7
 800a79a:	bd80      	pop	{r7, pc}

0800a79c <ai_network_inputs_get>:


AI_API_ENTRY
ai_buffer* ai_network_inputs_get(ai_handle network, ai_u16 *n_buffer)
{
 800a79c:	b580      	push	{r7, lr}
 800a79e:	b082      	sub	sp, #8
 800a7a0:	af00      	add	r7, sp, #0
 800a7a2:	6078      	str	r0, [r7, #4]
 800a7a4:	6039      	str	r1, [r7, #0]
  if (network == AI_HANDLE_NULL) {
 800a7a6:	687b      	ldr	r3, [r7, #4]
 800a7a8:	2b00      	cmp	r3, #0
 800a7aa:	d104      	bne.n	800a7b6 <ai_network_inputs_get+0x1a>
    network = (ai_handle)&AI_NET_OBJ_INSTANCE;
 800a7ac:	4b06      	ldr	r3, [pc, #24]	@ (800a7c8 <ai_network_inputs_get+0x2c>)
 800a7ae:	607b      	str	r3, [r7, #4]
    AI_NETWORK_OBJ(network)->magic = AI_MAGIC_CONTEXT_TOKEN;
 800a7b0:	687b      	ldr	r3, [r7, #4]
 800a7b2:	4a06      	ldr	r2, [pc, #24]	@ (800a7cc <ai_network_inputs_get+0x30>)
 800a7b4:	601a      	str	r2, [r3, #0]
  }
  return ai_platform_inputs_get(network, n_buffer);
 800a7b6:	6839      	ldr	r1, [r7, #0]
 800a7b8:	6878      	ldr	r0, [r7, #4]
 800a7ba:	f000 f9c1 	bl	800ab40 <ai_platform_inputs_get>
 800a7be:	4603      	mov	r3, r0
}
 800a7c0:	4618      	mov	r0, r3
 800a7c2:	3708      	adds	r7, #8
 800a7c4:	46bd      	mov	sp, r7
 800a7c6:	bd80      	pop	{r7, pc}
 800a7c8:	20028940 	.word	0x20028940
 800a7cc:	a1c00100 	.word	0xa1c00100

0800a7d0 <ai_network_outputs_get>:


AI_API_ENTRY
ai_buffer* ai_network_outputs_get(ai_handle network, ai_u16 *n_buffer)
{
 800a7d0:	b580      	push	{r7, lr}
 800a7d2:	b082      	sub	sp, #8
 800a7d4:	af00      	add	r7, sp, #0
 800a7d6:	6078      	str	r0, [r7, #4]
 800a7d8:	6039      	str	r1, [r7, #0]
  if (network == AI_HANDLE_NULL) {
 800a7da:	687b      	ldr	r3, [r7, #4]
 800a7dc:	2b00      	cmp	r3, #0
 800a7de:	d104      	bne.n	800a7ea <ai_network_outputs_get+0x1a>
    network = (ai_handle)&AI_NET_OBJ_INSTANCE;
 800a7e0:	4b06      	ldr	r3, [pc, #24]	@ (800a7fc <ai_network_outputs_get+0x2c>)
 800a7e2:	607b      	str	r3, [r7, #4]
    AI_NETWORK_OBJ(network)->magic = AI_MAGIC_CONTEXT_TOKEN;
 800a7e4:	687b      	ldr	r3, [r7, #4]
 800a7e6:	4a06      	ldr	r2, [pc, #24]	@ (800a800 <ai_network_outputs_get+0x30>)
 800a7e8:	601a      	str	r2, [r3, #0]
  }
  return ai_platform_outputs_get(network, n_buffer);
 800a7ea:	6839      	ldr	r1, [r7, #0]
 800a7ec:	6878      	ldr	r0, [r7, #4]
 800a7ee:	f000 fa1f 	bl	800ac30 <ai_platform_outputs_get>
 800a7f2:	4603      	mov	r3, r0
}
 800a7f4:	4618      	mov	r0, r3
 800a7f6:	3708      	adds	r7, #8
 800a7f8:	46bd      	mov	sp, r7
 800a7fa:	bd80      	pop	{r7, pc}
 800a7fc:	20028940 	.word	0x20028940
 800a800:	a1c00100 	.word	0xa1c00100

0800a804 <ai_network_init>:


AI_API_ENTRY
ai_bool ai_network_init(
  ai_handle network, const ai_network_params* params)
{
 800a804:	b580      	push	{r7, lr}
 800a806:	b084      	sub	sp, #16
 800a808:	af00      	add	r7, sp, #0
 800a80a:	6078      	str	r0, [r7, #4]
 800a80c:	6039      	str	r1, [r7, #0]
  ai_network* net_ctx = AI_NETWORK_OBJ(ai_platform_network_init(network, params));
 800a80e:	6839      	ldr	r1, [r7, #0]
 800a810:	6878      	ldr	r0, [r7, #4]
 800a812:	f000 fac5 	bl	800ada0 <ai_platform_network_init>
 800a816:	60f8      	str	r0, [r7, #12]
  ai_bool ok = true;
 800a818:	2301      	movs	r3, #1
 800a81a:	72fb      	strb	r3, [r7, #11]

  if (!net_ctx) return false;
 800a81c:	68fb      	ldr	r3, [r7, #12]
 800a81e:	2b00      	cmp	r3, #0
 800a820:	d101      	bne.n	800a826 <ai_network_init+0x22>
 800a822:	2300      	movs	r3, #0
 800a824:	e026      	b.n	800a874 <ai_network_init+0x70>
  ok &= network_configure_weights(net_ctx, params);
 800a826:	6839      	ldr	r1, [r7, #0]
 800a828:	68f8      	ldr	r0, [r7, #12]
 800a82a:	f7ff fe5d 	bl	800a4e8 <network_configure_weights>
 800a82e:	4603      	mov	r3, r0
 800a830:	461a      	mov	r2, r3
 800a832:	7afb      	ldrb	r3, [r7, #11]
 800a834:	4013      	ands	r3, r2
 800a836:	2b00      	cmp	r3, #0
 800a838:	bf14      	ite	ne
 800a83a:	2301      	movne	r3, #1
 800a83c:	2300      	moveq	r3, #0
 800a83e:	72fb      	strb	r3, [r7, #11]
  ok &= network_configure_activations(net_ctx, params);
 800a840:	6839      	ldr	r1, [r7, #0]
 800a842:	68f8      	ldr	r0, [r7, #12]
 800a844:	f7ff fd8c 	bl	800a360 <network_configure_activations>
 800a848:	4603      	mov	r3, r0
 800a84a:	461a      	mov	r2, r3
 800a84c:	7afb      	ldrb	r3, [r7, #11]
 800a84e:	4013      	ands	r3, r2
 800a850:	2b00      	cmp	r3, #0
 800a852:	bf14      	ite	ne
 800a854:	2301      	movne	r3, #1
 800a856:	2300      	moveq	r3, #0
 800a858:	72fb      	strb	r3, [r7, #11]

  ok &= ai_platform_network_post_init(network);
 800a85a:	6878      	ldr	r0, [r7, #4]
 800a85c:	f000 fb60 	bl	800af20 <ai_platform_network_post_init>
 800a860:	4603      	mov	r3, r0
 800a862:	461a      	mov	r2, r3
 800a864:	7afb      	ldrb	r3, [r7, #11]
 800a866:	4013      	ands	r3, r2
 800a868:	2b00      	cmp	r3, #0
 800a86a:	bf14      	ite	ne
 800a86c:	2301      	movne	r3, #1
 800a86e:	2300      	moveq	r3, #0
 800a870:	72fb      	strb	r3, [r7, #11]

  return ok;
 800a872:	7afb      	ldrb	r3, [r7, #11]
}
 800a874:	4618      	mov	r0, r3
 800a876:	3710      	adds	r7, #16
 800a878:	46bd      	mov	sp, r7
 800a87a:	bd80      	pop	{r7, pc}

0800a87c <ai_network_run>:


AI_API_ENTRY
ai_i32 ai_network_run(
  ai_handle network, const ai_buffer* input, ai_buffer* output)
{
 800a87c:	b580      	push	{r7, lr}
 800a87e:	b084      	sub	sp, #16
 800a880:	af00      	add	r7, sp, #0
 800a882:	60f8      	str	r0, [r7, #12]
 800a884:	60b9      	str	r1, [r7, #8]
 800a886:	607a      	str	r2, [r7, #4]
  return ai_platform_network_process(network, input, output);
 800a888:	687a      	ldr	r2, [r7, #4]
 800a88a:	68b9      	ldr	r1, [r7, #8]
 800a88c:	68f8      	ldr	r0, [r7, #12]
 800a88e:	f000 fb77 	bl	800af80 <ai_platform_network_process>
 800a892:	4603      	mov	r3, r0
}
 800a894:	4618      	mov	r0, r3
 800a896:	3710      	adds	r7, #16
 800a898:	46bd      	mov	sp, r7
 800a89a:	bd80      	pop	{r7, pc}

0800a89c <ai_network_data_params_get>:
 * @ingroup network_data
 * @return true if a valid configuration is present, false otherwise
 */
AI_API_ENTRY
ai_bool ai_network_data_params_get(ai_network_params* params)
{
 800a89c:	b580      	push	{r7, lr}
 800a89e:	b086      	sub	sp, #24
 800a8a0:	af00      	add	r7, sp, #0
 800a8a2:	6078      	str	r0, [r7, #4]
  if (!params) return false;
 800a8a4:	687b      	ldr	r3, [r7, #4]
 800a8a6:	2b00      	cmp	r3, #0
 800a8a8:	d101      	bne.n	800a8ae <ai_network_data_params_get+0x12>
 800a8aa:	2300      	movs	r3, #0
 800a8ac:	e016      	b.n	800a8dc <ai_network_data_params_get+0x40>
  
  const ai_buffer_array map_activations = 
 800a8ae:	4a0d      	ldr	r2, [pc, #52]	@ (800a8e4 <ai_network_data_params_get+0x48>)
 800a8b0:	f107 0310 	add.w	r3, r7, #16
 800a8b4:	e892 0003 	ldmia.w	r2, {r0, r1}
 800a8b8:	e883 0003 	stmia.w	r3, {r0, r1}
    AI_BUFFER_ARRAY_OBJ_INIT(AI_FLAG_NONE, AI_NETWORK_DATA_ACTIVATIONS_COUNT, g_network_data_map_activations);
  
  const ai_buffer_array map_weights = 
 800a8bc:	4a0a      	ldr	r2, [pc, #40]	@ (800a8e8 <ai_network_data_params_get+0x4c>)
 800a8be:	f107 0308 	add.w	r3, r7, #8
 800a8c2:	e892 0003 	ldmia.w	r2, {r0, r1}
 800a8c6:	e883 0003 	stmia.w	r3, {r0, r1}
    AI_BUFFER_ARRAY_OBJ_INIT(AI_FLAG_NONE, AI_NETWORK_DATA_WEIGHTS_COUNT, g_network_data_map_weights);

  return ai_platform_bind_network_params(params, &map_weights, &map_activations);
 800a8ca:	f107 0210 	add.w	r2, r7, #16
 800a8ce:	f107 0308 	add.w	r3, r7, #8
 800a8d2:	4619      	mov	r1, r3
 800a8d4:	6878      	ldr	r0, [r7, #4]
 800a8d6:	f000 f907 	bl	800aae8 <ai_platform_bind_network_params>
 800a8da:	4603      	mov	r3, r0
}
 800a8dc:	4618      	mov	r0, r3
 800a8de:	3718      	adds	r7, #24
 800a8e0:	46bd      	mov	sp, r7
 800a8e2:	bd80      	pop	{r7, pc}
 800a8e4:	08010ff4 	.word	0x08010ff4
 800a8e8:	08010ffc 	.word	0x08010ffc

0800a8ec <ai_buffer_get_size>:
 800a8ec:	b368      	cbz	r0, 800a94a <ai_buffer_get_size+0x5e>
 800a8ee:	4b17      	ldr	r3, [pc, #92]	@ (800a94c <ai_buffer_get_size+0x60>)
 800a8f0:	4a17      	ldr	r2, [pc, #92]	@ (800a950 <ai_buffer_get_size+0x64>)
 800a8f2:	b410      	push	{r4}
 800a8f4:	6804      	ldr	r4, [r0, #0]
 800a8f6:	4023      	ands	r3, r4
 800a8f8:	4293      	cmp	r3, r2
 800a8fa:	d123      	bne.n	800a944 <ai_buffer_get_size+0x58>
 800a8fc:	b311      	cbz	r1, 800a944 <ai_buffer_get_size+0x58>
 800a8fe:	6984      	ldr	r4, [r0, #24]
 800a900:	6862      	ldr	r2, [r4, #4]
 800a902:	321f      	adds	r2, #31
 800a904:	f022 021f 	bic.w	r2, r2, #31
 800a908:	7d03      	ldrb	r3, [r0, #20]
 800a90a:	6941      	ldr	r1, [r0, #20]
 800a90c:	f1a3 0301 	sub.w	r3, r3, #1
 800a910:	f3c1 2017 	ubfx	r0, r1, #8, #24
 800a914:	fab3 f383 	clz	r3, r3
 800a918:	095b      	lsrs	r3, r3, #5
 800a91a:	ebb3 2f11 	cmp.w	r3, r1, lsr #8
 800a91e:	da0c      	bge.n	800a93a <ai_buffer_get_size+0x4e>
 800a920:	2b01      	cmp	r3, #1
 800a922:	d103      	bne.n	800a92c <ai_buffer_get_size+0x40>
 800a924:	2802      	cmp	r0, #2
 800a926:	f04f 0302 	mov.w	r3, #2
 800a92a:	d006      	beq.n	800a93a <ai_buffer_get_size+0x4e>
 800a92c:	f854 1023 	ldr.w	r1, [r4, r3, lsl #2]
 800a930:	3301      	adds	r3, #1
 800a932:	4298      	cmp	r0, r3
 800a934:	fb01 f202 	mul.w	r2, r1, r2
 800a938:	d1f2      	bne.n	800a920 <ai_buffer_get_size+0x34>
 800a93a:	ea22 70e2 	bic.w	r0, r2, r2, asr #31
 800a93e:	f85d 4b04 	ldr.w	r4, [sp], #4
 800a942:	4770      	bx	lr
 800a944:	6984      	ldr	r4, [r0, #24]
 800a946:	6862      	ldr	r2, [r4, #4]
 800a948:	e7de      	b.n	800a908 <ai_buffer_get_size+0x1c>
 800a94a:	4770      	bx	lr
 800a94c:	017fffff 	.word	0x017fffff
 800a950:	000400c0 	.word	0x000400c0

0800a954 <ai_buffer_array_sane>:
 800a954:	b138      	cbz	r0, 800a966 <ai_buffer_array_sane+0x12>
 800a956:	6843      	ldr	r3, [r0, #4]
 800a958:	b123      	cbz	r3, 800a964 <ai_buffer_array_sane+0x10>
 800a95a:	8840      	ldrh	r0, [r0, #2]
 800a95c:	3800      	subs	r0, #0
 800a95e:	bf18      	it	ne
 800a960:	2001      	movne	r0, #1
 800a962:	4770      	bx	lr
 800a964:	4618      	mov	r0, r3
 800a966:	4770      	bx	lr

0800a968 <ai_buffer_array_item_set_address>:
 800a968:	b150      	cbz	r0, 800a980 <ai_buffer_array_item_set_address+0x18>
 800a96a:	6843      	ldr	r3, [r0, #4]
 800a96c:	b14b      	cbz	r3, 800a982 <ai_buffer_array_item_set_address+0x1a>
 800a96e:	8840      	ldrh	r0, [r0, #2]
 800a970:	b900      	cbnz	r0, 800a974 <ai_buffer_array_item_set_address+0xc>
 800a972:	4770      	bx	lr
 800a974:	ebc1 01c1 	rsb	r1, r1, r1, lsl #3
 800a978:	2001      	movs	r0, #1
 800a97a:	eb03 0381 	add.w	r3, r3, r1, lsl #2
 800a97e:	605a      	str	r2, [r3, #4]
 800a980:	4770      	bx	lr
 800a982:	4618      	mov	r0, r3
 800a984:	4770      	bx	lr
 800a986:	bf00      	nop

0800a988 <ai_platform_get_weights_map>:
 800a988:	2900      	cmp	r1, #0
 800a98a:	bf18      	it	ne
 800a98c:	2800      	cmpne	r0, #0
 800a98e:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a990:	bf0c      	ite	eq
 800a992:	2401      	moveq	r4, #1
 800a994:	2400      	movne	r4, #0
 800a996:	2a00      	cmp	r2, #0
 800a998:	bf08      	it	eq
 800a99a:	f044 0401 	orreq.w	r4, r4, #1
 800a99e:	b114      	cbz	r4, 800a9a6 <ai_platform_get_weights_map+0x1e>
 800a9a0:	2400      	movs	r4, #0
 800a9a2:	4620      	mov	r0, r4
 800a9a4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800a9a6:	4616      	mov	r6, r2
 800a9a8:	4b22      	ldr	r3, [pc, #136]	@ (800aa34 <ai_platform_get_weights_map+0xac>)
 800a9aa:	6812      	ldr	r2, [r2, #0]
 800a9ac:	4605      	mov	r5, r0
 800a9ae:	460f      	mov	r7, r1
 800a9b0:	429a      	cmp	r2, r3
 800a9b2:	d022      	beq.n	800a9fa <ai_platform_get_weights_map+0x72>
 800a9b4:	6870      	ldr	r0, [r6, #4]
 800a9b6:	2800      	cmp	r0, #0
 800a9b8:	d0f2      	beq.n	800a9a0 <ai_platform_get_weights_map+0x18>
 800a9ba:	6806      	ldr	r6, [r0, #0]
 800a9bc:	429e      	cmp	r6, r3
 800a9be:	d006      	beq.n	800a9ce <ai_platform_get_weights_map+0x46>
 800a9c0:	f1a1 0401 	sub.w	r4, r1, #1
 800a9c4:	6028      	str	r0, [r5, #0]
 800a9c6:	fab4 f484 	clz	r4, r4
 800a9ca:	0964      	lsrs	r4, r4, #5
 800a9cc:	e7e9      	b.n	800a9a2 <ai_platform_get_weights_map+0x1a>
 800a9ce:	3d04      	subs	r5, #4
 800a9d0:	4602      	mov	r2, r0
 800a9d2:	4621      	mov	r1, r4
 800a9d4:	e000      	b.n	800a9d8 <ai_platform_get_weights_map+0x50>
 800a9d6:	4619      	mov	r1, r3
 800a9d8:	f852 3f04 	ldr.w	r3, [r2, #4]!
 800a9dc:	42b3      	cmp	r3, r6
 800a9de:	d025      	beq.n	800aa2c <ai_platform_get_weights_map+0xa4>
 800a9e0:	f845 3f04 	str.w	r3, [r5, #4]!
 800a9e4:	1c4b      	adds	r3, r1, #1
 800a9e6:	429f      	cmp	r7, r3
 800a9e8:	d8f5      	bhi.n	800a9d6 <ai_platform_get_weights_map+0x4e>
 800a9ea:	d1da      	bne.n	800a9a2 <ai_platform_get_weights_map+0x1a>
 800a9ec:	3102      	adds	r1, #2
 800a9ee:	f850 3021 	ldr.w	r3, [r0, r1, lsl #2]
 800a9f2:	42b3      	cmp	r3, r6
 800a9f4:	d1d5      	bne.n	800a9a2 <ai_platform_get_weights_map+0x1a>
 800a9f6:	2401      	movs	r4, #1
 800a9f8:	e7d3      	b.n	800a9a2 <ai_platform_get_weights_map+0x1a>
 800a9fa:	1d30      	adds	r0, r6, #4
 800a9fc:	f7ff ffaa 	bl	800a954 <ai_buffer_array_sane>
 800aa00:	2800      	cmp	r0, #0
 800aa02:	d0cd      	beq.n	800a9a0 <ai_platform_get_weights_map+0x18>
 800aa04:	88f3      	ldrh	r3, [r6, #6]
 800aa06:	429f      	cmp	r7, r3
 800aa08:	d1ca      	bne.n	800a9a0 <ai_platform_get_weights_map+0x18>
 800aa0a:	3d04      	subs	r5, #4
 800aa0c:	4622      	mov	r2, r4
 800aa0e:	68b3      	ldr	r3, [r6, #8]
 800aa10:	4423      	add	r3, r4
 800aa12:	341c      	adds	r4, #28
 800aa14:	685b      	ldr	r3, [r3, #4]
 800aa16:	b123      	cbz	r3, 800aa22 <ai_platform_get_weights_map+0x9a>
 800aa18:	3201      	adds	r2, #1
 800aa1a:	f845 3f04 	str.w	r3, [r5, #4]!
 800aa1e:	4297      	cmp	r7, r2
 800aa20:	d8f5      	bhi.n	800aa0e <ai_platform_get_weights_map+0x86>
 800aa22:	1abc      	subs	r4, r7, r2
 800aa24:	fab4 f484 	clz	r4, r4
 800aa28:	0964      	lsrs	r4, r4, #5
 800aa2a:	e7ba      	b.n	800a9a2 <ai_platform_get_weights_map+0x1a>
 800aa2c:	428f      	cmp	r7, r1
 800aa2e:	d1b8      	bne.n	800a9a2 <ai_platform_get_weights_map+0x1a>
 800aa30:	e7e1      	b.n	800a9f6 <ai_platform_get_weights_map+0x6e>
 800aa32:	bf00      	nop
 800aa34:	a1facade 	.word	0xa1facade

0800aa38 <ai_platform_get_activations_map>:
 800aa38:	2900      	cmp	r1, #0
 800aa3a:	bf18      	it	ne
 800aa3c:	2800      	cmpne	r0, #0
 800aa3e:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800aa40:	bf0c      	ite	eq
 800aa42:	2401      	moveq	r4, #1
 800aa44:	2400      	movne	r4, #0
 800aa46:	2a00      	cmp	r2, #0
 800aa48:	bf08      	it	eq
 800aa4a:	f044 0401 	orreq.w	r4, r4, #1
 800aa4e:	b114      	cbz	r4, 800aa56 <ai_platform_get_activations_map+0x1e>
 800aa50:	2400      	movs	r4, #0
 800aa52:	4620      	mov	r0, r4
 800aa54:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800aa56:	4616      	mov	r6, r2
 800aa58:	4b22      	ldr	r3, [pc, #136]	@ (800aae4 <ai_platform_get_activations_map+0xac>)
 800aa5a:	6812      	ldr	r2, [r2, #0]
 800aa5c:	4605      	mov	r5, r0
 800aa5e:	460f      	mov	r7, r1
 800aa60:	429a      	cmp	r2, r3
 800aa62:	d022      	beq.n	800aaaa <ai_platform_get_activations_map+0x72>
 800aa64:	6a30      	ldr	r0, [r6, #32]
 800aa66:	2800      	cmp	r0, #0
 800aa68:	d0f2      	beq.n	800aa50 <ai_platform_get_activations_map+0x18>
 800aa6a:	6806      	ldr	r6, [r0, #0]
 800aa6c:	429e      	cmp	r6, r3
 800aa6e:	d006      	beq.n	800aa7e <ai_platform_get_activations_map+0x46>
 800aa70:	f1a1 0401 	sub.w	r4, r1, #1
 800aa74:	6028      	str	r0, [r5, #0]
 800aa76:	fab4 f484 	clz	r4, r4
 800aa7a:	0964      	lsrs	r4, r4, #5
 800aa7c:	e7e9      	b.n	800aa52 <ai_platform_get_activations_map+0x1a>
 800aa7e:	3d04      	subs	r5, #4
 800aa80:	4602      	mov	r2, r0
 800aa82:	4621      	mov	r1, r4
 800aa84:	e000      	b.n	800aa88 <ai_platform_get_activations_map+0x50>
 800aa86:	4619      	mov	r1, r3
 800aa88:	f852 3f04 	ldr.w	r3, [r2, #4]!
 800aa8c:	42b3      	cmp	r3, r6
 800aa8e:	d026      	beq.n	800aade <ai_platform_get_activations_map+0xa6>
 800aa90:	f845 3f04 	str.w	r3, [r5, #4]!
 800aa94:	1c4b      	adds	r3, r1, #1
 800aa96:	429f      	cmp	r7, r3
 800aa98:	d8f5      	bhi.n	800aa86 <ai_platform_get_activations_map+0x4e>
 800aa9a:	d1da      	bne.n	800aa52 <ai_platform_get_activations_map+0x1a>
 800aa9c:	3102      	adds	r1, #2
 800aa9e:	f850 3021 	ldr.w	r3, [r0, r1, lsl #2]
 800aaa2:	42b3      	cmp	r3, r6
 800aaa4:	d1d5      	bne.n	800aa52 <ai_platform_get_activations_map+0x1a>
 800aaa6:	2401      	movs	r4, #1
 800aaa8:	e7d3      	b.n	800aa52 <ai_platform_get_activations_map+0x1a>
 800aaaa:	f106 000c 	add.w	r0, r6, #12
 800aaae:	f7ff ff51 	bl	800a954 <ai_buffer_array_sane>
 800aab2:	2800      	cmp	r0, #0
 800aab4:	d0cc      	beq.n	800aa50 <ai_platform_get_activations_map+0x18>
 800aab6:	89f3      	ldrh	r3, [r6, #14]
 800aab8:	429f      	cmp	r7, r3
 800aaba:	d1c9      	bne.n	800aa50 <ai_platform_get_activations_map+0x18>
 800aabc:	3d04      	subs	r5, #4
 800aabe:	4622      	mov	r2, r4
 800aac0:	6933      	ldr	r3, [r6, #16]
 800aac2:	4423      	add	r3, r4
 800aac4:	341c      	adds	r4, #28
 800aac6:	685b      	ldr	r3, [r3, #4]
 800aac8:	b123      	cbz	r3, 800aad4 <ai_platform_get_activations_map+0x9c>
 800aaca:	3201      	adds	r2, #1
 800aacc:	f845 3f04 	str.w	r3, [r5, #4]!
 800aad0:	4297      	cmp	r7, r2
 800aad2:	d8f5      	bhi.n	800aac0 <ai_platform_get_activations_map+0x88>
 800aad4:	1abc      	subs	r4, r7, r2
 800aad6:	fab4 f484 	clz	r4, r4
 800aada:	0964      	lsrs	r4, r4, #5
 800aadc:	e7b9      	b.n	800aa52 <ai_platform_get_activations_map+0x1a>
 800aade:	428f      	cmp	r7, r1
 800aae0:	d1b7      	bne.n	800aa52 <ai_platform_get_activations_map+0x1a>
 800aae2:	e7e0      	b.n	800aaa6 <ai_platform_get_activations_map+0x6e>
 800aae4:	a1facade 	.word	0xa1facade

0800aae8 <ai_platform_bind_network_params>:
 800aae8:	2a00      	cmp	r2, #0
 800aaea:	bf18      	it	ne
 800aaec:	2900      	cmpne	r1, #0
 800aaee:	d010      	beq.n	800ab12 <ai_platform_bind_network_params+0x2a>
 800aaf0:	b178      	cbz	r0, 800ab12 <ai_platform_bind_network_params+0x2a>
 800aaf2:	4603      	mov	r3, r0
 800aaf4:	4808      	ldr	r0, [pc, #32]	@ (800ab18 <ai_platform_bind_network_params+0x30>)
 800aaf6:	f103 0c0c 	add.w	ip, r3, #12
 800aafa:	f843 0b04 	str.w	r0, [r3], #4
 800aafe:	c903      	ldmia	r1, {r0, r1}
 800ab00:	e883 0003 	stmia.w	r3, {r0, r1}
 800ab04:	2301      	movs	r3, #1
 800ab06:	e892 0003 	ldmia.w	r2, {r0, r1}
 800ab0a:	e88c 0003 	stmia.w	ip, {r0, r1}
 800ab0e:	4618      	mov	r0, r3
 800ab10:	4770      	bx	lr
 800ab12:	2300      	movs	r3, #0
 800ab14:	4618      	mov	r0, r3
 800ab16:	4770      	bx	lr
 800ab18:	a1facade 	.word	0xa1facade

0800ab1c <ai_platform_network_get_error>:
 800ab1c:	4b04      	ldr	r3, [pc, #16]	@ (800ab30 <ai_platform_network_get_error+0x14>)
 800ab1e:	6802      	ldr	r2, [r0, #0]
 800ab20:	4393      	bics	r3, r2
 800ab22:	d102      	bne.n	800ab2a <ai_platform_network_get_error+0xe>
 800ab24:	300c      	adds	r0, #12
 800ab26:	f000 bc73 	b.w	800b410 <core_get_error>
 800ab2a:	f241 0010 	movw	r0, #4112	@ 0x1010
 800ab2e:	4770      	bx	lr
 800ab30:	a1c00100 	.word	0xa1c00100

0800ab34 <ai_platform_network_set_error>:
 800ab34:	b110      	cbz	r0, 800ab3c <ai_platform_network_set_error+0x8>
 800ab36:	300c      	adds	r0, #12
 800ab38:	f000 bc70 	b.w	800b41c <core_set_error>
 800ab3c:	4770      	bx	lr
 800ab3e:	bf00      	nop

0800ab40 <ai_platform_inputs_get>:
 800ab40:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800ab44:	4b39      	ldr	r3, [pc, #228]	@ (800ac2c <ai_platform_inputs_get+0xec>)
 800ab46:	b085      	sub	sp, #20
 800ab48:	6802      	ldr	r2, [r0, #0]
 800ab4a:	4393      	bics	r3, r2
 800ab4c:	e9cd 1002 	strd	r1, r0, [sp, #8]
 800ab50:	d162      	bne.n	800ac18 <ai_platform_inputs_get+0xd8>
 800ab52:	8e03      	ldrh	r3, [r0, #48]	@ 0x30
 800ab54:	2b00      	cmp	r3, #0
 800ab56:	d051      	beq.n	800abfc <ai_platform_inputs_get+0xbc>
 800ab58:	f8d0 a034 	ldr.w	sl, [r0, #52]	@ 0x34
 800ab5c:	f1ba 0f00 	cmp.w	sl, #0
 800ab60:	d04c      	beq.n	800abfc <ai_platform_inputs_get+0xbc>
 800ab62:	f04f 0900 	mov.w	r9, #0
 800ab66:	464d      	mov	r5, r9
 800ab68:	e016      	b.n	800ab98 <ai_platform_inputs_get+0x58>
 800ab6a:	9901      	ldr	r1, [sp, #4]
 800ab6c:	2301      	movs	r3, #1
 800ab6e:	f848 3001 	str.w	r3, [r8, r1]
 800ab72:	69b1      	ldr	r1, [r6, #24]
 800ab74:	f04f 0301 	mov.w	r3, #1
 800ab78:	684e      	ldr	r6, [r1, #4]
 800ab7a:	3501      	adds	r5, #1
 800ab7c:	f109 091c 	add.w	r9, r9, #28
 800ab80:	7523      	strb	r3, [r4, #20]
 800ab82:	2300      	movs	r3, #0
 800ab84:	6961      	ldr	r1, [r4, #20]
 800ab86:	6020      	str	r0, [r4, #0]
 800ab88:	f36b 211f 	bfi	r1, fp, #8, #24
 800ab8c:	e9c4 c701 	strd	ip, r7, [r4, #4]
 800ab90:	e9c4 3603 	strd	r3, r6, [r4, #12]
 800ab94:	e9c4 1205 	strd	r1, r2, [r4, #20]
 800ab98:	f8ba 3000 	ldrh.w	r3, [sl]
 800ab9c:	b2ac      	uxth	r4, r5
 800ab9e:	42ab      	cmp	r3, r5
 800aba0:	ea4f 03c5 	mov.w	r3, r5, lsl #3
 800aba4:	9301      	str	r3, [sp, #4]
 800aba6:	d93b      	bls.n	800ac20 <ai_platform_inputs_get+0xe0>
 800aba8:	f8da 3004 	ldr.w	r3, [sl, #4]
 800abac:	2b00      	cmp	r3, #0
 800abae:	d037      	beq.n	800ac20 <ai_platform_inputs_get+0xe0>
 800abb0:	f853 6025 	ldr.w	r6, [r3, r5, lsl #2]
 800abb4:	2e00      	cmp	r6, #0
 800abb6:	d033      	beq.n	800ac20 <ai_platform_inputs_get+0xe0>
 800abb8:	f8da 3008 	ldr.w	r3, [sl, #8]
 800abbc:	69b2      	ldr	r2, [r6, #24]
 800abbe:	e9d3 4801 	ldrd	r4, r8, [r3, #4]
 800abc2:	6810      	ldr	r0, [r2, #0]
 800abc4:	68b3      	ldr	r3, [r6, #8]
 800abc6:	eb08 07c5 	add.w	r7, r8, r5, lsl #3
 800abca:	68f2      	ldr	r2, [r6, #12]
 800abcc:	444c      	add	r4, r9
 800abce:	f3c3 2b17 	ubfx	fp, r3, #8, #24
 800abd2:	9200      	str	r2, [sp, #0]
 800abd4:	f003 fba0 	bl	800e318 <ai_array_to_buffer_fmt>
 800abd8:	69b1      	ldr	r1, [r6, #24]
 800abda:	9a00      	ldr	r2, [sp, #0]
 800abdc:	f8d1 c008 	ldr.w	ip, [r1, #8]
 800abe0:	2f00      	cmp	r7, #0
 800abe2:	d0c7      	beq.n	800ab74 <ai_platform_inputs_get+0x34>
 800abe4:	2100      	movs	r1, #0
 800abe6:	f848 1035 	str.w	r1, [r8, r5, lsl #3]
 800abea:	6831      	ldr	r1, [r6, #0]
 800abec:	6079      	str	r1, [r7, #4]
 800abee:	b111      	cbz	r1, 800abf6 <ai_platform_inputs_get+0xb6>
 800abf0:	8849      	ldrh	r1, [r1, #2]
 800abf2:	2900      	cmp	r1, #0
 800abf4:	d1b9      	bne.n	800ab6a <ai_platform_inputs_get+0x2a>
 800abf6:	69b1      	ldr	r1, [r6, #24]
 800abf8:	2700      	movs	r7, #0
 800abfa:	e7bb      	b.n	800ab74 <ai_platform_inputs_get+0x34>
 800abfc:	9803      	ldr	r0, [sp, #12]
 800abfe:	2400      	movs	r4, #0
 800ac00:	2218      	movs	r2, #24
 800ac02:	2111      	movs	r1, #17
 800ac04:	300c      	adds	r0, #12
 800ac06:	f000 fc09 	bl	800b41c <core_set_error>
 800ac0a:	4620      	mov	r0, r4
 800ac0c:	9b02      	ldr	r3, [sp, #8]
 800ac0e:	b103      	cbz	r3, 800ac12 <ai_platform_inputs_get+0xd2>
 800ac10:	801c      	strh	r4, [r3, #0]
 800ac12:	b005      	add	sp, #20
 800ac14:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800ac18:	2000      	movs	r0, #0
 800ac1a:	b005      	add	sp, #20
 800ac1c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800ac20:	2c00      	cmp	r4, #0
 800ac22:	d0eb      	beq.n	800abfc <ai_platform_inputs_get+0xbc>
 800ac24:	f8da 3008 	ldr.w	r3, [sl, #8]
 800ac28:	6858      	ldr	r0, [r3, #4]
 800ac2a:	e7ef      	b.n	800ac0c <ai_platform_inputs_get+0xcc>
 800ac2c:	a1c00100 	.word	0xa1c00100

0800ac30 <ai_platform_outputs_get>:
 800ac30:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800ac34:	4b38      	ldr	r3, [pc, #224]	@ (800ad18 <ai_platform_outputs_get+0xe8>)
 800ac36:	b085      	sub	sp, #20
 800ac38:	6802      	ldr	r2, [r0, #0]
 800ac3a:	4393      	bics	r3, r2
 800ac3c:	e9cd 1002 	strd	r1, r0, [sp, #8]
 800ac40:	d15f      	bne.n	800ad02 <ai_platform_outputs_get+0xd2>
 800ac42:	8e03      	ldrh	r3, [r0, #48]	@ 0x30
 800ac44:	2b01      	cmp	r3, #1
 800ac46:	d94e      	bls.n	800ace6 <ai_platform_outputs_get+0xb6>
 800ac48:	f04f 0900 	mov.w	r9, #0
 800ac4c:	f8d0 a034 	ldr.w	sl, [r0, #52]	@ 0x34
 800ac50:	464d      	mov	r5, r9
 800ac52:	e016      	b.n	800ac82 <ai_platform_outputs_get+0x52>
 800ac54:	9901      	ldr	r1, [sp, #4]
 800ac56:	2301      	movs	r3, #1
 800ac58:	f848 3001 	str.w	r3, [r8, r1]
 800ac5c:	69b1      	ldr	r1, [r6, #24]
 800ac5e:	f04f 0301 	mov.w	r3, #1
 800ac62:	684e      	ldr	r6, [r1, #4]
 800ac64:	3501      	adds	r5, #1
 800ac66:	f109 091c 	add.w	r9, r9, #28
 800ac6a:	7523      	strb	r3, [r4, #20]
 800ac6c:	2300      	movs	r3, #0
 800ac6e:	6961      	ldr	r1, [r4, #20]
 800ac70:	6020      	str	r0, [r4, #0]
 800ac72:	f36b 211f 	bfi	r1, fp, #8, #24
 800ac76:	e9c4 c701 	strd	ip, r7, [r4, #4]
 800ac7a:	e9c4 3603 	strd	r3, r6, [r4, #12]
 800ac7e:	e9c4 1205 	strd	r1, r2, [r4, #20]
 800ac82:	f8ba 300c 	ldrh.w	r3, [sl, #12]
 800ac86:	b2ac      	uxth	r4, r5
 800ac88:	42ab      	cmp	r3, r5
 800ac8a:	ea4f 03c5 	mov.w	r3, r5, lsl #3
 800ac8e:	9301      	str	r3, [sp, #4]
 800ac90:	d93b      	bls.n	800ad0a <ai_platform_outputs_get+0xda>
 800ac92:	f8da 3010 	ldr.w	r3, [sl, #16]
 800ac96:	2b00      	cmp	r3, #0
 800ac98:	d037      	beq.n	800ad0a <ai_platform_outputs_get+0xda>
 800ac9a:	f853 6025 	ldr.w	r6, [r3, r5, lsl #2]
 800ac9e:	2e00      	cmp	r6, #0
 800aca0:	d033      	beq.n	800ad0a <ai_platform_outputs_get+0xda>
 800aca2:	f8da 3014 	ldr.w	r3, [sl, #20]
 800aca6:	69b2      	ldr	r2, [r6, #24]
 800aca8:	e9d3 4801 	ldrd	r4, r8, [r3, #4]
 800acac:	6810      	ldr	r0, [r2, #0]
 800acae:	68b3      	ldr	r3, [r6, #8]
 800acb0:	eb08 07c5 	add.w	r7, r8, r5, lsl #3
 800acb4:	68f2      	ldr	r2, [r6, #12]
 800acb6:	444c      	add	r4, r9
 800acb8:	f3c3 2b17 	ubfx	fp, r3, #8, #24
 800acbc:	9200      	str	r2, [sp, #0]
 800acbe:	f003 fb2b 	bl	800e318 <ai_array_to_buffer_fmt>
 800acc2:	69b1      	ldr	r1, [r6, #24]
 800acc4:	9a00      	ldr	r2, [sp, #0]
 800acc6:	f8d1 c008 	ldr.w	ip, [r1, #8]
 800acca:	2f00      	cmp	r7, #0
 800accc:	d0c7      	beq.n	800ac5e <ai_platform_outputs_get+0x2e>
 800acce:	2100      	movs	r1, #0
 800acd0:	f848 1035 	str.w	r1, [r8, r5, lsl #3]
 800acd4:	6831      	ldr	r1, [r6, #0]
 800acd6:	6079      	str	r1, [r7, #4]
 800acd8:	b111      	cbz	r1, 800ace0 <ai_platform_outputs_get+0xb0>
 800acda:	8849      	ldrh	r1, [r1, #2]
 800acdc:	2900      	cmp	r1, #0
 800acde:	d1b9      	bne.n	800ac54 <ai_platform_outputs_get+0x24>
 800ace0:	69b1      	ldr	r1, [r6, #24]
 800ace2:	2700      	movs	r7, #0
 800ace4:	e7bb      	b.n	800ac5e <ai_platform_outputs_get+0x2e>
 800ace6:	9803      	ldr	r0, [sp, #12]
 800ace8:	2400      	movs	r4, #0
 800acea:	2218      	movs	r2, #24
 800acec:	2111      	movs	r1, #17
 800acee:	300c      	adds	r0, #12
 800acf0:	f000 fb94 	bl	800b41c <core_set_error>
 800acf4:	4620      	mov	r0, r4
 800acf6:	9b02      	ldr	r3, [sp, #8]
 800acf8:	b103      	cbz	r3, 800acfc <ai_platform_outputs_get+0xcc>
 800acfa:	801c      	strh	r4, [r3, #0]
 800acfc:	b005      	add	sp, #20
 800acfe:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800ad02:	2000      	movs	r0, #0
 800ad04:	b005      	add	sp, #20
 800ad06:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800ad0a:	2c00      	cmp	r4, #0
 800ad0c:	d0eb      	beq.n	800ace6 <ai_platform_outputs_get+0xb6>
 800ad0e:	f8da 3014 	ldr.w	r3, [sl, #20]
 800ad12:	6858      	ldr	r0, [r3, #4]
 800ad14:	e7ef      	b.n	800acf6 <ai_platform_outputs_get+0xc6>
 800ad16:	bf00      	nop
 800ad18:	a1c00100 	.word	0xa1c00100

0800ad1c <ai_platform_network_create>:
 800ad1c:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800ad20:	b083      	sub	sp, #12
 800ad22:	f89d 8028 	ldrb.w	r8, [sp, #40]	@ 0x28
 800ad26:	f89d 902c 	ldrb.w	r9, [sp, #44]	@ 0x2c
 800ad2a:	b320      	cbz	r0, 800ad76 <ai_platform_network_create+0x5a>
 800ad2c:	6002      	str	r2, [r0, #0]
 800ad2e:	4616      	mov	r6, r2
 800ad30:	461f      	mov	r7, r3
 800ad32:	4604      	mov	r4, r0
 800ad34:	f000 fb6a 	bl	800b40c <core_init>
 800ad38:	b970      	cbnz	r0, 800ad58 <ai_platform_network_create+0x3c>
 800ad3a:	2530      	movs	r5, #48	@ 0x30
 800ad3c:	2300      	movs	r3, #0
 800ad3e:	6023      	str	r3, [r4, #0]
 800ad40:	2410      	movs	r4, #16
 800ad42:	464a      	mov	r2, r9
 800ad44:	4641      	mov	r1, r8
 800ad46:	4638      	mov	r0, r7
 800ad48:	f003 fb90 	bl	800e46c <ai_version_get>
 800ad4c:	60b0      	str	r0, [r6, #8]
 800ad4e:	ea45 2004 	orr.w	r0, r5, r4, lsl #8
 800ad52:	b003      	add	sp, #12
 800ad54:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800ad58:	2200      	movs	r2, #0
 800ad5a:	4641      	mov	r1, r8
 800ad5c:	4638      	mov	r0, r7
 800ad5e:	f003 fb85 	bl	800e46c <ai_version_get>
 800ad62:	4605      	mov	r5, r0
 800ad64:	2200      	movs	r2, #0
 800ad66:	2105      	movs	r1, #5
 800ad68:	2001      	movs	r0, #1
 800ad6a:	f003 fb7f 	bl	800e46c <ai_version_get>
 800ad6e:	4285      	cmp	r5, r0
 800ad70:	d008      	beq.n	800ad84 <ai_platform_network_create+0x68>
 800ad72:	2501      	movs	r5, #1
 800ad74:	e7e2      	b.n	800ad3c <ai_platform_network_create+0x20>
 800ad76:	2510      	movs	r5, #16
 800ad78:	462c      	mov	r4, r5
 800ad7a:	ea45 2004 	orr.w	r0, r5, r4, lsl #8
 800ad7e:	b003      	add	sp, #12
 800ad80:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800ad84:	4b05      	ldr	r3, [pc, #20]	@ (800ad9c <ai_platform_network_create+0x80>)
 800ad86:	a801      	add	r0, sp, #4
 800ad88:	9301      	str	r3, [sp, #4]
 800ad8a:	f000 fb53 	bl	800b434 <ai_check_custom_types>
 800ad8e:	b110      	cbz	r0, 800ad96 <ai_platform_network_create+0x7a>
 800ad90:	2400      	movs	r4, #0
 800ad92:	4625      	mov	r5, r4
 800ad94:	e7d5      	b.n	800ad42 <ai_platform_network_create+0x26>
 800ad96:	2502      	movs	r5, #2
 800ad98:	e7d0      	b.n	800ad3c <ai_platform_network_create+0x20>
 800ad9a:	bf00      	nop
 800ad9c:	84048403 	.word	0x84048403

0800ada0 <ai_platform_network_init>:
 800ada0:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800ada4:	4a5c      	ldr	r2, [pc, #368]	@ (800af18 <ai_platform_network_init+0x178>)
 800ada6:	460c      	mov	r4, r1
 800ada8:	6801      	ldr	r1, [r0, #0]
 800adaa:	438a      	bics	r2, r1
 800adac:	d133      	bne.n	800ae16 <ai_platform_network_init+0x76>
 800adae:	4605      	mov	r5, r0
 800adb0:	2c00      	cmp	r4, #0
 800adb2:	f000 8093 	beq.w	800aedc <ai_platform_network_init+0x13c>
 800adb6:	f8d4 b000 	ldr.w	fp, [r4]
 800adba:	4a58      	ldr	r2, [pc, #352]	@ (800af1c <ai_platform_network_init+0x17c>)
 800adbc:	4593      	cmp	fp, r2
 800adbe:	d10f      	bne.n	800ade0 <ai_platform_network_init+0x40>
 800adc0:	e9d4 e803 	ldrd	lr, r8, [r4, #12]
 800adc4:	e9d4 6701 	ldrd	r6, r7, [r4, #4]
 800adc8:	4b53      	ldr	r3, [pc, #332]	@ (800af18 <ai_platform_network_init+0x178>)
 800adca:	ea4f 4a1e 	mov.w	sl, lr, lsr #16
 800adce:	0c32      	lsrs	r2, r6, #16
 800add0:	4299      	cmp	r1, r3
 800add2:	d02c      	beq.n	800ae2e <ai_platform_network_init+0x8e>
 800add4:	2303      	movs	r3, #3
 800add6:	462c      	mov	r4, r5
 800add8:	612b      	str	r3, [r5, #16]
 800adda:	4620      	mov	r0, r4
 800addc:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800ade0:	4627      	mov	r7, r4
 800ade2:	2101      	movs	r1, #1
 800ade4:	6864      	ldr	r4, [r4, #4]
 800ade6:	4638      	mov	r0, r7
 800ade8:	f107 081c 	add.w	r8, r7, #28
 800adec:	f7ff fd7e 	bl	800a8ec <ai_buffer_get_size>
 800adf0:	4606      	mov	r6, r0
 800adf2:	2101      	movs	r1, #1
 800adf4:	4640      	mov	r0, r8
 800adf6:	f8d7 9020 	ldr.w	r9, [r7, #32]
 800adfa:	f7ff fd77 	bl	800a8ec <ai_buffer_get_size>
 800adfe:	b976      	cbnz	r6, 800ae1e <ai_platform_network_init+0x7e>
 800ae00:	2800      	cmp	r0, #0
 800ae02:	d150      	bne.n	800aea6 <ai_platform_network_init+0x106>
 800ae04:	4680      	mov	r8, r0
 800ae06:	4686      	mov	lr, r0
 800ae08:	4606      	mov	r6, r0
 800ae0a:	4607      	mov	r7, r0
 800ae0c:	ea4f 4e0e 	mov.w	lr, lr, lsl #16
 800ae10:	6829      	ldr	r1, [r5, #0]
 800ae12:	0436      	lsls	r6, r6, #16
 800ae14:	e7d8      	b.n	800adc8 <ai_platform_network_init+0x28>
 800ae16:	2400      	movs	r4, #0
 800ae18:	4620      	mov	r0, r4
 800ae1a:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800ae1e:	2800      	cmp	r0, #0
 800ae20:	d13b      	bne.n	800ae9a <ai_platform_network_init+0xfa>
 800ae22:	4680      	mov	r8, r0
 800ae24:	4686      	mov	lr, r0
 800ae26:	2c00      	cmp	r4, #0
 800ae28:	d05e      	beq.n	800aee8 <ai_platform_network_init+0x148>
 800ae2a:	2601      	movs	r6, #1
 800ae2c:	e7ee      	b.n	800ae0c <ai_platform_network_init+0x6c>
 800ae2e:	8c6b      	ldrh	r3, [r5, #34]	@ 0x22
 800ae30:	4293      	cmp	r3, r2
 800ae32:	4b3a      	ldr	r3, [pc, #232]	@ (800af1c <ai_platform_network_init+0x17c>)
 800ae34:	d33e      	bcc.n	800aeb4 <ai_platform_network_init+0x114>
 800ae36:	459b      	cmp	fp, r3
 800ae38:	d03e      	beq.n	800aeb8 <ai_platform_network_init+0x118>
 800ae3a:	b1a2      	cbz	r2, 800ae66 <ai_platform_network_init+0xc6>
 800ae3c:	ebc2 02c2 	rsb	r2, r2, r2, lsl #3
 800ae40:	f04f 0c00 	mov.w	ip, #0
 800ae44:	ea4f 0982 	mov.w	r9, r2, lsl #2
 800ae48:	6a6c      	ldr	r4, [r5, #36]	@ 0x24
 800ae4a:	eb07 0b0c 	add.w	fp, r7, ip
 800ae4e:	4464      	add	r4, ip
 800ae50:	f10c 0c1c 	add.w	ip, ip, #28
 800ae54:	e8bb 000f 	ldmia.w	fp!, {r0, r1, r2, r3}
 800ae58:	45cc      	cmp	ip, r9
 800ae5a:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800ae5c:	e89b 0007 	ldmia.w	fp, {r0, r1, r2}
 800ae60:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 800ae64:	d1f0      	bne.n	800ae48 <ai_platform_network_init+0xa8>
 800ae66:	8d6b      	ldrh	r3, [r5, #42]	@ 0x2a
 800ae68:	622e      	str	r6, [r5, #32]
 800ae6a:	4553      	cmp	r3, sl
 800ae6c:	d34b      	bcc.n	800af06 <ai_platform_network_init+0x166>
 800ae6e:	f1ba 0f00 	cmp.w	sl, #0
 800ae72:	d025      	beq.n	800aec0 <ai_platform_network_init+0x120>
 800ae74:	ebca 0aca 	rsb	sl, sl, sl, lsl #3
 800ae78:	2700      	movs	r7, #0
 800ae7a:	ea4f 0a8a 	mov.w	sl, sl, lsl #2
 800ae7e:	6aec      	ldr	r4, [r5, #44]	@ 0x2c
 800ae80:	eb08 0607 	add.w	r6, r8, r7
 800ae84:	443c      	add	r4, r7
 800ae86:	371c      	adds	r7, #28
 800ae88:	ce0f      	ldmia	r6!, {r0, r1, r2, r3}
 800ae8a:	4557      	cmp	r7, sl
 800ae8c:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800ae8e:	e896 0007 	ldmia.w	r6, {r0, r1, r2}
 800ae92:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 800ae96:	d1f2      	bne.n	800ae7e <ai_platform_network_init+0xde>
 800ae98:	e012      	b.n	800aec0 <ai_platform_network_init+0x120>
 800ae9a:	f1b9 0f00 	cmp.w	r9, #0
 800ae9e:	d015      	beq.n	800aecc <ai_platform_network_init+0x12c>
 800aea0:	f04f 0e01 	mov.w	lr, #1
 800aea4:	e7bf      	b.n	800ae26 <ai_platform_network_init+0x86>
 800aea6:	f1b9 0f00 	cmp.w	r9, #0
 800aeaa:	d00f      	beq.n	800aecc <ai_platform_network_init+0x12c>
 800aeac:	f04f 0e01 	mov.w	lr, #1
 800aeb0:	4637      	mov	r7, r6
 800aeb2:	e7ab      	b.n	800ae0c <ai_platform_network_init+0x6c>
 800aeb4:	459b      	cmp	fp, r3
 800aeb6:	d11e      	bne.n	800aef6 <ai_platform_network_init+0x156>
 800aeb8:	f8c5 802c 	str.w	r8, [r5, #44]	@ 0x2c
 800aebc:	e9c5 6708 	strd	r6, r7, [r5, #32]
 800aec0:	4628      	mov	r0, r5
 800aec2:	f8c5 e028 	str.w	lr, [r5, #40]	@ 0x28
 800aec6:	f000 fadd 	bl	800b484 <ai_layers_init_all>
 800aeca:	e783      	b.n	800add4 <ai_platform_network_init+0x34>
 800aecc:	2213      	movs	r2, #19
 800aece:	2110      	movs	r1, #16
 800aed0:	f105 000c 	add.w	r0, r5, #12
 800aed4:	2400      	movs	r4, #0
 800aed6:	f000 faa1 	bl	800b41c <core_set_error>
 800aeda:	e77e      	b.n	800adda <ai_platform_network_init+0x3a>
 800aedc:	2211      	movs	r2, #17
 800aede:	2110      	movs	r1, #16
 800aee0:	300c      	adds	r0, #12
 800aee2:	f000 fa9b 	bl	800b41c <core_set_error>
 800aee6:	e778      	b.n	800adda <ai_platform_network_init+0x3a>
 800aee8:	2212      	movs	r2, #18
 800aeea:	2110      	movs	r1, #16
 800aeec:	f105 000c 	add.w	r0, r5, #12
 800aef0:	f000 fa94 	bl	800b41c <core_set_error>
 800aef4:	e771      	b.n	800adda <ai_platform_network_init+0x3a>
 800aef6:	2212      	movs	r2, #18
 800aef8:	2116      	movs	r1, #22
 800aefa:	f105 000c 	add.w	r0, r5, #12
 800aefe:	2400      	movs	r4, #0
 800af00:	f000 fa8c 	bl	800b41c <core_set_error>
 800af04:	e769      	b.n	800adda <ai_platform_network_init+0x3a>
 800af06:	2213      	movs	r2, #19
 800af08:	2116      	movs	r1, #22
 800af0a:	f105 000c 	add.w	r0, r5, #12
 800af0e:	2400      	movs	r4, #0
 800af10:	f000 fa84 	bl	800b41c <core_set_error>
 800af14:	e761      	b.n	800adda <ai_platform_network_init+0x3a>
 800af16:	bf00      	nop
 800af18:	a1c00100 	.word	0xa1c00100
 800af1c:	a1facade 	.word	0xa1facade

0800af20 <ai_platform_network_post_init>:
 800af20:	b538      	push	{r3, r4, r5, lr}
 800af22:	4b16      	ldr	r3, [pc, #88]	@ (800af7c <ai_platform_network_post_init+0x5c>)
 800af24:	6802      	ldr	r2, [r0, #0]
 800af26:	ea02 0103 	and.w	r1, r2, r3
 800af2a:	4393      	bics	r3, r2
 800af2c:	d108      	bne.n	800af40 <ai_platform_network_post_init+0x20>
 800af2e:	6903      	ldr	r3, [r0, #16]
 800af30:	4604      	mov	r4, r0
 800af32:	f013 0502 	ands.w	r5, r3, #2
 800af36:	d005      	beq.n	800af44 <ai_platform_network_post_init+0x24>
 800af38:	428a      	cmp	r2, r1
 800af3a:	d00a      	beq.n	800af52 <ai_platform_network_post_init+0x32>
 800af3c:	2001      	movs	r0, #1
 800af3e:	bd38      	pop	{r3, r4, r5, pc}
 800af40:	2000      	movs	r0, #0
 800af42:	bd38      	pop	{r3, r4, r5, pc}
 800af44:	2210      	movs	r2, #16
 800af46:	2111      	movs	r1, #17
 800af48:	300c      	adds	r0, #12
 800af4a:	f000 fa67 	bl	800b41c <core_set_error>
 800af4e:	4628      	mov	r0, r5
 800af50:	bd38      	pop	{r3, r4, r5, pc}
 800af52:	f000 faa5 	bl	800b4a0 <ai_layers_post_init_all>
 800af56:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 800af58:	2b00      	cmp	r3, #0
 800af5a:	d0ef      	beq.n	800af3c <ai_platform_network_post_init+0x1c>
 800af5c:	6ba5      	ldr	r5, [r4, #56]	@ 0x38
 800af5e:	e008      	b.n	800af72 <ai_platform_network_post_init+0x52>
 800af60:	e9d4 3210 	ldrd	r3, r2, [r4, #64]	@ 0x40
 800af64:	4798      	blx	r3
 800af66:	692b      	ldr	r3, [r5, #16]
 800af68:	42ab      	cmp	r3, r5
 800af6a:	461d      	mov	r5, r3
 800af6c:	d0e6      	beq.n	800af3c <ai_platform_network_post_init+0x1c>
 800af6e:	2b00      	cmp	r3, #0
 800af70:	d0e4      	beq.n	800af3c <ai_platform_network_post_init+0x1c>
 800af72:	4629      	mov	r1, r5
 800af74:	2000      	movs	r0, #0
 800af76:	2d00      	cmp	r5, #0
 800af78:	d1f2      	bne.n	800af60 <ai_platform_network_post_init+0x40>
 800af7a:	e7df      	b.n	800af3c <ai_platform_network_post_init+0x1c>
 800af7c:	a1c00100 	.word	0xa1c00100

0800af80 <ai_platform_network_process>:
 800af80:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800af84:	b085      	sub	sp, #20
 800af86:	4bb7      	ldr	r3, [pc, #732]	@ (800b264 <ai_platform_network_process+0x2e4>)
 800af88:	9202      	str	r2, [sp, #8]
 800af8a:	6802      	ldr	r2, [r0, #0]
 800af8c:	4393      	bics	r3, r2
 800af8e:	f040 8142 	bne.w	800b216 <ai_platform_network_process+0x296>
 800af92:	8e03      	ldrh	r3, [r0, #48]	@ 0x30
 800af94:	4605      	mov	r5, r0
 800af96:	2b00      	cmp	r3, #0
 800af98:	f000 8126 	beq.w	800b1e8 <ai_platform_network_process+0x268>
 800af9c:	6903      	ldr	r3, [r0, #16]
 800af9e:	2200      	movs	r2, #0
 800afa0:	f8d0 8034 	ldr.w	r8, [r0, #52]	@ 0x34
 800afa4:	f003 0303 	and.w	r3, r3, #3
 800afa8:	6182      	str	r2, [r0, #24]
 800afaa:	2b03      	cmp	r3, #3
 800afac:	f040 8122 	bne.w	800b1f4 <ai_platform_network_process+0x274>
 800afb0:	2900      	cmp	r1, #0
 800afb2:	f000 8136 	beq.w	800b222 <ai_platform_network_process+0x2a2>
 800afb6:	fab8 f788 	clz	r7, r8
 800afba:	097f      	lsrs	r7, r7, #5
 800afbc:	f1b8 0f00 	cmp.w	r8, #0
 800afc0:	f000 812f 	beq.w	800b222 <ai_platform_network_process+0x2a2>
 800afc4:	f8b8 3000 	ldrh.w	r3, [r8]
 800afc8:	2b00      	cmp	r3, #0
 800afca:	f000 812a 	beq.w	800b222 <ai_platform_network_process+0x2a2>
 800afce:	698b      	ldr	r3, [r1, #24]
 800afd0:	460e      	mov	r6, r1
 800afd2:	9003      	str	r0, [sp, #12]
 800afd4:	681b      	ldr	r3, [r3, #0]
 800afd6:	9301      	str	r3, [sp, #4]
 800afd8:	f8d8 3004 	ldr.w	r3, [r8, #4]
 800afdc:	2b00      	cmp	r3, #0
 800afde:	d072      	beq.n	800b0c6 <ai_platform_network_process+0x146>
 800afe0:	f853 4027 	ldr.w	r4, [r3, r7, lsl #2]
 800afe4:	2c00      	cmp	r4, #0
 800afe6:	d06e      	beq.n	800b0c6 <ai_platform_network_process+0x146>
 800afe8:	f8d8 3008 	ldr.w	r3, [r8, #8]
 800afec:	ea4f 1b07 	mov.w	fp, r7, lsl #4
 800aff0:	f8d3 a000 	ldr.w	sl, [r3]
 800aff4:	eb1a 1907 	adds.w	r9, sl, r7, lsl #4
 800aff8:	f000 8112 	beq.w	800b220 <ai_platform_network_process+0x2a0>
 800affc:	69a3      	ldr	r3, [r4, #24]
 800affe:	2101      	movs	r1, #1
 800b000:	4630      	mov	r0, r6
 800b002:	685d      	ldr	r5, [r3, #4]
 800b004:	f7ff fc72 	bl	800a8ec <ai_buffer_get_size>
 800b008:	4285      	cmp	r5, r0
 800b00a:	f0c0 8115 	bcc.w	800b238 <ai_platform_network_process+0x2b8>
 800b00e:	68e0      	ldr	r0, [r4, #12]
 800b010:	69b1      	ldr	r1, [r6, #24]
 800b012:	68c2      	ldr	r2, [r0, #12]
 800b014:	68cb      	ldr	r3, [r1, #12]
 800b016:	429a      	cmp	r2, r3
 800b018:	f040 810e 	bne.w	800b238 <ai_platform_network_process+0x2b8>
 800b01c:	6882      	ldr	r2, [r0, #8]
 800b01e:	688b      	ldr	r3, [r1, #8]
 800b020:	429a      	cmp	r2, r3
 800b022:	f040 8109 	bne.w	800b238 <ai_platform_network_process+0x2b8>
 800b026:	6842      	ldr	r2, [r0, #4]
 800b028:	684b      	ldr	r3, [r1, #4]
 800b02a:	429a      	cmp	r2, r3
 800b02c:	f040 8104 	bne.w	800b238 <ai_platform_network_process+0x2b8>
 800b030:	69a3      	ldr	r3, [r4, #24]
 800b032:	e9d3 0100 	ldrd	r0, r1, [r3]
 800b036:	f003 fa07 	bl	800e448 <ai_array_get_data_byte_size>
 800b03a:	4605      	mov	r5, r0
 800b03c:	4620      	mov	r0, r4
 800b03e:	f003 fa1b 	bl	800e478 <get_tensor_byte_size>
 800b042:	4285      	cmp	r5, r0
 800b044:	f0c0 80f8 	bcc.w	800b238 <ai_platform_network_process+0x2b8>
 800b048:	69a3      	ldr	r3, [r4, #24]
 800b04a:	6818      	ldr	r0, [r3, #0]
 800b04c:	f003 f964 	bl	800e318 <ai_array_to_buffer_fmt>
 800b050:	6833      	ldr	r3, [r6, #0]
 800b052:	4058      	eors	r0, r3
 800b054:	f030 407e 	bics.w	r0, r0, #4261412864	@ 0xfe000000
 800b058:	f040 81a4 	bne.w	800b3a4 <ai_platform_network_process+0x424>
 800b05c:	6873      	ldr	r3, [r6, #4]
 800b05e:	2b00      	cmp	r3, #0
 800b060:	f000 80de 	beq.w	800b220 <ai_platform_network_process+0x2a0>
 800b064:	69b3      	ldr	r3, [r6, #24]
 800b066:	681b      	ldr	r3, [r3, #0]
 800b068:	2b00      	cmp	r3, #0
 800b06a:	f000 81a4 	beq.w	800b3b6 <ai_platform_network_process+0x436>
 800b06e:	9a01      	ldr	r2, [sp, #4]
 800b070:	4620      	mov	r0, r4
 800b072:	3701      	adds	r7, #1
 800b074:	361c      	adds	r6, #28
 800b076:	429a      	cmp	r2, r3
 800b078:	bf38      	it	cc
 800b07a:	461a      	movcc	r2, r3
 800b07c:	9201      	str	r2, [sp, #4]
 800b07e:	f003 f9fb 	bl	800e478 <get_tensor_byte_size>
 800b082:	f8c9 0008 	str.w	r0, [r9, #8]
 800b086:	f856 3c04 	ldr.w	r3, [r6, #-4]
 800b08a:	681b      	ldr	r3, [r3, #0]
 800b08c:	fb00 f303 	mul.w	r3, r0, r3
 800b090:	f8c9 300c 	str.w	r3, [r9, #12]
 800b094:	f856 1c18 	ldr.w	r1, [r6, #-24]
 800b098:	440b      	add	r3, r1
 800b09a:	f8c9 1004 	str.w	r1, [r9, #4]
 800b09e:	f84a 300b 	str.w	r3, [sl, fp]
 800b0a2:	69a0      	ldr	r0, [r4, #24]
 800b0a4:	6803      	ldr	r3, [r0, #0]
 800b0a6:	009a      	lsls	r2, r3, #2
 800b0a8:	f100 80af 	bmi.w	800b20a <ai_platform_network_process+0x28a>
 800b0ac:	e9d0 3202 	ldrd	r3, r2, [r0, #8]
 800b0b0:	1a9b      	subs	r3, r3, r2
 800b0b2:	4419      	add	r1, r3
 800b0b4:	6081      	str	r1, [r0, #8]
 800b0b6:	69a3      	ldr	r3, [r4, #24]
 800b0b8:	f8d9 2004 	ldr.w	r2, [r9, #4]
 800b0bc:	60da      	str	r2, [r3, #12]
 800b0be:	f8b8 3000 	ldrh.w	r3, [r8]
 800b0c2:	42bb      	cmp	r3, r7
 800b0c4:	d888      	bhi.n	800afd8 <ai_platform_network_process+0x58>
 800b0c6:	9d03      	ldr	r5, [sp, #12]
 800b0c8:	9b02      	ldr	r3, [sp, #8]
 800b0ca:	8e2a      	ldrh	r2, [r5, #48]	@ 0x30
 800b0cc:	2b00      	cmp	r3, #0
 800b0ce:	f000 817b 	beq.w	800b3c8 <ai_platform_network_process+0x448>
 800b0d2:	2a01      	cmp	r2, #1
 800b0d4:	f240 80bd 	bls.w	800b252 <ai_platform_network_process+0x2d2>
 800b0d8:	f8d5 9034 	ldr.w	r9, [r5, #52]	@ 0x34
 800b0dc:	f8b9 300c 	ldrh.w	r3, [r9, #12]
 800b0e0:	2b00      	cmp	r3, #0
 800b0e2:	f000 80b6 	beq.w	800b252 <ai_platform_network_process+0x2d2>
 800b0e6:	2700      	movs	r7, #0
 800b0e8:	f8dd b008 	ldr.w	fp, [sp, #8]
 800b0ec:	9502      	str	r5, [sp, #8]
 800b0ee:	f8d9 3010 	ldr.w	r3, [r9, #16]
 800b0f2:	2b00      	cmp	r3, #0
 800b0f4:	f000 80bd 	beq.w	800b272 <ai_platform_network_process+0x2f2>
 800b0f8:	f853 6027 	ldr.w	r6, [r3, r7, lsl #2]
 800b0fc:	2e00      	cmp	r6, #0
 800b0fe:	f000 80b8 	beq.w	800b272 <ai_platform_network_process+0x2f2>
 800b102:	f8d9 3014 	ldr.w	r3, [r9, #20]
 800b106:	ea4f 1a07 	mov.w	sl, r7, lsl #4
 800b10a:	681c      	ldr	r4, [r3, #0]
 800b10c:	eb14 1807 	adds.w	r8, r4, r7, lsl #4
 800b110:	f000 8170 	beq.w	800b3f4 <ai_platform_network_process+0x474>
 800b114:	69b3      	ldr	r3, [r6, #24]
 800b116:	2101      	movs	r1, #1
 800b118:	4658      	mov	r0, fp
 800b11a:	685d      	ldr	r5, [r3, #4]
 800b11c:	f7ff fbe6 	bl	800a8ec <ai_buffer_get_size>
 800b120:	4285      	cmp	r5, r0
 800b122:	f0c0 8095 	bcc.w	800b250 <ai_platform_network_process+0x2d0>
 800b126:	68f0      	ldr	r0, [r6, #12]
 800b128:	f8db 1018 	ldr.w	r1, [fp, #24]
 800b12c:	68c2      	ldr	r2, [r0, #12]
 800b12e:	68cb      	ldr	r3, [r1, #12]
 800b130:	429a      	cmp	r2, r3
 800b132:	f040 808d 	bne.w	800b250 <ai_platform_network_process+0x2d0>
 800b136:	6882      	ldr	r2, [r0, #8]
 800b138:	688b      	ldr	r3, [r1, #8]
 800b13a:	429a      	cmp	r2, r3
 800b13c:	f040 8088 	bne.w	800b250 <ai_platform_network_process+0x2d0>
 800b140:	6842      	ldr	r2, [r0, #4]
 800b142:	684b      	ldr	r3, [r1, #4]
 800b144:	429a      	cmp	r2, r3
 800b146:	f040 8083 	bne.w	800b250 <ai_platform_network_process+0x2d0>
 800b14a:	69b3      	ldr	r3, [r6, #24]
 800b14c:	e9d3 0100 	ldrd	r0, r1, [r3]
 800b150:	f003 f97a 	bl	800e448 <ai_array_get_data_byte_size>
 800b154:	9003      	str	r0, [sp, #12]
 800b156:	4630      	mov	r0, r6
 800b158:	f003 f98e 	bl	800e478 <get_tensor_byte_size>
 800b15c:	9b03      	ldr	r3, [sp, #12]
 800b15e:	4283      	cmp	r3, r0
 800b160:	d376      	bcc.n	800b250 <ai_platform_network_process+0x2d0>
 800b162:	69b3      	ldr	r3, [r6, #24]
 800b164:	6818      	ldr	r0, [r3, #0]
 800b166:	f003 f8d7 	bl	800e318 <ai_array_to_buffer_fmt>
 800b16a:	f8db 3000 	ldr.w	r3, [fp]
 800b16e:	4058      	eors	r0, r3
 800b170:	f030 407e 	bics.w	r0, r0, #4261412864	@ 0xfe000000
 800b174:	f040 812c 	bne.w	800b3d0 <ai_platform_network_process+0x450>
 800b178:	f8db 3004 	ldr.w	r3, [fp, #4]
 800b17c:	2b00      	cmp	r3, #0
 800b17e:	f000 8139 	beq.w	800b3f4 <ai_platform_network_process+0x474>
 800b182:	f8db 3018 	ldr.w	r3, [fp, #24]
 800b186:	681b      	ldr	r3, [r3, #0]
 800b188:	2b00      	cmp	r3, #0
 800b18a:	f000 812a 	beq.w	800b3e2 <ai_platform_network_process+0x462>
 800b18e:	9a01      	ldr	r2, [sp, #4]
 800b190:	4630      	mov	r0, r6
 800b192:	3701      	adds	r7, #1
 800b194:	f10b 0b1c 	add.w	fp, fp, #28
 800b198:	429a      	cmp	r2, r3
 800b19a:	bf38      	it	cc
 800b19c:	461a      	movcc	r2, r3
 800b19e:	9201      	str	r2, [sp, #4]
 800b1a0:	f003 f96a 	bl	800e478 <get_tensor_byte_size>
 800b1a4:	f8c8 0008 	str.w	r0, [r8, #8]
 800b1a8:	f85b 3c04 	ldr.w	r3, [fp, #-4]
 800b1ac:	681b      	ldr	r3, [r3, #0]
 800b1ae:	fb00 f303 	mul.w	r3, r0, r3
 800b1b2:	f8c8 300c 	str.w	r3, [r8, #12]
 800b1b6:	f85b 1c18 	ldr.w	r1, [fp, #-24]
 800b1ba:	440b      	add	r3, r1
 800b1bc:	f8c8 1004 	str.w	r1, [r8, #4]
 800b1c0:	f844 300a 	str.w	r3, [r4, sl]
 800b1c4:	69b0      	ldr	r0, [r6, #24]
 800b1c6:	6803      	ldr	r3, [r0, #0]
 800b1c8:	009b      	lsls	r3, r3, #2
 800b1ca:	d44d      	bmi.n	800b268 <ai_platform_network_process+0x2e8>
 800b1cc:	e9d0 3202 	ldrd	r3, r2, [r0, #8]
 800b1d0:	1a9b      	subs	r3, r3, r2
 800b1d2:	4419      	add	r1, r3
 800b1d4:	6081      	str	r1, [r0, #8]
 800b1d6:	69b3      	ldr	r3, [r6, #24]
 800b1d8:	f8d8 2004 	ldr.w	r2, [r8, #4]
 800b1dc:	60da      	str	r2, [r3, #12]
 800b1de:	f8b9 300c 	ldrh.w	r3, [r9, #12]
 800b1e2:	42bb      	cmp	r3, r7
 800b1e4:	d883      	bhi.n	800b0ee <ai_platform_network_process+0x16e>
 800b1e6:	e044      	b.n	800b272 <ai_platform_network_process+0x2f2>
 800b1e8:	6902      	ldr	r2, [r0, #16]
 800b1ea:	6183      	str	r3, [r0, #24]
 800b1ec:	f002 0203 	and.w	r2, r2, #3
 800b1f0:	2a03      	cmp	r2, #3
 800b1f2:	d016      	beq.n	800b222 <ai_platform_network_process+0x2a2>
 800b1f4:	2230      	movs	r2, #48	@ 0x30
 800b1f6:	2111      	movs	r1, #17
 800b1f8:	f105 000c 	add.w	r0, r5, #12
 800b1fc:	2400      	movs	r4, #0
 800b1fe:	f000 f90d 	bl	800b41c <core_set_error>
 800b202:	4620      	mov	r0, r4
 800b204:	b005      	add	sp, #20
 800b206:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800b20a:	f8b8 3000 	ldrh.w	r3, [r8]
 800b20e:	429f      	cmp	r7, r3
 800b210:	f4ff aee2 	bcc.w	800afd8 <ai_platform_network_process+0x58>
 800b214:	e757      	b.n	800b0c6 <ai_platform_network_process+0x146>
 800b216:	2400      	movs	r4, #0
 800b218:	4620      	mov	r0, r4
 800b21a:	b005      	add	sp, #20
 800b21c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800b220:	9d03      	ldr	r5, [sp, #12]
 800b222:	2400      	movs	r4, #0
 800b224:	2217      	movs	r2, #23
 800b226:	2112      	movs	r1, #18
 800b228:	f105 000c 	add.w	r0, r5, #12
 800b22c:	f000 f8f6 	bl	800b41c <core_set_error>
 800b230:	4620      	mov	r0, r4
 800b232:	b005      	add	sp, #20
 800b234:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800b238:	9d03      	ldr	r5, [sp, #12]
 800b23a:	2400      	movs	r4, #0
 800b23c:	2218      	movs	r2, #24
 800b23e:	2112      	movs	r1, #18
 800b240:	f105 000c 	add.w	r0, r5, #12
 800b244:	f000 f8ea 	bl	800b41c <core_set_error>
 800b248:	4620      	mov	r0, r4
 800b24a:	b005      	add	sp, #20
 800b24c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800b250:	9d02      	ldr	r5, [sp, #8]
 800b252:	2218      	movs	r2, #24
 800b254:	2113      	movs	r1, #19
 800b256:	f105 000c 	add.w	r0, r5, #12
 800b25a:	2400      	movs	r4, #0
 800b25c:	f000 f8de 	bl	800b41c <core_set_error>
 800b260:	e7cf      	b.n	800b202 <ai_platform_network_process+0x282>
 800b262:	bf00      	nop
 800b264:	a1c00100 	.word	0xa1c00100
 800b268:	f8b9 300c 	ldrh.w	r3, [r9, #12]
 800b26c:	429f      	cmp	r7, r3
 800b26e:	f4ff af3e 	bcc.w	800b0ee <ai_platform_network_process+0x16e>
 800b272:	9d02      	ldr	r5, [sp, #8]
 800b274:	f8bd 3004 	ldrh.w	r3, [sp, #4]
 800b278:	8e2a      	ldrh	r2, [r5, #48]	@ 0x30
 800b27a:	832b      	strh	r3, [r5, #24]
 800b27c:	2a00      	cmp	r2, #0
 800b27e:	f040 808b 	bne.w	800b398 <ai_platform_network_process+0x418>
 800b282:	4616      	mov	r6, r2
 800b284:	4617      	mov	r7, r2
 800b286:	8b6c      	ldrh	r4, [r5, #26]
 800b288:	429c      	cmp	r4, r3
 800b28a:	d2ba      	bcs.n	800b202 <ai_platform_network_process+0x282>
 800b28c:	46ab      	mov	fp, r5
 800b28e:	2e00      	cmp	r6, #0
 800b290:	d030      	beq.n	800b2f4 <ai_platform_network_process+0x374>
 800b292:	f04f 0800 	mov.w	r8, #0
 800b296:	e014      	b.n	800b2c2 <ai_platform_network_process+0x342>
 800b298:	6882      	ldr	r2, [r0, #8]
 800b29a:	68c5      	ldr	r5, [r0, #12]
 800b29c:	6863      	ldr	r3, [r4, #4]
 800b29e:	1b52      	subs	r2, r2, r5
 800b2a0:	4413      	add	r3, r2
 800b2a2:	6083      	str	r3, [r0, #8]
 800b2a4:	698b      	ldr	r3, [r1, #24]
 800b2a6:	6862      	ldr	r2, [r4, #4]
 800b2a8:	60da      	str	r2, [r3, #12]
 800b2aa:	f859 200a 	ldr.w	r2, [r9, sl]
 800b2ae:	f108 0801 	add.w	r8, r8, #1
 800b2b2:	e9d4 3101 	ldrd	r3, r1, [r4, #4]
 800b2b6:	440b      	add	r3, r1
 800b2b8:	4293      	cmp	r3, r2
 800b2ba:	d301      	bcc.n	800b2c0 <ai_platform_network_process+0x340>
 800b2bc:	68e3      	ldr	r3, [r4, #12]
 800b2be:	1ad3      	subs	r3, r2, r3
 800b2c0:	6063      	str	r3, [r4, #4]
 800b2c2:	8833      	ldrh	r3, [r6, #0]
 800b2c4:	ea4f 1a08 	mov.w	sl, r8, lsl #4
 800b2c8:	4543      	cmp	r3, r8
 800b2ca:	d913      	bls.n	800b2f4 <ai_platform_network_process+0x374>
 800b2cc:	6873      	ldr	r3, [r6, #4]
 800b2ce:	b18b      	cbz	r3, 800b2f4 <ai_platform_network_process+0x374>
 800b2d0:	f853 1028 	ldr.w	r1, [r3, r8, lsl #2]
 800b2d4:	b171      	cbz	r1, 800b2f4 <ai_platform_network_process+0x374>
 800b2d6:	6988      	ldr	r0, [r1, #24]
 800b2d8:	68b2      	ldr	r2, [r6, #8]
 800b2da:	6803      	ldr	r3, [r0, #0]
 800b2dc:	f8d2 9000 	ldr.w	r9, [r2]
 800b2e0:	009d      	lsls	r5, r3, #2
 800b2e2:	eb09 1408 	add.w	r4, r9, r8, lsl #4
 800b2e6:	d5d7      	bpl.n	800b298 <ai_platform_network_process+0x318>
 800b2e8:	6881      	ldr	r1, [r0, #8]
 800b2ea:	68a2      	ldr	r2, [r4, #8]
 800b2ec:	6860      	ldr	r0, [r4, #4]
 800b2ee:	f002 fbd3 	bl	800da98 <st_int8_copy>
 800b2f2:	e7da      	b.n	800b2aa <ai_platform_network_process+0x32a>
 800b2f4:	4658      	mov	r0, fp
 800b2f6:	f000 f8e7 	bl	800b4c8 <ai_layers_forward_all>
 800b2fa:	2f00      	cmp	r7, #0
 800b2fc:	d03d      	beq.n	800b37a <ai_platform_network_process+0x3fa>
 800b2fe:	2400      	movs	r4, #0
 800b300:	e016      	b.n	800b330 <ai_platform_network_process+0x3b0>
 800b302:	e9d8 3201 	ldrd	r3, r2, [r8, #4]
 800b306:	f859 100a 	ldr.w	r1, [r9, sl]
 800b30a:	4413      	add	r3, r2
 800b30c:	428b      	cmp	r3, r1
 800b30e:	d302      	bcc.n	800b316 <ai_platform_network_process+0x396>
 800b310:	f8d8 300c 	ldr.w	r3, [r8, #12]
 800b314:	1acb      	subs	r3, r1, r3
 800b316:	f8c8 3004 	str.w	r3, [r8, #4]
 800b31a:	6981      	ldr	r1, [r0, #24]
 800b31c:	e9d1 2502 	ldrd	r2, r5, [r1, #8]
 800b320:	1b52      	subs	r2, r2, r5
 800b322:	4413      	add	r3, r2
 800b324:	608b      	str	r3, [r1, #8]
 800b326:	6983      	ldr	r3, [r0, #24]
 800b328:	f8d8 2004 	ldr.w	r2, [r8, #4]
 800b32c:	60da      	str	r2, [r3, #12]
 800b32e:	3401      	adds	r4, #1
 800b330:	883b      	ldrh	r3, [r7, #0]
 800b332:	42a3      	cmp	r3, r4
 800b334:	d921      	bls.n	800b37a <ai_platform_network_process+0x3fa>
 800b336:	687b      	ldr	r3, [r7, #4]
 800b338:	b1fb      	cbz	r3, 800b37a <ai_platform_network_process+0x3fa>
 800b33a:	f853 0024 	ldr.w	r0, [r3, r4, lsl #2]
 800b33e:	b1e0      	cbz	r0, 800b37a <ai_platform_network_process+0x3fa>
 800b340:	68ba      	ldr	r2, [r7, #8]
 800b342:	ea4f 1a04 	mov.w	sl, r4, lsl #4
 800b346:	6983      	ldr	r3, [r0, #24]
 800b348:	f8d2 9000 	ldr.w	r9, [r2]
 800b34c:	681a      	ldr	r2, [r3, #0]
 800b34e:	eb09 1804 	add.w	r8, r9, r4, lsl #4
 800b352:	0092      	lsls	r2, r2, #2
 800b354:	d5d5      	bpl.n	800b302 <ai_platform_network_process+0x382>
 800b356:	6898      	ldr	r0, [r3, #8]
 800b358:	e9d8 1201 	ldrd	r1, r2, [r8, #4]
 800b35c:	f002 fb9c 	bl	800da98 <st_int8_copy>
 800b360:	f859 200a 	ldr.w	r2, [r9, sl]
 800b364:	e9d8 3101 	ldrd	r3, r1, [r8, #4]
 800b368:	440b      	add	r3, r1
 800b36a:	4293      	cmp	r3, r2
 800b36c:	d302      	bcc.n	800b374 <ai_platform_network_process+0x3f4>
 800b36e:	f8d8 300c 	ldr.w	r3, [r8, #12]
 800b372:	1ad3      	subs	r3, r2, r3
 800b374:	f8c8 3004 	str.w	r3, [r8, #4]
 800b378:	e7d9      	b.n	800b32e <ai_platform_network_process+0x3ae>
 800b37a:	f8bb 401a 	ldrh.w	r4, [fp, #26]
 800b37e:	f8bb 3018 	ldrh.w	r3, [fp, #24]
 800b382:	3401      	adds	r4, #1
 800b384:	b2a4      	uxth	r4, r4
 800b386:	42a3      	cmp	r3, r4
 800b388:	f8ab 401a 	strh.w	r4, [fp, #26]
 800b38c:	f63f af7f 	bhi.w	800b28e <ai_platform_network_process+0x30e>
 800b390:	4620      	mov	r0, r4
 800b392:	b005      	add	sp, #20
 800b394:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800b398:	2a01      	cmp	r2, #1
 800b39a:	6b6e      	ldr	r6, [r5, #52]	@ 0x34
 800b39c:	d033      	beq.n	800b406 <ai_platform_network_process+0x486>
 800b39e:	f106 070c 	add.w	r7, r6, #12
 800b3a2:	e770      	b.n	800b286 <ai_platform_network_process+0x306>
 800b3a4:	9d03      	ldr	r5, [sp, #12]
 800b3a6:	2219      	movs	r2, #25
 800b3a8:	2112      	movs	r1, #18
 800b3aa:	2400      	movs	r4, #0
 800b3ac:	f105 000c 	add.w	r0, r5, #12
 800b3b0:	f000 f834 	bl	800b41c <core_set_error>
 800b3b4:	e725      	b.n	800b202 <ai_platform_network_process+0x282>
 800b3b6:	9d03      	ldr	r5, [sp, #12]
 800b3b8:	4604      	mov	r4, r0
 800b3ba:	2221      	movs	r2, #33	@ 0x21
 800b3bc:	2112      	movs	r1, #18
 800b3be:	f105 000c 	add.w	r0, r5, #12
 800b3c2:	f000 f82b 	bl	800b41c <core_set_error>
 800b3c6:	e71c      	b.n	800b202 <ai_platform_network_process+0x282>
 800b3c8:	f8bd 3004 	ldrh.w	r3, [sp, #4]
 800b3cc:	832b      	strh	r3, [r5, #24]
 800b3ce:	e755      	b.n	800b27c <ai_platform_network_process+0x2fc>
 800b3d0:	9d02      	ldr	r5, [sp, #8]
 800b3d2:	2219      	movs	r2, #25
 800b3d4:	2113      	movs	r1, #19
 800b3d6:	2400      	movs	r4, #0
 800b3d8:	f105 000c 	add.w	r0, r5, #12
 800b3dc:	f000 f81e 	bl	800b41c <core_set_error>
 800b3e0:	e70f      	b.n	800b202 <ai_platform_network_process+0x282>
 800b3e2:	9d02      	ldr	r5, [sp, #8]
 800b3e4:	4604      	mov	r4, r0
 800b3e6:	2221      	movs	r2, #33	@ 0x21
 800b3e8:	2113      	movs	r1, #19
 800b3ea:	f105 000c 	add.w	r0, r5, #12
 800b3ee:	f000 f815 	bl	800b41c <core_set_error>
 800b3f2:	e706      	b.n	800b202 <ai_platform_network_process+0x282>
 800b3f4:	9d02      	ldr	r5, [sp, #8]
 800b3f6:	2217      	movs	r2, #23
 800b3f8:	2113      	movs	r1, #19
 800b3fa:	2400      	movs	r4, #0
 800b3fc:	f105 000c 	add.w	r0, r5, #12
 800b400:	f000 f80c 	bl	800b41c <core_set_error>
 800b404:	e6fd      	b.n	800b202 <ai_platform_network_process+0x282>
 800b406:	2700      	movs	r7, #0
 800b408:	e73d      	b.n	800b286 <ai_platform_network_process+0x306>
 800b40a:	bf00      	nop

0800b40c <core_init>:
 800b40c:	2001      	movs	r0, #1
 800b40e:	4770      	bx	lr

0800b410 <core_get_error>:
 800b410:	4603      	mov	r3, r0
 800b412:	2200      	movs	r2, #0
 800b414:	6800      	ldr	r0, [r0, #0]
 800b416:	601a      	str	r2, [r3, #0]
 800b418:	4770      	bx	lr
 800b41a:	bf00      	nop

0800b41c <core_set_error>:
 800b41c:	4603      	mov	r3, r0
 800b41e:	7800      	ldrb	r0, [r0, #0]
 800b420:	b108      	cbz	r0, 800b426 <core_set_error+0xa>
 800b422:	2000      	movs	r0, #0
 800b424:	4770      	bx	lr
 800b426:	7019      	strb	r1, [r3, #0]
 800b428:	2001      	movs	r0, #1
 800b42a:	6819      	ldr	r1, [r3, #0]
 800b42c:	f362 211f 	bfi	r1, r2, #8, #24
 800b430:	6019      	str	r1, [r3, #0]
 800b432:	4770      	bx	lr

0800b434 <ai_check_custom_types>:
 800b434:	b082      	sub	sp, #8
 800b436:	4b12      	ldr	r3, [pc, #72]	@ (800b480 <ai_check_custom_types+0x4c>)
 800b438:	9301      	str	r3, [sp, #4]
 800b43a:	b118      	cbz	r0, 800b444 <ai_check_custom_types+0x10>
 800b43c:	7803      	ldrb	r3, [r0, #0]
 800b43e:	2b03      	cmp	r3, #3
 800b440:	d002      	beq.n	800b448 <ai_check_custom_types+0x14>
 800b442:	2000      	movs	r0, #0
 800b444:	b002      	add	sp, #8
 800b446:	4770      	bx	lr
 800b448:	f89d 2004 	ldrb.w	r2, [sp, #4]
 800b44c:	4293      	cmp	r3, r2
 800b44e:	d004      	beq.n	800b45a <ai_check_custom_types+0x26>
 800b450:	2001      	movs	r0, #1
 800b452:	f080 0001 	eor.w	r0, r0, #1
 800b456:	b002      	add	sp, #8
 800b458:	4770      	bx	lr
 800b45a:	7842      	ldrb	r2, [r0, #1]
 800b45c:	3001      	adds	r0, #1
 800b45e:	f89d 3005 	ldrb.w	r3, [sp, #5]
 800b462:	429a      	cmp	r2, r3
 800b464:	d1f4      	bne.n	800b450 <ai_check_custom_types+0x1c>
 800b466:	f810 2f01 	ldrb.w	r2, [r0, #1]!
 800b46a:	f89d 3006 	ldrb.w	r3, [sp, #6]
 800b46e:	429a      	cmp	r2, r3
 800b470:	d1ee      	bne.n	800b450 <ai_check_custom_types+0x1c>
 800b472:	7842      	ldrb	r2, [r0, #1]
 800b474:	f89d 3007 	ldrb.w	r3, [sp, #7]
 800b478:	429a      	cmp	r2, r3
 800b47a:	d1e9      	bne.n	800b450 <ai_check_custom_types+0x1c>
 800b47c:	2000      	movs	r0, #0
 800b47e:	e7e8      	b.n	800b452 <ai_check_custom_types+0x1e>
 800b480:	84048403 	.word	0x84048403

0800b484 <ai_layers_init_all>:
 800b484:	2100      	movs	r1, #0
 800b486:	6b83      	ldr	r3, [r0, #56]	@ 0x38
 800b488:	b13b      	cbz	r3, 800b49a <ai_layers_init_all+0x16>
 800b48a:	691a      	ldr	r2, [r3, #16]
 800b48c:	3101      	adds	r1, #1
 800b48e:	60d8      	str	r0, [r3, #12]
 800b490:	429a      	cmp	r2, r3
 800b492:	4613      	mov	r3, r2
 800b494:	d001      	beq.n	800b49a <ai_layers_init_all+0x16>
 800b496:	2a00      	cmp	r2, #0
 800b498:	d1f6      	bne.n	800b488 <ai_layers_init_all+0x4>
 800b49a:	4608      	mov	r0, r1
 800b49c:	4770      	bx	lr
 800b49e:	bf00      	nop

0800b4a0 <ai_layers_post_init_all>:
 800b4a0:	b538      	push	{r3, r4, r5, lr}
 800b4a2:	2500      	movs	r5, #0
 800b4a4:	6b84      	ldr	r4, [r0, #56]	@ 0x38
 800b4a6:	b16c      	cbz	r4, 800b4c4 <ai_layers_post_init_all+0x24>
 800b4a8:	6863      	ldr	r3, [r4, #4]
 800b4aa:	07db      	lsls	r3, r3, #31
 800b4ac:	d504      	bpl.n	800b4b8 <ai_layers_post_init_all+0x18>
 800b4ae:	6a23      	ldr	r3, [r4, #32]
 800b4b0:	4620      	mov	r0, r4
 800b4b2:	b10b      	cbz	r3, 800b4b8 <ai_layers_post_init_all+0x18>
 800b4b4:	3501      	adds	r5, #1
 800b4b6:	4798      	blx	r3
 800b4b8:	6923      	ldr	r3, [r4, #16]
 800b4ba:	42a3      	cmp	r3, r4
 800b4bc:	461c      	mov	r4, r3
 800b4be:	d001      	beq.n	800b4c4 <ai_layers_post_init_all+0x24>
 800b4c0:	2b00      	cmp	r3, #0
 800b4c2:	d1f0      	bne.n	800b4a6 <ai_layers_post_init_all+0x6>
 800b4c4:	4628      	mov	r0, r5
 800b4c6:	bd38      	pop	{r3, r4, r5, pc}

0800b4c8 <ai_layers_forward_all>:
 800b4c8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800b4cc:	f8d0 8040 	ldr.w	r8, [r0, #64]	@ 0x40
 800b4d0:	4604      	mov	r4, r0
 800b4d2:	f1b8 0f00 	cmp.w	r8, #0
 800b4d6:	d02a      	beq.n	800b52e <ai_layers_forward_all+0x66>
 800b4d8:	6b81      	ldr	r1, [r0, #56]	@ 0x38
 800b4da:	63c1      	str	r1, [r0, #60]	@ 0x3c
 800b4dc:	b319      	cbz	r1, 800b526 <ai_layers_forward_all+0x5e>
 800b4de:	6c42      	ldr	r2, [r0, #68]	@ 0x44
 800b4e0:	2001      	movs	r0, #1
 800b4e2:	47c0      	blx	r8
 800b4e4:	6be6      	ldr	r6, [r4, #60]	@ 0x3c
 800b4e6:	b1f6      	cbz	r6, 800b526 <ai_layers_forward_all+0x5e>
 800b4e8:	2700      	movs	r7, #0
 800b4ea:	4631      	mov	r1, r6
 800b4ec:	6c62      	ldr	r2, [r4, #68]	@ 0x44
 800b4ee:	2002      	movs	r0, #2
 800b4f0:	47c0      	blx	r8
 800b4f2:	6be5      	ldr	r5, [r4, #60]	@ 0x3c
 800b4f4:	4628      	mov	r0, r5
 800b4f6:	696b      	ldr	r3, [r5, #20]
 800b4f8:	4798      	blx	r3
 800b4fa:	692e      	ldr	r6, [r5, #16]
 800b4fc:	2003      	movs	r0, #3
 800b4fe:	6c62      	ldr	r2, [r4, #68]	@ 0x44
 800b500:	42b5      	cmp	r5, r6
 800b502:	6be1      	ldr	r1, [r4, #60]	@ 0x3c
 800b504:	d007      	beq.n	800b516 <ai_layers_forward_all+0x4e>
 800b506:	47c0      	blx	r8
 800b508:	3701      	adds	r7, #1
 800b50a:	63e6      	str	r6, [r4, #60]	@ 0x3c
 800b50c:	2e00      	cmp	r6, #0
 800b50e:	d1ec      	bne.n	800b4ea <ai_layers_forward_all+0x22>
 800b510:	4638      	mov	r0, r7
 800b512:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800b516:	2003      	movs	r0, #3
 800b518:	3701      	adds	r7, #1
 800b51a:	47c0      	blx	r8
 800b51c:	2300      	movs	r3, #0
 800b51e:	4638      	mov	r0, r7
 800b520:	63e3      	str	r3, [r4, #60]	@ 0x3c
 800b522:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800b526:	2700      	movs	r7, #0
 800b528:	4638      	mov	r0, r7
 800b52a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800b52e:	6b85      	ldr	r5, [r0, #56]	@ 0x38
 800b530:	63c5      	str	r5, [r0, #60]	@ 0x3c
 800b532:	2d00      	cmp	r5, #0
 800b534:	d0f7      	beq.n	800b526 <ai_layers_forward_all+0x5e>
 800b536:	4647      	mov	r7, r8
 800b538:	696b      	ldr	r3, [r5, #20]
 800b53a:	4628      	mov	r0, r5
 800b53c:	4798      	blx	r3
 800b53e:	462b      	mov	r3, r5
 800b540:	692d      	ldr	r5, [r5, #16]
 800b542:	429d      	cmp	r5, r3
 800b544:	d004      	beq.n	800b550 <ai_layers_forward_all+0x88>
 800b546:	3701      	adds	r7, #1
 800b548:	63e5      	str	r5, [r4, #60]	@ 0x3c
 800b54a:	2d00      	cmp	r5, #0
 800b54c:	d1f4      	bne.n	800b538 <ai_layers_forward_all+0x70>
 800b54e:	e7df      	b.n	800b510 <ai_layers_forward_all+0x48>
 800b550:	2300      	movs	r3, #0
 800b552:	3701      	adds	r7, #1
 800b554:	63e3      	str	r3, [r4, #60]	@ 0x3c
 800b556:	e7db      	b.n	800b510 <ai_layers_forward_all+0x48>

0800b558 <func_dummy>:
 800b558:	4770      	bx	lr
 800b55a:	bf00      	nop

0800b55c <forward_conv2d_sssa8_ch_nl_pool>:
 800b55c:	6982      	ldr	r2, [r0, #24]
 800b55e:	8813      	ldrh	r3, [r2, #0]
 800b560:	2b00      	cmp	r3, #0
 800b562:	f000 8230 	beq.w	800b9c6 <forward_conv2d_sssa8_ch_nl_pool+0x46a>
 800b566:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b56a:	ed2d 8b06 	vpush	{d8-d10}
 800b56e:	6852      	ldr	r2, [r2, #4]
 800b570:	b0d1      	sub	sp, #324	@ 0x144
 800b572:	4681      	mov	r9, r0
 800b574:	f8d2 a004 	ldr.w	sl, [r2, #4]
 800b578:	f1ba 0f00 	cmp.w	sl, #0
 800b57c:	d001      	beq.n	800b582 <forward_conv2d_sssa8_ch_nl_pool+0x26>
 800b57e:	f8da a000 	ldr.w	sl, [sl]
 800b582:	2b01      	cmp	r3, #1
 800b584:	f000 8276 	beq.w	800ba74 <forward_conv2d_sssa8_ch_nl_pool+0x518>
 800b588:	6911      	ldr	r1, [r2, #16]
 800b58a:	911c      	str	r1, [sp, #112]	@ 0x70
 800b58c:	b109      	cbz	r1, 800b592 <forward_conv2d_sssa8_ch_nl_pool+0x36>
 800b58e:	6809      	ldr	r1, [r1, #0]
 800b590:	911c      	str	r1, [sp, #112]	@ 0x70
 800b592:	2b02      	cmp	r3, #2
 800b594:	f000 8214 	beq.w	800b9c0 <forward_conv2d_sssa8_ch_nl_pool+0x464>
 800b598:	69d1      	ldr	r1, [r2, #28]
 800b59a:	2900      	cmp	r1, #0
 800b59c:	f000 8265 	beq.w	800ba6a <forward_conv2d_sssa8_ch_nl_pool+0x50e>
 800b5a0:	8b10      	ldrh	r0, [r2, #24]
 800b5a2:	680c      	ldr	r4, [r1, #0]
 800b5a4:	2801      	cmp	r0, #1
 800b5a6:	9415      	str	r4, [sp, #84]	@ 0x54
 800b5a8:	f200 820f 	bhi.w	800b9ca <forward_conv2d_sssa8_ch_nl_pool+0x46e>
 800b5ac:	2000      	movs	r0, #0
 800b5ae:	9018      	str	r0, [sp, #96]	@ 0x60
 800b5b0:	2b03      	cmp	r3, #3
 800b5b2:	f000 8262 	beq.w	800ba7a <forward_conv2d_sssa8_ch_nl_pool+0x51e>
 800b5b6:	6a93      	ldr	r3, [r2, #40]	@ 0x28
 800b5b8:	2b00      	cmp	r3, #0
 800b5ba:	f000 8259 	beq.w	800ba70 <forward_conv2d_sssa8_ch_nl_pool+0x514>
 800b5be:	6818      	ldr	r0, [r3, #0]
 800b5c0:	f8d9 2024 	ldr.w	r2, [r9, #36]	@ 0x24
 800b5c4:	f8d3 8004 	ldr.w	r8, [r3, #4]
 800b5c8:	9027      	str	r0, [sp, #156]	@ 0x9c
 800b5ca:	2a00      	cmp	r2, #0
 800b5cc:	f000 8247 	beq.w	800ba5e <forward_conv2d_sssa8_ch_nl_pool+0x502>
 800b5d0:	f8d3 b008 	ldr.w	fp, [r3, #8]
 800b5d4:	9230      	str	r2, [sp, #192]	@ 0xc0
 800b5d6:	f8d8 200c 	ldr.w	r2, [r8, #12]
 800b5da:	f8da 500c 	ldr.w	r5, [sl, #12]
 800b5de:	6852      	ldr	r2, [r2, #4]
 800b5e0:	9c15      	ldr	r4, [sp, #84]	@ 0x54
 800b5e2:	4616      	mov	r6, r2
 800b5e4:	981c      	ldr	r0, [sp, #112]	@ 0x70
 800b5e6:	f8d4 c00c 	ldr.w	ip, [r4, #12]
 800b5ea:	b2b6      	uxth	r6, r6
 800b5ec:	686c      	ldr	r4, [r5, #4]
 800b5ee:	68c0      	ldr	r0, [r0, #12]
 800b5f0:	9416      	str	r4, [sp, #88]	@ 0x58
 800b5f2:	9622      	str	r6, [sp, #136]	@ 0x88
 800b5f4:	f8bd 6058 	ldrh.w	r6, [sp, #88]	@ 0x58
 800b5f8:	f8d9 303c 	ldr.w	r3, [r9, #60]	@ 0x3c
 800b5fc:	ee0a 6a90 	vmov	s21, r6
 800b600:	68c6      	ldr	r6, [r0, #12]
 800b602:	6880      	ldr	r0, [r0, #8]
 800b604:	f8d9 402c 	ldr.w	r4, [r9, #44]	@ 0x2c
 800b608:	9036      	str	r0, [sp, #216]	@ 0xd8
 800b60a:	921b      	str	r2, [sp, #108]	@ 0x6c
 800b60c:	681a      	ldr	r2, [r3, #0]
 800b60e:	f8d9 7058 	ldr.w	r7, [r9, #88]	@ 0x58
 800b612:	9621      	str	r6, [sp, #132]	@ 0x84
 800b614:	e9d5 5002 	ldrd	r5, r0, [r5, #8]
 800b618:	951d      	str	r5, [sp, #116]	@ 0x74
 800b61a:	f8b9 5028 	ldrh.w	r5, [r9, #40]	@ 0x28
 800b61e:	9531      	str	r5, [sp, #196]	@ 0xc4
 800b620:	b2a5      	uxth	r5, r4
 800b622:	9532      	str	r5, [sp, #200]	@ 0xc8
 800b624:	b295      	uxth	r5, r2
 800b626:	9517      	str	r5, [sp, #92]	@ 0x5c
 800b628:	889d      	ldrh	r5, [r3, #4]
 800b62a:	689b      	ldr	r3, [r3, #8]
 800b62c:	9533      	str	r5, [sp, #204]	@ 0xcc
 800b62e:	f8dc 5008 	ldr.w	r5, [ip, #8]
 800b632:	9526      	str	r5, [sp, #152]	@ 0x98
 800b634:	f8dc 5004 	ldr.w	r5, [ip, #4]
 800b638:	9534      	str	r5, [sp, #208]	@ 0xd0
 800b63a:	f8d9 5044 	ldr.w	r5, [r9, #68]	@ 0x44
 800b63e:	9537      	str	r5, [sp, #220]	@ 0xdc
 800b640:	f8d9 504c 	ldr.w	r5, [r9, #76]	@ 0x4c
 800b644:	9538      	str	r5, [sp, #224]	@ 0xe0
 800b646:	f8d9 5050 	ldr.w	r5, [r9, #80]	@ 0x50
 800b64a:	951a      	str	r5, [sp, #104]	@ 0x68
 800b64c:	683d      	ldr	r5, [r7, #0]
 800b64e:	9528      	str	r5, [sp, #160]	@ 0xa0
 800b650:	687d      	ldr	r5, [r7, #4]
 800b652:	9539      	str	r5, [sp, #228]	@ 0xe4
 800b654:	2900      	cmp	r1, #0
 800b656:	f000 81f5 	beq.w	800ba44 <forward_conv2d_sssa8_ch_nl_pool+0x4e8>
 800b65a:	6889      	ldr	r1, [r1, #8]
 800b65c:	2900      	cmp	r1, #0
 800b65e:	f000 81f1 	beq.w	800ba44 <forward_conv2d_sssa8_ch_nl_pool+0x4e8>
 800b662:	698d      	ldr	r5, [r1, #24]
 800b664:	2d00      	cmp	r5, #0
 800b666:	bf08      	it	eq
 800b668:	4629      	moveq	r1, r5
 800b66a:	ee09 1a90 	vmov	s19, r1
 800b66e:	b292      	uxth	r2, r2
 800b670:	f8db 6018 	ldr.w	r6, [fp, #24]
 800b674:	b2a1      	uxth	r1, r4
 800b676:	f8d8 5018 	ldr.w	r5, [r8, #24]
 800b67a:	fa12 f783 	uxtah	r7, r2, r3
 800b67e:	1813      	adds	r3, r2, r0
 800b680:	aa41      	add	r2, sp, #260	@ 0x104
 800b682:	9124      	str	r1, [sp, #144]	@ 0x90
 800b684:	4407      	add	r7, r0
 800b686:	931e      	str	r3, [sp, #120]	@ 0x78
 800b688:	9b26      	ldr	r3, [sp, #152]	@ 0x98
 800b68a:	f10d 0cf4 	add.w	ip, sp, #244	@ 0xf4
 800b68e:	924e      	str	r2, [sp, #312]	@ 0x138
 800b690:	f04f 7280 	mov.w	r2, #16777216	@ 0x1000000
 800b694:	1aff      	subs	r7, r7, r3
 800b696:	ac45      	add	r4, sp, #276	@ 0x114
 800b698:	a849      	add	r0, sp, #292	@ 0x124
 800b69a:	f8cd c130 	str.w	ip, [sp, #304]	@ 0x130
 800b69e:	fbb7 f3f1 	udiv	r3, r7, r1
 800b6a2:	9f1c      	ldr	r7, [sp, #112]	@ 0x70
 800b6a4:	f240 4101 	movw	r1, #1025	@ 0x401
 800b6a8:	9314      	str	r3, [sp, #80]	@ 0x50
 800b6aa:	2300      	movs	r3, #0
 800b6ac:	69bf      	ldr	r7, [r7, #24]
 800b6ae:	9349      	str	r3, [sp, #292]	@ 0x124
 800b6b0:	933d      	str	r3, [sp, #244]	@ 0xf4
 800b6b2:	9341      	str	r3, [sp, #260]	@ 0x104
 800b6b4:	9340      	str	r3, [sp, #256]	@ 0x100
 800b6b6:	9344      	str	r3, [sp, #272]	@ 0x110
 800b6b8:	934f      	str	r3, [sp, #316]	@ 0x13c
 800b6ba:	9729      	str	r7, [sp, #164]	@ 0xa4
 800b6bc:	e9cd 333e 	strd	r3, r3, [sp, #248]	@ 0xf8
 800b6c0:	e9cd 3342 	strd	r3, r3, [sp, #264]	@ 0x108
 800b6c4:	f8d9 3048 	ldr.w	r3, [r9, #72]	@ 0x48
 800b6c8:	e9cd 214a 	strd	r2, r1, [sp, #296]	@ 0x128
 800b6cc:	f240 4102 	movw	r1, #1026	@ 0x402
 800b6d0:	9323      	str	r3, [sp, #140]	@ 0x8c
 800b6d2:	f8d9 305c 	ldr.w	r3, [r9, #92]	@ 0x5c
 800b6d6:	914d      	str	r1, [sp, #308]	@ 0x134
 800b6d8:	4659      	mov	r1, fp
 800b6da:	9335      	str	r3, [sp, #212]	@ 0xd4
 800b6dc:	f002 fee2 	bl	800e4a4 <core_tensor_clone>
 800b6e0:	4631      	mov	r1, r6
 800b6e2:	4620      	mov	r0, r4
 800b6e4:	f002 ff10 	bl	800e508 <core_array_clone>
 800b6e8:	944f      	str	r4, [sp, #316]	@ 0x13c
 800b6ea:	f8d8 300c 	ldr.w	r3, [r8, #12]
 800b6ee:	9915      	ldr	r1, [sp, #84]	@ 0x54
 800b6f0:	f8d3 c008 	ldr.w	ip, [r3, #8]
 800b6f4:	9b27      	ldr	r3, [sp, #156]	@ 0x9c
 800b6f6:	6809      	ldr	r1, [r1, #0]
 800b6f8:	699b      	ldr	r3, [r3, #24]
 800b6fa:	f8da 2000 	ldr.w	r2, [sl]
 800b6fe:	689b      	ldr	r3, [r3, #8]
 800b700:	f9bd 40a0 	ldrsh.w	r4, [sp, #160]	@ 0xa0
 800b704:	932c      	str	r3, [sp, #176]	@ 0xb0
 800b706:	9125      	str	r1, [sp, #148]	@ 0x94
 800b708:	f8d8 3000 	ldr.w	r3, [r8]
 800b70c:	2a00      	cmp	r2, #0
 800b70e:	f000 8181 	beq.w	800ba14 <forward_conv2d_sssa8_ch_nl_pool+0x4b8>
 800b712:	6851      	ldr	r1, [r2, #4]
 800b714:	2900      	cmp	r1, #0
 800b716:	f000 817d 	beq.w	800ba14 <forward_conv2d_sssa8_ch_nl_pool+0x4b8>
 800b71a:	8850      	ldrh	r0, [r2, #2]
 800b71c:	2800      	cmp	r0, #0
 800b71e:	f000 8179 	beq.w	800ba14 <forward_conv2d_sssa8_ch_nl_pool+0x4b8>
 800b722:	6809      	ldr	r1, [r1, #0]
 800b724:	ed91 8a00 	vldr	s16, [r1]
 800b728:	2b00      	cmp	r3, #0
 800b72a:	f000 8170 	beq.w	800ba0e <forward_conv2d_sssa8_ch_nl_pool+0x4b2>
 800b72e:	6859      	ldr	r1, [r3, #4]
 800b730:	2900      	cmp	r1, #0
 800b732:	f000 816c 	beq.w	800ba0e <forward_conv2d_sssa8_ch_nl_pool+0x4b2>
 800b736:	8858      	ldrh	r0, [r3, #2]
 800b738:	2800      	cmp	r0, #0
 800b73a:	f000 8168 	beq.w	800ba0e <forward_conv2d_sssa8_ch_nl_pool+0x4b2>
 800b73e:	6809      	ldr	r1, [r1, #0]
 800b740:	edd1 8a00 	vldr	s17, [r1]
 800b744:	9915      	ldr	r1, [sp, #84]	@ 0x54
 800b746:	f8da 0018 	ldr.w	r0, [sl, #24]
 800b74a:	f8d1 e018 	ldr.w	lr, [r1, #24]
 800b74e:	9918      	ldr	r1, [sp, #96]	@ 0x60
 800b750:	6880      	ldr	r0, [r0, #8]
 800b752:	6989      	ldr	r1, [r1, #24]
 800b754:	9019      	str	r0, [sp, #100]	@ 0x64
 800b756:	6889      	ldr	r1, [r1, #8]
 800b758:	f8de 0008 	ldr.w	r0, [lr, #8]
 800b75c:	912f      	str	r1, [sp, #188]	@ 0xbc
 800b75e:	f899 1041 	ldrb.w	r1, [r9, #65]	@ 0x41
 800b762:	902e      	str	r0, [sp, #184]	@ 0xb8
 800b764:	912d      	str	r1, [sp, #180]	@ 0xb4
 800b766:	9925      	ldr	r1, [sp, #148]	@ 0x94
 800b768:	b121      	cbz	r1, 800b774 <forward_conv2d_sssa8_ch_nl_pool+0x218>
 800b76a:	6849      	ldr	r1, [r1, #4]
 800b76c:	9125      	str	r1, [sp, #148]	@ 0x94
 800b76e:	b109      	cbz	r1, 800b774 <forward_conv2d_sssa8_ch_nl_pool+0x218>
 800b770:	6809      	ldr	r1, [r1, #0]
 800b772:	9125      	str	r1, [sp, #148]	@ 0x94
 800b774:	2a00      	cmp	r2, #0
 800b776:	f000 8163 	beq.w	800ba40 <forward_conv2d_sssa8_ch_nl_pool+0x4e4>
 800b77a:	6851      	ldr	r1, [r2, #4]
 800b77c:	2900      	cmp	r1, #0
 800b77e:	f000 816c 	beq.w	800ba5a <forward_conv2d_sssa8_ch_nl_pool+0x4fe>
 800b782:	8852      	ldrh	r2, [r2, #2]
 800b784:	2a00      	cmp	r2, #0
 800b786:	f000 815b 	beq.w	800ba40 <forward_conv2d_sssa8_ch_nl_pool+0x4e4>
 800b78a:	684a      	ldr	r2, [r1, #4]
 800b78c:	f992 2000 	ldrsb.w	r2, [r2]
 800b790:	922a      	str	r2, [sp, #168]	@ 0xa8
 800b792:	2b00      	cmp	r3, #0
 800b794:	f000 8152 	beq.w	800ba3c <forward_conv2d_sssa8_ch_nl_pool+0x4e0>
 800b798:	685a      	ldr	r2, [r3, #4]
 800b79a:	2a00      	cmp	r2, #0
 800b79c:	f000 8163 	beq.w	800ba66 <forward_conv2d_sssa8_ch_nl_pool+0x50a>
 800b7a0:	885b      	ldrh	r3, [r3, #2]
 800b7a2:	2b00      	cmp	r3, #0
 800b7a4:	f000 814a 	beq.w	800ba3c <forward_conv2d_sssa8_ch_nl_pool+0x4e0>
 800b7a8:	6853      	ldr	r3, [r2, #4]
 800b7aa:	f993 3000 	ldrsb.w	r3, [r3]
 800b7ae:	932b      	str	r3, [sp, #172]	@ 0xac
 800b7b0:	9b21      	ldr	r3, [sp, #132]	@ 0x84
 800b7b2:	2b00      	cmp	r3, #0
 800b7b4:	f000 811f 	beq.w	800b9f6 <forward_conv2d_sssa8_ch_nl_pool+0x49a>
 800b7b8:	f8bd 206c 	ldrh.w	r2, [sp, #108]	@ 0x6c
 800b7bc:	f04f 0a00 	mov.w	sl, #0
 800b7c0:	991d      	ldr	r1, [sp, #116]	@ 0x74
 800b7c2:	fb0c f202 	mul.w	r2, ip, r2
 800b7c6:	f8bd 3058 	ldrh.w	r3, [sp, #88]	@ 0x58
 800b7ca:	9418      	str	r4, [sp, #96]	@ 0x60
 800b7cc:	ee09 2a10 	vmov	s18, r2
 800b7d0:	fa1f f28c 	uxth.w	r2, ip
 800b7d4:	f8cd a06c 	str.w	sl, [sp, #108]	@ 0x6c
 800b7d8:	9220      	str	r2, [sp, #128]	@ 0x80
 800b7da:	9a24      	ldr	r2, [sp, #144]	@ 0x90
 800b7dc:	fb01 f202 	mul.w	r2, r1, r2
 800b7e0:	fb03 f202 	mul.w	r2, r3, r2
 800b7e4:	fb01 f303 	mul.w	r3, r1, r3
 800b7e8:	923a      	str	r2, [sp, #232]	@ 0xe8
 800b7ea:	933b      	str	r3, [sp, #236]	@ 0xec
 800b7ec:	b28b      	uxth	r3, r1
 800b7ee:	ee0a 3a10 	vmov	s20, r3
 800b7f2:	f9bd 308c 	ldrsh.w	r3, [sp, #140]	@ 0x8c
 800b7f6:	931d      	str	r3, [sp, #116]	@ 0x74
 800b7f8:	9b26      	ldr	r3, [sp, #152]	@ 0x98
 800b7fa:	931f      	str	r3, [sp, #124]	@ 0x7c
 800b7fc:	e0be      	b.n	800b97c <forward_conv2d_sssa8_ch_nl_pool+0x420>
 800b7fe:	9b27      	ldr	r3, [sp, #156]	@ 0x9c
 800b800:	68aa      	ldr	r2, [r5, #8]
 800b802:	699b      	ldr	r3, [r3, #24]
 800b804:	9215      	str	r2, [sp, #84]	@ 0x54
 800b806:	e9d3 0100 	ldrd	r0, r1, [r3]
 800b80a:	f002 fdf5 	bl	800e3f8 <ai_array_get_byte_size>
 800b80e:	9b2d      	ldr	r3, [sp, #180]	@ 0xb4
 800b810:	9a15      	ldr	r2, [sp, #84]	@ 0x54
 800b812:	eef0 0a68 	vmov.f32	s1, s17
 800b816:	930c      	str	r3, [sp, #48]	@ 0x30
 800b818:	eeb0 0a48 	vmov.f32	s0, s16
 800b81c:	9b25      	ldr	r3, [sp, #148]	@ 0x94
 800b81e:	ee1a 1a10 	vmov	r1, s20
 800b822:	920d      	str	r2, [sp, #52]	@ 0x34
 800b824:	930b      	str	r3, [sp, #44]	@ 0x2c
 800b826:	9b2b      	ldr	r3, [sp, #172]	@ 0xac
 800b828:	9011      	str	r0, [sp, #68]	@ 0x44
 800b82a:	930a      	str	r3, [sp, #40]	@ 0x28
 800b82c:	9b2a      	ldr	r3, [sp, #168]	@ 0xa8
 800b82e:	9309      	str	r3, [sp, #36]	@ 0x24
 800b830:	9b2f      	ldr	r3, [sp, #188]	@ 0xbc
 800b832:	9308      	str	r3, [sp, #32]
 800b834:	9b17      	ldr	r3, [sp, #92]	@ 0x5c
 800b836:	9307      	str	r3, [sp, #28]
 800b838:	9b33      	ldr	r3, [sp, #204]	@ 0xcc
 800b83a:	9306      	str	r3, [sp, #24]
 800b83c:	9b32      	ldr	r3, [sp, #200]	@ 0xc8
 800b83e:	9305      	str	r3, [sp, #20]
 800b840:	9b31      	ldr	r3, [sp, #196]	@ 0xc4
 800b842:	9304      	str	r3, [sp, #16]
 800b844:	9b22      	ldr	r3, [sp, #136]	@ 0x88
 800b846:	9301      	str	r3, [sp, #4]
 800b848:	9b2e      	ldr	r3, [sp, #184]	@ 0xb8
 800b84a:	9300      	str	r3, [sp, #0]
 800b84c:	9b2c      	ldr	r3, [sp, #176]	@ 0xb0
 800b84e:	9312      	str	r3, [sp, #72]	@ 0x48
 800b850:	2301      	movs	r3, #1
 800b852:	930f      	str	r3, [sp, #60]	@ 0x3c
 800b854:	9b20      	ldr	r3, [sp, #128]	@ 0x80
 800b856:	930e      	str	r3, [sp, #56]	@ 0x38
 800b858:	f8bd 3098 	ldrh.w	r3, [sp, #152]	@ 0x98
 800b85c:	9303      	str	r3, [sp, #12]
 800b85e:	f8bd 30d0 	ldrh.w	r3, [sp, #208]	@ 0xd0
 800b862:	9f1f      	ldr	r7, [sp, #124]	@ 0x7c
 800b864:	9302      	str	r3, [sp, #8]
 800b866:	9b28      	ldr	r3, [sp, #160]	@ 0xa0
 800b868:	b2ba      	uxth	r2, r7
 800b86a:	9819      	ldr	r0, [sp, #100]	@ 0x64
 800b86c:	429c      	cmp	r4, r3
 800b86e:	bf08      	it	eq
 800b870:	f1ba 0f00 	cmpeq.w	sl, #0
 800b874:	bf0c      	ite	eq
 800b876:	2301      	moveq	r3, #1
 800b878:	2300      	movne	r3, #0
 800b87a:	9310      	str	r3, [sp, #64]	@ 0x40
 800b87c:	ee1a 3a90 	vmov	r3, s21
 800b880:	f000 fc80 	bl	800c184 <forward_lite_conv2d_sssa8_ch>
 800b884:	9b24      	ldr	r3, [sp, #144]	@ 0x90
 800b886:	9a1e      	ldr	r2, [sp, #120]	@ 0x78
 800b888:	4293      	cmp	r3, r2
 800b88a:	f000 80b0 	beq.w	800b9ee <forward_conv2d_sssa8_ch_nl_pool+0x492>
 800b88e:	1ad3      	subs	r3, r2, r3
 800b890:	463a      	mov	r2, r7
 800b892:	429f      	cmp	r7, r3
 800b894:	931e      	str	r3, [sp, #120]	@ 0x78
 800b896:	bf28      	it	cs
 800b898:	461a      	movcs	r2, r3
 800b89a:	921f      	str	r2, [sp, #124]	@ 0x7c
 800b89c:	9b17      	ldr	r3, [sp, #92]	@ 0x5c
 800b89e:	2b00      	cmp	r3, #0
 800b8a0:	f040 8096 	bne.w	800b9d0 <forward_conv2d_sssa8_ch_nl_pool+0x474>
 800b8a4:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 800b8a6:	9a3a      	ldr	r2, [sp, #232]	@ 0xe8
 800b8a8:	4413      	add	r3, r2
 800b8aa:	9319      	str	r3, [sp, #100]	@ 0x64
 800b8ac:	3401      	adds	r4, #1
 800b8ae:	ee19 3a90 	vmov	r3, s19
 800b8b2:	ee19 2a10 	vmov	r2, s18
 800b8b6:	4641      	mov	r1, r8
 800b8b8:	b224      	sxth	r4, r4
 800b8ba:	4658      	mov	r0, fp
 800b8bc:	9f30      	ldr	r7, [sp, #192]	@ 0xc0
 800b8be:	47b8      	blx	r7
 800b8c0:	9b1d      	ldr	r3, [sp, #116]	@ 0x74
 800b8c2:	429c      	cmp	r4, r3
 800b8c4:	db32      	blt.n	800b92c <forward_conv2d_sssa8_ch_nl_pool+0x3d0>
 800b8c6:	9b1c      	ldr	r3, [sp, #112]	@ 0x70
 800b8c8:	2201      	movs	r2, #1
 800b8ca:	991b      	ldr	r1, [sp, #108]	@ 0x6c
 800b8cc:	a849      	add	r0, sp, #292	@ 0x124
 800b8ce:	9308      	str	r3, [sp, #32]
 800b8d0:	4492      	add	sl, r2
 800b8d2:	f8bd 3068 	ldrh.w	r3, [sp, #104]	@ 0x68
 800b8d6:	9207      	str	r2, [sp, #28]
 800b8d8:	1ae4      	subs	r4, r4, r3
 800b8da:	9305      	str	r3, [sp, #20]
 800b8dc:	f8bd 3060 	ldrh.w	r3, [sp, #96]	@ 0x60
 800b8e0:	f8bd 208c 	ldrh.w	r2, [sp, #140]	@ 0x8c
 800b8e4:	b224      	sxth	r4, r4
 800b8e6:	9303      	str	r3, [sp, #12]
 800b8e8:	f8bd 30d8 	ldrh.w	r3, [sp, #216]	@ 0xd8
 800b8ec:	9201      	str	r2, [sp, #4]
 800b8ee:	1a52      	subs	r2, r2, r1
 800b8f0:	9306      	str	r3, [sp, #24]
 800b8f2:	f8bd 30e0 	ldrh.w	r3, [sp, #224]	@ 0xe0
 800b8f6:	b292      	uxth	r2, r2
 800b8f8:	9920      	ldr	r1, [sp, #128]	@ 0x80
 800b8fa:	9304      	str	r3, [sp, #16]
 800b8fc:	f8bd 30e4 	ldrh.w	r3, [sp, #228]	@ 0xe4
 800b900:	9f35      	ldr	r7, [sp, #212]	@ 0xd4
 800b902:	9302      	str	r3, [sp, #8]
 800b904:	f8bd 30dc 	ldrh.w	r3, [sp, #220]	@ 0xdc
 800b908:	9300      	str	r3, [sp, #0]
 800b90a:	9b22      	ldr	r3, [sp, #136]	@ 0x88
 800b90c:	47b8      	blx	r7
 800b90e:	9a18      	ldr	r2, [sp, #96]	@ 0x60
 800b910:	f9bd 3068 	ldrsh.w	r3, [sp, #104]	@ 0x68
 800b914:	9929      	ldr	r1, [sp, #164]	@ 0xa4
 800b916:	1ad3      	subs	r3, r2, r3
 800b918:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 800b91c:	b21a      	sxth	r2, r3
 800b91e:	9b1c      	ldr	r3, [sp, #112]	@ 0x70
 800b920:	695b      	ldr	r3, [r3, #20]
 800b922:	9218      	str	r2, [sp, #96]	@ 0x60
 800b924:	68da      	ldr	r2, [r3, #12]
 800b926:	688b      	ldr	r3, [r1, #8]
 800b928:	4413      	add	r3, r2
 800b92a:	608b      	str	r3, [r1, #8]
 800b92c:	f8d8 3014 	ldr.w	r3, [r8, #20]
 800b930:	68da      	ldr	r2, [r3, #12]
 800b932:	68ab      	ldr	r3, [r5, #8]
 800b934:	4413      	add	r3, r2
 800b936:	60ab      	str	r3, [r5, #8]
 800b938:	f8d9 2024 	ldr.w	r2, [r9, #36]	@ 0x24
 800b93c:	b132      	cbz	r2, 800b94c <forward_conv2d_sssa8_ch_nl_pool+0x3f0>
 800b93e:	f8db 3014 	ldr.w	r3, [fp, #20]
 800b942:	68da      	ldr	r2, [r3, #12]
 800b944:	68b3      	ldr	r3, [r6, #8]
 800b946:	4413      	add	r3, r2
 800b948:	60b3      	str	r3, [r6, #8]
 800b94a:	68ab      	ldr	r3, [r5, #8]
 800b94c:	68ea      	ldr	r2, [r5, #12]
 800b94e:	4640      	mov	r0, r8
 800b950:	9316      	str	r3, [sp, #88]	@ 0x58
 800b952:	9215      	str	r2, [sp, #84]	@ 0x54
 800b954:	f002 fd90 	bl	800e478 <get_tensor_byte_size>
 800b958:	9a15      	ldr	r2, [sp, #84]	@ 0x54
 800b95a:	9b16      	ldr	r3, [sp, #88]	@ 0x58
 800b95c:	4410      	add	r0, r2
 800b95e:	4283      	cmp	r3, r0
 800b960:	d306      	bcc.n	800b970 <forward_conv2d_sssa8_ch_nl_pool+0x414>
 800b962:	68eb      	ldr	r3, [r5, #12]
 800b964:	60ab      	str	r3, [r5, #8]
 800b966:	f8d9 3024 	ldr.w	r3, [r9, #36]	@ 0x24
 800b96a:	b10b      	cbz	r3, 800b970 <forward_conv2d_sssa8_ch_nl_pool+0x414>
 800b96c:	68f3      	ldr	r3, [r6, #12]
 800b96e:	60b3      	str	r3, [r6, #8]
 800b970:	9b14      	ldr	r3, [sp, #80]	@ 0x50
 800b972:	3b01      	subs	r3, #1
 800b974:	9314      	str	r3, [sp, #80]	@ 0x50
 800b976:	9b21      	ldr	r3, [sp, #132]	@ 0x84
 800b978:	459a      	cmp	sl, r3
 800b97a:	d23c      	bcs.n	800b9f6 <forward_conv2d_sssa8_ch_nl_pool+0x49a>
 800b97c:	9b14      	ldr	r3, [sp, #80]	@ 0x50
 800b97e:	3301      	adds	r3, #1
 800b980:	2b00      	cmp	r3, #0
 800b982:	f73f af3c 	bgt.w	800b7fe <forward_conv2d_sssa8_ch_nl_pool+0x2a2>
 800b986:	9b14      	ldr	r3, [sp, #80]	@ 0x50
 800b988:	2b00      	cmp	r3, #0
 800b98a:	da99      	bge.n	800b8c0 <forward_conv2d_sssa8_ch_nl_pool+0x364>
 800b98c:	ee19 3a10 	vmov	r3, s18
 800b990:	e9d6 1202 	ldrd	r1, r2, [r6, #8]
 800b994:	fb03 1314 	mls	r3, r3, r4, r1
 800b998:	429a      	cmp	r2, r3
 800b99a:	d901      	bls.n	800b9a0 <forward_conv2d_sssa8_ch_nl_pool+0x444>
 800b99c:	6870      	ldr	r0, [r6, #4]
 800b99e:	4403      	add	r3, r0
 800b9a0:	429a      	cmp	r2, r3
 800b9a2:	d202      	bcs.n	800b9aa <forward_conv2d_sssa8_ch_nl_pool+0x44e>
 800b9a4:	981d      	ldr	r0, [sp, #116]	@ 0x74
 800b9a6:	42a0      	cmp	r0, r4
 800b9a8:	d137      	bne.n	800ba1a <forward_conv2d_sssa8_ch_nl_pool+0x4be>
 800b9aa:	9b1b      	ldr	r3, [sp, #108]	@ 0x6c
 800b9ac:	b2a4      	uxth	r4, r4
 800b9ae:	9a23      	ldr	r2, [sp, #140]	@ 0x8c
 800b9b0:	4413      	add	r3, r2
 800b9b2:	9a1a      	ldr	r2, [sp, #104]	@ 0x68
 800b9b4:	1b1b      	subs	r3, r3, r4
 800b9b6:	4414      	add	r4, r2
 800b9b8:	b21b      	sxth	r3, r3
 800b9ba:	b224      	sxth	r4, r4
 800b9bc:	931b      	str	r3, [sp, #108]	@ 0x6c
 800b9be:	e77f      	b.n	800b8c0 <forward_conv2d_sssa8_ch_nl_pool+0x364>
 800b9c0:	2300      	movs	r3, #0
 800b9c2:	685b      	ldr	r3, [r3, #4]
 800b9c4:	deff      	udf	#255	@ 0xff
 800b9c6:	685b      	ldr	r3, [r3, #4]
 800b9c8:	deff      	udf	#255	@ 0xff
 800b9ca:	6848      	ldr	r0, [r1, #4]
 800b9cc:	9018      	str	r0, [sp, #96]	@ 0x60
 800b9ce:	e5ef      	b.n	800b5b0 <forward_conv2d_sssa8_ch_nl_pool+0x54>
 800b9d0:	9924      	ldr	r1, [sp, #144]	@ 0x90
 800b9d2:	461a      	mov	r2, r3
 800b9d4:	1a5b      	subs	r3, r3, r1
 800b9d6:	d505      	bpl.n	800b9e4 <forward_conv2d_sssa8_ch_nl_pool+0x488>
 800b9d8:	1a8a      	subs	r2, r1, r2
 800b9da:	983b      	ldr	r0, [sp, #236]	@ 0xec
 800b9dc:	9919      	ldr	r1, [sp, #100]	@ 0x64
 800b9de:	fb00 1202 	mla	r2, r0, r2, r1
 800b9e2:	9219      	str	r2, [sp, #100]	@ 0x64
 800b9e4:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 800b9e8:	b29b      	uxth	r3, r3
 800b9ea:	9317      	str	r3, [sp, #92]	@ 0x5c
 800b9ec:	e75e      	b.n	800b8ac <forward_conv2d_sssa8_ch_nl_pool+0x350>
 800b9ee:	2300      	movs	r3, #0
 800b9f0:	e9cd 331e 	strd	r3, r3, [sp, #120]	@ 0x78
 800b9f4:	e752      	b.n	800b89c <forward_conv2d_sssa8_ch_nl_pool+0x340>
 800b9f6:	68eb      	ldr	r3, [r5, #12]
 800b9f8:	9a29      	ldr	r2, [sp, #164]	@ 0xa4
 800b9fa:	60ab      	str	r3, [r5, #8]
 800b9fc:	68f3      	ldr	r3, [r6, #12]
 800b9fe:	60b3      	str	r3, [r6, #8]
 800ba00:	68d3      	ldr	r3, [r2, #12]
 800ba02:	6093      	str	r3, [r2, #8]
 800ba04:	b051      	add	sp, #324	@ 0x144
 800ba06:	ecbd 8b06 	vpop	{d8-d10}
 800ba0a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800ba0e:	eef7 8a00 	vmov.f32	s17, #112	@ 0x3f800000  1.0
 800ba12:	e697      	b.n	800b744 <forward_conv2d_sssa8_ch_nl_pool+0x1e8>
 800ba14:	eeb7 8a00 	vmov.f32	s16, #112	@ 0x3f800000  1.0
 800ba18:	e686      	b.n	800b728 <forward_conv2d_sssa8_ch_nl_pool+0x1cc>
 800ba1a:	6870      	ldr	r0, [r6, #4]
 800ba1c:	4402      	add	r2, r0
 800ba1e:	4293      	cmp	r3, r2
 800ba20:	d2c3      	bcs.n	800b9aa <forward_conv2d_sssa8_ch_nl_pool+0x44e>
 800ba22:	3901      	subs	r1, #1
 800ba24:	9f14      	ldr	r7, [sp, #80]	@ 0x50
 800ba26:	f813 2b01 	ldrb.w	r2, [r3], #1
 800ba2a:	f801 2f01 	strb.w	r2, [r1, #1]!
 800ba2e:	68f2      	ldr	r2, [r6, #12]
 800ba30:	6870      	ldr	r0, [r6, #4]
 800ba32:	4402      	add	r2, r0
 800ba34:	4293      	cmp	r3, r2
 800ba36:	d3f6      	bcc.n	800ba26 <forward_conv2d_sssa8_ch_nl_pool+0x4ca>
 800ba38:	9714      	str	r7, [sp, #80]	@ 0x50
 800ba3a:	e7b6      	b.n	800b9aa <forward_conv2d_sssa8_ch_nl_pool+0x44e>
 800ba3c:	932b      	str	r3, [sp, #172]	@ 0xac
 800ba3e:	e6b7      	b.n	800b7b0 <forward_conv2d_sssa8_ch_nl_pool+0x254>
 800ba40:	922a      	str	r2, [sp, #168]	@ 0xa8
 800ba42:	e6a6      	b.n	800b792 <forward_conv2d_sssa8_ch_nl_pool+0x236>
 800ba44:	f8d9 1020 	ldr.w	r1, [r9, #32]
 800ba48:	ee09 1a90 	vmov	s19, r1
 800ba4c:	2900      	cmp	r1, #0
 800ba4e:	f43f ae0e 	beq.w	800b66e <forward_conv2d_sssa8_ch_nl_pool+0x112>
 800ba52:	6889      	ldr	r1, [r1, #8]
 800ba54:	ee09 1a90 	vmov	s19, r1
 800ba58:	e609      	b.n	800b66e <forward_conv2d_sssa8_ch_nl_pool+0x112>
 800ba5a:	912a      	str	r1, [sp, #168]	@ 0xa8
 800ba5c:	e699      	b.n	800b792 <forward_conv2d_sssa8_ch_nl_pool+0x236>
 800ba5e:	4b08      	ldr	r3, [pc, #32]	@ (800ba80 <forward_conv2d_sssa8_ch_nl_pool+0x524>)
 800ba60:	46c3      	mov	fp, r8
 800ba62:	9330      	str	r3, [sp, #192]	@ 0xc0
 800ba64:	e5b7      	b.n	800b5d6 <forward_conv2d_sssa8_ch_nl_pool+0x7a>
 800ba66:	922b      	str	r2, [sp, #172]	@ 0xac
 800ba68:	e6a2      	b.n	800b7b0 <forward_conv2d_sssa8_ch_nl_pool+0x254>
 800ba6a:	9115      	str	r1, [sp, #84]	@ 0x54
 800ba6c:	9118      	str	r1, [sp, #96]	@ 0x60
 800ba6e:	e59f      	b.n	800b5b0 <forward_conv2d_sssa8_ch_nl_pool+0x54>
 800ba70:	68db      	ldr	r3, [r3, #12]
 800ba72:	deff      	udf	#255	@ 0xff
 800ba74:	2300      	movs	r3, #0
 800ba76:	685b      	ldr	r3, [r3, #4]
 800ba78:	deff      	udf	#255	@ 0xff
 800ba7a:	2300      	movs	r3, #0
 800ba7c:	685b      	ldr	r3, [r3, #4]
 800ba7e:	deff      	udf	#255	@ 0xff
 800ba80:	0800b559 	.word	0x0800b559

0800ba84 <forward_dense_integer_SSSA_ch>:
 800ba84:	6983      	ldr	r3, [r0, #24]
 800ba86:	8818      	ldrh	r0, [r3, #0]
 800ba88:	2800      	cmp	r0, #0
 800ba8a:	f000 80af 	beq.w	800bbec <forward_dense_integer_SSSA_ch+0x168>
 800ba8e:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800ba92:	685c      	ldr	r4, [r3, #4]
 800ba94:	b08f      	sub	sp, #60	@ 0x3c
 800ba96:	6863      	ldr	r3, [r4, #4]
 800ba98:	b103      	cbz	r3, 800ba9c <forward_dense_integer_SSSA_ch+0x18>
 800ba9a:	681b      	ldr	r3, [r3, #0]
 800ba9c:	2801      	cmp	r0, #1
 800ba9e:	f000 813b 	beq.w	800bd18 <forward_dense_integer_SSSA_ch+0x294>
 800baa2:	6922      	ldr	r2, [r4, #16]
 800baa4:	b102      	cbz	r2, 800baa8 <forward_dense_integer_SSSA_ch+0x24>
 800baa6:	6812      	ldr	r2, [r2, #0]
 800baa8:	2802      	cmp	r0, #2
 800baaa:	f000 8138 	beq.w	800bd1e <forward_dense_integer_SSSA_ch+0x29a>
 800baae:	69e5      	ldr	r5, [r4, #28]
 800bab0:	2d00      	cmp	r5, #0
 800bab2:	f000 80f2 	beq.w	800bc9a <forward_dense_integer_SSSA_ch+0x216>
 800bab6:	8b26      	ldrh	r6, [r4, #24]
 800bab8:	6829      	ldr	r1, [r5, #0]
 800baba:	2e01      	cmp	r6, #1
 800babc:	f240 8117 	bls.w	800bcee <forward_dense_integer_SSSA_ch+0x26a>
 800bac0:	686d      	ldr	r5, [r5, #4]
 800bac2:	2803      	cmp	r0, #3
 800bac4:	f000 812e 	beq.w	800bd24 <forward_dense_integer_SSSA_ch+0x2a0>
 800bac8:	f8d4 8028 	ldr.w	r8, [r4, #40]	@ 0x28
 800bacc:	69a8      	ldr	r0, [r5, #24]
 800bace:	f1b8 0f00 	cmp.w	r8, #0
 800bad2:	f000 80f9 	beq.w	800bcc8 <forward_dense_integer_SSSA_ch+0x244>
 800bad6:	6880      	ldr	r0, [r0, #8]
 800bad8:	68dc      	ldr	r4, [r3, #12]
 800bada:	900d      	str	r0, [sp, #52]	@ 0x34
 800badc:	68d0      	ldr	r0, [r2, #12]
 800bade:	6866      	ldr	r6, [r4, #4]
 800bae0:	f8d8 8000 	ldr.w	r8, [r8]
 800bae4:	6995      	ldr	r5, [r2, #24]
 800bae6:	fa1f fa86 	uxth.w	sl, r6
 800baea:	9609      	str	r6, [sp, #36]	@ 0x24
 800baec:	e9d0 9401 	ldrd	r9, r4, [r0, #4]
 800baf0:	68c0      	ldr	r0, [r0, #12]
 800baf2:	fa1f fb89 	uxth.w	fp, r9
 800baf6:	fb00 f004 	mul.w	r0, r0, r4
 800bafa:	699c      	ldr	r4, [r3, #24]
 800bafc:	9008      	str	r0, [sp, #32]
 800bafe:	f1b8 0f00 	cmp.w	r8, #0
 800bb02:	d003      	beq.n	800bb0c <forward_dense_integer_SSSA_ch+0x88>
 800bb04:	f8d8 0018 	ldr.w	r0, [r8, #24]
 800bb08:	f8d0 8008 	ldr.w	r8, [r0, #8]
 800bb0c:	681b      	ldr	r3, [r3, #0]
 800bb0e:	f8d2 c000 	ldr.w	ip, [r2]
 800bb12:	6808      	ldr	r0, [r1, #0]
 800bb14:	698a      	ldr	r2, [r1, #24]
 800bb16:	2b00      	cmp	r3, #0
 800bb18:	d076      	beq.n	800bc08 <forward_dense_integer_SSSA_ch+0x184>
 800bb1a:	6859      	ldr	r1, [r3, #4]
 800bb1c:	2900      	cmp	r1, #0
 800bb1e:	f000 809f 	beq.w	800bc60 <forward_dense_integer_SSSA_ch+0x1dc>
 800bb22:	885e      	ldrh	r6, [r3, #2]
 800bb24:	2e00      	cmp	r6, #0
 800bb26:	f000 808b 	beq.w	800bc40 <forward_dense_integer_SSSA_ch+0x1bc>
 800bb2a:	680f      	ldr	r7, [r1, #0]
 800bb2c:	ed97 0a00 	vldr	s0, [r7]
 800bb30:	f1bc 0f00 	cmp.w	ip, #0
 800bb34:	f000 808a 	beq.w	800bc4c <forward_dense_integer_SSSA_ch+0x1c8>
 800bb38:	f8dc e004 	ldr.w	lr, [ip, #4]
 800bb3c:	f1be 0f00 	cmp.w	lr, #0
 800bb40:	f000 8099 	beq.w	800bc76 <forward_dense_integer_SSSA_ch+0x1f2>
 800bb44:	f8bc 6002 	ldrh.w	r6, [ip, #2]
 800bb48:	2e00      	cmp	r6, #0
 800bb4a:	d051      	beq.n	800bbf0 <forward_dense_integer_SSSA_ch+0x16c>
 800bb4c:	6897      	ldr	r7, [r2, #8]
 800bb4e:	f8de 2000 	ldr.w	r2, [lr]
 800bb52:	68ad      	ldr	r5, [r5, #8]
 800bb54:	68a4      	ldr	r4, [r4, #8]
 800bb56:	edd2 0a00 	vldr	s1, [r2]
 800bb5a:	2900      	cmp	r1, #0
 800bb5c:	d052      	beq.n	800bc04 <forward_dense_integer_SSSA_ch+0x180>
 800bb5e:	885b      	ldrh	r3, [r3, #2]
 800bb60:	2b00      	cmp	r3, #0
 800bb62:	f000 8091 	beq.w	800bc88 <forward_dense_integer_SSSA_ch+0x204>
 800bb66:	684b      	ldr	r3, [r1, #4]
 800bb68:	f993 3000 	ldrsb.w	r3, [r3]
 800bb6c:	930c      	str	r3, [sp, #48]	@ 0x30
 800bb6e:	f1bc 0f00 	cmp.w	ip, #0
 800bb72:	f000 80ce 	beq.w	800bd12 <forward_dense_integer_SSSA_ch+0x28e>
 800bb76:	f1be 0f00 	cmp.w	lr, #0
 800bb7a:	f000 808b 	beq.w	800bc94 <forward_dense_integer_SSSA_ch+0x210>
 800bb7e:	f8bc 6002 	ldrh.w	r6, [ip, #2]
 800bb82:	2e00      	cmp	r6, #0
 800bb84:	d156      	bne.n	800bc34 <forward_dense_integer_SSSA_ch+0x1b0>
 800bb86:	960b      	str	r6, [sp, #44]	@ 0x2c
 800bb88:	b110      	cbz	r0, 800bb90 <forward_dense_integer_SSSA_ch+0x10c>
 800bb8a:	6840      	ldr	r0, [r0, #4]
 800bb8c:	b100      	cbz	r0, 800bb90 <forward_dense_integer_SSSA_ch+0x10c>
 800bb8e:	6800      	ldr	r0, [r0, #0]
 800bb90:	fa1f f989 	uxth.w	r9, r9
 800bb94:	4642      	mov	r2, r8
 800bb96:	4659      	mov	r1, fp
 800bb98:	eb08 03c9 	add.w	r3, r8, r9, lsl #3
 800bb9c:	930a      	str	r3, [sp, #40]	@ 0x28
 800bb9e:	f001 f93d 	bl	800ce1c <align_factor_ch>
 800bba2:	9b08      	ldr	r3, [sp, #32]
 800bba4:	b1fb      	cbz	r3, 800bbe6 <forward_dense_integer_SSSA_ch+0x162>
 800bba6:	f8bd 1024 	ldrh.w	r1, [sp, #36]	@ 0x24
 800bbaa:	4652      	mov	r2, sl
 800bbac:	2600      	movs	r6, #0
 800bbae:	468a      	mov	sl, r1
 800bbb0:	4639      	mov	r1, r7
 800bbb2:	4647      	mov	r7, r8
 800bbb4:	4698      	mov	r8, r3
 800bbb6:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 800bbb8:	3601      	adds	r6, #1
 800bbba:	4620      	mov	r0, r4
 800bbbc:	4454      	add	r4, sl
 800bbbe:	9304      	str	r3, [sp, #16]
 800bbc0:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800bbc2:	9303      	str	r3, [sp, #12]
 800bbc4:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 800bbc6:	9302      	str	r3, [sp, #8]
 800bbc8:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800bbca:	e9cd 5705 	strd	r5, r7, [sp, #20]
 800bbce:	e9cd 7300 	strd	r7, r3, [sp]
 800bbd2:	465b      	mov	r3, fp
 800bbd4:	444d      	add	r5, r9
 800bbd6:	e9cd 1208 	strd	r1, r2, [sp, #32]
 800bbda:	f001 fcc5 	bl	800d568 <st_sssa8_ch_fully_connected>
 800bbde:	4546      	cmp	r6, r8
 800bbe0:	e9dd 1208 	ldrd	r1, r2, [sp, #32]
 800bbe4:	d1e7      	bne.n	800bbb6 <forward_dense_integer_SSSA_ch+0x132>
 800bbe6:	b00f      	add	sp, #60	@ 0x3c
 800bbe8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800bbec:	6843      	ldr	r3, [r0, #4]
 800bbee:	deff      	udf	#255	@ 0xff
 800bbf0:	68ad      	ldr	r5, [r5, #8]
 800bbf2:	68a4      	ldr	r4, [r4, #8]
 800bbf4:	6897      	ldr	r7, [r2, #8]
 800bbf6:	2b00      	cmp	r3, #0
 800bbf8:	d052      	beq.n	800bca0 <forward_dense_integer_SSSA_ch+0x21c>
 800bbfa:	6859      	ldr	r1, [r3, #4]
 800bbfc:	eef7 0a00 	vmov.f32	s1, #112	@ 0x3f800000  1.0
 800bc00:	2900      	cmp	r1, #0
 800bc02:	d1ac      	bne.n	800bb5e <forward_dense_integer_SSSA_ch+0xda>
 800bc04:	910c      	str	r1, [sp, #48]	@ 0x30
 800bc06:	e7bc      	b.n	800bb82 <forward_dense_integer_SSSA_ch+0xfe>
 800bc08:	f1bc 0f00 	cmp.w	ip, #0
 800bc0c:	d04d      	beq.n	800bcaa <forward_dense_integer_SSSA_ch+0x226>
 800bc0e:	f8dc e004 	ldr.w	lr, [ip, #4]
 800bc12:	f1be 0f00 	cmp.w	lr, #0
 800bc16:	d053      	beq.n	800bcc0 <forward_dense_integer_SSSA_ch+0x23c>
 800bc18:	f8bc 6002 	ldrh.w	r6, [ip, #2]
 800bc1c:	eeb7 0a00 	vmov.f32	s0, #112	@ 0x3f800000  1.0
 800bc20:	2e00      	cmp	r6, #0
 800bc22:	d0e5      	beq.n	800bbf0 <forward_dense_integer_SSSA_ch+0x16c>
 800bc24:	930c      	str	r3, [sp, #48]	@ 0x30
 800bc26:	f8de 3000 	ldr.w	r3, [lr]
 800bc2a:	68ad      	ldr	r5, [r5, #8]
 800bc2c:	68a4      	ldr	r4, [r4, #8]
 800bc2e:	6897      	ldr	r7, [r2, #8]
 800bc30:	edd3 0a00 	vldr	s1, [r3]
 800bc34:	f8de 3004 	ldr.w	r3, [lr, #4]
 800bc38:	f993 3000 	ldrsb.w	r3, [r3]
 800bc3c:	930b      	str	r3, [sp, #44]	@ 0x2c
 800bc3e:	e7a3      	b.n	800bb88 <forward_dense_integer_SSSA_ch+0x104>
 800bc40:	eeb7 0a00 	vmov.f32	s0, #112	@ 0x3f800000  1.0
 800bc44:	f1bc 0f00 	cmp.w	ip, #0
 800bc48:	f47f af76 	bne.w	800bb38 <forward_dense_integer_SSSA_ch+0xb4>
 800bc4c:	68ad      	ldr	r5, [r5, #8]
 800bc4e:	68a4      	ldr	r4, [r4, #8]
 800bc50:	6897      	ldr	r7, [r2, #8]
 800bc52:	2e00      	cmp	r6, #0
 800bc54:	d14d      	bne.n	800bcf2 <forward_dense_integer_SSSA_ch+0x26e>
 800bc56:	eef7 0a00 	vmov.f32	s1, #112	@ 0x3f800000  1.0
 800bc5a:	960c      	str	r6, [sp, #48]	@ 0x30
 800bc5c:	960b      	str	r6, [sp, #44]	@ 0x2c
 800bc5e:	e793      	b.n	800bb88 <forward_dense_integer_SSSA_ch+0x104>
 800bc60:	f1bc 0f00 	cmp.w	ip, #0
 800bc64:	d021      	beq.n	800bcaa <forward_dense_integer_SSSA_ch+0x226>
 800bc66:	f8dc e004 	ldr.w	lr, [ip, #4]
 800bc6a:	eeb7 0a00 	vmov.f32	s0, #112	@ 0x3f800000  1.0
 800bc6e:	f1be 0f00 	cmp.w	lr, #0
 800bc72:	f47f af67 	bne.w	800bb44 <forward_dense_integer_SSSA_ch+0xc0>
 800bc76:	68ad      	ldr	r5, [r5, #8]
 800bc78:	68a4      	ldr	r4, [r4, #8]
 800bc7a:	6897      	ldr	r7, [r2, #8]
 800bc7c:	b179      	cbz	r1, 800bc9e <forward_dense_integer_SSSA_ch+0x21a>
 800bc7e:	885b      	ldrh	r3, [r3, #2]
 800bc80:	2b00      	cmp	r3, #0
 800bc82:	d13f      	bne.n	800bd04 <forward_dense_integer_SSSA_ch+0x280>
 800bc84:	eef7 0a00 	vmov.f32	s1, #112	@ 0x3f800000  1.0
 800bc88:	2300      	movs	r3, #0
 800bc8a:	930c      	str	r3, [sp, #48]	@ 0x30
 800bc8c:	f1be 0f00 	cmp.w	lr, #0
 800bc90:	f47f af75 	bne.w	800bb7e <forward_dense_integer_SSSA_ch+0xfa>
 800bc94:	2300      	movs	r3, #0
 800bc96:	930b      	str	r3, [sp, #44]	@ 0x2c
 800bc98:	e776      	b.n	800bb88 <forward_dense_integer_SSSA_ch+0x104>
 800bc9a:	4629      	mov	r1, r5
 800bc9c:	e711      	b.n	800bac2 <forward_dense_integer_SSSA_ch+0x3e>
 800bc9e:	460b      	mov	r3, r1
 800bca0:	eef7 0a00 	vmov.f32	s1, #112	@ 0x3f800000  1.0
 800bca4:	930c      	str	r3, [sp, #48]	@ 0x30
 800bca6:	930b      	str	r3, [sp, #44]	@ 0x2c
 800bca8:	e76e      	b.n	800bb88 <forward_dense_integer_SSSA_ch+0x104>
 800bcaa:	eeb7 0a00 	vmov.f32	s0, #112	@ 0x3f800000  1.0
 800bcae:	4663      	mov	r3, ip
 800bcb0:	eef0 0a40 	vmov.f32	s1, s0
 800bcb4:	68ad      	ldr	r5, [r5, #8]
 800bcb6:	68a4      	ldr	r4, [r4, #8]
 800bcb8:	6897      	ldr	r7, [r2, #8]
 800bcba:	930c      	str	r3, [sp, #48]	@ 0x30
 800bcbc:	930b      	str	r3, [sp, #44]	@ 0x2c
 800bcbe:	e763      	b.n	800bb88 <forward_dense_integer_SSSA_ch+0x104>
 800bcc0:	eeb7 0a00 	vmov.f32	s0, #112	@ 0x3f800000  1.0
 800bcc4:	4673      	mov	r3, lr
 800bcc6:	e7f3      	b.n	800bcb0 <forward_dense_integer_SSSA_ch+0x22c>
 800bcc8:	6880      	ldr	r0, [r0, #8]
 800bcca:	68dc      	ldr	r4, [r3, #12]
 800bccc:	900d      	str	r0, [sp, #52]	@ 0x34
 800bcce:	68d0      	ldr	r0, [r2, #12]
 800bcd0:	6866      	ldr	r6, [r4, #4]
 800bcd2:	6995      	ldr	r5, [r2, #24]
 800bcd4:	fa1f fa86 	uxth.w	sl, r6
 800bcd8:	9609      	str	r6, [sp, #36]	@ 0x24
 800bcda:	e9d0 9401 	ldrd	r9, r4, [r0, #4]
 800bcde:	68c0      	ldr	r0, [r0, #12]
 800bce0:	fa1f fb89 	uxth.w	fp, r9
 800bce4:	fb00 f004 	mul.w	r0, r0, r4
 800bce8:	699c      	ldr	r4, [r3, #24]
 800bcea:	9008      	str	r0, [sp, #32]
 800bcec:	e70e      	b.n	800bb0c <forward_dense_integer_SSSA_ch+0x88>
 800bcee:	2500      	movs	r5, #0
 800bcf0:	e6e7      	b.n	800bac2 <forward_dense_integer_SSSA_ch+0x3e>
 800bcf2:	684b      	ldr	r3, [r1, #4]
 800bcf4:	eef7 0a00 	vmov.f32	s1, #112	@ 0x3f800000  1.0
 800bcf8:	f8cd c02c 	str.w	ip, [sp, #44]	@ 0x2c
 800bcfc:	f993 3000 	ldrsb.w	r3, [r3]
 800bd00:	930c      	str	r3, [sp, #48]	@ 0x30
 800bd02:	e741      	b.n	800bb88 <forward_dense_integer_SSSA_ch+0x104>
 800bd04:	684b      	ldr	r3, [r1, #4]
 800bd06:	eef7 0a00 	vmov.f32	s1, #112	@ 0x3f800000  1.0
 800bd0a:	f993 3000 	ldrsb.w	r3, [r3]
 800bd0e:	930c      	str	r3, [sp, #48]	@ 0x30
 800bd10:	e7c0      	b.n	800bc94 <forward_dense_integer_SSSA_ch+0x210>
 800bd12:	f8cd c02c 	str.w	ip, [sp, #44]	@ 0x2c
 800bd16:	e737      	b.n	800bb88 <forward_dense_integer_SSSA_ch+0x104>
 800bd18:	2300      	movs	r3, #0
 800bd1a:	685b      	ldr	r3, [r3, #4]
 800bd1c:	deff      	udf	#255	@ 0xff
 800bd1e:	2300      	movs	r3, #0
 800bd20:	685b      	ldr	r3, [r3, #4]
 800bd22:	deff      	udf	#255	@ 0xff
 800bd24:	2300      	movs	r3, #0
 800bd26:	685b      	ldr	r3, [r3, #4]
 800bd28:	deff      	udf	#255	@ 0xff
 800bd2a:	bf00      	nop

0800bd2c <forward_sm_integer>:
 800bd2c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800bd2e:	6983      	ldr	r3, [r0, #24]
 800bd30:	b087      	sub	sp, #28
 800bd32:	881e      	ldrh	r6, [r3, #0]
 800bd34:	2e00      	cmp	r6, #0
 800bd36:	d047      	beq.n	800bdc8 <forward_sm_integer+0x9c>
 800bd38:	f8d3 c004 	ldr.w	ip, [r3, #4]
 800bd3c:	f8dc 5004 	ldr.w	r5, [ip, #4]
 800bd40:	b105      	cbz	r5, 800bd44 <forward_sm_integer+0x18>
 800bd42:	682d      	ldr	r5, [r5, #0]
 800bd44:	2e01      	cmp	r6, #1
 800bd46:	d04b      	beq.n	800bde0 <forward_sm_integer+0xb4>
 800bd48:	f8dc 7010 	ldr.w	r7, [ip, #16]
 800bd4c:	b107      	cbz	r7, 800bd50 <forward_sm_integer+0x24>
 800bd4e:	683f      	ldr	r7, [r7, #0]
 800bd50:	68ab      	ldr	r3, [r5, #8]
 800bd52:	0a1b      	lsrs	r3, r3, #8
 800bd54:	d040      	beq.n	800bdd8 <forward_sm_integer+0xac>
 800bd56:	68ec      	ldr	r4, [r5, #12]
 800bd58:	2201      	movs	r2, #1
 800bd5a:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 800bd5e:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 800bd62:	429c      	cmp	r4, r3
 800bd64:	fb01 f202 	mul.w	r2, r1, r2
 800bd68:	d1f9      	bne.n	800bd5e <forward_sm_integer+0x32>
 800bd6a:	69c3      	ldr	r3, [r0, #28]
 800bd6c:	2e03      	cmp	r6, #3
 800bd6e:	689c      	ldr	r4, [r3, #8]
 800bd70:	d936      	bls.n	800bde0 <forward_sm_integer+0xb4>
 800bd72:	f8dc 3028 	ldr.w	r3, [ip, #40]	@ 0x28
 800bd76:	2b00      	cmp	r3, #0
 800bd78:	d030      	beq.n	800bddc <forward_sm_integer+0xb0>
 800bd7a:	6819      	ldr	r1, [r3, #0]
 800bd7c:	f9b0 3020 	ldrsh.w	r3, [r0, #32]
 800bd80:	6989      	ldr	r1, [r1, #24]
 800bd82:	f8d1 c008 	ldr.w	ip, [r1, #8]
 800bd86:	68e9      	ldr	r1, [r5, #12]
 800bd88:	f851 6023 	ldr.w	r6, [r1, r3, lsl #2]
 800bd8c:	6929      	ldr	r1, [r5, #16]
 800bd8e:	ebb3 2f11 	cmp.w	r3, r1, lsr #8
 800bd92:	d21b      	bcs.n	800bdcc <forward_sm_integer+0xa0>
 800bd94:	6969      	ldr	r1, [r5, #20]
 800bd96:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 800bd9a:	69a8      	ldr	r0, [r5, #24]
 800bd9c:	4d12      	ldr	r5, [pc, #72]	@ (800bde8 <forward_sm_integer+0xbc>)
 800bd9e:	6801      	ldr	r1, [r0, #0]
 800bda0:	f021 417e 	bic.w	r1, r1, #4261412864	@ 0xfe000000
 800bda4:	42a9      	cmp	r1, r5
 800bda6:	69bd      	ldr	r5, [r7, #24]
 800bda8:	6881      	ldr	r1, [r0, #8]
 800bdaa:	68a8      	ldr	r0, [r5, #8]
 800bdac:	f8cd c010 	str.w	ip, [sp, #16]
 800bdb0:	68a5      	ldr	r5, [r4, #8]
 800bdb2:	9503      	str	r5, [sp, #12]
 800bdb4:	6865      	ldr	r5, [r4, #4]
 800bdb6:	9502      	str	r5, [sp, #8]
 800bdb8:	6824      	ldr	r4, [r4, #0]
 800bdba:	e9cd 6400 	strd	r6, r4, [sp]
 800bdbe:	d007      	beq.n	800bdd0 <forward_sm_integer+0xa4>
 800bdc0:	f001 f822 	bl	800ce08 <forward_lite_nl_softmax_iu8ou8>
 800bdc4:	b007      	add	sp, #28
 800bdc6:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800bdc8:	6873      	ldr	r3, [r6, #4]
 800bdca:	deff      	udf	#255	@ 0xff
 800bdcc:	2300      	movs	r3, #0
 800bdce:	e7e4      	b.n	800bd9a <forward_sm_integer+0x6e>
 800bdd0:	f001 f810 	bl	800cdf4 <forward_lite_nl_softmax_is8os8>
 800bdd4:	b007      	add	sp, #28
 800bdd6:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800bdd8:	2201      	movs	r2, #1
 800bdda:	e7c6      	b.n	800bd6a <forward_sm_integer+0x3e>
 800bddc:	699b      	ldr	r3, [r3, #24]
 800bdde:	deff      	udf	#255	@ 0xff
 800bde0:	2300      	movs	r3, #0
 800bde2:	685b      	ldr	r3, [r3, #4]
 800bde4:	deff      	udf	#255	@ 0xff
 800bde6:	bf00      	nop
 800bde8:	00840440 	.word	0x00840440

0800bdec <pool_func_mp_array_integer_INT8>:
 800bdec:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800bdf0:	b093      	sub	sp, #76	@ 0x4c
 800bdf2:	468c      	mov	ip, r1
 800bdf4:	6804      	ldr	r4, [r0, #0]
 800bdf6:	f8bd 1074 	ldrh.w	r1, [sp, #116]	@ 0x74
 800bdfa:	930d      	str	r3, [sp, #52]	@ 0x34
 800bdfc:	f8bd 3070 	ldrh.w	r3, [sp, #112]	@ 0x70
 800be00:	910f      	str	r1, [sp, #60]	@ 0x3c
 800be02:	930e      	str	r3, [sp, #56]	@ 0x38
 800be04:	f8bd 1078 	ldrh.w	r1, [sp, #120]	@ 0x78
 800be08:	9b24      	ldr	r3, [sp, #144]	@ 0x90
 800be0a:	9110      	str	r1, [sp, #64]	@ 0x40
 800be0c:	6980      	ldr	r0, [r0, #24]
 800be0e:	f8bd b07c 	ldrh.w	fp, [sp, #124]	@ 0x7c
 800be12:	f8bd a080 	ldrh.w	sl, [sp, #128]	@ 0x80
 800be16:	f8bd 7084 	ldrh.w	r7, [sp, #132]	@ 0x84
 800be1a:	f8bd e088 	ldrh.w	lr, [sp, #136]	@ 0x88
 800be1e:	f8bd 808c 	ldrh.w	r8, [sp, #140]	@ 0x8c
 800be22:	6999      	ldr	r1, [r3, #24]
 800be24:	681d      	ldr	r5, [r3, #0]
 800be26:	2c00      	cmp	r4, #0
 800be28:	d064      	beq.n	800bef4 <pool_func_mp_array_integer_INT8+0x108>
 800be2a:	f8d4 9004 	ldr.w	r9, [r4, #4]
 800be2e:	f1b9 0f00 	cmp.w	r9, #0
 800be32:	d049      	beq.n	800bec8 <pool_func_mp_array_integer_INT8+0xdc>
 800be34:	8866      	ldrh	r6, [r4, #2]
 800be36:	2e00      	cmp	r6, #0
 800be38:	d072      	beq.n	800bf20 <pool_func_mp_array_integer_INT8+0x134>
 800be3a:	f8d9 3000 	ldr.w	r3, [r9]
 800be3e:	ed93 0a00 	vldr	s0, [r3]
 800be42:	2d00      	cmp	r5, #0
 800be44:	d070      	beq.n	800bf28 <pool_func_mp_array_integer_INT8+0x13c>
 800be46:	686e      	ldr	r6, [r5, #4]
 800be48:	2e00      	cmp	r6, #0
 800be4a:	d044      	beq.n	800bed6 <pool_func_mp_array_integer_INT8+0xea>
 800be4c:	886b      	ldrh	r3, [r5, #2]
 800be4e:	9311      	str	r3, [sp, #68]	@ 0x44
 800be50:	2b00      	cmp	r3, #0
 800be52:	d059      	beq.n	800bf08 <pool_func_mp_array_integer_INT8+0x11c>
 800be54:	6833      	ldr	r3, [r6, #0]
 800be56:	eef0 7a40 	vmov.f32	s15, s0
 800be5a:	6880      	ldr	r0, [r0, #8]
 800be5c:	ed93 7a00 	vldr	s14, [r3]
 800be60:	6889      	ldr	r1, [r1, #8]
 800be62:	ee80 0a07 	vdiv.f32	s0, s0, s14
 800be66:	f1b9 0f00 	cmp.w	r9, #0
 800be6a:	d057      	beq.n	800bf1c <pool_func_mp_array_integer_INT8+0x130>
 800be6c:	8863      	ldrh	r3, [r4, #2]
 800be6e:	2b00      	cmp	r3, #0
 800be70:	d03b      	beq.n	800beea <pool_func_mp_array_integer_INT8+0xfe>
 800be72:	f8d9 3004 	ldr.w	r3, [r9, #4]
 800be76:	f993 4000 	ldrsb.w	r4, [r3]
 800be7a:	2d00      	cmp	r5, #0
 800be7c:	d038      	beq.n	800bef0 <pool_func_mp_array_integer_INT8+0x104>
 800be7e:	2e00      	cmp	r6, #0
 800be80:	d036      	beq.n	800bef0 <pool_func_mp_array_integer_INT8+0x104>
 800be82:	886b      	ldrh	r3, [r5, #2]
 800be84:	9311      	str	r3, [sp, #68]	@ 0x44
 800be86:	9b11      	ldr	r3, [sp, #68]	@ 0x44
 800be88:	b113      	cbz	r3, 800be90 <pool_func_mp_array_integer_INT8+0xa4>
 800be8a:	6873      	ldr	r3, [r6, #4]
 800be8c:	f993 3000 	ldrsb.w	r3, [r3]
 800be90:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 800be94:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800be98:	da59      	bge.n	800bf4e <pool_func_mp_array_integer_INT8+0x162>
 800be9a:	f8cd b010 	str.w	fp, [sp, #16]
 800be9e:	e9cd 4309 	strd	r4, r3, [sp, #36]	@ 0x24
 800bea2:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 800bea4:	9c0d      	ldr	r4, [sp, #52]	@ 0x34
 800bea6:	9303      	str	r3, [sp, #12]
 800bea8:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800beaa:	9400      	str	r4, [sp, #0]
 800beac:	9302      	str	r3, [sp, #8]
 800beae:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800beb0:	9301      	str	r3, [sp, #4]
 800beb2:	4613      	mov	r3, r2
 800beb4:	4662      	mov	r2, ip
 800beb6:	e9cd e807 	strd	lr, r8, [sp, #28]
 800beba:	e9cd a705 	strd	sl, r7, [sp, #20]
 800bebe:	f000 feb9 	bl	800cc34 <forward_lite_maxpool_is8os8_scaleneg>
 800bec2:	b013      	add	sp, #76	@ 0x4c
 800bec4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800bec8:	2d00      	cmp	r5, #0
 800beca:	d03a      	beq.n	800bf42 <pool_func_mp_array_integer_INT8+0x156>
 800becc:	686e      	ldr	r6, [r5, #4]
 800bece:	eeb7 0a00 	vmov.f32	s0, #112	@ 0x3f800000  1.0
 800bed2:	2e00      	cmp	r6, #0
 800bed4:	d1ba      	bne.n	800be4c <pool_func_mp_array_integer_INT8+0x60>
 800bed6:	6880      	ldr	r0, [r0, #8]
 800bed8:	6889      	ldr	r1, [r1, #8]
 800beda:	f1b9 0f00 	cmp.w	r9, #0
 800bede:	d02b      	beq.n	800bf38 <pool_func_mp_array_integer_INT8+0x14c>
 800bee0:	8863      	ldrh	r3, [r4, #2]
 800bee2:	2b00      	cmp	r3, #0
 800bee4:	d165      	bne.n	800bfb2 <pool_func_mp_array_integer_INT8+0x1c6>
 800bee6:	eef0 7a40 	vmov.f32	s15, s0
 800beea:	2400      	movs	r4, #0
 800beec:	2e00      	cmp	r6, #0
 800beee:	d1c8      	bne.n	800be82 <pool_func_mp_array_integer_INT8+0x96>
 800bef0:	2300      	movs	r3, #0
 800bef2:	e7cd      	b.n	800be90 <pool_func_mp_array_integer_INT8+0xa4>
 800bef4:	2d00      	cmp	r5, #0
 800bef6:	d041      	beq.n	800bf7c <pool_func_mp_array_integer_INT8+0x190>
 800bef8:	686e      	ldr	r6, [r5, #4]
 800befa:	b316      	cbz	r6, 800bf42 <pool_func_mp_array_integer_INT8+0x156>
 800befc:	886b      	ldrh	r3, [r5, #2]
 800befe:	9311      	str	r3, [sp, #68]	@ 0x44
 800bf00:	2b00      	cmp	r3, #0
 800bf02:	d14a      	bne.n	800bf9a <pool_func_mp_array_integer_INT8+0x1ae>
 800bf04:	eeb7 0a00 	vmov.f32	s0, #112	@ 0x3f800000  1.0
 800bf08:	6880      	ldr	r0, [r0, #8]
 800bf0a:	6889      	ldr	r1, [r1, #8]
 800bf0c:	b1ac      	cbz	r4, 800bf3a <pool_func_mp_array_integer_INT8+0x14e>
 800bf0e:	f8d4 9004 	ldr.w	r9, [r4, #4]
 800bf12:	eef0 7a40 	vmov.f32	s15, s0
 800bf16:	f1b9 0f00 	cmp.w	r9, #0
 800bf1a:	d1a7      	bne.n	800be6c <pool_func_mp_array_integer_INT8+0x80>
 800bf1c:	464c      	mov	r4, r9
 800bf1e:	e7b2      	b.n	800be86 <pool_func_mp_array_integer_INT8+0x9a>
 800bf20:	eeb7 0a00 	vmov.f32	s0, #112	@ 0x3f800000  1.0
 800bf24:	2d00      	cmp	r5, #0
 800bf26:	d18e      	bne.n	800be46 <pool_func_mp_array_integer_INT8+0x5a>
 800bf28:	6880      	ldr	r0, [r0, #8]
 800bf2a:	6889      	ldr	r1, [r1, #8]
 800bf2c:	bb6e      	cbnz	r6, 800bf8a <pool_func_mp_array_integer_INT8+0x19e>
 800bf2e:	eef0 7a40 	vmov.f32	s15, s0
 800bf32:	4634      	mov	r4, r6
 800bf34:	4633      	mov	r3, r6
 800bf36:	e7ab      	b.n	800be90 <pool_func_mp_array_integer_INT8+0xa4>
 800bf38:	464c      	mov	r4, r9
 800bf3a:	eef0 7a40 	vmov.f32	s15, s0
 800bf3e:	4623      	mov	r3, r4
 800bf40:	e7a6      	b.n	800be90 <pool_func_mp_array_integer_INT8+0xa4>
 800bf42:	2400      	movs	r4, #0
 800bf44:	eeb7 0a00 	vmov.f32	s0, #112	@ 0x3f800000  1.0
 800bf48:	6880      	ldr	r0, [r0, #8]
 800bf4a:	6889      	ldr	r1, [r1, #8]
 800bf4c:	4623      	mov	r3, r4
 800bf4e:	f8cd b010 	str.w	fp, [sp, #16]
 800bf52:	e9cd 4309 	strd	r4, r3, [sp, #36]	@ 0x24
 800bf56:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 800bf58:	9c0d      	ldr	r4, [sp, #52]	@ 0x34
 800bf5a:	9303      	str	r3, [sp, #12]
 800bf5c:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800bf5e:	9400      	str	r4, [sp, #0]
 800bf60:	9302      	str	r3, [sp, #8]
 800bf62:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800bf64:	9301      	str	r3, [sp, #4]
 800bf66:	4613      	mov	r3, r2
 800bf68:	4662      	mov	r2, ip
 800bf6a:	e9cd e807 	strd	lr, r8, [sp, #28]
 800bf6e:	e9cd a705 	strd	sl, r7, [sp, #20]
 800bf72:	f000 f825 	bl	800bfc0 <forward_lite_maxpool_is8os8_scalepos>
 800bf76:	b013      	add	sp, #76	@ 0x4c
 800bf78:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800bf7c:	eeb7 0a00 	vmov.f32	s0, #112	@ 0x3f800000  1.0
 800bf80:	462c      	mov	r4, r5
 800bf82:	6880      	ldr	r0, [r0, #8]
 800bf84:	462b      	mov	r3, r5
 800bf86:	6889      	ldr	r1, [r1, #8]
 800bf88:	e7e1      	b.n	800bf4e <pool_func_mp_array_integer_INT8+0x162>
 800bf8a:	f8d9 4004 	ldr.w	r4, [r9, #4]
 800bf8e:	eef0 7a40 	vmov.f32	s15, s0
 800bf92:	462b      	mov	r3, r5
 800bf94:	f994 4000 	ldrsb.w	r4, [r4]
 800bf98:	e77a      	b.n	800be90 <pool_func_mp_array_integer_INT8+0xa4>
 800bf9a:	6833      	ldr	r3, [r6, #0]
 800bf9c:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 800bfa0:	6880      	ldr	r0, [r0, #8]
 800bfa2:	edd3 6a00 	vldr	s13, [r3]
 800bfa6:	eef0 7a47 	vmov.f32	s15, s14
 800bfaa:	6889      	ldr	r1, [r1, #8]
 800bfac:	ee87 0a26 	vdiv.f32	s0, s14, s13
 800bfb0:	e76b      	b.n	800be8a <pool_func_mp_array_integer_INT8+0x9e>
 800bfb2:	f8d9 3004 	ldr.w	r3, [r9, #4]
 800bfb6:	eef0 7a40 	vmov.f32	s15, s0
 800bfba:	f993 4000 	ldrsb.w	r4, [r3]
 800bfbe:	e797      	b.n	800bef0 <pool_func_mp_array_integer_INT8+0x104>

0800bfc0 <forward_lite_maxpool_is8os8_scalepos>:
 800bfc0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800bfc4:	b095      	sub	sp, #84	@ 0x54
 800bfc6:	4614      	mov	r4, r2
 800bfc8:	e9cd 010a 	strd	r0, r1, [sp, #40]	@ 0x28
 800bfcc:	f8bd 107c 	ldrh.w	r1, [sp, #124]	@ 0x7c
 800bfd0:	f99d 009c 	ldrsb.w	r0, [sp, #156]	@ 0x9c
 800bfd4:	910d      	str	r1, [sp, #52]	@ 0x34
 800bfd6:	f8bd 1080 	ldrh.w	r1, [sp, #128]	@ 0x80
 800bfda:	930c      	str	r3, [sp, #48]	@ 0x30
 800bfdc:	910e      	str	r1, [sp, #56]	@ 0x38
 800bfde:	f8bd 1084 	ldrh.w	r1, [sp, #132]	@ 0x84
 800bfe2:	f8bd 3098 	ldrh.w	r3, [sp, #152]	@ 0x98
 800bfe6:	910f      	str	r1, [sp, #60]	@ 0x3c
 800bfe8:	f8bd 1088 	ldrh.w	r1, [sp, #136]	@ 0x88
 800bfec:	9206      	str	r2, [sp, #24]
 800bfee:	9110      	str	r1, [sp, #64]	@ 0x40
 800bff0:	f8bd 108c 	ldrh.w	r1, [sp, #140]	@ 0x8c
 800bff4:	f8bd a078 	ldrh.w	sl, [sp, #120]	@ 0x78
 800bff8:	9111      	str	r1, [sp, #68]	@ 0x44
 800bffa:	f8bd 1090 	ldrh.w	r1, [sp, #144]	@ 0x90
 800bffe:	f99d 20a0 	ldrsb.w	r2, [sp, #160]	@ 0xa0
 800c002:	9112      	str	r1, [sp, #72]	@ 0x48
 800c004:	f8bd 1094 	ldrh.w	r1, [sp, #148]	@ 0x94
 800c008:	9313      	str	r3, [sp, #76]	@ 0x4c
 800c00a:	9107      	str	r1, [sp, #28]
 800c00c:	9003      	str	r0, [sp, #12]
 800c00e:	2b00      	cmp	r3, #0
 800c010:	f000 8094 	beq.w	800c13c <forward_lite_maxpool_is8os8_scalepos+0x17c>
 800c014:	eef7 7a00 	vmov.f32	s15, #112	@ 0x3f800000  1.0
 800c018:	eeb4 0a67 	vcmp.f32	s0, s15
 800c01c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800c020:	bf0c      	ite	eq
 800c022:	2301      	moveq	r3, #1
 800c024:	2300      	movne	r3, #0
 800c026:	4290      	cmp	r0, r2
 800c028:	bf14      	ite	ne
 800c02a:	2300      	movne	r3, #0
 800c02c:	f003 0301 	andeq.w	r3, r3, #1
 800c030:	9301      	str	r3, [sp, #4]
 800c032:	2900      	cmp	r1, #0
 800c034:	f000 8082 	beq.w	800c13c <forward_lite_maxpool_is8os8_scalepos+0x17c>
 800c038:	f1ba 0f00 	cmp.w	sl, #0
 800c03c:	d07e      	beq.n	800c13c <forward_lite_maxpool_is8os8_scalepos+0x17c>
 800c03e:	ee07 2a90 	vmov	s15, r2
 800c042:	2300      	movs	r3, #0
 800c044:	ed9f 6a4e 	vldr	s12, [pc, #312]	@ 800c180 <forward_lite_maxpool_is8os8_scalepos+0x1c0>
 800c048:	fb04 fb0a 	mul.w	fp, r4, sl
 800c04c:	eef8 6ae7 	vcvt.f32.s32	s13, s15
 800c050:	9304      	str	r3, [sp, #16]
 800c052:	9b04      	ldr	r3, [sp, #16]
 800c054:	eef6 5a00 	vmov.f32	s11, #96	@ 0x3f000000  0.5
 800c058:	9907      	ldr	r1, [sp, #28]
 800c05a:	9a12      	ldr	r2, [sp, #72]	@ 0x48
 800c05c:	fb03 f202 	mul.w	r2, r3, r2
 800c060:	fb03 f301 	mul.w	r3, r3, r1
 800c064:	9910      	ldr	r1, [sp, #64]	@ 0x40
 800c066:	9308      	str	r3, [sp, #32]
 800c068:	2300      	movs	r3, #0
 800c06a:	9305      	str	r3, [sp, #20]
 800c06c:	1a53      	subs	r3, r2, r1
 800c06e:	1a8a      	subs	r2, r1, r2
 800c070:	990c      	ldr	r1, [sp, #48]	@ 0x30
 800c072:	2b00      	cmp	r3, #0
 800c074:	eb02 0c01 	add.w	ip, r2, r1
 800c078:	bfd8      	it	le
 800c07a:	4691      	movle	r9, r2
 800c07c:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 800c07e:	bfc8      	it	gt
 800c080:	f04f 0900 	movgt.w	r9, #0
 800c084:	4594      	cmp	ip, r2
 800c086:	444b      	add	r3, r9
 800c088:	bfa8      	it	ge
 800c08a:	4694      	movge	ip, r2
 800c08c:	9a06      	ldr	r2, [sp, #24]
 800c08e:	fb02 f303 	mul.w	r3, r2, r3
 800c092:	9309      	str	r3, [sp, #36]	@ 0x24
 800c094:	9a05      	ldr	r2, [sp, #20]
 800c096:	f04f 0e00 	mov.w	lr, #0
 800c09a:	9908      	ldr	r1, [sp, #32]
 800c09c:	9b11      	ldr	r3, [sp, #68]	@ 0x44
 800c09e:	eb02 0801 	add.w	r8, r2, r1
 800c0a2:	990f      	ldr	r1, [sp, #60]	@ 0x3c
 800c0a4:	fb03 f302 	mul.w	r3, r3, r2
 800c0a8:	9a0b      	ldr	r2, [sp, #44]	@ 0x2c
 800c0aa:	9c0d      	ldr	r4, [sp, #52]	@ 0x34
 800c0ac:	fb0a 2808 	mla	r8, sl, r8, r2
 800c0b0:	1a5a      	subs	r2, r3, r1
 800c0b2:	1acb      	subs	r3, r1, r3
 800c0b4:	9906      	ldr	r1, [sp, #24]
 800c0b6:	2a00      	cmp	r2, #0
 800c0b8:	bfd8      	it	le
 800c0ba:	461f      	movle	r7, r3
 800c0bc:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800c0be:	bfc8      	it	gt
 800c0c0:	2700      	movgt	r7, #0
 800c0c2:	18d3      	adds	r3, r2, r3
 800c0c4:	1a8a      	subs	r2, r1, r2
 800c0c6:	4294      	cmp	r4, r2
 800c0c8:	443b      	add	r3, r7
 800c0ca:	bfa8      	it	ge
 800c0cc:	4614      	movge	r4, r2
 800c0ce:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 800c0d0:	fb0a 2303 	mla	r3, sl, r3, r2
 800c0d4:	9302      	str	r3, [sp, #8]
 800c0d6:	45e1      	cmp	r9, ip
 800c0d8:	da4e      	bge.n	800c178 <forward_lite_maxpool_is8os8_scalepos+0x1b8>
 800c0da:	9b02      	ldr	r3, [sp, #8]
 800c0dc:	464d      	mov	r5, r9
 800c0de:	f06f 017f 	mvn.w	r1, #127	@ 0x7f
 800c0e2:	eb03 060e 	add.w	r6, r3, lr
 800c0e6:	42a7      	cmp	r7, r4
 800c0e8:	da0a      	bge.n	800c100 <forward_lite_maxpool_is8os8_scalepos+0x140>
 800c0ea:	4632      	mov	r2, r6
 800c0ec:	463b      	mov	r3, r7
 800c0ee:	f992 0000 	ldrsb.w	r0, [r2]
 800c0f2:	3301      	adds	r3, #1
 800c0f4:	4452      	add	r2, sl
 800c0f6:	4281      	cmp	r1, r0
 800c0f8:	bfb8      	it	lt
 800c0fa:	4601      	movlt	r1, r0
 800c0fc:	429c      	cmp	r4, r3
 800c0fe:	d1f6      	bne.n	800c0ee <forward_lite_maxpool_is8os8_scalepos+0x12e>
 800c100:	3501      	adds	r5, #1
 800c102:	445e      	add	r6, fp
 800c104:	45ac      	cmp	ip, r5
 800c106:	d1ee      	bne.n	800c0e6 <forward_lite_maxpool_is8os8_scalepos+0x126>
 800c108:	9b01      	ldr	r3, [sp, #4]
 800c10a:	b1d3      	cbz	r3, 800c142 <forward_lite_maxpool_is8os8_scalepos+0x182>
 800c10c:	f888 1000 	strb.w	r1, [r8]
 800c110:	f10e 0e01 	add.w	lr, lr, #1
 800c114:	f108 0801 	add.w	r8, r8, #1
 800c118:	fa1f f38e 	uxth.w	r3, lr
 800c11c:	459a      	cmp	sl, r3
 800c11e:	d8da      	bhi.n	800c0d6 <forward_lite_maxpool_is8os8_scalepos+0x116>
 800c120:	9b05      	ldr	r3, [sp, #20]
 800c122:	9a07      	ldr	r2, [sp, #28]
 800c124:	3301      	adds	r3, #1
 800c126:	b29b      	uxth	r3, r3
 800c128:	429a      	cmp	r2, r3
 800c12a:	9305      	str	r3, [sp, #20]
 800c12c:	d8b2      	bhi.n	800c094 <forward_lite_maxpool_is8os8_scalepos+0xd4>
 800c12e:	9b04      	ldr	r3, [sp, #16]
 800c130:	9a13      	ldr	r2, [sp, #76]	@ 0x4c
 800c132:	3301      	adds	r3, #1
 800c134:	b29b      	uxth	r3, r3
 800c136:	429a      	cmp	r2, r3
 800c138:	9304      	str	r3, [sp, #16]
 800c13a:	d88a      	bhi.n	800c052 <forward_lite_maxpool_is8os8_scalepos+0x92>
 800c13c:	b015      	add	sp, #84	@ 0x54
 800c13e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800c142:	9b03      	ldr	r3, [sp, #12]
 800c144:	eeb0 7a66 	vmov.f32	s14, s13
 800c148:	1ac9      	subs	r1, r1, r3
 800c14a:	ee07 1a90 	vmov	s15, r1
 800c14e:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800c152:	eea7 7a80 	vfma.f32	s14, s15, s0
 800c156:	eeb5 7ac0 	vcmpe.f32	s14, #0.0
 800c15a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800c15e:	fe65 7a86 	vselge.f32	s15, s11, s12
 800c162:	ee77 7a87 	vadd.f32	s15, s15, s14
 800c166:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800c16a:	ee17 3a90 	vmov	r3, s15
 800c16e:	f303 0307 	ssat	r3, #8, r3
 800c172:	f888 3000 	strb.w	r3, [r8]
 800c176:	e7cb      	b.n	800c110 <forward_lite_maxpool_is8os8_scalepos+0x150>
 800c178:	f06f 017f 	mvn.w	r1, #127	@ 0x7f
 800c17c:	e7c4      	b.n	800c108 <forward_lite_maxpool_is8os8_scalepos+0x148>
 800c17e:	bf00      	nop
 800c180:	befffffc 	.word	0xbefffffc

0800c184 <forward_lite_conv2d_sssa8_ch>:
 800c184:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800c188:	ed2d 8b06 	vpush	{d8-d10}
 800c18c:	b0e3      	sub	sp, #396	@ 0x18c
 800c18e:	469a      	mov	sl, r3
 800c190:	4605      	mov	r5, r0
 800c192:	f8bd 3200 	ldrh.w	r3, [sp, #512]	@ 0x200
 800c196:	9215      	str	r2, [sp, #84]	@ 0x54
 800c198:	f8bd 2204 	ldrh.w	r2, [sp, #516]	@ 0x204
 800c19c:	9126      	str	r1, [sp, #152]	@ 0x98
 800c19e:	9314      	str	r3, [sp, #80]	@ 0x50
 800c1a0:	f8bd 11cc 	ldrh.w	r1, [sp, #460]	@ 0x1cc
 800c1a4:	fb03 f302 	mul.w	r3, r3, r2
 800c1a8:	922f      	str	r2, [sp, #188]	@ 0xbc
 800c1aa:	9a7f      	ldr	r2, [sp, #508]	@ 0x1fc
 800c1ac:	ee08 1a90 	vmov	s17, r1
 800c1b0:	9320      	str	r3, [sp, #128]	@ 0x80
 800c1b2:	fb01 2303 	mla	r3, r1, r3, r2
 800c1b6:	f8bd 21d0 	ldrh.w	r2, [sp, #464]	@ 0x1d0
 800c1ba:	f99d 91ec 	ldrsb.w	r9, [sp, #492]	@ 0x1ec
 800c1be:	922c      	str	r2, [sp, #176]	@ 0xb0
 800c1c0:	4298      	cmp	r0, r3
 800c1c2:	f8bd 21d4 	ldrh.w	r2, [sp, #468]	@ 0x1d4
 800c1c6:	f99d 61f0 	ldrsb.w	r6, [sp, #496]	@ 0x1f0
 800c1ca:	922b      	str	r2, [sp, #172]	@ 0xac
 800c1cc:	f8bd 21d8 	ldrh.w	r2, [sp, #472]	@ 0x1d8
 800c1d0:	f8bd 8208 	ldrh.w	r8, [sp, #520]	@ 0x208
 800c1d4:	9216      	str	r2, [sp, #88]	@ 0x58
 800c1d6:	f8bd 21dc 	ldrh.w	r2, [sp, #476]	@ 0x1dc
 800c1da:	f8dd b20c 	ldr.w	fp, [sp, #524]	@ 0x20c
 800c1de:	9230      	str	r2, [sp, #192]	@ 0xc0
 800c1e0:	f8bd 21e0 	ldrh.w	r2, [sp, #480]	@ 0x1e0
 800c1e4:	922d      	str	r2, [sp, #180]	@ 0xb4
 800c1e6:	f8bd 21e4 	ldrh.w	r2, [sp, #484]	@ 0x1e4
 800c1ea:	9234      	str	r2, [sp, #208]	@ 0xd0
 800c1ec:	f89d 21f8 	ldrb.w	r2, [sp, #504]	@ 0x1f8
 800c1f0:	9227      	str	r2, [sp, #156]	@ 0x9c
 800c1f2:	f0c0 82ef 	bcc.w	800c7d4 <forward_lite_conv2d_sssa8_ch+0x650>
 800c1f6:	2300      	movs	r3, #0
 800c1f8:	932e      	str	r3, [sp, #184]	@ 0xb8
 800c1fa:	ee18 1a90 	vmov	r1, s17
 800c1fe:	9a84      	ldr	r2, [sp, #528]	@ 0x210
 800c200:	987d      	ldr	r0, [sp, #500]	@ 0x1f4
 800c202:	ebab 0341 	sub.w	r3, fp, r1, lsl #1
 800c206:	004f      	lsls	r7, r1, #1
 800c208:	18d4      	adds	r4, r2, r3
 800c20a:	9b27      	ldr	r3, [sp, #156]	@ 0x9c
 800c20c:	9a2e      	ldr	r2, [sp, #184]	@ 0xb8
 800c20e:	3b02      	subs	r3, #2
 800c210:	2b01      	cmp	r3, #1
 800c212:	4623      	mov	r3, r4
 800c214:	bf98      	it	ls
 800c216:	2200      	movls	r2, #0
 800c218:	922e      	str	r2, [sp, #184]	@ 0xb8
 800c21a:	9a84      	ldr	r2, [sp, #528]	@ 0x210
 800c21c:	f000 fdfe 	bl	800ce1c <align_factor_ch>
 800c220:	9b27      	ldr	r3, [sp, #156]	@ 0x9c
 800c222:	07db      	lsls	r3, r3, #31
 800c224:	d506      	bpl.n	800c234 <forward_lite_conv2d_sssa8_ch+0xb0>
 800c226:	9b14      	ldr	r3, [sp, #80]	@ 0x50
 800c228:	9a2f      	ldr	r2, [sp, #188]	@ 0xbc
 800c22a:	3302      	adds	r3, #2
 800c22c:	3202      	adds	r2, #2
 800c22e:	fb02 f303 	mul.w	r3, r2, r3
 800c232:	9320      	str	r3, [sp, #128]	@ 0x80
 800c234:	9b7a      	ldr	r3, [sp, #488]	@ 0x1e8
 800c236:	ee18 2a90 	vmov	r2, s17
 800c23a:	9972      	ldr	r1, [sp, #456]	@ 0x1c8
 800c23c:	4650      	mov	r0, sl
 800c23e:	9301      	str	r3, [sp, #4]
 800c240:	9b84      	ldr	r3, [sp, #528]	@ 0x210
 800c242:	e9cd 9302 	strd	r9, r3, [sp, #8]
 800c246:	9b2b      	ldr	r3, [sp, #172]	@ 0xac
 800c248:	9300      	str	r3, [sp, #0]
 800c24a:	9b2c      	ldr	r3, [sp, #176]	@ 0xb0
 800c24c:	f001 f902 	bl	800d454 <st_sssa8_ch_convolve_rank1upd>
 800c250:	ee18 2a90 	vmov	r2, s17
 800c254:	9984      	ldr	r1, [sp, #528]	@ 0x210
 800c256:	18bb      	adds	r3, r7, r2
 800c258:	eb01 0183 	add.w	r1, r1, r3, lsl #2
 800c25c:	e9dd 302b 	ldrd	r3, r0, [sp, #172]	@ 0xac
 800c260:	911b      	str	r1, [sp, #108]	@ 0x6c
 800c262:	fb10 f303 	smulbb	r3, r0, r3
 800c266:	fb13 f30a 	smulbb	r3, r3, sl
 800c26a:	b29b      	uxth	r3, r3
 800c26c:	931f      	str	r3, [sp, #124]	@ 0x7c
 800c26e:	ebc2 7342 	rsb	r3, r2, r2, lsl #29
 800c272:	eb01 03c3 	add.w	r3, r1, r3, lsl #3
 800c276:	ee09 3a90 	vmov	s19, r3
 800c27a:	eb03 0382 	add.w	r3, r3, r2, lsl #2
 800c27e:	9325      	str	r3, [sp, #148]	@ 0x94
 800c280:	b1da      	cbz	r2, 800c2ba <forward_lite_conv2d_sssa8_ch+0x136>
 800c282:	4622      	mov	r2, r4
 800c284:	1d18      	adds	r0, r3, #4
 800c286:	f04f 0c01 	mov.w	ip, #1
 800c28a:	eb04 0e07 	add.w	lr, r4, r7
 800c28e:	f932 3b02 	ldrsh.w	r3, [r2], #2
 800c292:	1e59      	subs	r1, r3, #1
 800c294:	fa0c f403 	lsl.w	r4, ip, r3
 800c298:	fa06 f303 	lsl.w	r3, r6, r3
 800c29c:	b289      	uxth	r1, r1
 800c29e:	eb03 0354 	add.w	r3, r3, r4, lsr #1
 800c2a2:	2914      	cmp	r1, #20
 800c2a4:	f200 8262 	bhi.w	800c76c <forward_lite_conv2d_sssa8_ch+0x5e8>
 800c2a8:	4572      	cmp	r2, lr
 800c2aa:	f840 3c04 	str.w	r3, [r0, #-4]
 800c2ae:	f100 0004 	add.w	r0, r0, #4
 800c2b2:	d1ec      	bne.n	800c28e <forward_lite_conv2d_sssa8_ch+0x10a>
 800c2b4:	9b84      	ldr	r3, [sp, #528]	@ 0x210
 800c2b6:	eb03 040b 	add.w	r4, r3, fp
 800c2ba:	1be3      	subs	r3, r4, r7
 800c2bc:	992b      	ldr	r1, [sp, #172]	@ 0xac
 800c2be:	9c2c      	ldr	r4, [sp, #176]	@ 0xb0
 800c2c0:	aa42      	add	r2, sp, #264	@ 0x108
 800c2c2:	9324      	str	r3, [sp, #144]	@ 0x90
 800c2c4:	a84e      	add	r0, sp, #312	@ 0x138
 800c2c6:	9b26      	ldr	r3, [sp, #152]	@ 0x98
 800c2c8:	fb01 f604 	mul.w	r6, r1, r4
 800c2cc:	914b      	str	r1, [sp, #300]	@ 0x12c
 800c2ce:	a958      	add	r1, sp, #352	@ 0x160
 800c2d0:	9344      	str	r3, [sp, #272]	@ 0x110
 800c2d2:	9b15      	ldr	r3, [sp, #84]	@ 0x54
 800c2d4:	fb0a f704 	mul.w	r7, sl, r4
 800c2d8:	944c      	str	r4, [sp, #304]	@ 0x130
 800c2da:	9343      	str	r3, [sp, #268]	@ 0x10c
 800c2dc:	9b14      	ldr	r3, [sp, #80]	@ 0x50
 800c2de:	9348      	str	r3, [sp, #288]	@ 0x120
 800c2e0:	9b2f      	ldr	r3, [sp, #188]	@ 0xbc
 800c2e2:	9347      	str	r3, [sp, #284]	@ 0x11c
 800c2e4:	9b16      	ldr	r3, [sp, #88]	@ 0x58
 800c2e6:	935a      	str	r3, [sp, #360]	@ 0x168
 800c2e8:	9b30      	ldr	r3, [sp, #192]	@ 0xc0
 800c2ea:	935b      	str	r3, [sp, #364]	@ 0x16c
 800c2ec:	9b2d      	ldr	r3, [sp, #180]	@ 0xb4
 800c2ee:	935c      	str	r3, [sp, #368]	@ 0x170
 800c2f0:	9b34      	ldr	r3, [sp, #208]	@ 0xd0
 800c2f2:	935d      	str	r3, [sp, #372]	@ 0x174
 800c2f4:	ab4a      	add	r3, sp, #296	@ 0x128
 800c2f6:	9300      	str	r3, [sp, #0]
 800c2f8:	ab46      	add	r3, sp, #280	@ 0x118
 800c2fa:	f001 f809 	bl	800d310 <ai_padding_opt_init>
 800c2fe:	fb0a f306 	mul.w	r3, sl, r6
 800c302:	ee18 2a90 	vmov	r2, s17
 800c306:	992b      	ldr	r1, [sp, #172]	@ 0xac
 800c308:	fb02 f403 	mul.w	r4, r2, r3
 800c30c:	9a1b      	ldr	r2, [sp, #108]	@ 0x6c
 800c30e:	fb07 f301 	mul.w	r3, r7, r1
 800c312:	f5b4 6f20 	cmp.w	r4, #2560	@ 0xa00
 800c316:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 800c31a:	bfa8      	it	ge
 800c31c:	f44f 6420 	movge.w	r4, #2560	@ 0xa00
 800c320:	f1b8 0f01 	cmp.w	r8, #1
 800c324:	ee09 3a10 	vmov	s18, r3
 800c328:	9b27      	ldr	r3, [sp, #156]	@ 0x9c
 800c32a:	f003 0202 	and.w	r2, r3, #2
 800c32e:	f3c3 0340 	ubfx	r3, r3, #1, #1
 800c332:	9238      	str	r2, [sp, #224]	@ 0xe0
 800c334:	9322      	str	r3, [sp, #136]	@ 0x88
 800c336:	f000 8237 	beq.w	800c7a8 <forward_lite_conv2d_sssa8_ch+0x624>
 800c33a:	2300      	movs	r3, #0
 800c33c:	9337      	str	r3, [sp, #220]	@ 0xdc
 800c33e:	9b1f      	ldr	r3, [sp, #124]	@ 0x7c
 800c340:	fbb4 f3f3 	udiv	r3, r4, r3
 800c344:	b29b      	uxth	r3, r3
 800c346:	4619      	mov	r1, r3
 800c348:	ee18 3a90 	vmov	r3, s17
 800c34c:	4299      	cmp	r1, r3
 800c34e:	bf28      	it	cs
 800c350:	4619      	movcs	r1, r3
 800c352:	fbb3 f2f1 	udiv	r2, r3, r1
 800c356:	fb01 3312 	mls	r3, r1, r2, r3
 800c35a:	b292      	uxth	r2, r2
 800c35c:	9121      	str	r1, [sp, #132]	@ 0x84
 800c35e:	b29b      	uxth	r3, r3
 800c360:	9239      	str	r2, [sp, #228]	@ 0xe4
 800c362:	b11b      	cbz	r3, 800c36c <forward_lite_conv2d_sssa8_ch+0x1e8>
 800c364:	4613      	mov	r3, r2
 800c366:	3301      	adds	r3, #1
 800c368:	b29b      	uxth	r3, r3
 800c36a:	9339      	str	r3, [sp, #228]	@ 0xe4
 800c36c:	9b2e      	ldr	r3, [sp, #184]	@ 0xb8
 800c36e:	2b01      	cmp	r3, #1
 800c370:	f000 823d 	beq.w	800c7ee <forward_lite_conv2d_sssa8_ch+0x66a>
 800c374:	9a39      	ldr	r2, [sp, #228]	@ 0xe4
 800c376:	1e53      	subs	r3, r2, #1
 800c378:	b29b      	uxth	r3, r3
 800c37a:	9335      	str	r3, [sp, #212]	@ 0xd4
 800c37c:	2a00      	cmp	r2, #0
 800c37e:	f000 8137 	beq.w	800c5f0 <forward_lite_conv2d_sssa8_ch+0x46c>
 800c382:	fb0a f306 	mul.w	r3, sl, r6
 800c386:	9a1b      	ldr	r2, [sp, #108]	@ 0x6c
 800c388:	992d      	ldr	r1, [sp, #180]	@ 0xb4
 800c38a:	fa0f f689 	sxth.w	r6, r9
 800c38e:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 800c392:	9a26      	ldr	r2, [sp, #152]	@ 0x98
 800c394:	ee0a aa10 	vmov	s20, sl
 800c398:	46b1      	mov	r9, r6
 800c39a:	9319      	str	r3, [sp, #100]	@ 0x64
 800c39c:	9b34      	ldr	r3, [sp, #208]	@ 0xd0
 800c39e:	edcd 8a36 	vstr	s17, [sp, #216]	@ 0xd8
 800c3a2:	fb03 f302 	mul.w	r3, r3, r2
 800c3a6:	425b      	negs	r3, r3
 800c3a8:	1a5b      	subs	r3, r3, r1
 800c3aa:	fb0a 5303 	mla	r3, sl, r3, r5
 800c3ae:	9339      	str	r3, [sp, #228]	@ 0xe4
 800c3b0:	fb0a f302 	mul.w	r3, sl, r2
 800c3b4:	9a27      	ldr	r2, [sp, #156]	@ 0x9c
 800c3b6:	f1a2 0203 	sub.w	r2, r2, #3
 800c3ba:	9312      	str	r3, [sp, #72]	@ 0x48
 800c3bc:	fab2 f282 	clz	r2, r2
 800c3c0:	0952      	lsrs	r2, r2, #5
 800c3c2:	922a      	str	r2, [sp, #168]	@ 0xa8
 800c3c4:	f00a 0203 	and.w	r2, sl, #3
 800c3c8:	9213      	str	r2, [sp, #76]	@ 0x4c
 800c3ca:	007a      	lsls	r2, r7, #1
 800c3cc:	921c      	str	r2, [sp, #112]	@ 0x70
 800c3ce:	ea4f 024a 	mov.w	r2, sl, lsl #1
 800c3d2:	9231      	str	r2, [sp, #196]	@ 0xc4
 800c3d4:	9a30      	ldr	r2, [sp, #192]	@ 0xc0
 800c3d6:	fb02 f303 	mul.w	r3, r2, r3
 800c3da:	9332      	str	r3, [sp, #200]	@ 0xc8
 800c3dc:	424b      	negs	r3, r1
 800c3de:	9333      	str	r3, [sp, #204]	@ 0xcc
 800c3e0:	9b16      	ldr	r3, [sp, #88]	@ 0x58
 800c3e2:	fb0a f303 	mul.w	r3, sl, r3
 800c3e6:	46ba      	mov	sl, r7
 800c3e8:	931a      	str	r3, [sp, #104]	@ 0x68
 800c3ea:	9b37      	ldr	r3, [sp, #220]	@ 0xdc
 800c3ec:	b953      	cbnz	r3, 800c404 <forward_lite_conv2d_sssa8_ch+0x280>
 800c3ee:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
 800c3f0:	2b00      	cmp	r3, #0
 800c3f2:	f040 81d1 	bne.w	800c798 <forward_lite_conv2d_sssa8_ch+0x614>
 800c3f6:	9b21      	ldr	r3, [sp, #132]	@ 0x84
 800c3f8:	ee19 1a10 	vmov	r1, s18
 800c3fc:	9a1f      	ldr	r2, [sp, #124]	@ 0x7c
 800c3fe:	9872      	ldr	r0, [sp, #456]	@ 0x1c8
 800c400:	f000 fecc 	bl	800d19c <st_int8_to16_dual_interleaved>
 800c404:	9b27      	ldr	r3, [sp, #156]	@ 0x9c
 800c406:	2b03      	cmp	r3, #3
 800c408:	f000 81ba 	beq.w	800c780 <forward_lite_conv2d_sssa8_ch+0x5fc>
 800c40c:	9b7f      	ldr	r3, [sp, #508]	@ 0x1fc
 800c40e:	931e      	str	r3, [sp, #120]	@ 0x78
 800c410:	9b2f      	ldr	r3, [sp, #188]	@ 0xbc
 800c412:	2b00      	cmp	r3, #0
 800c414:	f000 80b5 	beq.w	800c582 <forward_lite_conv2d_sssa8_ch+0x3fe>
 800c418:	9b34      	ldr	r3, [sp, #208]	@ 0xd0
 800c41a:	9a2b      	ldr	r2, [sp, #172]	@ 0xac
 800c41c:	1ad2      	subs	r2, r2, r3
 800c41e:	425b      	negs	r3, r3
 800c420:	9317      	str	r3, [sp, #92]	@ 0x5c
 800c422:	9b39      	ldr	r3, [sp, #228]	@ 0xe4
 800c424:	9211      	str	r2, [sp, #68]	@ 0x44
 800c426:	9323      	str	r3, [sp, #140]	@ 0x8c
 800c428:	9b1b      	ldr	r3, [sp, #108]	@ 0x6c
 800c42a:	930a      	str	r3, [sp, #40]	@ 0x28
 800c42c:	9b2e      	ldr	r3, [sp, #184]	@ 0xb8
 800c42e:	9329      	str	r3, [sp, #164]	@ 0xa4
 800c430:	a84e      	add	r0, sp, #312	@ 0x138
 800c432:	f000 ffc7 	bl	800d3c4 <ai_padding_opt_phase1>
 800c436:	9b14      	ldr	r3, [sp, #80]	@ 0x50
 800c438:	2b00      	cmp	r3, #0
 800c43a:	d074      	beq.n	800c526 <forward_lite_conv2d_sssa8_ch+0x3a2>
 800c43c:	9a17      	ldr	r2, [sp, #92]	@ 0x5c
 800c43e:	9b11      	ldr	r3, [sp, #68]	@ 0x44
 800c440:	991c      	ldr	r1, [sp, #112]	@ 0x70
 800c442:	1a9b      	subs	r3, r3, r2
 800c444:	fb01 f303 	mul.w	r3, r1, r3
 800c448:	931d      	str	r3, [sp, #116]	@ 0x74
 800c44a:	e9dd 312c 	ldrd	r3, r1, [sp, #176]	@ 0xb0
 800c44e:	1a5f      	subs	r7, r3, r1
 800c450:	9b2b      	ldr	r3, [sp, #172]	@ 0xac
 800c452:	4413      	add	r3, r2
 800c454:	9328      	str	r3, [sp, #160]	@ 0xa0
 800c456:	9b33      	ldr	r3, [sp, #204]	@ 0xcc
 800c458:	930c      	str	r3, [sp, #48]	@ 0x30
 800c45a:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 800c45c:	930f      	str	r3, [sp, #60]	@ 0x3c
 800c45e:	9b2e      	ldr	r3, [sp, #184]	@ 0xb8
 800c460:	9310      	str	r3, [sp, #64]	@ 0x40
 800c462:	9b4e      	ldr	r3, [sp, #312]	@ 0x138
 800c464:	2b00      	cmp	r3, #0
 800c466:	f000 80d9 	beq.w	800c61c <forward_lite_conv2d_sssa8_ch+0x498>
 800c46a:	3b01      	subs	r3, #1
 800c46c:	934e      	str	r3, [sp, #312]	@ 0x138
 800c46e:	2301      	movs	r3, #1
 800c470:	f8ad 315e 	strh.w	r3, [sp, #350]	@ 0x15e
 800c474:	9b17      	ldr	r3, [sp, #92]	@ 0x5c
 800c476:	9a28      	ldr	r2, [sp, #160]	@ 0xa0
 800c478:	4293      	cmp	r3, r2
 800c47a:	da40      	bge.n	800c4fe <forward_lite_conv2d_sssa8_ch+0x37a>
 800c47c:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 800c47e:	ee08 aa10 	vmov	s16, sl
 800c482:	9d31      	ldr	r5, [sp, #196]	@ 0xc4
 800c484:	ee1a 8a10 	vmov	r8, s20
 800c488:	1afb      	subs	r3, r7, r3
 800c48a:	9e26      	ldr	r6, [sp, #152]	@ 0x98
 800c48c:	fb05 f303 	mul.w	r3, r5, r3
 800c490:	9318      	str	r3, [sp, #96]	@ 0x60
 800c492:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800c494:	930d      	str	r3, [sp, #52]	@ 0x34
 800c496:	9b17      	ldr	r3, [sp, #92]	@ 0x5c
 800c498:	930e      	str	r3, [sp, #56]	@ 0x38
 800c49a:	9c0c      	ldr	r4, [sp, #48]	@ 0x30
 800c49c:	42bc      	cmp	r4, r7
 800c49e:	da22      	bge.n	800c4e6 <forward_lite_conv2d_sssa8_ch+0x362>
 800c4a0:	9b15      	ldr	r3, [sp, #84]	@ 0x54
 800c4a2:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 800c4a4:	f8dd b034 	ldr.w	fp, [sp, #52]	@ 0x34
 800c4a8:	4293      	cmp	r3, r2
 800c4aa:	f8dd a028 	ldr.w	sl, [sp, #40]	@ 0x28
 800c4ae:	bf8c      	ite	hi
 800c4b0:	2300      	movhi	r3, #0
 800c4b2:	2301      	movls	r3, #1
 800c4b4:	930b      	str	r3, [sp, #44]	@ 0x2c
 800c4b6:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
 800c4b8:	2b00      	cmp	r3, #0
 800c4ba:	f000 809e 	beq.w	800c5fa <forward_lite_conv2d_sssa8_ch+0x476>
 800c4be:	42a6      	cmp	r6, r4
 800c4c0:	4651      	mov	r1, sl
 800c4c2:	4642      	mov	r2, r8
 800c4c4:	4648      	mov	r0, r9
 800c4c6:	d903      	bls.n	800c4d0 <forward_lite_conv2d_sssa8_ch+0x34c>
 800c4c8:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800c4ca:	2b00      	cmp	r3, #0
 800c4cc:	f000 8124 	beq.w	800c718 <forward_lite_conv2d_sssa8_ch+0x594>
 800c4d0:	f000 ff92 	bl	800d3f8 <st_int16_fill>
 800c4d4:	3401      	adds	r4, #1
 800c4d6:	44aa      	add	sl, r5
 800c4d8:	44c3      	add	fp, r8
 800c4da:	42bc      	cmp	r4, r7
 800c4dc:	d1ef      	bne.n	800c4be <forward_lite_conv2d_sssa8_ch+0x33a>
 800c4de:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800c4e0:	9a18      	ldr	r2, [sp, #96]	@ 0x60
 800c4e2:	4413      	add	r3, r2
 800c4e4:	930a      	str	r3, [sp, #40]	@ 0x28
 800c4e6:	9a0d      	ldr	r2, [sp, #52]	@ 0x34
 800c4e8:	9912      	ldr	r1, [sp, #72]	@ 0x48
 800c4ea:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800c4ec:	440a      	add	r2, r1
 800c4ee:	3301      	adds	r3, #1
 800c4f0:	920d      	str	r2, [sp, #52]	@ 0x34
 800c4f2:	9a11      	ldr	r2, [sp, #68]	@ 0x44
 800c4f4:	930e      	str	r3, [sp, #56]	@ 0x38
 800c4f6:	4293      	cmp	r3, r2
 800c4f8:	d1cf      	bne.n	800c49a <forward_lite_conv2d_sssa8_ch+0x316>
 800c4fa:	ee18 aa10 	vmov	sl, s16
 800c4fe:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 800c500:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 800c502:	4293      	cmp	r3, r2
 800c504:	f000 80bf 	beq.w	800c686 <forward_lite_conv2d_sssa8_ch+0x502>
 800c508:	9a0f      	ldr	r2, [sp, #60]	@ 0x3c
 800c50a:	991a      	ldr	r1, [sp, #104]	@ 0x68
 800c50c:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 800c50e:	440a      	add	r2, r1
 800c510:	9916      	ldr	r1, [sp, #88]	@ 0x58
 800c512:	3301      	adds	r3, #1
 800c514:	920f      	str	r2, [sp, #60]	@ 0x3c
 800c516:	440f      	add	r7, r1
 800c518:	9a0c      	ldr	r2, [sp, #48]	@ 0x30
 800c51a:	9310      	str	r3, [sp, #64]	@ 0x40
 800c51c:	440a      	add	r2, r1
 800c51e:	920c      	str	r2, [sp, #48]	@ 0x30
 800c520:	9a14      	ldr	r2, [sp, #80]	@ 0x50
 800c522:	429a      	cmp	r2, r3
 800c524:	d19d      	bne.n	800c462 <forward_lite_conv2d_sssa8_ch+0x2de>
 800c526:	9930      	ldr	r1, [sp, #192]	@ 0xc0
 800c528:	9a11      	ldr	r2, [sp, #68]	@ 0x44
 800c52a:	9b29      	ldr	r3, [sp, #164]	@ 0xa4
 800c52c:	440a      	add	r2, r1
 800c52e:	3301      	adds	r3, #1
 800c530:	9211      	str	r2, [sp, #68]	@ 0x44
 800c532:	9a17      	ldr	r2, [sp, #92]	@ 0x5c
 800c534:	9329      	str	r3, [sp, #164]	@ 0xa4
 800c536:	440a      	add	r2, r1
 800c538:	9932      	ldr	r1, [sp, #200]	@ 0xc8
 800c53a:	9217      	str	r2, [sp, #92]	@ 0x5c
 800c53c:	9a23      	ldr	r2, [sp, #140]	@ 0x8c
 800c53e:	440a      	add	r2, r1
 800c540:	9223      	str	r2, [sp, #140]	@ 0x8c
 800c542:	9a2f      	ldr	r2, [sp, #188]	@ 0xbc
 800c544:	429a      	cmp	r2, r3
 800c546:	f47f af73 	bne.w	800c430 <forward_lite_conv2d_sssa8_ch+0x2ac>
 800c54a:	991b      	ldr	r1, [sp, #108]	@ 0x6c
 800c54c:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800c54e:	4299      	cmp	r1, r3
 800c550:	d017      	beq.n	800c582 <forward_lite_conv2d_sssa8_ch+0x3fe>
 800c552:	9b1e      	ldr	r3, [sp, #120]	@ 0x78
 800c554:	ee19 2a90 	vmov	r2, s19
 800c558:	ee19 0a10 	vmov	r0, s18
 800c55c:	9307      	str	r3, [sp, #28]
 800c55e:	9b22      	ldr	r3, [sp, #136]	@ 0x88
 800c560:	9306      	str	r3, [sp, #24]
 800c562:	9b25      	ldr	r3, [sp, #148]	@ 0x94
 800c564:	9305      	str	r3, [sp, #20]
 800c566:	9b84      	ldr	r3, [sp, #528]	@ 0x210
 800c568:	9304      	str	r3, [sp, #16]
 800c56a:	9b24      	ldr	r3, [sp, #144]	@ 0x90
 800c56c:	9303      	str	r3, [sp, #12]
 800c56e:	9b1f      	ldr	r3, [sp, #124]	@ 0x7c
 800c570:	9302      	str	r3, [sp, #8]
 800c572:	9b21      	ldr	r3, [sp, #132]	@ 0x84
 800c574:	9301      	str	r3, [sp, #4]
 800c576:	9b20      	ldr	r3, [sp, #128]	@ 0x80
 800c578:	9300      	str	r3, [sp, #0]
 800c57a:	ee18 3a90 	vmov	r3, s17
 800c57e:	f001 fb63 	bl	800dc48 <st_sssa8_ch_nn_mat_mult_kernel_single_opt>
 800c582:	9a21      	ldr	r2, [sp, #132]	@ 0x84
 800c584:	9b36      	ldr	r3, [sp, #216]	@ 0xd8
 800c586:	1a9b      	subs	r3, r3, r2
 800c588:	b299      	uxth	r1, r3
 800c58a:	4613      	mov	r3, r2
 800c58c:	428a      	cmp	r2, r1
 800c58e:	9136      	str	r1, [sp, #216]	@ 0xd8
 800c590:	bf28      	it	cs
 800c592:	460b      	movcs	r3, r1
 800c594:	2b00      	cmp	r3, #0
 800c596:	f000 80f1 	beq.w	800c77c <forward_lite_conv2d_sssa8_ch+0x5f8>
 800c59a:	9972      	ldr	r1, [sp, #456]	@ 0x1c8
 800c59c:	981f      	ldr	r0, [sp, #124]	@ 0x7c
 800c59e:	fb00 1102 	mla	r1, r0, r2, r1
 800c5a2:	9172      	str	r1, [sp, #456]	@ 0x1c8
 800c5a4:	ee19 1a90 	vmov	r1, s19
 800c5a8:	eb01 0182 	add.w	r1, r1, r2, lsl #2
 800c5ac:	ee09 1a90 	vmov	s19, r1
 800c5b0:	9924      	ldr	r1, [sp, #144]	@ 0x90
 800c5b2:	eb01 0142 	add.w	r1, r1, r2, lsl #1
 800c5b6:	9124      	str	r1, [sp, #144]	@ 0x90
 800c5b8:	9984      	ldr	r1, [sp, #528]	@ 0x210
 800c5ba:	eb01 0182 	add.w	r1, r1, r2, lsl #2
 800c5be:	9184      	str	r1, [sp, #528]	@ 0x210
 800c5c0:	9925      	ldr	r1, [sp, #148]	@ 0x94
 800c5c2:	eb01 0182 	add.w	r1, r1, r2, lsl #2
 800c5c6:	9125      	str	r1, [sp, #148]	@ 0x94
 800c5c8:	9938      	ldr	r1, [sp, #224]	@ 0xe0
 800c5ca:	2900      	cmp	r1, #0
 800c5cc:	f000 80de 	beq.w	800c78c <forward_lite_conv2d_sssa8_ch+0x608>
 800c5d0:	997f      	ldr	r1, [sp, #508]	@ 0x1fc
 800c5d2:	9820      	ldr	r0, [sp, #128]	@ 0x80
 800c5d4:	9321      	str	r3, [sp, #132]	@ 0x84
 800c5d6:	fb00 1202 	mla	r2, r0, r2, r1
 800c5da:	927f      	str	r2, [sp, #508]	@ 0x1fc
 800c5dc:	9b35      	ldr	r3, [sp, #212]	@ 0xd4
 800c5de:	3b01      	subs	r3, #1
 800c5e0:	b29b      	uxth	r3, r3
 800c5e2:	461a      	mov	r2, r3
 800c5e4:	9335      	str	r3, [sp, #212]	@ 0xd4
 800c5e6:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 800c5ea:	429a      	cmp	r2, r3
 800c5ec:	f47f aefd 	bne.w	800c3ea <forward_lite_conv2d_sssa8_ch+0x266>
 800c5f0:	b063      	add	sp, #396	@ 0x18c
 800c5f2:	ecbd 8b06 	vpop	{d8-d10}
 800c5f6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800c5fa:	42a6      	cmp	r6, r4
 800c5fc:	4642      	mov	r2, r8
 800c5fe:	4651      	mov	r1, sl
 800c600:	4648      	mov	r0, r9
 800c602:	d903      	bls.n	800c60c <forward_lite_conv2d_sssa8_ch+0x488>
 800c604:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800c606:	2b00      	cmp	r3, #0
 800c608:	f000 8082 	beq.w	800c710 <forward_lite_conv2d_sssa8_ch+0x58c>
 800c60c:	f000 fef4 	bl	800d3f8 <st_int16_fill>
 800c610:	3401      	adds	r4, #1
 800c612:	44aa      	add	sl, r5
 800c614:	44c3      	add	fp, r8
 800c616:	42bc      	cmp	r4, r7
 800c618:	d1ef      	bne.n	800c5fa <forward_lite_conv2d_sssa8_ch+0x476>
 800c61a:	e760      	b.n	800c4de <forward_lite_conv2d_sssa8_ch+0x35a>
 800c61c:	9b4f      	ldr	r3, [sp, #316]	@ 0x13c
 800c61e:	b933      	cbnz	r3, 800c62e <forward_lite_conv2d_sssa8_ch+0x4aa>
 800c620:	9b50      	ldr	r3, [sp, #320]	@ 0x140
 800c622:	3b01      	subs	r3, #1
 800c624:	9350      	str	r3, [sp, #320]	@ 0x140
 800c626:	2301      	movs	r3, #1
 800c628:	f8ad 315e 	strh.w	r3, [sp, #350]	@ 0x15e
 800c62c:	e722      	b.n	800c474 <forward_lite_conv2d_sssa8_ch+0x2f0>
 800c62e:	3b01      	subs	r3, #1
 800c630:	934f      	str	r3, [sp, #316]	@ 0x13c
 800c632:	f8bd 315c 	ldrh.w	r3, [sp, #348]	@ 0x15c
 800c636:	2b01      	cmp	r3, #1
 800c638:	f8ad 315e 	strh.w	r3, [sp, #350]	@ 0x15e
 800c63c:	f43f af1a 	beq.w	800c474 <forward_lite_conv2d_sssa8_ch+0x2f0>
 800c640:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
 800c642:	9c17      	ldr	r4, [sp, #92]	@ 0x5c
 800c644:	2b00      	cmp	r3, #0
 800c646:	d148      	bne.n	800c6da <forward_lite_conv2d_sssa8_ch+0x556>
 800c648:	9b11      	ldr	r3, [sp, #68]	@ 0x44
 800c64a:	429c      	cmp	r4, r3
 800c64c:	f6bf af57 	bge.w	800c4fe <forward_lite_conv2d_sssa8_ch+0x37a>
 800c650:	970b      	str	r7, [sp, #44]	@ 0x2c
 800c652:	4698      	mov	r8, r3
 800c654:	9e0f      	ldr	r6, [sp, #60]	@ 0x3c
 800c656:	9d0a      	ldr	r5, [sp, #40]	@ 0x28
 800c658:	f8dd b070 	ldr.w	fp, [sp, #112]	@ 0x70
 800c65c:	9f12      	ldr	r7, [sp, #72]	@ 0x48
 800c65e:	3401      	adds	r4, #1
 800c660:	4629      	mov	r1, r5
 800c662:	4630      	mov	r0, r6
 800c664:	4652      	mov	r2, sl
 800c666:	f000 fc6b 	bl	800cf40 <st_int8_to16_no_shift_interleaved>
 800c66a:	4544      	cmp	r4, r8
 800c66c:	445d      	add	r5, fp
 800c66e:	443e      	add	r6, r7
 800c670:	d1f5      	bne.n	800c65e <forward_lite_conv2d_sssa8_ch+0x4da>
 800c672:	9a1d      	ldr	r2, [sp, #116]	@ 0x74
 800c674:	e9dd 370a 	ldrd	r3, r7, [sp, #40]	@ 0x28
 800c678:	4413      	add	r3, r2
 800c67a:	930a      	str	r3, [sp, #40]	@ 0x28
 800c67c:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 800c67e:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 800c680:	4293      	cmp	r3, r2
 800c682:	f47f af41 	bne.w	800c508 <forward_lite_conv2d_sssa8_ch+0x384>
 800c686:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 800c688:	2b00      	cmp	r3, #0
 800c68a:	d149      	bne.n	800c720 <forward_lite_conv2d_sssa8_ch+0x59c>
 800c68c:	9b2a      	ldr	r3, [sp, #168]	@ 0xa8
 800c68e:	2b00      	cmp	r3, #0
 800c690:	d046      	beq.n	800c720 <forward_lite_conv2d_sssa8_ch+0x59c>
 800c692:	9b1e      	ldr	r3, [sp, #120]	@ 0x78
 800c694:	ee19 2a90 	vmov	r2, s19
 800c698:	991b      	ldr	r1, [sp, #108]	@ 0x6c
 800c69a:	ee19 0a10 	vmov	r0, s18
 800c69e:	9308      	str	r3, [sp, #32]
 800c6a0:	9b22      	ldr	r3, [sp, #136]	@ 0x88
 800c6a2:	9307      	str	r3, [sp, #28]
 800c6a4:	9b25      	ldr	r3, [sp, #148]	@ 0x94
 800c6a6:	9306      	str	r3, [sp, #24]
 800c6a8:	9b84      	ldr	r3, [sp, #528]	@ 0x210
 800c6aa:	9305      	str	r3, [sp, #20]
 800c6ac:	9b24      	ldr	r3, [sp, #144]	@ 0x90
 800c6ae:	9304      	str	r3, [sp, #16]
 800c6b0:	9b1f      	ldr	r3, [sp, #124]	@ 0x7c
 800c6b2:	9303      	str	r3, [sp, #12]
 800c6b4:	9b21      	ldr	r3, [sp, #132]	@ 0x84
 800c6b6:	9302      	str	r3, [sp, #8]
 800c6b8:	9b20      	ldr	r3, [sp, #128]	@ 0x80
 800c6ba:	9300      	str	r3, [sp, #0]
 800c6bc:	2302      	movs	r3, #2
 800c6be:	9301      	str	r3, [sp, #4]
 800c6c0:	ee18 3a90 	vmov	r3, s17
 800c6c4:	f001 fc8a 	bl	800dfdc <st_sssa8_ch_nn_mat_mult_kernel_opt>
 800c6c8:	901e      	str	r0, [sp, #120]	@ 0x78
 800c6ca:	9b14      	ldr	r3, [sp, #80]	@ 0x50
 800c6cc:	9a10      	ldr	r2, [sp, #64]	@ 0x40
 800c6ce:	3b01      	subs	r3, #1
 800c6d0:	4293      	cmp	r3, r2
 800c6d2:	d045      	beq.n	800c760 <forward_lite_conv2d_sssa8_ch+0x5dc>
 800c6d4:	9b1b      	ldr	r3, [sp, #108]	@ 0x6c
 800c6d6:	930a      	str	r3, [sp, #40]	@ 0x28
 800c6d8:	e716      	b.n	800c508 <forward_lite_conv2d_sssa8_ch+0x384>
 800c6da:	9b11      	ldr	r3, [sp, #68]	@ 0x44
 800c6dc:	429c      	cmp	r4, r3
 800c6de:	f6bf af0e 	bge.w	800c4fe <forward_lite_conv2d_sssa8_ch+0x37a>
 800c6e2:	970b      	str	r7, [sp, #44]	@ 0x2c
 800c6e4:	4698      	mov	r8, r3
 800c6e6:	9e0f      	ldr	r6, [sp, #60]	@ 0x3c
 800c6e8:	9d0a      	ldr	r5, [sp, #40]	@ 0x28
 800c6ea:	f8dd b070 	ldr.w	fp, [sp, #112]	@ 0x70
 800c6ee:	9f12      	ldr	r7, [sp, #72]	@ 0x48
 800c6f0:	3401      	adds	r4, #1
 800c6f2:	4629      	mov	r1, r5
 800c6f4:	4630      	mov	r0, r6
 800c6f6:	4652      	mov	r2, sl
 800c6f8:	f000 fbc0 	bl	800ce7c <st_int8_to16_no_shift>
 800c6fc:	4544      	cmp	r4, r8
 800c6fe:	445d      	add	r5, fp
 800c700:	443e      	add	r6, r7
 800c702:	d1f5      	bne.n	800c6f0 <forward_lite_conv2d_sssa8_ch+0x56c>
 800c704:	9a1d      	ldr	r2, [sp, #116]	@ 0x74
 800c706:	e9dd 370a 	ldrd	r3, r7, [sp, #40]	@ 0x28
 800c70a:	4413      	add	r3, r2
 800c70c:	930a      	str	r3, [sp, #40]	@ 0x28
 800c70e:	e7b5      	b.n	800c67c <forward_lite_conv2d_sssa8_ch+0x4f8>
 800c710:	4658      	mov	r0, fp
 800c712:	f000 fc15 	bl	800cf40 <st_int8_to16_no_shift_interleaved>
 800c716:	e77b      	b.n	800c610 <forward_lite_conv2d_sssa8_ch+0x48c>
 800c718:	4658      	mov	r0, fp
 800c71a:	f000 fbaf 	bl	800ce7c <st_int8_to16_no_shift>
 800c71e:	e6d9      	b.n	800c4d4 <forward_lite_conv2d_sssa8_ch+0x350>
 800c720:	9b1e      	ldr	r3, [sp, #120]	@ 0x78
 800c722:	ee19 2a90 	vmov	r2, s19
 800c726:	991b      	ldr	r1, [sp, #108]	@ 0x6c
 800c728:	ee19 0a10 	vmov	r0, s18
 800c72c:	9308      	str	r3, [sp, #32]
 800c72e:	9b22      	ldr	r3, [sp, #136]	@ 0x88
 800c730:	9307      	str	r3, [sp, #28]
 800c732:	9b25      	ldr	r3, [sp, #148]	@ 0x94
 800c734:	9306      	str	r3, [sp, #24]
 800c736:	9b84      	ldr	r3, [sp, #528]	@ 0x210
 800c738:	9305      	str	r3, [sp, #20]
 800c73a:	9b24      	ldr	r3, [sp, #144]	@ 0x90
 800c73c:	9304      	str	r3, [sp, #16]
 800c73e:	9b1f      	ldr	r3, [sp, #124]	@ 0x7c
 800c740:	9303      	str	r3, [sp, #12]
 800c742:	9b21      	ldr	r3, [sp, #132]	@ 0x84
 800c744:	9302      	str	r3, [sp, #8]
 800c746:	9b20      	ldr	r3, [sp, #128]	@ 0x80
 800c748:	9300      	str	r3, [sp, #0]
 800c74a:	2300      	movs	r3, #0
 800c74c:	9301      	str	r3, [sp, #4]
 800c74e:	ee18 3a90 	vmov	r3, s17
 800c752:	f001 fc43 	bl	800dfdc <st_sssa8_ch_nn_mat_mult_kernel_opt>
 800c756:	9b27      	ldr	r3, [sp, #156]	@ 0x9c
 800c758:	901e      	str	r0, [sp, #120]	@ 0x78
 800c75a:	2b03      	cmp	r3, #3
 800c75c:	d1ba      	bne.n	800c6d4 <forward_lite_conv2d_sssa8_ch+0x550>
 800c75e:	e7b4      	b.n	800c6ca <forward_lite_conv2d_sssa8_ch+0x546>
 800c760:	9b1e      	ldr	r3, [sp, #120]	@ 0x78
 800c762:	3302      	adds	r3, #2
 800c764:	931e      	str	r3, [sp, #120]	@ 0x78
 800c766:	9b1b      	ldr	r3, [sp, #108]	@ 0x6c
 800c768:	930a      	str	r3, [sp, #40]	@ 0x28
 800c76a:	e6cd      	b.n	800c508 <forward_lite_conv2d_sssa8_ch+0x384>
 800c76c:	4572      	cmp	r2, lr
 800c76e:	f840 6c04 	str.w	r6, [r0, #-4]
 800c772:	f100 0004 	add.w	r0, r0, #4
 800c776:	f47f ad8a 	bne.w	800c28e <forward_lite_conv2d_sssa8_ch+0x10a>
 800c77a:	e59b      	b.n	800c2b4 <forward_lite_conv2d_sssa8_ch+0x130>
 800c77c:	9321      	str	r3, [sp, #132]	@ 0x84
 800c77e:	e72d      	b.n	800c5dc <forward_lite_conv2d_sssa8_ch+0x458>
 800c780:	9b14      	ldr	r3, [sp, #80]	@ 0x50
 800c782:	9a7f      	ldr	r2, [sp, #508]	@ 0x1fc
 800c784:	3303      	adds	r3, #3
 800c786:	18d3      	adds	r3, r2, r3
 800c788:	931e      	str	r3, [sp, #120]	@ 0x78
 800c78a:	e641      	b.n	800c410 <forward_lite_conv2d_sssa8_ch+0x28c>
 800c78c:	4611      	mov	r1, r2
 800c78e:	9a7f      	ldr	r2, [sp, #508]	@ 0x1fc
 800c790:	9321      	str	r3, [sp, #132]	@ 0x84
 800c792:	440a      	add	r2, r1
 800c794:	927f      	str	r2, [sp, #508]	@ 0x1fc
 800c796:	e721      	b.n	800c5dc <forward_lite_conv2d_sssa8_ch+0x458>
 800c798:	9b21      	ldr	r3, [sp, #132]	@ 0x84
 800c79a:	ee19 1a10 	vmov	r1, s18
 800c79e:	9a1f      	ldr	r2, [sp, #124]	@ 0x7c
 800c7a0:	9872      	ldr	r0, [sp, #456]	@ 0x1c8
 800c7a2:	f000 fc11 	bl	800cfc8 <st_int8_to16_dual>
 800c7a6:	e62d      	b.n	800c404 <forward_lite_conv2d_sssa8_ch+0x280>
 800c7a8:	ee18 1a90 	vmov	r1, s17
 800c7ac:	9a1f      	ldr	r2, [sp, #124]	@ 0x7c
 800c7ae:	fb02 f301 	mul.w	r3, r2, r1
 800c7b2:	42a3      	cmp	r3, r4
 800c7b4:	f73f adc1 	bgt.w	800c33a <forward_lite_conv2d_sssa8_ch+0x1b6>
 800c7b8:	f01a 0f03 	tst.w	sl, #3
 800c7bc:	f8cd 80dc 	str.w	r8, [sp, #220]	@ 0xdc
 800c7c0:	f040 822e 	bne.w	800cc20 <forward_lite_conv2d_sssa8_ch+0xa9c>
 800c7c4:	ee18 3a90 	vmov	r3, s17
 800c7c8:	ee19 1a10 	vmov	r1, s18
 800c7cc:	9872      	ldr	r0, [sp, #456]	@ 0x1c8
 800c7ce:	f000 fce5 	bl	800d19c <st_int8_to16_dual_interleaved>
 800c7d2:	e5b4      	b.n	800c33e <forward_lite_conv2d_sssa8_ch+0x1ba>
 800c7d4:	9a26      	ldr	r2, [sp, #152]	@ 0x98
 800c7d6:	9b15      	ldr	r3, [sp, #84]	@ 0x54
 800c7d8:	fb02 f303 	mul.w	r3, r2, r3
 800c7dc:	9a7f      	ldr	r2, [sp, #508]	@ 0x1fc
 800c7de:	fb0a 0303 	mla	r3, sl, r3, r0
 800c7e2:	429a      	cmp	r2, r3
 800c7e4:	bf2c      	ite	cs
 800c7e6:	2300      	movcs	r3, #0
 800c7e8:	2301      	movcc	r3, #1
 800c7ea:	932e      	str	r3, [sp, #184]	@ 0xb8
 800c7ec:	e505      	b.n	800c1fa <forward_lite_conv2d_sssa8_ch+0x76>
 800c7ee:	9b2f      	ldr	r3, [sp, #188]	@ 0xbc
 800c7f0:	2b00      	cmp	r3, #0
 800c7f2:	f43f aefd 	beq.w	800c5f0 <forward_lite_conv2d_sssa8_ch+0x46c>
 800c7f6:	9a2e      	ldr	r2, [sp, #184]	@ 0xb8
 800c7f8:	fb0a f306 	mul.w	r3, sl, r6
 800c7fc:	9926      	ldr	r1, [sp, #152]	@ 0x98
 800c7fe:	fa0f f989 	sxth.w	r9, r9
 800c802:	9238      	str	r2, [sp, #224]	@ 0xe0
 800c804:	ee0a aa90 	vmov	s21, sl
 800c808:	9a1b      	ldr	r2, [sp, #108]	@ 0x6c
 800c80a:	fb01 f40a 	mul.w	r4, r1, sl
 800c80e:	982d      	ldr	r0, [sp, #180]	@ 0xb4
 800c810:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 800c814:	9a34      	ldr	r2, [sp, #208]	@ 0xd0
 800c816:	9413      	str	r4, [sp, #76]	@ 0x4c
 800c818:	931a      	str	r3, [sp, #104]	@ 0x68
 800c81a:	fb01 f302 	mul.w	r3, r1, r2
 800c81e:	9914      	ldr	r1, [sp, #80]	@ 0x50
 800c820:	425b      	negs	r3, r3
 800c822:	1a1b      	subs	r3, r3, r0
 800c824:	fb0a 5303 	mla	r3, sl, r3, r5
 800c828:	9d7f      	ldr	r5, [sp, #508]	@ 0x1fc
 800c82a:	9335      	str	r3, [sp, #212]	@ 0xd4
 800c82c:	9b39      	ldr	r3, [sp, #228]	@ 0xe4
 800c82e:	953c      	str	r5, [sp, #240]	@ 0xf0
 800c830:	3b01      	subs	r3, #1
 800c832:	b29b      	uxth	r3, r3
 800c834:	9341      	str	r3, [sp, #260]	@ 0x104
 800c836:	1ccb      	adds	r3, r1, #3
 800c838:	18eb      	adds	r3, r5, r3
 800c83a:	933b      	str	r3, [sp, #236]	@ 0xec
 800c83c:	f00a 0303 	and.w	r3, sl, #3
 800c840:	9312      	str	r3, [sp, #72]	@ 0x48
 800c842:	007b      	lsls	r3, r7, #1
 800c844:	931c      	str	r3, [sp, #112]	@ 0x70
 800c846:	ea4f 034a 	mov.w	r3, sl, lsl #1
 800c84a:	9334      	str	r3, [sp, #208]	@ 0xd0
 800c84c:	9b2b      	ldr	r3, [sp, #172]	@ 0xac
 800c84e:	1a9b      	subs	r3, r3, r2
 800c850:	9310      	str	r3, [sp, #64]	@ 0x40
 800c852:	4253      	negs	r3, r2
 800c854:	9318      	str	r3, [sp, #96]	@ 0x60
 800c856:	9b30      	ldr	r3, [sp, #192]	@ 0xc0
 800c858:	fb03 f304 	mul.w	r3, r3, r4
 800c85c:	933e      	str	r3, [sp, #248]	@ 0xf8
 800c85e:	4243      	negs	r3, r0
 800c860:	a84e      	add	r0, sp, #312	@ 0x138
 800c862:	933a      	str	r3, [sp, #232]	@ 0xe8
 800c864:	1c8b      	adds	r3, r1, #2
 800c866:	9340      	str	r3, [sp, #256]	@ 0x100
 800c868:	ee18 3a90 	vmov	r3, s17
 800c86c:	fb01 f303 	mul.w	r3, r1, r3
 800c870:	933f      	str	r3, [sp, #252]	@ 0xfc
 800c872:	9b16      	ldr	r3, [sp, #88]	@ 0x58
 800c874:	fb03 f30a 	mul.w	r3, r3, sl
 800c878:	46ca      	mov	sl, r9
 800c87a:	9319      	str	r3, [sp, #100]	@ 0x64
 800c87c:	f000 fda2 	bl	800d3c4 <ai_padding_opt_phase1>
 800c880:	9b27      	ldr	r3, [sp, #156]	@ 0x9c
 800c882:	2b03      	cmp	r3, #3
 800c884:	f000 81b6 	beq.w	800cbf4 <forward_lite_conv2d_sssa8_ch+0xa70>
 800c888:	9b3c      	ldr	r3, [sp, #240]	@ 0xf0
 800c88a:	9328      	str	r3, [sp, #160]	@ 0xa0
 800c88c:	9b38      	ldr	r3, [sp, #224]	@ 0xe0
 800c88e:	933d      	str	r3, [sp, #244]	@ 0xf4
 800c890:	9b37      	ldr	r3, [sp, #220]	@ 0xdc
 800c892:	b953      	cbnz	r3, 800c8aa <forward_lite_conv2d_sssa8_ch+0x726>
 800c894:	9b12      	ldr	r3, [sp, #72]	@ 0x48
 800c896:	2b00      	cmp	r3, #0
 800c898:	f040 81ba 	bne.w	800cc10 <forward_lite_conv2d_sssa8_ch+0xa8c>
 800c89c:	9b21      	ldr	r3, [sp, #132]	@ 0x84
 800c89e:	ee19 1a10 	vmov	r1, s18
 800c8a2:	9a1f      	ldr	r2, [sp, #124]	@ 0x7c
 800c8a4:	9872      	ldr	r0, [sp, #456]	@ 0x1c8
 800c8a6:	f000 fc79 	bl	800d19c <st_int8_to16_dual_interleaved>
 800c8aa:	9b39      	ldr	r3, [sp, #228]	@ 0xe4
 800c8ac:	2b00      	cmp	r3, #0
 800c8ae:	f000 817f 	beq.w	800cbb0 <forward_lite_conv2d_sssa8_ch+0xa2c>
 800c8b2:	9a18      	ldr	r2, [sp, #96]	@ 0x60
 800c8b4:	eeb0 aa69 	vmov.f32	s20, s19
 800c8b8:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 800c8ba:	46b8      	mov	r8, r7
 800c8bc:	991c      	ldr	r1, [sp, #112]	@ 0x70
 800c8be:	1a9b      	subs	r3, r3, r2
 800c8c0:	edcd 8a32 	vstr	s17, [sp, #200]	@ 0xc8
 800c8c4:	fb01 f303 	mul.w	r3, r1, r3
 800c8c8:	931d      	str	r3, [sp, #116]	@ 0x74
 800c8ca:	9b2b      	ldr	r3, [sp, #172]	@ 0xac
 800c8cc:	18d3      	adds	r3, r2, r3
 800c8ce:	9333      	str	r3, [sp, #204]	@ 0xcc
 800c8d0:	9b41      	ldr	r3, [sp, #260]	@ 0x104
 800c8d2:	9331      	str	r3, [sp, #196]	@ 0xc4
 800c8d4:	9b21      	ldr	r3, [sp, #132]	@ 0x84
 800c8d6:	9323      	str	r3, [sp, #140]	@ 0x8c
 800c8d8:	9b72      	ldr	r3, [sp, #456]	@ 0x1c8
 800c8da:	9336      	str	r3, [sp, #216]	@ 0xd8
 800c8dc:	9b25      	ldr	r3, [sp, #148]	@ 0x94
 800c8de:	9329      	str	r3, [sp, #164]	@ 0xa4
 800c8e0:	9b24      	ldr	r3, [sp, #144]	@ 0x90
 800c8e2:	932e      	str	r3, [sp, #184]	@ 0xb8
 800c8e4:	9b84      	ldr	r3, [sp, #528]	@ 0x210
 800c8e6:	932a      	str	r3, [sp, #168]	@ 0xa8
 800c8e8:	9a52      	ldr	r2, [sp, #328]	@ 0x148
 800c8ea:	9b51      	ldr	r3, [sp, #324]	@ 0x144
 800c8ec:	924f      	str	r2, [sp, #316]	@ 0x13c
 800c8ee:	9a53      	ldr	r2, [sp, #332]	@ 0x14c
 800c8f0:	934e      	str	r3, [sp, #312]	@ 0x138
 800c8f2:	9250      	str	r2, [sp, #320]	@ 0x140
 800c8f4:	9a14      	ldr	r2, [sp, #80]	@ 0x50
 800c8f6:	2a00      	cmp	r2, #0
 800c8f8:	f000 8120 	beq.w	800cb3c <forward_lite_conv2d_sssa8_ch+0x9b8>
 800c8fc:	e9dd 212c 	ldrd	r2, r1, [sp, #176]	@ 0xb0
 800c900:	1a57      	subs	r7, r2, r1
 800c902:	9a3a      	ldr	r2, [sp, #232]	@ 0xe8
 800c904:	920c      	str	r2, [sp, #48]	@ 0x30
 800c906:	9a35      	ldr	r2, [sp, #212]	@ 0xd4
 800c908:	920f      	str	r2, [sp, #60]	@ 0x3c
 800c90a:	9a28      	ldr	r2, [sp, #160]	@ 0xa0
 800c90c:	921e      	str	r2, [sp, #120]	@ 0x78
 800c90e:	9a1b      	ldr	r2, [sp, #108]	@ 0x6c
 800c910:	920b      	str	r2, [sp, #44]	@ 0x2c
 800c912:	2200      	movs	r2, #0
 800c914:	9211      	str	r2, [sp, #68]	@ 0x44
 800c916:	2b00      	cmp	r3, #0
 800c918:	d05f      	beq.n	800c9da <forward_lite_conv2d_sssa8_ch+0x856>
 800c91a:	3b01      	subs	r3, #1
 800c91c:	934e      	str	r3, [sp, #312]	@ 0x138
 800c91e:	2301      	movs	r3, #1
 800c920:	f8ad 315e 	strh.w	r3, [sp, #350]	@ 0x15e
 800c924:	9b33      	ldr	r3, [sp, #204]	@ 0xcc
 800c926:	9a18      	ldr	r2, [sp, #96]	@ 0x60
 800c928:	4293      	cmp	r3, r2
 800c92a:	dd3f      	ble.n	800c9ac <forward_lite_conv2d_sssa8_ch+0x828>
 800c92c:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 800c92e:	ee08 8a10 	vmov	s16, r8
 800c932:	9d34      	ldr	r5, [sp, #208]	@ 0xd0
 800c934:	ee1a 9a90 	vmov	r9, s21
 800c938:	1afb      	subs	r3, r7, r3
 800c93a:	9e26      	ldr	r6, [sp, #152]	@ 0x98
 800c93c:	fb05 f303 	mul.w	r3, r5, r3
 800c940:	9317      	str	r3, [sp, #92]	@ 0x5c
 800c942:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800c944:	930d      	str	r3, [sp, #52]	@ 0x34
 800c946:	9b18      	ldr	r3, [sp, #96]	@ 0x60
 800c948:	930e      	str	r3, [sp, #56]	@ 0x38
 800c94a:	9c0c      	ldr	r4, [sp, #48]	@ 0x30
 800c94c:	42bc      	cmp	r4, r7
 800c94e:	da21      	bge.n	800c994 <forward_lite_conv2d_sssa8_ch+0x810>
 800c950:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800c952:	9a15      	ldr	r2, [sp, #84]	@ 0x54
 800c954:	f8dd b034 	ldr.w	fp, [sp, #52]	@ 0x34
 800c958:	4293      	cmp	r3, r2
 800c95a:	f8dd 802c 	ldr.w	r8, [sp, #44]	@ 0x2c
 800c95e:	bf34      	ite	cc
 800c960:	2300      	movcc	r3, #0
 800c962:	2301      	movcs	r3, #1
 800c964:	930a      	str	r3, [sp, #40]	@ 0x28
 800c966:	9b12      	ldr	r3, [sp, #72]	@ 0x48
 800c968:	2b00      	cmp	r3, #0
 800c96a:	d03f      	beq.n	800c9ec <forward_lite_conv2d_sssa8_ch+0x868>
 800c96c:	42b4      	cmp	r4, r6
 800c96e:	4641      	mov	r1, r8
 800c970:	464a      	mov	r2, r9
 800c972:	4650      	mov	r0, sl
 800c974:	d203      	bcs.n	800c97e <forward_lite_conv2d_sssa8_ch+0x7fa>
 800c976:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800c978:	2b00      	cmp	r3, #0
 800c97a:	f000 80bf 	beq.w	800cafc <forward_lite_conv2d_sssa8_ch+0x978>
 800c97e:	f000 fd3b 	bl	800d3f8 <st_int16_fill>
 800c982:	3401      	adds	r4, #1
 800c984:	44a8      	add	r8, r5
 800c986:	44cb      	add	fp, r9
 800c988:	42a7      	cmp	r7, r4
 800c98a:	d1ef      	bne.n	800c96c <forward_lite_conv2d_sssa8_ch+0x7e8>
 800c98c:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800c98e:	9a17      	ldr	r2, [sp, #92]	@ 0x5c
 800c990:	4413      	add	r3, r2
 800c992:	930b      	str	r3, [sp, #44]	@ 0x2c
 800c994:	9a0d      	ldr	r2, [sp, #52]	@ 0x34
 800c996:	9913      	ldr	r1, [sp, #76]	@ 0x4c
 800c998:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800c99a:	440a      	add	r2, r1
 800c99c:	3301      	adds	r3, #1
 800c99e:	920d      	str	r2, [sp, #52]	@ 0x34
 800c9a0:	9a10      	ldr	r2, [sp, #64]	@ 0x40
 800c9a2:	930e      	str	r3, [sp, #56]	@ 0x38
 800c9a4:	4293      	cmp	r3, r2
 800c9a6:	d1d0      	bne.n	800c94a <forward_lite_conv2d_sssa8_ch+0x7c6>
 800c9a8:	ee18 8a10 	vmov	r8, s16
 800c9ac:	9b1a      	ldr	r3, [sp, #104]	@ 0x68
 800c9ae:	9a0b      	ldr	r2, [sp, #44]	@ 0x2c
 800c9b0:	4293      	cmp	r3, r2
 800c9b2:	d055      	beq.n	800ca60 <forward_lite_conv2d_sssa8_ch+0x8dc>
 800c9b4:	9a0f      	ldr	r2, [sp, #60]	@ 0x3c
 800c9b6:	9919      	ldr	r1, [sp, #100]	@ 0x64
 800c9b8:	9b11      	ldr	r3, [sp, #68]	@ 0x44
 800c9ba:	440a      	add	r2, r1
 800c9bc:	9916      	ldr	r1, [sp, #88]	@ 0x58
 800c9be:	3301      	adds	r3, #1
 800c9c0:	920f      	str	r2, [sp, #60]	@ 0x3c
 800c9c2:	440f      	add	r7, r1
 800c9c4:	9a0c      	ldr	r2, [sp, #48]	@ 0x30
 800c9c6:	9311      	str	r3, [sp, #68]	@ 0x44
 800c9c8:	440a      	add	r2, r1
 800c9ca:	920c      	str	r2, [sp, #48]	@ 0x30
 800c9cc:	9a14      	ldr	r2, [sp, #80]	@ 0x50
 800c9ce:	429a      	cmp	r2, r3
 800c9d0:	f000 8098 	beq.w	800cb04 <forward_lite_conv2d_sssa8_ch+0x980>
 800c9d4:	9b4e      	ldr	r3, [sp, #312]	@ 0x138
 800c9d6:	2b00      	cmp	r3, #0
 800c9d8:	d19f      	bne.n	800c91a <forward_lite_conv2d_sssa8_ch+0x796>
 800c9da:	9b4f      	ldr	r3, [sp, #316]	@ 0x13c
 800c9dc:	b9b3      	cbnz	r3, 800ca0c <forward_lite_conv2d_sssa8_ch+0x888>
 800c9de:	9b50      	ldr	r3, [sp, #320]	@ 0x140
 800c9e0:	3b01      	subs	r3, #1
 800c9e2:	9350      	str	r3, [sp, #320]	@ 0x140
 800c9e4:	2301      	movs	r3, #1
 800c9e6:	f8ad 315e 	strh.w	r3, [sp, #350]	@ 0x15e
 800c9ea:	e79b      	b.n	800c924 <forward_lite_conv2d_sssa8_ch+0x7a0>
 800c9ec:	42b4      	cmp	r4, r6
 800c9ee:	464a      	mov	r2, r9
 800c9f0:	4641      	mov	r1, r8
 800c9f2:	4650      	mov	r0, sl
 800c9f4:	d202      	bcs.n	800c9fc <forward_lite_conv2d_sssa8_ch+0x878>
 800c9f6:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800c9f8:	2b00      	cmp	r3, #0
 800c9fa:	d07b      	beq.n	800caf4 <forward_lite_conv2d_sssa8_ch+0x970>
 800c9fc:	f000 fcfc 	bl	800d3f8 <st_int16_fill>
 800ca00:	3401      	adds	r4, #1
 800ca02:	44a8      	add	r8, r5
 800ca04:	44cb      	add	fp, r9
 800ca06:	42bc      	cmp	r4, r7
 800ca08:	d1f0      	bne.n	800c9ec <forward_lite_conv2d_sssa8_ch+0x868>
 800ca0a:	e7bf      	b.n	800c98c <forward_lite_conv2d_sssa8_ch+0x808>
 800ca0c:	3b01      	subs	r3, #1
 800ca0e:	934f      	str	r3, [sp, #316]	@ 0x13c
 800ca10:	f8bd 315c 	ldrh.w	r3, [sp, #348]	@ 0x15c
 800ca14:	2b01      	cmp	r3, #1
 800ca16:	f8ad 315e 	strh.w	r3, [sp, #350]	@ 0x15e
 800ca1a:	d083      	beq.n	800c924 <forward_lite_conv2d_sssa8_ch+0x7a0>
 800ca1c:	9b12      	ldr	r3, [sp, #72]	@ 0x48
 800ca1e:	9c18      	ldr	r4, [sp, #96]	@ 0x60
 800ca20:	2b00      	cmp	r3, #0
 800ca22:	d14b      	bne.n	800cabc <forward_lite_conv2d_sssa8_ch+0x938>
 800ca24:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 800ca26:	429c      	cmp	r4, r3
 800ca28:	dac0      	bge.n	800c9ac <forward_lite_conv2d_sssa8_ch+0x828>
 800ca2a:	970a      	str	r7, [sp, #40]	@ 0x28
 800ca2c:	461f      	mov	r7, r3
 800ca2e:	9e0f      	ldr	r6, [sp, #60]	@ 0x3c
 800ca30:	9d0b      	ldr	r5, [sp, #44]	@ 0x2c
 800ca32:	f8dd b04c 	ldr.w	fp, [sp, #76]	@ 0x4c
 800ca36:	f8dd 9070 	ldr.w	r9, [sp, #112]	@ 0x70
 800ca3a:	3401      	adds	r4, #1
 800ca3c:	4629      	mov	r1, r5
 800ca3e:	4630      	mov	r0, r6
 800ca40:	4642      	mov	r2, r8
 800ca42:	f000 fa7d 	bl	800cf40 <st_int8_to16_no_shift_interleaved>
 800ca46:	42bc      	cmp	r4, r7
 800ca48:	444d      	add	r5, r9
 800ca4a:	445e      	add	r6, fp
 800ca4c:	d1f5      	bne.n	800ca3a <forward_lite_conv2d_sssa8_ch+0x8b6>
 800ca4e:	9a1d      	ldr	r2, [sp, #116]	@ 0x74
 800ca50:	e9dd 730a 	ldrd	r7, r3, [sp, #40]	@ 0x28
 800ca54:	4413      	add	r3, r2
 800ca56:	930b      	str	r3, [sp, #44]	@ 0x2c
 800ca58:	9b1a      	ldr	r3, [sp, #104]	@ 0x68
 800ca5a:	9a0b      	ldr	r2, [sp, #44]	@ 0x2c
 800ca5c:	4293      	cmp	r3, r2
 800ca5e:	d1a9      	bne.n	800c9b4 <forward_lite_conv2d_sssa8_ch+0x830>
 800ca60:	9b1e      	ldr	r3, [sp, #120]	@ 0x78
 800ca62:	ee19 0a10 	vmov	r0, s18
 800ca66:	9a19      	ldr	r2, [sp, #100]	@ 0x64
 800ca68:	9308      	str	r3, [sp, #32]
 800ca6a:	9b22      	ldr	r3, [sp, #136]	@ 0x88
 800ca6c:	9c11      	ldr	r4, [sp, #68]	@ 0x44
 800ca6e:	9307      	str	r3, [sp, #28]
 800ca70:	9b29      	ldr	r3, [sp, #164]	@ 0xa4
 800ca72:	3401      	adds	r4, #1
 800ca74:	991b      	ldr	r1, [sp, #108]	@ 0x6c
 800ca76:	9306      	str	r3, [sp, #24]
 800ca78:	9b2a      	ldr	r3, [sp, #168]	@ 0xa8
 800ca7a:	9411      	str	r4, [sp, #68]	@ 0x44
 800ca7c:	9305      	str	r3, [sp, #20]
 800ca7e:	9b2e      	ldr	r3, [sp, #184]	@ 0xb8
 800ca80:	9304      	str	r3, [sp, #16]
 800ca82:	9b1f      	ldr	r3, [sp, #124]	@ 0x7c
 800ca84:	9303      	str	r3, [sp, #12]
 800ca86:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 800ca88:	9302      	str	r3, [sp, #8]
 800ca8a:	9b20      	ldr	r3, [sp, #128]	@ 0x80
 800ca8c:	9300      	str	r3, [sp, #0]
 800ca8e:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800ca90:	4413      	add	r3, r2
 800ca92:	9a16      	ldr	r2, [sp, #88]	@ 0x58
 800ca94:	930f      	str	r3, [sp, #60]	@ 0x3c
 800ca96:	4417      	add	r7, r2
 800ca98:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 800ca9a:	4413      	add	r3, r2
 800ca9c:	ee1a 2a10 	vmov	r2, s20
 800caa0:	930c      	str	r3, [sp, #48]	@ 0x30
 800caa2:	2300      	movs	r3, #0
 800caa4:	9301      	str	r3, [sp, #4]
 800caa6:	ee18 3a90 	vmov	r3, s17
 800caaa:	f001 fa97 	bl	800dfdc <st_sssa8_ch_nn_mat_mult_kernel_opt>
 800caae:	9b14      	ldr	r3, [sp, #80]	@ 0x50
 800cab0:	901e      	str	r0, [sp, #120]	@ 0x78
 800cab2:	42a3      	cmp	r3, r4
 800cab4:	d042      	beq.n	800cb3c <forward_lite_conv2d_sssa8_ch+0x9b8>
 800cab6:	9b1b      	ldr	r3, [sp, #108]	@ 0x6c
 800cab8:	930b      	str	r3, [sp, #44]	@ 0x2c
 800caba:	e78b      	b.n	800c9d4 <forward_lite_conv2d_sssa8_ch+0x850>
 800cabc:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 800cabe:	429c      	cmp	r4, r3
 800cac0:	f6bf af74 	bge.w	800c9ac <forward_lite_conv2d_sssa8_ch+0x828>
 800cac4:	970a      	str	r7, [sp, #40]	@ 0x28
 800cac6:	461f      	mov	r7, r3
 800cac8:	9e0f      	ldr	r6, [sp, #60]	@ 0x3c
 800caca:	9d0b      	ldr	r5, [sp, #44]	@ 0x2c
 800cacc:	f8dd b04c 	ldr.w	fp, [sp, #76]	@ 0x4c
 800cad0:	f8dd 9070 	ldr.w	r9, [sp, #112]	@ 0x70
 800cad4:	3401      	adds	r4, #1
 800cad6:	4629      	mov	r1, r5
 800cad8:	4630      	mov	r0, r6
 800cada:	4642      	mov	r2, r8
 800cadc:	f000 f9ce 	bl	800ce7c <st_int8_to16_no_shift>
 800cae0:	42bc      	cmp	r4, r7
 800cae2:	444d      	add	r5, r9
 800cae4:	445e      	add	r6, fp
 800cae6:	d1f5      	bne.n	800cad4 <forward_lite_conv2d_sssa8_ch+0x950>
 800cae8:	9a1d      	ldr	r2, [sp, #116]	@ 0x74
 800caea:	e9dd 730a 	ldrd	r7, r3, [sp, #40]	@ 0x28
 800caee:	4413      	add	r3, r2
 800caf0:	930b      	str	r3, [sp, #44]	@ 0x2c
 800caf2:	e7b1      	b.n	800ca58 <forward_lite_conv2d_sssa8_ch+0x8d4>
 800caf4:	4658      	mov	r0, fp
 800caf6:	f000 fa23 	bl	800cf40 <st_int8_to16_no_shift_interleaved>
 800cafa:	e781      	b.n	800ca00 <forward_lite_conv2d_sssa8_ch+0x87c>
 800cafc:	4658      	mov	r0, fp
 800cafe:	f000 f9bd 	bl	800ce7c <st_int8_to16_no_shift>
 800cb02:	e73e      	b.n	800c982 <forward_lite_conv2d_sssa8_ch+0x7fe>
 800cb04:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800cb06:	991b      	ldr	r1, [sp, #108]	@ 0x6c
 800cb08:	428b      	cmp	r3, r1
 800cb0a:	d017      	beq.n	800cb3c <forward_lite_conv2d_sssa8_ch+0x9b8>
 800cb0c:	9b1e      	ldr	r3, [sp, #120]	@ 0x78
 800cb0e:	ee1a 2a10 	vmov	r2, s20
 800cb12:	ee19 0a10 	vmov	r0, s18
 800cb16:	9307      	str	r3, [sp, #28]
 800cb18:	9b22      	ldr	r3, [sp, #136]	@ 0x88
 800cb1a:	9306      	str	r3, [sp, #24]
 800cb1c:	9b29      	ldr	r3, [sp, #164]	@ 0xa4
 800cb1e:	9305      	str	r3, [sp, #20]
 800cb20:	9b2a      	ldr	r3, [sp, #168]	@ 0xa8
 800cb22:	9304      	str	r3, [sp, #16]
 800cb24:	9b2e      	ldr	r3, [sp, #184]	@ 0xb8
 800cb26:	9303      	str	r3, [sp, #12]
 800cb28:	9b1f      	ldr	r3, [sp, #124]	@ 0x7c
 800cb2a:	9302      	str	r3, [sp, #8]
 800cb2c:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 800cb2e:	9301      	str	r3, [sp, #4]
 800cb30:	9b20      	ldr	r3, [sp, #128]	@ 0x80
 800cb32:	9300      	str	r3, [sp, #0]
 800cb34:	ee18 3a90 	vmov	r3, s17
 800cb38:	f001 f886 	bl	800dc48 <st_sssa8_ch_nn_mat_mult_kernel_single_opt>
 800cb3c:	9a23      	ldr	r2, [sp, #140]	@ 0x8c
 800cb3e:	9b32      	ldr	r3, [sp, #200]	@ 0xc8
 800cb40:	9928      	ldr	r1, [sp, #160]	@ 0xa0
 800cb42:	1a9b      	subs	r3, r3, r2
 800cb44:	4411      	add	r1, r2
 800cb46:	9128      	str	r1, [sp, #160]	@ 0xa0
 800cb48:	b299      	uxth	r1, r3
 800cb4a:	4613      	mov	r3, r2
 800cb4c:	428a      	cmp	r2, r1
 800cb4e:	9132      	str	r1, [sp, #200]	@ 0xc8
 800cb50:	bf28      	it	cs
 800cb52:	460b      	movcs	r3, r1
 800cb54:	b29b      	uxth	r3, r3
 800cb56:	2b00      	cmp	r3, #0
 800cb58:	d051      	beq.n	800cbfe <forward_lite_conv2d_sssa8_ch+0xa7a>
 800cb5a:	ee1a 4a10 	vmov	r4, s20
 800cb5e:	9836      	ldr	r0, [sp, #216]	@ 0xd8
 800cb60:	991f      	ldr	r1, [sp, #124]	@ 0x7c
 800cb62:	eb04 0482 	add.w	r4, r4, r2, lsl #2
 800cb66:	fb01 0002 	mla	r0, r1, r2, r0
 800cb6a:	ee0a 4a10 	vmov	s20, r4
 800cb6e:	9c2e      	ldr	r4, [sp, #184]	@ 0xb8
 800cb70:	9036      	str	r0, [sp, #216]	@ 0xd8
 800cb72:	eb04 0442 	add.w	r4, r4, r2, lsl #1
 800cb76:	942e      	str	r4, [sp, #184]	@ 0xb8
 800cb78:	9c2a      	ldr	r4, [sp, #168]	@ 0xa8
 800cb7a:	eb04 0482 	add.w	r4, r4, r2, lsl #2
 800cb7e:	942a      	str	r4, [sp, #168]	@ 0xa8
 800cb80:	9c29      	ldr	r4, [sp, #164]	@ 0xa4
 800cb82:	eb04 0282 	add.w	r2, r4, r2, lsl #2
 800cb86:	9229      	str	r2, [sp, #164]	@ 0xa4
 800cb88:	9a12      	ldr	r2, [sp, #72]	@ 0x48
 800cb8a:	2a00      	cmp	r2, #0
 800cb8c:	d139      	bne.n	800cc02 <forward_lite_conv2d_sssa8_ch+0xa7e>
 800cb8e:	460a      	mov	r2, r1
 800cb90:	ee19 1a10 	vmov	r1, s18
 800cb94:	9323      	str	r3, [sp, #140]	@ 0x8c
 800cb96:	f000 fb01 	bl	800d19c <st_int8_to16_dual_interleaved>
 800cb9a:	9b31      	ldr	r3, [sp, #196]	@ 0xc4
 800cb9c:	3b01      	subs	r3, #1
 800cb9e:	b29b      	uxth	r3, r3
 800cba0:	461a      	mov	r2, r3
 800cba2:	9331      	str	r3, [sp, #196]	@ 0xc4
 800cba4:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 800cba8:	429a      	cmp	r2, r3
 800cbaa:	f47f ae9d 	bne.w	800c8e8 <forward_lite_conv2d_sssa8_ch+0x764>
 800cbae:	4647      	mov	r7, r8
 800cbb0:	9a30      	ldr	r2, [sp, #192]	@ 0xc0
 800cbb2:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 800cbb4:	4413      	add	r3, r2
 800cbb6:	9310      	str	r3, [sp, #64]	@ 0x40
 800cbb8:	9b18      	ldr	r3, [sp, #96]	@ 0x60
 800cbba:	4413      	add	r3, r2
 800cbbc:	9a3e      	ldr	r2, [sp, #248]	@ 0xf8
 800cbbe:	9318      	str	r3, [sp, #96]	@ 0x60
 800cbc0:	9b35      	ldr	r3, [sp, #212]	@ 0xd4
 800cbc2:	4413      	add	r3, r2
 800cbc4:	9a40      	ldr	r2, [sp, #256]	@ 0x100
 800cbc6:	9335      	str	r3, [sp, #212]	@ 0xd4
 800cbc8:	9b3b      	ldr	r3, [sp, #236]	@ 0xec
 800cbca:	4413      	add	r3, r2
 800cbcc:	9a3f      	ldr	r2, [sp, #252]	@ 0xfc
 800cbce:	933b      	str	r3, [sp, #236]	@ 0xec
 800cbd0:	9b3c      	ldr	r3, [sp, #240]	@ 0xf0
 800cbd2:	4413      	add	r3, r2
 800cbd4:	9a3d      	ldr	r2, [sp, #244]	@ 0xf4
 800cbd6:	933c      	str	r3, [sp, #240]	@ 0xf0
 800cbd8:	9b38      	ldr	r3, [sp, #224]	@ 0xe0
 800cbda:	3301      	adds	r3, #1
 800cbdc:	9338      	str	r3, [sp, #224]	@ 0xe0
 800cbde:	9b2f      	ldr	r3, [sp, #188]	@ 0xbc
 800cbe0:	4293      	cmp	r3, r2
 800cbe2:	f77f ad05 	ble.w	800c5f0 <forward_lite_conv2d_sssa8_ch+0x46c>
 800cbe6:	a84e      	add	r0, sp, #312	@ 0x138
 800cbe8:	f000 fbec 	bl	800d3c4 <ai_padding_opt_phase1>
 800cbec:	9b27      	ldr	r3, [sp, #156]	@ 0x9c
 800cbee:	2b03      	cmp	r3, #3
 800cbf0:	f47f ae4a 	bne.w	800c888 <forward_lite_conv2d_sssa8_ch+0x704>
 800cbf4:	9b38      	ldr	r3, [sp, #224]	@ 0xe0
 800cbf6:	933d      	str	r3, [sp, #244]	@ 0xf4
 800cbf8:	9b3b      	ldr	r3, [sp, #236]	@ 0xec
 800cbfa:	9328      	str	r3, [sp, #160]	@ 0xa0
 800cbfc:	e648      	b.n	800c890 <forward_lite_conv2d_sssa8_ch+0x70c>
 800cbfe:	9323      	str	r3, [sp, #140]	@ 0x8c
 800cc00:	e7cb      	b.n	800cb9a <forward_lite_conv2d_sssa8_ch+0xa16>
 800cc02:	460a      	mov	r2, r1
 800cc04:	ee19 1a10 	vmov	r1, s18
 800cc08:	9323      	str	r3, [sp, #140]	@ 0x8c
 800cc0a:	f000 f9dd 	bl	800cfc8 <st_int8_to16_dual>
 800cc0e:	e7c4      	b.n	800cb9a <forward_lite_conv2d_sssa8_ch+0xa16>
 800cc10:	9b21      	ldr	r3, [sp, #132]	@ 0x84
 800cc12:	ee19 1a10 	vmov	r1, s18
 800cc16:	9a1f      	ldr	r2, [sp, #124]	@ 0x7c
 800cc18:	9872      	ldr	r0, [sp, #456]	@ 0x1c8
 800cc1a:	f000 f9d5 	bl	800cfc8 <st_int8_to16_dual>
 800cc1e:	e644      	b.n	800c8aa <forward_lite_conv2d_sssa8_ch+0x726>
 800cc20:	ee18 3a90 	vmov	r3, s17
 800cc24:	ee19 1a10 	vmov	r1, s18
 800cc28:	9872      	ldr	r0, [sp, #456]	@ 0x1c8
 800cc2a:	f000 f9cd 	bl	800cfc8 <st_int8_to16_dual>
 800cc2e:	f7ff bb86 	b.w	800c33e <forward_lite_conv2d_sssa8_ch+0x1ba>
 800cc32:	bf00      	nop

0800cc34 <forward_lite_maxpool_is8os8_scaleneg>:
 800cc34:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800cc38:	b095      	sub	sp, #84	@ 0x54
 800cc3a:	4614      	mov	r4, r2
 800cc3c:	e9cd 010a 	strd	r0, r1, [sp, #40]	@ 0x28
 800cc40:	f8bd 107c 	ldrh.w	r1, [sp, #124]	@ 0x7c
 800cc44:	f99d 009c 	ldrsb.w	r0, [sp, #156]	@ 0x9c
 800cc48:	910d      	str	r1, [sp, #52]	@ 0x34
 800cc4a:	f8bd 1080 	ldrh.w	r1, [sp, #128]	@ 0x80
 800cc4e:	930c      	str	r3, [sp, #48]	@ 0x30
 800cc50:	910e      	str	r1, [sp, #56]	@ 0x38
 800cc52:	f8bd 1084 	ldrh.w	r1, [sp, #132]	@ 0x84
 800cc56:	f8bd 3098 	ldrh.w	r3, [sp, #152]	@ 0x98
 800cc5a:	910f      	str	r1, [sp, #60]	@ 0x3c
 800cc5c:	f8bd 1088 	ldrh.w	r1, [sp, #136]	@ 0x88
 800cc60:	9206      	str	r2, [sp, #24]
 800cc62:	9110      	str	r1, [sp, #64]	@ 0x40
 800cc64:	f8bd 108c 	ldrh.w	r1, [sp, #140]	@ 0x8c
 800cc68:	f8bd a078 	ldrh.w	sl, [sp, #120]	@ 0x78
 800cc6c:	9111      	str	r1, [sp, #68]	@ 0x44
 800cc6e:	f8bd 1090 	ldrh.w	r1, [sp, #144]	@ 0x90
 800cc72:	f99d 20a0 	ldrsb.w	r2, [sp, #160]	@ 0xa0
 800cc76:	9112      	str	r1, [sp, #72]	@ 0x48
 800cc78:	f8bd 1094 	ldrh.w	r1, [sp, #148]	@ 0x94
 800cc7c:	9313      	str	r3, [sp, #76]	@ 0x4c
 800cc7e:	9107      	str	r1, [sp, #28]
 800cc80:	9003      	str	r0, [sp, #12]
 800cc82:	2b00      	cmp	r3, #0
 800cc84:	f000 8093 	beq.w	800cdae <forward_lite_maxpool_is8os8_scaleneg+0x17a>
 800cc88:	eef7 7a00 	vmov.f32	s15, #112	@ 0x3f800000  1.0
 800cc8c:	eeb4 0a67 	vcmp.f32	s0, s15
 800cc90:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800cc94:	bf0c      	ite	eq
 800cc96:	2301      	moveq	r3, #1
 800cc98:	2300      	movne	r3, #0
 800cc9a:	4290      	cmp	r0, r2
 800cc9c:	bf14      	ite	ne
 800cc9e:	2300      	movne	r3, #0
 800cca0:	f003 0301 	andeq.w	r3, r3, #1
 800cca4:	9301      	str	r3, [sp, #4]
 800cca6:	2900      	cmp	r1, #0
 800cca8:	f000 8081 	beq.w	800cdae <forward_lite_maxpool_is8os8_scaleneg+0x17a>
 800ccac:	f1ba 0f00 	cmp.w	sl, #0
 800ccb0:	d07d      	beq.n	800cdae <forward_lite_maxpool_is8os8_scaleneg+0x17a>
 800ccb2:	ee07 2a90 	vmov	s15, r2
 800ccb6:	2300      	movs	r3, #0
 800ccb8:	ed9f 6a4d 	vldr	s12, [pc, #308]	@ 800cdf0 <forward_lite_maxpool_is8os8_scaleneg+0x1bc>
 800ccbc:	fb04 fb0a 	mul.w	fp, r4, sl
 800ccc0:	eef8 6ae7 	vcvt.f32.s32	s13, s15
 800ccc4:	9304      	str	r3, [sp, #16]
 800ccc6:	9b04      	ldr	r3, [sp, #16]
 800ccc8:	eef6 5a00 	vmov.f32	s11, #96	@ 0x3f000000  0.5
 800cccc:	9907      	ldr	r1, [sp, #28]
 800ccce:	9a12      	ldr	r2, [sp, #72]	@ 0x48
 800ccd0:	fb03 f202 	mul.w	r2, r3, r2
 800ccd4:	fb03 f301 	mul.w	r3, r3, r1
 800ccd8:	9910      	ldr	r1, [sp, #64]	@ 0x40
 800ccda:	9308      	str	r3, [sp, #32]
 800ccdc:	2300      	movs	r3, #0
 800ccde:	9305      	str	r3, [sp, #20]
 800cce0:	1a53      	subs	r3, r2, r1
 800cce2:	1a8a      	subs	r2, r1, r2
 800cce4:	990c      	ldr	r1, [sp, #48]	@ 0x30
 800cce6:	2b00      	cmp	r3, #0
 800cce8:	eb02 0c01 	add.w	ip, r2, r1
 800ccec:	bfd8      	it	le
 800ccee:	4691      	movle	r9, r2
 800ccf0:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 800ccf2:	bfc8      	it	gt
 800ccf4:	f04f 0900 	movgt.w	r9, #0
 800ccf8:	4594      	cmp	ip, r2
 800ccfa:	444b      	add	r3, r9
 800ccfc:	bfa8      	it	ge
 800ccfe:	4694      	movge	ip, r2
 800cd00:	9a06      	ldr	r2, [sp, #24]
 800cd02:	fb02 f303 	mul.w	r3, r2, r3
 800cd06:	9309      	str	r3, [sp, #36]	@ 0x24
 800cd08:	9a05      	ldr	r2, [sp, #20]
 800cd0a:	f04f 0e00 	mov.w	lr, #0
 800cd0e:	9908      	ldr	r1, [sp, #32]
 800cd10:	9b11      	ldr	r3, [sp, #68]	@ 0x44
 800cd12:	eb02 0801 	add.w	r8, r2, r1
 800cd16:	990f      	ldr	r1, [sp, #60]	@ 0x3c
 800cd18:	fb03 f302 	mul.w	r3, r3, r2
 800cd1c:	9a0b      	ldr	r2, [sp, #44]	@ 0x2c
 800cd1e:	9c0d      	ldr	r4, [sp, #52]	@ 0x34
 800cd20:	fb0a 2808 	mla	r8, sl, r8, r2
 800cd24:	1a5a      	subs	r2, r3, r1
 800cd26:	1acb      	subs	r3, r1, r3
 800cd28:	9906      	ldr	r1, [sp, #24]
 800cd2a:	2a00      	cmp	r2, #0
 800cd2c:	bfd8      	it	le
 800cd2e:	461f      	movle	r7, r3
 800cd30:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800cd32:	bfc8      	it	gt
 800cd34:	2700      	movgt	r7, #0
 800cd36:	18d3      	adds	r3, r2, r3
 800cd38:	1a8a      	subs	r2, r1, r2
 800cd3a:	4294      	cmp	r4, r2
 800cd3c:	443b      	add	r3, r7
 800cd3e:	bfa8      	it	ge
 800cd40:	4614      	movge	r4, r2
 800cd42:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 800cd44:	fb0a 2303 	mla	r3, sl, r3, r2
 800cd48:	9302      	str	r3, [sp, #8]
 800cd4a:	45e1      	cmp	r9, ip
 800cd4c:	da4d      	bge.n	800cdea <forward_lite_maxpool_is8os8_scaleneg+0x1b6>
 800cd4e:	9b02      	ldr	r3, [sp, #8]
 800cd50:	464d      	mov	r5, r9
 800cd52:	217f      	movs	r1, #127	@ 0x7f
 800cd54:	eb03 060e 	add.w	r6, r3, lr
 800cd58:	42a7      	cmp	r7, r4
 800cd5a:	da0a      	bge.n	800cd72 <forward_lite_maxpool_is8os8_scaleneg+0x13e>
 800cd5c:	4632      	mov	r2, r6
 800cd5e:	463b      	mov	r3, r7
 800cd60:	f992 0000 	ldrsb.w	r0, [r2]
 800cd64:	3301      	adds	r3, #1
 800cd66:	4452      	add	r2, sl
 800cd68:	4281      	cmp	r1, r0
 800cd6a:	bfa8      	it	ge
 800cd6c:	4601      	movge	r1, r0
 800cd6e:	429c      	cmp	r4, r3
 800cd70:	d1f6      	bne.n	800cd60 <forward_lite_maxpool_is8os8_scaleneg+0x12c>
 800cd72:	3501      	adds	r5, #1
 800cd74:	445e      	add	r6, fp
 800cd76:	45ac      	cmp	ip, r5
 800cd78:	d1ee      	bne.n	800cd58 <forward_lite_maxpool_is8os8_scaleneg+0x124>
 800cd7a:	9b01      	ldr	r3, [sp, #4]
 800cd7c:	b1d3      	cbz	r3, 800cdb4 <forward_lite_maxpool_is8os8_scaleneg+0x180>
 800cd7e:	f888 1000 	strb.w	r1, [r8]
 800cd82:	f10e 0e01 	add.w	lr, lr, #1
 800cd86:	f108 0801 	add.w	r8, r8, #1
 800cd8a:	fa1f f38e 	uxth.w	r3, lr
 800cd8e:	459a      	cmp	sl, r3
 800cd90:	d8db      	bhi.n	800cd4a <forward_lite_maxpool_is8os8_scaleneg+0x116>
 800cd92:	9b05      	ldr	r3, [sp, #20]
 800cd94:	9a07      	ldr	r2, [sp, #28]
 800cd96:	3301      	adds	r3, #1
 800cd98:	b29b      	uxth	r3, r3
 800cd9a:	429a      	cmp	r2, r3
 800cd9c:	9305      	str	r3, [sp, #20]
 800cd9e:	d8b3      	bhi.n	800cd08 <forward_lite_maxpool_is8os8_scaleneg+0xd4>
 800cda0:	9b04      	ldr	r3, [sp, #16]
 800cda2:	9a13      	ldr	r2, [sp, #76]	@ 0x4c
 800cda4:	3301      	adds	r3, #1
 800cda6:	b29b      	uxth	r3, r3
 800cda8:	429a      	cmp	r2, r3
 800cdaa:	9304      	str	r3, [sp, #16]
 800cdac:	d88b      	bhi.n	800ccc6 <forward_lite_maxpool_is8os8_scaleneg+0x92>
 800cdae:	b015      	add	sp, #84	@ 0x54
 800cdb0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800cdb4:	9b03      	ldr	r3, [sp, #12]
 800cdb6:	eeb0 7a66 	vmov.f32	s14, s13
 800cdba:	1ac9      	subs	r1, r1, r3
 800cdbc:	ee07 1a90 	vmov	s15, r1
 800cdc0:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800cdc4:	eea7 7a80 	vfma.f32	s14, s15, s0
 800cdc8:	eeb5 7ac0 	vcmpe.f32	s14, #0.0
 800cdcc:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800cdd0:	fe65 7a86 	vselge.f32	s15, s11, s12
 800cdd4:	ee77 7a87 	vadd.f32	s15, s15, s14
 800cdd8:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800cddc:	ee17 3a90 	vmov	r3, s15
 800cde0:	f303 0307 	ssat	r3, #8, r3
 800cde4:	f888 3000 	strb.w	r3, [r8]
 800cde8:	e7cb      	b.n	800cd82 <forward_lite_maxpool_is8os8_scaleneg+0x14e>
 800cdea:	217f      	movs	r1, #127	@ 0x7f
 800cdec:	e7c5      	b.n	800cd7a <forward_lite_maxpool_is8os8_scaleneg+0x146>
 800cdee:	bf00      	nop
 800cdf0:	befffffc 	.word	0xbefffffc

0800cdf4 <forward_lite_nl_softmax_is8os8>:
 800cdf4:	fbb2 f2f3 	udiv	r2, r2, r3
 800cdf8:	b410      	push	{r4}
 800cdfa:	9c01      	ldr	r4, [sp, #4]
 800cdfc:	fbb2 f2f4 	udiv	r2, r2, r4
 800ce00:	f85d 4b04 	ldr.w	r4, [sp], #4
 800ce04:	f001 bb86 	b.w	800e514 <_lite_kernel_nl_softmax_is8os8>

0800ce08 <forward_lite_nl_softmax_iu8ou8>:
 800ce08:	fbb2 f2f3 	udiv	r2, r2, r3
 800ce0c:	b410      	push	{r4}
 800ce0e:	9c01      	ldr	r4, [sp, #4]
 800ce10:	fbb2 f2f4 	udiv	r2, r2, r4
 800ce14:	f85d 4b04 	ldr.w	r4, [sp], #4
 800ce18:	f002 b92e 	b.w	800f078 <_lite_kernel_nl_softmax_iu8ou8>

0800ce1c <align_factor_ch>:
 800ce1c:	b361      	cbz	r1, 800ce78 <align_factor_ch+0x5c>
 800ce1e:	ee80 7a20 	vdiv.f32	s14, s0, s1
 800ce22:	eb00 0181 	add.w	r1, r0, r1, lsl #2
 800ce26:	b570      	push	{r4, r5, r6, lr}
 800ce28:	1e9d      	subs	r5, r3, #2
 800ce2a:	1f14      	subs	r4, r2, #4
 800ce2c:	2600      	movs	r6, #0
 800ce2e:	ecf0 7a01 	vldmia	r0!, {s15}
 800ce32:	ee67 7a27 	vmul.f32	s15, s14, s15
 800ce36:	ee17 ea90 	vmov	lr, s15
 800ce3a:	f3ce 52c7 	ubfx	r2, lr, #23, #8
 800ce3e:	f3ce 0c16 	ubfx	ip, lr, #0, #23
 800ce42:	f1be 0f00 	cmp.w	lr, #0
 800ce46:	f50c 0c00 	add.w	ip, ip, #8388608	@ 0x800000
 800ce4a:	f1c2 027e 	rsb	r2, r2, #126	@ 0x7e
 800ce4e:	bfb8      	it	lt
 800ce50:	f1cc 0c00 	rsblt	ip, ip, #0
 800ce54:	2a1f      	cmp	r2, #31
 800ce56:	ea4f 13cc 	mov.w	r3, ip, lsl #7
 800ce5a:	dc06      	bgt.n	800ce6a <align_factor_ch+0x4e>
 800ce5c:	4281      	cmp	r1, r0
 800ce5e:	f825 2f02 	strh.w	r2, [r5, #2]!
 800ce62:	f844 3f04 	str.w	r3, [r4, #4]!
 800ce66:	d1e2      	bne.n	800ce2e <align_factor_ch+0x12>
 800ce68:	bd70      	pop	{r4, r5, r6, pc}
 800ce6a:	4281      	cmp	r1, r0
 800ce6c:	f825 6f02 	strh.w	r6, [r5, #2]!
 800ce70:	f844 6f04 	str.w	r6, [r4, #4]!
 800ce74:	d1db      	bne.n	800ce2e <align_factor_ch+0x12>
 800ce76:	bd70      	pop	{r4, r5, r6, pc}
 800ce78:	4770      	bx	lr
 800ce7a:	bf00      	nop

0800ce7c <st_int8_to16_no_shift>:
 800ce7c:	b570      	push	{r4, r5, r6, lr}
 800ce7e:	f1b2 0410 	subs.w	r4, r2, #16
 800ce82:	f04f 0e00 	mov.w	lr, #0
 800ce86:	d438      	bmi.n	800cefa <st_int8_to16_no_shift+0x7e>
 800ce88:	f8d0 c000 	ldr.w	ip, [r0]
 800ce8c:	6843      	ldr	r3, [r0, #4]
 800ce8e:	fa2f f59c 	sxtb16	r5, ip, ror #8
 800ce92:	fa2f fc8c 	sxtb16	ip, ip
 800ce96:	eac5 462c 	pkhtb	r6, r5, ip, asr #16
 800ce9a:	eacc 4c05 	pkhbt	ip, ip, r5, lsl #16
 800ce9e:	fa2f f593 	sxtb16	r5, r3, ror #8
 800cea2:	3010      	adds	r0, #16
 800cea4:	604e      	str	r6, [r1, #4]
 800cea6:	f8c1 c000 	str.w	ip, [r1]
 800ceaa:	fa2f f383 	sxtb16	r3, r3
 800ceae:	eac5 4623 	pkhtb	r6, r5, r3, asr #16
 800ceb2:	eac3 4305 	pkhbt	r3, r3, r5, lsl #16
 800ceb6:	60ce      	str	r6, [r1, #12]
 800ceb8:	608b      	str	r3, [r1, #8]
 800ceba:	f850 cc08 	ldr.w	ip, [r0, #-8]
 800cebe:	f850 3c04 	ldr.w	r3, [r0, #-4]
 800cec2:	fa2f f59c 	sxtb16	r5, ip, ror #8
 800cec6:	fa2f fc8c 	sxtb16	ip, ip
 800ceca:	eac5 462c 	pkhtb	r6, r5, ip, asr #16
 800cece:	eacc 4c05 	pkhbt	ip, ip, r5, lsl #16
 800ced2:	fa2f f593 	sxtb16	r5, r3, ror #8
 800ced6:	f10e 0e10 	add.w	lr, lr, #16
 800ceda:	f8c1 c010 	str.w	ip, [r1, #16]
 800cede:	614e      	str	r6, [r1, #20]
 800cee0:	3120      	adds	r1, #32
 800cee2:	45a6      	cmp	lr, r4
 800cee4:	fa2f f383 	sxtb16	r3, r3
 800cee8:	eac5 4c23 	pkhtb	ip, r5, r3, asr #16
 800ceec:	eac3 4305 	pkhbt	r3, r3, r5, lsl #16
 800cef0:	f841 cc04 	str.w	ip, [r1, #-4]
 800cef4:	f841 3c08 	str.w	r3, [r1, #-8]
 800cef8:	ddc6      	ble.n	800ce88 <st_int8_to16_no_shift+0xc>
 800cefa:	1f16      	subs	r6, r2, #4
 800cefc:	4576      	cmp	r6, lr
 800cefe:	db12      	blt.n	800cf26 <st_int8_to16_no_shift+0xaa>
 800cf00:	f850 3b04 	ldr.w	r3, [r0], #4
 800cf04:	fa2f f493 	sxtb16	r4, r3, ror #8
 800cf08:	f10e 0e04 	add.w	lr, lr, #4
 800cf0c:	3108      	adds	r1, #8
 800cf0e:	fa2f f383 	sxtb16	r3, r3
 800cf12:	45b6      	cmp	lr, r6
 800cf14:	eac4 4523 	pkhtb	r5, r4, r3, asr #16
 800cf18:	eac3 4304 	pkhbt	r3, r3, r4, lsl #16
 800cf1c:	f841 5c04 	str.w	r5, [r1, #-4]
 800cf20:	f841 3c08 	str.w	r3, [r1, #-8]
 800cf24:	ddec      	ble.n	800cf00 <st_int8_to16_no_shift+0x84>
 800cf26:	4572      	cmp	r2, lr
 800cf28:	dd08      	ble.n	800cf3c <st_int8_to16_no_shift+0xc0>
 800cf2a:	eba2 020e 	sub.w	r2, r2, lr
 800cf2e:	4402      	add	r2, r0
 800cf30:	f910 3b01 	ldrsb.w	r3, [r0], #1
 800cf34:	4290      	cmp	r0, r2
 800cf36:	f821 3b02 	strh.w	r3, [r1], #2
 800cf3a:	d1f9      	bne.n	800cf30 <st_int8_to16_no_shift+0xb4>
 800cf3c:	bd70      	pop	{r4, r5, r6, pc}
 800cf3e:	bf00      	nop

0800cf40 <st_int8_to16_no_shift_interleaved>:
 800cf40:	b570      	push	{r4, r5, r6, lr}
 800cf42:	f1b2 0510 	subs.w	r5, r2, #16
 800cf46:	f04f 0e00 	mov.w	lr, #0
 800cf4a:	d428      	bmi.n	800cf9e <st_int8_to16_no_shift_interleaved+0x5e>
 800cf4c:	f8d0 c000 	ldr.w	ip, [r0]
 800cf50:	6843      	ldr	r3, [r0, #4]
 800cf52:	fa2f f69c 	sxtb16	r6, ip, ror #8
 800cf56:	fa2f fc8c 	sxtb16	ip, ip
 800cf5a:	fa2f f493 	sxtb16	r4, r3, ror #8
 800cf5e:	3010      	adds	r0, #16
 800cf60:	600e      	str	r6, [r1, #0]
 800cf62:	f8c1 c004 	str.w	ip, [r1, #4]
 800cf66:	608c      	str	r4, [r1, #8]
 800cf68:	fa2f f383 	sxtb16	r3, r3
 800cf6c:	60cb      	str	r3, [r1, #12]
 800cf6e:	f850 cc08 	ldr.w	ip, [r0, #-8]
 800cf72:	f850 3c04 	ldr.w	r3, [r0, #-4]
 800cf76:	fa2f f69c 	sxtb16	r6, ip, ror #8
 800cf7a:	fa2f fc8c 	sxtb16	ip, ip
 800cf7e:	fa2f f493 	sxtb16	r4, r3, ror #8
 800cf82:	f10e 0e10 	add.w	lr, lr, #16
 800cf86:	610e      	str	r6, [r1, #16]
 800cf88:	f8c1 c014 	str.w	ip, [r1, #20]
 800cf8c:	3120      	adds	r1, #32
 800cf8e:	45ae      	cmp	lr, r5
 800cf90:	f841 4c08 	str.w	r4, [r1, #-8]
 800cf94:	fa2f f383 	sxtb16	r3, r3
 800cf98:	f841 3c04 	str.w	r3, [r1, #-4]
 800cf9c:	ddd6      	ble.n	800cf4c <st_int8_to16_no_shift_interleaved+0xc>
 800cf9e:	3a04      	subs	r2, #4
 800cfa0:	4572      	cmp	r2, lr
 800cfa2:	db0f      	blt.n	800cfc4 <st_int8_to16_no_shift_interleaved+0x84>
 800cfa4:	ebae 0e00 	sub.w	lr, lr, r0
 800cfa8:	f850 3b04 	ldr.w	r3, [r0], #4
 800cfac:	fa2f f493 	sxtb16	r4, r3, ror #8
 800cfb0:	eb00 0c0e 	add.w	ip, r0, lr
 800cfb4:	600c      	str	r4, [r1, #0]
 800cfb6:	3108      	adds	r1, #8
 800cfb8:	4562      	cmp	r2, ip
 800cfba:	fa2f f383 	sxtb16	r3, r3
 800cfbe:	f841 3c04 	str.w	r3, [r1, #-4]
 800cfc2:	daf1      	bge.n	800cfa8 <st_int8_to16_no_shift_interleaved+0x68>
 800cfc4:	bd70      	pop	{r4, r5, r6, pc}
 800cfc6:	bf00      	nop

0800cfc8 <st_int8_to16_dual>:
 800cfc8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800cfcc:	4698      	mov	r8, r3
 800cfce:	085b      	lsrs	r3, r3, #1
 800cfd0:	eb00 0c02 	add.w	ip, r0, r2
 800cfd4:	f000 80b9 	beq.w	800d14a <st_int8_to16_dual+0x182>
 800cfd8:	f1a2 0710 	sub.w	r7, r2, #16
 800cfdc:	1f16      	subs	r6, r2, #4
 800cfde:	2f00      	cmp	r7, #0
 800cfe0:	f04f 0500 	mov.w	r5, #0
 800cfe4:	db73      	blt.n	800d0ce <st_int8_to16_dual+0x106>
 800cfe6:	f8d0 e000 	ldr.w	lr, [r0]
 800cfea:	f8dc 4000 	ldr.w	r4, [ip]
 800cfee:	fa2f f99e 	sxtb16	r9, lr, ror #8
 800cff2:	fa2f fe8e 	sxtb16	lr, lr
 800cff6:	eac9 4a2e 	pkhtb	sl, r9, lr, asr #16
 800cffa:	eace 4e09 	pkhbt	lr, lr, r9, lsl #16
 800cffe:	fa2f f994 	sxtb16	r9, r4, ror #8
 800d002:	f8c1 e000 	str.w	lr, [r1]
 800d006:	f8c1 a008 	str.w	sl, [r1, #8]
 800d00a:	fa2f f484 	sxtb16	r4, r4
 800d00e:	eac9 4e24 	pkhtb	lr, r9, r4, asr #16
 800d012:	eac4 4409 	pkhbt	r4, r4, r9, lsl #16
 800d016:	f8c1 e00c 	str.w	lr, [r1, #12]
 800d01a:	604c      	str	r4, [r1, #4]
 800d01c:	f8d0 e004 	ldr.w	lr, [r0, #4]
 800d020:	f8dc 4004 	ldr.w	r4, [ip, #4]
 800d024:	fa2f f99e 	sxtb16	r9, lr, ror #8
 800d028:	fa2f fe8e 	sxtb16	lr, lr
 800d02c:	eac9 4a2e 	pkhtb	sl, r9, lr, asr #16
 800d030:	eace 4e09 	pkhbt	lr, lr, r9, lsl #16
 800d034:	fa2f f994 	sxtb16	r9, r4, ror #8
 800d038:	f8c1 e010 	str.w	lr, [r1, #16]
 800d03c:	f8c1 a018 	str.w	sl, [r1, #24]
 800d040:	fa2f f484 	sxtb16	r4, r4
 800d044:	eac9 4e24 	pkhtb	lr, r9, r4, asr #16
 800d048:	eac4 4409 	pkhbt	r4, r4, r9, lsl #16
 800d04c:	f8c1 e01c 	str.w	lr, [r1, #28]
 800d050:	614c      	str	r4, [r1, #20]
 800d052:	f8d0 e008 	ldr.w	lr, [r0, #8]
 800d056:	f8dc 4008 	ldr.w	r4, [ip, #8]
 800d05a:	fa2f f99e 	sxtb16	r9, lr, ror #8
 800d05e:	fa2f fe8e 	sxtb16	lr, lr
 800d062:	eac9 4a2e 	pkhtb	sl, r9, lr, asr #16
 800d066:	eace 4e09 	pkhbt	lr, lr, r9, lsl #16
 800d06a:	fa2f f994 	sxtb16	r9, r4, ror #8
 800d06e:	3010      	adds	r0, #16
 800d070:	f10c 0c10 	add.w	ip, ip, #16
 800d074:	f8c1 e020 	str.w	lr, [r1, #32]
 800d078:	f8c1 a028 	str.w	sl, [r1, #40]	@ 0x28
 800d07c:	fa2f f484 	sxtb16	r4, r4
 800d080:	eac9 4e24 	pkhtb	lr, r9, r4, asr #16
 800d084:	eac4 4409 	pkhbt	r4, r4, r9, lsl #16
 800d088:	f8c1 e02c 	str.w	lr, [r1, #44]	@ 0x2c
 800d08c:	624c      	str	r4, [r1, #36]	@ 0x24
 800d08e:	f850 ec04 	ldr.w	lr, [r0, #-4]
 800d092:	f85c 4c04 	ldr.w	r4, [ip, #-4]
 800d096:	fa2f fa9e 	sxtb16	sl, lr, ror #8
 800d09a:	fa2f fe8e 	sxtb16	lr, lr
 800d09e:	eaca 492e 	pkhtb	r9, sl, lr, asr #16
 800d0a2:	eace 4e0a 	pkhbt	lr, lr, sl, lsl #16
 800d0a6:	fa2f fa94 	sxtb16	sl, r4, ror #8
 800d0aa:	3510      	adds	r5, #16
 800d0ac:	f8c1 e030 	str.w	lr, [r1, #48]	@ 0x30
 800d0b0:	f8c1 9038 	str.w	r9, [r1, #56]	@ 0x38
 800d0b4:	3140      	adds	r1, #64	@ 0x40
 800d0b6:	42bd      	cmp	r5, r7
 800d0b8:	fa2f f484 	sxtb16	r4, r4
 800d0bc:	eaca 4e24 	pkhtb	lr, sl, r4, asr #16
 800d0c0:	eac4 440a 	pkhbt	r4, r4, sl, lsl #16
 800d0c4:	f841 ec04 	str.w	lr, [r1, #-4]
 800d0c8:	f841 4c0c 	str.w	r4, [r1, #-12]
 800d0cc:	dd8b      	ble.n	800cfe6 <st_int8_to16_dual+0x1e>
 800d0ce:	42ae      	cmp	r6, r5
 800d0d0:	db1e      	blt.n	800d110 <st_int8_to16_dual+0x148>
 800d0d2:	f850 4b04 	ldr.w	r4, [r0], #4
 800d0d6:	f85c eb04 	ldr.w	lr, [ip], #4
 800d0da:	fa2f fa94 	sxtb16	sl, r4, ror #8
 800d0de:	fa2f f484 	sxtb16	r4, r4
 800d0e2:	eaca 4924 	pkhtb	r9, sl, r4, asr #16
 800d0e6:	eac4 440a 	pkhbt	r4, r4, sl, lsl #16
 800d0ea:	fa2f fa9e 	sxtb16	sl, lr, ror #8
 800d0ee:	3504      	adds	r5, #4
 800d0f0:	600c      	str	r4, [r1, #0]
 800d0f2:	f8c1 9008 	str.w	r9, [r1, #8]
 800d0f6:	3110      	adds	r1, #16
 800d0f8:	42b5      	cmp	r5, r6
 800d0fa:	fa2f fe8e 	sxtb16	lr, lr
 800d0fe:	eaca 442e 	pkhtb	r4, sl, lr, asr #16
 800d102:	eace 4e0a 	pkhbt	lr, lr, sl, lsl #16
 800d106:	f841 4c04 	str.w	r4, [r1, #-4]
 800d10a:	f841 ec0c 	str.w	lr, [r1, #-12]
 800d10e:	dde0      	ble.n	800d0d2 <st_int8_to16_dual+0x10a>
 800d110:	42aa      	cmp	r2, r5
 800d112:	dd40      	ble.n	800d196 <st_int8_to16_dual+0x1ce>
 800d114:	1b55      	subs	r5, r2, r5
 800d116:	1d0c      	adds	r4, r1, #4
 800d118:	46e6      	mov	lr, ip
 800d11a:	eb00 0a05 	add.w	sl, r0, r5
 800d11e:	f910 9b01 	ldrsb.w	r9, [r0], #1
 800d122:	3404      	adds	r4, #4
 800d124:	f824 9c08 	strh.w	r9, [r4, #-8]
 800d128:	4550      	cmp	r0, sl
 800d12a:	f91e 9b01 	ldrsb.w	r9, [lr], #1
 800d12e:	f824 9c06 	strh.w	r9, [r4, #-6]
 800d132:	d1f4      	bne.n	800d11e <st_int8_to16_dual+0x156>
 800d134:	44ac      	add	ip, r5
 800d136:	eb01 0185 	add.w	r1, r1, r5, lsl #2
 800d13a:	3b01      	subs	r3, #1
 800d13c:	eb0a 0002 	add.w	r0, sl, r2
 800d140:	4494      	add	ip, r2
 800d142:	b29b      	uxth	r3, r3
 800d144:	2b00      	cmp	r3, #0
 800d146:	f47f af4a 	bne.w	800cfde <st_int8_to16_dual+0x16>
 800d14a:	f018 0f01 	tst.w	r8, #1
 800d14e:	d020      	beq.n	800d192 <st_int8_to16_dual+0x1ca>
 800d150:	1f17      	subs	r7, r2, #4
 800d152:	f04f 0400 	mov.w	r4, #0
 800d156:	d411      	bmi.n	800d17c <st_int8_to16_dual+0x1b4>
 800d158:	f850 3b04 	ldr.w	r3, [r0], #4
 800d15c:	fa2f f593 	sxtb16	r5, r3, ror #8
 800d160:	3404      	adds	r4, #4
 800d162:	3108      	adds	r1, #8
 800d164:	fa2f f383 	sxtb16	r3, r3
 800d168:	42a7      	cmp	r7, r4
 800d16a:	eac5 4623 	pkhtb	r6, r5, r3, asr #16
 800d16e:	eac3 4305 	pkhbt	r3, r3, r5, lsl #16
 800d172:	f841 6c04 	str.w	r6, [r1, #-4]
 800d176:	f841 3c08 	str.w	r3, [r1, #-8]
 800d17a:	daed      	bge.n	800d158 <st_int8_to16_dual+0x190>
 800d17c:	42a2      	cmp	r2, r4
 800d17e:	dd08      	ble.n	800d192 <st_int8_to16_dual+0x1ca>
 800d180:	1b13      	subs	r3, r2, r4
 800d182:	eb01 0343 	add.w	r3, r1, r3, lsl #1
 800d186:	f910 2b01 	ldrsb.w	r2, [r0], #1
 800d18a:	f821 2b02 	strh.w	r2, [r1], #2
 800d18e:	428b      	cmp	r3, r1
 800d190:	d1f9      	bne.n	800d186 <st_int8_to16_dual+0x1be>
 800d192:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800d196:	4682      	mov	sl, r0
 800d198:	e7cf      	b.n	800d13a <st_int8_to16_dual+0x172>
 800d19a:	bf00      	nop

0800d19c <st_int8_to16_dual_interleaved>:
 800d19c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800d1a0:	4698      	mov	r8, r3
 800d1a2:	085b      	lsrs	r3, r3, #1
 800d1a4:	eb00 0c02 	add.w	ip, r0, r2
 800d1a8:	f000 808f 	beq.w	800d2ca <st_int8_to16_dual_interleaved+0x12e>
 800d1ac:	f1a2 0710 	sub.w	r7, r2, #16
 800d1b0:	1f16      	subs	r6, r2, #4
 800d1b2:	2f00      	cmp	r7, #0
 800d1b4:	f04f 0e00 	mov.w	lr, #0
 800d1b8:	db4e      	blt.n	800d258 <st_int8_to16_dual_interleaved+0xbc>
 800d1ba:	6805      	ldr	r5, [r0, #0]
 800d1bc:	f8dc 4000 	ldr.w	r4, [ip]
 800d1c0:	fa2f fa95 	sxtb16	sl, r5, ror #8
 800d1c4:	fa2f f585 	sxtb16	r5, r5
 800d1c8:	fa2f f994 	sxtb16	r9, r4, ror #8
 800d1cc:	f8c1 a000 	str.w	sl, [r1]
 800d1d0:	f8c1 9004 	str.w	r9, [r1, #4]
 800d1d4:	608d      	str	r5, [r1, #8]
 800d1d6:	fa2f f484 	sxtb16	r4, r4
 800d1da:	60cc      	str	r4, [r1, #12]
 800d1dc:	6845      	ldr	r5, [r0, #4]
 800d1de:	f8dc 4004 	ldr.w	r4, [ip, #4]
 800d1e2:	fa2f fa95 	sxtb16	sl, r5, ror #8
 800d1e6:	fa2f f585 	sxtb16	r5, r5
 800d1ea:	fa2f f994 	sxtb16	r9, r4, ror #8
 800d1ee:	f8c1 a010 	str.w	sl, [r1, #16]
 800d1f2:	f8c1 9014 	str.w	r9, [r1, #20]
 800d1f6:	618d      	str	r5, [r1, #24]
 800d1f8:	fa2f f484 	sxtb16	r4, r4
 800d1fc:	61cc      	str	r4, [r1, #28]
 800d1fe:	6885      	ldr	r5, [r0, #8]
 800d200:	f8dc 4008 	ldr.w	r4, [ip, #8]
 800d204:	fa2f fa95 	sxtb16	sl, r5, ror #8
 800d208:	fa2f f585 	sxtb16	r5, r5
 800d20c:	fa2f f994 	sxtb16	r9, r4, ror #8
 800d210:	3010      	adds	r0, #16
 800d212:	f10c 0c10 	add.w	ip, ip, #16
 800d216:	f8c1 a020 	str.w	sl, [r1, #32]
 800d21a:	f8c1 9024 	str.w	r9, [r1, #36]	@ 0x24
 800d21e:	628d      	str	r5, [r1, #40]	@ 0x28
 800d220:	fa2f f484 	sxtb16	r4, r4
 800d224:	62cc      	str	r4, [r1, #44]	@ 0x2c
 800d226:	f850 5c04 	ldr.w	r5, [r0, #-4]
 800d22a:	f85c 4c04 	ldr.w	r4, [ip, #-4]
 800d22e:	fa2f fa95 	sxtb16	sl, r5, ror #8
 800d232:	fa2f f585 	sxtb16	r5, r5
 800d236:	fa2f f994 	sxtb16	r9, r4, ror #8
 800d23a:	f10e 0e10 	add.w	lr, lr, #16
 800d23e:	f8c1 a030 	str.w	sl, [r1, #48]	@ 0x30
 800d242:	f8c1 9034 	str.w	r9, [r1, #52]	@ 0x34
 800d246:	3140      	adds	r1, #64	@ 0x40
 800d248:	45be      	cmp	lr, r7
 800d24a:	f841 5c08 	str.w	r5, [r1, #-8]
 800d24e:	fa2f f484 	sxtb16	r4, r4
 800d252:	f841 4c04 	str.w	r4, [r1, #-4]
 800d256:	ddb0      	ble.n	800d1ba <st_int8_to16_dual_interleaved+0x1e>
 800d258:	4576      	cmp	r6, lr
 800d25a:	db18      	blt.n	800d28e <st_int8_to16_dual_interleaved+0xf2>
 800d25c:	f850 5b04 	ldr.w	r5, [r0], #4
 800d260:	f85c 4b04 	ldr.w	r4, [ip], #4
 800d264:	fa2f fa95 	sxtb16	sl, r5, ror #8
 800d268:	fa2f f585 	sxtb16	r5, r5
 800d26c:	fa2f f994 	sxtb16	r9, r4, ror #8
 800d270:	f10e 0e04 	add.w	lr, lr, #4
 800d274:	f8c1 a000 	str.w	sl, [r1]
 800d278:	f8c1 9004 	str.w	r9, [r1, #4]
 800d27c:	3110      	adds	r1, #16
 800d27e:	45b6      	cmp	lr, r6
 800d280:	f841 5c08 	str.w	r5, [r1, #-8]
 800d284:	fa2f f484 	sxtb16	r4, r4
 800d288:	f841 4c04 	str.w	r4, [r1, #-4]
 800d28c:	dde6      	ble.n	800d25c <st_int8_to16_dual_interleaved+0xc0>
 800d28e:	4572      	cmp	r2, lr
 800d290:	dd3c      	ble.n	800d30c <st_int8_to16_dual_interleaved+0x170>
 800d292:	eba2 0e0e 	sub.w	lr, r2, lr
 800d296:	1d0c      	adds	r4, r1, #4
 800d298:	4665      	mov	r5, ip
 800d29a:	eb00 0a0e 	add.w	sl, r0, lr
 800d29e:	f910 9b01 	ldrsb.w	r9, [r0], #1
 800d2a2:	3404      	adds	r4, #4
 800d2a4:	f824 9c08 	strh.w	r9, [r4, #-8]
 800d2a8:	4550      	cmp	r0, sl
 800d2aa:	f915 9b01 	ldrsb.w	r9, [r5], #1
 800d2ae:	f824 9c06 	strh.w	r9, [r4, #-6]
 800d2b2:	d1f4      	bne.n	800d29e <st_int8_to16_dual_interleaved+0x102>
 800d2b4:	44f4      	add	ip, lr
 800d2b6:	eb01 018e 	add.w	r1, r1, lr, lsl #2
 800d2ba:	3b01      	subs	r3, #1
 800d2bc:	eb0a 0002 	add.w	r0, sl, r2
 800d2c0:	4494      	add	ip, r2
 800d2c2:	b29b      	uxth	r3, r3
 800d2c4:	2b00      	cmp	r3, #0
 800d2c6:	f47f af74 	bne.w	800d1b2 <st_int8_to16_dual_interleaved+0x16>
 800d2ca:	f018 0f01 	tst.w	r8, #1
 800d2ce:	d01b      	beq.n	800d308 <st_int8_to16_dual_interleaved+0x16c>
 800d2d0:	1f16      	subs	r6, r2, #4
 800d2d2:	f04f 0400 	mov.w	r4, #0
 800d2d6:	d40c      	bmi.n	800d2f2 <st_int8_to16_dual_interleaved+0x156>
 800d2d8:	f850 3b04 	ldr.w	r3, [r0], #4
 800d2dc:	fa2f f593 	sxtb16	r5, r3, ror #8
 800d2e0:	3404      	adds	r4, #4
 800d2e2:	600d      	str	r5, [r1, #0]
 800d2e4:	3108      	adds	r1, #8
 800d2e6:	42a6      	cmp	r6, r4
 800d2e8:	fa2f f383 	sxtb16	r3, r3
 800d2ec:	f841 3c04 	str.w	r3, [r1, #-4]
 800d2f0:	daf2      	bge.n	800d2d8 <st_int8_to16_dual_interleaved+0x13c>
 800d2f2:	42a2      	cmp	r2, r4
 800d2f4:	dd08      	ble.n	800d308 <st_int8_to16_dual_interleaved+0x16c>
 800d2f6:	1b13      	subs	r3, r2, r4
 800d2f8:	eb01 0343 	add.w	r3, r1, r3, lsl #1
 800d2fc:	f910 2b01 	ldrsb.w	r2, [r0], #1
 800d300:	f821 2b02 	strh.w	r2, [r1], #2
 800d304:	428b      	cmp	r3, r1
 800d306:	d1f9      	bne.n	800d2fc <st_int8_to16_dual_interleaved+0x160>
 800d308:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800d30c:	4682      	mov	sl, r0
 800d30e:	e7d4      	b.n	800d2ba <st_int8_to16_dual_interleaved+0x11e>

0800d310 <ai_padding_opt_init>:
 800d310:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800d314:	2700      	movs	r7, #0
 800d316:	9c07      	ldr	r4, [sp, #28]
 800d318:	e9c0 7700 	strd	r7, r7, [r0]
 800d31c:	6087      	str	r7, [r0, #8]
 800d31e:	46b9      	mov	r9, r7
 800d320:	690e      	ldr	r6, [r1, #16]
 800d322:	f1c6 0c00 	rsb	ip, r6, #0
 800d326:	689e      	ldr	r6, [r3, #8]
 800d328:	42be      	cmp	r6, r7
 800d32a:	dd1c      	ble.n	800d366 <ai_padding_opt_init+0x56>
 800d32c:	463e      	mov	r6, r7
 800d32e:	46be      	mov	lr, r7
 800d330:	e010      	b.n	800d354 <ai_padding_opt_init+0x44>
 800d332:	6895      	ldr	r5, [r2, #8]
 800d334:	eba5 080c 	sub.w	r8, r5, ip
 800d338:	68a5      	ldr	r5, [r4, #8]
 800d33a:	45a8      	cmp	r8, r5
 800d33c:	da10      	bge.n	800d360 <ai_padding_opt_init+0x50>
 800d33e:	f109 0901 	add.w	r9, r9, #1
 800d342:	f8c0 9008 	str.w	r9, [r0, #8]
 800d346:	688d      	ldr	r5, [r1, #8]
 800d348:	f10e 0e01 	add.w	lr, lr, #1
 800d34c:	44ac      	add	ip, r5
 800d34e:	689d      	ldr	r5, [r3, #8]
 800d350:	4575      	cmp	r5, lr
 800d352:	dd09      	ble.n	800d368 <ai_padding_opt_init+0x58>
 800d354:	f1bc 0f00 	cmp.w	ip, #0
 800d358:	daeb      	bge.n	800d332 <ai_padding_opt_init+0x22>
 800d35a:	3601      	adds	r6, #1
 800d35c:	6006      	str	r6, [r0, #0]
 800d35e:	e7f2      	b.n	800d346 <ai_padding_opt_init+0x36>
 800d360:	3701      	adds	r7, #1
 800d362:	6047      	str	r7, [r0, #4]
 800d364:	e7ef      	b.n	800d346 <ai_padding_opt_init+0x36>
 800d366:	463e      	mov	r6, r7
 800d368:	2500      	movs	r5, #0
 800d36a:	f8c0 9014 	str.w	r9, [r0, #20]
 800d36e:	e9c0 6703 	strd	r6, r7, [r0, #12]
 800d372:	e9c0 5506 	strd	r5, r5, [r0, #24]
 800d376:	6205      	str	r5, [r0, #32]
 800d378:	694e      	ldr	r6, [r1, #20]
 800d37a:	f1c6 0c00 	rsb	ip, r6, #0
 800d37e:	685e      	ldr	r6, [r3, #4]
 800d380:	42ae      	cmp	r6, r5
 800d382:	dd1c      	ble.n	800d3be <ai_padding_opt_init+0xae>
 800d384:	46ae      	mov	lr, r5
 800d386:	e00f      	b.n	800d3a8 <ai_padding_opt_init+0x98>
 800d388:	6855      	ldr	r5, [r2, #4]
 800d38a:	6866      	ldr	r6, [r4, #4]
 800d38c:	eba5 050c 	sub.w	r5, r5, ip
 800d390:	42b5      	cmp	r5, r6
 800d392:	da10      	bge.n	800d3b6 <ai_padding_opt_init+0xa6>
 800d394:	6a05      	ldr	r5, [r0, #32]
 800d396:	3501      	adds	r5, #1
 800d398:	6205      	str	r5, [r0, #32]
 800d39a:	68cd      	ldr	r5, [r1, #12]
 800d39c:	f10e 0e01 	add.w	lr, lr, #1
 800d3a0:	44ac      	add	ip, r5
 800d3a2:	685d      	ldr	r5, [r3, #4]
 800d3a4:	4575      	cmp	r5, lr
 800d3a6:	dd0a      	ble.n	800d3be <ai_padding_opt_init+0xae>
 800d3a8:	f1bc 0f00 	cmp.w	ip, #0
 800d3ac:	daec      	bge.n	800d388 <ai_padding_opt_init+0x78>
 800d3ae:	6985      	ldr	r5, [r0, #24]
 800d3b0:	3501      	adds	r5, #1
 800d3b2:	6185      	str	r5, [r0, #24]
 800d3b4:	e7f1      	b.n	800d39a <ai_padding_opt_init+0x8a>
 800d3b6:	69c5      	ldr	r5, [r0, #28]
 800d3b8:	3501      	adds	r5, #1
 800d3ba:	61c5      	str	r5, [r0, #28]
 800d3bc:	e7ed      	b.n	800d39a <ai_padding_opt_init+0x8a>
 800d3be:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800d3c2:	bf00      	nop

0800d3c4 <ai_padding_opt_phase1>:
 800d3c4:	e9d0 3206 	ldrd	r3, r2, [r0, #24]
 800d3c8:	b923      	cbnz	r3, 800d3d4 <ai_padding_opt_phase1+0x10>
 800d3ca:	b17a      	cbz	r2, 800d3ec <ai_padding_opt_phase1+0x28>
 800d3cc:	3a01      	subs	r2, #1
 800d3ce:	8483      	strh	r3, [r0, #36]	@ 0x24
 800d3d0:	61c2      	str	r2, [r0, #28]
 800d3d2:	e004      	b.n	800d3de <ai_padding_opt_phase1+0x1a>
 800d3d4:	b152      	cbz	r2, 800d3ec <ai_padding_opt_phase1+0x28>
 800d3d6:	2201      	movs	r2, #1
 800d3d8:	3b01      	subs	r3, #1
 800d3da:	8482      	strh	r2, [r0, #36]	@ 0x24
 800d3dc:	6183      	str	r3, [r0, #24]
 800d3de:	68c3      	ldr	r3, [r0, #12]
 800d3e0:	e9d0 1204 	ldrd	r1, r2, [r0, #16]
 800d3e4:	6003      	str	r3, [r0, #0]
 800d3e6:	e9c0 1201 	strd	r1, r2, [r0, #4]
 800d3ea:	4770      	bx	lr
 800d3ec:	6a03      	ldr	r3, [r0, #32]
 800d3ee:	2201      	movs	r2, #1
 800d3f0:	3b01      	subs	r3, #1
 800d3f2:	8482      	strh	r2, [r0, #36]	@ 0x24
 800d3f4:	6203      	str	r3, [r0, #32]
 800d3f6:	e7f2      	b.n	800d3de <ai_padding_opt_phase1+0x1a>

0800d3f8 <st_int16_fill>:
 800d3f8:	b510      	push	{r4, lr}
 800d3fa:	eac0 4400 	pkhbt	r4, r0, r0, lsl #16
 800d3fe:	ea5f 0e92 	movs.w	lr, r2, lsr #2
 800d402:	d013      	beq.n	800d42c <st_int16_fill+0x34>
 800d404:	f10e 33ff 	add.w	r3, lr, #4294967295
 800d408:	2b03      	cmp	r3, #3
 800d40a:	460b      	mov	r3, r1
 800d40c:	d919      	bls.n	800d442 <st_int16_fill+0x4a>
 800d40e:	f011 0f07 	tst.w	r1, #7
 800d412:	d116      	bne.n	800d442 <st_int16_fill+0x4a>
 800d414:	f04f 0c00 	mov.w	ip, #0
 800d418:	f10c 0c01 	add.w	ip, ip, #1
 800d41c:	45e6      	cmp	lr, ip
 800d41e:	e9c3 4400 	strd	r4, r4, [r3]
 800d422:	f103 0308 	add.w	r3, r3, #8
 800d426:	d1f7      	bne.n	800d418 <st_int16_fill+0x20>
 800d428:	eb01 01ce 	add.w	r1, r1, lr, lsl #3
 800d42c:	f012 0203 	ands.w	r2, r2, #3
 800d430:	d006      	beq.n	800d440 <st_int16_fill+0x48>
 800d432:	3a01      	subs	r2, #1
 800d434:	8008      	strh	r0, [r1, #0]
 800d436:	d003      	beq.n	800d440 <st_int16_fill+0x48>
 800d438:	2a01      	cmp	r2, #1
 800d43a:	8048      	strh	r0, [r1, #2]
 800d43c:	bf18      	it	ne
 800d43e:	8088      	strhne	r0, [r1, #4]
 800d440:	bd10      	pop	{r4, pc}
 800d442:	46f4      	mov	ip, lr
 800d444:	f1bc 0c01 	subs.w	ip, ip, #1
 800d448:	601c      	str	r4, [r3, #0]
 800d44a:	605c      	str	r4, [r3, #4]
 800d44c:	f103 0308 	add.w	r3, r3, #8
 800d450:	d1f8      	bne.n	800d444 <st_int16_fill+0x4c>
 800d452:	e7e9      	b.n	800d428 <st_int16_fill+0x30>

0800d454 <st_sssa8_ch_convolve_rank1upd>:
 800d454:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800d458:	b085      	sub	sp, #20
 800d45a:	f8bd 4038 	ldrh.w	r4, [sp, #56]	@ 0x38
 800d45e:	f99d b040 	ldrsb.w	fp, [sp, #64]	@ 0x40
 800d462:	fb13 f304 	smulbb	r3, r3, r4
 800d466:	460c      	mov	r4, r1
 800d468:	990f      	ldr	r1, [sp, #60]	@ 0x3c
 800d46a:	fb13 f500 	smulbb	r5, r3, r0
 800d46e:	9b11      	ldr	r3, [sp, #68]	@ 0x44
 800d470:	2a00      	cmp	r2, #0
 800d472:	d070      	beq.n	800d556 <st_sssa8_ch_convolve_rank1upd+0x102>
 800d474:	b2ad      	uxth	r5, r5
 800d476:	f1a1 0904 	sub.w	r9, r1, #4
 800d47a:	eb03 0a82 	add.w	sl, r3, r2, lsl #2
 800d47e:	08af      	lsrs	r7, r5, #2
 800d480:	f005 0503 	and.w	r5, r5, #3
 800d484:	eb03 08c2 	add.w	r8, r3, r2, lsl #3
 800d488:	1e69      	subs	r1, r5, #1
 800d48a:	f1a7 0381 	sub.w	r3, r7, #129	@ 0x81
 800d48e:	f1a7 0280 	sub.w	r2, r7, #128	@ 0x80
 800d492:	f3c3 13c8 	ubfx	r3, r3, #7, #9
 800d496:	b289      	uxth	r1, r1
 800d498:	9100      	str	r1, [sp, #0]
 800d49a:	ebc3 2143 	rsb	r1, r3, r3, lsl #9
 800d49e:	eb02 12c1 	add.w	r2, r2, r1, lsl #7
 800d4a2:	b292      	uxth	r2, r2
 800d4a4:	9202      	str	r2, [sp, #8]
 800d4a6:	025a      	lsls	r2, r3, #9
 800d4a8:	3301      	adds	r3, #1
 800d4aa:	f502 6280 	add.w	r2, r2, #1024	@ 0x400
 800d4ae:	025b      	lsls	r3, r3, #9
 800d4b0:	9203      	str	r2, [sp, #12]
 800d4b2:	9301      	str	r3, [sp, #4]
 800d4b4:	2f80      	cmp	r7, #128	@ 0x80
 800d4b6:	d953      	bls.n	800d560 <st_sssa8_ch_convolve_rank1upd+0x10c>
 800d4b8:	9b03      	ldr	r3, [sp, #12]
 800d4ba:	f504 7000 	add.w	r0, r4, #512	@ 0x200
 800d4be:	2600      	movs	r6, #0
 800d4c0:	eb04 0c03 	add.w	ip, r4, r3
 800d4c4:	f5a0 7100 	sub.w	r1, r0, #512	@ 0x200
 800d4c8:	2200      	movs	r2, #0
 800d4ca:	f851 3b04 	ldr.w	r3, [r1], #4
 800d4ce:	fa2f fe83 	sxtb16	lr, r3
 800d4d2:	4281      	cmp	r1, r0
 800d4d4:	ea4f 2333 	mov.w	r3, r3, ror #8
 800d4d8:	fa92 f21e 	qadd16	r2, r2, lr
 800d4dc:	fa2f f383 	sxtb16	r3, r3
 800d4e0:	fa92 f213 	qadd16	r2, r2, r3
 800d4e4:	d1f1      	bne.n	800d4ca <st_sssa8_ch_convolve_rank1upd+0x76>
 800d4e6:	f501 7000 	add.w	r0, r1, #512	@ 0x200
 800d4ea:	b213      	sxth	r3, r2
 800d4ec:	4560      	cmp	r0, ip
 800d4ee:	eb03 4322 	add.w	r3, r3, r2, asr #16
 800d4f2:	441e      	add	r6, r3
 800d4f4:	d1e6      	bne.n	800d4c4 <st_sssa8_ch_convolve_rank1upd+0x70>
 800d4f6:	9b01      	ldr	r3, [sp, #4]
 800d4f8:	18e1      	adds	r1, r4, r3
 800d4fa:	9c02      	ldr	r4, [sp, #8]
 800d4fc:	b374      	cbz	r4, 800d55c <st_sssa8_ch_convolve_rank1upd+0x108>
 800d4fe:	eb01 0484 	add.w	r4, r1, r4, lsl #2
 800d502:	2200      	movs	r2, #0
 800d504:	f851 3b04 	ldr.w	r3, [r1], #4
 800d508:	fa2f f083 	sxtb16	r0, r3
 800d50c:	428c      	cmp	r4, r1
 800d50e:	ea4f 2333 	mov.w	r3, r3, ror #8
 800d512:	fa92 f210 	qadd16	r2, r2, r0
 800d516:	fa2f f383 	sxtb16	r3, r3
 800d51a:	fa92 f213 	qadd16	r2, r2, r3
 800d51e:	d1f1      	bne.n	800d504 <st_sssa8_ch_convolve_rank1upd+0xb0>
 800d520:	b213      	sxth	r3, r2
 800d522:	eb03 4322 	add.w	r3, r3, r2, asr #16
 800d526:	441e      	add	r6, r3
 800d528:	b16d      	cbz	r5, 800d546 <st_sssa8_ch_convolve_rank1upd+0xf2>
 800d52a:	f994 3000 	ldrsb.w	r3, [r4]
 800d52e:	441e      	add	r6, r3
 800d530:	9b00      	ldr	r3, [sp, #0]
 800d532:	b13b      	cbz	r3, 800d544 <st_sssa8_ch_convolve_rank1upd+0xf0>
 800d534:	f994 3001 	ldrsb.w	r3, [r4, #1]
 800d538:	2d02      	cmp	r5, #2
 800d53a:	441e      	add	r6, r3
 800d53c:	d002      	beq.n	800d544 <st_sssa8_ch_convolve_rank1upd+0xf0>
 800d53e:	f994 3002 	ldrsb.w	r3, [r4, #2]
 800d542:	441e      	add	r6, r3
 800d544:	442c      	add	r4, r5
 800d546:	f859 3f04 	ldr.w	r3, [r9, #4]!
 800d54a:	fb06 331b 	mls	r3, r6, fp, r3
 800d54e:	f84a 3b04 	str.w	r3, [sl], #4
 800d552:	45c2      	cmp	sl, r8
 800d554:	d1ae      	bne.n	800d4b4 <st_sssa8_ch_convolve_rank1upd+0x60>
 800d556:	b005      	add	sp, #20
 800d558:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800d55c:	460c      	mov	r4, r1
 800d55e:	e7e3      	b.n	800d528 <st_sssa8_ch_convolve_rank1upd+0xd4>
 800d560:	4621      	mov	r1, r4
 800d562:	2600      	movs	r6, #0
 800d564:	463c      	mov	r4, r7
 800d566:	e7c9      	b.n	800d4fc <st_sssa8_ch_convolve_rank1upd+0xa8>

0800d568 <st_sssa8_ch_fully_connected>:
 800d568:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800d56c:	b097      	sub	sp, #92	@ 0x5c
 800d56e:	468a      	mov	sl, r1
 800d570:	4693      	mov	fp, r2
 800d572:	4619      	mov	r1, r3
 800d574:	9a26      	ldr	r2, [sp, #152]	@ 0x98
 800d576:	9314      	str	r3, [sp, #80]	@ 0x50
 800d578:	eb03 0383 	add.w	r3, r3, r3, lsl #2
 800d57c:	eb02 0581 	add.w	r5, r2, r1, lsl #2
 800d580:	9f21      	ldr	r7, [sp, #132]	@ 0x84
 800d582:	eb02 0343 	add.w	r3, r2, r3, lsl #1
 800d586:	f99d e088 	ldrsb.w	lr, [sp, #136]	@ 0x88
 800d58a:	9512      	str	r5, [sp, #72]	@ 0x48
 800d58c:	930d      	str	r3, [sp, #52]	@ 0x34
 800d58e:	f99d 308c 	ldrsb.w	r3, [sp, #140]	@ 0x8c
 800d592:	2900      	cmp	r1, #0
 800d594:	f000 827b 	beq.w	800da8e <st_sssa8_ch_fully_connected+0x526>
 800d598:	463c      	mov	r4, r7
 800d59a:	3504      	adds	r5, #4
 800d59c:	ea4f 0841 	mov.w	r8, r1, lsl #1
 800d5a0:	f04f 0c01 	mov.w	ip, #1
 800d5a4:	eb07 0741 	add.w	r7, r7, r1, lsl #1
 800d5a8:	f934 2b02 	ldrsh.w	r2, [r4], #2
 800d5ac:	1e51      	subs	r1, r2, #1
 800d5ae:	fa0c f602 	lsl.w	r6, ip, r2
 800d5b2:	fa03 f202 	lsl.w	r2, r3, r2
 800d5b6:	b289      	uxth	r1, r1
 800d5b8:	eb02 0256 	add.w	r2, r2, r6, lsr #1
 800d5bc:	2914      	cmp	r1, #20
 800d5be:	f200 81e8 	bhi.w	800d992 <st_sssa8_ch_fully_connected+0x42a>
 800d5c2:	42bc      	cmp	r4, r7
 800d5c4:	f845 2c04 	str.w	r2, [r5, #-4]
 800d5c8:	f105 0504 	add.w	r5, r5, #4
 800d5cc:	d1ec      	bne.n	800d5a8 <st_sssa8_ch_fully_connected+0x40>
 800d5ce:	9a14      	ldr	r2, [sp, #80]	@ 0x50
 800d5d0:	fa1f f38e 	uxth.w	r3, lr
 800d5d4:	9e0d      	ldr	r6, [sp, #52]	@ 0x34
 800d5d6:	eba7 0508 	sub.w	r5, r7, r8
 800d5da:	0852      	lsrs	r2, r2, #1
 800d5dc:	f8cd e000 	str.w	lr, [sp]
 800d5e0:	ea43 430e 	orr.w	r3, r3, lr, lsl #16
 800d5e4:	4631      	mov	r1, r6
 800d5e6:	4614      	mov	r4, r2
 800d5e8:	9215      	str	r2, [sp, #84]	@ 0x54
 800d5ea:	465a      	mov	r2, fp
 800d5ec:	9513      	str	r5, [sp, #76]	@ 0x4c
 800d5ee:	f000 faf5 	bl	800dbdc <st_int8_reordered_no_shift_zero>
 800d5f2:	2c00      	cmp	r4, #0
 800d5f4:	f000 8179 	beq.w	800d8ea <st_sssa8_ch_fully_connected+0x382>
 800d5f8:	9824      	ldr	r0, [sp, #144]	@ 0x90
 800d5fa:	1e62      	subs	r2, r4, #1
 800d5fc:	f1ab 0310 	sub.w	r3, fp, #16
 800d600:	46d9      	mov	r9, fp
 800d602:	b292      	uxth	r2, r2
 800d604:	f100 0110 	add.w	r1, r0, #16
 800d608:	091b      	lsrs	r3, r3, #4
 800d60a:	eb01 02c2 	add.w	r2, r1, r2, lsl #3
 800d60e:	3301      	adds	r3, #1
 800d610:	920e      	str	r2, [sp, #56]	@ 0x38
 800d612:	f1ab 0203 	sub.w	r2, fp, #3
 800d616:	920f      	str	r2, [sp, #60]	@ 0x3c
 800d618:	4602      	mov	r2, r0
 800d61a:	3208      	adds	r2, #8
 800d61c:	9208      	str	r2, [sp, #32]
 800d61e:	1d2a      	adds	r2, r5, #4
 800d620:	9207      	str	r2, [sp, #28]
 800d622:	9a25      	ldr	r2, [sp, #148]	@ 0x94
 800d624:	3202      	adds	r2, #2
 800d626:	9204      	str	r2, [sp, #16]
 800d628:	9a20      	ldr	r2, [sp, #128]	@ 0x80
 800d62a:	3204      	adds	r2, #4
 800d62c:	9205      	str	r2, [sp, #20]
 800d62e:	9a12      	ldr	r2, [sp, #72]	@ 0x48
 800d630:	3204      	adds	r2, #4
 800d632:	9206      	str	r2, [sp, #24]
 800d634:	011a      	lsls	r2, r3, #4
 800d636:	eb06 1343 	add.w	r3, r6, r3, lsl #5
 800d63a:	9209      	str	r2, [sp, #36]	@ 0x24
 800d63c:	9310      	str	r3, [sp, #64]	@ 0x40
 800d63e:	f1ab 0304 	sub.w	r3, fp, #4
 800d642:	9311      	str	r3, [sp, #68]	@ 0x44
 800d644:	9b08      	ldr	r3, [sp, #32]
 800d646:	f1b9 0f0f 	cmp.w	r9, #15
 800d64a:	eb0a 0b09 	add.w	fp, sl, r9
 800d64e:	e953 1302 	ldrd	r1, r3, [r3, #-8]
 800d652:	f340 81ef 	ble.w	800da34 <st_sssa8_ch_fully_connected+0x4cc>
 800d656:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800d658:	465c      	mov	r4, fp
 800d65a:	eb0a 0502 	add.w	r5, sl, r2
 800d65e:	9a0d      	ldr	r2, [sp, #52]	@ 0x34
 800d660:	f8da 6000 	ldr.w	r6, [sl]
 800d664:	6820      	ldr	r0, [r4, #0]
 800d666:	ea4f 2736 	mov.w	r7, r6, ror #8
 800d66a:	f8d2 e000 	ldr.w	lr, [r2]
 800d66e:	ea4f 2c30 	mov.w	ip, r0, ror #8
 800d672:	fa2f f787 	sxtb16	r7, r7
 800d676:	fa2f f686 	sxtb16	r6, r6
 800d67a:	fa2f fc8c 	sxtb16	ip, ip
 800d67e:	fa2f f080 	sxtb16	r0, r0
 800d682:	fb2e 1106 	smlad	r1, lr, r6, r1
 800d686:	fb2e 3300 	smlad	r3, lr, r0, r3
 800d68a:	f8d2 e004 	ldr.w	lr, [r2, #4]
 800d68e:	fb2e 1707 	smlad	r7, lr, r7, r1
 800d692:	fb2e 3e0c 	smlad	lr, lr, ip, r3
 800d696:	f8da 1004 	ldr.w	r1, [sl, #4]
 800d69a:	6860      	ldr	r0, [r4, #4]
 800d69c:	ea4f 2631 	mov.w	r6, r1, ror #8
 800d6a0:	6893      	ldr	r3, [r2, #8]
 800d6a2:	ea4f 2c30 	mov.w	ip, r0, ror #8
 800d6a6:	fa2f f686 	sxtb16	r6, r6
 800d6aa:	fa2f f181 	sxtb16	r1, r1
 800d6ae:	fa2f fc8c 	sxtb16	ip, ip
 800d6b2:	fa2f f080 	sxtb16	r0, r0
 800d6b6:	fb23 7101 	smlad	r1, r3, r1, r7
 800d6ba:	fb23 e300 	smlad	r3, r3, r0, lr
 800d6be:	f8d2 e00c 	ldr.w	lr, [r2, #12]
 800d6c2:	fb2e 1606 	smlad	r6, lr, r6, r1
 800d6c6:	fb2e 3e0c 	smlad	lr, lr, ip, r3
 800d6ca:	f8da 0008 	ldr.w	r0, [sl, #8]
 800d6ce:	68a1      	ldr	r1, [r4, #8]
 800d6d0:	ea4f 2c30 	mov.w	ip, r0, ror #8
 800d6d4:	6913      	ldr	r3, [r2, #16]
 800d6d6:	ea4f 2731 	mov.w	r7, r1, ror #8
 800d6da:	fa2f fc8c 	sxtb16	ip, ip
 800d6de:	fa2f f080 	sxtb16	r0, r0
 800d6e2:	fa2f f787 	sxtb16	r7, r7
 800d6e6:	fa2f f181 	sxtb16	r1, r1
 800d6ea:	fb23 6000 	smlad	r0, r3, r0, r6
 800d6ee:	fb23 e301 	smlad	r3, r3, r1, lr
 800d6f2:	6951      	ldr	r1, [r2, #20]
 800d6f4:	fb21 000c 	smlad	r0, r1, ip, r0
 800d6f8:	fb21 3c07 	smlad	ip, r1, r7, r3
 800d6fc:	f8da 100c 	ldr.w	r1, [sl, #12]
 800d700:	3410      	adds	r4, #16
 800d702:	f854 ec04 	ldr.w	lr, [r4, #-4]
 800d706:	f10a 0a10 	add.w	sl, sl, #16
 800d70a:	ea4f 2731 	mov.w	r7, r1, ror #8
 800d70e:	6993      	ldr	r3, [r2, #24]
 800d710:	ea4f 263e 	mov.w	r6, lr, ror #8
 800d714:	fa2f f787 	sxtb16	r7, r7
 800d718:	fa2f f181 	sxtb16	r1, r1
 800d71c:	fa2f fe8e 	sxtb16	lr, lr
 800d720:	fa2f f686 	sxtb16	r6, r6
 800d724:	fb23 0101 	smlad	r1, r3, r1, r0
 800d728:	fb23 c00e 	smlad	r0, r3, lr, ip
 800d72c:	69d3      	ldr	r3, [r2, #28]
 800d72e:	3220      	adds	r2, #32
 800d730:	fb23 1107 	smlad	r1, r3, r7, r1
 800d734:	fb23 0306 	smlad	r3, r3, r6, r0
 800d738:	4555      	cmp	r5, sl
 800d73a:	d191      	bne.n	800d660 <st_sssa8_ch_fully_connected+0xf8>
 800d73c:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800d73e:	9810      	ldr	r0, [sp, #64]	@ 0x40
 800d740:	4493      	add	fp, r2
 800d742:	4690      	mov	r8, r2
 800d744:	9003      	str	r0, [sp, #12]
 800d746:	9a0f      	ldr	r2, [sp, #60]	@ 0x3c
 800d748:	4542      	cmp	r2, r8
 800d74a:	f340 8171 	ble.w	800da30 <st_sssa8_ch_fully_connected+0x4c8>
 800d74e:	9a11      	ldr	r2, [sp, #68]	@ 0x44
 800d750:	46dc      	mov	ip, fp
 800d752:	9d03      	ldr	r5, [sp, #12]
 800d754:	eba2 0208 	sub.w	r2, r2, r8
 800d758:	0892      	lsrs	r2, r2, #2
 800d75a:	920c      	str	r2, [sp, #48]	@ 0x30
 800d75c:	3201      	adds	r2, #1
 800d75e:	0090      	lsls	r0, r2, #2
 800d760:	920b      	str	r2, [sp, #44]	@ 0x2c
 800d762:	eb0a 0e82 	add.w	lr, sl, r2, lsl #2
 800d766:	900a      	str	r0, [sp, #40]	@ 0x28
 800d768:	f85a 7b04 	ldr.w	r7, [sl], #4
 800d76c:	f85c 0b04 	ldr.w	r0, [ip], #4
 800d770:	ea4f 2637 	mov.w	r6, r7, ror #8
 800d774:	682a      	ldr	r2, [r5, #0]
 800d776:	ea4f 2430 	mov.w	r4, r0, ror #8
 800d77a:	fa2f f686 	sxtb16	r6, r6
 800d77e:	fa2f f787 	sxtb16	r7, r7
 800d782:	fa2f f484 	sxtb16	r4, r4
 800d786:	fa2f f080 	sxtb16	r0, r0
 800d78a:	fb22 1107 	smlad	r1, r2, r7, r1
 800d78e:	fb22 3200 	smlad	r2, r2, r0, r3
 800d792:	686b      	ldr	r3, [r5, #4]
 800d794:	3508      	adds	r5, #8
 800d796:	fb23 1106 	smlad	r1, r3, r6, r1
 800d79a:	fb23 2304 	smlad	r3, r3, r4, r2
 800d79e:	45d6      	cmp	lr, sl
 800d7a0:	d1e2      	bne.n	800d768 <st_sssa8_ch_fully_connected+0x200>
 800d7a2:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 800d7a4:	f108 0804 	add.w	r8, r8, #4
 800d7a8:	980b      	ldr	r0, [sp, #44]	@ 0x2c
 800d7aa:	4493      	add	fp, r2
 800d7ac:	9a03      	ldr	r2, [sp, #12]
 800d7ae:	eb02 02c0 	add.w	r2, r2, r0, lsl #3
 800d7b2:	9203      	str	r2, [sp, #12]
 800d7b4:	9a0c      	ldr	r2, [sp, #48]	@ 0x30
 800d7b6:	eb08 0882 	add.w	r8, r8, r2, lsl #2
 800d7ba:	45c1      	cmp	r9, r8
 800d7bc:	dd37      	ble.n	800d82e <st_sssa8_ch_fully_connected+0x2c6>
 800d7be:	9c03      	ldr	r4, [sp, #12]
 800d7c0:	f99e 0000 	ldrsb.w	r0, [lr]
 800d7c4:	f9b4 2000 	ldrsh.w	r2, [r4]
 800d7c8:	fb12 1100 	smlabb	r1, r2, r0, r1
 800d7cc:	f99b 0000 	ldrsb.w	r0, [fp]
 800d7d0:	fb12 3300 	smlabb	r3, r2, r0, r3
 800d7d4:	f108 0201 	add.w	r2, r8, #1
 800d7d8:	454a      	cmp	r2, r9
 800d7da:	da25      	bge.n	800d828 <st_sssa8_ch_fully_connected+0x2c0>
 800d7dc:	f9b4 2002 	ldrsh.w	r2, [r4, #2]
 800d7e0:	f99e 0001 	ldrsb.w	r0, [lr, #1]
 800d7e4:	fb12 1100 	smlabb	r1, r2, r0, r1
 800d7e8:	f99b 0001 	ldrsb.w	r0, [fp, #1]
 800d7ec:	fb12 3300 	smlabb	r3, r2, r0, r3
 800d7f0:	f108 0202 	add.w	r2, r8, #2
 800d7f4:	4591      	cmp	r9, r2
 800d7f6:	dd17      	ble.n	800d828 <st_sssa8_ch_fully_connected+0x2c0>
 800d7f8:	f9b4 2004 	ldrsh.w	r2, [r4, #4]
 800d7fc:	f99e 0002 	ldrsb.w	r0, [lr, #2]
 800d800:	fb12 1100 	smlabb	r1, r2, r0, r1
 800d804:	f99b 0002 	ldrsb.w	r0, [fp, #2]
 800d808:	fb12 3300 	smlabb	r3, r2, r0, r3
 800d80c:	f108 0203 	add.w	r2, r8, #3
 800d810:	4591      	cmp	r9, r2
 800d812:	dd09      	ble.n	800d828 <st_sssa8_ch_fully_connected+0x2c0>
 800d814:	f9b4 2006 	ldrsh.w	r2, [r4, #6]
 800d818:	f99b 0003 	ldrsb.w	r0, [fp, #3]
 800d81c:	fb12 3300 	smlabb	r3, r2, r0, r3
 800d820:	f99e 0003 	ldrsb.w	r0, [lr, #3]
 800d824:	fb12 1100 	smlabb	r1, r2, r0, r1
 800d828:	eba9 0808 	sub.w	r8, r9, r8
 800d82c:	44c6      	add	lr, r8
 800d82e:	9d07      	ldr	r5, [sp, #28]
 800d830:	f935 0c04 	ldrsh.w	r0, [r5, #-4]
 800d834:	2815      	cmp	r0, #21
 800d836:	f340 80c2 	ble.w	800d9be <st_sssa8_ch_fully_connected+0x456>
 800d83a:	1e84      	subs	r4, r0, #2
 800d83c:	2201      	movs	r2, #1
 800d83e:	3801      	subs	r0, #1
 800d840:	fa02 f404 	lsl.w	r4, r2, r4
 800d844:	9a05      	ldr	r2, [sp, #20]
 800d846:	f852 2c04 	ldr.w	r2, [r2, #-4]
 800d84a:	fb51 4202 	smmla	r2, r1, r2, r4
 800d84e:	9906      	ldr	r1, [sp, #24]
 800d850:	4102      	asrs	r2, r0
 800d852:	1eac      	subs	r4, r5, #2
 800d854:	f851 1c04 	ldr.w	r1, [r1, #-4]
 800d858:	440a      	add	r2, r1
 800d85a:	f302 0207 	ssat	r2, #8, r2
 800d85e:	9904      	ldr	r1, [sp, #16]
 800d860:	b252      	sxtb	r2, r2
 800d862:	1e48      	subs	r0, r1, #1
 800d864:	f801 2c02 	strb.w	r2, [r1, #-2]
 800d868:	f9b4 4000 	ldrsh.w	r4, [r4]
 800d86c:	2c15      	cmp	r4, #21
 800d86e:	f340 8098 	ble.w	800d9a2 <st_sssa8_ch_fully_connected+0x43a>
 800d872:	1ea1      	subs	r1, r4, #2
 800d874:	2201      	movs	r2, #1
 800d876:	3c01      	subs	r4, #1
 800d878:	fa02 f101 	lsl.w	r1, r2, r1
 800d87c:	9a05      	ldr	r2, [sp, #20]
 800d87e:	6812      	ldr	r2, [r2, #0]
 800d880:	fb53 1302 	smmla	r3, r3, r2, r1
 800d884:	9a06      	ldr	r2, [sp, #24]
 800d886:	4123      	asrs	r3, r4
 800d888:	6812      	ldr	r2, [r2, #0]
 800d88a:	4413      	add	r3, r2
 800d88c:	f303 0307 	ssat	r3, #8, r3
 800d890:	b25b      	sxtb	r3, r3
 800d892:	9a07      	ldr	r2, [sp, #28]
 800d894:	eb0e 0a09 	add.w	sl, lr, r9
 800d898:	7003      	strb	r3, [r0, #0]
 800d89a:	3204      	adds	r2, #4
 800d89c:	9b08      	ldr	r3, [sp, #32]
 800d89e:	9207      	str	r2, [sp, #28]
 800d8a0:	3308      	adds	r3, #8
 800d8a2:	9a04      	ldr	r2, [sp, #16]
 800d8a4:	9308      	str	r3, [sp, #32]
 800d8a6:	3202      	adds	r2, #2
 800d8a8:	9204      	str	r2, [sp, #16]
 800d8aa:	9a05      	ldr	r2, [sp, #20]
 800d8ac:	3208      	adds	r2, #8
 800d8ae:	9205      	str	r2, [sp, #20]
 800d8b0:	9a06      	ldr	r2, [sp, #24]
 800d8b2:	3208      	adds	r2, #8
 800d8b4:	9206      	str	r2, [sp, #24]
 800d8b6:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 800d8b8:	429a      	cmp	r2, r3
 800d8ba:	f47f aec3 	bne.w	800d644 <st_sssa8_ch_fully_connected+0xdc>
 800d8be:	9b15      	ldr	r3, [sp, #84]	@ 0x54
 800d8c0:	46cb      	mov	fp, r9
 800d8c2:	9a20      	ldr	r2, [sp, #128]	@ 0x80
 800d8c4:	eb02 02c3 	add.w	r2, r2, r3, lsl #3
 800d8c8:	9220      	str	r2, [sp, #128]	@ 0x80
 800d8ca:	9a13      	ldr	r2, [sp, #76]	@ 0x4c
 800d8cc:	eb02 0283 	add.w	r2, r2, r3, lsl #2
 800d8d0:	9213      	str	r2, [sp, #76]	@ 0x4c
 800d8d2:	9a24      	ldr	r2, [sp, #144]	@ 0x90
 800d8d4:	eb02 02c3 	add.w	r2, r2, r3, lsl #3
 800d8d8:	9224      	str	r2, [sp, #144]	@ 0x90
 800d8da:	9a25      	ldr	r2, [sp, #148]	@ 0x94
 800d8dc:	eb02 0243 	add.w	r2, r2, r3, lsl #1
 800d8e0:	9225      	str	r2, [sp, #148]	@ 0x94
 800d8e2:	9a12      	ldr	r2, [sp, #72]	@ 0x48
 800d8e4:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
 800d8e8:	9312      	str	r3, [sp, #72]	@ 0x48
 800d8ea:	9b14      	ldr	r3, [sp, #80]	@ 0x50
 800d8ec:	07db      	lsls	r3, r3, #31
 800d8ee:	d54c      	bpl.n	800d98a <st_sssa8_ch_fully_connected+0x422>
 800d8f0:	9b24      	ldr	r3, [sp, #144]	@ 0x90
 800d8f2:	ea5f 079b 	movs.w	r7, fp, lsr #2
 800d8f6:	681b      	ldr	r3, [r3, #0]
 800d8f8:	f000 80c7 	beq.w	800da8a <st_sssa8_ch_fully_connected+0x522>
 800d8fc:	eb0a 0687 	add.w	r6, sl, r7, lsl #2
 800d900:	980d      	ldr	r0, [sp, #52]	@ 0x34
 800d902:	f85a 2b04 	ldr.w	r2, [sl], #4
 800d906:	3008      	adds	r0, #8
 800d908:	f850 5c08 	ldr.w	r5, [r0, #-8]
 800d90c:	ea4f 2132 	mov.w	r1, r2, ror #8
 800d910:	f850 4c04 	ldr.w	r4, [r0, #-4]
 800d914:	fa2f f282 	sxtb16	r2, r2
 800d918:	fa2f f181 	sxtb16	r1, r1
 800d91c:	fb25 3302 	smlad	r3, r5, r2, r3
 800d920:	fb24 3301 	smlad	r3, r4, r1, r3
 800d924:	45b2      	cmp	sl, r6
 800d926:	d1ec      	bne.n	800d902 <st_sssa8_ch_fully_connected+0x39a>
 800d928:	9a0d      	ldr	r2, [sp, #52]	@ 0x34
 800d92a:	eb02 02c7 	add.w	r2, r2, r7, lsl #3
 800d92e:	920d      	str	r2, [sp, #52]	@ 0x34
 800d930:	f01b 0203 	ands.w	r2, fp, #3
 800d934:	d014      	beq.n	800d960 <st_sssa8_ch_fully_connected+0x3f8>
 800d936:	3a01      	subs	r2, #1
 800d938:	9c0d      	ldr	r4, [sp, #52]	@ 0x34
 800d93a:	f996 1000 	ldrsb.w	r1, [r6]
 800d93e:	8820      	ldrh	r0, [r4, #0]
 800d940:	b292      	uxth	r2, r2
 800d942:	fb10 3301 	smlabb	r3, r0, r1, r3
 800d946:	b15a      	cbz	r2, 800d960 <st_sssa8_ch_fully_connected+0x3f8>
 800d948:	f996 1001 	ldrsb.w	r1, [r6, #1]
 800d94c:	2a01      	cmp	r2, #1
 800d94e:	8860      	ldrh	r0, [r4, #2]
 800d950:	fb10 3301 	smlabb	r3, r0, r1, r3
 800d954:	d004      	beq.n	800d960 <st_sssa8_ch_fully_connected+0x3f8>
 800d956:	f996 2002 	ldrsb.w	r2, [r6, #2]
 800d95a:	88a1      	ldrh	r1, [r4, #4]
 800d95c:	fb11 3302 	smlabb	r3, r1, r2, r3
 800d960:	9a13      	ldr	r2, [sp, #76]	@ 0x4c
 800d962:	f9b2 2000 	ldrsh.w	r2, [r2]
 800d966:	2a15      	cmp	r2, #21
 800d968:	dd69      	ble.n	800da3e <st_sssa8_ch_fully_connected+0x4d6>
 800d96a:	9812      	ldr	r0, [sp, #72]	@ 0x48
 800d96c:	1e95      	subs	r5, r2, #2
 800d96e:	9920      	ldr	r1, [sp, #128]	@ 0x80
 800d970:	3a01      	subs	r2, #1
 800d972:	6804      	ldr	r4, [r0, #0]
 800d974:	2001      	movs	r0, #1
 800d976:	6809      	ldr	r1, [r1, #0]
 800d978:	40a8      	lsls	r0, r5
 800d97a:	fb53 0301 	smmla	r3, r3, r1, r0
 800d97e:	4113      	asrs	r3, r2
 800d980:	4423      	add	r3, r4
 800d982:	f303 0307 	ssat	r3, #8, r3
 800d986:	9a25      	ldr	r2, [sp, #148]	@ 0x94
 800d988:	7013      	strb	r3, [r2, #0]
 800d98a:	2000      	movs	r0, #0
 800d98c:	b017      	add	sp, #92	@ 0x5c
 800d98e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800d992:	42bc      	cmp	r4, r7
 800d994:	f845 3c04 	str.w	r3, [r5, #-4]
 800d998:	f105 0504 	add.w	r5, r5, #4
 800d99c:	f47f ae04 	bne.w	800d5a8 <st_sssa8_ch_fully_connected+0x40>
 800d9a0:	e615      	b.n	800d5ce <st_sssa8_ch_fully_connected+0x66>
 800d9a2:	2c00      	cmp	r4, #0
 800d9a4:	dd1f      	ble.n	800d9e6 <st_sssa8_ch_fully_connected+0x47e>
 800d9a6:	9a05      	ldr	r2, [sp, #20]
 800d9a8:	005b      	lsls	r3, r3, #1
 800d9aa:	9906      	ldr	r1, [sp, #24]
 800d9ac:	6812      	ldr	r2, [r2, #0]
 800d9ae:	6809      	ldr	r1, [r1, #0]
 800d9b0:	fb53 1302 	smmla	r3, r3, r2, r1
 800d9b4:	4123      	asrs	r3, r4
 800d9b6:	f303 0307 	ssat	r3, #8, r3
 800d9ba:	b25b      	sxtb	r3, r3
 800d9bc:	e769      	b.n	800d892 <st_sssa8_ch_fully_connected+0x32a>
 800d9be:	2800      	cmp	r0, #0
 800d9c0:	dd21      	ble.n	800da06 <st_sssa8_ch_fully_connected+0x49e>
 800d9c2:	462c      	mov	r4, r5
 800d9c4:	9a05      	ldr	r2, [sp, #20]
 800d9c6:	004d      	lsls	r5, r1, #1
 800d9c8:	9906      	ldr	r1, [sp, #24]
 800d9ca:	f852 2c04 	ldr.w	r2, [r2, #-4]
 800d9ce:	3c02      	subs	r4, #2
 800d9d0:	f851 1c04 	ldr.w	r1, [r1, #-4]
 800d9d4:	fb55 1502 	smmla	r5, r5, r2, r1
 800d9d8:	4105      	asrs	r5, r0
 800d9da:	f305 0207 	ssat	r2, #8, r5
 800d9de:	9904      	ldr	r1, [sp, #16]
 800d9e0:	b252      	sxtb	r2, r2
 800d9e2:	1e48      	subs	r0, r1, #1
 800d9e4:	e73e      	b.n	800d864 <st_sssa8_ch_fully_connected+0x2fc>
 800d9e6:	f1c4 0401 	rsb	r4, r4, #1
 800d9ea:	40a3      	lsls	r3, r4
 800d9ec:	f303 031f 	ssat	r3, #32, r3
 800d9f0:	9a05      	ldr	r2, [sp, #20]
 800d9f2:	6812      	ldr	r2, [r2, #0]
 800d9f4:	fb53 f212 	smmulr	r2, r3, r2
 800d9f8:	9b06      	ldr	r3, [sp, #24]
 800d9fa:	681b      	ldr	r3, [r3, #0]
 800d9fc:	4413      	add	r3, r2
 800d9fe:	f303 0307 	ssat	r3, #8, r3
 800da02:	b25b      	sxtb	r3, r3
 800da04:	e745      	b.n	800d892 <st_sssa8_ch_fully_connected+0x32a>
 800da06:	f1c0 0001 	rsb	r0, r0, #1
 800da0a:	1eac      	subs	r4, r5, #2
 800da0c:	4081      	lsls	r1, r0
 800da0e:	f301 011f 	ssat	r1, #32, r1
 800da12:	9a05      	ldr	r2, [sp, #20]
 800da14:	f852 2c04 	ldr.w	r2, [r2, #-4]
 800da18:	fb51 f212 	smmulr	r2, r1, r2
 800da1c:	9906      	ldr	r1, [sp, #24]
 800da1e:	f851 1c04 	ldr.w	r1, [r1, #-4]
 800da22:	440a      	add	r2, r1
 800da24:	f302 0207 	ssat	r2, #8, r2
 800da28:	9904      	ldr	r1, [sp, #16]
 800da2a:	b252      	sxtb	r2, r2
 800da2c:	1e48      	subs	r0, r1, #1
 800da2e:	e719      	b.n	800d864 <st_sssa8_ch_fully_connected+0x2fc>
 800da30:	46d6      	mov	lr, sl
 800da32:	e6c2      	b.n	800d7ba <st_sssa8_ch_fully_connected+0x252>
 800da34:	9a0d      	ldr	r2, [sp, #52]	@ 0x34
 800da36:	f04f 0800 	mov.w	r8, #0
 800da3a:	9203      	str	r2, [sp, #12]
 800da3c:	e683      	b.n	800d746 <st_sssa8_ch_fully_connected+0x1de>
 800da3e:	2a00      	cmp	r2, #0
 800da40:	dd0f      	ble.n	800da62 <st_sssa8_ch_fully_connected+0x4fa>
 800da42:	9920      	ldr	r1, [sp, #128]	@ 0x80
 800da44:	005b      	lsls	r3, r3, #1
 800da46:	9812      	ldr	r0, [sp, #72]	@ 0x48
 800da48:	6809      	ldr	r1, [r1, #0]
 800da4a:	6800      	ldr	r0, [r0, #0]
 800da4c:	fb53 0301 	smmla	r3, r3, r1, r0
 800da50:	4113      	asrs	r3, r2
 800da52:	f303 0307 	ssat	r3, #8, r3
 800da56:	2000      	movs	r0, #0
 800da58:	9a25      	ldr	r2, [sp, #148]	@ 0x94
 800da5a:	7013      	strb	r3, [r2, #0]
 800da5c:	b017      	add	sp, #92	@ 0x5c
 800da5e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800da62:	f1c2 0201 	rsb	r2, r2, #1
 800da66:	4093      	lsls	r3, r2
 800da68:	f303 031f 	ssat	r3, #32, r3
 800da6c:	9a20      	ldr	r2, [sp, #128]	@ 0x80
 800da6e:	6812      	ldr	r2, [r2, #0]
 800da70:	fb53 f312 	smmulr	r3, r3, r2
 800da74:	9a12      	ldr	r2, [sp, #72]	@ 0x48
 800da76:	6812      	ldr	r2, [r2, #0]
 800da78:	4413      	add	r3, r2
 800da7a:	f303 0307 	ssat	r3, #8, r3
 800da7e:	2000      	movs	r0, #0
 800da80:	9a25      	ldr	r2, [sp, #148]	@ 0x94
 800da82:	7013      	strb	r3, [r2, #0]
 800da84:	b017      	add	sp, #92	@ 0x5c
 800da86:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800da8a:	4656      	mov	r6, sl
 800da8c:	e750      	b.n	800d930 <st_sssa8_ch_fully_connected+0x3c8>
 800da8e:	f8dd 8050 	ldr.w	r8, [sp, #80]	@ 0x50
 800da92:	9212      	str	r2, [sp, #72]	@ 0x48
 800da94:	e59b      	b.n	800d5ce <st_sssa8_ch_fully_connected+0x66>
 800da96:	bf00      	nop

0800da98 <st_int8_copy>:
 800da98:	4288      	cmp	r0, r1
 800da9a:	d023      	beq.n	800dae4 <st_int8_copy+0x4c>
 800da9c:	b312      	cbz	r2, 800dae4 <st_int8_copy+0x4c>
 800da9e:	4288      	cmp	r0, r1
 800daa0:	eb00 0302 	add.w	r3, r0, r2
 800daa4:	d20b      	bcs.n	800dabe <st_int8_copy+0x26>
 800daa6:	4299      	cmp	r1, r3
 800daa8:	d209      	bcs.n	800dabe <st_int8_copy+0x26>
 800daaa:	4298      	cmp	r0, r3
 800daac:	440a      	add	r2, r1
 800daae:	d219      	bcs.n	800dae4 <st_int8_copy+0x4c>
 800dab0:	f913 1d01 	ldrsb.w	r1, [r3, #-1]!
 800dab4:	4298      	cmp	r0, r3
 800dab6:	f802 1d01 	strb.w	r1, [r2, #-1]!
 800daba:	d1f9      	bne.n	800dab0 <st_int8_copy+0x18>
 800dabc:	4770      	bx	lr
 800dabe:	2a03      	cmp	r2, #3
 800dac0:	d811      	bhi.n	800dae6 <st_int8_copy+0x4e>
 800dac2:	f810 3b01 	ldrb.w	r3, [r0], #1
 800dac6:	f801 3b01 	strb.w	r3, [r1], #1
 800daca:	2a01      	cmp	r2, #1
 800dacc:	d00a      	beq.n	800dae4 <st_int8_copy+0x4c>
 800dace:	f810 3b01 	ldrb.w	r3, [r0], #1
 800dad2:	f801 3b01 	strb.w	r3, [r1], #1
 800dad6:	2a02      	cmp	r2, #2
 800dad8:	d004      	beq.n	800dae4 <st_int8_copy+0x4c>
 800dada:	f810 3b01 	ldrb.w	r3, [r0], #1
 800dade:	f801 3b01 	strb.w	r3, [r1], #1
 800dae2:	4770      	bx	lr
 800dae4:	4770      	bx	lr
 800dae6:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800daea:	f001 0403 	and.w	r4, r1, #3
 800daee:	f000 0e03 	and.w	lr, r0, #3
 800daf2:	f1c4 0304 	rsb	r3, r4, #4
 800daf6:	eba2 0c03 	sub.w	ip, r2, r3
 800dafa:	f810 3b01 	ldrb.w	r3, [r0], #1
 800dafe:	f801 3b01 	strb.w	r3, [r1], #1
 800db02:	2c03      	cmp	r4, #3
 800db04:	f1c4 0202 	rsb	r2, r4, #2
 800db08:	d00e      	beq.n	800db28 <st_int8_copy+0x90>
 800db0a:	f810 3b01 	ldrb.w	r3, [r0], #1
 800db0e:	f801 3b01 	strb.w	r3, [r1], #1
 800db12:	2a00      	cmp	r2, #0
 800db14:	dd08      	ble.n	800db28 <st_int8_copy+0x90>
 800db16:	f810 3b01 	ldrb.w	r3, [r0], #1
 800db1a:	f801 3b01 	strb.w	r3, [r1], #1
 800db1e:	b91c      	cbnz	r4, 800db28 <st_int8_copy+0x90>
 800db20:	f810 3b01 	ldrb.w	r3, [r0], #1
 800db24:	f801 3b01 	strb.w	r3, [r1], #1
 800db28:	4574      	cmp	r4, lr
 800db2a:	d02b      	beq.n	800db84 <st_int8_copy+0xec>
 800db2c:	ea4f 131c 	mov.w	r3, ip, lsr #4
 800db30:	1e5a      	subs	r2, r3, #1
 800db32:	b153      	cbz	r3, 800db4a <st_int8_copy+0xb2>
 800db34:	f850 3b04 	ldr.w	r3, [r0], #4
 800db38:	f850 4b04 	ldr.w	r4, [r0], #4
 800db3c:	f850 5b04 	ldr.w	r5, [r0], #4
 800db40:	f850 6b04 	ldr.w	r6, [r0], #4
 800db44:	c178      	stmia	r1!, {r3, r4, r5, r6}
 800db46:	3a01      	subs	r2, #1
 800db48:	d2f4      	bcs.n	800db34 <st_int8_copy+0x9c>
 800db4a:	f01c 0f08 	tst.w	ip, #8
 800db4e:	d004      	beq.n	800db5a <st_int8_copy+0xc2>
 800db50:	f850 3b04 	ldr.w	r3, [r0], #4
 800db54:	f850 4b04 	ldr.w	r4, [r0], #4
 800db58:	c118      	stmia	r1!, {r3, r4}
 800db5a:	f01c 0f04 	tst.w	ip, #4
 800db5e:	d003      	beq.n	800db68 <st_int8_copy+0xd0>
 800db60:	f850 3b04 	ldr.w	r3, [r0], #4
 800db64:	f841 3b04 	str.w	r3, [r1], #4
 800db68:	f01c 0f02 	tst.w	ip, #2
 800db6c:	d003      	beq.n	800db76 <st_int8_copy+0xde>
 800db6e:	f830 3b02 	ldrh.w	r3, [r0], #2
 800db72:	f821 3b02 	strh.w	r3, [r1], #2
 800db76:	f01c 0f01 	tst.w	ip, #1
 800db7a:	d001      	beq.n	800db80 <st_int8_copy+0xe8>
 800db7c:	7803      	ldrb	r3, [r0, #0]
 800db7e:	700b      	strb	r3, [r1, #0]
 800db80:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800db84:	ea4f 139c 	mov.w	r3, ip, lsr #6
 800db88:	f103 39ff 	add.w	r9, r3, #4294967295
 800db8c:	b183      	cbz	r3, 800dbb0 <st_int8_copy+0x118>
 800db8e:	4688      	mov	r8, r1
 800db90:	4686      	mov	lr, r0
 800db92:	e8be 00ff 	ldmia.w	lr!, {r0, r1, r2, r3, r4, r5, r6, r7}
 800db96:	e8a8 00ff 	stmia.w	r8!, {r0, r1, r2, r3, r4, r5, r6, r7}
 800db9a:	e8be 00ff 	ldmia.w	lr!, {r0, r1, r2, r3, r4, r5, r6, r7}
 800db9e:	e8a8 00ff 	stmia.w	r8!, {r0, r1, r2, r3, r4, r5, r6, r7}
 800dba2:	f109 39ff 	add.w	r9, r9, #4294967295
 800dba6:	4641      	mov	r1, r8
 800dba8:	4670      	mov	r0, lr
 800dbaa:	f1b9 3fff 	cmp.w	r9, #4294967295
 800dbae:	d1ee      	bne.n	800db8e <st_int8_copy+0xf6>
 800dbb0:	f01c 0f20 	tst.w	ip, #32
 800dbb4:	d007      	beq.n	800dbc6 <st_int8_copy+0x12e>
 800dbb6:	4688      	mov	r8, r1
 800dbb8:	4686      	mov	lr, r0
 800dbba:	e8be 00ff 	ldmia.w	lr!, {r0, r1, r2, r3, r4, r5, r6, r7}
 800dbbe:	e8a8 00ff 	stmia.w	r8!, {r0, r1, r2, r3, r4, r5, r6, r7}
 800dbc2:	4641      	mov	r1, r8
 800dbc4:	4670      	mov	r0, lr
 800dbc6:	f01c 0f10 	tst.w	ip, #16
 800dbca:	d001      	beq.n	800dbd0 <st_int8_copy+0x138>
 800dbcc:	c878      	ldmia	r0!, {r3, r4, r5, r6}
 800dbce:	c178      	stmia	r1!, {r3, r4, r5, r6}
 800dbd0:	f01c 0f08 	tst.w	ip, #8
 800dbd4:	d0c1      	beq.n	800db5a <st_int8_copy+0xc2>
 800dbd6:	c818      	ldmia	r0!, {r3, r4}
 800dbd8:	c118      	stmia	r1!, {r3, r4}
 800dbda:	e7be      	b.n	800db5a <st_int8_copy+0xc2>

0800dbdc <st_int8_reordered_no_shift_zero>:
 800dbdc:	b5f0      	push	{r4, r5, r6, r7, lr}
 800dbde:	0897      	lsrs	r7, r2, #2
 800dbe0:	f9bd 6014 	ldrsh.w	r6, [sp, #20]
 800dbe4:	d02d      	beq.n	800dc42 <st_int8_reordered_no_shift_zero+0x66>
 800dbe6:	eb00 0587 	add.w	r5, r0, r7, lsl #2
 800dbea:	468e      	mov	lr, r1
 800dbec:	f850 cb04 	ldr.w	ip, [r0], #4
 800dbf0:	fa2f f49c 	sxtb16	r4, ip, ror #8
 800dbf4:	fad4 f403 	ssub16	r4, r4, r3
 800dbf8:	fa2f fc8c 	sxtb16	ip, ip
 800dbfc:	fadc fc03 	ssub16	ip, ip, r3
 800dc00:	42a8      	cmp	r0, r5
 800dc02:	f8ce c000 	str.w	ip, [lr]
 800dc06:	f8ce 4004 	str.w	r4, [lr, #4]
 800dc0a:	f10e 0e08 	add.w	lr, lr, #8
 800dc0e:	d1ed      	bne.n	800dbec <st_int8_reordered_no_shift_zero+0x10>
 800dc10:	eb01 01c7 	add.w	r1, r1, r7, lsl #3
 800dc14:	f012 0203 	ands.w	r2, r2, #3
 800dc18:	d012      	beq.n	800dc40 <st_int8_reordered_no_shift_zero+0x64>
 800dc1a:	f995 0000 	ldrsb.w	r0, [r5]
 800dc1e:	b273      	sxtb	r3, r6
 800dc20:	3a01      	subs	r2, #1
 800dc22:	eba0 0003 	sub.w	r0, r0, r3
 800dc26:	8008      	strh	r0, [r1, #0]
 800dc28:	d00a      	beq.n	800dc40 <st_int8_reordered_no_shift_zero+0x64>
 800dc2a:	f995 0001 	ldrsb.w	r0, [r5, #1]
 800dc2e:	2a01      	cmp	r2, #1
 800dc30:	eba0 0003 	sub.w	r0, r0, r3
 800dc34:	8048      	strh	r0, [r1, #2]
 800dc36:	d003      	beq.n	800dc40 <st_int8_reordered_no_shift_zero+0x64>
 800dc38:	f995 2002 	ldrsb.w	r2, [r5, #2]
 800dc3c:	1ad3      	subs	r3, r2, r3
 800dc3e:	808b      	strh	r3, [r1, #4]
 800dc40:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800dc42:	4605      	mov	r5, r0
 800dc44:	e7e6      	b.n	800dc14 <st_int8_reordered_no_shift_zero+0x38>
 800dc46:	bf00      	nop

0800dc48 <st_sssa8_ch_nn_mat_mult_kernel_single_opt>:
 800dc48:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800dc4c:	b093      	sub	sp, #76	@ 0x4c
 800dc4e:	f8bd 4074 	ldrh.w	r4, [sp, #116]	@ 0x74
 800dc52:	920a      	str	r2, [sp, #40]	@ 0x28
 800dc54:	f8bd 2078 	ldrh.w	r2, [sp, #120]	@ 0x78
 800dc58:	930f      	str	r3, [sp, #60]	@ 0x3c
 800dc5a:	920d      	str	r2, [sp, #52]	@ 0x34
 800dc5c:	0862      	lsrs	r2, r4, #1
 800dc5e:	f89d 3088 	ldrb.w	r3, [sp, #136]	@ 0x88
 800dc62:	940c      	str	r4, [sp, #48]	@ 0x30
 800dc64:	9104      	str	r1, [sp, #16]
 800dc66:	930e      	str	r3, [sp, #56]	@ 0x38
 800dc68:	920b      	str	r2, [sp, #44]	@ 0x2c
 800dc6a:	2b00      	cmp	r3, #0
 800dc6c:	f000 8184 	beq.w	800df78 <st_sssa8_ch_nn_mat_mult_kernel_single_opt+0x330>
 800dc70:	9b1c      	ldr	r3, [sp, #112]	@ 0x70
 800dc72:	b299      	uxth	r1, r3
 800dc74:	4613      	mov	r3, r2
 800dc76:	2b00      	cmp	r3, #0
 800dc78:	f000 80d7 	beq.w	800de2a <st_sssa8_ch_nn_mat_mult_kernel_single_opt+0x1e2>
 800dc7c:	9a0d      	ldr	r2, [sp, #52]	@ 0x34
 800dc7e:	3b01      	subs	r3, #1
 800dc80:	0897      	lsrs	r7, r2, #2
 800dc82:	f002 0203 	and.w	r2, r2, #3
 800dc86:	b29b      	uxth	r3, r3
 800dc88:	9201      	str	r2, [sp, #4]
 800dc8a:	1c4a      	adds	r2, r1, #1
 800dc8c:	0049      	lsls	r1, r1, #1
 800dc8e:	9703      	str	r7, [sp, #12]
 800dc90:	9105      	str	r1, [sp, #20]
 800dc92:	9923      	ldr	r1, [sp, #140]	@ 0x8c
 800dc94:	4411      	add	r1, r2
 800dc96:	9102      	str	r1, [sp, #8]
 800dc98:	990a      	ldr	r1, [sp, #40]	@ 0x28
 800dc9a:	f101 0210 	add.w	r2, r1, #16
 800dc9e:	f101 0c08 	add.w	ip, r1, #8
 800dca2:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
 800dca6:	9a01      	ldr	r2, [sp, #4]
 800dca8:	9306      	str	r3, [sp, #24]
 800dcaa:	9b1f      	ldr	r3, [sp, #124]	@ 0x7c
 800dcac:	f103 0e04 	add.w	lr, r3, #4
 800dcb0:	9b20      	ldr	r3, [sp, #128]	@ 0x80
 800dcb2:	f103 0508 	add.w	r5, r3, #8
 800dcb6:	9b21      	ldr	r3, [sp, #132]	@ 0x84
 800dcb8:	f103 0408 	add.w	r4, r3, #8
 800dcbc:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 800dcbe:	1c5e      	adds	r6, r3, #1
 800dcc0:	013b      	lsls	r3, r7, #4
 800dcc2:	9307      	str	r3, [sp, #28]
 800dcc4:	9b04      	ldr	r3, [sp, #16]
 800dcc6:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 800dcca:	9308      	str	r3, [sp, #32]
 800dccc:	0093      	lsls	r3, r2, #2
 800dcce:	9309      	str	r3, [sp, #36]	@ 0x24
 800dcd0:	f85c 3c08 	ldr.w	r3, [ip, #-8]
 800dcd4:	f85c 2c04 	ldr.w	r2, [ip, #-4]
 800dcd8:	9311      	str	r3, [sp, #68]	@ 0x44
 800dcda:	9903      	ldr	r1, [sp, #12]
 800dcdc:	9b11      	ldr	r3, [sp, #68]	@ 0x44
 800dcde:	9211      	str	r2, [sp, #68]	@ 0x44
 800dce0:	9a11      	ldr	r2, [sp, #68]	@ 0x44
 800dce2:	2900      	cmp	r1, #0
 800dce4:	f000 8146 	beq.w	800df74 <st_sssa8_ch_nn_mat_mult_kernel_single_opt+0x32c>
 800dce8:	4688      	mov	r8, r1
 800dcea:	9f04      	ldr	r7, [sp, #16]
 800dcec:	4601      	mov	r1, r0
 800dcee:	f8d7 9000 	ldr.w	r9, [r7]
 800dcf2:	f8d1 a000 	ldr.w	sl, [r1]
 800dcf6:	fb2a 3a09 	smlad	sl, sl, r9, r3
 800dcfa:	684b      	ldr	r3, [r1, #4]
 800dcfc:	fb23 2909 	smlad	r9, r3, r9, r2
 800dd00:	f8d7 b004 	ldr.w	fp, [r7, #4]
 800dd04:	3110      	adds	r1, #16
 800dd06:	f851 3c08 	ldr.w	r3, [r1, #-8]
 800dd0a:	3708      	adds	r7, #8
 800dd0c:	f851 2c04 	ldr.w	r2, [r1, #-4]
 800dd10:	fb23 a30b 	smlad	r3, r3, fp, sl
 800dd14:	fb22 920b 	smlad	r2, r2, fp, r9
 800dd18:	f1b8 0801 	subs.w	r8, r8, #1
 800dd1c:	d1e7      	bne.n	800dcee <st_sssa8_ch_nn_mat_mult_kernel_single_opt+0xa6>
 800dd1e:	9907      	ldr	r1, [sp, #28]
 800dd20:	4408      	add	r0, r1
 800dd22:	9908      	ldr	r1, [sp, #32]
 800dd24:	9f01      	ldr	r7, [sp, #4]
 800dd26:	b31f      	cbz	r7, 800dd70 <st_sssa8_ch_nn_mat_mult_kernel_single_opt+0x128>
 800dd28:	f9b1 7000 	ldrsh.w	r7, [r1]
 800dd2c:	f8b0 8000 	ldrh.w	r8, [r0]
 800dd30:	fb17 3308 	smlabb	r3, r7, r8, r3
 800dd34:	f8b0 8002 	ldrh.w	r8, [r0, #2]
 800dd38:	fb18 2207 	smlabb	r2, r8, r7, r2
 800dd3c:	9f01      	ldr	r7, [sp, #4]
 800dd3e:	2f01      	cmp	r7, #1
 800dd40:	d014      	beq.n	800dd6c <st_sssa8_ch_nn_mat_mult_kernel_single_opt+0x124>
 800dd42:	f9b1 7002 	ldrsh.w	r7, [r1, #2]
 800dd46:	f8b0 8004 	ldrh.w	r8, [r0, #4]
 800dd4a:	fb17 3308 	smlabb	r3, r7, r8, r3
 800dd4e:	f8b0 8006 	ldrh.w	r8, [r0, #6]
 800dd52:	fb18 2207 	smlabb	r2, r8, r7, r2
 800dd56:	9f01      	ldr	r7, [sp, #4]
 800dd58:	2f02      	cmp	r7, #2
 800dd5a:	d007      	beq.n	800dd6c <st_sssa8_ch_nn_mat_mult_kernel_single_opt+0x124>
 800dd5c:	f9b1 1004 	ldrsh.w	r1, [r1, #4]
 800dd60:	8907      	ldrh	r7, [r0, #8]
 800dd62:	fb17 3301 	smlabb	r3, r7, r1, r3
 800dd66:	8947      	ldrh	r7, [r0, #10]
 800dd68:	fb11 2207 	smlabb	r2, r1, r7, r2
 800dd6c:	9909      	ldr	r1, [sp, #36]	@ 0x24
 800dd6e:	4408      	add	r0, r1
 800dd70:	f93e 9c04 	ldrsh.w	r9, [lr, #-4]
 800dd74:	f1b9 0f15 	cmp.w	r9, #21
 800dd78:	f340 80af 	ble.w	800deda <st_sssa8_ch_nn_mat_mult_kernel_single_opt+0x292>
 800dd7c:	f109 38ff 	add.w	r8, r9, #4294967295
 800dd80:	f1a9 0702 	sub.w	r7, r9, #2
 800dd84:	2101      	movs	r1, #1
 800dd86:	fa01 f707 	lsl.w	r7, r1, r7
 800dd8a:	f855 1c08 	ldr.w	r1, [r5, #-8]
 800dd8e:	fb53 7101 	smmla	r1, r3, r1, r7
 800dd92:	f854 3c08 	ldr.w	r3, [r4, #-8]
 800dd96:	fa41 f108 	asr.w	r1, r1, r8
 800dd9a:	1f27      	subs	r7, r4, #4
 800dd9c:	f1a5 0804 	sub.w	r8, r5, #4
 800dda0:	440b      	add	r3, r1
 800dda2:	f1ae 0102 	sub.w	r1, lr, #2
 800dda6:	f303 0307 	ssat	r3, #8, r3
 800ddaa:	b25b      	sxtb	r3, r3
 800ddac:	f806 3c01 	strb.w	r3, [r6, #-1]
 800ddb0:	f9b1 1000 	ldrsh.w	r1, [r1]
 800ddb4:	2915      	cmp	r1, #21
 800ddb6:	f340 80ab 	ble.w	800df10 <st_sssa8_ch_nn_mat_mult_kernel_single_opt+0x2c8>
 800ddba:	f8d8 3000 	ldr.w	r3, [r8]
 800ddbe:	f04f 0901 	mov.w	r9, #1
 800ddc2:	f8d7 8000 	ldr.w	r8, [r7]
 800ddc6:	1e8f      	subs	r7, r1, #2
 800ddc8:	3901      	subs	r1, #1
 800ddca:	fa09 f707 	lsl.w	r7, r9, r7
 800ddce:	fb52 7303 	smmla	r3, r2, r3, r7
 800ddd2:	410b      	asrs	r3, r1
 800ddd4:	4443      	add	r3, r8
 800ddd6:	f303 0307 	ssat	r3, #8, r3
 800ddda:	b25b      	sxtb	r3, r3
 800dddc:	9a02      	ldr	r2, [sp, #8]
 800ddde:	f10c 0c08 	add.w	ip, ip, #8
 800dde2:	f10e 0e04 	add.w	lr, lr, #4
 800dde6:	3508      	adds	r5, #8
 800dde8:	f802 3c01 	strb.w	r3, [r2, #-1]
 800ddec:	3408      	adds	r4, #8
 800ddee:	9b05      	ldr	r3, [sp, #20]
 800ddf0:	441a      	add	r2, r3
 800ddf2:	441e      	add	r6, r3
 800ddf4:	9b06      	ldr	r3, [sp, #24]
 800ddf6:	9202      	str	r2, [sp, #8]
 800ddf8:	459c      	cmp	ip, r3
 800ddfa:	f47f af69 	bne.w	800dcd0 <st_sssa8_ch_nn_mat_mult_kernel_single_opt+0x88>
 800ddfe:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800de00:	9a23      	ldr	r2, [sp, #140]	@ 0x8c
 800de02:	9905      	ldr	r1, [sp, #20]
 800de04:	fb03 2201 	mla	r2, r3, r1, r2
 800de08:	9223      	str	r2, [sp, #140]	@ 0x8c
 800de0a:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 800de0c:	eb02 02c3 	add.w	r2, r2, r3, lsl #3
 800de10:	920a      	str	r2, [sp, #40]	@ 0x28
 800de12:	9a1f      	ldr	r2, [sp, #124]	@ 0x7c
 800de14:	eb02 0283 	add.w	r2, r2, r3, lsl #2
 800de18:	921f      	str	r2, [sp, #124]	@ 0x7c
 800de1a:	9a20      	ldr	r2, [sp, #128]	@ 0x80
 800de1c:	eb02 02c3 	add.w	r2, r2, r3, lsl #3
 800de20:	9220      	str	r2, [sp, #128]	@ 0x80
 800de22:	9a21      	ldr	r2, [sp, #132]	@ 0x84
 800de24:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
 800de28:	9321      	str	r3, [sp, #132]	@ 0x84
 800de2a:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 800de2c:	07db      	lsls	r3, r3, #31
 800de2e:	d546      	bpl.n	800debe <st_sssa8_ch_nn_mat_mult_kernel_single_opt+0x276>
 800de30:	9a0d      	ldr	r2, [sp, #52]	@ 0x34
 800de32:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800de34:	0896      	lsrs	r6, r2, #2
 800de36:	681b      	ldr	r3, [r3, #0]
 800de38:	f000 80cd 	beq.w	800dfd6 <st_sssa8_ch_nn_mat_mult_kernel_single_opt+0x38e>
 800de3c:	00f7      	lsls	r7, r6, #3
 800de3e:	9904      	ldr	r1, [sp, #16]
 800de40:	eb00 06c6 	add.w	r6, r0, r6, lsl #3
 800de44:	6804      	ldr	r4, [r0, #0]
 800de46:	3008      	adds	r0, #8
 800de48:	f850 2c04 	ldr.w	r2, [r0, #-4]
 800de4c:	680d      	ldr	r5, [r1, #0]
 800de4e:	fb24 3305 	smlad	r3, r4, r5, r3
 800de52:	684c      	ldr	r4, [r1, #4]
 800de54:	3108      	adds	r1, #8
 800de56:	fb22 3304 	smlad	r3, r2, r4, r3
 800de5a:	42b0      	cmp	r0, r6
 800de5c:	d1f2      	bne.n	800de44 <st_sssa8_ch_nn_mat_mult_kernel_single_opt+0x1fc>
 800de5e:	9a04      	ldr	r2, [sp, #16]
 800de60:	443a      	add	r2, r7
 800de62:	9204      	str	r2, [sp, #16]
 800de64:	9a0d      	ldr	r2, [sp, #52]	@ 0x34
 800de66:	f012 0203 	ands.w	r2, r2, #3
 800de6a:	d011      	beq.n	800de90 <st_sssa8_ch_nn_mat_mult_kernel_single_opt+0x248>
 800de6c:	3a01      	subs	r2, #1
 800de6e:	9c04      	ldr	r4, [sp, #16]
 800de70:	8831      	ldrh	r1, [r6, #0]
 800de72:	8820      	ldrh	r0, [r4, #0]
 800de74:	b292      	uxth	r2, r2
 800de76:	fb10 3301 	smlabb	r3, r0, r1, r3
 800de7a:	b14a      	cbz	r2, 800de90 <st_sssa8_ch_nn_mat_mult_kernel_single_opt+0x248>
 800de7c:	8860      	ldrh	r0, [r4, #2]
 800de7e:	2a01      	cmp	r2, #1
 800de80:	8871      	ldrh	r1, [r6, #2]
 800de82:	fb10 3301 	smlabb	r3, r0, r1, r3
 800de86:	d003      	beq.n	800de90 <st_sssa8_ch_nn_mat_mult_kernel_single_opt+0x248>
 800de88:	88b1      	ldrh	r1, [r6, #4]
 800de8a:	88a2      	ldrh	r2, [r4, #4]
 800de8c:	fb11 3302 	smlabb	r3, r1, r2, r3
 800de90:	9a1f      	ldr	r2, [sp, #124]	@ 0x7c
 800de92:	f9b2 2000 	ldrsh.w	r2, [r2]
 800de96:	2a15      	cmp	r2, #21
 800de98:	dd79      	ble.n	800df8e <st_sssa8_ch_nn_mat_mult_kernel_single_opt+0x346>
 800de9a:	9821      	ldr	r0, [sp, #132]	@ 0x84
 800de9c:	1e95      	subs	r5, r2, #2
 800de9e:	9920      	ldr	r1, [sp, #128]	@ 0x80
 800dea0:	3a01      	subs	r2, #1
 800dea2:	6804      	ldr	r4, [r0, #0]
 800dea4:	2001      	movs	r0, #1
 800dea6:	6809      	ldr	r1, [r1, #0]
 800dea8:	40a8      	lsls	r0, r5
 800deaa:	fb53 0301 	smmla	r3, r3, r1, r0
 800deae:	4113      	asrs	r3, r2
 800deb0:	4423      	add	r3, r4
 800deb2:	f303 0307 	ssat	r3, #8, r3
 800deb6:	9a23      	ldr	r2, [sp, #140]	@ 0x8c
 800deb8:	f802 3b01 	strb.w	r3, [r2], #1
 800debc:	9223      	str	r2, [sp, #140]	@ 0x8c
 800debe:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800dec0:	2b00      	cmp	r3, #0
 800dec2:	d05c      	beq.n	800df7e <st_sssa8_ch_nn_mat_mult_kernel_single_opt+0x336>
 800dec4:	9a1c      	ldr	r2, [sp, #112]	@ 0x70
 800dec6:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 800dec8:	fb02 f303 	mul.w	r3, r2, r3
 800decc:	9a23      	ldr	r2, [sp, #140]	@ 0x8c
 800dece:	f1c3 0301 	rsb	r3, r3, #1
 800ded2:	18d0      	adds	r0, r2, r3
 800ded4:	b013      	add	sp, #76	@ 0x4c
 800ded6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800deda:	f1b9 0f00 	cmp.w	r9, #0
 800dede:	dd24      	ble.n	800df2a <st_sssa8_ch_nn_mat_mult_kernel_single_opt+0x2e2>
 800dee0:	f855 1c08 	ldr.w	r1, [r5, #-8]
 800dee4:	005b      	lsls	r3, r3, #1
 800dee6:	f854 7c08 	ldr.w	r7, [r4, #-8]
 800deea:	f1a5 0804 	sub.w	r8, r5, #4
 800deee:	fb53 7301 	smmla	r3, r3, r1, r7
 800def2:	1f27      	subs	r7, r4, #4
 800def4:	fa43 f309 	asr.w	r3, r3, r9
 800def8:	f1ae 0102 	sub.w	r1, lr, #2
 800defc:	f303 0307 	ssat	r3, #8, r3
 800df00:	b25b      	sxtb	r3, r3
 800df02:	f806 3c01 	strb.w	r3, [r6, #-1]
 800df06:	f9b1 1000 	ldrsh.w	r1, [r1]
 800df0a:	2915      	cmp	r1, #21
 800df0c:	f73f af55 	bgt.w	800ddba <st_sssa8_ch_nn_mat_mult_kernel_single_opt+0x172>
 800df10:	2900      	cmp	r1, #0
 800df12:	dd20      	ble.n	800df56 <st_sssa8_ch_nn_mat_mult_kernel_single_opt+0x30e>
 800df14:	0053      	lsls	r3, r2, #1
 800df16:	683f      	ldr	r7, [r7, #0]
 800df18:	f8d8 2000 	ldr.w	r2, [r8]
 800df1c:	fb53 7302 	smmla	r3, r3, r2, r7
 800df20:	410b      	asrs	r3, r1
 800df22:	f303 0307 	ssat	r3, #8, r3
 800df26:	b25b      	sxtb	r3, r3
 800df28:	e758      	b.n	800dddc <st_sssa8_ch_nn_mat_mult_kernel_single_opt+0x194>
 800df2a:	f1c9 0701 	rsb	r7, r9, #1
 800df2e:	f1ae 0102 	sub.w	r1, lr, #2
 800df32:	fa03 f707 	lsl.w	r7, r3, r7
 800df36:	f307 071f 	ssat	r7, #32, r7
 800df3a:	f1a5 0804 	sub.w	r8, r5, #4
 800df3e:	f855 3c08 	ldr.w	r3, [r5, #-8]
 800df42:	fb57 f713 	smmulr	r7, r7, r3
 800df46:	f854 3c08 	ldr.w	r3, [r4, #-8]
 800df4a:	443b      	add	r3, r7
 800df4c:	1f27      	subs	r7, r4, #4
 800df4e:	f303 0307 	ssat	r3, #8, r3
 800df52:	b25b      	sxtb	r3, r3
 800df54:	e72a      	b.n	800ddac <st_sssa8_ch_nn_mat_mult_kernel_single_opt+0x164>
 800df56:	f1c1 0101 	rsb	r1, r1, #1
 800df5a:	408a      	lsls	r2, r1
 800df5c:	f302 021f 	ssat	r2, #32, r2
 800df60:	f8d8 3000 	ldr.w	r3, [r8]
 800df64:	fb52 f313 	smmulr	r3, r2, r3
 800df68:	683a      	ldr	r2, [r7, #0]
 800df6a:	4413      	add	r3, r2
 800df6c:	f303 0307 	ssat	r3, #8, r3
 800df70:	b25b      	sxtb	r3, r3
 800df72:	e733      	b.n	800dddc <st_sssa8_ch_nn_mat_mult_kernel_single_opt+0x194>
 800df74:	9904      	ldr	r1, [sp, #16]
 800df76:	e6d5      	b.n	800dd24 <st_sssa8_ch_nn_mat_mult_kernel_single_opt+0xdc>
 800df78:	2101      	movs	r1, #1
 800df7a:	4613      	mov	r3, r2
 800df7c:	e67b      	b.n	800dc76 <st_sssa8_ch_nn_mat_mult_kernel_single_opt+0x2e>
 800df7e:	9a0c      	ldr	r2, [sp, #48]	@ 0x30
 800df80:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800df82:	1a9b      	subs	r3, r3, r2
 800df84:	9a23      	ldr	r2, [sp, #140]	@ 0x8c
 800df86:	18d0      	adds	r0, r2, r3
 800df88:	b013      	add	sp, #76	@ 0x4c
 800df8a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800df8e:	2a00      	cmp	r2, #0
 800df90:	dd0e      	ble.n	800dfb0 <st_sssa8_ch_nn_mat_mult_kernel_single_opt+0x368>
 800df92:	9920      	ldr	r1, [sp, #128]	@ 0x80
 800df94:	005b      	lsls	r3, r3, #1
 800df96:	9821      	ldr	r0, [sp, #132]	@ 0x84
 800df98:	6809      	ldr	r1, [r1, #0]
 800df9a:	6800      	ldr	r0, [r0, #0]
 800df9c:	fb53 0301 	smmla	r3, r3, r1, r0
 800dfa0:	4113      	asrs	r3, r2
 800dfa2:	f303 0307 	ssat	r3, #8, r3
 800dfa6:	9a23      	ldr	r2, [sp, #140]	@ 0x8c
 800dfa8:	f802 3b01 	strb.w	r3, [r2], #1
 800dfac:	9223      	str	r2, [sp, #140]	@ 0x8c
 800dfae:	e786      	b.n	800debe <st_sssa8_ch_nn_mat_mult_kernel_single_opt+0x276>
 800dfb0:	f1c2 0201 	rsb	r2, r2, #1
 800dfb4:	4093      	lsls	r3, r2
 800dfb6:	f303 031f 	ssat	r3, #32, r3
 800dfba:	9a20      	ldr	r2, [sp, #128]	@ 0x80
 800dfbc:	6812      	ldr	r2, [r2, #0]
 800dfbe:	fb53 f312 	smmulr	r3, r3, r2
 800dfc2:	9a21      	ldr	r2, [sp, #132]	@ 0x84
 800dfc4:	6812      	ldr	r2, [r2, #0]
 800dfc6:	4413      	add	r3, r2
 800dfc8:	f303 0307 	ssat	r3, #8, r3
 800dfcc:	9a23      	ldr	r2, [sp, #140]	@ 0x8c
 800dfce:	f802 3b01 	strb.w	r3, [r2], #1
 800dfd2:	9223      	str	r2, [sp, #140]	@ 0x8c
 800dfd4:	e773      	b.n	800debe <st_sssa8_ch_nn_mat_mult_kernel_single_opt+0x276>
 800dfd6:	4606      	mov	r6, r0
 800dfd8:	e744      	b.n	800de64 <st_sssa8_ch_nn_mat_mult_kernel_single_opt+0x21c>
 800dfda:	bf00      	nop

0800dfdc <st_sssa8_ch_nn_mat_mult_kernel_opt>:
 800dfdc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800dfe0:	b086      	sub	sp, #24
 800dfe2:	f89d 7058 	ldrb.w	r7, [sp, #88]	@ 0x58
 800dfe6:	9100      	str	r1, [sp, #0]
 800dfe8:	9203      	str	r2, [sp, #12]
 800dfea:	2f00      	cmp	r7, #0
 800dfec:	9305      	str	r3, [sp, #20]
 800dfee:	bf18      	it	ne
 800dff0:	2301      	movne	r3, #1
 800dff2:	9c10      	ldr	r4, [sp, #64]	@ 0x40
 800dff4:	fb04 3303 	mla	r3, r4, r3, r3
 800dff8:	9304      	str	r3, [sp, #16]
 800dffa:	9d0f      	ldr	r5, [sp, #60]	@ 0x3c
 800dffc:	bf14      	ite	ne
 800dffe:	462f      	movne	r7, r5
 800e000:	2701      	moveq	r7, #1
 800e002:	9701      	str	r7, [sp, #4]
 800e004:	f8bd 3044 	ldrh.w	r3, [sp, #68]	@ 0x44
 800e008:	085b      	lsrs	r3, r3, #1
 800e00a:	f000 809f 	beq.w	800e14c <st_sssa8_ch_nn_mat_mult_kernel_opt+0x170>
 800e00e:	f8dd b050 	ldr.w	fp, [sp, #80]	@ 0x50
 800e012:	9a13      	ldr	r2, [sp, #76]	@ 0x4c
 800e014:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 800e018:	9302      	str	r3, [sp, #8]
 800e01a:	f8dd e048 	ldr.w	lr, [sp, #72]	@ 0x48
 800e01e:	9f03      	ldr	r7, [sp, #12]
 800e020:	ea5f 089e 	movs.w	r8, lr, lsr #2
 800e024:	f8dd c000 	ldr.w	ip, [sp]
 800e028:	f857 6b04 	ldr.w	r6, [r7], #4
 800e02c:	f857 3b04 	ldr.w	r3, [r7], #4
 800e030:	9703      	str	r7, [sp, #12]
 800e032:	461a      	mov	r2, r3
 800e034:	4631      	mov	r1, r6
 800e036:	d022      	beq.n	800e07e <st_sssa8_ch_nn_mat_mult_kernel_opt+0xa2>
 800e038:	f85c 701e 	ldr.w	r7, [ip, lr, lsl #1]
 800e03c:	f85c 9b04 	ldr.w	r9, [ip], #4
 800e040:	f850 ab04 	ldr.w	sl, [r0], #4
 800e044:	fb2a 6609 	smlad	r6, sl, r9, r6
 800e048:	f850 5b04 	ldr.w	r5, [r0], #4
 800e04c:	fb2a 1107 	smlad	r1, sl, r7, r1
 800e050:	f850 ab04 	ldr.w	sl, [r0], #4
 800e054:	fb25 2207 	smlad	r2, r5, r7, r2
 800e058:	f85c 701e 	ldr.w	r7, [ip, lr, lsl #1]
 800e05c:	fb25 3309 	smlad	r3, r5, r9, r3
 800e060:	f85c 9b04 	ldr.w	r9, [ip], #4
 800e064:	fb2a 6609 	smlad	r6, sl, r9, r6
 800e068:	fb2a 1107 	smlad	r1, sl, r7, r1
 800e06c:	f850 5b04 	ldr.w	r5, [r0], #4
 800e070:	fb25 3309 	smlad	r3, r5, r9, r3
 800e074:	f1b8 0801 	subs.w	r8, r8, #1
 800e078:	fb25 2207 	smlad	r2, r5, r7, r2
 800e07c:	d1dc      	bne.n	800e038 <st_sssa8_ch_nn_mat_mult_kernel_opt+0x5c>
 800e07e:	f00e 0703 	and.w	r7, lr, #3
 800e082:	b18f      	cbz	r7, 800e0a8 <st_sssa8_ch_nn_mat_mult_kernel_opt+0xcc>
 800e084:	f93c 801e 	ldrsh.w	r8, [ip, lr, lsl #1]
 800e088:	f93c ab02 	ldrsh.w	sl, [ip], #2
 800e08c:	f930 5b02 	ldrsh.w	r5, [r0], #2
 800e090:	fb0a 6605 	mla	r6, sl, r5, r6
 800e094:	f930 9b02 	ldrsh.w	r9, [r0], #2
 800e098:	fb09 330a 	mla	r3, r9, sl, r3
 800e09c:	fb08 1105 	mla	r1, r8, r5, r1
 800e0a0:	3f01      	subs	r7, #1
 800e0a2:	fb09 2208 	mla	r2, r9, r8, r2
 800e0a6:	dced      	bgt.n	800e084 <st_sssa8_ch_nn_mat_mult_kernel_opt+0xa8>
 800e0a8:	f8dd a04c 	ldr.w	sl, [sp, #76]	@ 0x4c
 800e0ac:	9f15      	ldr	r7, [sp, #84]	@ 0x54
 800e0ae:	f93a 4b02 	ldrsh.w	r4, [sl], #2
 800e0b2:	f857 cb04 	ldr.w	ip, [r7], #4
 800e0b6:	f85b 5b04 	ldr.w	r5, [fp], #4
 800e0ba:	f1c4 0915 	rsb	r9, r4, #21
 800e0be:	ea99 0904 	eors.w	r9, r9, r4
 800e0c2:	f340 80c8 	ble.w	800e256 <st_sssa8_ch_nn_mat_mult_kernel_opt+0x27a>
 800e0c6:	ea4f 0646 	mov.w	r6, r6, lsl #1
 800e0ca:	ea4f 0141 	mov.w	r1, r1, lsl #1
 800e0ce:	fb56 c605 	smmla	r6, r6, r5, ip
 800e0d2:	fb51 c105 	smmla	r1, r1, r5, ip
 800e0d6:	fa46 f604 	asr.w	r6, r6, r4
 800e0da:	fa41 f104 	asr.w	r1, r1, r4
 800e0de:	f93a 4b02 	ldrsh.w	r4, [sl], #2
 800e0e2:	f857 cb04 	ldr.w	ip, [r7], #4
 800e0e6:	f85b 5b04 	ldr.w	r5, [fp], #4
 800e0ea:	f1c4 0915 	rsb	r9, r4, #21
 800e0ee:	ea99 0904 	eors.w	r9, r9, r4
 800e0f2:	f340 8099 	ble.w	800e228 <st_sssa8_ch_nn_mat_mult_kernel_opt+0x24c>
 800e0f6:	ea4f 0343 	mov.w	r3, r3, lsl #1
 800e0fa:	ea4f 0242 	mov.w	r2, r2, lsl #1
 800e0fe:	fb53 c305 	smmla	r3, r3, r5, ip
 800e102:	fb52 c205 	smmla	r2, r2, r5, ip
 800e106:	fa43 f304 	asr.w	r3, r3, r4
 800e10a:	fa42 f204 	asr.w	r2, r2, r4
 800e10e:	f306 0607 	ssat	r6, #8, r6
 800e112:	f8dd 9004 	ldr.w	r9, [sp, #4]
 800e116:	9c17      	ldr	r4, [sp, #92]	@ 0x5c
 800e118:	f8dd 8010 	ldr.w	r8, [sp, #16]
 800e11c:	7026      	strb	r6, [r4, #0]
 800e11e:	44a0      	add	r8, r4
 800e120:	f301 0107 	ssat	r1, #8, r1
 800e124:	f888 1000 	strb.w	r1, [r8]
 800e128:	f303 0307 	ssat	r3, #8, r3
 800e12c:	f804 3009 	strb.w	r3, [r4, r9]
 800e130:	f302 0207 	ssat	r2, #8, r2
 800e134:	f808 2009 	strb.w	r2, [r8, r9]
 800e138:	eb04 0249 	add.w	r2, r4, r9, lsl #1
 800e13c:	9217      	str	r2, [sp, #92]	@ 0x5c
 800e13e:	f8cd a04c 	str.w	sl, [sp, #76]	@ 0x4c
 800e142:	9c02      	ldr	r4, [sp, #8]
 800e144:	9715      	str	r7, [sp, #84]	@ 0x54
 800e146:	45a2      	cmp	sl, r4
 800e148:	f47f af67 	bne.w	800e01a <st_sssa8_ch_nn_mat_mult_kernel_opt+0x3e>
 800e14c:	9b11      	ldr	r3, [sp, #68]	@ 0x44
 800e14e:	f013 0301 	ands.w	r3, r3, #1
 800e152:	d054      	beq.n	800e1fe <st_sssa8_ch_nn_mat_mult_kernel_opt+0x222>
 800e154:	f8bd e048 	ldrh.w	lr, [sp, #72]	@ 0x48
 800e158:	9b03      	ldr	r3, [sp, #12]
 800e15a:	f8dd c000 	ldr.w	ip, [sp]
 800e15e:	6819      	ldr	r1, [r3, #0]
 800e160:	ea5f 079e 	movs.w	r7, lr, lsr #2
 800e164:	eb0c 044e 	add.w	r4, ip, lr, lsl #1
 800e168:	460e      	mov	r6, r1
 800e16a:	d015      	beq.n	800e198 <st_sssa8_ch_nn_mat_mult_kernel_opt+0x1bc>
 800e16c:	f85c 501e 	ldr.w	r5, [ip, lr, lsl #1]
 800e170:	f85c 8b04 	ldr.w	r8, [ip], #4
 800e174:	f850 ab04 	ldr.w	sl, [r0], #4
 800e178:	f850 3b04 	ldr.w	r3, [r0], #4
 800e17c:	fb2a 6608 	smlad	r6, sl, r8, r6
 800e180:	fb2a 1105 	smlad	r1, sl, r5, r1
 800e184:	f85c a01e 	ldr.w	sl, [ip, lr, lsl #1]
 800e188:	f85c 8b04 	ldr.w	r8, [ip], #4
 800e18c:	fb23 6608 	smlad	r6, r3, r8, r6
 800e190:	fb23 110a 	smlad	r1, r3, sl, r1
 800e194:	3f01      	subs	r7, #1
 800e196:	d1e9      	bne.n	800e16c <st_sssa8_ch_nn_mat_mult_kernel_opt+0x190>
 800e198:	f01e 0703 	ands.w	r7, lr, #3
 800e19c:	d00b      	beq.n	800e1b6 <st_sssa8_ch_nn_mat_mult_kernel_opt+0x1da>
 800e19e:	f83c 301e 	ldrh.w	r3, [ip, lr, lsl #1]
 800e1a2:	f83c 9b02 	ldrh.w	r9, [ip], #2
 800e1a6:	f930 ab02 	ldrsh.w	sl, [r0], #2
 800e1aa:	fb19 660a 	smlabb	r6, r9, sl, r6
 800e1ae:	3f01      	subs	r7, #1
 800e1b0:	fb13 110a 	smlabb	r1, r3, sl, r1
 800e1b4:	dcf3      	bgt.n	800e19e <st_sssa8_ch_nn_mat_mult_kernel_opt+0x1c2>
 800e1b6:	f8dd a04c 	ldr.w	sl, [sp, #76]	@ 0x4c
 800e1ba:	9f15      	ldr	r7, [sp, #84]	@ 0x54
 800e1bc:	f9ba 4000 	ldrsh.w	r4, [sl]
 800e1c0:	f8d7 c000 	ldr.w	ip, [r7]
 800e1c4:	f8db 5000 	ldr.w	r5, [fp]
 800e1c8:	f1c4 0915 	rsb	r9, r4, #21
 800e1cc:	ea99 0904 	eors.w	r9, r9, r4
 800e1d0:	dd58      	ble.n	800e284 <st_sssa8_ch_nn_mat_mult_kernel_opt+0x2a8>
 800e1d2:	ea4f 0646 	mov.w	r6, r6, lsl #1
 800e1d6:	ea4f 0141 	mov.w	r1, r1, lsl #1
 800e1da:	fb56 c605 	smmla	r6, r6, r5, ip
 800e1de:	fb51 c105 	smmla	r1, r1, r5, ip
 800e1e2:	fa46 f604 	asr.w	r6, r6, r4
 800e1e6:	fa41 f104 	asr.w	r1, r1, r4
 800e1ea:	f306 0607 	ssat	r6, #8, r6
 800e1ee:	9a17      	ldr	r2, [sp, #92]	@ 0x5c
 800e1f0:	9c04      	ldr	r4, [sp, #16]
 800e1f2:	7016      	strb	r6, [r2, #0]
 800e1f4:	f301 0107 	ssat	r1, #8, r1
 800e1f8:	5511      	strb	r1, [r2, r4]
 800e1fa:	9b01      	ldr	r3, [sp, #4]
 800e1fc:	441a      	add	r2, r3
 800e1fe:	9911      	ldr	r1, [sp, #68]	@ 0x44
 800e200:	9b16      	ldr	r3, [sp, #88]	@ 0x58
 800e202:	9c10      	ldr	r4, [sp, #64]	@ 0x40
 800e204:	b133      	cbz	r3, 800e214 <st_sssa8_ch_nn_mat_mult_kernel_opt+0x238>
 800e206:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800e208:	f104 0002 	add.w	r0, r4, #2
 800e20c:	fb03 0011 	mls	r0, r3, r1, r0
 800e210:	4410      	add	r0, r2
 800e212:	e006      	b.n	800e222 <st_sssa8_ch_nn_mat_mult_kernel_opt+0x246>
 800e214:	eba2 0001 	sub.w	r0, r2, r1
 800e218:	9a05      	ldr	r2, [sp, #20]
 800e21a:	f104 0402 	add.w	r4, r4, #2
 800e21e:	fb02 0004 	mla	r0, r2, r4, r0
 800e222:	b006      	add	sp, #24
 800e224:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800e228:	2c00      	cmp	r4, #0
 800e22a:	dd42      	ble.n	800e2b2 <st_sssa8_ch_nn_mat_mult_kernel_opt+0x2d6>
 800e22c:	f04f 0901 	mov.w	r9, #1
 800e230:	fa09 f904 	lsl.w	r9, r9, r4
 800e234:	ea4f 09a9 	mov.w	r9, r9, asr #2
 800e238:	fb53 9305 	smmla	r3, r3, r5, r9
 800e23c:	ea4f 0343 	mov.w	r3, r3, lsl #1
 800e240:	fa43 f304 	asr.w	r3, r3, r4
 800e244:	4463      	add	r3, ip
 800e246:	fb52 9205 	smmla	r2, r2, r5, r9
 800e24a:	ea4f 0242 	mov.w	r2, r2, lsl #1
 800e24e:	fa42 f204 	asr.w	r2, r2, r4
 800e252:	4462      	add	r2, ip
 800e254:	e75b      	b.n	800e10e <st_sssa8_ch_nn_mat_mult_kernel_opt+0x132>
 800e256:	2c00      	cmp	r4, #0
 800e258:	dd3c      	ble.n	800e2d4 <st_sssa8_ch_nn_mat_mult_kernel_opt+0x2f8>
 800e25a:	f04f 0901 	mov.w	r9, #1
 800e25e:	fa09 f904 	lsl.w	r9, r9, r4
 800e262:	ea4f 09a9 	mov.w	r9, r9, asr #2
 800e266:	fb56 9605 	smmla	r6, r6, r5, r9
 800e26a:	ea4f 0646 	mov.w	r6, r6, lsl #1
 800e26e:	fa46 f604 	asr.w	r6, r6, r4
 800e272:	4466      	add	r6, ip
 800e274:	fb51 9105 	smmla	r1, r1, r5, r9
 800e278:	ea4f 0141 	mov.w	r1, r1, lsl #1
 800e27c:	fa41 f104 	asr.w	r1, r1, r4
 800e280:	4461      	add	r1, ip
 800e282:	e72c      	b.n	800e0de <st_sssa8_ch_nn_mat_mult_kernel_opt+0x102>
 800e284:	2c00      	cmp	r4, #0
 800e286:	dd36      	ble.n	800e2f6 <st_sssa8_ch_nn_mat_mult_kernel_opt+0x31a>
 800e288:	f04f 0901 	mov.w	r9, #1
 800e28c:	fa09 f904 	lsl.w	r9, r9, r4
 800e290:	ea4f 09a9 	mov.w	r9, r9, asr #2
 800e294:	fb56 9605 	smmla	r6, r6, r5, r9
 800e298:	ea4f 0646 	mov.w	r6, r6, lsl #1
 800e29c:	fa46 f604 	asr.w	r6, r6, r4
 800e2a0:	4466      	add	r6, ip
 800e2a2:	fb51 9105 	smmla	r1, r1, r5, r9
 800e2a6:	ea4f 0141 	mov.w	r1, r1, lsl #1
 800e2aa:	fa41 f104 	asr.w	r1, r1, r4
 800e2ae:	4461      	add	r1, ip
 800e2b0:	e79b      	b.n	800e1ea <st_sssa8_ch_nn_mat_mult_kernel_opt+0x20e>
 800e2b2:	f1c4 0901 	rsb	r9, r4, #1
 800e2b6:	fa03 f309 	lsl.w	r3, r3, r9
 800e2ba:	f303 031f 	ssat	r3, #32, r3
 800e2be:	fb53 f315 	smmulr	r3, r3, r5
 800e2c2:	fa02 f209 	lsl.w	r2, r2, r9
 800e2c6:	f302 021f 	ssat	r2, #32, r2
 800e2ca:	fb52 f215 	smmulr	r2, r2, r5
 800e2ce:	4463      	add	r3, ip
 800e2d0:	4462      	add	r2, ip
 800e2d2:	e71c      	b.n	800e10e <st_sssa8_ch_nn_mat_mult_kernel_opt+0x132>
 800e2d4:	f1c4 0901 	rsb	r9, r4, #1
 800e2d8:	fa06 f609 	lsl.w	r6, r6, r9
 800e2dc:	f306 061f 	ssat	r6, #32, r6
 800e2e0:	fb56 f615 	smmulr	r6, r6, r5
 800e2e4:	fa01 f109 	lsl.w	r1, r1, r9
 800e2e8:	f301 011f 	ssat	r1, #32, r1
 800e2ec:	fb51 f115 	smmulr	r1, r1, r5
 800e2f0:	4466      	add	r6, ip
 800e2f2:	4461      	add	r1, ip
 800e2f4:	e6f3      	b.n	800e0de <st_sssa8_ch_nn_mat_mult_kernel_opt+0x102>
 800e2f6:	f1c4 0901 	rsb	r9, r4, #1
 800e2fa:	fa06 f609 	lsl.w	r6, r6, r9
 800e2fe:	f306 061f 	ssat	r6, #32, r6
 800e302:	fb56 f615 	smmulr	r6, r6, r5
 800e306:	fa01 f109 	lsl.w	r1, r1, r9
 800e30a:	f301 011f 	ssat	r1, #32, r1
 800e30e:	fb51 f115 	smmulr	r1, r1, r5
 800e312:	4466      	add	r6, ip
 800e314:	4461      	add	r1, ip
 800e316:	e768      	b.n	800e1ea <st_sssa8_ch_nn_mat_mult_kernel_opt+0x20e>

0800e318 <ai_array_to_buffer_fmt>:
 800e318:	f3c0 4343 	ubfx	r3, r0, #17, #4
 800e31c:	2b02      	cmp	r3, #2
 800e31e:	d055      	beq.n	800e3cc <ai_array_to_buffer_fmt+0xb4>
 800e320:	f020 437e 	bic.w	r3, r0, #4261412864	@ 0xfe000000
 800e324:	4a2c      	ldr	r2, [pc, #176]	@ (800e3d8 <ai_array_to_buffer_fmt+0xc0>)
 800e326:	4293      	cmp	r3, r2
 800e328:	d010      	beq.n	800e34c <ai_array_to_buffer_fmt+0x34>
 800e32a:	dc21      	bgt.n	800e370 <ai_array_to_buffer_fmt+0x58>
 800e32c:	4a2b      	ldr	r2, [pc, #172]	@ (800e3dc <ai_array_to_buffer_fmt+0xc4>)
 800e32e:	4293      	cmp	r3, r2
 800e330:	d00c      	beq.n	800e34c <ai_array_to_buffer_fmt+0x34>
 800e332:	dd0f      	ble.n	800e354 <ai_array_to_buffer_fmt+0x3c>
 800e334:	4a2a      	ldr	r2, [pc, #168]	@ (800e3e0 <ai_array_to_buffer_fmt+0xc8>)
 800e336:	4293      	cmp	r3, r2
 800e338:	d008      	beq.n	800e34c <ai_array_to_buffer_fmt+0x34>
 800e33a:	f502 32fa 	add.w	r2, r2, #128000	@ 0x1f400
 800e33e:	4293      	cmp	r3, r2
 800e340:	d004      	beq.n	800e34c <ai_array_to_buffer_fmt+0x34>
 800e342:	4a28      	ldr	r2, [pc, #160]	@ (800e3e4 <ai_array_to_buffer_fmt+0xcc>)
 800e344:	4293      	cmp	r3, r2
 800e346:	bf0c      	ite	eq
 800e348:	4613      	moveq	r3, r2
 800e34a:	2340      	movne	r3, #64	@ 0x40
 800e34c:	f000 40d0 	and.w	r0, r0, #1744830464	@ 0x68000000
 800e350:	4318      	orrs	r0, r3
 800e352:	4770      	bx	lr
 800e354:	f5a2 6280 	sub.w	r2, r2, #1024	@ 0x400
 800e358:	4293      	cmp	r3, r2
 800e35a:	d0f7      	beq.n	800e34c <ai_array_to_buffer_fmt+0x34>
 800e35c:	dd2c      	ble.n	800e3b8 <ai_array_to_buffer_fmt+0xa0>
 800e35e:	4a22      	ldr	r2, [pc, #136]	@ (800e3e8 <ai_array_to_buffer_fmt+0xd0>)
 800e360:	f000 40d0 	and.w	r0, r0, #1744830464	@ 0x68000000
 800e364:	4293      	cmp	r3, r2
 800e366:	bf0c      	ite	eq
 800e368:	4613      	moveq	r3, r2
 800e36a:	2340      	movne	r3, #64	@ 0x40
 800e36c:	4318      	orrs	r0, r3
 800e36e:	4770      	bx	lr
 800e370:	4a1e      	ldr	r2, [pc, #120]	@ (800e3ec <ai_array_to_buffer_fmt+0xd4>)
 800e372:	4293      	cmp	r3, r2
 800e374:	d0ea      	beq.n	800e34c <ai_array_to_buffer_fmt+0x34>
 800e376:	dd10      	ble.n	800e39a <ai_array_to_buffer_fmt+0x82>
 800e378:	4a1d      	ldr	r2, [pc, #116]	@ (800e3f0 <ai_array_to_buffer_fmt+0xd8>)
 800e37a:	4293      	cmp	r3, r2
 800e37c:	d0e6      	beq.n	800e34c <ai_array_to_buffer_fmt+0x34>
 800e37e:	f202 72f1 	addw	r2, r2, #2033	@ 0x7f1
 800e382:	4293      	cmp	r3, r2
 800e384:	d0e2      	beq.n	800e34c <ai_array_to_buffer_fmt+0x34>
 800e386:	f5a2 6200 	sub.w	r2, r2, #2048	@ 0x800
 800e38a:	f000 40d0 	and.w	r0, r0, #1744830464	@ 0x68000000
 800e38e:	4293      	cmp	r3, r2
 800e390:	bf0c      	ite	eq
 800e392:	4613      	moveq	r3, r2
 800e394:	2340      	movne	r3, #64	@ 0x40
 800e396:	4318      	orrs	r0, r3
 800e398:	4770      	bx	lr
 800e39a:	f2a2 3287 	subw	r2, r2, #903	@ 0x387
 800e39e:	4293      	cmp	r3, r2
 800e3a0:	d0d4      	beq.n	800e34c <ai_array_to_buffer_fmt+0x34>
 800e3a2:	f502 7260 	add.w	r2, r2, #896	@ 0x380
 800e3a6:	4293      	cmp	r3, r2
 800e3a8:	d0d0      	beq.n	800e34c <ai_array_to_buffer_fmt+0x34>
 800e3aa:	f5a2 6280 	sub.w	r2, r2, #1024	@ 0x400
 800e3ae:	4293      	cmp	r3, r2
 800e3b0:	bf0c      	ite	eq
 800e3b2:	4613      	moveq	r3, r2
 800e3b4:	2340      	movne	r3, #64	@ 0x40
 800e3b6:	e7c9      	b.n	800e34c <ai_array_to_buffer_fmt+0x34>
 800e3b8:	f5a2 6280 	sub.w	r2, r2, #1024	@ 0x400
 800e3bc:	4293      	cmp	r3, r2
 800e3be:	d0c5      	beq.n	800e34c <ai_array_to_buffer_fmt+0x34>
 800e3c0:	3280      	adds	r2, #128	@ 0x80
 800e3c2:	4293      	cmp	r3, r2
 800e3c4:	bf0c      	ite	eq
 800e3c6:	4613      	moveq	r3, r2
 800e3c8:	2340      	movne	r3, #64	@ 0x40
 800e3ca:	e7bf      	b.n	800e34c <ai_array_to_buffer_fmt+0x34>
 800e3cc:	4b09      	ldr	r3, [pc, #36]	@ (800e3f4 <ai_array_to_buffer_fmt+0xdc>)
 800e3ce:	4003      	ands	r3, r0
 800e3d0:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 800e3d4:	e7ba      	b.n	800e34c <ai_array_to_buffer_fmt+0x34>
 800e3d6:	bf00      	nop
 800e3d8:	00821040 	.word	0x00821040
 800e3dc:	00040840 	.word	0x00040840
 800e3e0:	00041040 	.word	0x00041040
 800e3e4:	0004084f 	.word	0x0004084f
 800e3e8:	00040447 	.word	0x00040447
 800e3ec:	00840447 	.word	0x00840447
 800e3f0:	0084084f 	.word	0x0084084f
 800e3f4:	00803fff 	.word	0x00803fff

0800e3f8 <ai_array_get_byte_size>:
 800e3f8:	b321      	cbz	r1, 800e444 <ai_array_get_byte_size+0x4c>
 800e3fa:	f3c0 13c6 	ubfx	r3, r0, #7, #7
 800e3fe:	f46f 7288 	mvn.w	r2, #272	@ 0x110
 800e402:	f3c0 5c41 	ubfx	ip, r0, #21, #2
 800e406:	fb03 f101 	mul.w	r1, r3, r1
 800e40a:	b500      	push	{lr}
 800e40c:	f3c0 4e43 	ubfx	lr, r0, #17, #4
 800e410:	3107      	adds	r1, #7
 800e412:	11c0      	asrs	r0, r0, #7
 800e414:	fa42 f20e 	asr.w	r2, r2, lr
 800e418:	f021 0107 	bic.w	r1, r1, #7
 800e41c:	07d2      	lsls	r2, r2, #31
 800e41e:	fa21 f10c 	lsr.w	r1, r1, ip
 800e422:	d505      	bpl.n	800e430 <ai_array_get_byte_size+0x38>
 800e424:	2300      	movs	r3, #0
 800e426:	3107      	adds	r1, #7
 800e428:	4419      	add	r1, r3
 800e42a:	08c8      	lsrs	r0, r1, #3
 800e42c:	f85d fb04 	ldr.w	pc, [sp], #4
 800e430:	f000 007f 	and.w	r0, r0, #127	@ 0x7f
 800e434:	3107      	adds	r1, #7
 800e436:	fa40 f00c 	asr.w	r0, r0, ip
 800e43a:	4083      	lsls	r3, r0
 800e43c:	4419      	add	r1, r3
 800e43e:	08c8      	lsrs	r0, r1, #3
 800e440:	f85d fb04 	ldr.w	pc, [sp], #4
 800e444:	4608      	mov	r0, r1
 800e446:	4770      	bx	lr

0800e448 <ai_array_get_data_byte_size>:
 800e448:	b169      	cbz	r1, 800e466 <ai_array_get_data_byte_size+0x1e>
 800e44a:	f3c0 13c6 	ubfx	r3, r0, #7, #7
 800e44e:	f3c0 5041 	ubfx	r0, r0, #21, #2
 800e452:	fb03 f101 	mul.w	r1, r3, r1
 800e456:	1dcb      	adds	r3, r1, #7
 800e458:	f023 0307 	bic.w	r3, r3, #7
 800e45c:	fa23 f000 	lsr.w	r0, r3, r0
 800e460:	3007      	adds	r0, #7
 800e462:	08c0      	lsrs	r0, r0, #3
 800e464:	4770      	bx	lr
 800e466:	4608      	mov	r0, r1
 800e468:	4770      	bx	lr
 800e46a:	bf00      	nop

0800e46c <ai_version_get>:
 800e46c:	0212      	lsls	r2, r2, #8
 800e46e:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 800e472:	ea42 6000 	orr.w	r0, r2, r0, lsl #24
 800e476:	4770      	bx	lr

0800e478 <get_tensor_byte_size>:
 800e478:	b430      	push	{r4, r5}
 800e47a:	6985      	ldr	r5, [r0, #24]
 800e47c:	68c4      	ldr	r4, [r0, #12]
 800e47e:	6941      	ldr	r1, [r0, #20]
 800e480:	4b06      	ldr	r3, [pc, #24]	@ (800e49c <get_tensor_byte_size+0x24>)
 800e482:	6828      	ldr	r0, [r5, #0]
 800e484:	4a06      	ldr	r2, [pc, #24]	@ (800e4a0 <get_tensor_byte_size+0x28>)
 800e486:	4003      	ands	r3, r0
 800e488:	68c9      	ldr	r1, [r1, #12]
 800e48a:	68e0      	ldr	r0, [r4, #12]
 800e48c:	4293      	cmp	r3, r2
 800e48e:	fb01 f000 	mul.w	r0, r1, r0
 800e492:	d101      	bne.n	800e498 <get_tensor_byte_size+0x20>
 800e494:	3007      	adds	r0, #7
 800e496:	08c0      	lsrs	r0, r0, #3
 800e498:	bc30      	pop	{r4, r5}
 800e49a:	4770      	bx	lr
 800e49c:	017fffff 	.word	0x017fffff
 800e4a0:	000400c0 	.word	0x000400c0

0800e4a4 <core_tensor_clone>:
 800e4a4:	680b      	ldr	r3, [r1, #0]
 800e4a6:	6882      	ldr	r2, [r0, #8]
 800e4a8:	6003      	str	r3, [r0, #0]
 800e4aa:	684b      	ldr	r3, [r1, #4]
 800e4ac:	6043      	str	r3, [r0, #4]
 800e4ae:	698b      	ldr	r3, [r1, #24]
 800e4b0:	6183      	str	r3, [r0, #24]
 800e4b2:	688b      	ldr	r3, [r1, #8]
 800e4b4:	f3c3 2317 	ubfx	r3, r3, #8, #24
 800e4b8:	f363 221f 	bfi	r2, r3, #8, #24
 800e4bc:	b410      	push	{r4}
 800e4be:	6082      	str	r2, [r0, #8]
 800e4c0:	b15b      	cbz	r3, 800e4da <core_tensor_clone+0x36>
 800e4c2:	2300      	movs	r3, #0
 800e4c4:	68cc      	ldr	r4, [r1, #12]
 800e4c6:	68c2      	ldr	r2, [r0, #12]
 800e4c8:	f854 4023 	ldr.w	r4, [r4, r3, lsl #2]
 800e4cc:	f842 4023 	str.w	r4, [r2, r3, lsl #2]
 800e4d0:	3301      	adds	r3, #1
 800e4d2:	6882      	ldr	r2, [r0, #8]
 800e4d4:	ebb3 2f12 	cmp.w	r3, r2, lsr #8
 800e4d8:	d3f4      	bcc.n	800e4c4 <core_tensor_clone+0x20>
 800e4da:	690b      	ldr	r3, [r1, #16]
 800e4dc:	6902      	ldr	r2, [r0, #16]
 800e4de:	f3c3 2317 	ubfx	r3, r3, #8, #24
 800e4e2:	f363 221f 	bfi	r2, r3, #8, #24
 800e4e6:	6102      	str	r2, [r0, #16]
 800e4e8:	b15b      	cbz	r3, 800e502 <core_tensor_clone+0x5e>
 800e4ea:	2300      	movs	r3, #0
 800e4ec:	694c      	ldr	r4, [r1, #20]
 800e4ee:	6942      	ldr	r2, [r0, #20]
 800e4f0:	f854 4023 	ldr.w	r4, [r4, r3, lsl #2]
 800e4f4:	f842 4023 	str.w	r4, [r2, r3, lsl #2]
 800e4f8:	3301      	adds	r3, #1
 800e4fa:	6902      	ldr	r2, [r0, #16]
 800e4fc:	ebb3 2f12 	cmp.w	r3, r2, lsr #8
 800e500:	d3f4      	bcc.n	800e4ec <core_tensor_clone+0x48>
 800e502:	f85d 4b04 	ldr.w	r4, [sp], #4
 800e506:	4770      	bx	lr

0800e508 <core_array_clone>:
 800e508:	4684      	mov	ip, r0
 800e50a:	c90f      	ldmia	r1, {r0, r1, r2, r3}
 800e50c:	e88c 000f 	stmia.w	ip, {r0, r1, r2, r3}
 800e510:	4770      	bx	lr
 800e512:	bf00      	nop

0800e514 <_lite_kernel_nl_softmax_is8os8>:
 800e514:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800e518:	b08f      	sub	sp, #60	@ 0x3c
 800e51a:	461f      	mov	r7, r3
 800e51c:	9b1b      	ldr	r3, [sp, #108]	@ 0x6c
 800e51e:	f8dd a060 	ldr.w	sl, [sp, #96]	@ 0x60
 800e522:	f513 7f80 	cmn.w	r3, #256	@ 0x100
 800e526:	920c      	str	r2, [sp, #48]	@ 0x30
 800e528:	e9cd 1009 	strd	r1, r0, [sp, #36]	@ 0x24
 800e52c:	f280 8408 	bge.w	800ed40 <_lite_kernel_nl_softmax_is8os8+0x82c>
 800e530:	4613      	mov	r3, r2
 800e532:	f44f 7980 	mov.w	r9, #256	@ 0x100
 800e536:	fb07 f303 	mul.w	r3, r7, r3
 800e53a:	2b01      	cmp	r3, #1
 800e53c:	f240 840c 	bls.w	800ed58 <_lite_kernel_nl_softmax_is8os8+0x844>
 800e540:	9b1c      	ldr	r3, [sp, #112]	@ 0x70
 800e542:	f04f 0b00 	mov.w	fp, #0
 800e546:	f8df e47c 	ldr.w	lr, [pc, #1148]	@ 800e9c4 <_lite_kernel_nl_softmax_is8os8+0x4b0>
 800e54a:	f04f 4880 	mov.w	r8, #1073741824	@ 0x40000000
 800e54e:	3b04      	subs	r3, #4
 800e550:	f8cd a060 	str.w	sl, [sp, #96]	@ 0x60
 800e554:	9301      	str	r3, [sp, #4]
 800e556:	e9cd 9702 	strd	r9, r7, [sp, #8]
 800e55a:	9b1a      	ldr	r3, [sp, #104]	@ 0x68
 800e55c:	9819      	ldr	r0, [sp, #100]	@ 0x64
 800e55e:	fa0b f203 	lsl.w	r2, fp, r3
 800e562:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 800e564:	4252      	negs	r2, r2
 800e566:	4053      	eors	r3, r2
 800e568:	0fdb      	lsrs	r3, r3, #31
 800e56a:	2b00      	cmp	r3, #0
 800e56c:	bf0b      	itete	eq
 800e56e:	f04f 4380 	moveq.w	r3, #1073741824	@ 0x40000000
 800e572:	4673      	movne	r3, lr
 800e574:	2100      	moveq	r1, #0
 800e576:	f04f 31ff 	movne.w	r1, #4294967295
 800e57a:	fbc0 3102 	smlal	r3, r1, r0, r2
 800e57e:	2900      	cmp	r1, #0
 800e580:	da04      	bge.n	800e58c <_lite_kernel_nl_softmax_is8os8+0x78>
 800e582:	f06f 4200 	mvn.w	r2, #2147483648	@ 0x80000000
 800e586:	189b      	adds	r3, r3, r2
 800e588:	f141 0100 	adc.w	r1, r1, #0
 800e58c:	0fdb      	lsrs	r3, r3, #31
 800e58e:	f04f 0c00 	mov.w	ip, #0
 800e592:	ea43 0341 	orr.w	r3, r3, r1, lsl #1
 800e596:	4641      	mov	r1, r8
 800e598:	f043 427f 	orr.w	r2, r3, #4278190080	@ 0xff000000
 800e59c:	0154      	lsls	r4, r2, #5
 800e59e:	1ad2      	subs	r2, r2, r3
 800e5a0:	f104 5480 	add.w	r4, r4, #268435456	@ 0x10000000
 800e5a4:	fbc4 1c04 	smlal	r1, ip, r4, r4
 800e5a8:	f1bc 0f00 	cmp.w	ip, #0
 800e5ac:	ea4f 75e4 	mov.w	r5, r4, asr #31
 800e5b0:	da05      	bge.n	800e5be <_lite_kernel_nl_softmax_is8os8+0xaa>
 800e5b2:	f06f 4000 	mvn.w	r0, #2147483648	@ 0x80000000
 800e5b6:	1808      	adds	r0, r1, r0
 800e5b8:	4601      	mov	r1, r0
 800e5ba:	f14c 0c00 	adc.w	ip, ip, #0
 800e5be:	0fc9      	lsrs	r1, r1, #31
 800e5c0:	ea41 014c 	orr.w	r1, r1, ip, lsl #1
 800e5c4:	ea4f 7cec 	mov.w	ip, ip, asr #31
 800e5c8:	fba1 0701 	umull	r0, r7, r1, r1
 800e5cc:	fb01 f90c 	mul.w	r9, r1, ip
 800e5d0:	f110 4080 	adds.w	r0, r0, #1073741824	@ 0x40000000
 800e5d4:	eb47 0749 	adc.w	r7, r7, r9, lsl #1
 800e5d8:	2f00      	cmp	r7, #0
 800e5da:	da06      	bge.n	800e5ea <_lite_kernel_nl_softmax_is8os8+0xd6>
 800e5dc:	f06f 4900 	mvn.w	r9, #2147483648	@ 0x80000000
 800e5e0:	eb10 0909 	adds.w	r9, r0, r9
 800e5e4:	4648      	mov	r0, r9
 800e5e6:	f147 0700 	adc.w	r7, r7, #0
 800e5ea:	0fc0      	lsrs	r0, r0, #31
 800e5ec:	fb01 f505 	mul.w	r5, r1, r5
 800e5f0:	ea40 0047 	orr.w	r0, r0, r7, lsl #1
 800e5f4:	fb04 550c 	mla	r5, r4, ip, r5
 800e5f8:	1087      	asrs	r7, r0, #2
 800e5fa:	f000 0003 	and.w	r0, r0, #3
 800e5fe:	bf54      	ite	pl
 800e600:	f04f 0901 	movpl.w	r9, #1
 800e604:	f04f 0902 	movmi.w	r9, #2
 800e608:	4581      	cmp	r9, r0
 800e60a:	ea81 0004 	eor.w	r0, r1, r4
 800e60e:	ea4f 70d0 	mov.w	r0, r0, lsr #31
 800e612:	bfb8      	it	lt
 800e614:	3701      	addlt	r7, #1
 800e616:	2800      	cmp	r0, #0
 800e618:	fba1 0a04 	umull	r0, sl, r1, r4
 800e61c:	bf0b      	itete	eq
 800e61e:	f04f 4c80 	moveq.w	ip, #1073741824	@ 0x40000000
 800e622:	46f4      	movne	ip, lr
 800e624:	f04f 0900 	moveq.w	r9, #0
 800e628:	f04f 39ff 	movne.w	r9, #4294967295
 800e62c:	4455      	add	r5, sl
 800e62e:	eb10 000c 	adds.w	r0, r0, ip
 800e632:	eb45 0509 	adc.w	r5, r5, r9
 800e636:	2d00      	cmp	r5, #0
 800e638:	da06      	bge.n	800e648 <_lite_kernel_nl_softmax_is8os8+0x134>
 800e63a:	f06f 4c00 	mvn.w	ip, #2147483648	@ 0x80000000
 800e63e:	eb10 0c0c 	adds.w	ip, r0, ip
 800e642:	4660      	mov	r0, ip
 800e644:	f145 0500 	adc.w	r5, r5, #0
 800e648:	0fc0      	lsrs	r0, r0, #31
 800e64a:	4ed5      	ldr	r6, [pc, #852]	@ (800e9a0 <_lite_kernel_nl_softmax_is8os8+0x48c>)
 800e64c:	ea40 0045 	orr.w	r0, r0, r5, lsl #1
 800e650:	4438      	add	r0, r7
 800e652:	0fc5      	lsrs	r5, r0, #31
 800e654:	2d00      	cmp	r5, #0
 800e656:	bf0b      	itete	eq
 800e658:	f04f 4580 	moveq.w	r5, #1073741824	@ 0x40000000
 800e65c:	4675      	movne	r5, lr
 800e65e:	2700      	moveq	r7, #0
 800e660:	f04f 37ff 	movne.w	r7, #4294967295
 800e664:	fbc0 5706 	smlal	r5, r7, r0, r6
 800e668:	2f00      	cmp	r7, #0
 800e66a:	da05      	bge.n	800e678 <_lite_kernel_nl_softmax_is8os8+0x164>
 800e66c:	f06f 4000 	mvn.w	r0, #2147483648	@ 0x80000000
 800e670:	1828      	adds	r0, r5, r0
 800e672:	4605      	mov	r5, r0
 800e674:	f147 0700 	adc.w	r7, r7, #0
 800e678:	0fed      	lsrs	r5, r5, #31
 800e67a:	ea45 0547 	orr.w	r5, r5, r7, lsl #1
 800e67e:	4429      	add	r1, r5
 800e680:	07cf      	lsls	r7, r1, #31
 800e682:	ea4f 0061 	mov.w	r0, r1, asr #1
 800e686:	d502      	bpl.n	800e68e <_lite_kernel_nl_softmax_is8os8+0x17a>
 800e688:	2800      	cmp	r0, #0
 800e68a:	bfa8      	it	ge
 800e68c:	3001      	addge	r0, #1
 800e68e:	4404      	add	r4, r0
 800e690:	4dc4      	ldr	r5, [pc, #784]	@ (800e9a4 <_lite_kernel_nl_softmax_is8os8+0x490>)
 800e692:	0fe1      	lsrs	r1, r4, #31
 800e694:	2900      	cmp	r1, #0
 800e696:	bf0b      	itete	eq
 800e698:	f04f 4080 	moveq.w	r0, #1073741824	@ 0x40000000
 800e69c:	4670      	movne	r0, lr
 800e69e:	2100      	moveq	r1, #0
 800e6a0:	f04f 31ff 	movne.w	r1, #4294967295
 800e6a4:	fbc4 0105 	smlal	r0, r1, r4, r5
 800e6a8:	2900      	cmp	r1, #0
 800e6aa:	da05      	bge.n	800e6b8 <_lite_kernel_nl_softmax_is8os8+0x1a4>
 800e6ac:	f06f 4400 	mvn.w	r4, #2147483648	@ 0x80000000
 800e6b0:	1904      	adds	r4, r0, r4
 800e6b2:	4620      	mov	r0, r4
 800e6b4:	f141 0100 	adc.w	r1, r1, #0
 800e6b8:	0fc0      	lsrs	r0, r0, #31
 800e6ba:	f3c2 6400 	ubfx	r4, r2, #24, #1
 800e6be:	4eba      	ldr	r6, [pc, #744]	@ (800e9a8 <_lite_kernel_nl_softmax_is8os8+0x494>)
 800e6c0:	4645      	mov	r5, r8
 800e6c2:	ea40 0041 	orr.w	r0, r0, r1, lsl #1
 800e6c6:	2100      	movs	r1, #0
 800e6c8:	3c01      	subs	r4, #1
 800e6ca:	fab3 f383 	clz	r3, r3
 800e6ce:	f100 40e2 	add.w	r0, r0, #1895825408	@ 0x71000000
 800e6d2:	460f      	mov	r7, r1
 800e6d4:	468c      	mov	ip, r1
 800e6d6:	095b      	lsrs	r3, r3, #5
 800e6d8:	f5a0 2025 	sub.w	r0, r0, #675840	@ 0xa5000
 800e6dc:	f10b 0b01 	add.w	fp, fp, #1
 800e6e0:	f2a0 706c 	subw	r0, r0, #1900	@ 0x76c
 800e6e4:	fbc0 5706 	smlal	r5, r7, r0, r6
 800e6e8:	0fed      	lsrs	r5, r5, #31
 800e6ea:	4004      	ands	r4, r0
 800e6ec:	f342 6000 	sbfx	r0, r2, #24, #1
 800e6f0:	ea45 0547 	orr.w	r5, r5, r7, lsl #1
 800e6f4:	4ead      	ldr	r6, [pc, #692]	@ (800e9ac <_lite_kernel_nl_softmax_is8os8+0x498>)
 800e6f6:	460f      	mov	r7, r1
 800e6f8:	4028      	ands	r0, r5
 800e6fa:	4645      	mov	r5, r8
 800e6fc:	4060      	eors	r0, r4
 800e6fe:	f3c2 6440 	ubfx	r4, r2, #25, #1
 800e702:	fbc0 5706 	smlal	r5, r7, r0, r6
 800e706:	3c01      	subs	r4, #1
 800e708:	0fed      	lsrs	r5, r5, #31
 800e70a:	4ea9      	ldr	r6, [pc, #676]	@ (800e9b0 <_lite_kernel_nl_softmax_is8os8+0x49c>)
 800e70c:	4004      	ands	r4, r0
 800e70e:	f342 6040 	sbfx	r0, r2, #25, #1
 800e712:	ea45 0547 	orr.w	r5, r5, r7, lsl #1
 800e716:	460f      	mov	r7, r1
 800e718:	4028      	ands	r0, r5
 800e71a:	4645      	mov	r5, r8
 800e71c:	4060      	eors	r0, r4
 800e71e:	f3c2 6480 	ubfx	r4, r2, #26, #1
 800e722:	fbc0 5706 	smlal	r5, r7, r0, r6
 800e726:	3c01      	subs	r4, #1
 800e728:	0fed      	lsrs	r5, r5, #31
 800e72a:	4ea2      	ldr	r6, [pc, #648]	@ (800e9b4 <_lite_kernel_nl_softmax_is8os8+0x4a0>)
 800e72c:	4004      	ands	r4, r0
 800e72e:	f342 6080 	sbfx	r0, r2, #26, #1
 800e732:	ea45 0547 	orr.w	r5, r5, r7, lsl #1
 800e736:	460f      	mov	r7, r1
 800e738:	4028      	ands	r0, r5
 800e73a:	f3c2 65c0 	ubfx	r5, r2, #27, #1
 800e73e:	4060      	eors	r0, r4
 800e740:	4644      	mov	r4, r8
 800e742:	3d01      	subs	r5, #1
 800e744:	fbc0 4706 	smlal	r4, r7, r0, r6
 800e748:	0fe4      	lsrs	r4, r4, #31
 800e74a:	4005      	ands	r5, r0
 800e74c:	f342 60c0 	sbfx	r0, r2, #27, #1
 800e750:	ea44 0447 	orr.w	r4, r4, r7, lsl #1
 800e754:	4e98      	ldr	r6, [pc, #608]	@ (800e9b8 <_lite_kernel_nl_softmax_is8os8+0x4a4>)
 800e756:	460f      	mov	r7, r1
 800e758:	4020      	ands	r0, r4
 800e75a:	ea85 0400 	eor.w	r4, r5, r0
 800e75e:	f3c2 7000 	ubfx	r0, r2, #28, #1
 800e762:	4645      	mov	r5, r8
 800e764:	3801      	subs	r0, #1
 800e766:	fbc4 5706 	smlal	r5, r7, r4, r6
 800e76a:	0fed      	lsrs	r5, r5, #31
 800e76c:	4020      	ands	r0, r4
 800e76e:	f342 7400 	sbfx	r4, r2, #28, #1
 800e772:	ea45 0547 	orr.w	r5, r5, r7, lsl #1
 800e776:	4f91      	ldr	r7, [pc, #580]	@ (800e9bc <_lite_kernel_nl_softmax_is8os8+0x4a8>)
 800e778:	402c      	ands	r4, r5
 800e77a:	4645      	mov	r5, r8
 800e77c:	4060      	eors	r0, r4
 800e77e:	f3c2 7440 	ubfx	r4, r2, #29, #1
 800e782:	fbc0 5c07 	smlal	r5, ip, r0, r7
 800e786:	3c01      	subs	r4, #1
 800e788:	0fed      	lsrs	r5, r5, #31
 800e78a:	4004      	ands	r4, r0
 800e78c:	f342 7040 	sbfx	r0, r2, #29, #1
 800e790:	ea45 054c 	orr.w	r5, r5, ip, lsl #1
 800e794:	4028      	ands	r0, r5
 800e796:	4645      	mov	r5, r8
 800e798:	4060      	eors	r0, r4
 800e79a:	24f2      	movs	r4, #242	@ 0xf2
 800e79c:	fbc0 5104 	smlal	r5, r1, r0, r4
 800e7a0:	0fed      	lsrs	r5, r5, #31
 800e7a2:	ea45 0541 	orr.w	r5, r5, r1, lsl #1
 800e7a6:	f3c2 7180 	ubfx	r1, r2, #30, #1
 800e7aa:	f342 7280 	sbfx	r2, r2, #30, #1
 800e7ae:	3901      	subs	r1, #1
 800e7b0:	402a      	ands	r2, r5
 800e7b2:	4001      	ands	r1, r0
 800e7b4:	404a      	eors	r2, r1
 800e7b6:	1e59      	subs	r1, r3, #1
 800e7b8:	425b      	negs	r3, r3
 800e7ba:	400a      	ands	r2, r1
 800e7bc:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 800e7c0:	4053      	eors	r3, r2
 800e7c2:	9a01      	ldr	r2, [sp, #4]
 800e7c4:	f842 3f04 	str.w	r3, [r2, #4]!
 800e7c8:	9b02      	ldr	r3, [sp, #8]
 800e7ca:	9201      	str	r2, [sp, #4]
 800e7cc:	455b      	cmp	r3, fp
 800e7ce:	f63f aec4 	bhi.w	800e55a <_lite_kernel_nl_softmax_is8os8+0x46>
 800e7d2:	4699      	mov	r9, r3
 800e7d4:	9f03      	ldr	r7, [sp, #12]
 800e7d6:	f8dd a060 	ldr.w	sl, [sp, #96]	@ 0x60
 800e7da:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 800e7dc:	2b00      	cmp	r3, #0
 800e7de:	f000 823b 	beq.w	800ec58 <_lite_kernel_nl_softmax_is8os8+0x744>
 800e7e2:	fb0a f307 	mul.w	r3, sl, r7
 800e7e6:	930d      	str	r3, [sp, #52]	@ 0x34
 800e7e8:	2f00      	cmp	r7, #0
 800e7ea:	f000 8235 	beq.w	800ec58 <_lite_kernel_nl_softmax_is8os8+0x744>
 800e7ee:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800e7f0:	46c8      	mov	r8, r9
 800e7f2:	46be      	mov	lr, r7
 800e7f4:	443b      	add	r3, r7
 800e7f6:	9308      	str	r3, [sp, #32]
 800e7f8:	2300      	movs	r3, #0
 800e7fa:	930b      	str	r3, [sp, #44]	@ 0x2c
 800e7fc:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800e7fe:	4651      	mov	r1, sl
 800e800:	46c2      	mov	sl, r8
 800e802:	9303      	str	r3, [sp, #12]
 800e804:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800e806:	9302      	str	r3, [sp, #8]
 800e808:	9b02      	ldr	r3, [sp, #8]
 800e80a:	2901      	cmp	r1, #1
 800e80c:	f993 2000 	ldrsb.w	r2, [r3]
 800e810:	f240 8254 	bls.w	800ecbc <_lite_kernel_nl_softmax_is8os8+0x7a8>
 800e814:	eb03 000e 	add.w	r0, r3, lr
 800e818:	2301      	movs	r3, #1
 800e81a:	f990 4000 	ldrsb.w	r4, [r0]
 800e81e:	3301      	adds	r3, #1
 800e820:	4470      	add	r0, lr
 800e822:	42a2      	cmp	r2, r4
 800e824:	bfb8      	it	lt
 800e826:	4622      	movlt	r2, r4
 800e828:	4299      	cmp	r1, r3
 800e82a:	d1f6      	bne.n	800e81a <_lite_kernel_nl_softmax_is8os8+0x306>
 800e82c:	2500      	movs	r5, #0
 800e82e:	9802      	ldr	r0, [sp, #8]
 800e830:	f240 7cff 	movw	ip, #2047	@ 0x7ff
 800e834:	9f1c      	ldr	r7, [sp, #112]	@ 0x70
 800e836:	462b      	mov	r3, r5
 800e838:	f990 4000 	ldrsb.w	r4, [r0]
 800e83c:	3301      	adds	r3, #1
 800e83e:	4470      	add	r0, lr
 800e840:	1b14      	subs	r4, r2, r4
 800e842:	4554      	cmp	r4, sl
 800e844:	da0c      	bge.n	800e860 <_lite_kernel_nl_softmax_is8os8+0x34c>
 800e846:	f857 4024 	ldr.w	r4, [r7, r4, lsl #2]
 800e84a:	1326      	asrs	r6, r4, #12
 800e84c:	f3c4 040b 	ubfx	r4, r4, #0, #12
 800e850:	bf54      	ite	pl
 800e852:	46e0      	movpl	r8, ip
 800e854:	f44f 6800 	movmi.w	r8, #2048	@ 0x800
 800e858:	4544      	cmp	r4, r8
 800e85a:	bfc8      	it	gt
 800e85c:	3601      	addgt	r6, #1
 800e85e:	4435      	add	r5, r6
 800e860:	4299      	cmp	r1, r3
 800e862:	d8e9      	bhi.n	800e838 <_lite_kernel_nl_softmax_is8os8+0x324>
 800e864:	2d00      	cmp	r5, #0
 800e866:	f000 822c 	beq.w	800ecc2 <_lite_kernel_nl_softmax_is8os8+0x7ae>
 800e86a:	fab5 f385 	clz	r3, r5
 800e86e:	409d      	lsls	r5, r3
 800e870:	9306      	str	r3, [sp, #24]
 800e872:	f1c3 0323 	rsb	r3, r3, #35	@ 0x23
 800e876:	9301      	str	r3, [sp, #4]
 800e878:	f105 4300 	add.w	r3, r5, #2147483648	@ 0x80000000
 800e87c:	17de      	asrs	r6, r3, #31
 800e87e:	f1b6 3fff 	cmp.w	r6, #4294967295
 800e882:	bf08      	it	eq
 800e884:	2d00      	cmpeq	r5, #0
 800e886:	f000 8220 	beq.w	800ecca <_lite_kernel_nl_softmax_is8os8+0x7b6>
 800e88a:	f113 4300 	adds.w	r3, r3, #2147483648	@ 0x80000000
 800e88e:	484c      	ldr	r0, [pc, #304]	@ (800e9c0 <_lite_kernel_nl_softmax_is8os8+0x4ac>)
 800e890:	f146 0600 	adc.w	r6, r6, #0
 800e894:	085b      	lsrs	r3, r3, #1
 800e896:	ea43 73c6 	orr.w	r3, r3, r6, lsl #31
 800e89a:	1076      	asrs	r6, r6, #1
 800e89c:	425d      	negs	r5, r3
 800e89e:	469b      	mov	fp, r3
 800e8a0:	fb00 5506 	mla	r5, r0, r6, r5
 800e8a4:	fba3 0400 	umull	r0, r4, r3, r0
 800e8a8:	442c      	add	r4, r5
 800e8aa:	4d46      	ldr	r5, [pc, #280]	@ (800e9c4 <_lite_kernel_nl_softmax_is8os8+0x4b0>)
 800e8ac:	1940      	adds	r0, r0, r5
 800e8ae:	f164 0400 	sbc.w	r4, r4, #0
 800e8b2:	2c00      	cmp	r4, #0
 800e8b4:	da05      	bge.n	800e8c2 <_lite_kernel_nl_softmax_is8os8+0x3ae>
 800e8b6:	f06f 4500 	mvn.w	r5, #2147483648	@ 0x80000000
 800e8ba:	1945      	adds	r5, r0, r5
 800e8bc:	4628      	mov	r0, r5
 800e8be:	f144 0400 	adc.w	r4, r4, #0
 800e8c2:	0fc0      	lsrs	r0, r0, #31
 800e8c4:	ea40 0544 	orr.w	r5, r0, r4, lsl #1
 800e8c8:	f105 3c5a 	add.w	ip, r5, #1515870810	@ 0x5a5a5a5a
 800e8cc:	ea4f 70ec 	mov.w	r0, ip, asr #31
 800e8d0:	4667      	mov	r7, ip
 800e8d2:	fb03 f900 	mul.w	r9, r3, r0
 800e8d6:	9004      	str	r0, [sp, #16]
 800e8d8:	fba3 080c 	umull	r0, r8, r3, ip
 800e8dc:	fb0c 9906 	mla	r9, ip, r6, r9
 800e8e0:	f110 4080 	adds.w	r0, r0, #1073741824	@ 0x40000000
 800e8e4:	eb49 0808 	adc.w	r8, r9, r8
 800e8e8:	f1b8 0f00 	cmp.w	r8, #0
 800e8ec:	da06      	bge.n	800e8fc <_lite_kernel_nl_softmax_is8os8+0x3e8>
 800e8ee:	f06f 4900 	mvn.w	r9, #2147483648	@ 0x80000000
 800e8f2:	eb10 0909 	adds.w	r9, r0, r9
 800e8f6:	4648      	mov	r0, r9
 800e8f8:	f148 0800 	adc.w	r8, r8, #0
 800e8fc:	0fc0      	lsrs	r0, r0, #31
 800e8fe:	4c31      	ldr	r4, [pc, #196]	@ (800e9c4 <_lite_kernel_nl_softmax_is8os8+0x4b0>)
 800e900:	ea40 0048 	orr.w	r0, r0, r8, lsl #1
 800e904:	f1c0 5000 	rsb	r0, r0, #536870912	@ 0x20000000
 800e908:	ea80 080c 	eor.w	r8, r0, ip
 800e90c:	ea4f 78d8 	mov.w	r8, r8, lsr #31
 800e910:	f1b8 0f00 	cmp.w	r8, #0
 800e914:	bf15      	itete	ne
 800e916:	46a0      	movne	r8, r4
 800e918:	2400      	moveq	r4, #0
 800e91a:	f04f 34ff 	movne.w	r4, #4294967295
 800e91e:	f04f 4880 	moveq.w	r8, #1073741824	@ 0x40000000
 800e922:	9405      	str	r4, [sp, #20]
 800e924:	9c04      	ldr	r4, [sp, #16]
 800e926:	ea4f 79e0 	mov.w	r9, r0, asr #31
 800e92a:	fb00 f404 	mul.w	r4, r0, r4
 800e92e:	fb07 4409 	mla	r4, r7, r9, r4
 800e932:	fba0 0707 	umull	r0, r7, r0, r7
 800e936:	eb10 0008 	adds.w	r0, r0, r8
 800e93a:	443c      	add	r4, r7
 800e93c:	9f05      	ldr	r7, [sp, #20]
 800e93e:	eb44 0707 	adc.w	r7, r4, r7
 800e942:	2f00      	cmp	r7, #0
 800e944:	da05      	bge.n	800e952 <_lite_kernel_nl_softmax_is8os8+0x43e>
 800e946:	f06f 4400 	mvn.w	r4, #2147483648	@ 0x80000000
 800e94a:	1904      	adds	r4, r0, r4
 800e94c:	4620      	mov	r0, r4
 800e94e:	f147 0700 	adc.w	r7, r7, #0
 800e952:	0fc0      	lsrs	r0, r0, #31
 800e954:	ea40 0047 	orr.w	r0, r0, r7, lsl #1
 800e958:	f1b0 4f60 	cmp.w	r0, #3758096384	@ 0xe0000000
 800e95c:	f340 809d 	ble.w	800ea9a <_lite_kernel_nl_softmax_is8os8+0x586>
 800e960:	eb0c 0480 	add.w	r4, ip, r0, lsl #2
 800e964:	ea8b 0004 	eor.w	r0, fp, r4
 800e968:	17e5      	asrs	r5, r4, #31
 800e96a:	0fc0      	lsrs	r0, r0, #31
 800e96c:	fb03 f705 	mul.w	r7, r3, r5
 800e970:	2800      	cmp	r0, #0
 800e972:	4814      	ldr	r0, [pc, #80]	@ (800e9c4 <_lite_kernel_nl_softmax_is8os8+0x4b0>)
 800e974:	fb04 7706 	mla	r7, r4, r6, r7
 800e978:	bf14      	ite	ne
 800e97a:	4684      	movne	ip, r0
 800e97c:	f04f 4c80 	moveq.w	ip, #1073741824	@ 0x40000000
 800e980:	fba3 0904 	umull	r0, r9, r3, r4
 800e984:	bf0c      	ite	eq
 800e986:	f04f 0800 	moveq.w	r8, #0
 800e98a:	f04f 38ff 	movne.w	r8, #4294967295
 800e98e:	444f      	add	r7, r9
 800e990:	eb10 000c 	adds.w	r0, r0, ip
 800e994:	eb47 0708 	adc.w	r7, r7, r8
 800e998:	2f00      	cmp	r7, #0
 800e99a:	da1c      	bge.n	800e9d6 <_lite_kernel_nl_softmax_is8os8+0x4c2>
 800e99c:	e014      	b.n	800e9c8 <_lite_kernel_nl_softmax_is8os8+0x4b4>
 800e99e:	bf00      	nop
 800e9a0:	2aaaaaab 	.word	0x2aaaaaab
 800e9a4:	70f5a894 	.word	0x70f5a894
 800e9a8:	63afbe7b 	.word	0x63afbe7b
 800e9ac:	4da2cbf2 	.word	0x4da2cbf2
 800e9b0:	2f16ac6c 	.word	0x2f16ac6c
 800e9b4:	1152aaa4 	.word	0x1152aaa4
 800e9b8:	02582ab7 	.word	0x02582ab7
 800e9bc:	000afe11 	.word	0x000afe11
 800e9c0:	c3c3c3c4 	.word	0xc3c3c3c4
 800e9c4:	c0000001 	.word	0xc0000001
 800e9c8:	f06f 4c00 	mvn.w	ip, #2147483648	@ 0x80000000
 800e9cc:	eb10 0c0c 	adds.w	ip, r0, ip
 800e9d0:	4660      	mov	r0, ip
 800e9d2:	f147 0700 	adc.w	r7, r7, #0
 800e9d6:	0fc0      	lsrs	r0, r0, #31
 800e9d8:	ea40 0047 	orr.w	r0, r0, r7, lsl #1
 800e9dc:	f1c0 5000 	rsb	r0, r0, #536870912	@ 0x20000000
 800e9e0:	ea84 0700 	eor.w	r7, r4, r0
 800e9e4:	0fff      	lsrs	r7, r7, #31
 800e9e6:	2f00      	cmp	r7, #0
 800e9e8:	4fbf      	ldr	r7, [pc, #764]	@ (800ece8 <_lite_kernel_nl_softmax_is8os8+0x7d4>)
 800e9ea:	bf06      	itte	eq
 800e9ec:	f04f 0c00 	moveq.w	ip, #0
 800e9f0:	f04f 4780 	moveq.w	r7, #1073741824	@ 0x40000000
 800e9f4:	f04f 3cff 	movne.w	ip, #4294967295
 800e9f8:	fb00 f505 	mul.w	r5, r0, r5
 800e9fc:	ea4f 78e0 	mov.w	r8, r0, asr #31
 800ea00:	fb04 5508 	mla	r5, r4, r8, r5
 800ea04:	fba0 0804 	umull	r0, r8, r0, r4
 800ea08:	19c0      	adds	r0, r0, r7
 800ea0a:	4445      	add	r5, r8
 800ea0c:	eb45 050c 	adc.w	r5, r5, ip
 800ea10:	2d00      	cmp	r5, #0
 800ea12:	da05      	bge.n	800ea20 <_lite_kernel_nl_softmax_is8os8+0x50c>
 800ea14:	f06f 4700 	mvn.w	r7, #2147483648	@ 0x80000000
 800ea18:	19c7      	adds	r7, r0, r7
 800ea1a:	4638      	mov	r0, r7
 800ea1c:	f145 0500 	adc.w	r5, r5, #0
 800ea20:	0fc0      	lsrs	r0, r0, #31
 800ea22:	ea40 0045 	orr.w	r0, r0, r5, lsl #1
 800ea26:	f1b0 5f00 	cmp.w	r0, #536870912	@ 0x20000000
 800ea2a:	db65      	blt.n	800eaf8 <_lite_kernel_nl_softmax_is8os8+0x5e4>
 800ea2c:	f06f 4500 	mvn.w	r5, #2147483648	@ 0x80000000
 800ea30:	1960      	adds	r0, r4, r5
 800ea32:	ea9b 0f00 	teq	fp, r0
 800ea36:	f140 813d 	bpl.w	800ecb4 <_lite_kernel_nl_softmax_is8os8+0x7a0>
 800ea3a:	4dab      	ldr	r5, [pc, #684]	@ (800ece8 <_lite_kernel_nl_softmax_is8os8+0x7d4>)
 800ea3c:	f04f 37ff 	mov.w	r7, #4294967295
 800ea40:	17c4      	asrs	r4, r0, #31
 800ea42:	fb03 fc04 	mul.w	ip, r3, r4
 800ea46:	fb00 c606 	mla	r6, r0, r6, ip
 800ea4a:	fba3 3c00 	umull	r3, ip, r3, r0
 800ea4e:	195b      	adds	r3, r3, r5
 800ea50:	4466      	add	r6, ip
 800ea52:	eb46 0607 	adc.w	r6, r6, r7
 800ea56:	2e00      	cmp	r6, #0
 800ea58:	da05      	bge.n	800ea66 <_lite_kernel_nl_softmax_is8os8+0x552>
 800ea5a:	f06f 4500 	mvn.w	r5, #2147483648	@ 0x80000000
 800ea5e:	195d      	adds	r5, r3, r5
 800ea60:	462b      	mov	r3, r5
 800ea62:	f146 0600 	adc.w	r6, r6, #0
 800ea66:	0fdb      	lsrs	r3, r3, #31
 800ea68:	ea43 0346 	orr.w	r3, r3, r6, lsl #1
 800ea6c:	f1c3 5300 	rsb	r3, r3, #536870912	@ 0x20000000
 800ea70:	ea80 0503 	eor.w	r5, r0, r3
 800ea74:	0fed      	lsrs	r5, r5, #31
 800ea76:	2d00      	cmp	r5, #0
 800ea78:	4d9b      	ldr	r5, [pc, #620]	@ (800ece8 <_lite_kernel_nl_softmax_is8os8+0x7d4>)
 800ea7a:	bf06      	itte	eq
 800ea7c:	2600      	moveq	r6, #0
 800ea7e:	f04f 4580 	moveq.w	r5, #1073741824	@ 0x40000000
 800ea82:	f04f 36ff 	movne.w	r6, #4294967295
 800ea86:	4298      	cmp	r0, r3
 800ea88:	d15d      	bne.n	800eb46 <_lite_kernel_nl_softmax_is8os8+0x632>
 800ea8a:	f1b0 4f00 	cmp.w	r0, #2147483648	@ 0x80000000
 800ea8e:	d15a      	bne.n	800eb46 <_lite_kernel_nl_softmax_is8os8+0x632>
 800ea90:	f06f 4600 	mvn.w	r6, #2147483648	@ 0x80000000
 800ea94:	4406      	add	r6, r0
 800ea96:	0076      	lsls	r6, r6, #1
 800ea98:	e075      	b.n	800eb86 <_lite_kernel_nl_softmax_is8os8+0x672>
 800ea9a:	4c94      	ldr	r4, [pc, #592]	@ (800ecec <_lite_kernel_nl_softmax_is8os8+0x7d8>)
 800ea9c:	192c      	adds	r4, r5, r4
 800ea9e:	ea9b 0f04 	teq	fp, r4
 800eaa2:	f140 8127 	bpl.w	800ecf4 <_lite_kernel_nl_softmax_is8os8+0x7e0>
 800eaa6:	17e0      	asrs	r0, r4, #31
 800eaa8:	fb04 f506 	mul.w	r5, r4, r6
 800eaac:	fb03 5500 	mla	r5, r3, r0, r5
 800eab0:	fba4 0703 	umull	r0, r7, r4, r3
 800eab4:	442f      	add	r7, r5
 800eab6:	4d8c      	ldr	r5, [pc, #560]	@ (800ece8 <_lite_kernel_nl_softmax_is8os8+0x7d4>)
 800eab8:	1940      	adds	r0, r0, r5
 800eaba:	f167 0700 	sbc.w	r7, r7, #0
 800eabe:	2f00      	cmp	r7, #0
 800eac0:	da05      	bge.n	800eace <_lite_kernel_nl_softmax_is8os8+0x5ba>
 800eac2:	f06f 4500 	mvn.w	r5, #2147483648	@ 0x80000000
 800eac6:	1945      	adds	r5, r0, r5
 800eac8:	4628      	mov	r0, r5
 800eaca:	f147 0700 	adc.w	r7, r7, #0
 800eace:	0fc0      	lsrs	r0, r0, #31
 800ead0:	ea40 0047 	orr.w	r0, r0, r7, lsl #1
 800ead4:	f04f 37ff 	mov.w	r7, #4294967295
 800ead8:	f1c0 5500 	rsb	r5, r0, #536870912	@ 0x20000000
 800eadc:	4882      	ldr	r0, [pc, #520]	@ (800ece8 <_lite_kernel_nl_softmax_is8os8+0x7d4>)
 800eade:	fbc5 0704 	smlal	r0, r7, r5, r4
 800eae2:	2f00      	cmp	r7, #0
 800eae4:	da05      	bge.n	800eaf2 <_lite_kernel_nl_softmax_is8os8+0x5de>
 800eae6:	f06f 4500 	mvn.w	r5, #2147483648	@ 0x80000000
 800eaea:	1945      	adds	r5, r0, r5
 800eaec:	4628      	mov	r0, r5
 800eaee:	f147 0700 	adc.w	r7, r7, #0
 800eaf2:	0fc0      	lsrs	r0, r0, #31
 800eaf4:	ea40 0047 	orr.w	r0, r0, r7, lsl #1
 800eaf8:	f1b0 4f60 	cmp.w	r0, #3758096384	@ 0xe0000000
 800eafc:	ea4f 0580 	mov.w	r5, r0, lsl #2
 800eb00:	dc96      	bgt.n	800ea30 <_lite_kernel_nl_softmax_is8os8+0x51c>
 800eb02:	f104 4000 	add.w	r0, r4, #2147483648	@ 0x80000000
 800eb06:	ea90 0f0b 	teq	r0, fp
 800eb0a:	f140 80d3 	bpl.w	800ecb4 <_lite_kernel_nl_softmax_is8os8+0x7a0>
 800eb0e:	fb00 f606 	mul.w	r6, r0, r6
 800eb12:	17c4      	asrs	r4, r0, #31
 800eb14:	fb03 6604 	mla	r6, r3, r4, r6
 800eb18:	fba0 3503 	umull	r3, r5, r0, r3
 800eb1c:	4435      	add	r5, r6
 800eb1e:	4e72      	ldr	r6, [pc, #456]	@ (800ece8 <_lite_kernel_nl_softmax_is8os8+0x7d4>)
 800eb20:	199b      	adds	r3, r3, r6
 800eb22:	f165 0500 	sbc.w	r5, r5, #0
 800eb26:	2d00      	cmp	r5, #0
 800eb28:	da05      	bge.n	800eb36 <_lite_kernel_nl_softmax_is8os8+0x622>
 800eb2a:	f06f 4600 	mvn.w	r6, #2147483648	@ 0x80000000
 800eb2e:	199e      	adds	r6, r3, r6
 800eb30:	4633      	mov	r3, r6
 800eb32:	f145 0500 	adc.w	r5, r5, #0
 800eb36:	0fdb      	lsrs	r3, r3, #31
 800eb38:	f04f 36ff 	mov.w	r6, #4294967295
 800eb3c:	ea43 0345 	orr.w	r3, r3, r5, lsl #1
 800eb40:	4d69      	ldr	r5, [pc, #420]	@ (800ece8 <_lite_kernel_nl_softmax_is8os8+0x7d4>)
 800eb42:	f1c3 5300 	rsb	r3, r3, #536870912	@ 0x20000000
 800eb46:	fb03 f404 	mul.w	r4, r3, r4
 800eb4a:	17df      	asrs	r7, r3, #31
 800eb4c:	fb00 4407 	mla	r4, r0, r7, r4
 800eb50:	fba3 3700 	umull	r3, r7, r3, r0
 800eb54:	195b      	adds	r3, r3, r5
 800eb56:	443c      	add	r4, r7
 800eb58:	eb44 0406 	adc.w	r4, r4, r6
 800eb5c:	2c00      	cmp	r4, #0
 800eb5e:	da04      	bge.n	800eb6a <_lite_kernel_nl_softmax_is8os8+0x656>
 800eb60:	f06f 4500 	mvn.w	r5, #2147483648	@ 0x80000000
 800eb64:	195b      	adds	r3, r3, r5
 800eb66:	f144 0400 	adc.w	r4, r4, #0
 800eb6a:	0fdb      	lsrs	r3, r3, #31
 800eb6c:	ea43 0344 	orr.w	r3, r3, r4, lsl #1
 800eb70:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800eb74:	f2c0 8092 	blt.w	800ec9c <_lite_kernel_nl_softmax_is8os8+0x788>
 800eb78:	f06f 4300 	mvn.w	r3, #2147483648	@ 0x80000000
 800eb7c:	18c6      	adds	r6, r0, r3
 800eb7e:	f1b6 4f80 	cmp.w	r6, #1073741824	@ 0x40000000
 800eb82:	db88      	blt.n	800ea96 <_lite_kernel_nl_softmax_is8os8+0x582>
 800eb84:	461e      	mov	r6, r3
 800eb86:	9b01      	ldr	r3, [sp, #4]
 800eb88:	2b1f      	cmp	r3, #31
 800eb8a:	dd05      	ble.n	800eb98 <_lite_kernel_nl_softmax_is8os8+0x684>
 800eb8c:	9b06      	ldr	r3, [sp, #24]
 800eb8e:	f1c3 0304 	rsb	r3, r3, #4
 800eb92:	411e      	asrs	r6, r3
 800eb94:	231f      	movs	r3, #31
 800eb96:	9301      	str	r3, [sp, #4]
 800eb98:	2900      	cmp	r1, #0
 800eb9a:	d040      	beq.n	800ec1e <_lite_kernel_nl_softmax_is8os8+0x70a>
 800eb9c:	9801      	ldr	r0, [sp, #4]
 800eb9e:	f04f 0c01 	mov.w	ip, #1
 800eba2:	f06f 4300 	mvn.w	r3, #2147483648	@ 0x80000000
 800eba6:	f04f 0880 	mov.w	r8, #128	@ 0x80
 800ebaa:	fa0c fc00 	lsl.w	ip, ip, r0
 800ebae:	fa43 f000 	asr.w	r0, r3, r0
 800ebb2:	9307      	str	r3, [sp, #28]
 800ebb4:	f10c 3cff 	add.w	ip, ip, #4294967295
 800ebb8:	9005      	str	r0, [sp, #20]
 800ebba:	2000      	movs	r0, #0
 800ebbc:	ea4f 096c 	mov.w	r9, ip, asr #1
 800ebc0:	ea0c 0703 	and.w	r7, ip, r3
 800ebc4:	e9dd 5402 	ldrd	r5, r4, [sp, #8]
 800ebc8:	f109 0301 	add.w	r3, r9, #1
 800ebcc:	9706      	str	r7, [sp, #24]
 800ebce:	9304      	str	r3, [sp, #16]
 800ebd0:	f995 3000 	ldrsb.w	r3, [r5]
 800ebd4:	1ad3      	subs	r3, r2, r3
 800ebd6:	4553      	cmp	r3, sl
 800ebd8:	da41      	bge.n	800ec5e <_lite_kernel_nl_softmax_is8os8+0x74a>
 800ebda:	9f1c      	ldr	r7, [sp, #112]	@ 0x70
 800ebdc:	f857 7023 	ldr.w	r7, [r7, r3, lsl #2]
 800ebe0:	ea87 0306 	eor.w	r3, r7, r6
 800ebe4:	0fdb      	lsrs	r3, r3, #31
 800ebe6:	2b00      	cmp	r3, #0
 800ebe8:	4b3f      	ldr	r3, [pc, #252]	@ (800ece8 <_lite_kernel_nl_softmax_is8os8+0x7d4>)
 800ebea:	bf06      	itte	eq
 800ebec:	f04f 0b00 	moveq.w	fp, #0
 800ebf0:	f04f 4380 	moveq.w	r3, #1073741824	@ 0x40000000
 800ebf4:	f04f 3bff 	movne.w	fp, #4294967295
 800ebf8:	42b7      	cmp	r7, r6
 800ebfa:	d133      	bne.n	800ec64 <_lite_kernel_nl_softmax_is8os8+0x750>
 800ebfc:	f1b6 4f00 	cmp.w	r6, #2147483648	@ 0x80000000
 800ec00:	d130      	bne.n	800ec64 <_lite_kernel_nl_softmax_is8os8+0x750>
 800ec02:	e9dd 3b05 	ldrd	r3, fp, [sp, #20]
 800ec06:	45d9      	cmp	r9, fp
 800ec08:	da00      	bge.n	800ec0c <_lite_kernel_nl_softmax_is8os8+0x6f8>
 800ec0a:	3301      	adds	r3, #1
 800ec0c:	2bfe      	cmp	r3, #254	@ 0xfe
 800ec0e:	dd40      	ble.n	800ec92 <_lite_kernel_nl_softmax_is8os8+0x77e>
 800ec10:	237f      	movs	r3, #127	@ 0x7f
 800ec12:	7023      	strb	r3, [r4, #0]
 800ec14:	3001      	adds	r0, #1
 800ec16:	4475      	add	r5, lr
 800ec18:	4474      	add	r4, lr
 800ec1a:	4281      	cmp	r1, r0
 800ec1c:	d1d8      	bne.n	800ebd0 <_lite_kernel_nl_softmax_is8os8+0x6bc>
 800ec1e:	9a03      	ldr	r2, [sp, #12]
 800ec20:	9b02      	ldr	r3, [sp, #8]
 800ec22:	3201      	adds	r2, #1
 800ec24:	3301      	adds	r3, #1
 800ec26:	9203      	str	r2, [sp, #12]
 800ec28:	9a08      	ldr	r2, [sp, #32]
 800ec2a:	9302      	str	r3, [sp, #8]
 800ec2c:	4293      	cmp	r3, r2
 800ec2e:	f47f adeb 	bne.w	800e808 <_lite_kernel_nl_softmax_is8os8+0x2f4>
 800ec32:	9a0d      	ldr	r2, [sp, #52]	@ 0x34
 800ec34:	46d0      	mov	r8, sl
 800ec36:	468a      	mov	sl, r1
 800ec38:	9909      	ldr	r1, [sp, #36]	@ 0x24
 800ec3a:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800ec3c:	4411      	add	r1, r2
 800ec3e:	3301      	adds	r3, #1
 800ec40:	9109      	str	r1, [sp, #36]	@ 0x24
 800ec42:	990a      	ldr	r1, [sp, #40]	@ 0x28
 800ec44:	930b      	str	r3, [sp, #44]	@ 0x2c
 800ec46:	4411      	add	r1, r2
 800ec48:	910a      	str	r1, [sp, #40]	@ 0x28
 800ec4a:	9908      	ldr	r1, [sp, #32]
 800ec4c:	4411      	add	r1, r2
 800ec4e:	9a0c      	ldr	r2, [sp, #48]	@ 0x30
 800ec50:	429a      	cmp	r2, r3
 800ec52:	9108      	str	r1, [sp, #32]
 800ec54:	f47f add2 	bne.w	800e7fc <_lite_kernel_nl_softmax_is8os8+0x2e8>
 800ec58:	b00f      	add	sp, #60	@ 0x3c
 800ec5a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800ec5e:	f884 8000 	strb.w	r8, [r4]
 800ec62:	e7d7      	b.n	800ec14 <_lite_kernel_nl_softmax_is8os8+0x700>
 800ec64:	fbc6 3b07 	smlal	r3, fp, r6, r7
 800ec68:	f1bb 0f00 	cmp.w	fp, #0
 800ec6c:	da03      	bge.n	800ec76 <_lite_kernel_nl_softmax_is8os8+0x762>
 800ec6e:	9f07      	ldr	r7, [sp, #28]
 800ec70:	19db      	adds	r3, r3, r7
 800ec72:	f14b 0b00 	adc.w	fp, fp, #0
 800ec76:	0fdb      	lsrs	r3, r3, #31
 800ec78:	9f01      	ldr	r7, [sp, #4]
 800ec7a:	ea43 034b 	orr.w	r3, r3, fp, lsl #1
 800ec7e:	ea03 0b0c 	and.w	fp, r3, ip
 800ec82:	413b      	asrs	r3, r7
 800ec84:	d5bf      	bpl.n	800ec06 <_lite_kernel_nl_softmax_is8os8+0x6f2>
 800ec86:	9f04      	ldr	r7, [sp, #16]
 800ec88:	45bb      	cmp	fp, r7
 800ec8a:	dcbe      	bgt.n	800ec0a <_lite_kernel_nl_softmax_is8os8+0x6f6>
 800ec8c:	f06f 037f 	mvn.w	r3, #127	@ 0x7f
 800ec90:	e7bf      	b.n	800ec12 <_lite_kernel_nl_softmax_is8os8+0x6fe>
 800ec92:	2b00      	cmp	r3, #0
 800ec94:	ddfa      	ble.n	800ec8c <_lite_kernel_nl_softmax_is8os8+0x778>
 800ec96:	3b80      	subs	r3, #128	@ 0x80
 800ec98:	b25b      	sxtb	r3, r3
 800ec9a:	e7ba      	b.n	800ec12 <_lite_kernel_nl_softmax_is8os8+0x6fe>
 800ec9c:	f1b3 4f60 	cmp.w	r3, #3758096384	@ 0xe0000000
 800eca0:	dc45      	bgt.n	800ed2e <_lite_kernel_nl_softmax_is8os8+0x81a>
 800eca2:	f100 4300 	add.w	r3, r0, #2147483648	@ 0x80000000
 800eca6:	0046      	lsls	r6, r0, #1
 800eca8:	f1b3 4f40 	cmp.w	r3, #3221225472	@ 0xc0000000
 800ecac:	bfd8      	it	le
 800ecae:	f04f 4600 	movle.w	r6, #2147483648	@ 0x80000000
 800ecb2:	e768      	b.n	800eb86 <_lite_kernel_nl_softmax_is8os8+0x672>
 800ecb4:	f04f 4580 	mov.w	r5, #1073741824	@ 0x40000000
 800ecb8:	2700      	movs	r7, #0
 800ecba:	e6c1      	b.n	800ea40 <_lite_kernel_nl_softmax_is8os8+0x52c>
 800ecbc:	2900      	cmp	r1, #0
 800ecbe:	f47f adb5 	bne.w	800e82c <_lite_kernel_nl_softmax_is8os8+0x318>
 800ecc2:	2303      	movs	r3, #3
 800ecc4:	9301      	str	r3, [sp, #4]
 800ecc6:	2320      	movs	r3, #32
 800ecc8:	9306      	str	r3, [sp, #24]
 800ecca:	f04f 3bff 	mov.w	fp, #4294967295
 800ecce:	2500      	movs	r5, #0
 800ecd0:	f04f 375a 	mov.w	r7, #1515870810	@ 0x5a5a5a5a
 800ecd4:	4806      	ldr	r0, [pc, #24]	@ (800ecf0 <_lite_kernel_nl_softmax_is8os8+0x7dc>)
 800ecd6:	465b      	mov	r3, fp
 800ecd8:	465e      	mov	r6, fp
 800ecda:	46bc      	mov	ip, r7
 800ecdc:	f04f 4880 	mov.w	r8, #1073741824	@ 0x40000000
 800ece0:	9504      	str	r5, [sp, #16]
 800ece2:	9505      	str	r5, [sp, #20]
 800ece4:	e61e      	b.n	800e924 <_lite_kernel_nl_softmax_is8os8+0x410>
 800ece6:	bf00      	nop
 800ece8:	c0000001 	.word	0xc0000001
 800ecec:	da5a5a5a 	.word	0xda5a5a5a
 800ecf0:	20000001 	.word	0x20000001
 800ecf4:	fba4 0703 	umull	r0, r7, r4, r3
 800ecf8:	17e5      	asrs	r5, r4, #31
 800ecfa:	fb04 fc06 	mul.w	ip, r4, r6
 800ecfe:	f110 4080 	adds.w	r0, r0, #1073741824	@ 0x40000000
 800ed02:	fb03 cc05 	mla	ip, r3, r5, ip
 800ed06:	eb4c 0707 	adc.w	r7, ip, r7
 800ed0a:	2f00      	cmp	r7, #0
 800ed0c:	da06      	bge.n	800ed1c <_lite_kernel_nl_softmax_is8os8+0x808>
 800ed0e:	f06f 4c00 	mvn.w	ip, #2147483648	@ 0x80000000
 800ed12:	eb10 0c0c 	adds.w	ip, r0, ip
 800ed16:	4660      	mov	r0, ip
 800ed18:	f147 0700 	adc.w	r7, r7, #0
 800ed1c:	0fc0      	lsrs	r0, r0, #31
 800ed1e:	f04f 3cff 	mov.w	ip, #4294967295
 800ed22:	ea40 0047 	orr.w	r0, r0, r7, lsl #1
 800ed26:	4fcb      	ldr	r7, [pc, #812]	@ (800f054 <_lite_kernel_nl_softmax_is8os8+0xb40>)
 800ed28:	f1c0 5000 	rsb	r0, r0, #536870912	@ 0x20000000
 800ed2c:	e664      	b.n	800e9f8 <_lite_kernel_nl_softmax_is8os8+0x4e4>
 800ed2e:	eb00 0383 	add.w	r3, r0, r3, lsl #2
 800ed32:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800ed36:	f2c0 818b 	blt.w	800f050 <_lite_kernel_nl_softmax_is8os8+0xb3c>
 800ed3a:	f06f 4600 	mvn.w	r6, #2147483648	@ 0x80000000
 800ed3e:	e722      	b.n	800eb86 <_lite_kernel_nl_softmax_is8os8+0x672>
 800ed40:	f1c3 0900 	rsb	r9, r3, #0
 800ed44:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 800ed46:	fb07 f303 	mul.w	r3, r7, r3
 800ed4a:	2b01      	cmp	r3, #1
 800ed4c:	d904      	bls.n	800ed58 <_lite_kernel_nl_softmax_is8os8+0x844>
 800ed4e:	f1b9 0f00 	cmp.w	r9, #0
 800ed52:	f47f abf5 	bne.w	800e540 <_lite_kernel_nl_softmax_is8os8+0x2c>
 800ed56:	e540      	b.n	800e7da <_lite_kernel_nl_softmax_is8os8+0x2c6>
 800ed58:	fb03 f10a 	mul.w	r1, r3, sl
 800ed5c:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800ed5e:	2901      	cmp	r1, #1
 800ed60:	f993 2000 	ldrsb.w	r2, [r3]
 800ed64:	9102      	str	r1, [sp, #8]
 800ed66:	9203      	str	r2, [sp, #12]
 800ed68:	f240 816c 	bls.w	800f044 <_lite_kernel_nl_softmax_is8os8+0xb30>
 800ed6c:	1e58      	subs	r0, r3, #1
 800ed6e:	1841      	adds	r1, r0, r1
 800ed70:	f913 4f01 	ldrsb.w	r4, [r3, #1]!
 800ed74:	42a2      	cmp	r2, r4
 800ed76:	bfb8      	it	lt
 800ed78:	4622      	movlt	r2, r4
 800ed7a:	428b      	cmp	r3, r1
 800ed7c:	d1f8      	bne.n	800ed70 <_lite_kernel_nl_softmax_is8os8+0x85c>
 800ed7e:	9203      	str	r2, [sp, #12]
 800ed80:	4605      	mov	r5, r0
 800ed82:	9704      	str	r7, [sp, #16]
 800ed84:	f8cd a060 	str.w	sl, [sp, #96]	@ 0x60
 800ed88:	9b03      	ldr	r3, [sp, #12]
 800ed8a:	9501      	str	r5, [sp, #4]
 800ed8c:	f915 cf01 	ldrsb.w	ip, [r5, #1]!
 800ed90:	eba3 0c0c 	sub.w	ip, r3, ip
 800ed94:	45cc      	cmp	ip, r9
 800ed96:	f080 8148 	bcs.w	800f02a <_lite_kernel_nl_softmax_is8os8+0xb16>
 800ed9a:	9b1a      	ldr	r3, [sp, #104]	@ 0x68
 800ed9c:	9819      	ldr	r0, [sp, #100]	@ 0x64
 800ed9e:	fa0c f203 	lsl.w	r2, ip, r3
 800eda2:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 800eda4:	4252      	negs	r2, r2
 800eda6:	4053      	eors	r3, r2
 800eda8:	0fdb      	lsrs	r3, r3, #31
 800edaa:	2b00      	cmp	r3, #0
 800edac:	4ba9      	ldr	r3, [pc, #676]	@ (800f054 <_lite_kernel_nl_softmax_is8os8+0xb40>)
 800edae:	bf06      	itte	eq
 800edb0:	2100      	moveq	r1, #0
 800edb2:	f04f 4380 	moveq.w	r3, #1073741824	@ 0x40000000
 800edb6:	f04f 31ff 	movne.w	r1, #4294967295
 800edba:	fbc2 3100 	smlal	r3, r1, r2, r0
 800edbe:	2900      	cmp	r1, #0
 800edc0:	da05      	bge.n	800edce <_lite_kernel_nl_softmax_is8os8+0x8ba>
 800edc2:	f06f 4200 	mvn.w	r2, #2147483648	@ 0x80000000
 800edc6:	189a      	adds	r2, r3, r2
 800edc8:	4613      	mov	r3, r2
 800edca:	f141 0100 	adc.w	r1, r1, #0
 800edce:	0fdb      	lsrs	r3, r3, #31
 800edd0:	2400      	movs	r4, #0
 800edd2:	ea43 0241 	orr.w	r2, r3, r1, lsl #1
 800edd6:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 800edda:	f042 417f 	orr.w	r1, r2, #4278190080	@ 0xff000000
 800edde:	014f      	lsls	r7, r1, #5
 800ede0:	1a89      	subs	r1, r1, r2
 800ede2:	f107 5780 	add.w	r7, r7, #268435456	@ 0x10000000
 800ede6:	fbc7 3407 	smlal	r3, r4, r7, r7
 800edea:	2c00      	cmp	r4, #0
 800edec:	ea4f 78e7 	mov.w	r8, r7, asr #31
 800edf0:	da05      	bge.n	800edfe <_lite_kernel_nl_softmax_is8os8+0x8ea>
 800edf2:	f06f 4000 	mvn.w	r0, #2147483648	@ 0x80000000
 800edf6:	1818      	adds	r0, r3, r0
 800edf8:	4603      	mov	r3, r0
 800edfa:	f144 0400 	adc.w	r4, r4, #0
 800edfe:	0fdb      	lsrs	r3, r3, #31
 800ee00:	ea43 0344 	orr.w	r3, r3, r4, lsl #1
 800ee04:	17e4      	asrs	r4, r4, #31
 800ee06:	fba3 0e03 	umull	r0, lr, r3, r3
 800ee0a:	fb03 fa04 	mul.w	sl, r3, r4
 800ee0e:	f110 4080 	adds.w	r0, r0, #1073741824	@ 0x40000000
 800ee12:	eb4e 0e4a 	adc.w	lr, lr, sl, lsl #1
 800ee16:	f1be 0f00 	cmp.w	lr, #0
 800ee1a:	da06      	bge.n	800ee2a <_lite_kernel_nl_softmax_is8os8+0x916>
 800ee1c:	f06f 4a00 	mvn.w	sl, #2147483648	@ 0x80000000
 800ee20:	eb10 0a0a 	adds.w	sl, r0, sl
 800ee24:	4650      	mov	r0, sl
 800ee26:	f14e 0e00 	adc.w	lr, lr, #0
 800ee2a:	0fc0      	lsrs	r0, r0, #31
 800ee2c:	ea40 004e 	orr.w	r0, r0, lr, lsl #1
 800ee30:	ea5f 0ea0 	movs.w	lr, r0, asr #2
 800ee34:	f000 0003 	and.w	r0, r0, #3
 800ee38:	bf54      	ite	pl
 800ee3a:	f04f 0a01 	movpl.w	sl, #1
 800ee3e:	f04f 0a02 	movmi.w	sl, #2
 800ee42:	4550      	cmp	r0, sl
 800ee44:	fb07 f004 	mul.w	r0, r7, r4
 800ee48:	ea87 0403 	eor.w	r4, r7, r3
 800ee4c:	bfc8      	it	gt
 800ee4e:	f10e 0e01 	addgt.w	lr, lr, #1
 800ee52:	fb03 0008 	mla	r0, r3, r8, r0
 800ee56:	0fe4      	lsrs	r4, r4, #31
 800ee58:	2c00      	cmp	r4, #0
 800ee5a:	4c7e      	ldr	r4, [pc, #504]	@ (800f054 <_lite_kernel_nl_softmax_is8os8+0xb40>)
 800ee5c:	bf0c      	ite	eq
 800ee5e:	f04f 4880 	moveq.w	r8, #1073741824	@ 0x40000000
 800ee62:	46a0      	movne	r8, r4
 800ee64:	fba7 4b03 	umull	r4, fp, r7, r3
 800ee68:	bf0c      	ite	eq
 800ee6a:	f04f 0a00 	moveq.w	sl, #0
 800ee6e:	f04f 3aff 	movne.w	sl, #4294967295
 800ee72:	4458      	add	r0, fp
 800ee74:	eb14 0408 	adds.w	r4, r4, r8
 800ee78:	eb40 000a 	adc.w	r0, r0, sl
 800ee7c:	2800      	cmp	r0, #0
 800ee7e:	da06      	bge.n	800ee8e <_lite_kernel_nl_softmax_is8os8+0x97a>
 800ee80:	f06f 4800 	mvn.w	r8, #2147483648	@ 0x80000000
 800ee84:	eb14 0808 	adds.w	r8, r4, r8
 800ee88:	4644      	mov	r4, r8
 800ee8a:	f140 0000 	adc.w	r0, r0, #0
 800ee8e:	0fe4      	lsrs	r4, r4, #31
 800ee90:	4e71      	ldr	r6, [pc, #452]	@ (800f058 <_lite_kernel_nl_softmax_is8os8+0xb44>)
 800ee92:	ea44 0440 	orr.w	r4, r4, r0, lsl #1
 800ee96:	eb0e 0004 	add.w	r0, lr, r4
 800ee9a:	0fc4      	lsrs	r4, r0, #31
 800ee9c:	2c00      	cmp	r4, #0
 800ee9e:	4c6d      	ldr	r4, [pc, #436]	@ (800f054 <_lite_kernel_nl_softmax_is8os8+0xb40>)
 800eea0:	bf06      	itte	eq
 800eea2:	f04f 0e00 	moveq.w	lr, #0
 800eea6:	f04f 4480 	moveq.w	r4, #1073741824	@ 0x40000000
 800eeaa:	f04f 3eff 	movne.w	lr, #4294967295
 800eeae:	fbc0 4e06 	smlal	r4, lr, r0, r6
 800eeb2:	f1be 0f00 	cmp.w	lr, #0
 800eeb6:	da05      	bge.n	800eec4 <_lite_kernel_nl_softmax_is8os8+0x9b0>
 800eeb8:	f06f 4000 	mvn.w	r0, #2147483648	@ 0x80000000
 800eebc:	1820      	adds	r0, r4, r0
 800eebe:	4604      	mov	r4, r0
 800eec0:	f14e 0e00 	adc.w	lr, lr, #0
 800eec4:	0fe4      	lsrs	r4, r4, #31
 800eec6:	ea44 044e 	orr.w	r4, r4, lr, lsl #1
 800eeca:	4423      	add	r3, r4
 800eecc:	07de      	lsls	r6, r3, #31
 800eece:	ea4f 0463 	mov.w	r4, r3, asr #1
 800eed2:	d502      	bpl.n	800eeda <_lite_kernel_nl_softmax_is8os8+0x9c6>
 800eed4:	2c00      	cmp	r4, #0
 800eed6:	bfa8      	it	ge
 800eed8:	3401      	addge	r4, #1
 800eeda:	443c      	add	r4, r7
 800eedc:	4e5f      	ldr	r6, [pc, #380]	@ (800f05c <_lite_kernel_nl_softmax_is8os8+0xb48>)
 800eede:	0fe3      	lsrs	r3, r4, #31
 800eee0:	2b00      	cmp	r3, #0
 800eee2:	4b5c      	ldr	r3, [pc, #368]	@ (800f054 <_lite_kernel_nl_softmax_is8os8+0xb40>)
 800eee4:	bf0b      	itete	eq
 800eee6:	f04f 4080 	moveq.w	r0, #1073741824	@ 0x40000000
 800eeea:	4618      	movne	r0, r3
 800eeec:	2300      	moveq	r3, #0
 800eeee:	f04f 33ff 	movne.w	r3, #4294967295
 800eef2:	fbc4 0306 	smlal	r0, r3, r4, r6
 800eef6:	2b00      	cmp	r3, #0
 800eef8:	da05      	bge.n	800ef06 <_lite_kernel_nl_softmax_is8os8+0x9f2>
 800eefa:	f06f 4400 	mvn.w	r4, #2147483648	@ 0x80000000
 800eefe:	1904      	adds	r4, r0, r4
 800ef00:	4620      	mov	r0, r4
 800ef02:	f143 0300 	adc.w	r3, r3, #0
 800ef06:	0fc0      	lsrs	r0, r0, #31
 800ef08:	2400      	movs	r4, #0
 800ef0a:	f3c1 6700 	ubfx	r7, r1, #24, #1
 800ef0e:	4e54      	ldr	r6, [pc, #336]	@ (800f060 <_lite_kernel_nl_softmax_is8os8+0xb4c>)
 800ef10:	ea40 0043 	orr.w	r0, r0, r3, lsl #1
 800ef14:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 800ef18:	46a0      	mov	r8, r4
 800ef1a:	3f01      	subs	r7, #1
 800ef1c:	f100 40e2 	add.w	r0, r0, #1895825408	@ 0x71000000
 800ef20:	469e      	mov	lr, r3
 800ef22:	fab2 f282 	clz	r2, r2
 800ef26:	f5a0 2025 	sub.w	r0, r0, #675840	@ 0xa5000
 800ef2a:	0952      	lsrs	r2, r2, #5
 800ef2c:	f2a0 706c 	subw	r0, r0, #1900	@ 0x76c
 800ef30:	fbc0 e806 	smlal	lr, r8, r0, r6
 800ef34:	ea4f 7ede 	mov.w	lr, lr, lsr #31
 800ef38:	4007      	ands	r7, r0
 800ef3a:	f341 6000 	sbfx	r0, r1, #24, #1
 800ef3e:	ea4e 0e48 	orr.w	lr, lr, r8, lsl #1
 800ef42:	4e48      	ldr	r6, [pc, #288]	@ (800f064 <_lite_kernel_nl_softmax_is8os8+0xb50>)
 800ef44:	46a0      	mov	r8, r4
 800ef46:	ea00 000e 	and.w	r0, r0, lr
 800ef4a:	469e      	mov	lr, r3
 800ef4c:	4078      	eors	r0, r7
 800ef4e:	f3c1 6740 	ubfx	r7, r1, #25, #1
 800ef52:	fbc0 e806 	smlal	lr, r8, r0, r6
 800ef56:	3f01      	subs	r7, #1
 800ef58:	ea4f 7ede 	mov.w	lr, lr, lsr #31
 800ef5c:	4e42      	ldr	r6, [pc, #264]	@ (800f068 <_lite_kernel_nl_softmax_is8os8+0xb54>)
 800ef5e:	4007      	ands	r7, r0
 800ef60:	f341 6040 	sbfx	r0, r1, #25, #1
 800ef64:	ea4e 0e48 	orr.w	lr, lr, r8, lsl #1
 800ef68:	46a0      	mov	r8, r4
 800ef6a:	ea00 000e 	and.w	r0, r0, lr
 800ef6e:	469e      	mov	lr, r3
 800ef70:	4078      	eors	r0, r7
 800ef72:	f3c1 6780 	ubfx	r7, r1, #26, #1
 800ef76:	fbc0 e806 	smlal	lr, r8, r0, r6
 800ef7a:	3f01      	subs	r7, #1
 800ef7c:	ea4f 7ede 	mov.w	lr, lr, lsr #31
 800ef80:	4e3a      	ldr	r6, [pc, #232]	@ (800f06c <_lite_kernel_nl_softmax_is8os8+0xb58>)
 800ef82:	4007      	ands	r7, r0
 800ef84:	f341 6080 	sbfx	r0, r1, #26, #1
 800ef88:	ea4e 0e48 	orr.w	lr, lr, r8, lsl #1
 800ef8c:	46a0      	mov	r8, r4
 800ef8e:	ea00 000e 	and.w	r0, r0, lr
 800ef92:	469e      	mov	lr, r3
 800ef94:	4078      	eors	r0, r7
 800ef96:	f3c1 67c0 	ubfx	r7, r1, #27, #1
 800ef9a:	fbc0 e806 	smlal	lr, r8, r0, r6
 800ef9e:	3f01      	subs	r7, #1
 800efa0:	ea4f 7ede 	mov.w	lr, lr, lsr #31
 800efa4:	4e32      	ldr	r6, [pc, #200]	@ (800f070 <_lite_kernel_nl_softmax_is8os8+0xb5c>)
 800efa6:	4007      	ands	r7, r0
 800efa8:	f341 60c0 	sbfx	r0, r1, #27, #1
 800efac:	ea4e 0e48 	orr.w	lr, lr, r8, lsl #1
 800efb0:	46a0      	mov	r8, r4
 800efb2:	ea00 000e 	and.w	r0, r0, lr
 800efb6:	469e      	mov	lr, r3
 800efb8:	4078      	eors	r0, r7
 800efba:	f3c1 7700 	ubfx	r7, r1, #28, #1
 800efbe:	fbc0 e806 	smlal	lr, r8, r0, r6
 800efc2:	3f01      	subs	r7, #1
 800efc4:	ea4f 7ede 	mov.w	lr, lr, lsr #31
 800efc8:	4e2a      	ldr	r6, [pc, #168]	@ (800f074 <_lite_kernel_nl_softmax_is8os8+0xb60>)
 800efca:	4007      	ands	r7, r0
 800efcc:	f341 7000 	sbfx	r0, r1, #28, #1
 800efd0:	ea4e 0e48 	orr.w	lr, lr, r8, lsl #1
 800efd4:	46a0      	mov	r8, r4
 800efd6:	ea00 000e 	and.w	r0, r0, lr
 800efda:	469e      	mov	lr, r3
 800efdc:	4078      	eors	r0, r7
 800efde:	f3c1 7740 	ubfx	r7, r1, #29, #1
 800efe2:	fbc0 e806 	smlal	lr, r8, r0, r6
 800efe6:	3f01      	subs	r7, #1
 800efe8:	ea4f 7ede 	mov.w	lr, lr, lsr #31
 800efec:	4007      	ands	r7, r0
 800efee:	f341 7040 	sbfx	r0, r1, #29, #1
 800eff2:	ea4e 0e48 	orr.w	lr, lr, r8, lsl #1
 800eff6:	ea00 000e 	and.w	r0, r0, lr
 800effa:	4078      	eors	r0, r7
 800effc:	27f2      	movs	r7, #242	@ 0xf2
 800effe:	fbc0 3407 	smlal	r3, r4, r0, r7
 800f002:	0fdb      	lsrs	r3, r3, #31
 800f004:	ea43 0344 	orr.w	r3, r3, r4, lsl #1
 800f008:	f3c1 7480 	ubfx	r4, r1, #30, #1
 800f00c:	f341 7180 	sbfx	r1, r1, #30, #1
 800f010:	3c01      	subs	r4, #1
 800f012:	4019      	ands	r1, r3
 800f014:	1e53      	subs	r3, r2, #1
 800f016:	4004      	ands	r4, r0
 800f018:	4252      	negs	r2, r2
 800f01a:	4061      	eors	r1, r4
 800f01c:	f022 4200 	bic.w	r2, r2, #2147483648	@ 0x80000000
 800f020:	400b      	ands	r3, r1
 800f022:	4053      	eors	r3, r2
 800f024:	9a1c      	ldr	r2, [sp, #112]	@ 0x70
 800f026:	f842 302c 	str.w	r3, [r2, ip, lsl #2]
 800f02a:	9b01      	ldr	r3, [sp, #4]
 800f02c:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800f02e:	3302      	adds	r3, #2
 800f030:	1a9b      	subs	r3, r3, r2
 800f032:	9a02      	ldr	r2, [sp, #8]
 800f034:	429a      	cmp	r2, r3
 800f036:	f63f aea7 	bhi.w	800ed88 <_lite_kernel_nl_softmax_is8os8+0x874>
 800f03a:	9f04      	ldr	r7, [sp, #16]
 800f03c:	f8dd a060 	ldr.w	sl, [sp, #96]	@ 0x60
 800f040:	f7ff bbcb 	b.w	800e7da <_lite_kernel_nl_softmax_is8os8+0x2c6>
 800f044:	2900      	cmp	r1, #0
 800f046:	f43f abc8 	beq.w	800e7da <_lite_kernel_nl_softmax_is8os8+0x2c6>
 800f04a:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800f04c:	1e58      	subs	r0, r3, #1
 800f04e:	e697      	b.n	800ed80 <_lite_kernel_nl_softmax_is8os8+0x86c>
 800f050:	005e      	lsls	r6, r3, #1
 800f052:	e629      	b.n	800eca8 <_lite_kernel_nl_softmax_is8os8+0x794>
 800f054:	c0000001 	.word	0xc0000001
 800f058:	2aaaaaab 	.word	0x2aaaaaab
 800f05c:	70f5a894 	.word	0x70f5a894
 800f060:	63afbe7b 	.word	0x63afbe7b
 800f064:	4da2cbf2 	.word	0x4da2cbf2
 800f068:	2f16ac6c 	.word	0x2f16ac6c
 800f06c:	1152aaa4 	.word	0x1152aaa4
 800f070:	02582ab7 	.word	0x02582ab7
 800f074:	000afe11 	.word	0x000afe11

0800f078 <_lite_kernel_nl_softmax_iu8ou8>:
 800f078:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800f07c:	b09d      	sub	sp, #116	@ 0x74
 800f07e:	4698      	mov	r8, r3
 800f080:	e9cd 0117 	strd	r0, r1, [sp, #92]	@ 0x5c
 800f084:	9b2a      	ldr	r3, [sp, #168]	@ 0xa8
 800f086:	921b      	str	r2, [sp, #108]	@ 0x6c
 800f088:	2a00      	cmp	r2, #0
 800f08a:	f000 83d8 	beq.w	800f83e <_lite_kernel_nl_softmax_iu8ou8+0x7c6>
 800f08e:	9a26      	ldr	r2, [sp, #152]	@ 0x98
 800f090:	fb02 f208 	mul.w	r2, r2, r8
 800f094:	921a      	str	r2, [sp, #104]	@ 0x68
 800f096:	f1b8 0f00 	cmp.w	r8, #0
 800f09a:	f000 83d0 	beq.w	800f83e <_lite_kernel_nl_softmax_iu8ou8+0x7c6>
 800f09e:	2200      	movs	r2, #0
 800f0a0:	3b04      	subs	r3, #4
 800f0a2:	f8cd 8004 	str.w	r8, [sp, #4]
 800f0a6:	9219      	str	r2, [sp, #100]	@ 0x64
 800f0a8:	9a26      	ldr	r2, [sp, #152]	@ 0x98
 800f0aa:	9314      	str	r3, [sp, #80]	@ 0x50
 800f0ac:	eb03 0382 	add.w	r3, r3, r2, lsl #2
 800f0b0:	9316      	str	r3, [sp, #88]	@ 0x58
 800f0b2:	9b17      	ldr	r3, [sp, #92]	@ 0x5c
 800f0b4:	9a01      	ldr	r2, [sp, #4]
 800f0b6:	9313      	str	r3, [sp, #76]	@ 0x4c
 800f0b8:	9b18      	ldr	r3, [sp, #96]	@ 0x60
 800f0ba:	9312      	str	r3, [sp, #72]	@ 0x48
 800f0bc:	4413      	add	r3, r2
 800f0be:	9315      	str	r3, [sp, #84]	@ 0x54
 800f0c0:	9b12      	ldr	r3, [sp, #72]	@ 0x48
 800f0c2:	9a26      	ldr	r2, [sp, #152]	@ 0x98
 800f0c4:	7819      	ldrb	r1, [r3, #0]
 800f0c6:	2a01      	cmp	r2, #1
 800f0c8:	9110      	str	r1, [sp, #64]	@ 0x40
 800f0ca:	f240 83cf 	bls.w	800f86c <_lite_kernel_nl_softmax_iu8ou8+0x7f4>
 800f0ce:	9c01      	ldr	r4, [sp, #4]
 800f0d0:	4615      	mov	r5, r2
 800f0d2:	191a      	adds	r2, r3, r4
 800f0d4:	2301      	movs	r3, #1
 800f0d6:	7810      	ldrb	r0, [r2, #0]
 800f0d8:	3301      	adds	r3, #1
 800f0da:	4422      	add	r2, r4
 800f0dc:	4281      	cmp	r1, r0
 800f0de:	bfb8      	it	lt
 800f0e0:	4601      	movlt	r1, r0
 800f0e2:	429d      	cmp	r5, r3
 800f0e4:	d1f7      	bne.n	800f0d6 <_lite_kernel_nl_softmax_iu8ou8+0x5e>
 800f0e6:	9b29      	ldr	r3, [sp, #164]	@ 0xa4
 800f0e8:	9110      	str	r1, [sp, #64]	@ 0x40
 800f0ea:	440b      	add	r3, r1
 800f0ec:	9303      	str	r3, [sp, #12]
 800f0ee:	2300      	movs	r3, #0
 800f0f0:	f8dd a048 	ldr.w	sl, [sp, #72]	@ 0x48
 800f0f4:	9a14      	ldr	r2, [sp, #80]	@ 0x50
 800f0f6:	469b      	mov	fp, r3
 800f0f8:	46d4      	mov	ip, sl
 800f0fa:	4699      	mov	r9, r3
 800f0fc:	9302      	str	r3, [sp, #8]
 800f0fe:	9200      	str	r2, [sp, #0]
 800f100:	e103      	b.n	800f30a <_lite_kernel_nl_softmax_iu8ou8+0x292>
 800f102:	9a10      	ldr	r2, [sp, #64]	@ 0x40
 800f104:	1a9b      	subs	r3, r3, r2
 800f106:	9a28      	ldr	r2, [sp, #160]	@ 0xa0
 800f108:	4093      	lsls	r3, r2
 800f10a:	9a27      	ldr	r2, [sp, #156]	@ 0x9c
 800f10c:	405a      	eors	r2, r3
 800f10e:	0fd2      	lsrs	r2, r2, #31
 800f110:	2a00      	cmp	r2, #0
 800f112:	4ac6      	ldr	r2, [pc, #792]	@ (800f42c <_lite_kernel_nl_softmax_iu8ou8+0x3b4>)
 800f114:	bf0b      	itete	eq
 800f116:	f04f 4180 	moveq.w	r1, #1073741824	@ 0x40000000
 800f11a:	4611      	movne	r1, r2
 800f11c:	2200      	moveq	r2, #0
 800f11e:	f04f 32ff 	movne.w	r2, #4294967295
 800f122:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 800f126:	f040 80f8 	bne.w	800f31a <_lite_kernel_nl_softmax_iu8ou8+0x2a2>
 800f12a:	9827      	ldr	r0, [sp, #156]	@ 0x9c
 800f12c:	4298      	cmp	r0, r3
 800f12e:	f040 80f4 	bne.w	800f31a <_lite_kernel_nl_softmax_iu8ou8+0x2a2>
 800f132:	4bbf      	ldr	r3, [pc, #764]	@ (800f430 <_lite_kernel_nl_softmax_iu8ou8+0x3b8>)
 800f134:	2200      	movs	r2, #0
 800f136:	f04f 36ff 	mov.w	r6, #4294967295
 800f13a:	4dbe      	ldr	r5, [pc, #760]	@ (800f434 <_lite_kernel_nl_softmax_iu8ou8+0x3bc>)
 800f13c:	930e      	str	r3, [sp, #56]	@ 0x38
 800f13e:	f44f 3100 	mov.w	r1, #131072	@ 0x20000
 800f142:	4bbd      	ldr	r3, [pc, #756]	@ (800f438 <_lite_kernel_nl_softmax_iu8ou8+0x3c0>)
 800f144:	4696      	mov	lr, r2
 800f146:	4637      	mov	r7, r6
 800f148:	46b3      	mov	fp, r6
 800f14a:	930f      	str	r3, [sp, #60]	@ 0x3c
 800f14c:	46b0      	mov	r8, r6
 800f14e:	4bbb      	ldr	r3, [pc, #748]	@ (800f43c <_lite_kernel_nl_softmax_iu8ou8+0x3c4>)
 800f150:	4614      	mov	r4, r2
 800f152:	4692      	mov	sl, r2
 800f154:	2001      	movs	r0, #1
 800f156:	9207      	str	r2, [sp, #28]
 800f158:	9204      	str	r2, [sp, #16]
 800f15a:	e9cd 220c 	strd	r2, r2, [sp, #48]	@ 0x30
 800f15e:	e9cd 660a 	strd	r6, r6, [sp, #40]	@ 0x28
 800f162:	e9cd 6608 	strd	r6, r6, [sp, #32]
 800f166:	e9cd 2205 	strd	r2, r2, [sp, #20]
 800f16a:	4282      	cmp	r2, r0
 800f16c:	4aaf      	ldr	r2, [pc, #700]	@ (800f42c <_lite_kernel_nl_softmax_iu8ou8+0x3b4>)
 800f16e:	980f      	ldr	r0, [sp, #60]	@ 0x3c
 800f170:	bfc8      	it	gt
 800f172:	3101      	addgt	r1, #1
 800f174:	f1be 0f00 	cmp.w	lr, #0
 800f178:	bf06      	itte	eq
 800f17a:	f04f 4280 	moveq.w	r2, #1073741824	@ 0x40000000
 800f17e:	f04f 0e00 	moveq.w	lr, #0
 800f182:	f04f 3eff 	movne.w	lr, #4294967295
 800f186:	1882      	adds	r2, r0, r2
 800f188:	eb43 0e0e 	adc.w	lr, r3, lr
 800f18c:	f1be 0f00 	cmp.w	lr, #0
 800f190:	da05      	bge.n	800f19e <_lite_kernel_nl_softmax_iu8ou8+0x126>
 800f192:	f06f 4300 	mvn.w	r3, #2147483648	@ 0x80000000
 800f196:	18d3      	adds	r3, r2, r3
 800f198:	461a      	mov	r2, r3
 800f19a:	f14e 0e00 	adc.w	lr, lr, #0
 800f19e:	0fd2      	lsrs	r2, r2, #31
 800f1a0:	48a7      	ldr	r0, [pc, #668]	@ (800f440 <_lite_kernel_nl_softmax_iu8ou8+0x3c8>)
 800f1a2:	ea42 024e 	orr.w	r2, r2, lr, lsl #1
 800f1a6:	440a      	add	r2, r1
 800f1a8:	0fd3      	lsrs	r3, r2, #31
 800f1aa:	2b00      	cmp	r3, #0
 800f1ac:	4b9f      	ldr	r3, [pc, #636]	@ (800f42c <_lite_kernel_nl_softmax_iu8ou8+0x3b4>)
 800f1ae:	bf06      	itte	eq
 800f1b0:	2100      	moveq	r1, #0
 800f1b2:	f04f 4380 	moveq.w	r3, #1073741824	@ 0x40000000
 800f1b6:	f04f 31ff 	movne.w	r1, #4294967295
 800f1ba:	fbc2 3100 	smlal	r3, r1, r2, r0
 800f1be:	2900      	cmp	r1, #0
 800f1c0:	da05      	bge.n	800f1ce <_lite_kernel_nl_softmax_iu8ou8+0x156>
 800f1c2:	f06f 4200 	mvn.w	r2, #2147483648	@ 0x80000000
 800f1c6:	189a      	adds	r2, r3, r2
 800f1c8:	4613      	mov	r3, r2
 800f1ca:	f141 0100 	adc.w	r1, r1, #0
 800f1ce:	0fdb      	lsrs	r3, r3, #31
 800f1d0:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 800f1d2:	ea43 0341 	orr.w	r3, r3, r1, lsl #1
 800f1d6:	441a      	add	r2, r3
 800f1d8:	07d0      	lsls	r0, r2, #31
 800f1da:	ea4f 0362 	mov.w	r3, r2, asr #1
 800f1de:	d502      	bpl.n	800f1e6 <_lite_kernel_nl_softmax_iu8ou8+0x16e>
 800f1e0:	2b00      	cmp	r3, #0
 800f1e2:	bfa8      	it	ge
 800f1e4:	3301      	addge	r3, #1
 800f1e6:	442b      	add	r3, r5
 800f1e8:	4896      	ldr	r0, [pc, #600]	@ (800f444 <_lite_kernel_nl_softmax_iu8ou8+0x3cc>)
 800f1ea:	0fda      	lsrs	r2, r3, #31
 800f1ec:	2a00      	cmp	r2, #0
 800f1ee:	4a8f      	ldr	r2, [pc, #572]	@ (800f42c <_lite_kernel_nl_softmax_iu8ou8+0x3b4>)
 800f1f0:	bf06      	itte	eq
 800f1f2:	2100      	moveq	r1, #0
 800f1f4:	f04f 4280 	moveq.w	r2, #1073741824	@ 0x40000000
 800f1f8:	f04f 31ff 	movne.w	r1, #4294967295
 800f1fc:	fbc3 2100 	smlal	r2, r1, r3, r0
 800f200:	2900      	cmp	r1, #0
 800f202:	da05      	bge.n	800f210 <_lite_kernel_nl_softmax_iu8ou8+0x198>
 800f204:	f06f 4300 	mvn.w	r3, #2147483648	@ 0x80000000
 800f208:	18d3      	adds	r3, r2, r3
 800f20a:	461a      	mov	r2, r3
 800f20c:	f141 0100 	adc.w	r1, r1, #0
 800f210:	0fd2      	lsrs	r2, r2, #31
 800f212:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 800f216:	488c      	ldr	r0, [pc, #560]	@ (800f448 <_lite_kernel_nl_softmax_iu8ou8+0x3d0>)
 800f218:	ea42 0241 	orr.w	r2, r2, r1, lsl #1
 800f21c:	2100      	movs	r1, #0
 800f21e:	461d      	mov	r5, r3
 800f220:	f102 42e2 	add.w	r2, r2, #1895825408	@ 0x71000000
 800f224:	468e      	mov	lr, r1
 800f226:	f5a2 2225 	sub.w	r2, r2, #675840	@ 0xa5000
 800f22a:	f2a2 726c 	subw	r2, r2, #1900	@ 0x76c
 800f22e:	fbc2 5e00 	smlal	r5, lr, r2, r0
 800f232:	0fed      	lsrs	r5, r5, #31
 800f234:	ea08 0802 	and.w	r8, r8, r2
 800f238:	4884      	ldr	r0, [pc, #528]	@ (800f44c <_lite_kernel_nl_softmax_iu8ou8+0x3d4>)
 800f23a:	ea45 054e 	orr.w	r5, r5, lr, lsl #1
 800f23e:	461a      	mov	r2, r3
 800f240:	402c      	ands	r4, r5
 800f242:	460d      	mov	r5, r1
 800f244:	ea88 0404 	eor.w	r4, r8, r4
 800f248:	fbc4 2500 	smlal	r2, r5, r4, r0
 800f24c:	0fd2      	lsrs	r2, r2, #31
 800f24e:	9807      	ldr	r0, [sp, #28]
 800f250:	4027      	ands	r7, r4
 800f252:	ea42 0245 	orr.w	r2, r2, r5, lsl #1
 800f256:	460c      	mov	r4, r1
 800f258:	4d7d      	ldr	r5, [pc, #500]	@ (800f450 <_lite_kernel_nl_softmax_iu8ou8+0x3d8>)
 800f25a:	4010      	ands	r0, r2
 800f25c:	461a      	mov	r2, r3
 800f25e:	4078      	eors	r0, r7
 800f260:	4f7c      	ldr	r7, [pc, #496]	@ (800f454 <_lite_kernel_nl_softmax_iu8ou8+0x3dc>)
 800f262:	fbc0 2405 	smlal	r2, r4, r0, r5
 800f266:	0fd2      	lsrs	r2, r2, #31
 800f268:	ea0b 0b00 	and.w	fp, fp, r0
 800f26c:	4d7a      	ldr	r5, [pc, #488]	@ (800f458 <_lite_kernel_nl_softmax_iu8ou8+0x3e0>)
 800f26e:	ea42 0244 	orr.w	r2, r2, r4, lsl #1
 800f272:	460c      	mov	r4, r1
 800f274:	ea0a 0a02 	and.w	sl, sl, r2
 800f278:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800f27a:	ea8b 0a0a 	eor.w	sl, fp, sl
 800f27e:	ea02 000a 	and.w	r0, r2, sl
 800f282:	461a      	mov	r2, r3
 800f284:	fbca 2405 	smlal	r2, r4, sl, r5
 800f288:	0fd2      	lsrs	r2, r2, #31
 800f28a:	460d      	mov	r5, r1
 800f28c:	ea42 0244 	orr.w	r2, r2, r4, lsl #1
 800f290:	9c0c      	ldr	r4, [sp, #48]	@ 0x30
 800f292:	4014      	ands	r4, r2
 800f294:	4622      	mov	r2, r4
 800f296:	9c0a      	ldr	r4, [sp, #40]	@ 0x28
 800f298:	4042      	eors	r2, r0
 800f29a:	4618      	mov	r0, r3
 800f29c:	fbc2 0507 	smlal	r0, r5, r2, r7
 800f2a0:	0fc0      	lsrs	r0, r0, #31
 800f2a2:	4014      	ands	r4, r2
 800f2a4:	9a06      	ldr	r2, [sp, #24]
 800f2a6:	ea40 0045 	orr.w	r0, r0, r5, lsl #1
 800f2aa:	4f6c      	ldr	r7, [pc, #432]	@ (800f45c <_lite_kernel_nl_softmax_iu8ou8+0x3e4>)
 800f2ac:	460d      	mov	r5, r1
 800f2ae:	4002      	ands	r2, r0
 800f2b0:	4618      	mov	r0, r3
 800f2b2:	4062      	eors	r2, r4
 800f2b4:	9c0b      	ldr	r4, [sp, #44]	@ 0x2c
 800f2b6:	fbc2 0507 	smlal	r0, r5, r2, r7
 800f2ba:	0fc0      	lsrs	r0, r0, #31
 800f2bc:	4014      	ands	r4, r2
 800f2be:	9a05      	ldr	r2, [sp, #20]
 800f2c0:	ea40 0045 	orr.w	r0, r0, r5, lsl #1
 800f2c4:	4002      	ands	r2, r0
 800f2c6:	20f2      	movs	r0, #242	@ 0xf2
 800f2c8:	4062      	eors	r2, r4
 800f2ca:	fbc2 3100 	smlal	r3, r1, r2, r0
 800f2ce:	0fdb      	lsrs	r3, r3, #31
 800f2d0:	4032      	ands	r2, r6
 800f2d2:	ea43 0341 	orr.w	r3, r3, r1, lsl #1
 800f2d6:	9904      	ldr	r1, [sp, #16]
 800f2d8:	4019      	ands	r1, r3
 800f2da:	9b08      	ldr	r3, [sp, #32]
 800f2dc:	404a      	eors	r2, r1
 800f2de:	401a      	ands	r2, r3
 800f2e0:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 800f2e2:	405a      	eors	r2, r3
 800f2e4:	1313      	asrs	r3, r2, #12
 800f2e6:	0511      	lsls	r1, r2, #20
 800f2e8:	9902      	ldr	r1, [sp, #8]
 800f2ea:	bf48      	it	mi
 800f2ec:	3301      	addmi	r3, #1
 800f2ee:	4419      	add	r1, r3
 800f2f0:	9102      	str	r1, [sp, #8]
 800f2f2:	9b00      	ldr	r3, [sp, #0]
 800f2f4:	f109 0901 	add.w	r9, r9, #1
 800f2f8:	f843 2f04 	str.w	r2, [r3, #4]!
 800f2fc:	9300      	str	r3, [sp, #0]
 800f2fe:	9b01      	ldr	r3, [sp, #4]
 800f300:	449c      	add	ip, r3
 800f302:	9b26      	ldr	r3, [sp, #152]	@ 0x98
 800f304:	454b      	cmp	r3, r9
 800f306:	f240 80ab 	bls.w	800f460 <_lite_kernel_nl_softmax_iu8ou8+0x3e8>
 800f30a:	f89c 3000 	ldrb.w	r3, [ip]
 800f30e:	9a03      	ldr	r2, [sp, #12]
 800f310:	429a      	cmp	r2, r3
 800f312:	f77f aef6 	ble.w	800f102 <_lite_kernel_nl_softmax_iu8ou8+0x8a>
 800f316:	2200      	movs	r2, #0
 800f318:	e7eb      	b.n	800f2f2 <_lite_kernel_nl_softmax_iu8ou8+0x27a>
 800f31a:	9827      	ldr	r0, [sp, #156]	@ 0x9c
 800f31c:	fbc3 1200 	smlal	r1, r2, r3, r0
 800f320:	2a00      	cmp	r2, #0
 800f322:	da04      	bge.n	800f32e <_lite_kernel_nl_softmax_iu8ou8+0x2b6>
 800f324:	f06f 4300 	mvn.w	r3, #2147483648	@ 0x80000000
 800f328:	18c9      	adds	r1, r1, r3
 800f32a:	f142 0200 	adc.w	r2, r2, #0
 800f32e:	0fc9      	lsrs	r1, r1, #31
 800f330:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 800f334:	2600      	movs	r6, #0
 800f336:	ea41 0142 	orr.w	r1, r1, r2, lsl #1
 800f33a:	f041 477f 	orr.w	r7, r1, #4278190080	@ 0xff000000
 800f33e:	017d      	lsls	r5, r7, #5
 800f340:	1a7f      	subs	r7, r7, r1
 800f342:	f105 5580 	add.w	r5, r5, #268435456	@ 0x10000000
 800f346:	fbc5 3605 	smlal	r3, r6, r5, r5
 800f34a:	2e00      	cmp	r6, #0
 800f34c:	da05      	bge.n	800f35a <_lite_kernel_nl_softmax_iu8ou8+0x2e2>
 800f34e:	f06f 4200 	mvn.w	r2, #2147483648	@ 0x80000000
 800f352:	189a      	adds	r2, r3, r2
 800f354:	4613      	mov	r3, r2
 800f356:	f146 0600 	adc.w	r6, r6, #0
 800f35a:	0fdb      	lsrs	r3, r3, #31
 800f35c:	ea43 0346 	orr.w	r3, r3, r6, lsl #1
 800f360:	17f6      	asrs	r6, r6, #31
 800f362:	fba3 2003 	umull	r2, r0, r3, r3
 800f366:	fb03 f406 	mul.w	r4, r3, r6
 800f36a:	f112 4280 	adds.w	r2, r2, #1073741824	@ 0x40000000
 800f36e:	930e      	str	r3, [sp, #56]	@ 0x38
 800f370:	eb40 0044 	adc.w	r0, r0, r4, lsl #1
 800f374:	2800      	cmp	r0, #0
 800f376:	da05      	bge.n	800f384 <_lite_kernel_nl_softmax_iu8ou8+0x30c>
 800f378:	f06f 4400 	mvn.w	r4, #2147483648	@ 0x80000000
 800f37c:	1914      	adds	r4, r2, r4
 800f37e:	4622      	mov	r2, r4
 800f380:	f140 0000 	adc.w	r0, r0, #0
 800f384:	0fd2      	lsrs	r2, r2, #31
 800f386:	f3c7 6400 	ubfx	r4, r7, #24, #1
 800f38a:	fb05 f606 	mul.w	r6, r5, r6
 800f38e:	ea83 0e05 	eor.w	lr, r3, r5
 800f392:	ea42 0240 	orr.w	r2, r2, r0, lsl #1
 800f396:	9411      	str	r4, [sp, #68]	@ 0x44
 800f398:	17e8      	asrs	r0, r5, #31
 800f39a:	fab1 f181 	clz	r1, r1
 800f39e:	f3c7 7b80 	ubfx	fp, r7, #30, #1
 800f3a2:	f3c7 7a40 	ubfx	sl, r7, #29, #1
 800f3a6:	fb03 6600 	mla	r6, r3, r0, r6
 800f3aa:	0949      	lsrs	r1, r1, #5
 800f3ac:	fba5 4303 	umull	r4, r3, r5, r3
 800f3b0:	f3c7 7000 	ubfx	r0, r7, #28, #1
 800f3b4:	f3c7 6880 	ubfx	r8, r7, #26, #1
 800f3b8:	ea4f 7ede 	mov.w	lr, lr, lsr #31
 800f3bc:	940f      	str	r4, [sp, #60]	@ 0x3c
 800f3be:	f347 64c0 	sbfx	r4, r7, #27, #1
 800f3c2:	4433      	add	r3, r6
 800f3c4:	424e      	negs	r6, r1
 800f3c6:	940c      	str	r4, [sp, #48]	@ 0x30
 800f3c8:	3901      	subs	r1, #1
 800f3ca:	f1cb 0400 	rsb	r4, fp, #0
 800f3ce:	9006      	str	r0, [sp, #24]
 800f3d0:	9108      	str	r1, [sp, #32]
 800f3d2:	f026 4100 	bic.w	r1, r6, #2147483648	@ 0x80000000
 800f3d6:	9404      	str	r4, [sp, #16]
 800f3d8:	f10a 34ff 	add.w	r4, sl, #4294967295
 800f3dc:	f3c7 6040 	ubfx	r0, r7, #25, #1
 800f3e0:	910d      	str	r1, [sp, #52]	@ 0x34
 800f3e2:	940b      	str	r4, [sp, #44]	@ 0x2c
 800f3e4:	f3c7 61c0 	ubfx	r1, r7, #27, #1
 800f3e8:	f1ca 0400 	rsb	r4, sl, #0
 800f3ec:	9f06      	ldr	r7, [sp, #24]
 800f3ee:	3901      	subs	r1, #1
 800f3f0:	f10b 36ff 	add.w	r6, fp, #4294967295
 800f3f4:	9405      	str	r4, [sp, #20]
 800f3f6:	1e7c      	subs	r4, r7, #1
 800f3f8:	9109      	str	r1, [sp, #36]	@ 0x24
 800f3fa:	1091      	asrs	r1, r2, #2
 800f3fc:	940a      	str	r4, [sp, #40]	@ 0x28
 800f3fe:	f1c7 0400 	rsb	r4, r7, #0
 800f402:	f100 37ff 	add.w	r7, r0, #4294967295
 800f406:	f1c0 0000 	rsb	r0, r0, #0
 800f40a:	f108 3bff 	add.w	fp, r8, #4294967295
 800f40e:	f1c8 0a00 	rsb	sl, r8, #0
 800f412:	9007      	str	r0, [sp, #28]
 800f414:	f002 0203 	and.w	r2, r2, #3
 800f418:	9811      	ldr	r0, [sp, #68]	@ 0x44
 800f41a:	9406      	str	r4, [sp, #24]
 800f41c:	f100 38ff 	add.w	r8, r0, #4294967295
 800f420:	f1c0 0400 	rsb	r4, r0, #0
 800f424:	bf54      	ite	pl
 800f426:	2001      	movpl	r0, #1
 800f428:	2002      	movmi	r0, #2
 800f42a:	e69e      	b.n	800f16a <_lite_kernel_nl_softmax_iu8ou8+0xf2>
 800f42c:	c0000001 	.word	0xc0000001
 800f430:	01fffff8 	.word	0x01fffff8
 800f434:	0fffffe0 	.word	0x0fffffe0
 800f438:	40000100 	.word	0x40000100
 800f43c:	001fffff 	.word	0x001fffff
 800f440:	2aaaaaab 	.word	0x2aaaaaab
 800f444:	70f5a894 	.word	0x70f5a894
 800f448:	63afbe7b 	.word	0x63afbe7b
 800f44c:	4da2cbf2 	.word	0x4da2cbf2
 800f450:	2f16ac6c 	.word	0x2f16ac6c
 800f454:	02582ab7 	.word	0x02582ab7
 800f458:	1152aaa4 	.word	0x1152aaa4
 800f45c:	000afe11 	.word	0x000afe11
 800f460:	9b02      	ldr	r3, [sp, #8]
 800f462:	2b00      	cmp	r3, #0
 800f464:	f000 8203 	beq.w	800f86e <_lite_kernel_nl_softmax_iu8ou8+0x7f6>
 800f468:	fab3 f983 	clz	r9, r3
 800f46c:	fa03 f209 	lsl.w	r2, r3, r9
 800f470:	f1c9 0a23 	rsb	sl, r9, #35	@ 0x23
 800f474:	f102 4300 	add.w	r3, r2, #2147483648	@ 0x80000000
 800f478:	17d9      	asrs	r1, r3, #31
 800f47a:	f1b1 3fff 	cmp.w	r1, #4294967295
 800f47e:	bf08      	it	eq
 800f480:	2a00      	cmpeq	r2, #0
 800f482:	f000 81f8 	beq.w	800f876 <_lite_kernel_nl_softmax_iu8ou8+0x7fe>
 800f486:	f113 4300 	adds.w	r3, r3, #2147483648	@ 0x80000000
 800f48a:	4ac3      	ldr	r2, [pc, #780]	@ (800f798 <_lite_kernel_nl_softmax_iu8ou8+0x720>)
 800f48c:	4dc3      	ldr	r5, [pc, #780]	@ (800f79c <_lite_kernel_nl_softmax_iu8ou8+0x724>)
 800f48e:	f141 0100 	adc.w	r1, r1, #0
 800f492:	085b      	lsrs	r3, r3, #1
 800f494:	ea43 73c1 	orr.w	r3, r3, r1, lsl #31
 800f498:	1049      	asrs	r1, r1, #1
 800f49a:	4258      	negs	r0, r3
 800f49c:	469c      	mov	ip, r3
 800f49e:	fb02 0001 	mla	r0, r2, r1, r0
 800f4a2:	fba3 2402 	umull	r2, r4, r3, r2
 800f4a6:	1952      	adds	r2, r2, r5
 800f4a8:	4420      	add	r0, r4
 800f4aa:	f160 0000 	sbc.w	r0, r0, #0
 800f4ae:	2800      	cmp	r0, #0
 800f4b0:	da05      	bge.n	800f4be <_lite_kernel_nl_softmax_iu8ou8+0x446>
 800f4b2:	f06f 4400 	mvn.w	r4, #2147483648	@ 0x80000000
 800f4b6:	1914      	adds	r4, r2, r4
 800f4b8:	4622      	mov	r2, r4
 800f4ba:	f140 0000 	adc.w	r0, r0, #0
 800f4be:	0fd2      	lsrs	r2, r2, #31
 800f4c0:	ea42 0440 	orr.w	r4, r2, r0, lsl #1
 800f4c4:	f104 365a 	add.w	r6, r4, #1515870810	@ 0x5a5a5a5a
 800f4c8:	17f0      	asrs	r0, r6, #31
 800f4ca:	fba3 2706 	umull	r2, r7, r3, r6
 800f4ce:	4635      	mov	r5, r6
 800f4d0:	fb03 fe00 	mul.w	lr, r3, r0
 800f4d4:	f112 4280 	adds.w	r2, r2, #1073741824	@ 0x40000000
 800f4d8:	fb06 ee01 	mla	lr, r6, r1, lr
 800f4dc:	eb4e 0707 	adc.w	r7, lr, r7
 800f4e0:	2f00      	cmp	r7, #0
 800f4e2:	da06      	bge.n	800f4f2 <_lite_kernel_nl_softmax_iu8ou8+0x47a>
 800f4e4:	f06f 4e00 	mvn.w	lr, #2147483648	@ 0x80000000
 800f4e8:	eb12 0e0e 	adds.w	lr, r2, lr
 800f4ec:	4672      	mov	r2, lr
 800f4ee:	f147 0700 	adc.w	r7, r7, #0
 800f4f2:	0fd2      	lsrs	r2, r2, #31
 800f4f4:	ea42 0247 	orr.w	r2, r2, r7, lsl #1
 800f4f8:	4fa8      	ldr	r7, [pc, #672]	@ (800f79c <_lite_kernel_nl_softmax_iu8ou8+0x724>)
 800f4fa:	f1c2 5200 	rsb	r2, r2, #536870912	@ 0x20000000
 800f4fe:	ea82 0e06 	eor.w	lr, r2, r6
 800f502:	ea4f 7ede 	mov.w	lr, lr, lsr #31
 800f506:	f1be 0f00 	cmp.w	lr, #0
 800f50a:	bf06      	itte	eq
 800f50c:	f04f 4780 	moveq.w	r7, #1073741824	@ 0x40000000
 800f510:	f04f 0800 	moveq.w	r8, #0
 800f514:	f04f 38ff 	movne.w	r8, #4294967295
 800f518:	fb02 f000 	mul.w	r0, r2, r0
 800f51c:	ea4f 7ee2 	mov.w	lr, r2, asr #31
 800f520:	fb05 000e 	mla	r0, r5, lr, r0
 800f524:	fba2 2505 	umull	r2, r5, r2, r5
 800f528:	19d2      	adds	r2, r2, r7
 800f52a:	4428      	add	r0, r5
 800f52c:	eb40 0508 	adc.w	r5, r0, r8
 800f530:	2d00      	cmp	r5, #0
 800f532:	da05      	bge.n	800f540 <_lite_kernel_nl_softmax_iu8ou8+0x4c8>
 800f534:	f06f 4000 	mvn.w	r0, #2147483648	@ 0x80000000
 800f538:	1810      	adds	r0, r2, r0
 800f53a:	4602      	mov	r2, r0
 800f53c:	f145 0500 	adc.w	r5, r5, #0
 800f540:	0fd2      	lsrs	r2, r2, #31
 800f542:	ea42 0245 	orr.w	r2, r2, r5, lsl #1
 800f546:	f1b2 4f60 	cmp.w	r2, #3758096384	@ 0xe0000000
 800f54a:	dd7f      	ble.n	800f64c <_lite_kernel_nl_softmax_iu8ou8+0x5d4>
 800f54c:	eb06 0082 	add.w	r0, r6, r2, lsl #2
 800f550:	4e92      	ldr	r6, [pc, #584]	@ (800f79c <_lite_kernel_nl_softmax_iu8ou8+0x724>)
 800f552:	ea80 020c 	eor.w	r2, r0, ip
 800f556:	17c4      	asrs	r4, r0, #31
 800f558:	fb00 f501 	mul.w	r5, r0, r1
 800f55c:	0fd2      	lsrs	r2, r2, #31
 800f55e:	fb03 5504 	mla	r5, r3, r4, r5
 800f562:	2a00      	cmp	r2, #0
 800f564:	fba0 2e03 	umull	r2, lr, r0, r3
 800f568:	bf06      	itte	eq
 800f56a:	f04f 4680 	moveq.w	r6, #1073741824	@ 0x40000000
 800f56e:	2700      	moveq	r7, #0
 800f570:	f04f 37ff 	movne.w	r7, #4294967295
 800f574:	4475      	add	r5, lr
 800f576:	1992      	adds	r2, r2, r6
 800f578:	eb45 0507 	adc.w	r5, r5, r7
 800f57c:	2d00      	cmp	r5, #0
 800f57e:	da05      	bge.n	800f58c <_lite_kernel_nl_softmax_iu8ou8+0x514>
 800f580:	f06f 4600 	mvn.w	r6, #2147483648	@ 0x80000000
 800f584:	1996      	adds	r6, r2, r6
 800f586:	4632      	mov	r2, r6
 800f588:	f145 0500 	adc.w	r5, r5, #0
 800f58c:	0fd2      	lsrs	r2, r2, #31
 800f58e:	ea42 0245 	orr.w	r2, r2, r5, lsl #1
 800f592:	4d82      	ldr	r5, [pc, #520]	@ (800f79c <_lite_kernel_nl_softmax_iu8ou8+0x724>)
 800f594:	f1c2 5200 	rsb	r2, r2, #536870912	@ 0x20000000
 800f598:	ea80 0602 	eor.w	r6, r0, r2
 800f59c:	0ff6      	lsrs	r6, r6, #31
 800f59e:	2e00      	cmp	r6, #0
 800f5a0:	bf06      	itte	eq
 800f5a2:	f04f 4580 	moveq.w	r5, #1073741824	@ 0x40000000
 800f5a6:	2600      	moveq	r6, #0
 800f5a8:	f04f 36ff 	movne.w	r6, #4294967295
 800f5ac:	fb02 f404 	mul.w	r4, r2, r4
 800f5b0:	17d7      	asrs	r7, r2, #31
 800f5b2:	fb00 4407 	mla	r4, r0, r7, r4
 800f5b6:	fba2 2700 	umull	r2, r7, r2, r0
 800f5ba:	1952      	adds	r2, r2, r5
 800f5bc:	443c      	add	r4, r7
 800f5be:	eb44 0406 	adc.w	r4, r4, r6
 800f5c2:	2c00      	cmp	r4, #0
 800f5c4:	da05      	bge.n	800f5d2 <_lite_kernel_nl_softmax_iu8ou8+0x55a>
 800f5c6:	f06f 4500 	mvn.w	r5, #2147483648	@ 0x80000000
 800f5ca:	1955      	adds	r5, r2, r5
 800f5cc:	462a      	mov	r2, r5
 800f5ce:	f144 0400 	adc.w	r4, r4, #0
 800f5d2:	0fd2      	lsrs	r2, r2, #31
 800f5d4:	ea42 0244 	orr.w	r2, r2, r4, lsl #1
 800f5d8:	f1b2 5f00 	cmp.w	r2, #536870912	@ 0x20000000
 800f5dc:	db65      	blt.n	800f6aa <_lite_kernel_nl_softmax_iu8ou8+0x632>
 800f5de:	f06f 4400 	mvn.w	r4, #2147483648	@ 0x80000000
 800f5e2:	1902      	adds	r2, r0, r4
 800f5e4:	ea92 0f0c 	teq	r2, ip
 800f5e8:	f140 813c 	bpl.w	800f864 <_lite_kernel_nl_softmax_iu8ou8+0x7ec>
 800f5ec:	4c6b      	ldr	r4, [pc, #428]	@ (800f79c <_lite_kernel_nl_softmax_iu8ou8+0x724>)
 800f5ee:	f04f 35ff 	mov.w	r5, #4294967295
 800f5f2:	fb02 f101 	mul.w	r1, r2, r1
 800f5f6:	17d0      	asrs	r0, r2, #31
 800f5f8:	fb03 1100 	mla	r1, r3, r0, r1
 800f5fc:	fba2 3603 	umull	r3, r6, r2, r3
 800f600:	191b      	adds	r3, r3, r4
 800f602:	4431      	add	r1, r6
 800f604:	eb41 0105 	adc.w	r1, r1, r5
 800f608:	2900      	cmp	r1, #0
 800f60a:	da05      	bge.n	800f618 <_lite_kernel_nl_softmax_iu8ou8+0x5a0>
 800f60c:	f06f 4400 	mvn.w	r4, #2147483648	@ 0x80000000
 800f610:	191c      	adds	r4, r3, r4
 800f612:	4623      	mov	r3, r4
 800f614:	f141 0100 	adc.w	r1, r1, #0
 800f618:	0fdb      	lsrs	r3, r3, #31
 800f61a:	ea43 0341 	orr.w	r3, r3, r1, lsl #1
 800f61e:	495f      	ldr	r1, [pc, #380]	@ (800f79c <_lite_kernel_nl_softmax_iu8ou8+0x724>)
 800f620:	f1c3 5300 	rsb	r3, r3, #536870912	@ 0x20000000
 800f624:	ea83 0402 	eor.w	r4, r3, r2
 800f628:	0fe4      	lsrs	r4, r4, #31
 800f62a:	2c00      	cmp	r4, #0
 800f62c:	bf06      	itte	eq
 800f62e:	f04f 4180 	moveq.w	r1, #1073741824	@ 0x40000000
 800f632:	2400      	moveq	r4, #0
 800f634:	f04f 34ff 	movne.w	r4, #4294967295
 800f638:	4293      	cmp	r3, r2
 800f63a:	d15d      	bne.n	800f6f8 <_lite_kernel_nl_softmax_iu8ou8+0x680>
 800f63c:	f1b2 4f00 	cmp.w	r2, #2147483648	@ 0x80000000
 800f640:	d15a      	bne.n	800f6f8 <_lite_kernel_nl_softmax_iu8ou8+0x680>
 800f642:	f06f 4100 	mvn.w	r1, #2147483648	@ 0x80000000
 800f646:	4411      	add	r1, r2
 800f648:	0049      	lsls	r1, r1, #1
 800f64a:	e076      	b.n	800f73a <_lite_kernel_nl_softmax_iu8ou8+0x6c2>
 800f64c:	4854      	ldr	r0, [pc, #336]	@ (800f7a0 <_lite_kernel_nl_softmax_iu8ou8+0x728>)
 800f64e:	4420      	add	r0, r4
 800f650:	ea90 0f0c 	teq	r0, ip
 800f654:	f140 811d 	bpl.w	800f892 <_lite_kernel_nl_softmax_iu8ou8+0x81a>
 800f658:	17c2      	asrs	r2, r0, #31
 800f65a:	fb00 f401 	mul.w	r4, r0, r1
 800f65e:	4d4f      	ldr	r5, [pc, #316]	@ (800f79c <_lite_kernel_nl_softmax_iu8ou8+0x724>)
 800f660:	fb03 4402 	mla	r4, r3, r2, r4
 800f664:	fba0 2603 	umull	r2, r6, r0, r3
 800f668:	1952      	adds	r2, r2, r5
 800f66a:	4434      	add	r4, r6
 800f66c:	f164 0500 	sbc.w	r5, r4, #0
 800f670:	2d00      	cmp	r5, #0
 800f672:	da05      	bge.n	800f680 <_lite_kernel_nl_softmax_iu8ou8+0x608>
 800f674:	f06f 4400 	mvn.w	r4, #2147483648	@ 0x80000000
 800f678:	1914      	adds	r4, r2, r4
 800f67a:	4622      	mov	r2, r4
 800f67c:	f145 0500 	adc.w	r5, r5, #0
 800f680:	0fd2      	lsrs	r2, r2, #31
 800f682:	ea42 0245 	orr.w	r2, r2, r5, lsl #1
 800f686:	f04f 35ff 	mov.w	r5, #4294967295
 800f68a:	f1c2 5400 	rsb	r4, r2, #536870912	@ 0x20000000
 800f68e:	4a43      	ldr	r2, [pc, #268]	@ (800f79c <_lite_kernel_nl_softmax_iu8ou8+0x724>)
 800f690:	fbc0 2504 	smlal	r2, r5, r0, r4
 800f694:	2d00      	cmp	r5, #0
 800f696:	da05      	bge.n	800f6a4 <_lite_kernel_nl_softmax_iu8ou8+0x62c>
 800f698:	f06f 4400 	mvn.w	r4, #2147483648	@ 0x80000000
 800f69c:	1914      	adds	r4, r2, r4
 800f69e:	4622      	mov	r2, r4
 800f6a0:	f145 0500 	adc.w	r5, r5, #0
 800f6a4:	0fd2      	lsrs	r2, r2, #31
 800f6a6:	ea42 0245 	orr.w	r2, r2, r5, lsl #1
 800f6aa:	f1b2 4f60 	cmp.w	r2, #3758096384	@ 0xe0000000
 800f6ae:	ea4f 0482 	mov.w	r4, r2, lsl #2
 800f6b2:	dc96      	bgt.n	800f5e2 <_lite_kernel_nl_softmax_iu8ou8+0x56a>
 800f6b4:	f100 4200 	add.w	r2, r0, #2147483648	@ 0x80000000
 800f6b8:	ea92 0f0c 	teq	r2, ip
 800f6bc:	f140 80d2 	bpl.w	800f864 <_lite_kernel_nl_softmax_iu8ou8+0x7ec>
 800f6c0:	fb02 f101 	mul.w	r1, r2, r1
 800f6c4:	17d0      	asrs	r0, r2, #31
 800f6c6:	fb03 1100 	mla	r1, r3, r0, r1
 800f6ca:	fba2 4303 	umull	r4, r3, r2, r3
 800f6ce:	4419      	add	r1, r3
 800f6d0:	4b32      	ldr	r3, [pc, #200]	@ (800f79c <_lite_kernel_nl_softmax_iu8ou8+0x724>)
 800f6d2:	18e3      	adds	r3, r4, r3
 800f6d4:	f161 0100 	sbc.w	r1, r1, #0
 800f6d8:	2900      	cmp	r1, #0
 800f6da:	da05      	bge.n	800f6e8 <_lite_kernel_nl_softmax_iu8ou8+0x670>
 800f6dc:	f06f 4400 	mvn.w	r4, #2147483648	@ 0x80000000
 800f6e0:	191c      	adds	r4, r3, r4
 800f6e2:	4623      	mov	r3, r4
 800f6e4:	f141 0100 	adc.w	r1, r1, #0
 800f6e8:	0fdb      	lsrs	r3, r3, #31
 800f6ea:	f04f 34ff 	mov.w	r4, #4294967295
 800f6ee:	ea43 0341 	orr.w	r3, r3, r1, lsl #1
 800f6f2:	492a      	ldr	r1, [pc, #168]	@ (800f79c <_lite_kernel_nl_softmax_iu8ou8+0x724>)
 800f6f4:	f1c3 5300 	rsb	r3, r3, #536870912	@ 0x20000000
 800f6f8:	fb03 f000 	mul.w	r0, r3, r0
 800f6fc:	17dd      	asrs	r5, r3, #31
 800f6fe:	fb02 0005 	mla	r0, r2, r5, r0
 800f702:	fba3 3502 	umull	r3, r5, r3, r2
 800f706:	185b      	adds	r3, r3, r1
 800f708:	4428      	add	r0, r5
 800f70a:	eb40 0004 	adc.w	r0, r0, r4
 800f70e:	2800      	cmp	r0, #0
 800f710:	da05      	bge.n	800f71e <_lite_kernel_nl_softmax_iu8ou8+0x6a6>
 800f712:	f06f 4100 	mvn.w	r1, #2147483648	@ 0x80000000
 800f716:	1859      	adds	r1, r3, r1
 800f718:	460b      	mov	r3, r1
 800f71a:	f140 0000 	adc.w	r0, r0, #0
 800f71e:	0fdb      	lsrs	r3, r3, #31
 800f720:	ea43 0340 	orr.w	r3, r3, r0, lsl #1
 800f724:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800f728:	f2c0 8090 	blt.w	800f84c <_lite_kernel_nl_softmax_iu8ou8+0x7d4>
 800f72c:	f06f 4300 	mvn.w	r3, #2147483648	@ 0x80000000
 800f730:	18d1      	adds	r1, r2, r3
 800f732:	f1b1 4f80 	cmp.w	r1, #1073741824	@ 0x40000000
 800f736:	db87      	blt.n	800f648 <_lite_kernel_nl_softmax_iu8ou8+0x5d0>
 800f738:	4619      	mov	r1, r3
 800f73a:	f1ba 0f1f 	cmp.w	sl, #31
 800f73e:	dd04      	ble.n	800f74a <_lite_kernel_nl_softmax_iu8ou8+0x6d2>
 800f740:	f1c9 0304 	rsb	r3, r9, #4
 800f744:	f04f 0a1f 	mov.w	sl, #31
 800f748:	4119      	asrs	r1, r3
 800f74a:	9b26      	ldr	r3, [sp, #152]	@ 0x98
 800f74c:	2b00      	cmp	r3, #0
 800f74e:	d05e      	beq.n	800f80e <_lite_kernel_nl_softmax_iu8ou8+0x796>
 800f750:	2501      	movs	r5, #1
 800f752:	f1a1 4e00 	sub.w	lr, r1, #2147483648	@ 0x80000000
 800f756:	f06f 4700 	mvn.w	r7, #2147483648	@ 0x80000000
 800f75a:	9c14      	ldr	r4, [sp, #80]	@ 0x50
 800f75c:	fa05 f50a 	lsl.w	r5, r5, sl
 800f760:	fabe fe8e 	clz	lr, lr
 800f764:	fa47 f90a 	asr.w	r9, r7, sl
 800f768:	9703      	str	r7, [sp, #12]
 800f76a:	3d01      	subs	r5, #1
 800f76c:	ea4f 1e5e 	mov.w	lr, lr, lsr #5
 800f770:	f8cd 9008 	str.w	r9, [sp, #8]
 800f774:	ea05 0307 	and.w	r3, r5, r7
 800f778:	ea4f 0c65 	mov.w	ip, r5, asr #1
 800f77c:	9813      	ldr	r0, [sp, #76]	@ 0x4c
 800f77e:	f10c 0801 	add.w	r8, ip, #1
 800f782:	9300      	str	r3, [sp, #0]
 800f784:	4673      	mov	r3, lr
 800f786:	4e05      	ldr	r6, [pc, #20]	@ (800f79c <_lite_kernel_nl_softmax_iu8ou8+0x724>)
 800f788:	4647      	mov	r7, r8
 800f78a:	46ae      	mov	lr, r5
 800f78c:	f8dd 9058 	ldr.w	r9, [sp, #88]	@ 0x58
 800f790:	461d      	mov	r5, r3
 800f792:	f8dd 8004 	ldr.w	r8, [sp, #4]
 800f796:	e012      	b.n	800f7be <_lite_kernel_nl_softmax_iu8ou8+0x746>
 800f798:	c3c3c3c4 	.word	0xc3c3c3c4
 800f79c:	c0000001 	.word	0xc0000001
 800f7a0:	da5a5a5a 	.word	0xda5a5a5a
 800f7a4:	b1dd      	cbz	r5, 800f7de <_lite_kernel_nl_softmax_iu8ou8+0x766>
 800f7a6:	9b02      	ldr	r3, [sp, #8]
 800f7a8:	9a00      	ldr	r2, [sp, #0]
 800f7aa:	4594      	cmp	ip, r2
 800f7ac:	da00      	bge.n	800f7b0 <_lite_kernel_nl_softmax_iu8ou8+0x738>
 800f7ae:	3301      	adds	r3, #1
 800f7b0:	2bfe      	cmp	r3, #254	@ 0xfe
 800f7b2:	dd47      	ble.n	800f844 <_lite_kernel_nl_softmax_iu8ou8+0x7cc>
 800f7b4:	23ff      	movs	r3, #255	@ 0xff
 800f7b6:	45a1      	cmp	r9, r4
 800f7b8:	7003      	strb	r3, [r0, #0]
 800f7ba:	4440      	add	r0, r8
 800f7bc:	d027      	beq.n	800f80e <_lite_kernel_nl_softmax_iu8ou8+0x796>
 800f7be:	f854 2f04 	ldr.w	r2, [r4, #4]!
 800f7c2:	ea81 0302 	eor.w	r3, r1, r2
 800f7c6:	0fdb      	lsrs	r3, r3, #31
 800f7c8:	2b00      	cmp	r3, #0
 800f7ca:	bf0b      	itete	eq
 800f7cc:	f04f 4380 	moveq.w	r3, #1073741824	@ 0x40000000
 800f7d0:	4633      	movne	r3, r6
 800f7d2:	f04f 0b00 	moveq.w	fp, #0
 800f7d6:	f04f 3bff 	movne.w	fp, #4294967295
 800f7da:	4291      	cmp	r1, r2
 800f7dc:	d0e2      	beq.n	800f7a4 <_lite_kernel_nl_softmax_iu8ou8+0x72c>
 800f7de:	fbc2 3b01 	smlal	r3, fp, r2, r1
 800f7e2:	f1bb 0f00 	cmp.w	fp, #0
 800f7e6:	da03      	bge.n	800f7f0 <_lite_kernel_nl_softmax_iu8ou8+0x778>
 800f7e8:	9a03      	ldr	r2, [sp, #12]
 800f7ea:	189b      	adds	r3, r3, r2
 800f7ec:	f14b 0b00 	adc.w	fp, fp, #0
 800f7f0:	0fdb      	lsrs	r3, r3, #31
 800f7f2:	ea43 034b 	orr.w	r3, r3, fp, lsl #1
 800f7f6:	ea0e 0203 	and.w	r2, lr, r3
 800f7fa:	fa53 f30a 	asrs.w	r3, r3, sl
 800f7fe:	d5d4      	bpl.n	800f7aa <_lite_kernel_nl_softmax_iu8ou8+0x732>
 800f800:	4297      	cmp	r7, r2
 800f802:	dbd4      	blt.n	800f7ae <_lite_kernel_nl_softmax_iu8ou8+0x736>
 800f804:	2300      	movs	r3, #0
 800f806:	45a1      	cmp	r9, r4
 800f808:	7003      	strb	r3, [r0, #0]
 800f80a:	4440      	add	r0, r8
 800f80c:	d1d7      	bne.n	800f7be <_lite_kernel_nl_softmax_iu8ou8+0x746>
 800f80e:	9a13      	ldr	r2, [sp, #76]	@ 0x4c
 800f810:	9b12      	ldr	r3, [sp, #72]	@ 0x48
 800f812:	3201      	adds	r2, #1
 800f814:	3301      	adds	r3, #1
 800f816:	9213      	str	r2, [sp, #76]	@ 0x4c
 800f818:	9a15      	ldr	r2, [sp, #84]	@ 0x54
 800f81a:	9312      	str	r3, [sp, #72]	@ 0x48
 800f81c:	4293      	cmp	r3, r2
 800f81e:	f47f ac4f 	bne.w	800f0c0 <_lite_kernel_nl_softmax_iu8ou8+0x48>
 800f822:	9a18      	ldr	r2, [sp, #96]	@ 0x60
 800f824:	991a      	ldr	r1, [sp, #104]	@ 0x68
 800f826:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 800f828:	440a      	add	r2, r1
 800f82a:	3301      	adds	r3, #1
 800f82c:	9218      	str	r2, [sp, #96]	@ 0x60
 800f82e:	9a17      	ldr	r2, [sp, #92]	@ 0x5c
 800f830:	9319      	str	r3, [sp, #100]	@ 0x64
 800f832:	440a      	add	r2, r1
 800f834:	9217      	str	r2, [sp, #92]	@ 0x5c
 800f836:	9a1b      	ldr	r2, [sp, #108]	@ 0x6c
 800f838:	429a      	cmp	r2, r3
 800f83a:	f47f ac3a 	bne.w	800f0b2 <_lite_kernel_nl_softmax_iu8ou8+0x3a>
 800f83e:	b01d      	add	sp, #116	@ 0x74
 800f840:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800f844:	2b00      	cmp	r3, #0
 800f846:	dddd      	ble.n	800f804 <_lite_kernel_nl_softmax_iu8ou8+0x78c>
 800f848:	b2db      	uxtb	r3, r3
 800f84a:	e7b4      	b.n	800f7b6 <_lite_kernel_nl_softmax_iu8ou8+0x73e>
 800f84c:	f1b3 4f60 	cmp.w	r3, #3758096384	@ 0xe0000000
 800f850:	dc3b      	bgt.n	800f8ca <_lite_kernel_nl_softmax_iu8ou8+0x852>
 800f852:	f102 4300 	add.w	r3, r2, #2147483648	@ 0x80000000
 800f856:	0051      	lsls	r1, r2, #1
 800f858:	f1b3 4f40 	cmp.w	r3, #3221225472	@ 0xc0000000
 800f85c:	bfd8      	it	le
 800f85e:	f04f 4100 	movle.w	r1, #2147483648	@ 0x80000000
 800f862:	e76a      	b.n	800f73a <_lite_kernel_nl_softmax_iu8ou8+0x6c2>
 800f864:	f04f 4480 	mov.w	r4, #1073741824	@ 0x40000000
 800f868:	2500      	movs	r5, #0
 800f86a:	e6c2      	b.n	800f5f2 <_lite_kernel_nl_softmax_iu8ou8+0x57a>
 800f86c:	bbba      	cbnz	r2, 800f8de <_lite_kernel_nl_softmax_iu8ou8+0x866>
 800f86e:	f04f 0a03 	mov.w	sl, #3
 800f872:	f04f 0920 	mov.w	r9, #32
 800f876:	2000      	movs	r0, #0
 800f878:	f04f 33ff 	mov.w	r3, #4294967295
 800f87c:	f04f 355a 	mov.w	r5, #1515870810	@ 0x5a5a5a5a
 800f880:	4a19      	ldr	r2, [pc, #100]	@ (800f8e8 <_lite_kernel_nl_softmax_iu8ou8+0x870>)
 800f882:	4604      	mov	r4, r0
 800f884:	4619      	mov	r1, r3
 800f886:	462e      	mov	r6, r5
 800f888:	469c      	mov	ip, r3
 800f88a:	f04f 4780 	mov.w	r7, #1073741824	@ 0x40000000
 800f88e:	4680      	mov	r8, r0
 800f890:	e642      	b.n	800f518 <_lite_kernel_nl_softmax_iu8ou8+0x4a0>
 800f892:	17c4      	asrs	r4, r0, #31
 800f894:	fba3 2500 	umull	r2, r5, r3, r0
 800f898:	fb03 f604 	mul.w	r6, r3, r4
 800f89c:	f112 4280 	adds.w	r2, r2, #1073741824	@ 0x40000000
 800f8a0:	fb00 6601 	mla	r6, r0, r1, r6
 800f8a4:	eb46 0505 	adc.w	r5, r6, r5
 800f8a8:	2d00      	cmp	r5, #0
 800f8aa:	da05      	bge.n	800f8b8 <_lite_kernel_nl_softmax_iu8ou8+0x840>
 800f8ac:	f06f 4600 	mvn.w	r6, #2147483648	@ 0x80000000
 800f8b0:	1996      	adds	r6, r2, r6
 800f8b2:	4632      	mov	r2, r6
 800f8b4:	f145 0500 	adc.w	r5, r5, #0
 800f8b8:	0fd2      	lsrs	r2, r2, #31
 800f8ba:	f04f 36ff 	mov.w	r6, #4294967295
 800f8be:	ea42 0245 	orr.w	r2, r2, r5, lsl #1
 800f8c2:	4d0a      	ldr	r5, [pc, #40]	@ (800f8ec <_lite_kernel_nl_softmax_iu8ou8+0x874>)
 800f8c4:	f1c2 5200 	rsb	r2, r2, #536870912	@ 0x20000000
 800f8c8:	e670      	b.n	800f5ac <_lite_kernel_nl_softmax_iu8ou8+0x534>
 800f8ca:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 800f8ce:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800f8d2:	db02      	blt.n	800f8da <_lite_kernel_nl_softmax_iu8ou8+0x862>
 800f8d4:	f06f 4100 	mvn.w	r1, #2147483648	@ 0x80000000
 800f8d8:	e72f      	b.n	800f73a <_lite_kernel_nl_softmax_iu8ou8+0x6c2>
 800f8da:	0059      	lsls	r1, r3, #1
 800f8dc:	e7bc      	b.n	800f858 <_lite_kernel_nl_softmax_iu8ou8+0x7e0>
 800f8de:	9b29      	ldr	r3, [sp, #164]	@ 0xa4
 800f8e0:	9a10      	ldr	r2, [sp, #64]	@ 0x40
 800f8e2:	4413      	add	r3, r2
 800f8e4:	9303      	str	r3, [sp, #12]
 800f8e6:	e402      	b.n	800f0ee <_lite_kernel_nl_softmax_iu8ou8+0x76>
 800f8e8:	20000001 	.word	0x20000001
 800f8ec:	c0000001 	.word	0xc0000001

0800f8f0 <atoi>:
 800f8f0:	220a      	movs	r2, #10
 800f8f2:	2100      	movs	r1, #0
 800f8f4:	f000 b9ca 	b.w	800fc8c <strtol>

0800f8f8 <malloc>:
 800f8f8:	4b02      	ldr	r3, [pc, #8]	@ (800f904 <malloc+0xc>)
 800f8fa:	4601      	mov	r1, r0
 800f8fc:	6818      	ldr	r0, [r3, #0]
 800f8fe:	f000 b825 	b.w	800f94c <_malloc_r>
 800f902:	bf00      	nop
 800f904:	200289f0 	.word	0x200289f0

0800f908 <sbrk_aligned>:
 800f908:	b570      	push	{r4, r5, r6, lr}
 800f90a:	4e0f      	ldr	r6, [pc, #60]	@ (800f948 <sbrk_aligned+0x40>)
 800f90c:	460c      	mov	r4, r1
 800f90e:	6831      	ldr	r1, [r6, #0]
 800f910:	4605      	mov	r5, r0
 800f912:	b911      	cbnz	r1, 800f91a <sbrk_aligned+0x12>
 800f914:	f000 fb38 	bl	800ff88 <_sbrk_r>
 800f918:	6030      	str	r0, [r6, #0]
 800f91a:	4621      	mov	r1, r4
 800f91c:	4628      	mov	r0, r5
 800f91e:	f000 fb33 	bl	800ff88 <_sbrk_r>
 800f922:	1c43      	adds	r3, r0, #1
 800f924:	d103      	bne.n	800f92e <sbrk_aligned+0x26>
 800f926:	f04f 34ff 	mov.w	r4, #4294967295
 800f92a:	4620      	mov	r0, r4
 800f92c:	bd70      	pop	{r4, r5, r6, pc}
 800f92e:	1cc4      	adds	r4, r0, #3
 800f930:	f024 0403 	bic.w	r4, r4, #3
 800f934:	42a0      	cmp	r0, r4
 800f936:	d0f8      	beq.n	800f92a <sbrk_aligned+0x22>
 800f938:	1a21      	subs	r1, r4, r0
 800f93a:	4628      	mov	r0, r5
 800f93c:	f000 fb24 	bl	800ff88 <_sbrk_r>
 800f940:	3001      	adds	r0, #1
 800f942:	d1f2      	bne.n	800f92a <sbrk_aligned+0x22>
 800f944:	e7ef      	b.n	800f926 <sbrk_aligned+0x1e>
 800f946:	bf00      	nop
 800f948:	200301e0 	.word	0x200301e0

0800f94c <_malloc_r>:
 800f94c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800f950:	1ccd      	adds	r5, r1, #3
 800f952:	f025 0503 	bic.w	r5, r5, #3
 800f956:	3508      	adds	r5, #8
 800f958:	2d0c      	cmp	r5, #12
 800f95a:	bf38      	it	cc
 800f95c:	250c      	movcc	r5, #12
 800f95e:	2d00      	cmp	r5, #0
 800f960:	4606      	mov	r6, r0
 800f962:	db01      	blt.n	800f968 <_malloc_r+0x1c>
 800f964:	42a9      	cmp	r1, r5
 800f966:	d904      	bls.n	800f972 <_malloc_r+0x26>
 800f968:	230c      	movs	r3, #12
 800f96a:	6033      	str	r3, [r6, #0]
 800f96c:	2000      	movs	r0, #0
 800f96e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800f972:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 800fa48 <_malloc_r+0xfc>
 800f976:	f000 f869 	bl	800fa4c <__malloc_lock>
 800f97a:	f8d8 3000 	ldr.w	r3, [r8]
 800f97e:	461c      	mov	r4, r3
 800f980:	bb44      	cbnz	r4, 800f9d4 <_malloc_r+0x88>
 800f982:	4629      	mov	r1, r5
 800f984:	4630      	mov	r0, r6
 800f986:	f7ff ffbf 	bl	800f908 <sbrk_aligned>
 800f98a:	1c43      	adds	r3, r0, #1
 800f98c:	4604      	mov	r4, r0
 800f98e:	d158      	bne.n	800fa42 <_malloc_r+0xf6>
 800f990:	f8d8 4000 	ldr.w	r4, [r8]
 800f994:	4627      	mov	r7, r4
 800f996:	2f00      	cmp	r7, #0
 800f998:	d143      	bne.n	800fa22 <_malloc_r+0xd6>
 800f99a:	2c00      	cmp	r4, #0
 800f99c:	d04b      	beq.n	800fa36 <_malloc_r+0xea>
 800f99e:	6823      	ldr	r3, [r4, #0]
 800f9a0:	4639      	mov	r1, r7
 800f9a2:	4630      	mov	r0, r6
 800f9a4:	eb04 0903 	add.w	r9, r4, r3
 800f9a8:	f000 faee 	bl	800ff88 <_sbrk_r>
 800f9ac:	4581      	cmp	r9, r0
 800f9ae:	d142      	bne.n	800fa36 <_malloc_r+0xea>
 800f9b0:	6821      	ldr	r1, [r4, #0]
 800f9b2:	1a6d      	subs	r5, r5, r1
 800f9b4:	4629      	mov	r1, r5
 800f9b6:	4630      	mov	r0, r6
 800f9b8:	f7ff ffa6 	bl	800f908 <sbrk_aligned>
 800f9bc:	3001      	adds	r0, #1
 800f9be:	d03a      	beq.n	800fa36 <_malloc_r+0xea>
 800f9c0:	6823      	ldr	r3, [r4, #0]
 800f9c2:	442b      	add	r3, r5
 800f9c4:	6023      	str	r3, [r4, #0]
 800f9c6:	f8d8 3000 	ldr.w	r3, [r8]
 800f9ca:	685a      	ldr	r2, [r3, #4]
 800f9cc:	bb62      	cbnz	r2, 800fa28 <_malloc_r+0xdc>
 800f9ce:	f8c8 7000 	str.w	r7, [r8]
 800f9d2:	e00f      	b.n	800f9f4 <_malloc_r+0xa8>
 800f9d4:	6822      	ldr	r2, [r4, #0]
 800f9d6:	1b52      	subs	r2, r2, r5
 800f9d8:	d420      	bmi.n	800fa1c <_malloc_r+0xd0>
 800f9da:	2a0b      	cmp	r2, #11
 800f9dc:	d917      	bls.n	800fa0e <_malloc_r+0xc2>
 800f9de:	1961      	adds	r1, r4, r5
 800f9e0:	42a3      	cmp	r3, r4
 800f9e2:	6025      	str	r5, [r4, #0]
 800f9e4:	bf18      	it	ne
 800f9e6:	6059      	strne	r1, [r3, #4]
 800f9e8:	6863      	ldr	r3, [r4, #4]
 800f9ea:	bf08      	it	eq
 800f9ec:	f8c8 1000 	streq.w	r1, [r8]
 800f9f0:	5162      	str	r2, [r4, r5]
 800f9f2:	604b      	str	r3, [r1, #4]
 800f9f4:	4630      	mov	r0, r6
 800f9f6:	f000 f82f 	bl	800fa58 <__malloc_unlock>
 800f9fa:	f104 000b 	add.w	r0, r4, #11
 800f9fe:	1d23      	adds	r3, r4, #4
 800fa00:	f020 0007 	bic.w	r0, r0, #7
 800fa04:	1ac2      	subs	r2, r0, r3
 800fa06:	bf1c      	itt	ne
 800fa08:	1a1b      	subne	r3, r3, r0
 800fa0a:	50a3      	strne	r3, [r4, r2]
 800fa0c:	e7af      	b.n	800f96e <_malloc_r+0x22>
 800fa0e:	6862      	ldr	r2, [r4, #4]
 800fa10:	42a3      	cmp	r3, r4
 800fa12:	bf0c      	ite	eq
 800fa14:	f8c8 2000 	streq.w	r2, [r8]
 800fa18:	605a      	strne	r2, [r3, #4]
 800fa1a:	e7eb      	b.n	800f9f4 <_malloc_r+0xa8>
 800fa1c:	4623      	mov	r3, r4
 800fa1e:	6864      	ldr	r4, [r4, #4]
 800fa20:	e7ae      	b.n	800f980 <_malloc_r+0x34>
 800fa22:	463c      	mov	r4, r7
 800fa24:	687f      	ldr	r7, [r7, #4]
 800fa26:	e7b6      	b.n	800f996 <_malloc_r+0x4a>
 800fa28:	461a      	mov	r2, r3
 800fa2a:	685b      	ldr	r3, [r3, #4]
 800fa2c:	42a3      	cmp	r3, r4
 800fa2e:	d1fb      	bne.n	800fa28 <_malloc_r+0xdc>
 800fa30:	2300      	movs	r3, #0
 800fa32:	6053      	str	r3, [r2, #4]
 800fa34:	e7de      	b.n	800f9f4 <_malloc_r+0xa8>
 800fa36:	230c      	movs	r3, #12
 800fa38:	6033      	str	r3, [r6, #0]
 800fa3a:	4630      	mov	r0, r6
 800fa3c:	f000 f80c 	bl	800fa58 <__malloc_unlock>
 800fa40:	e794      	b.n	800f96c <_malloc_r+0x20>
 800fa42:	6005      	str	r5, [r0, #0]
 800fa44:	e7d6      	b.n	800f9f4 <_malloc_r+0xa8>
 800fa46:	bf00      	nop
 800fa48:	200301e4 	.word	0x200301e4

0800fa4c <__malloc_lock>:
 800fa4c:	4801      	ldr	r0, [pc, #4]	@ (800fa54 <__malloc_lock+0x8>)
 800fa4e:	f000 bae8 	b.w	8010022 <__retarget_lock_acquire_recursive>
 800fa52:	bf00      	nop
 800fa54:	20030328 	.word	0x20030328

0800fa58 <__malloc_unlock>:
 800fa58:	4801      	ldr	r0, [pc, #4]	@ (800fa60 <__malloc_unlock+0x8>)
 800fa5a:	f000 bae3 	b.w	8010024 <__retarget_lock_release_recursive>
 800fa5e:	bf00      	nop
 800fa60:	20030328 	.word	0x20030328

0800fa64 <srand>:
 800fa64:	b538      	push	{r3, r4, r5, lr}
 800fa66:	4b10      	ldr	r3, [pc, #64]	@ (800faa8 <srand+0x44>)
 800fa68:	681d      	ldr	r5, [r3, #0]
 800fa6a:	6b2b      	ldr	r3, [r5, #48]	@ 0x30
 800fa6c:	4604      	mov	r4, r0
 800fa6e:	b9b3      	cbnz	r3, 800fa9e <srand+0x3a>
 800fa70:	2018      	movs	r0, #24
 800fa72:	f7ff ff41 	bl	800f8f8 <malloc>
 800fa76:	4602      	mov	r2, r0
 800fa78:	6328      	str	r0, [r5, #48]	@ 0x30
 800fa7a:	b920      	cbnz	r0, 800fa86 <srand+0x22>
 800fa7c:	4b0b      	ldr	r3, [pc, #44]	@ (800faac <srand+0x48>)
 800fa7e:	480c      	ldr	r0, [pc, #48]	@ (800fab0 <srand+0x4c>)
 800fa80:	2146      	movs	r1, #70	@ 0x46
 800fa82:	f000 fadf 	bl	8010044 <__assert_func>
 800fa86:	490b      	ldr	r1, [pc, #44]	@ (800fab4 <srand+0x50>)
 800fa88:	4b0b      	ldr	r3, [pc, #44]	@ (800fab8 <srand+0x54>)
 800fa8a:	e9c0 1300 	strd	r1, r3, [r0]
 800fa8e:	4b0b      	ldr	r3, [pc, #44]	@ (800fabc <srand+0x58>)
 800fa90:	6083      	str	r3, [r0, #8]
 800fa92:	230b      	movs	r3, #11
 800fa94:	8183      	strh	r3, [r0, #12]
 800fa96:	2100      	movs	r1, #0
 800fa98:	2001      	movs	r0, #1
 800fa9a:	e9c2 0104 	strd	r0, r1, [r2, #16]
 800fa9e:	6b2b      	ldr	r3, [r5, #48]	@ 0x30
 800faa0:	2200      	movs	r2, #0
 800faa2:	611c      	str	r4, [r3, #16]
 800faa4:	615a      	str	r2, [r3, #20]
 800faa6:	bd38      	pop	{r3, r4, r5, pc}
 800faa8:	200289f0 	.word	0x200289f0
 800faac:	0801b190 	.word	0x0801b190
 800fab0:	0801b1a7 	.word	0x0801b1a7
 800fab4:	abcd330e 	.word	0xabcd330e
 800fab8:	e66d1234 	.word	0xe66d1234
 800fabc:	0005deec 	.word	0x0005deec

0800fac0 <rand>:
 800fac0:	4b16      	ldr	r3, [pc, #88]	@ (800fb1c <rand+0x5c>)
 800fac2:	b510      	push	{r4, lr}
 800fac4:	681c      	ldr	r4, [r3, #0]
 800fac6:	6b23      	ldr	r3, [r4, #48]	@ 0x30
 800fac8:	b9b3      	cbnz	r3, 800faf8 <rand+0x38>
 800faca:	2018      	movs	r0, #24
 800facc:	f7ff ff14 	bl	800f8f8 <malloc>
 800fad0:	4602      	mov	r2, r0
 800fad2:	6320      	str	r0, [r4, #48]	@ 0x30
 800fad4:	b920      	cbnz	r0, 800fae0 <rand+0x20>
 800fad6:	4b12      	ldr	r3, [pc, #72]	@ (800fb20 <rand+0x60>)
 800fad8:	4812      	ldr	r0, [pc, #72]	@ (800fb24 <rand+0x64>)
 800fada:	2152      	movs	r1, #82	@ 0x52
 800fadc:	f000 fab2 	bl	8010044 <__assert_func>
 800fae0:	4911      	ldr	r1, [pc, #68]	@ (800fb28 <rand+0x68>)
 800fae2:	4b12      	ldr	r3, [pc, #72]	@ (800fb2c <rand+0x6c>)
 800fae4:	e9c0 1300 	strd	r1, r3, [r0]
 800fae8:	4b11      	ldr	r3, [pc, #68]	@ (800fb30 <rand+0x70>)
 800faea:	6083      	str	r3, [r0, #8]
 800faec:	230b      	movs	r3, #11
 800faee:	8183      	strh	r3, [r0, #12]
 800faf0:	2100      	movs	r1, #0
 800faf2:	2001      	movs	r0, #1
 800faf4:	e9c2 0104 	strd	r0, r1, [r2, #16]
 800faf8:	6b21      	ldr	r1, [r4, #48]	@ 0x30
 800fafa:	480e      	ldr	r0, [pc, #56]	@ (800fb34 <rand+0x74>)
 800fafc:	690b      	ldr	r3, [r1, #16]
 800fafe:	694c      	ldr	r4, [r1, #20]
 800fb00:	4a0d      	ldr	r2, [pc, #52]	@ (800fb38 <rand+0x78>)
 800fb02:	4358      	muls	r0, r3
 800fb04:	fb02 0004 	mla	r0, r2, r4, r0
 800fb08:	fba3 3202 	umull	r3, r2, r3, r2
 800fb0c:	3301      	adds	r3, #1
 800fb0e:	eb40 0002 	adc.w	r0, r0, r2
 800fb12:	e9c1 3004 	strd	r3, r0, [r1, #16]
 800fb16:	f020 4000 	bic.w	r0, r0, #2147483648	@ 0x80000000
 800fb1a:	bd10      	pop	{r4, pc}
 800fb1c:	200289f0 	.word	0x200289f0
 800fb20:	0801b190 	.word	0x0801b190
 800fb24:	0801b1a7 	.word	0x0801b1a7
 800fb28:	abcd330e 	.word	0xabcd330e
 800fb2c:	e66d1234 	.word	0xe66d1234
 800fb30:	0005deec 	.word	0x0005deec
 800fb34:	5851f42d 	.word	0x5851f42d
 800fb38:	4c957f2d 	.word	0x4c957f2d

0800fb3c <_realloc_r>:
 800fb3c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800fb40:	4680      	mov	r8, r0
 800fb42:	4615      	mov	r5, r2
 800fb44:	460c      	mov	r4, r1
 800fb46:	b921      	cbnz	r1, 800fb52 <_realloc_r+0x16>
 800fb48:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800fb4c:	4611      	mov	r1, r2
 800fb4e:	f7ff befd 	b.w	800f94c <_malloc_r>
 800fb52:	b92a      	cbnz	r2, 800fb60 <_realloc_r+0x24>
 800fb54:	f000 fa94 	bl	8010080 <_free_r>
 800fb58:	2400      	movs	r4, #0
 800fb5a:	4620      	mov	r0, r4
 800fb5c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800fb60:	f000 fad8 	bl	8010114 <_malloc_usable_size_r>
 800fb64:	4285      	cmp	r5, r0
 800fb66:	4606      	mov	r6, r0
 800fb68:	d802      	bhi.n	800fb70 <_realloc_r+0x34>
 800fb6a:	ebb5 0f50 	cmp.w	r5, r0, lsr #1
 800fb6e:	d8f4      	bhi.n	800fb5a <_realloc_r+0x1e>
 800fb70:	4629      	mov	r1, r5
 800fb72:	4640      	mov	r0, r8
 800fb74:	f7ff feea 	bl	800f94c <_malloc_r>
 800fb78:	4607      	mov	r7, r0
 800fb7a:	2800      	cmp	r0, #0
 800fb7c:	d0ec      	beq.n	800fb58 <_realloc_r+0x1c>
 800fb7e:	42b5      	cmp	r5, r6
 800fb80:	462a      	mov	r2, r5
 800fb82:	4621      	mov	r1, r4
 800fb84:	bf28      	it	cs
 800fb86:	4632      	movcs	r2, r6
 800fb88:	f000 fa4d 	bl	8010026 <memcpy>
 800fb8c:	4621      	mov	r1, r4
 800fb8e:	4640      	mov	r0, r8
 800fb90:	f000 fa76 	bl	8010080 <_free_r>
 800fb94:	463c      	mov	r4, r7
 800fb96:	e7e0      	b.n	800fb5a <_realloc_r+0x1e>

0800fb98 <_strtol_l.constprop.0>:
 800fb98:	2b24      	cmp	r3, #36	@ 0x24
 800fb9a:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800fb9e:	4686      	mov	lr, r0
 800fba0:	4690      	mov	r8, r2
 800fba2:	d801      	bhi.n	800fba8 <_strtol_l.constprop.0+0x10>
 800fba4:	2b01      	cmp	r3, #1
 800fba6:	d106      	bne.n	800fbb6 <_strtol_l.constprop.0+0x1e>
 800fba8:	f000 fa10 	bl	800ffcc <__errno>
 800fbac:	2316      	movs	r3, #22
 800fbae:	6003      	str	r3, [r0, #0]
 800fbb0:	2000      	movs	r0, #0
 800fbb2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800fbb6:	4834      	ldr	r0, [pc, #208]	@ (800fc88 <_strtol_l.constprop.0+0xf0>)
 800fbb8:	460d      	mov	r5, r1
 800fbba:	462a      	mov	r2, r5
 800fbbc:	f815 4b01 	ldrb.w	r4, [r5], #1
 800fbc0:	5d06      	ldrb	r6, [r0, r4]
 800fbc2:	f016 0608 	ands.w	r6, r6, #8
 800fbc6:	d1f8      	bne.n	800fbba <_strtol_l.constprop.0+0x22>
 800fbc8:	2c2d      	cmp	r4, #45	@ 0x2d
 800fbca:	d12d      	bne.n	800fc28 <_strtol_l.constprop.0+0x90>
 800fbcc:	782c      	ldrb	r4, [r5, #0]
 800fbce:	2601      	movs	r6, #1
 800fbd0:	1c95      	adds	r5, r2, #2
 800fbd2:	f033 0210 	bics.w	r2, r3, #16
 800fbd6:	d109      	bne.n	800fbec <_strtol_l.constprop.0+0x54>
 800fbd8:	2c30      	cmp	r4, #48	@ 0x30
 800fbda:	d12a      	bne.n	800fc32 <_strtol_l.constprop.0+0x9a>
 800fbdc:	782a      	ldrb	r2, [r5, #0]
 800fbde:	f002 02df 	and.w	r2, r2, #223	@ 0xdf
 800fbe2:	2a58      	cmp	r2, #88	@ 0x58
 800fbe4:	d125      	bne.n	800fc32 <_strtol_l.constprop.0+0x9a>
 800fbe6:	786c      	ldrb	r4, [r5, #1]
 800fbe8:	2310      	movs	r3, #16
 800fbea:	3502      	adds	r5, #2
 800fbec:	f106 4c00 	add.w	ip, r6, #2147483648	@ 0x80000000
 800fbf0:	f10c 3cff 	add.w	ip, ip, #4294967295
 800fbf4:	2200      	movs	r2, #0
 800fbf6:	fbbc f9f3 	udiv	r9, ip, r3
 800fbfa:	4610      	mov	r0, r2
 800fbfc:	fb03 ca19 	mls	sl, r3, r9, ip
 800fc00:	f1a4 0730 	sub.w	r7, r4, #48	@ 0x30
 800fc04:	2f09      	cmp	r7, #9
 800fc06:	d81b      	bhi.n	800fc40 <_strtol_l.constprop.0+0xa8>
 800fc08:	463c      	mov	r4, r7
 800fc0a:	42a3      	cmp	r3, r4
 800fc0c:	dd27      	ble.n	800fc5e <_strtol_l.constprop.0+0xc6>
 800fc0e:	1c57      	adds	r7, r2, #1
 800fc10:	d007      	beq.n	800fc22 <_strtol_l.constprop.0+0x8a>
 800fc12:	4581      	cmp	r9, r0
 800fc14:	d320      	bcc.n	800fc58 <_strtol_l.constprop.0+0xc0>
 800fc16:	d101      	bne.n	800fc1c <_strtol_l.constprop.0+0x84>
 800fc18:	45a2      	cmp	sl, r4
 800fc1a:	db1d      	blt.n	800fc58 <_strtol_l.constprop.0+0xc0>
 800fc1c:	fb00 4003 	mla	r0, r0, r3, r4
 800fc20:	2201      	movs	r2, #1
 800fc22:	f815 4b01 	ldrb.w	r4, [r5], #1
 800fc26:	e7eb      	b.n	800fc00 <_strtol_l.constprop.0+0x68>
 800fc28:	2c2b      	cmp	r4, #43	@ 0x2b
 800fc2a:	bf04      	itt	eq
 800fc2c:	782c      	ldrbeq	r4, [r5, #0]
 800fc2e:	1c95      	addeq	r5, r2, #2
 800fc30:	e7cf      	b.n	800fbd2 <_strtol_l.constprop.0+0x3a>
 800fc32:	2b00      	cmp	r3, #0
 800fc34:	d1da      	bne.n	800fbec <_strtol_l.constprop.0+0x54>
 800fc36:	2c30      	cmp	r4, #48	@ 0x30
 800fc38:	bf0c      	ite	eq
 800fc3a:	2308      	moveq	r3, #8
 800fc3c:	230a      	movne	r3, #10
 800fc3e:	e7d5      	b.n	800fbec <_strtol_l.constprop.0+0x54>
 800fc40:	f1a4 0741 	sub.w	r7, r4, #65	@ 0x41
 800fc44:	2f19      	cmp	r7, #25
 800fc46:	d801      	bhi.n	800fc4c <_strtol_l.constprop.0+0xb4>
 800fc48:	3c37      	subs	r4, #55	@ 0x37
 800fc4a:	e7de      	b.n	800fc0a <_strtol_l.constprop.0+0x72>
 800fc4c:	f1a4 0761 	sub.w	r7, r4, #97	@ 0x61
 800fc50:	2f19      	cmp	r7, #25
 800fc52:	d804      	bhi.n	800fc5e <_strtol_l.constprop.0+0xc6>
 800fc54:	3c57      	subs	r4, #87	@ 0x57
 800fc56:	e7d8      	b.n	800fc0a <_strtol_l.constprop.0+0x72>
 800fc58:	f04f 32ff 	mov.w	r2, #4294967295
 800fc5c:	e7e1      	b.n	800fc22 <_strtol_l.constprop.0+0x8a>
 800fc5e:	1c53      	adds	r3, r2, #1
 800fc60:	d108      	bne.n	800fc74 <_strtol_l.constprop.0+0xdc>
 800fc62:	2322      	movs	r3, #34	@ 0x22
 800fc64:	f8ce 3000 	str.w	r3, [lr]
 800fc68:	4660      	mov	r0, ip
 800fc6a:	f1b8 0f00 	cmp.w	r8, #0
 800fc6e:	d0a0      	beq.n	800fbb2 <_strtol_l.constprop.0+0x1a>
 800fc70:	1e69      	subs	r1, r5, #1
 800fc72:	e006      	b.n	800fc82 <_strtol_l.constprop.0+0xea>
 800fc74:	b106      	cbz	r6, 800fc78 <_strtol_l.constprop.0+0xe0>
 800fc76:	4240      	negs	r0, r0
 800fc78:	f1b8 0f00 	cmp.w	r8, #0
 800fc7c:	d099      	beq.n	800fbb2 <_strtol_l.constprop.0+0x1a>
 800fc7e:	2a00      	cmp	r2, #0
 800fc80:	d1f6      	bne.n	800fc70 <_strtol_l.constprop.0+0xd8>
 800fc82:	f8c8 1000 	str.w	r1, [r8]
 800fc86:	e794      	b.n	800fbb2 <_strtol_l.constprop.0+0x1a>
 800fc88:	0801b200 	.word	0x0801b200

0800fc8c <strtol>:
 800fc8c:	4613      	mov	r3, r2
 800fc8e:	460a      	mov	r2, r1
 800fc90:	4601      	mov	r1, r0
 800fc92:	4802      	ldr	r0, [pc, #8]	@ (800fc9c <strtol+0x10>)
 800fc94:	6800      	ldr	r0, [r0, #0]
 800fc96:	f7ff bf7f 	b.w	800fb98 <_strtol_l.constprop.0>
 800fc9a:	bf00      	nop
 800fc9c:	200289f0 	.word	0x200289f0

0800fca0 <std>:
 800fca0:	2300      	movs	r3, #0
 800fca2:	b510      	push	{r4, lr}
 800fca4:	4604      	mov	r4, r0
 800fca6:	e9c0 3300 	strd	r3, r3, [r0]
 800fcaa:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800fcae:	6083      	str	r3, [r0, #8]
 800fcb0:	8181      	strh	r1, [r0, #12]
 800fcb2:	6643      	str	r3, [r0, #100]	@ 0x64
 800fcb4:	81c2      	strh	r2, [r0, #14]
 800fcb6:	6183      	str	r3, [r0, #24]
 800fcb8:	4619      	mov	r1, r3
 800fcba:	2208      	movs	r2, #8
 800fcbc:	305c      	adds	r0, #92	@ 0x5c
 800fcbe:	f000 f926 	bl	800ff0e <memset>
 800fcc2:	4b0d      	ldr	r3, [pc, #52]	@ (800fcf8 <std+0x58>)
 800fcc4:	6263      	str	r3, [r4, #36]	@ 0x24
 800fcc6:	4b0d      	ldr	r3, [pc, #52]	@ (800fcfc <std+0x5c>)
 800fcc8:	62a3      	str	r3, [r4, #40]	@ 0x28
 800fcca:	4b0d      	ldr	r3, [pc, #52]	@ (800fd00 <std+0x60>)
 800fccc:	62e3      	str	r3, [r4, #44]	@ 0x2c
 800fcce:	4b0d      	ldr	r3, [pc, #52]	@ (800fd04 <std+0x64>)
 800fcd0:	6323      	str	r3, [r4, #48]	@ 0x30
 800fcd2:	4b0d      	ldr	r3, [pc, #52]	@ (800fd08 <std+0x68>)
 800fcd4:	6224      	str	r4, [r4, #32]
 800fcd6:	429c      	cmp	r4, r3
 800fcd8:	d006      	beq.n	800fce8 <std+0x48>
 800fcda:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 800fcde:	4294      	cmp	r4, r2
 800fce0:	d002      	beq.n	800fce8 <std+0x48>
 800fce2:	33d0      	adds	r3, #208	@ 0xd0
 800fce4:	429c      	cmp	r4, r3
 800fce6:	d105      	bne.n	800fcf4 <std+0x54>
 800fce8:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 800fcec:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800fcf0:	f000 b996 	b.w	8010020 <__retarget_lock_init_recursive>
 800fcf4:	bd10      	pop	{r4, pc}
 800fcf6:	bf00      	nop
 800fcf8:	0800fe89 	.word	0x0800fe89
 800fcfc:	0800feab 	.word	0x0800feab
 800fd00:	0800fee3 	.word	0x0800fee3
 800fd04:	0800ff07 	.word	0x0800ff07
 800fd08:	200301e8 	.word	0x200301e8

0800fd0c <stdio_exit_handler>:
 800fd0c:	4a02      	ldr	r2, [pc, #8]	@ (800fd18 <stdio_exit_handler+0xc>)
 800fd0e:	4903      	ldr	r1, [pc, #12]	@ (800fd1c <stdio_exit_handler+0x10>)
 800fd10:	4803      	ldr	r0, [pc, #12]	@ (800fd20 <stdio_exit_handler+0x14>)
 800fd12:	f000 b869 	b.w	800fde8 <_fwalk_sglue>
 800fd16:	bf00      	nop
 800fd18:	200289e4 	.word	0x200289e4
 800fd1c:	08010a7d 	.word	0x08010a7d
 800fd20:	200289f4 	.word	0x200289f4

0800fd24 <cleanup_stdio>:
 800fd24:	6841      	ldr	r1, [r0, #4]
 800fd26:	4b0c      	ldr	r3, [pc, #48]	@ (800fd58 <cleanup_stdio+0x34>)
 800fd28:	4299      	cmp	r1, r3
 800fd2a:	b510      	push	{r4, lr}
 800fd2c:	4604      	mov	r4, r0
 800fd2e:	d001      	beq.n	800fd34 <cleanup_stdio+0x10>
 800fd30:	f000 fea4 	bl	8010a7c <_fflush_r>
 800fd34:	68a1      	ldr	r1, [r4, #8]
 800fd36:	4b09      	ldr	r3, [pc, #36]	@ (800fd5c <cleanup_stdio+0x38>)
 800fd38:	4299      	cmp	r1, r3
 800fd3a:	d002      	beq.n	800fd42 <cleanup_stdio+0x1e>
 800fd3c:	4620      	mov	r0, r4
 800fd3e:	f000 fe9d 	bl	8010a7c <_fflush_r>
 800fd42:	68e1      	ldr	r1, [r4, #12]
 800fd44:	4b06      	ldr	r3, [pc, #24]	@ (800fd60 <cleanup_stdio+0x3c>)
 800fd46:	4299      	cmp	r1, r3
 800fd48:	d004      	beq.n	800fd54 <cleanup_stdio+0x30>
 800fd4a:	4620      	mov	r0, r4
 800fd4c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800fd50:	f000 be94 	b.w	8010a7c <_fflush_r>
 800fd54:	bd10      	pop	{r4, pc}
 800fd56:	bf00      	nop
 800fd58:	200301e8 	.word	0x200301e8
 800fd5c:	20030250 	.word	0x20030250
 800fd60:	200302b8 	.word	0x200302b8

0800fd64 <global_stdio_init.part.0>:
 800fd64:	b510      	push	{r4, lr}
 800fd66:	4b0b      	ldr	r3, [pc, #44]	@ (800fd94 <global_stdio_init.part.0+0x30>)
 800fd68:	4c0b      	ldr	r4, [pc, #44]	@ (800fd98 <global_stdio_init.part.0+0x34>)
 800fd6a:	4a0c      	ldr	r2, [pc, #48]	@ (800fd9c <global_stdio_init.part.0+0x38>)
 800fd6c:	601a      	str	r2, [r3, #0]
 800fd6e:	4620      	mov	r0, r4
 800fd70:	2200      	movs	r2, #0
 800fd72:	2104      	movs	r1, #4
 800fd74:	f7ff ff94 	bl	800fca0 <std>
 800fd78:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 800fd7c:	2201      	movs	r2, #1
 800fd7e:	2109      	movs	r1, #9
 800fd80:	f7ff ff8e 	bl	800fca0 <std>
 800fd84:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 800fd88:	2202      	movs	r2, #2
 800fd8a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800fd8e:	2112      	movs	r1, #18
 800fd90:	f7ff bf86 	b.w	800fca0 <std>
 800fd94:	20030320 	.word	0x20030320
 800fd98:	200301e8 	.word	0x200301e8
 800fd9c:	0800fd0d 	.word	0x0800fd0d

0800fda0 <__sfp_lock_acquire>:
 800fda0:	4801      	ldr	r0, [pc, #4]	@ (800fda8 <__sfp_lock_acquire+0x8>)
 800fda2:	f000 b93e 	b.w	8010022 <__retarget_lock_acquire_recursive>
 800fda6:	bf00      	nop
 800fda8:	20030329 	.word	0x20030329

0800fdac <__sfp_lock_release>:
 800fdac:	4801      	ldr	r0, [pc, #4]	@ (800fdb4 <__sfp_lock_release+0x8>)
 800fdae:	f000 b939 	b.w	8010024 <__retarget_lock_release_recursive>
 800fdb2:	bf00      	nop
 800fdb4:	20030329 	.word	0x20030329

0800fdb8 <__sinit>:
 800fdb8:	b510      	push	{r4, lr}
 800fdba:	4604      	mov	r4, r0
 800fdbc:	f7ff fff0 	bl	800fda0 <__sfp_lock_acquire>
 800fdc0:	6a23      	ldr	r3, [r4, #32]
 800fdc2:	b11b      	cbz	r3, 800fdcc <__sinit+0x14>
 800fdc4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800fdc8:	f7ff bff0 	b.w	800fdac <__sfp_lock_release>
 800fdcc:	4b04      	ldr	r3, [pc, #16]	@ (800fde0 <__sinit+0x28>)
 800fdce:	6223      	str	r3, [r4, #32]
 800fdd0:	4b04      	ldr	r3, [pc, #16]	@ (800fde4 <__sinit+0x2c>)
 800fdd2:	681b      	ldr	r3, [r3, #0]
 800fdd4:	2b00      	cmp	r3, #0
 800fdd6:	d1f5      	bne.n	800fdc4 <__sinit+0xc>
 800fdd8:	f7ff ffc4 	bl	800fd64 <global_stdio_init.part.0>
 800fddc:	e7f2      	b.n	800fdc4 <__sinit+0xc>
 800fdde:	bf00      	nop
 800fde0:	0800fd25 	.word	0x0800fd25
 800fde4:	20030320 	.word	0x20030320

0800fde8 <_fwalk_sglue>:
 800fde8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800fdec:	4607      	mov	r7, r0
 800fdee:	4688      	mov	r8, r1
 800fdf0:	4614      	mov	r4, r2
 800fdf2:	2600      	movs	r6, #0
 800fdf4:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 800fdf8:	f1b9 0901 	subs.w	r9, r9, #1
 800fdfc:	d505      	bpl.n	800fe0a <_fwalk_sglue+0x22>
 800fdfe:	6824      	ldr	r4, [r4, #0]
 800fe00:	2c00      	cmp	r4, #0
 800fe02:	d1f7      	bne.n	800fdf4 <_fwalk_sglue+0xc>
 800fe04:	4630      	mov	r0, r6
 800fe06:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800fe0a:	89ab      	ldrh	r3, [r5, #12]
 800fe0c:	2b01      	cmp	r3, #1
 800fe0e:	d907      	bls.n	800fe20 <_fwalk_sglue+0x38>
 800fe10:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 800fe14:	3301      	adds	r3, #1
 800fe16:	d003      	beq.n	800fe20 <_fwalk_sglue+0x38>
 800fe18:	4629      	mov	r1, r5
 800fe1a:	4638      	mov	r0, r7
 800fe1c:	47c0      	blx	r8
 800fe1e:	4306      	orrs	r6, r0
 800fe20:	3568      	adds	r5, #104	@ 0x68
 800fe22:	e7e9      	b.n	800fdf8 <_fwalk_sglue+0x10>

0800fe24 <iprintf>:
 800fe24:	b40f      	push	{r0, r1, r2, r3}
 800fe26:	b507      	push	{r0, r1, r2, lr}
 800fe28:	4906      	ldr	r1, [pc, #24]	@ (800fe44 <iprintf+0x20>)
 800fe2a:	ab04      	add	r3, sp, #16
 800fe2c:	6808      	ldr	r0, [r1, #0]
 800fe2e:	f853 2b04 	ldr.w	r2, [r3], #4
 800fe32:	6881      	ldr	r1, [r0, #8]
 800fe34:	9301      	str	r3, [sp, #4]
 800fe36:	f000 faf7 	bl	8010428 <_vfiprintf_r>
 800fe3a:	b003      	add	sp, #12
 800fe3c:	f85d eb04 	ldr.w	lr, [sp], #4
 800fe40:	b004      	add	sp, #16
 800fe42:	4770      	bx	lr
 800fe44:	200289f0 	.word	0x200289f0

0800fe48 <siprintf>:
 800fe48:	b40e      	push	{r1, r2, r3}
 800fe4a:	b500      	push	{lr}
 800fe4c:	b09c      	sub	sp, #112	@ 0x70
 800fe4e:	ab1d      	add	r3, sp, #116	@ 0x74
 800fe50:	9002      	str	r0, [sp, #8]
 800fe52:	9006      	str	r0, [sp, #24]
 800fe54:	f06f 4100 	mvn.w	r1, #2147483648	@ 0x80000000
 800fe58:	4809      	ldr	r0, [pc, #36]	@ (800fe80 <siprintf+0x38>)
 800fe5a:	9107      	str	r1, [sp, #28]
 800fe5c:	9104      	str	r1, [sp, #16]
 800fe5e:	4909      	ldr	r1, [pc, #36]	@ (800fe84 <siprintf+0x3c>)
 800fe60:	f853 2b04 	ldr.w	r2, [r3], #4
 800fe64:	9105      	str	r1, [sp, #20]
 800fe66:	6800      	ldr	r0, [r0, #0]
 800fe68:	9301      	str	r3, [sp, #4]
 800fe6a:	a902      	add	r1, sp, #8
 800fe6c:	f000 f9b6 	bl	80101dc <_svfiprintf_r>
 800fe70:	9b02      	ldr	r3, [sp, #8]
 800fe72:	2200      	movs	r2, #0
 800fe74:	701a      	strb	r2, [r3, #0]
 800fe76:	b01c      	add	sp, #112	@ 0x70
 800fe78:	f85d eb04 	ldr.w	lr, [sp], #4
 800fe7c:	b003      	add	sp, #12
 800fe7e:	4770      	bx	lr
 800fe80:	200289f0 	.word	0x200289f0
 800fe84:	ffff0208 	.word	0xffff0208

0800fe88 <__sread>:
 800fe88:	b510      	push	{r4, lr}
 800fe8a:	460c      	mov	r4, r1
 800fe8c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800fe90:	f000 f868 	bl	800ff64 <_read_r>
 800fe94:	2800      	cmp	r0, #0
 800fe96:	bfab      	itete	ge
 800fe98:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 800fe9a:	89a3      	ldrhlt	r3, [r4, #12]
 800fe9c:	181b      	addge	r3, r3, r0
 800fe9e:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 800fea2:	bfac      	ite	ge
 800fea4:	6563      	strge	r3, [r4, #84]	@ 0x54
 800fea6:	81a3      	strhlt	r3, [r4, #12]
 800fea8:	bd10      	pop	{r4, pc}

0800feaa <__swrite>:
 800feaa:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800feae:	461f      	mov	r7, r3
 800feb0:	898b      	ldrh	r3, [r1, #12]
 800feb2:	05db      	lsls	r3, r3, #23
 800feb4:	4605      	mov	r5, r0
 800feb6:	460c      	mov	r4, r1
 800feb8:	4616      	mov	r6, r2
 800feba:	d505      	bpl.n	800fec8 <__swrite+0x1e>
 800febc:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800fec0:	2302      	movs	r3, #2
 800fec2:	2200      	movs	r2, #0
 800fec4:	f000 f83c 	bl	800ff40 <_lseek_r>
 800fec8:	89a3      	ldrh	r3, [r4, #12]
 800feca:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800fece:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 800fed2:	81a3      	strh	r3, [r4, #12]
 800fed4:	4632      	mov	r2, r6
 800fed6:	463b      	mov	r3, r7
 800fed8:	4628      	mov	r0, r5
 800feda:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800fede:	f000 b863 	b.w	800ffa8 <_write_r>

0800fee2 <__sseek>:
 800fee2:	b510      	push	{r4, lr}
 800fee4:	460c      	mov	r4, r1
 800fee6:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800feea:	f000 f829 	bl	800ff40 <_lseek_r>
 800feee:	1c43      	adds	r3, r0, #1
 800fef0:	89a3      	ldrh	r3, [r4, #12]
 800fef2:	bf15      	itete	ne
 800fef4:	6560      	strne	r0, [r4, #84]	@ 0x54
 800fef6:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 800fefa:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 800fefe:	81a3      	strheq	r3, [r4, #12]
 800ff00:	bf18      	it	ne
 800ff02:	81a3      	strhne	r3, [r4, #12]
 800ff04:	bd10      	pop	{r4, pc}

0800ff06 <__sclose>:
 800ff06:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800ff0a:	f000 b809 	b.w	800ff20 <_close_r>

0800ff0e <memset>:
 800ff0e:	4402      	add	r2, r0
 800ff10:	4603      	mov	r3, r0
 800ff12:	4293      	cmp	r3, r2
 800ff14:	d100      	bne.n	800ff18 <memset+0xa>
 800ff16:	4770      	bx	lr
 800ff18:	f803 1b01 	strb.w	r1, [r3], #1
 800ff1c:	e7f9      	b.n	800ff12 <memset+0x4>
	...

0800ff20 <_close_r>:
 800ff20:	b538      	push	{r3, r4, r5, lr}
 800ff22:	4d06      	ldr	r5, [pc, #24]	@ (800ff3c <_close_r+0x1c>)
 800ff24:	2300      	movs	r3, #0
 800ff26:	4604      	mov	r4, r0
 800ff28:	4608      	mov	r0, r1
 800ff2a:	602b      	str	r3, [r5, #0]
 800ff2c:	f000 ff5e 	bl	8010dec <_close>
 800ff30:	1c43      	adds	r3, r0, #1
 800ff32:	d102      	bne.n	800ff3a <_close_r+0x1a>
 800ff34:	682b      	ldr	r3, [r5, #0]
 800ff36:	b103      	cbz	r3, 800ff3a <_close_r+0x1a>
 800ff38:	6023      	str	r3, [r4, #0]
 800ff3a:	bd38      	pop	{r3, r4, r5, pc}
 800ff3c:	20030324 	.word	0x20030324

0800ff40 <_lseek_r>:
 800ff40:	b538      	push	{r3, r4, r5, lr}
 800ff42:	4d07      	ldr	r5, [pc, #28]	@ (800ff60 <_lseek_r+0x20>)
 800ff44:	4604      	mov	r4, r0
 800ff46:	4608      	mov	r0, r1
 800ff48:	4611      	mov	r1, r2
 800ff4a:	2200      	movs	r2, #0
 800ff4c:	602a      	str	r2, [r5, #0]
 800ff4e:	461a      	mov	r2, r3
 800ff50:	f000 ff74 	bl	8010e3c <_lseek>
 800ff54:	1c43      	adds	r3, r0, #1
 800ff56:	d102      	bne.n	800ff5e <_lseek_r+0x1e>
 800ff58:	682b      	ldr	r3, [r5, #0]
 800ff5a:	b103      	cbz	r3, 800ff5e <_lseek_r+0x1e>
 800ff5c:	6023      	str	r3, [r4, #0]
 800ff5e:	bd38      	pop	{r3, r4, r5, pc}
 800ff60:	20030324 	.word	0x20030324

0800ff64 <_read_r>:
 800ff64:	b538      	push	{r3, r4, r5, lr}
 800ff66:	4d07      	ldr	r5, [pc, #28]	@ (800ff84 <_read_r+0x20>)
 800ff68:	4604      	mov	r4, r0
 800ff6a:	4608      	mov	r0, r1
 800ff6c:	4611      	mov	r1, r2
 800ff6e:	2200      	movs	r2, #0
 800ff70:	602a      	str	r2, [r5, #0]
 800ff72:	461a      	mov	r2, r3
 800ff74:	f000 ff6a 	bl	8010e4c <_read>
 800ff78:	1c43      	adds	r3, r0, #1
 800ff7a:	d102      	bne.n	800ff82 <_read_r+0x1e>
 800ff7c:	682b      	ldr	r3, [r5, #0]
 800ff7e:	b103      	cbz	r3, 800ff82 <_read_r+0x1e>
 800ff80:	6023      	str	r3, [r4, #0]
 800ff82:	bd38      	pop	{r3, r4, r5, pc}
 800ff84:	20030324 	.word	0x20030324

0800ff88 <_sbrk_r>:
 800ff88:	b538      	push	{r3, r4, r5, lr}
 800ff8a:	4d06      	ldr	r5, [pc, #24]	@ (800ffa4 <_sbrk_r+0x1c>)
 800ff8c:	2300      	movs	r3, #0
 800ff8e:	4604      	mov	r4, r0
 800ff90:	4608      	mov	r0, r1
 800ff92:	602b      	str	r3, [r5, #0]
 800ff94:	f7f1 febc 	bl	8001d10 <_sbrk>
 800ff98:	1c43      	adds	r3, r0, #1
 800ff9a:	d102      	bne.n	800ffa2 <_sbrk_r+0x1a>
 800ff9c:	682b      	ldr	r3, [r5, #0]
 800ff9e:	b103      	cbz	r3, 800ffa2 <_sbrk_r+0x1a>
 800ffa0:	6023      	str	r3, [r4, #0]
 800ffa2:	bd38      	pop	{r3, r4, r5, pc}
 800ffa4:	20030324 	.word	0x20030324

0800ffa8 <_write_r>:
 800ffa8:	b538      	push	{r3, r4, r5, lr}
 800ffaa:	4d07      	ldr	r5, [pc, #28]	@ (800ffc8 <_write_r+0x20>)
 800ffac:	4604      	mov	r4, r0
 800ffae:	4608      	mov	r0, r1
 800ffb0:	4611      	mov	r1, r2
 800ffb2:	2200      	movs	r2, #0
 800ffb4:	602a      	str	r2, [r5, #0]
 800ffb6:	461a      	mov	r2, r3
 800ffb8:	f000 ff50 	bl	8010e5c <_write>
 800ffbc:	1c43      	adds	r3, r0, #1
 800ffbe:	d102      	bne.n	800ffc6 <_write_r+0x1e>
 800ffc0:	682b      	ldr	r3, [r5, #0]
 800ffc2:	b103      	cbz	r3, 800ffc6 <_write_r+0x1e>
 800ffc4:	6023      	str	r3, [r4, #0]
 800ffc6:	bd38      	pop	{r3, r4, r5, pc}
 800ffc8:	20030324 	.word	0x20030324

0800ffcc <__errno>:
 800ffcc:	4b01      	ldr	r3, [pc, #4]	@ (800ffd4 <__errno+0x8>)
 800ffce:	6818      	ldr	r0, [r3, #0]
 800ffd0:	4770      	bx	lr
 800ffd2:	bf00      	nop
 800ffd4:	200289f0 	.word	0x200289f0

0800ffd8 <__libc_init_array>:
 800ffd8:	b570      	push	{r4, r5, r6, lr}
 800ffda:	4d0d      	ldr	r5, [pc, #52]	@ (8010010 <__libc_init_array+0x38>)
 800ffdc:	4c0d      	ldr	r4, [pc, #52]	@ (8010014 <__libc_init_array+0x3c>)
 800ffde:	1b64      	subs	r4, r4, r5
 800ffe0:	10a4      	asrs	r4, r4, #2
 800ffe2:	2600      	movs	r6, #0
 800ffe4:	42a6      	cmp	r6, r4
 800ffe6:	d109      	bne.n	800fffc <__libc_init_array+0x24>
 800ffe8:	4d0b      	ldr	r5, [pc, #44]	@ (8010018 <__libc_init_array+0x40>)
 800ffea:	4c0c      	ldr	r4, [pc, #48]	@ (801001c <__libc_init_array+0x44>)
 800ffec:	f000 ff40 	bl	8010e70 <_init>
 800fff0:	1b64      	subs	r4, r4, r5
 800fff2:	10a4      	asrs	r4, r4, #2
 800fff4:	2600      	movs	r6, #0
 800fff6:	42a6      	cmp	r6, r4
 800fff8:	d105      	bne.n	8010006 <__libc_init_array+0x2e>
 800fffa:	bd70      	pop	{r4, r5, r6, pc}
 800fffc:	f855 3b04 	ldr.w	r3, [r5], #4
 8010000:	4798      	blx	r3
 8010002:	3601      	adds	r6, #1
 8010004:	e7ee      	b.n	800ffe4 <__libc_init_array+0xc>
 8010006:	f855 3b04 	ldr.w	r3, [r5], #4
 801000a:	4798      	blx	r3
 801000c:	3601      	adds	r6, #1
 801000e:	e7f2      	b.n	800fff6 <__libc_init_array+0x1e>
 8010010:	0801b378 	.word	0x0801b378
 8010014:	0801b378 	.word	0x0801b378
 8010018:	0801b378 	.word	0x0801b378
 801001c:	0801b37c 	.word	0x0801b37c

08010020 <__retarget_lock_init_recursive>:
 8010020:	4770      	bx	lr

08010022 <__retarget_lock_acquire_recursive>:
 8010022:	4770      	bx	lr

08010024 <__retarget_lock_release_recursive>:
 8010024:	4770      	bx	lr

08010026 <memcpy>:
 8010026:	440a      	add	r2, r1
 8010028:	4291      	cmp	r1, r2
 801002a:	f100 33ff 	add.w	r3, r0, #4294967295
 801002e:	d100      	bne.n	8010032 <memcpy+0xc>
 8010030:	4770      	bx	lr
 8010032:	b510      	push	{r4, lr}
 8010034:	f811 4b01 	ldrb.w	r4, [r1], #1
 8010038:	f803 4f01 	strb.w	r4, [r3, #1]!
 801003c:	4291      	cmp	r1, r2
 801003e:	d1f9      	bne.n	8010034 <memcpy+0xe>
 8010040:	bd10      	pop	{r4, pc}
	...

08010044 <__assert_func>:
 8010044:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8010046:	4614      	mov	r4, r2
 8010048:	461a      	mov	r2, r3
 801004a:	4b09      	ldr	r3, [pc, #36]	@ (8010070 <__assert_func+0x2c>)
 801004c:	681b      	ldr	r3, [r3, #0]
 801004e:	4605      	mov	r5, r0
 8010050:	68d8      	ldr	r0, [r3, #12]
 8010052:	b954      	cbnz	r4, 801006a <__assert_func+0x26>
 8010054:	4b07      	ldr	r3, [pc, #28]	@ (8010074 <__assert_func+0x30>)
 8010056:	461c      	mov	r4, r3
 8010058:	e9cd 3401 	strd	r3, r4, [sp, #4]
 801005c:	9100      	str	r1, [sp, #0]
 801005e:	462b      	mov	r3, r5
 8010060:	4905      	ldr	r1, [pc, #20]	@ (8010078 <__assert_func+0x34>)
 8010062:	f000 fd33 	bl	8010acc <fiprintf>
 8010066:	f000 fdf1 	bl	8010c4c <abort>
 801006a:	4b04      	ldr	r3, [pc, #16]	@ (801007c <__assert_func+0x38>)
 801006c:	e7f4      	b.n	8010058 <__assert_func+0x14>
 801006e:	bf00      	nop
 8010070:	200289f0 	.word	0x200289f0
 8010074:	0801b33b 	.word	0x0801b33b
 8010078:	0801b30d 	.word	0x0801b30d
 801007c:	0801b300 	.word	0x0801b300

08010080 <_free_r>:
 8010080:	b538      	push	{r3, r4, r5, lr}
 8010082:	4605      	mov	r5, r0
 8010084:	2900      	cmp	r1, #0
 8010086:	d041      	beq.n	801010c <_free_r+0x8c>
 8010088:	f851 3c04 	ldr.w	r3, [r1, #-4]
 801008c:	1f0c      	subs	r4, r1, #4
 801008e:	2b00      	cmp	r3, #0
 8010090:	bfb8      	it	lt
 8010092:	18e4      	addlt	r4, r4, r3
 8010094:	f7ff fcda 	bl	800fa4c <__malloc_lock>
 8010098:	4a1d      	ldr	r2, [pc, #116]	@ (8010110 <_free_r+0x90>)
 801009a:	6813      	ldr	r3, [r2, #0]
 801009c:	b933      	cbnz	r3, 80100ac <_free_r+0x2c>
 801009e:	6063      	str	r3, [r4, #4]
 80100a0:	6014      	str	r4, [r2, #0]
 80100a2:	4628      	mov	r0, r5
 80100a4:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80100a8:	f7ff bcd6 	b.w	800fa58 <__malloc_unlock>
 80100ac:	42a3      	cmp	r3, r4
 80100ae:	d908      	bls.n	80100c2 <_free_r+0x42>
 80100b0:	6820      	ldr	r0, [r4, #0]
 80100b2:	1821      	adds	r1, r4, r0
 80100b4:	428b      	cmp	r3, r1
 80100b6:	bf01      	itttt	eq
 80100b8:	6819      	ldreq	r1, [r3, #0]
 80100ba:	685b      	ldreq	r3, [r3, #4]
 80100bc:	1809      	addeq	r1, r1, r0
 80100be:	6021      	streq	r1, [r4, #0]
 80100c0:	e7ed      	b.n	801009e <_free_r+0x1e>
 80100c2:	461a      	mov	r2, r3
 80100c4:	685b      	ldr	r3, [r3, #4]
 80100c6:	b10b      	cbz	r3, 80100cc <_free_r+0x4c>
 80100c8:	42a3      	cmp	r3, r4
 80100ca:	d9fa      	bls.n	80100c2 <_free_r+0x42>
 80100cc:	6811      	ldr	r1, [r2, #0]
 80100ce:	1850      	adds	r0, r2, r1
 80100d0:	42a0      	cmp	r0, r4
 80100d2:	d10b      	bne.n	80100ec <_free_r+0x6c>
 80100d4:	6820      	ldr	r0, [r4, #0]
 80100d6:	4401      	add	r1, r0
 80100d8:	1850      	adds	r0, r2, r1
 80100da:	4283      	cmp	r3, r0
 80100dc:	6011      	str	r1, [r2, #0]
 80100de:	d1e0      	bne.n	80100a2 <_free_r+0x22>
 80100e0:	6818      	ldr	r0, [r3, #0]
 80100e2:	685b      	ldr	r3, [r3, #4]
 80100e4:	6053      	str	r3, [r2, #4]
 80100e6:	4408      	add	r0, r1
 80100e8:	6010      	str	r0, [r2, #0]
 80100ea:	e7da      	b.n	80100a2 <_free_r+0x22>
 80100ec:	d902      	bls.n	80100f4 <_free_r+0x74>
 80100ee:	230c      	movs	r3, #12
 80100f0:	602b      	str	r3, [r5, #0]
 80100f2:	e7d6      	b.n	80100a2 <_free_r+0x22>
 80100f4:	6820      	ldr	r0, [r4, #0]
 80100f6:	1821      	adds	r1, r4, r0
 80100f8:	428b      	cmp	r3, r1
 80100fa:	bf04      	itt	eq
 80100fc:	6819      	ldreq	r1, [r3, #0]
 80100fe:	685b      	ldreq	r3, [r3, #4]
 8010100:	6063      	str	r3, [r4, #4]
 8010102:	bf04      	itt	eq
 8010104:	1809      	addeq	r1, r1, r0
 8010106:	6021      	streq	r1, [r4, #0]
 8010108:	6054      	str	r4, [r2, #4]
 801010a:	e7ca      	b.n	80100a2 <_free_r+0x22>
 801010c:	bd38      	pop	{r3, r4, r5, pc}
 801010e:	bf00      	nop
 8010110:	200301e4 	.word	0x200301e4

08010114 <_malloc_usable_size_r>:
 8010114:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8010118:	1f18      	subs	r0, r3, #4
 801011a:	2b00      	cmp	r3, #0
 801011c:	bfbc      	itt	lt
 801011e:	580b      	ldrlt	r3, [r1, r0]
 8010120:	18c0      	addlt	r0, r0, r3
 8010122:	4770      	bx	lr

08010124 <__ssputs_r>:
 8010124:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8010128:	688e      	ldr	r6, [r1, #8]
 801012a:	461f      	mov	r7, r3
 801012c:	42be      	cmp	r6, r7
 801012e:	680b      	ldr	r3, [r1, #0]
 8010130:	4682      	mov	sl, r0
 8010132:	460c      	mov	r4, r1
 8010134:	4690      	mov	r8, r2
 8010136:	d82d      	bhi.n	8010194 <__ssputs_r+0x70>
 8010138:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 801013c:	f412 6f90 	tst.w	r2, #1152	@ 0x480
 8010140:	d026      	beq.n	8010190 <__ssputs_r+0x6c>
 8010142:	6965      	ldr	r5, [r4, #20]
 8010144:	6909      	ldr	r1, [r1, #16]
 8010146:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 801014a:	eba3 0901 	sub.w	r9, r3, r1
 801014e:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8010152:	1c7b      	adds	r3, r7, #1
 8010154:	444b      	add	r3, r9
 8010156:	106d      	asrs	r5, r5, #1
 8010158:	429d      	cmp	r5, r3
 801015a:	bf38      	it	cc
 801015c:	461d      	movcc	r5, r3
 801015e:	0553      	lsls	r3, r2, #21
 8010160:	d527      	bpl.n	80101b2 <__ssputs_r+0x8e>
 8010162:	4629      	mov	r1, r5
 8010164:	f7ff fbf2 	bl	800f94c <_malloc_r>
 8010168:	4606      	mov	r6, r0
 801016a:	b360      	cbz	r0, 80101c6 <__ssputs_r+0xa2>
 801016c:	6921      	ldr	r1, [r4, #16]
 801016e:	464a      	mov	r2, r9
 8010170:	f7ff ff59 	bl	8010026 <memcpy>
 8010174:	89a3      	ldrh	r3, [r4, #12]
 8010176:	f423 6390 	bic.w	r3, r3, #1152	@ 0x480
 801017a:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 801017e:	81a3      	strh	r3, [r4, #12]
 8010180:	6126      	str	r6, [r4, #16]
 8010182:	6165      	str	r5, [r4, #20]
 8010184:	444e      	add	r6, r9
 8010186:	eba5 0509 	sub.w	r5, r5, r9
 801018a:	6026      	str	r6, [r4, #0]
 801018c:	60a5      	str	r5, [r4, #8]
 801018e:	463e      	mov	r6, r7
 8010190:	42be      	cmp	r6, r7
 8010192:	d900      	bls.n	8010196 <__ssputs_r+0x72>
 8010194:	463e      	mov	r6, r7
 8010196:	6820      	ldr	r0, [r4, #0]
 8010198:	4632      	mov	r2, r6
 801019a:	4641      	mov	r1, r8
 801019c:	f000 fd3c 	bl	8010c18 <memmove>
 80101a0:	68a3      	ldr	r3, [r4, #8]
 80101a2:	1b9b      	subs	r3, r3, r6
 80101a4:	60a3      	str	r3, [r4, #8]
 80101a6:	6823      	ldr	r3, [r4, #0]
 80101a8:	4433      	add	r3, r6
 80101aa:	6023      	str	r3, [r4, #0]
 80101ac:	2000      	movs	r0, #0
 80101ae:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80101b2:	462a      	mov	r2, r5
 80101b4:	f7ff fcc2 	bl	800fb3c <_realloc_r>
 80101b8:	4606      	mov	r6, r0
 80101ba:	2800      	cmp	r0, #0
 80101bc:	d1e0      	bne.n	8010180 <__ssputs_r+0x5c>
 80101be:	6921      	ldr	r1, [r4, #16]
 80101c0:	4650      	mov	r0, sl
 80101c2:	f7ff ff5d 	bl	8010080 <_free_r>
 80101c6:	230c      	movs	r3, #12
 80101c8:	f8ca 3000 	str.w	r3, [sl]
 80101cc:	89a3      	ldrh	r3, [r4, #12]
 80101ce:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80101d2:	81a3      	strh	r3, [r4, #12]
 80101d4:	f04f 30ff 	mov.w	r0, #4294967295
 80101d8:	e7e9      	b.n	80101ae <__ssputs_r+0x8a>
	...

080101dc <_svfiprintf_r>:
 80101dc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80101e0:	4698      	mov	r8, r3
 80101e2:	898b      	ldrh	r3, [r1, #12]
 80101e4:	061b      	lsls	r3, r3, #24
 80101e6:	b09d      	sub	sp, #116	@ 0x74
 80101e8:	4607      	mov	r7, r0
 80101ea:	460d      	mov	r5, r1
 80101ec:	4614      	mov	r4, r2
 80101ee:	d510      	bpl.n	8010212 <_svfiprintf_r+0x36>
 80101f0:	690b      	ldr	r3, [r1, #16]
 80101f2:	b973      	cbnz	r3, 8010212 <_svfiprintf_r+0x36>
 80101f4:	2140      	movs	r1, #64	@ 0x40
 80101f6:	f7ff fba9 	bl	800f94c <_malloc_r>
 80101fa:	6028      	str	r0, [r5, #0]
 80101fc:	6128      	str	r0, [r5, #16]
 80101fe:	b930      	cbnz	r0, 801020e <_svfiprintf_r+0x32>
 8010200:	230c      	movs	r3, #12
 8010202:	603b      	str	r3, [r7, #0]
 8010204:	f04f 30ff 	mov.w	r0, #4294967295
 8010208:	b01d      	add	sp, #116	@ 0x74
 801020a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801020e:	2340      	movs	r3, #64	@ 0x40
 8010210:	616b      	str	r3, [r5, #20]
 8010212:	2300      	movs	r3, #0
 8010214:	9309      	str	r3, [sp, #36]	@ 0x24
 8010216:	2320      	movs	r3, #32
 8010218:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 801021c:	f8cd 800c 	str.w	r8, [sp, #12]
 8010220:	2330      	movs	r3, #48	@ 0x30
 8010222:	f8df 819c 	ldr.w	r8, [pc, #412]	@ 80103c0 <_svfiprintf_r+0x1e4>
 8010226:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 801022a:	f04f 0901 	mov.w	r9, #1
 801022e:	4623      	mov	r3, r4
 8010230:	469a      	mov	sl, r3
 8010232:	f813 2b01 	ldrb.w	r2, [r3], #1
 8010236:	b10a      	cbz	r2, 801023c <_svfiprintf_r+0x60>
 8010238:	2a25      	cmp	r2, #37	@ 0x25
 801023a:	d1f9      	bne.n	8010230 <_svfiprintf_r+0x54>
 801023c:	ebba 0b04 	subs.w	fp, sl, r4
 8010240:	d00b      	beq.n	801025a <_svfiprintf_r+0x7e>
 8010242:	465b      	mov	r3, fp
 8010244:	4622      	mov	r2, r4
 8010246:	4629      	mov	r1, r5
 8010248:	4638      	mov	r0, r7
 801024a:	f7ff ff6b 	bl	8010124 <__ssputs_r>
 801024e:	3001      	adds	r0, #1
 8010250:	f000 80a7 	beq.w	80103a2 <_svfiprintf_r+0x1c6>
 8010254:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8010256:	445a      	add	r2, fp
 8010258:	9209      	str	r2, [sp, #36]	@ 0x24
 801025a:	f89a 3000 	ldrb.w	r3, [sl]
 801025e:	2b00      	cmp	r3, #0
 8010260:	f000 809f 	beq.w	80103a2 <_svfiprintf_r+0x1c6>
 8010264:	2300      	movs	r3, #0
 8010266:	f04f 32ff 	mov.w	r2, #4294967295
 801026a:	e9cd 2305 	strd	r2, r3, [sp, #20]
 801026e:	f10a 0a01 	add.w	sl, sl, #1
 8010272:	9304      	str	r3, [sp, #16]
 8010274:	9307      	str	r3, [sp, #28]
 8010276:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 801027a:	931a      	str	r3, [sp, #104]	@ 0x68
 801027c:	4654      	mov	r4, sl
 801027e:	2205      	movs	r2, #5
 8010280:	f814 1b01 	ldrb.w	r1, [r4], #1
 8010284:	484e      	ldr	r0, [pc, #312]	@ (80103c0 <_svfiprintf_r+0x1e4>)
 8010286:	f7ef ffe3 	bl	8000250 <memchr>
 801028a:	9a04      	ldr	r2, [sp, #16]
 801028c:	b9d8      	cbnz	r0, 80102c6 <_svfiprintf_r+0xea>
 801028e:	06d0      	lsls	r0, r2, #27
 8010290:	bf44      	itt	mi
 8010292:	2320      	movmi	r3, #32
 8010294:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8010298:	0711      	lsls	r1, r2, #28
 801029a:	bf44      	itt	mi
 801029c:	232b      	movmi	r3, #43	@ 0x2b
 801029e:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 80102a2:	f89a 3000 	ldrb.w	r3, [sl]
 80102a6:	2b2a      	cmp	r3, #42	@ 0x2a
 80102a8:	d015      	beq.n	80102d6 <_svfiprintf_r+0xfa>
 80102aa:	9a07      	ldr	r2, [sp, #28]
 80102ac:	4654      	mov	r4, sl
 80102ae:	2000      	movs	r0, #0
 80102b0:	f04f 0c0a 	mov.w	ip, #10
 80102b4:	4621      	mov	r1, r4
 80102b6:	f811 3b01 	ldrb.w	r3, [r1], #1
 80102ba:	3b30      	subs	r3, #48	@ 0x30
 80102bc:	2b09      	cmp	r3, #9
 80102be:	d94b      	bls.n	8010358 <_svfiprintf_r+0x17c>
 80102c0:	b1b0      	cbz	r0, 80102f0 <_svfiprintf_r+0x114>
 80102c2:	9207      	str	r2, [sp, #28]
 80102c4:	e014      	b.n	80102f0 <_svfiprintf_r+0x114>
 80102c6:	eba0 0308 	sub.w	r3, r0, r8
 80102ca:	fa09 f303 	lsl.w	r3, r9, r3
 80102ce:	4313      	orrs	r3, r2
 80102d0:	9304      	str	r3, [sp, #16]
 80102d2:	46a2      	mov	sl, r4
 80102d4:	e7d2      	b.n	801027c <_svfiprintf_r+0xa0>
 80102d6:	9b03      	ldr	r3, [sp, #12]
 80102d8:	1d19      	adds	r1, r3, #4
 80102da:	681b      	ldr	r3, [r3, #0]
 80102dc:	9103      	str	r1, [sp, #12]
 80102de:	2b00      	cmp	r3, #0
 80102e0:	bfbb      	ittet	lt
 80102e2:	425b      	neglt	r3, r3
 80102e4:	f042 0202 	orrlt.w	r2, r2, #2
 80102e8:	9307      	strge	r3, [sp, #28]
 80102ea:	9307      	strlt	r3, [sp, #28]
 80102ec:	bfb8      	it	lt
 80102ee:	9204      	strlt	r2, [sp, #16]
 80102f0:	7823      	ldrb	r3, [r4, #0]
 80102f2:	2b2e      	cmp	r3, #46	@ 0x2e
 80102f4:	d10a      	bne.n	801030c <_svfiprintf_r+0x130>
 80102f6:	7863      	ldrb	r3, [r4, #1]
 80102f8:	2b2a      	cmp	r3, #42	@ 0x2a
 80102fa:	d132      	bne.n	8010362 <_svfiprintf_r+0x186>
 80102fc:	9b03      	ldr	r3, [sp, #12]
 80102fe:	1d1a      	adds	r2, r3, #4
 8010300:	681b      	ldr	r3, [r3, #0]
 8010302:	9203      	str	r2, [sp, #12]
 8010304:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 8010308:	3402      	adds	r4, #2
 801030a:	9305      	str	r3, [sp, #20]
 801030c:	f8df a0c0 	ldr.w	sl, [pc, #192]	@ 80103d0 <_svfiprintf_r+0x1f4>
 8010310:	7821      	ldrb	r1, [r4, #0]
 8010312:	2203      	movs	r2, #3
 8010314:	4650      	mov	r0, sl
 8010316:	f7ef ff9b 	bl	8000250 <memchr>
 801031a:	b138      	cbz	r0, 801032c <_svfiprintf_r+0x150>
 801031c:	9b04      	ldr	r3, [sp, #16]
 801031e:	eba0 000a 	sub.w	r0, r0, sl
 8010322:	2240      	movs	r2, #64	@ 0x40
 8010324:	4082      	lsls	r2, r0
 8010326:	4313      	orrs	r3, r2
 8010328:	3401      	adds	r4, #1
 801032a:	9304      	str	r3, [sp, #16]
 801032c:	f814 1b01 	ldrb.w	r1, [r4], #1
 8010330:	4824      	ldr	r0, [pc, #144]	@ (80103c4 <_svfiprintf_r+0x1e8>)
 8010332:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 8010336:	2206      	movs	r2, #6
 8010338:	f7ef ff8a 	bl	8000250 <memchr>
 801033c:	2800      	cmp	r0, #0
 801033e:	d036      	beq.n	80103ae <_svfiprintf_r+0x1d2>
 8010340:	4b21      	ldr	r3, [pc, #132]	@ (80103c8 <_svfiprintf_r+0x1ec>)
 8010342:	bb1b      	cbnz	r3, 801038c <_svfiprintf_r+0x1b0>
 8010344:	9b03      	ldr	r3, [sp, #12]
 8010346:	3307      	adds	r3, #7
 8010348:	f023 0307 	bic.w	r3, r3, #7
 801034c:	3308      	adds	r3, #8
 801034e:	9303      	str	r3, [sp, #12]
 8010350:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8010352:	4433      	add	r3, r6
 8010354:	9309      	str	r3, [sp, #36]	@ 0x24
 8010356:	e76a      	b.n	801022e <_svfiprintf_r+0x52>
 8010358:	fb0c 3202 	mla	r2, ip, r2, r3
 801035c:	460c      	mov	r4, r1
 801035e:	2001      	movs	r0, #1
 8010360:	e7a8      	b.n	80102b4 <_svfiprintf_r+0xd8>
 8010362:	2300      	movs	r3, #0
 8010364:	3401      	adds	r4, #1
 8010366:	9305      	str	r3, [sp, #20]
 8010368:	4619      	mov	r1, r3
 801036a:	f04f 0c0a 	mov.w	ip, #10
 801036e:	4620      	mov	r0, r4
 8010370:	f810 2b01 	ldrb.w	r2, [r0], #1
 8010374:	3a30      	subs	r2, #48	@ 0x30
 8010376:	2a09      	cmp	r2, #9
 8010378:	d903      	bls.n	8010382 <_svfiprintf_r+0x1a6>
 801037a:	2b00      	cmp	r3, #0
 801037c:	d0c6      	beq.n	801030c <_svfiprintf_r+0x130>
 801037e:	9105      	str	r1, [sp, #20]
 8010380:	e7c4      	b.n	801030c <_svfiprintf_r+0x130>
 8010382:	fb0c 2101 	mla	r1, ip, r1, r2
 8010386:	4604      	mov	r4, r0
 8010388:	2301      	movs	r3, #1
 801038a:	e7f0      	b.n	801036e <_svfiprintf_r+0x192>
 801038c:	ab03      	add	r3, sp, #12
 801038e:	9300      	str	r3, [sp, #0]
 8010390:	462a      	mov	r2, r5
 8010392:	4b0e      	ldr	r3, [pc, #56]	@ (80103cc <_svfiprintf_r+0x1f0>)
 8010394:	a904      	add	r1, sp, #16
 8010396:	4638      	mov	r0, r7
 8010398:	f3af 8000 	nop.w
 801039c:	1c42      	adds	r2, r0, #1
 801039e:	4606      	mov	r6, r0
 80103a0:	d1d6      	bne.n	8010350 <_svfiprintf_r+0x174>
 80103a2:	89ab      	ldrh	r3, [r5, #12]
 80103a4:	065b      	lsls	r3, r3, #25
 80103a6:	f53f af2d 	bmi.w	8010204 <_svfiprintf_r+0x28>
 80103aa:	9809      	ldr	r0, [sp, #36]	@ 0x24
 80103ac:	e72c      	b.n	8010208 <_svfiprintf_r+0x2c>
 80103ae:	ab03      	add	r3, sp, #12
 80103b0:	9300      	str	r3, [sp, #0]
 80103b2:	462a      	mov	r2, r5
 80103b4:	4b05      	ldr	r3, [pc, #20]	@ (80103cc <_svfiprintf_r+0x1f0>)
 80103b6:	a904      	add	r1, sp, #16
 80103b8:	4638      	mov	r0, r7
 80103ba:	f000 f9bb 	bl	8010734 <_printf_i>
 80103be:	e7ed      	b.n	801039c <_svfiprintf_r+0x1c0>
 80103c0:	0801b33c 	.word	0x0801b33c
 80103c4:	0801b346 	.word	0x0801b346
 80103c8:	00000000 	.word	0x00000000
 80103cc:	08010125 	.word	0x08010125
 80103d0:	0801b342 	.word	0x0801b342

080103d4 <__sfputc_r>:
 80103d4:	6893      	ldr	r3, [r2, #8]
 80103d6:	3b01      	subs	r3, #1
 80103d8:	2b00      	cmp	r3, #0
 80103da:	b410      	push	{r4}
 80103dc:	6093      	str	r3, [r2, #8]
 80103de:	da08      	bge.n	80103f2 <__sfputc_r+0x1e>
 80103e0:	6994      	ldr	r4, [r2, #24]
 80103e2:	42a3      	cmp	r3, r4
 80103e4:	db01      	blt.n	80103ea <__sfputc_r+0x16>
 80103e6:	290a      	cmp	r1, #10
 80103e8:	d103      	bne.n	80103f2 <__sfputc_r+0x1e>
 80103ea:	f85d 4b04 	ldr.w	r4, [sp], #4
 80103ee:	f000 bb7f 	b.w	8010af0 <__swbuf_r>
 80103f2:	6813      	ldr	r3, [r2, #0]
 80103f4:	1c58      	adds	r0, r3, #1
 80103f6:	6010      	str	r0, [r2, #0]
 80103f8:	7019      	strb	r1, [r3, #0]
 80103fa:	4608      	mov	r0, r1
 80103fc:	f85d 4b04 	ldr.w	r4, [sp], #4
 8010400:	4770      	bx	lr

08010402 <__sfputs_r>:
 8010402:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8010404:	4606      	mov	r6, r0
 8010406:	460f      	mov	r7, r1
 8010408:	4614      	mov	r4, r2
 801040a:	18d5      	adds	r5, r2, r3
 801040c:	42ac      	cmp	r4, r5
 801040e:	d101      	bne.n	8010414 <__sfputs_r+0x12>
 8010410:	2000      	movs	r0, #0
 8010412:	e007      	b.n	8010424 <__sfputs_r+0x22>
 8010414:	f814 1b01 	ldrb.w	r1, [r4], #1
 8010418:	463a      	mov	r2, r7
 801041a:	4630      	mov	r0, r6
 801041c:	f7ff ffda 	bl	80103d4 <__sfputc_r>
 8010420:	1c43      	adds	r3, r0, #1
 8010422:	d1f3      	bne.n	801040c <__sfputs_r+0xa>
 8010424:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08010428 <_vfiprintf_r>:
 8010428:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801042c:	460d      	mov	r5, r1
 801042e:	b09d      	sub	sp, #116	@ 0x74
 8010430:	4614      	mov	r4, r2
 8010432:	4698      	mov	r8, r3
 8010434:	4606      	mov	r6, r0
 8010436:	b118      	cbz	r0, 8010440 <_vfiprintf_r+0x18>
 8010438:	6a03      	ldr	r3, [r0, #32]
 801043a:	b90b      	cbnz	r3, 8010440 <_vfiprintf_r+0x18>
 801043c:	f7ff fcbc 	bl	800fdb8 <__sinit>
 8010440:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8010442:	07d9      	lsls	r1, r3, #31
 8010444:	d405      	bmi.n	8010452 <_vfiprintf_r+0x2a>
 8010446:	89ab      	ldrh	r3, [r5, #12]
 8010448:	059a      	lsls	r2, r3, #22
 801044a:	d402      	bmi.n	8010452 <_vfiprintf_r+0x2a>
 801044c:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 801044e:	f7ff fde8 	bl	8010022 <__retarget_lock_acquire_recursive>
 8010452:	89ab      	ldrh	r3, [r5, #12]
 8010454:	071b      	lsls	r3, r3, #28
 8010456:	d501      	bpl.n	801045c <_vfiprintf_r+0x34>
 8010458:	692b      	ldr	r3, [r5, #16]
 801045a:	b99b      	cbnz	r3, 8010484 <_vfiprintf_r+0x5c>
 801045c:	4629      	mov	r1, r5
 801045e:	4630      	mov	r0, r6
 8010460:	f000 fb84 	bl	8010b6c <__swsetup_r>
 8010464:	b170      	cbz	r0, 8010484 <_vfiprintf_r+0x5c>
 8010466:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8010468:	07dc      	lsls	r4, r3, #31
 801046a:	d504      	bpl.n	8010476 <_vfiprintf_r+0x4e>
 801046c:	f04f 30ff 	mov.w	r0, #4294967295
 8010470:	b01d      	add	sp, #116	@ 0x74
 8010472:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8010476:	89ab      	ldrh	r3, [r5, #12]
 8010478:	0598      	lsls	r0, r3, #22
 801047a:	d4f7      	bmi.n	801046c <_vfiprintf_r+0x44>
 801047c:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 801047e:	f7ff fdd1 	bl	8010024 <__retarget_lock_release_recursive>
 8010482:	e7f3      	b.n	801046c <_vfiprintf_r+0x44>
 8010484:	2300      	movs	r3, #0
 8010486:	9309      	str	r3, [sp, #36]	@ 0x24
 8010488:	2320      	movs	r3, #32
 801048a:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 801048e:	f8cd 800c 	str.w	r8, [sp, #12]
 8010492:	2330      	movs	r3, #48	@ 0x30
 8010494:	f8df 81ac 	ldr.w	r8, [pc, #428]	@ 8010644 <_vfiprintf_r+0x21c>
 8010498:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 801049c:	f04f 0901 	mov.w	r9, #1
 80104a0:	4623      	mov	r3, r4
 80104a2:	469a      	mov	sl, r3
 80104a4:	f813 2b01 	ldrb.w	r2, [r3], #1
 80104a8:	b10a      	cbz	r2, 80104ae <_vfiprintf_r+0x86>
 80104aa:	2a25      	cmp	r2, #37	@ 0x25
 80104ac:	d1f9      	bne.n	80104a2 <_vfiprintf_r+0x7a>
 80104ae:	ebba 0b04 	subs.w	fp, sl, r4
 80104b2:	d00b      	beq.n	80104cc <_vfiprintf_r+0xa4>
 80104b4:	465b      	mov	r3, fp
 80104b6:	4622      	mov	r2, r4
 80104b8:	4629      	mov	r1, r5
 80104ba:	4630      	mov	r0, r6
 80104bc:	f7ff ffa1 	bl	8010402 <__sfputs_r>
 80104c0:	3001      	adds	r0, #1
 80104c2:	f000 80a7 	beq.w	8010614 <_vfiprintf_r+0x1ec>
 80104c6:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 80104c8:	445a      	add	r2, fp
 80104ca:	9209      	str	r2, [sp, #36]	@ 0x24
 80104cc:	f89a 3000 	ldrb.w	r3, [sl]
 80104d0:	2b00      	cmp	r3, #0
 80104d2:	f000 809f 	beq.w	8010614 <_vfiprintf_r+0x1ec>
 80104d6:	2300      	movs	r3, #0
 80104d8:	f04f 32ff 	mov.w	r2, #4294967295
 80104dc:	e9cd 2305 	strd	r2, r3, [sp, #20]
 80104e0:	f10a 0a01 	add.w	sl, sl, #1
 80104e4:	9304      	str	r3, [sp, #16]
 80104e6:	9307      	str	r3, [sp, #28]
 80104e8:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 80104ec:	931a      	str	r3, [sp, #104]	@ 0x68
 80104ee:	4654      	mov	r4, sl
 80104f0:	2205      	movs	r2, #5
 80104f2:	f814 1b01 	ldrb.w	r1, [r4], #1
 80104f6:	4853      	ldr	r0, [pc, #332]	@ (8010644 <_vfiprintf_r+0x21c>)
 80104f8:	f7ef feaa 	bl	8000250 <memchr>
 80104fc:	9a04      	ldr	r2, [sp, #16]
 80104fe:	b9d8      	cbnz	r0, 8010538 <_vfiprintf_r+0x110>
 8010500:	06d1      	lsls	r1, r2, #27
 8010502:	bf44      	itt	mi
 8010504:	2320      	movmi	r3, #32
 8010506:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 801050a:	0713      	lsls	r3, r2, #28
 801050c:	bf44      	itt	mi
 801050e:	232b      	movmi	r3, #43	@ 0x2b
 8010510:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8010514:	f89a 3000 	ldrb.w	r3, [sl]
 8010518:	2b2a      	cmp	r3, #42	@ 0x2a
 801051a:	d015      	beq.n	8010548 <_vfiprintf_r+0x120>
 801051c:	9a07      	ldr	r2, [sp, #28]
 801051e:	4654      	mov	r4, sl
 8010520:	2000      	movs	r0, #0
 8010522:	f04f 0c0a 	mov.w	ip, #10
 8010526:	4621      	mov	r1, r4
 8010528:	f811 3b01 	ldrb.w	r3, [r1], #1
 801052c:	3b30      	subs	r3, #48	@ 0x30
 801052e:	2b09      	cmp	r3, #9
 8010530:	d94b      	bls.n	80105ca <_vfiprintf_r+0x1a2>
 8010532:	b1b0      	cbz	r0, 8010562 <_vfiprintf_r+0x13a>
 8010534:	9207      	str	r2, [sp, #28]
 8010536:	e014      	b.n	8010562 <_vfiprintf_r+0x13a>
 8010538:	eba0 0308 	sub.w	r3, r0, r8
 801053c:	fa09 f303 	lsl.w	r3, r9, r3
 8010540:	4313      	orrs	r3, r2
 8010542:	9304      	str	r3, [sp, #16]
 8010544:	46a2      	mov	sl, r4
 8010546:	e7d2      	b.n	80104ee <_vfiprintf_r+0xc6>
 8010548:	9b03      	ldr	r3, [sp, #12]
 801054a:	1d19      	adds	r1, r3, #4
 801054c:	681b      	ldr	r3, [r3, #0]
 801054e:	9103      	str	r1, [sp, #12]
 8010550:	2b00      	cmp	r3, #0
 8010552:	bfbb      	ittet	lt
 8010554:	425b      	neglt	r3, r3
 8010556:	f042 0202 	orrlt.w	r2, r2, #2
 801055a:	9307      	strge	r3, [sp, #28]
 801055c:	9307      	strlt	r3, [sp, #28]
 801055e:	bfb8      	it	lt
 8010560:	9204      	strlt	r2, [sp, #16]
 8010562:	7823      	ldrb	r3, [r4, #0]
 8010564:	2b2e      	cmp	r3, #46	@ 0x2e
 8010566:	d10a      	bne.n	801057e <_vfiprintf_r+0x156>
 8010568:	7863      	ldrb	r3, [r4, #1]
 801056a:	2b2a      	cmp	r3, #42	@ 0x2a
 801056c:	d132      	bne.n	80105d4 <_vfiprintf_r+0x1ac>
 801056e:	9b03      	ldr	r3, [sp, #12]
 8010570:	1d1a      	adds	r2, r3, #4
 8010572:	681b      	ldr	r3, [r3, #0]
 8010574:	9203      	str	r2, [sp, #12]
 8010576:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 801057a:	3402      	adds	r4, #2
 801057c:	9305      	str	r3, [sp, #20]
 801057e:	f8df a0d4 	ldr.w	sl, [pc, #212]	@ 8010654 <_vfiprintf_r+0x22c>
 8010582:	7821      	ldrb	r1, [r4, #0]
 8010584:	2203      	movs	r2, #3
 8010586:	4650      	mov	r0, sl
 8010588:	f7ef fe62 	bl	8000250 <memchr>
 801058c:	b138      	cbz	r0, 801059e <_vfiprintf_r+0x176>
 801058e:	9b04      	ldr	r3, [sp, #16]
 8010590:	eba0 000a 	sub.w	r0, r0, sl
 8010594:	2240      	movs	r2, #64	@ 0x40
 8010596:	4082      	lsls	r2, r0
 8010598:	4313      	orrs	r3, r2
 801059a:	3401      	adds	r4, #1
 801059c:	9304      	str	r3, [sp, #16]
 801059e:	f814 1b01 	ldrb.w	r1, [r4], #1
 80105a2:	4829      	ldr	r0, [pc, #164]	@ (8010648 <_vfiprintf_r+0x220>)
 80105a4:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 80105a8:	2206      	movs	r2, #6
 80105aa:	f7ef fe51 	bl	8000250 <memchr>
 80105ae:	2800      	cmp	r0, #0
 80105b0:	d03f      	beq.n	8010632 <_vfiprintf_r+0x20a>
 80105b2:	4b26      	ldr	r3, [pc, #152]	@ (801064c <_vfiprintf_r+0x224>)
 80105b4:	bb1b      	cbnz	r3, 80105fe <_vfiprintf_r+0x1d6>
 80105b6:	9b03      	ldr	r3, [sp, #12]
 80105b8:	3307      	adds	r3, #7
 80105ba:	f023 0307 	bic.w	r3, r3, #7
 80105be:	3308      	adds	r3, #8
 80105c0:	9303      	str	r3, [sp, #12]
 80105c2:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80105c4:	443b      	add	r3, r7
 80105c6:	9309      	str	r3, [sp, #36]	@ 0x24
 80105c8:	e76a      	b.n	80104a0 <_vfiprintf_r+0x78>
 80105ca:	fb0c 3202 	mla	r2, ip, r2, r3
 80105ce:	460c      	mov	r4, r1
 80105d0:	2001      	movs	r0, #1
 80105d2:	e7a8      	b.n	8010526 <_vfiprintf_r+0xfe>
 80105d4:	2300      	movs	r3, #0
 80105d6:	3401      	adds	r4, #1
 80105d8:	9305      	str	r3, [sp, #20]
 80105da:	4619      	mov	r1, r3
 80105dc:	f04f 0c0a 	mov.w	ip, #10
 80105e0:	4620      	mov	r0, r4
 80105e2:	f810 2b01 	ldrb.w	r2, [r0], #1
 80105e6:	3a30      	subs	r2, #48	@ 0x30
 80105e8:	2a09      	cmp	r2, #9
 80105ea:	d903      	bls.n	80105f4 <_vfiprintf_r+0x1cc>
 80105ec:	2b00      	cmp	r3, #0
 80105ee:	d0c6      	beq.n	801057e <_vfiprintf_r+0x156>
 80105f0:	9105      	str	r1, [sp, #20]
 80105f2:	e7c4      	b.n	801057e <_vfiprintf_r+0x156>
 80105f4:	fb0c 2101 	mla	r1, ip, r1, r2
 80105f8:	4604      	mov	r4, r0
 80105fa:	2301      	movs	r3, #1
 80105fc:	e7f0      	b.n	80105e0 <_vfiprintf_r+0x1b8>
 80105fe:	ab03      	add	r3, sp, #12
 8010600:	9300      	str	r3, [sp, #0]
 8010602:	462a      	mov	r2, r5
 8010604:	4b12      	ldr	r3, [pc, #72]	@ (8010650 <_vfiprintf_r+0x228>)
 8010606:	a904      	add	r1, sp, #16
 8010608:	4630      	mov	r0, r6
 801060a:	f3af 8000 	nop.w
 801060e:	4607      	mov	r7, r0
 8010610:	1c78      	adds	r0, r7, #1
 8010612:	d1d6      	bne.n	80105c2 <_vfiprintf_r+0x19a>
 8010614:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8010616:	07d9      	lsls	r1, r3, #31
 8010618:	d405      	bmi.n	8010626 <_vfiprintf_r+0x1fe>
 801061a:	89ab      	ldrh	r3, [r5, #12]
 801061c:	059a      	lsls	r2, r3, #22
 801061e:	d402      	bmi.n	8010626 <_vfiprintf_r+0x1fe>
 8010620:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8010622:	f7ff fcff 	bl	8010024 <__retarget_lock_release_recursive>
 8010626:	89ab      	ldrh	r3, [r5, #12]
 8010628:	065b      	lsls	r3, r3, #25
 801062a:	f53f af1f 	bmi.w	801046c <_vfiprintf_r+0x44>
 801062e:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8010630:	e71e      	b.n	8010470 <_vfiprintf_r+0x48>
 8010632:	ab03      	add	r3, sp, #12
 8010634:	9300      	str	r3, [sp, #0]
 8010636:	462a      	mov	r2, r5
 8010638:	4b05      	ldr	r3, [pc, #20]	@ (8010650 <_vfiprintf_r+0x228>)
 801063a:	a904      	add	r1, sp, #16
 801063c:	4630      	mov	r0, r6
 801063e:	f000 f879 	bl	8010734 <_printf_i>
 8010642:	e7e4      	b.n	801060e <_vfiprintf_r+0x1e6>
 8010644:	0801b33c 	.word	0x0801b33c
 8010648:	0801b346 	.word	0x0801b346
 801064c:	00000000 	.word	0x00000000
 8010650:	08010403 	.word	0x08010403
 8010654:	0801b342 	.word	0x0801b342

08010658 <_printf_common>:
 8010658:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 801065c:	4616      	mov	r6, r2
 801065e:	4698      	mov	r8, r3
 8010660:	688a      	ldr	r2, [r1, #8]
 8010662:	690b      	ldr	r3, [r1, #16]
 8010664:	f8dd 9020 	ldr.w	r9, [sp, #32]
 8010668:	4293      	cmp	r3, r2
 801066a:	bfb8      	it	lt
 801066c:	4613      	movlt	r3, r2
 801066e:	6033      	str	r3, [r6, #0]
 8010670:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 8010674:	4607      	mov	r7, r0
 8010676:	460c      	mov	r4, r1
 8010678:	b10a      	cbz	r2, 801067e <_printf_common+0x26>
 801067a:	3301      	adds	r3, #1
 801067c:	6033      	str	r3, [r6, #0]
 801067e:	6823      	ldr	r3, [r4, #0]
 8010680:	0699      	lsls	r1, r3, #26
 8010682:	bf42      	ittt	mi
 8010684:	6833      	ldrmi	r3, [r6, #0]
 8010686:	3302      	addmi	r3, #2
 8010688:	6033      	strmi	r3, [r6, #0]
 801068a:	6825      	ldr	r5, [r4, #0]
 801068c:	f015 0506 	ands.w	r5, r5, #6
 8010690:	d106      	bne.n	80106a0 <_printf_common+0x48>
 8010692:	f104 0a19 	add.w	sl, r4, #25
 8010696:	68e3      	ldr	r3, [r4, #12]
 8010698:	6832      	ldr	r2, [r6, #0]
 801069a:	1a9b      	subs	r3, r3, r2
 801069c:	42ab      	cmp	r3, r5
 801069e:	dc26      	bgt.n	80106ee <_printf_common+0x96>
 80106a0:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 80106a4:	6822      	ldr	r2, [r4, #0]
 80106a6:	3b00      	subs	r3, #0
 80106a8:	bf18      	it	ne
 80106aa:	2301      	movne	r3, #1
 80106ac:	0692      	lsls	r2, r2, #26
 80106ae:	d42b      	bmi.n	8010708 <_printf_common+0xb0>
 80106b0:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 80106b4:	4641      	mov	r1, r8
 80106b6:	4638      	mov	r0, r7
 80106b8:	47c8      	blx	r9
 80106ba:	3001      	adds	r0, #1
 80106bc:	d01e      	beq.n	80106fc <_printf_common+0xa4>
 80106be:	6823      	ldr	r3, [r4, #0]
 80106c0:	6922      	ldr	r2, [r4, #16]
 80106c2:	f003 0306 	and.w	r3, r3, #6
 80106c6:	2b04      	cmp	r3, #4
 80106c8:	bf02      	ittt	eq
 80106ca:	68e5      	ldreq	r5, [r4, #12]
 80106cc:	6833      	ldreq	r3, [r6, #0]
 80106ce:	1aed      	subeq	r5, r5, r3
 80106d0:	68a3      	ldr	r3, [r4, #8]
 80106d2:	bf0c      	ite	eq
 80106d4:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 80106d8:	2500      	movne	r5, #0
 80106da:	4293      	cmp	r3, r2
 80106dc:	bfc4      	itt	gt
 80106de:	1a9b      	subgt	r3, r3, r2
 80106e0:	18ed      	addgt	r5, r5, r3
 80106e2:	2600      	movs	r6, #0
 80106e4:	341a      	adds	r4, #26
 80106e6:	42b5      	cmp	r5, r6
 80106e8:	d11a      	bne.n	8010720 <_printf_common+0xc8>
 80106ea:	2000      	movs	r0, #0
 80106ec:	e008      	b.n	8010700 <_printf_common+0xa8>
 80106ee:	2301      	movs	r3, #1
 80106f0:	4652      	mov	r2, sl
 80106f2:	4641      	mov	r1, r8
 80106f4:	4638      	mov	r0, r7
 80106f6:	47c8      	blx	r9
 80106f8:	3001      	adds	r0, #1
 80106fa:	d103      	bne.n	8010704 <_printf_common+0xac>
 80106fc:	f04f 30ff 	mov.w	r0, #4294967295
 8010700:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8010704:	3501      	adds	r5, #1
 8010706:	e7c6      	b.n	8010696 <_printf_common+0x3e>
 8010708:	18e1      	adds	r1, r4, r3
 801070a:	1c5a      	adds	r2, r3, #1
 801070c:	2030      	movs	r0, #48	@ 0x30
 801070e:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 8010712:	4422      	add	r2, r4
 8010714:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 8010718:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 801071c:	3302      	adds	r3, #2
 801071e:	e7c7      	b.n	80106b0 <_printf_common+0x58>
 8010720:	2301      	movs	r3, #1
 8010722:	4622      	mov	r2, r4
 8010724:	4641      	mov	r1, r8
 8010726:	4638      	mov	r0, r7
 8010728:	47c8      	blx	r9
 801072a:	3001      	adds	r0, #1
 801072c:	d0e6      	beq.n	80106fc <_printf_common+0xa4>
 801072e:	3601      	adds	r6, #1
 8010730:	e7d9      	b.n	80106e6 <_printf_common+0x8e>
	...

08010734 <_printf_i>:
 8010734:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8010738:	7e0f      	ldrb	r7, [r1, #24]
 801073a:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 801073c:	2f78      	cmp	r7, #120	@ 0x78
 801073e:	4691      	mov	r9, r2
 8010740:	4680      	mov	r8, r0
 8010742:	460c      	mov	r4, r1
 8010744:	469a      	mov	sl, r3
 8010746:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 801074a:	d807      	bhi.n	801075c <_printf_i+0x28>
 801074c:	2f62      	cmp	r7, #98	@ 0x62
 801074e:	d80a      	bhi.n	8010766 <_printf_i+0x32>
 8010750:	2f00      	cmp	r7, #0
 8010752:	f000 80d2 	beq.w	80108fa <_printf_i+0x1c6>
 8010756:	2f58      	cmp	r7, #88	@ 0x58
 8010758:	f000 80b9 	beq.w	80108ce <_printf_i+0x19a>
 801075c:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8010760:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 8010764:	e03a      	b.n	80107dc <_printf_i+0xa8>
 8010766:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 801076a:	2b15      	cmp	r3, #21
 801076c:	d8f6      	bhi.n	801075c <_printf_i+0x28>
 801076e:	a101      	add	r1, pc, #4	@ (adr r1, 8010774 <_printf_i+0x40>)
 8010770:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8010774:	080107cd 	.word	0x080107cd
 8010778:	080107e1 	.word	0x080107e1
 801077c:	0801075d 	.word	0x0801075d
 8010780:	0801075d 	.word	0x0801075d
 8010784:	0801075d 	.word	0x0801075d
 8010788:	0801075d 	.word	0x0801075d
 801078c:	080107e1 	.word	0x080107e1
 8010790:	0801075d 	.word	0x0801075d
 8010794:	0801075d 	.word	0x0801075d
 8010798:	0801075d 	.word	0x0801075d
 801079c:	0801075d 	.word	0x0801075d
 80107a0:	080108e1 	.word	0x080108e1
 80107a4:	0801080b 	.word	0x0801080b
 80107a8:	0801089b 	.word	0x0801089b
 80107ac:	0801075d 	.word	0x0801075d
 80107b0:	0801075d 	.word	0x0801075d
 80107b4:	08010903 	.word	0x08010903
 80107b8:	0801075d 	.word	0x0801075d
 80107bc:	0801080b 	.word	0x0801080b
 80107c0:	0801075d 	.word	0x0801075d
 80107c4:	0801075d 	.word	0x0801075d
 80107c8:	080108a3 	.word	0x080108a3
 80107cc:	6833      	ldr	r3, [r6, #0]
 80107ce:	1d1a      	adds	r2, r3, #4
 80107d0:	681b      	ldr	r3, [r3, #0]
 80107d2:	6032      	str	r2, [r6, #0]
 80107d4:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 80107d8:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 80107dc:	2301      	movs	r3, #1
 80107de:	e09d      	b.n	801091c <_printf_i+0x1e8>
 80107e0:	6833      	ldr	r3, [r6, #0]
 80107e2:	6820      	ldr	r0, [r4, #0]
 80107e4:	1d19      	adds	r1, r3, #4
 80107e6:	6031      	str	r1, [r6, #0]
 80107e8:	0606      	lsls	r6, r0, #24
 80107ea:	d501      	bpl.n	80107f0 <_printf_i+0xbc>
 80107ec:	681d      	ldr	r5, [r3, #0]
 80107ee:	e003      	b.n	80107f8 <_printf_i+0xc4>
 80107f0:	0645      	lsls	r5, r0, #25
 80107f2:	d5fb      	bpl.n	80107ec <_printf_i+0xb8>
 80107f4:	f9b3 5000 	ldrsh.w	r5, [r3]
 80107f8:	2d00      	cmp	r5, #0
 80107fa:	da03      	bge.n	8010804 <_printf_i+0xd0>
 80107fc:	232d      	movs	r3, #45	@ 0x2d
 80107fe:	426d      	negs	r5, r5
 8010800:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8010804:	4859      	ldr	r0, [pc, #356]	@ (801096c <_printf_i+0x238>)
 8010806:	230a      	movs	r3, #10
 8010808:	e011      	b.n	801082e <_printf_i+0xfa>
 801080a:	6821      	ldr	r1, [r4, #0]
 801080c:	6833      	ldr	r3, [r6, #0]
 801080e:	0608      	lsls	r0, r1, #24
 8010810:	f853 5b04 	ldr.w	r5, [r3], #4
 8010814:	d402      	bmi.n	801081c <_printf_i+0xe8>
 8010816:	0649      	lsls	r1, r1, #25
 8010818:	bf48      	it	mi
 801081a:	b2ad      	uxthmi	r5, r5
 801081c:	2f6f      	cmp	r7, #111	@ 0x6f
 801081e:	4853      	ldr	r0, [pc, #332]	@ (801096c <_printf_i+0x238>)
 8010820:	6033      	str	r3, [r6, #0]
 8010822:	bf14      	ite	ne
 8010824:	230a      	movne	r3, #10
 8010826:	2308      	moveq	r3, #8
 8010828:	2100      	movs	r1, #0
 801082a:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 801082e:	6866      	ldr	r6, [r4, #4]
 8010830:	60a6      	str	r6, [r4, #8]
 8010832:	2e00      	cmp	r6, #0
 8010834:	bfa2      	ittt	ge
 8010836:	6821      	ldrge	r1, [r4, #0]
 8010838:	f021 0104 	bicge.w	r1, r1, #4
 801083c:	6021      	strge	r1, [r4, #0]
 801083e:	b90d      	cbnz	r5, 8010844 <_printf_i+0x110>
 8010840:	2e00      	cmp	r6, #0
 8010842:	d04b      	beq.n	80108dc <_printf_i+0x1a8>
 8010844:	4616      	mov	r6, r2
 8010846:	fbb5 f1f3 	udiv	r1, r5, r3
 801084a:	fb03 5711 	mls	r7, r3, r1, r5
 801084e:	5dc7      	ldrb	r7, [r0, r7]
 8010850:	f806 7d01 	strb.w	r7, [r6, #-1]!
 8010854:	462f      	mov	r7, r5
 8010856:	42bb      	cmp	r3, r7
 8010858:	460d      	mov	r5, r1
 801085a:	d9f4      	bls.n	8010846 <_printf_i+0x112>
 801085c:	2b08      	cmp	r3, #8
 801085e:	d10b      	bne.n	8010878 <_printf_i+0x144>
 8010860:	6823      	ldr	r3, [r4, #0]
 8010862:	07df      	lsls	r7, r3, #31
 8010864:	d508      	bpl.n	8010878 <_printf_i+0x144>
 8010866:	6923      	ldr	r3, [r4, #16]
 8010868:	6861      	ldr	r1, [r4, #4]
 801086a:	4299      	cmp	r1, r3
 801086c:	bfde      	ittt	le
 801086e:	2330      	movle	r3, #48	@ 0x30
 8010870:	f806 3c01 	strble.w	r3, [r6, #-1]
 8010874:	f106 36ff 	addle.w	r6, r6, #4294967295
 8010878:	1b92      	subs	r2, r2, r6
 801087a:	6122      	str	r2, [r4, #16]
 801087c:	f8cd a000 	str.w	sl, [sp]
 8010880:	464b      	mov	r3, r9
 8010882:	aa03      	add	r2, sp, #12
 8010884:	4621      	mov	r1, r4
 8010886:	4640      	mov	r0, r8
 8010888:	f7ff fee6 	bl	8010658 <_printf_common>
 801088c:	3001      	adds	r0, #1
 801088e:	d14a      	bne.n	8010926 <_printf_i+0x1f2>
 8010890:	f04f 30ff 	mov.w	r0, #4294967295
 8010894:	b004      	add	sp, #16
 8010896:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 801089a:	6823      	ldr	r3, [r4, #0]
 801089c:	f043 0320 	orr.w	r3, r3, #32
 80108a0:	6023      	str	r3, [r4, #0]
 80108a2:	4833      	ldr	r0, [pc, #204]	@ (8010970 <_printf_i+0x23c>)
 80108a4:	2778      	movs	r7, #120	@ 0x78
 80108a6:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 80108aa:	6823      	ldr	r3, [r4, #0]
 80108ac:	6831      	ldr	r1, [r6, #0]
 80108ae:	061f      	lsls	r7, r3, #24
 80108b0:	f851 5b04 	ldr.w	r5, [r1], #4
 80108b4:	d402      	bmi.n	80108bc <_printf_i+0x188>
 80108b6:	065f      	lsls	r7, r3, #25
 80108b8:	bf48      	it	mi
 80108ba:	b2ad      	uxthmi	r5, r5
 80108bc:	6031      	str	r1, [r6, #0]
 80108be:	07d9      	lsls	r1, r3, #31
 80108c0:	bf44      	itt	mi
 80108c2:	f043 0320 	orrmi.w	r3, r3, #32
 80108c6:	6023      	strmi	r3, [r4, #0]
 80108c8:	b11d      	cbz	r5, 80108d2 <_printf_i+0x19e>
 80108ca:	2310      	movs	r3, #16
 80108cc:	e7ac      	b.n	8010828 <_printf_i+0xf4>
 80108ce:	4827      	ldr	r0, [pc, #156]	@ (801096c <_printf_i+0x238>)
 80108d0:	e7e9      	b.n	80108a6 <_printf_i+0x172>
 80108d2:	6823      	ldr	r3, [r4, #0]
 80108d4:	f023 0320 	bic.w	r3, r3, #32
 80108d8:	6023      	str	r3, [r4, #0]
 80108da:	e7f6      	b.n	80108ca <_printf_i+0x196>
 80108dc:	4616      	mov	r6, r2
 80108de:	e7bd      	b.n	801085c <_printf_i+0x128>
 80108e0:	6833      	ldr	r3, [r6, #0]
 80108e2:	6825      	ldr	r5, [r4, #0]
 80108e4:	6961      	ldr	r1, [r4, #20]
 80108e6:	1d18      	adds	r0, r3, #4
 80108e8:	6030      	str	r0, [r6, #0]
 80108ea:	062e      	lsls	r6, r5, #24
 80108ec:	681b      	ldr	r3, [r3, #0]
 80108ee:	d501      	bpl.n	80108f4 <_printf_i+0x1c0>
 80108f0:	6019      	str	r1, [r3, #0]
 80108f2:	e002      	b.n	80108fa <_printf_i+0x1c6>
 80108f4:	0668      	lsls	r0, r5, #25
 80108f6:	d5fb      	bpl.n	80108f0 <_printf_i+0x1bc>
 80108f8:	8019      	strh	r1, [r3, #0]
 80108fa:	2300      	movs	r3, #0
 80108fc:	6123      	str	r3, [r4, #16]
 80108fe:	4616      	mov	r6, r2
 8010900:	e7bc      	b.n	801087c <_printf_i+0x148>
 8010902:	6833      	ldr	r3, [r6, #0]
 8010904:	1d1a      	adds	r2, r3, #4
 8010906:	6032      	str	r2, [r6, #0]
 8010908:	681e      	ldr	r6, [r3, #0]
 801090a:	6862      	ldr	r2, [r4, #4]
 801090c:	2100      	movs	r1, #0
 801090e:	4630      	mov	r0, r6
 8010910:	f7ef fc9e 	bl	8000250 <memchr>
 8010914:	b108      	cbz	r0, 801091a <_printf_i+0x1e6>
 8010916:	1b80      	subs	r0, r0, r6
 8010918:	6060      	str	r0, [r4, #4]
 801091a:	6863      	ldr	r3, [r4, #4]
 801091c:	6123      	str	r3, [r4, #16]
 801091e:	2300      	movs	r3, #0
 8010920:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8010924:	e7aa      	b.n	801087c <_printf_i+0x148>
 8010926:	6923      	ldr	r3, [r4, #16]
 8010928:	4632      	mov	r2, r6
 801092a:	4649      	mov	r1, r9
 801092c:	4640      	mov	r0, r8
 801092e:	47d0      	blx	sl
 8010930:	3001      	adds	r0, #1
 8010932:	d0ad      	beq.n	8010890 <_printf_i+0x15c>
 8010934:	6823      	ldr	r3, [r4, #0]
 8010936:	079b      	lsls	r3, r3, #30
 8010938:	d413      	bmi.n	8010962 <_printf_i+0x22e>
 801093a:	68e0      	ldr	r0, [r4, #12]
 801093c:	9b03      	ldr	r3, [sp, #12]
 801093e:	4298      	cmp	r0, r3
 8010940:	bfb8      	it	lt
 8010942:	4618      	movlt	r0, r3
 8010944:	e7a6      	b.n	8010894 <_printf_i+0x160>
 8010946:	2301      	movs	r3, #1
 8010948:	4632      	mov	r2, r6
 801094a:	4649      	mov	r1, r9
 801094c:	4640      	mov	r0, r8
 801094e:	47d0      	blx	sl
 8010950:	3001      	adds	r0, #1
 8010952:	d09d      	beq.n	8010890 <_printf_i+0x15c>
 8010954:	3501      	adds	r5, #1
 8010956:	68e3      	ldr	r3, [r4, #12]
 8010958:	9903      	ldr	r1, [sp, #12]
 801095a:	1a5b      	subs	r3, r3, r1
 801095c:	42ab      	cmp	r3, r5
 801095e:	dcf2      	bgt.n	8010946 <_printf_i+0x212>
 8010960:	e7eb      	b.n	801093a <_printf_i+0x206>
 8010962:	2500      	movs	r5, #0
 8010964:	f104 0619 	add.w	r6, r4, #25
 8010968:	e7f5      	b.n	8010956 <_printf_i+0x222>
 801096a:	bf00      	nop
 801096c:	0801b34d 	.word	0x0801b34d
 8010970:	0801b35e 	.word	0x0801b35e

08010974 <__sflush_r>:
 8010974:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 8010978:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801097c:	0716      	lsls	r6, r2, #28
 801097e:	4605      	mov	r5, r0
 8010980:	460c      	mov	r4, r1
 8010982:	d454      	bmi.n	8010a2e <__sflush_r+0xba>
 8010984:	684b      	ldr	r3, [r1, #4]
 8010986:	2b00      	cmp	r3, #0
 8010988:	dc02      	bgt.n	8010990 <__sflush_r+0x1c>
 801098a:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 801098c:	2b00      	cmp	r3, #0
 801098e:	dd48      	ble.n	8010a22 <__sflush_r+0xae>
 8010990:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 8010992:	2e00      	cmp	r6, #0
 8010994:	d045      	beq.n	8010a22 <__sflush_r+0xae>
 8010996:	2300      	movs	r3, #0
 8010998:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 801099c:	682f      	ldr	r7, [r5, #0]
 801099e:	6a21      	ldr	r1, [r4, #32]
 80109a0:	602b      	str	r3, [r5, #0]
 80109a2:	d030      	beq.n	8010a06 <__sflush_r+0x92>
 80109a4:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 80109a6:	89a3      	ldrh	r3, [r4, #12]
 80109a8:	0759      	lsls	r1, r3, #29
 80109aa:	d505      	bpl.n	80109b8 <__sflush_r+0x44>
 80109ac:	6863      	ldr	r3, [r4, #4]
 80109ae:	1ad2      	subs	r2, r2, r3
 80109b0:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 80109b2:	b10b      	cbz	r3, 80109b8 <__sflush_r+0x44>
 80109b4:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 80109b6:	1ad2      	subs	r2, r2, r3
 80109b8:	2300      	movs	r3, #0
 80109ba:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 80109bc:	6a21      	ldr	r1, [r4, #32]
 80109be:	4628      	mov	r0, r5
 80109c0:	47b0      	blx	r6
 80109c2:	1c43      	adds	r3, r0, #1
 80109c4:	89a3      	ldrh	r3, [r4, #12]
 80109c6:	d106      	bne.n	80109d6 <__sflush_r+0x62>
 80109c8:	6829      	ldr	r1, [r5, #0]
 80109ca:	291d      	cmp	r1, #29
 80109cc:	d82b      	bhi.n	8010a26 <__sflush_r+0xb2>
 80109ce:	4a2a      	ldr	r2, [pc, #168]	@ (8010a78 <__sflush_r+0x104>)
 80109d0:	410a      	asrs	r2, r1
 80109d2:	07d6      	lsls	r6, r2, #31
 80109d4:	d427      	bmi.n	8010a26 <__sflush_r+0xb2>
 80109d6:	2200      	movs	r2, #0
 80109d8:	6062      	str	r2, [r4, #4]
 80109da:	04d9      	lsls	r1, r3, #19
 80109dc:	6922      	ldr	r2, [r4, #16]
 80109de:	6022      	str	r2, [r4, #0]
 80109e0:	d504      	bpl.n	80109ec <__sflush_r+0x78>
 80109e2:	1c42      	adds	r2, r0, #1
 80109e4:	d101      	bne.n	80109ea <__sflush_r+0x76>
 80109e6:	682b      	ldr	r3, [r5, #0]
 80109e8:	b903      	cbnz	r3, 80109ec <__sflush_r+0x78>
 80109ea:	6560      	str	r0, [r4, #84]	@ 0x54
 80109ec:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 80109ee:	602f      	str	r7, [r5, #0]
 80109f0:	b1b9      	cbz	r1, 8010a22 <__sflush_r+0xae>
 80109f2:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 80109f6:	4299      	cmp	r1, r3
 80109f8:	d002      	beq.n	8010a00 <__sflush_r+0x8c>
 80109fa:	4628      	mov	r0, r5
 80109fc:	f7ff fb40 	bl	8010080 <_free_r>
 8010a00:	2300      	movs	r3, #0
 8010a02:	6363      	str	r3, [r4, #52]	@ 0x34
 8010a04:	e00d      	b.n	8010a22 <__sflush_r+0xae>
 8010a06:	2301      	movs	r3, #1
 8010a08:	4628      	mov	r0, r5
 8010a0a:	47b0      	blx	r6
 8010a0c:	4602      	mov	r2, r0
 8010a0e:	1c50      	adds	r0, r2, #1
 8010a10:	d1c9      	bne.n	80109a6 <__sflush_r+0x32>
 8010a12:	682b      	ldr	r3, [r5, #0]
 8010a14:	2b00      	cmp	r3, #0
 8010a16:	d0c6      	beq.n	80109a6 <__sflush_r+0x32>
 8010a18:	2b1d      	cmp	r3, #29
 8010a1a:	d001      	beq.n	8010a20 <__sflush_r+0xac>
 8010a1c:	2b16      	cmp	r3, #22
 8010a1e:	d11e      	bne.n	8010a5e <__sflush_r+0xea>
 8010a20:	602f      	str	r7, [r5, #0]
 8010a22:	2000      	movs	r0, #0
 8010a24:	e022      	b.n	8010a6c <__sflush_r+0xf8>
 8010a26:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8010a2a:	b21b      	sxth	r3, r3
 8010a2c:	e01b      	b.n	8010a66 <__sflush_r+0xf2>
 8010a2e:	690f      	ldr	r7, [r1, #16]
 8010a30:	2f00      	cmp	r7, #0
 8010a32:	d0f6      	beq.n	8010a22 <__sflush_r+0xae>
 8010a34:	0793      	lsls	r3, r2, #30
 8010a36:	680e      	ldr	r6, [r1, #0]
 8010a38:	bf08      	it	eq
 8010a3a:	694b      	ldreq	r3, [r1, #20]
 8010a3c:	600f      	str	r7, [r1, #0]
 8010a3e:	bf18      	it	ne
 8010a40:	2300      	movne	r3, #0
 8010a42:	eba6 0807 	sub.w	r8, r6, r7
 8010a46:	608b      	str	r3, [r1, #8]
 8010a48:	f1b8 0f00 	cmp.w	r8, #0
 8010a4c:	dde9      	ble.n	8010a22 <__sflush_r+0xae>
 8010a4e:	6a21      	ldr	r1, [r4, #32]
 8010a50:	6aa6      	ldr	r6, [r4, #40]	@ 0x28
 8010a52:	4643      	mov	r3, r8
 8010a54:	463a      	mov	r2, r7
 8010a56:	4628      	mov	r0, r5
 8010a58:	47b0      	blx	r6
 8010a5a:	2800      	cmp	r0, #0
 8010a5c:	dc08      	bgt.n	8010a70 <__sflush_r+0xfc>
 8010a5e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8010a62:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8010a66:	81a3      	strh	r3, [r4, #12]
 8010a68:	f04f 30ff 	mov.w	r0, #4294967295
 8010a6c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8010a70:	4407      	add	r7, r0
 8010a72:	eba8 0800 	sub.w	r8, r8, r0
 8010a76:	e7e7      	b.n	8010a48 <__sflush_r+0xd4>
 8010a78:	dfbffffe 	.word	0xdfbffffe

08010a7c <_fflush_r>:
 8010a7c:	b538      	push	{r3, r4, r5, lr}
 8010a7e:	690b      	ldr	r3, [r1, #16]
 8010a80:	4605      	mov	r5, r0
 8010a82:	460c      	mov	r4, r1
 8010a84:	b913      	cbnz	r3, 8010a8c <_fflush_r+0x10>
 8010a86:	2500      	movs	r5, #0
 8010a88:	4628      	mov	r0, r5
 8010a8a:	bd38      	pop	{r3, r4, r5, pc}
 8010a8c:	b118      	cbz	r0, 8010a96 <_fflush_r+0x1a>
 8010a8e:	6a03      	ldr	r3, [r0, #32]
 8010a90:	b90b      	cbnz	r3, 8010a96 <_fflush_r+0x1a>
 8010a92:	f7ff f991 	bl	800fdb8 <__sinit>
 8010a96:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8010a9a:	2b00      	cmp	r3, #0
 8010a9c:	d0f3      	beq.n	8010a86 <_fflush_r+0xa>
 8010a9e:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 8010aa0:	07d0      	lsls	r0, r2, #31
 8010aa2:	d404      	bmi.n	8010aae <_fflush_r+0x32>
 8010aa4:	0599      	lsls	r1, r3, #22
 8010aa6:	d402      	bmi.n	8010aae <_fflush_r+0x32>
 8010aa8:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8010aaa:	f7ff faba 	bl	8010022 <__retarget_lock_acquire_recursive>
 8010aae:	4628      	mov	r0, r5
 8010ab0:	4621      	mov	r1, r4
 8010ab2:	f7ff ff5f 	bl	8010974 <__sflush_r>
 8010ab6:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8010ab8:	07da      	lsls	r2, r3, #31
 8010aba:	4605      	mov	r5, r0
 8010abc:	d4e4      	bmi.n	8010a88 <_fflush_r+0xc>
 8010abe:	89a3      	ldrh	r3, [r4, #12]
 8010ac0:	059b      	lsls	r3, r3, #22
 8010ac2:	d4e1      	bmi.n	8010a88 <_fflush_r+0xc>
 8010ac4:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8010ac6:	f7ff faad 	bl	8010024 <__retarget_lock_release_recursive>
 8010aca:	e7dd      	b.n	8010a88 <_fflush_r+0xc>

08010acc <fiprintf>:
 8010acc:	b40e      	push	{r1, r2, r3}
 8010ace:	b503      	push	{r0, r1, lr}
 8010ad0:	4601      	mov	r1, r0
 8010ad2:	ab03      	add	r3, sp, #12
 8010ad4:	4805      	ldr	r0, [pc, #20]	@ (8010aec <fiprintf+0x20>)
 8010ad6:	f853 2b04 	ldr.w	r2, [r3], #4
 8010ada:	6800      	ldr	r0, [r0, #0]
 8010adc:	9301      	str	r3, [sp, #4]
 8010ade:	f7ff fca3 	bl	8010428 <_vfiprintf_r>
 8010ae2:	b002      	add	sp, #8
 8010ae4:	f85d eb04 	ldr.w	lr, [sp], #4
 8010ae8:	b003      	add	sp, #12
 8010aea:	4770      	bx	lr
 8010aec:	200289f0 	.word	0x200289f0

08010af0 <__swbuf_r>:
 8010af0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8010af2:	460e      	mov	r6, r1
 8010af4:	4614      	mov	r4, r2
 8010af6:	4605      	mov	r5, r0
 8010af8:	b118      	cbz	r0, 8010b02 <__swbuf_r+0x12>
 8010afa:	6a03      	ldr	r3, [r0, #32]
 8010afc:	b90b      	cbnz	r3, 8010b02 <__swbuf_r+0x12>
 8010afe:	f7ff f95b 	bl	800fdb8 <__sinit>
 8010b02:	69a3      	ldr	r3, [r4, #24]
 8010b04:	60a3      	str	r3, [r4, #8]
 8010b06:	89a3      	ldrh	r3, [r4, #12]
 8010b08:	071a      	lsls	r2, r3, #28
 8010b0a:	d501      	bpl.n	8010b10 <__swbuf_r+0x20>
 8010b0c:	6923      	ldr	r3, [r4, #16]
 8010b0e:	b943      	cbnz	r3, 8010b22 <__swbuf_r+0x32>
 8010b10:	4621      	mov	r1, r4
 8010b12:	4628      	mov	r0, r5
 8010b14:	f000 f82a 	bl	8010b6c <__swsetup_r>
 8010b18:	b118      	cbz	r0, 8010b22 <__swbuf_r+0x32>
 8010b1a:	f04f 37ff 	mov.w	r7, #4294967295
 8010b1e:	4638      	mov	r0, r7
 8010b20:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8010b22:	6823      	ldr	r3, [r4, #0]
 8010b24:	6922      	ldr	r2, [r4, #16]
 8010b26:	1a98      	subs	r0, r3, r2
 8010b28:	6963      	ldr	r3, [r4, #20]
 8010b2a:	b2f6      	uxtb	r6, r6
 8010b2c:	4283      	cmp	r3, r0
 8010b2e:	4637      	mov	r7, r6
 8010b30:	dc05      	bgt.n	8010b3e <__swbuf_r+0x4e>
 8010b32:	4621      	mov	r1, r4
 8010b34:	4628      	mov	r0, r5
 8010b36:	f7ff ffa1 	bl	8010a7c <_fflush_r>
 8010b3a:	2800      	cmp	r0, #0
 8010b3c:	d1ed      	bne.n	8010b1a <__swbuf_r+0x2a>
 8010b3e:	68a3      	ldr	r3, [r4, #8]
 8010b40:	3b01      	subs	r3, #1
 8010b42:	60a3      	str	r3, [r4, #8]
 8010b44:	6823      	ldr	r3, [r4, #0]
 8010b46:	1c5a      	adds	r2, r3, #1
 8010b48:	6022      	str	r2, [r4, #0]
 8010b4a:	701e      	strb	r6, [r3, #0]
 8010b4c:	6962      	ldr	r2, [r4, #20]
 8010b4e:	1c43      	adds	r3, r0, #1
 8010b50:	429a      	cmp	r2, r3
 8010b52:	d004      	beq.n	8010b5e <__swbuf_r+0x6e>
 8010b54:	89a3      	ldrh	r3, [r4, #12]
 8010b56:	07db      	lsls	r3, r3, #31
 8010b58:	d5e1      	bpl.n	8010b1e <__swbuf_r+0x2e>
 8010b5a:	2e0a      	cmp	r6, #10
 8010b5c:	d1df      	bne.n	8010b1e <__swbuf_r+0x2e>
 8010b5e:	4621      	mov	r1, r4
 8010b60:	4628      	mov	r0, r5
 8010b62:	f7ff ff8b 	bl	8010a7c <_fflush_r>
 8010b66:	2800      	cmp	r0, #0
 8010b68:	d0d9      	beq.n	8010b1e <__swbuf_r+0x2e>
 8010b6a:	e7d6      	b.n	8010b1a <__swbuf_r+0x2a>

08010b6c <__swsetup_r>:
 8010b6c:	b538      	push	{r3, r4, r5, lr}
 8010b6e:	4b29      	ldr	r3, [pc, #164]	@ (8010c14 <__swsetup_r+0xa8>)
 8010b70:	4605      	mov	r5, r0
 8010b72:	6818      	ldr	r0, [r3, #0]
 8010b74:	460c      	mov	r4, r1
 8010b76:	b118      	cbz	r0, 8010b80 <__swsetup_r+0x14>
 8010b78:	6a03      	ldr	r3, [r0, #32]
 8010b7a:	b90b      	cbnz	r3, 8010b80 <__swsetup_r+0x14>
 8010b7c:	f7ff f91c 	bl	800fdb8 <__sinit>
 8010b80:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8010b84:	0719      	lsls	r1, r3, #28
 8010b86:	d422      	bmi.n	8010bce <__swsetup_r+0x62>
 8010b88:	06da      	lsls	r2, r3, #27
 8010b8a:	d407      	bmi.n	8010b9c <__swsetup_r+0x30>
 8010b8c:	2209      	movs	r2, #9
 8010b8e:	602a      	str	r2, [r5, #0]
 8010b90:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8010b94:	81a3      	strh	r3, [r4, #12]
 8010b96:	f04f 30ff 	mov.w	r0, #4294967295
 8010b9a:	e033      	b.n	8010c04 <__swsetup_r+0x98>
 8010b9c:	0758      	lsls	r0, r3, #29
 8010b9e:	d512      	bpl.n	8010bc6 <__swsetup_r+0x5a>
 8010ba0:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8010ba2:	b141      	cbz	r1, 8010bb6 <__swsetup_r+0x4a>
 8010ba4:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 8010ba8:	4299      	cmp	r1, r3
 8010baa:	d002      	beq.n	8010bb2 <__swsetup_r+0x46>
 8010bac:	4628      	mov	r0, r5
 8010bae:	f7ff fa67 	bl	8010080 <_free_r>
 8010bb2:	2300      	movs	r3, #0
 8010bb4:	6363      	str	r3, [r4, #52]	@ 0x34
 8010bb6:	89a3      	ldrh	r3, [r4, #12]
 8010bb8:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 8010bbc:	81a3      	strh	r3, [r4, #12]
 8010bbe:	2300      	movs	r3, #0
 8010bc0:	6063      	str	r3, [r4, #4]
 8010bc2:	6923      	ldr	r3, [r4, #16]
 8010bc4:	6023      	str	r3, [r4, #0]
 8010bc6:	89a3      	ldrh	r3, [r4, #12]
 8010bc8:	f043 0308 	orr.w	r3, r3, #8
 8010bcc:	81a3      	strh	r3, [r4, #12]
 8010bce:	6923      	ldr	r3, [r4, #16]
 8010bd0:	b94b      	cbnz	r3, 8010be6 <__swsetup_r+0x7a>
 8010bd2:	89a3      	ldrh	r3, [r4, #12]
 8010bd4:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 8010bd8:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8010bdc:	d003      	beq.n	8010be6 <__swsetup_r+0x7a>
 8010bde:	4621      	mov	r1, r4
 8010be0:	4628      	mov	r0, r5
 8010be2:	f000 f860 	bl	8010ca6 <__smakebuf_r>
 8010be6:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8010bea:	f013 0201 	ands.w	r2, r3, #1
 8010bee:	d00a      	beq.n	8010c06 <__swsetup_r+0x9a>
 8010bf0:	2200      	movs	r2, #0
 8010bf2:	60a2      	str	r2, [r4, #8]
 8010bf4:	6962      	ldr	r2, [r4, #20]
 8010bf6:	4252      	negs	r2, r2
 8010bf8:	61a2      	str	r2, [r4, #24]
 8010bfa:	6922      	ldr	r2, [r4, #16]
 8010bfc:	b942      	cbnz	r2, 8010c10 <__swsetup_r+0xa4>
 8010bfe:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 8010c02:	d1c5      	bne.n	8010b90 <__swsetup_r+0x24>
 8010c04:	bd38      	pop	{r3, r4, r5, pc}
 8010c06:	0799      	lsls	r1, r3, #30
 8010c08:	bf58      	it	pl
 8010c0a:	6962      	ldrpl	r2, [r4, #20]
 8010c0c:	60a2      	str	r2, [r4, #8]
 8010c0e:	e7f4      	b.n	8010bfa <__swsetup_r+0x8e>
 8010c10:	2000      	movs	r0, #0
 8010c12:	e7f7      	b.n	8010c04 <__swsetup_r+0x98>
 8010c14:	200289f0 	.word	0x200289f0

08010c18 <memmove>:
 8010c18:	4288      	cmp	r0, r1
 8010c1a:	b510      	push	{r4, lr}
 8010c1c:	eb01 0402 	add.w	r4, r1, r2
 8010c20:	d902      	bls.n	8010c28 <memmove+0x10>
 8010c22:	4284      	cmp	r4, r0
 8010c24:	4623      	mov	r3, r4
 8010c26:	d807      	bhi.n	8010c38 <memmove+0x20>
 8010c28:	1e43      	subs	r3, r0, #1
 8010c2a:	42a1      	cmp	r1, r4
 8010c2c:	d008      	beq.n	8010c40 <memmove+0x28>
 8010c2e:	f811 2b01 	ldrb.w	r2, [r1], #1
 8010c32:	f803 2f01 	strb.w	r2, [r3, #1]!
 8010c36:	e7f8      	b.n	8010c2a <memmove+0x12>
 8010c38:	4402      	add	r2, r0
 8010c3a:	4601      	mov	r1, r0
 8010c3c:	428a      	cmp	r2, r1
 8010c3e:	d100      	bne.n	8010c42 <memmove+0x2a>
 8010c40:	bd10      	pop	{r4, pc}
 8010c42:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8010c46:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8010c4a:	e7f7      	b.n	8010c3c <memmove+0x24>

08010c4c <abort>:
 8010c4c:	b508      	push	{r3, lr}
 8010c4e:	2006      	movs	r0, #6
 8010c50:	f000 f88e 	bl	8010d70 <raise>
 8010c54:	2001      	movs	r0, #1
 8010c56:	f000 f909 	bl	8010e6c <_exit>

08010c5a <__swhatbuf_r>:
 8010c5a:	b570      	push	{r4, r5, r6, lr}
 8010c5c:	460c      	mov	r4, r1
 8010c5e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8010c62:	2900      	cmp	r1, #0
 8010c64:	b096      	sub	sp, #88	@ 0x58
 8010c66:	4615      	mov	r5, r2
 8010c68:	461e      	mov	r6, r3
 8010c6a:	da0d      	bge.n	8010c88 <__swhatbuf_r+0x2e>
 8010c6c:	89a3      	ldrh	r3, [r4, #12]
 8010c6e:	f013 0f80 	tst.w	r3, #128	@ 0x80
 8010c72:	f04f 0100 	mov.w	r1, #0
 8010c76:	bf14      	ite	ne
 8010c78:	2340      	movne	r3, #64	@ 0x40
 8010c7a:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 8010c7e:	2000      	movs	r0, #0
 8010c80:	6031      	str	r1, [r6, #0]
 8010c82:	602b      	str	r3, [r5, #0]
 8010c84:	b016      	add	sp, #88	@ 0x58
 8010c86:	bd70      	pop	{r4, r5, r6, pc}
 8010c88:	466a      	mov	r2, sp
 8010c8a:	f000 f879 	bl	8010d80 <_fstat_r>
 8010c8e:	2800      	cmp	r0, #0
 8010c90:	dbec      	blt.n	8010c6c <__swhatbuf_r+0x12>
 8010c92:	9901      	ldr	r1, [sp, #4]
 8010c94:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 8010c98:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 8010c9c:	4259      	negs	r1, r3
 8010c9e:	4159      	adcs	r1, r3
 8010ca0:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8010ca4:	e7eb      	b.n	8010c7e <__swhatbuf_r+0x24>

08010ca6 <__smakebuf_r>:
 8010ca6:	898b      	ldrh	r3, [r1, #12]
 8010ca8:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8010caa:	079d      	lsls	r5, r3, #30
 8010cac:	4606      	mov	r6, r0
 8010cae:	460c      	mov	r4, r1
 8010cb0:	d507      	bpl.n	8010cc2 <__smakebuf_r+0x1c>
 8010cb2:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 8010cb6:	6023      	str	r3, [r4, #0]
 8010cb8:	6123      	str	r3, [r4, #16]
 8010cba:	2301      	movs	r3, #1
 8010cbc:	6163      	str	r3, [r4, #20]
 8010cbe:	b003      	add	sp, #12
 8010cc0:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8010cc2:	ab01      	add	r3, sp, #4
 8010cc4:	466a      	mov	r2, sp
 8010cc6:	f7ff ffc8 	bl	8010c5a <__swhatbuf_r>
 8010cca:	9f00      	ldr	r7, [sp, #0]
 8010ccc:	4605      	mov	r5, r0
 8010cce:	4639      	mov	r1, r7
 8010cd0:	4630      	mov	r0, r6
 8010cd2:	f7fe fe3b 	bl	800f94c <_malloc_r>
 8010cd6:	b948      	cbnz	r0, 8010cec <__smakebuf_r+0x46>
 8010cd8:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8010cdc:	059a      	lsls	r2, r3, #22
 8010cde:	d4ee      	bmi.n	8010cbe <__smakebuf_r+0x18>
 8010ce0:	f023 0303 	bic.w	r3, r3, #3
 8010ce4:	f043 0302 	orr.w	r3, r3, #2
 8010ce8:	81a3      	strh	r3, [r4, #12]
 8010cea:	e7e2      	b.n	8010cb2 <__smakebuf_r+0xc>
 8010cec:	89a3      	ldrh	r3, [r4, #12]
 8010cee:	6020      	str	r0, [r4, #0]
 8010cf0:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8010cf4:	81a3      	strh	r3, [r4, #12]
 8010cf6:	9b01      	ldr	r3, [sp, #4]
 8010cf8:	e9c4 0704 	strd	r0, r7, [r4, #16]
 8010cfc:	b15b      	cbz	r3, 8010d16 <__smakebuf_r+0x70>
 8010cfe:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8010d02:	4630      	mov	r0, r6
 8010d04:	f000 f84e 	bl	8010da4 <_isatty_r>
 8010d08:	b128      	cbz	r0, 8010d16 <__smakebuf_r+0x70>
 8010d0a:	89a3      	ldrh	r3, [r4, #12]
 8010d0c:	f023 0303 	bic.w	r3, r3, #3
 8010d10:	f043 0301 	orr.w	r3, r3, #1
 8010d14:	81a3      	strh	r3, [r4, #12]
 8010d16:	89a3      	ldrh	r3, [r4, #12]
 8010d18:	431d      	orrs	r5, r3
 8010d1a:	81a5      	strh	r5, [r4, #12]
 8010d1c:	e7cf      	b.n	8010cbe <__smakebuf_r+0x18>

08010d1e <_raise_r>:
 8010d1e:	291f      	cmp	r1, #31
 8010d20:	b538      	push	{r3, r4, r5, lr}
 8010d22:	4605      	mov	r5, r0
 8010d24:	460c      	mov	r4, r1
 8010d26:	d904      	bls.n	8010d32 <_raise_r+0x14>
 8010d28:	2316      	movs	r3, #22
 8010d2a:	6003      	str	r3, [r0, #0]
 8010d2c:	f04f 30ff 	mov.w	r0, #4294967295
 8010d30:	bd38      	pop	{r3, r4, r5, pc}
 8010d32:	6bc2      	ldr	r2, [r0, #60]	@ 0x3c
 8010d34:	b112      	cbz	r2, 8010d3c <_raise_r+0x1e>
 8010d36:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 8010d3a:	b94b      	cbnz	r3, 8010d50 <_raise_r+0x32>
 8010d3c:	4628      	mov	r0, r5
 8010d3e:	f000 f853 	bl	8010de8 <_getpid_r>
 8010d42:	4622      	mov	r2, r4
 8010d44:	4601      	mov	r1, r0
 8010d46:	4628      	mov	r0, r5
 8010d48:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8010d4c:	f000 b83a 	b.w	8010dc4 <_kill_r>
 8010d50:	2b01      	cmp	r3, #1
 8010d52:	d00a      	beq.n	8010d6a <_raise_r+0x4c>
 8010d54:	1c59      	adds	r1, r3, #1
 8010d56:	d103      	bne.n	8010d60 <_raise_r+0x42>
 8010d58:	2316      	movs	r3, #22
 8010d5a:	6003      	str	r3, [r0, #0]
 8010d5c:	2001      	movs	r0, #1
 8010d5e:	e7e7      	b.n	8010d30 <_raise_r+0x12>
 8010d60:	2100      	movs	r1, #0
 8010d62:	f842 1024 	str.w	r1, [r2, r4, lsl #2]
 8010d66:	4620      	mov	r0, r4
 8010d68:	4798      	blx	r3
 8010d6a:	2000      	movs	r0, #0
 8010d6c:	e7e0      	b.n	8010d30 <_raise_r+0x12>
	...

08010d70 <raise>:
 8010d70:	4b02      	ldr	r3, [pc, #8]	@ (8010d7c <raise+0xc>)
 8010d72:	4601      	mov	r1, r0
 8010d74:	6818      	ldr	r0, [r3, #0]
 8010d76:	f7ff bfd2 	b.w	8010d1e <_raise_r>
 8010d7a:	bf00      	nop
 8010d7c:	200289f0 	.word	0x200289f0

08010d80 <_fstat_r>:
 8010d80:	b538      	push	{r3, r4, r5, lr}
 8010d82:	4d07      	ldr	r5, [pc, #28]	@ (8010da0 <_fstat_r+0x20>)
 8010d84:	2300      	movs	r3, #0
 8010d86:	4604      	mov	r4, r0
 8010d88:	4608      	mov	r0, r1
 8010d8a:	4611      	mov	r1, r2
 8010d8c:	602b      	str	r3, [r5, #0]
 8010d8e:	f000 f835 	bl	8010dfc <_fstat>
 8010d92:	1c43      	adds	r3, r0, #1
 8010d94:	d102      	bne.n	8010d9c <_fstat_r+0x1c>
 8010d96:	682b      	ldr	r3, [r5, #0]
 8010d98:	b103      	cbz	r3, 8010d9c <_fstat_r+0x1c>
 8010d9a:	6023      	str	r3, [r4, #0]
 8010d9c:	bd38      	pop	{r3, r4, r5, pc}
 8010d9e:	bf00      	nop
 8010da0:	20030324 	.word	0x20030324

08010da4 <_isatty_r>:
 8010da4:	b538      	push	{r3, r4, r5, lr}
 8010da6:	4d06      	ldr	r5, [pc, #24]	@ (8010dc0 <_isatty_r+0x1c>)
 8010da8:	2300      	movs	r3, #0
 8010daa:	4604      	mov	r4, r0
 8010dac:	4608      	mov	r0, r1
 8010dae:	602b      	str	r3, [r5, #0]
 8010db0:	f000 f834 	bl	8010e1c <_isatty>
 8010db4:	1c43      	adds	r3, r0, #1
 8010db6:	d102      	bne.n	8010dbe <_isatty_r+0x1a>
 8010db8:	682b      	ldr	r3, [r5, #0]
 8010dba:	b103      	cbz	r3, 8010dbe <_isatty_r+0x1a>
 8010dbc:	6023      	str	r3, [r4, #0]
 8010dbe:	bd38      	pop	{r3, r4, r5, pc}
 8010dc0:	20030324 	.word	0x20030324

08010dc4 <_kill_r>:
 8010dc4:	b538      	push	{r3, r4, r5, lr}
 8010dc6:	4d07      	ldr	r5, [pc, #28]	@ (8010de4 <_kill_r+0x20>)
 8010dc8:	2300      	movs	r3, #0
 8010dca:	4604      	mov	r4, r0
 8010dcc:	4608      	mov	r0, r1
 8010dce:	4611      	mov	r1, r2
 8010dd0:	602b      	str	r3, [r5, #0]
 8010dd2:	f000 f82b 	bl	8010e2c <_kill>
 8010dd6:	1c43      	adds	r3, r0, #1
 8010dd8:	d102      	bne.n	8010de0 <_kill_r+0x1c>
 8010dda:	682b      	ldr	r3, [r5, #0]
 8010ddc:	b103      	cbz	r3, 8010de0 <_kill_r+0x1c>
 8010dde:	6023      	str	r3, [r4, #0]
 8010de0:	bd38      	pop	{r3, r4, r5, pc}
 8010de2:	bf00      	nop
 8010de4:	20030324 	.word	0x20030324

08010de8 <_getpid_r>:
 8010de8:	f000 b810 	b.w	8010e0c <_getpid>

08010dec <_close>:
 8010dec:	4b02      	ldr	r3, [pc, #8]	@ (8010df8 <_close+0xc>)
 8010dee:	2258      	movs	r2, #88	@ 0x58
 8010df0:	601a      	str	r2, [r3, #0]
 8010df2:	f04f 30ff 	mov.w	r0, #4294967295
 8010df6:	4770      	bx	lr
 8010df8:	20030324 	.word	0x20030324

08010dfc <_fstat>:
 8010dfc:	4b02      	ldr	r3, [pc, #8]	@ (8010e08 <_fstat+0xc>)
 8010dfe:	2258      	movs	r2, #88	@ 0x58
 8010e00:	601a      	str	r2, [r3, #0]
 8010e02:	f04f 30ff 	mov.w	r0, #4294967295
 8010e06:	4770      	bx	lr
 8010e08:	20030324 	.word	0x20030324

08010e0c <_getpid>:
 8010e0c:	4b02      	ldr	r3, [pc, #8]	@ (8010e18 <_getpid+0xc>)
 8010e0e:	2258      	movs	r2, #88	@ 0x58
 8010e10:	601a      	str	r2, [r3, #0]
 8010e12:	f04f 30ff 	mov.w	r0, #4294967295
 8010e16:	4770      	bx	lr
 8010e18:	20030324 	.word	0x20030324

08010e1c <_isatty>:
 8010e1c:	4b02      	ldr	r3, [pc, #8]	@ (8010e28 <_isatty+0xc>)
 8010e1e:	2258      	movs	r2, #88	@ 0x58
 8010e20:	601a      	str	r2, [r3, #0]
 8010e22:	2000      	movs	r0, #0
 8010e24:	4770      	bx	lr
 8010e26:	bf00      	nop
 8010e28:	20030324 	.word	0x20030324

08010e2c <_kill>:
 8010e2c:	4b02      	ldr	r3, [pc, #8]	@ (8010e38 <_kill+0xc>)
 8010e2e:	2258      	movs	r2, #88	@ 0x58
 8010e30:	601a      	str	r2, [r3, #0]
 8010e32:	f04f 30ff 	mov.w	r0, #4294967295
 8010e36:	4770      	bx	lr
 8010e38:	20030324 	.word	0x20030324

08010e3c <_lseek>:
 8010e3c:	4b02      	ldr	r3, [pc, #8]	@ (8010e48 <_lseek+0xc>)
 8010e3e:	2258      	movs	r2, #88	@ 0x58
 8010e40:	601a      	str	r2, [r3, #0]
 8010e42:	f04f 30ff 	mov.w	r0, #4294967295
 8010e46:	4770      	bx	lr
 8010e48:	20030324 	.word	0x20030324

08010e4c <_read>:
 8010e4c:	4b02      	ldr	r3, [pc, #8]	@ (8010e58 <_read+0xc>)
 8010e4e:	2258      	movs	r2, #88	@ 0x58
 8010e50:	601a      	str	r2, [r3, #0]
 8010e52:	f04f 30ff 	mov.w	r0, #4294967295
 8010e56:	4770      	bx	lr
 8010e58:	20030324 	.word	0x20030324

08010e5c <_write>:
 8010e5c:	4b02      	ldr	r3, [pc, #8]	@ (8010e68 <_write+0xc>)
 8010e5e:	2258      	movs	r2, #88	@ 0x58
 8010e60:	601a      	str	r2, [r3, #0]
 8010e62:	f04f 30ff 	mov.w	r0, #4294967295
 8010e66:	4770      	bx	lr
 8010e68:	20030324 	.word	0x20030324

08010e6c <_exit>:
 8010e6c:	e7fe      	b.n	8010e6c <_exit>
	...

08010e70 <_init>:
 8010e70:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8010e72:	bf00      	nop
 8010e74:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8010e76:	bc08      	pop	{r3}
 8010e78:	469e      	mov	lr, r3
 8010e7a:	4770      	bx	lr

08010e7c <_fini>:
 8010e7c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8010e7e:	bf00      	nop
 8010e80:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8010e82:	bc08      	pop	{r3}
 8010e84:	469e      	mov	lr, r3
 8010e86:	4770      	bx	lr
